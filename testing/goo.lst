     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "-"
   667 000008B5 0100000000000000        	dq 1
   668 000008BD 2D                      	db 0x2D
   669                                  	; L_constants + 2238:
   670 000008BE 03                      	db T_string	; "real"
   671 000008BF 0400000000000000        	dq 4
   672 000008C7 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   673                                  	; L_constants + 2251:
   674 000008CB 41                      	db T_interned_symbol	; -
   675 000008CC [B408000000000000]      	dq L_constants + 2228
   676                                  	; L_constants + 2260:
   677 000008D4 03                      	db T_string	; "*"
   678 000008D5 0100000000000000        	dq 1
   679 000008DD 2A                      	db 0x2A
   680                                  	; L_constants + 2270:
   681 000008DE 11                      	db T_integer	; 1
   682 000008DF 0100000000000000        	dq 1
   683                                  	; L_constants + 2279:
   684 000008E7 41                      	db T_interned_symbol	; *
   685 000008E8 [D408000000000000]      	dq L_constants + 2260
   686                                  	; L_constants + 2288:
   687 000008F0 03                      	db T_string	; "/"
   688 000008F1 0100000000000000        	dq 1
   689 000008F9 2F                      	db 0x2F
   690                                  	; L_constants + 2298:
   691 000008FA 41                      	db T_interned_symbol	; /
   692 000008FB [F008000000000000]      	dq L_constants + 2288
   693                                  	; L_constants + 2307:
   694 00000903 03                      	db T_string	; "fact"
   695 00000904 0400000000000000        	dq 4
   696 0000090C 66616374                	db 0x66, 0x61, 0x63, 0x74
   697                                  	; L_constants + 2320:
   698 00000910 03                      	db T_string	; "<"
   699 00000911 0100000000000000        	dq 1
   700 00000919 3C                      	db 0x3C
   701                                  	; L_constants + 2330:
   702 0000091A 03                      	db T_string	; "<="
   703 0000091B 0200000000000000        	dq 2
   704 00000923 3C3D                    	db 0x3C, 0x3D
   705                                  	; L_constants + 2341:
   706 00000925 03                      	db T_string	; ">"
   707 00000926 0100000000000000        	dq 1
   708 0000092E 3E                      	db 0x3E
   709                                  	; L_constants + 2351:
   710 0000092F 03                      	db T_string	; ">="
   711 00000930 0200000000000000        	dq 2
   712 00000938 3E3D                    	db 0x3E, 0x3D
   713                                  	; L_constants + 2362:
   714 0000093A 03                      	db T_string	; "="
   715 0000093B 0100000000000000        	dq 1
   716 00000943 3D                      	db 0x3D
   717                                  	; L_constants + 2372:
   718 00000944 03                      	db T_string	; "generic-comparator"
   719 00000945 1200000000000000        	dq 18
   720 0000094D 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   721 00000955 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   722 0000095D 6F72                    	db 0x6F, 0x72
   723                                  	; L_constants + 2399:
   724 0000095F 41                      	db T_interned_symbol	; generic-comparator
   725 00000960 [4409000000000000]      	dq L_constants + 2372
   726                                  	; L_constants + 2408:
   727 00000968 03                      	db T_string	; "all the arguments m...
   728 00000969 2100000000000000        	dq 33
   729 00000971 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   730 00000979 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   731 00000981 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   732 00000989 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   733 00000991 73                      	db 0x73
   734                                  	; L_constants + 2450:
   735 00000992 03                      	db T_string	; "char<?"
   736 00000993 0600000000000000        	dq 6
   737 0000099B 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   738                                  	; L_constants + 2465:
   739 000009A1 03                      	db T_string	; "char<=?"
   740 000009A2 0700000000000000        	dq 7
   741 000009AA 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   742                                  	; L_constants + 2481:
   743 000009B1 03                      	db T_string	; "char=?"
   744 000009B2 0600000000000000        	dq 6
   745 000009BA 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   746                                  	; L_constants + 2496:
   747 000009C0 03                      	db T_string	; "char>?"
   748 000009C1 0600000000000000        	dq 6
   749 000009C9 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   750                                  	; L_constants + 2511:
   751 000009CF 03                      	db T_string	; "char>=?"
   752 000009D0 0700000000000000        	dq 7
   753 000009D8 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   754                                  	; L_constants + 2527:
   755 000009DF 03                      	db T_string	; "char-downcase"
   756 000009E0 0D00000000000000        	dq 13
   757 000009E8 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   758 000009F0 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   759                                  	; L_constants + 2549:
   760 000009F5 03                      	db T_string	; "char-upcase"
   761 000009F6 0B00000000000000        	dq 11
   762 000009FE 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   763 00000A06 617365                  	db 0x61, 0x73, 0x65
   764                                  	; L_constants + 2569:
   765 00000A09 0241                    	db T_char, 0x41	; #\A
   766                                  	; L_constants + 2571:
   767 00000A0B 025A                    	db T_char, 0x5A	; #\Z
   768                                  	; L_constants + 2573:
   769 00000A0D 0261                    	db T_char, 0x61	; #\a
   770                                  	; L_constants + 2575:
   771 00000A0F 027A                    	db T_char, 0x7A	; #\z
   772                                  	; L_constants + 2577:
   773 00000A11 03                      	db T_string	; "char-ci<?"
   774 00000A12 0900000000000000        	dq 9
   775 00000A1A 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   776 00000A22 3F                      	db 0x3F
   777                                  	; L_constants + 2595:
   778 00000A23 03                      	db T_string	; "char-ci<=?"
   779 00000A24 0A00000000000000        	dq 10
   780 00000A2C 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   781 00000A34 3D3F                    	db 0x3D, 0x3F
   782                                  	; L_constants + 2614:
   783 00000A36 03                      	db T_string	; "char-ci=?"
   784 00000A37 0900000000000000        	dq 9
   785 00000A3F 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   786 00000A47 3F                      	db 0x3F
   787                                  	; L_constants + 2632:
   788 00000A48 03                      	db T_string	; "char-ci>?"
   789 00000A49 0900000000000000        	dq 9
   790 00000A51 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   791 00000A59 3F                      	db 0x3F
   792                                  	; L_constants + 2650:
   793 00000A5A 03                      	db T_string	; "char-ci>=?"
   794 00000A5B 0A00000000000000        	dq 10
   795 00000A63 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   796 00000A6B 3D3F                    	db 0x3D, 0x3F
   797                                  	; L_constants + 2669:
   798 00000A6D 03                      	db T_string	; "string-downcase"
   799 00000A6E 0F00000000000000        	dq 15
   800 00000A76 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   801 00000A7E 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   802                                  	; L_constants + 2693:
   803 00000A85 03                      	db T_string	; "string-upcase"
   804 00000A86 0D00000000000000        	dq 13
   805 00000A8E 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   806 00000A96 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   807                                  	; L_constants + 2715:
   808 00000A9B 03                      	db T_string	; "list->string"
   809 00000A9C 0C00000000000000        	dq 12
   810 00000AA4 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   811 00000AAC 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   812                                  	; L_constants + 2736:
   813 00000AB0 03                      	db T_string	; "string->list"
   814 00000AB1 0C00000000000000        	dq 12
   815 00000AB9 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   816 00000AC1 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   817                                  	; L_constants + 2757:
   818 00000AC5 03                      	db T_string	; "string<?"
   819 00000AC6 0800000000000000        	dq 8
   820 00000ACE 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   821                                  	; L_constants + 2774:
   822 00000AD6 03                      	db T_string	; "string<=?"
   823 00000AD7 0900000000000000        	dq 9
   824 00000ADF 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   825 00000AE7 3F                      	db 0x3F
   826                                  	; L_constants + 2792:
   827 00000AE8 03                      	db T_string	; "string=?"
   828 00000AE9 0800000000000000        	dq 8
   829 00000AF1 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   830                                  	; L_constants + 2809:
   831 00000AF9 03                      	db T_string	; "string>=?"
   832 00000AFA 0900000000000000        	dq 9
   833 00000B02 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   834 00000B0A 3F                      	db 0x3F
   835                                  	; L_constants + 2827:
   836 00000B0B 03                      	db T_string	; "string>?"
   837 00000B0C 0800000000000000        	dq 8
   838 00000B14 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   839                                  	; L_constants + 2844:
   840 00000B1C 03                      	db T_string	; "string-ci<?"
   841 00000B1D 0B00000000000000        	dq 11
   842 00000B25 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   843 00000B2D 693C3F                  	db 0x69, 0x3C, 0x3F
   844                                  	; L_constants + 2864:
   845 00000B30 03                      	db T_string	; "string-ci<=?"
   846 00000B31 0C00000000000000        	dq 12
   847 00000B39 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   848 00000B41 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   849                                  	; L_constants + 2885:
   850 00000B45 03                      	db T_string	; "string-ci=?"
   851 00000B46 0B00000000000000        	dq 11
   852 00000B4E 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   853 00000B56 693D3F                  	db 0x69, 0x3D, 0x3F
   854                                  	; L_constants + 2905:
   855 00000B59 03                      	db T_string	; "string-ci>=?"
   856 00000B5A 0C00000000000000        	dq 12
   857 00000B62 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   858 00000B6A 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   859                                  	; L_constants + 2926:
   860 00000B6E 03                      	db T_string	; "string-ci>?"
   861 00000B6F 0B00000000000000        	dq 11
   862 00000B77 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   863 00000B7F 693E3F                  	db 0x69, 0x3E, 0x3F
   864                                  	; L_constants + 2946:
   865 00000B82 41                      	db T_interned_symbol	; make-vector
   866 00000B83 [4804000000000000]      	dq L_constants + 1096
   867                                  	; L_constants + 2955:
   868 00000B8B 03                      	db T_string	; "Usage: (make-vector...
   869 00000B8C 2B00000000000000        	dq 43
   870 00000B94 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   871 00000B9C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   872 00000BA4 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   873 00000BAC 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   874 00000BB4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   875 00000BBC 6C7429                  	db 0x6C, 0x74, 0x29
   876                                  	; L_constants + 3007:
   877 00000BBF 41                      	db T_interned_symbol	; make-string
   878 00000BC0 [5C04000000000000]      	dq L_constants + 1116
   879                                  	; L_constants + 3016:
   880 00000BC8 03                      	db T_string	; "Usage: (make-string...
   881 00000BC9 2B00000000000000        	dq 43
   882 00000BD1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   883 00000BD9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   884 00000BE1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   885 00000BE9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   886 00000BF1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   887 00000BF9 6C7429                  	db 0x6C, 0x74, 0x29
   888                                  	; L_constants + 3068:
   889 00000BFC 03                      	db T_string	; "list->vector"
   890 00000BFD 0C00000000000000        	dq 12
   891 00000C05 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   892 00000C0D 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   893                                  	; L_constants + 3089:
   894 00000C11 03                      	db T_string	; "vector"
   895 00000C12 0600000000000000        	dq 6
   896 00000C1A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   897                                  	; L_constants + 3104:
   898 00000C20 03                      	db T_string	; "vector->list"
   899 00000C21 0C00000000000000        	dq 12
   900 00000C29 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   901 00000C31 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   902                                  	; L_constants + 3125:
   903 00000C35 03                      	db T_string	; "random"
   904 00000C36 0600000000000000        	dq 6
   905 00000C3E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   906                                  	; L_constants + 3140:
   907 00000C44 03                      	db T_string	; "positive?"
   908 00000C45 0900000000000000        	dq 9
   909 00000C4D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   910 00000C55 3F                      	db 0x3F
   911                                  	; L_constants + 3158:
   912 00000C56 03                      	db T_string	; "negative?"
   913 00000C57 0900000000000000        	dq 9
   914 00000C5F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   915 00000C67 3F                      	db 0x3F
   916                                  	; L_constants + 3176:
   917 00000C68 03                      	db T_string	; "even?"
   918 00000C69 0500000000000000        	dq 5
   919 00000C71 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   920                                  	; L_constants + 3190:
   921 00000C76 11                      	db T_integer	; 2
   922 00000C77 0200000000000000        	dq 2
   923                                  	; L_constants + 3199:
   924 00000C7F 03                      	db T_string	; "odd?"
   925 00000C80 0400000000000000        	dq 4
   926 00000C88 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   927                                  	; L_constants + 3212:
   928 00000C8C 03                      	db T_string	; "abs"
   929 00000C8D 0300000000000000        	dq 3
   930 00000C95 616273                  	db 0x61, 0x62, 0x73
   931                                  	; L_constants + 3224:
   932 00000C98 03                      	db T_string	; "equal?"
   933 00000C99 0600000000000000        	dq 6
   934 00000CA1 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   935                                  	; L_constants + 3239:
   936 00000CA7 03                      	db T_string	; "assoc"
   937 00000CA8 0500000000000000        	dq 5
   938 00000CB0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   939                                  	; L_constants + 3253:
   940 00000CB5 03                      	db T_string	; "string-append"
   941 00000CB6 0D00000000000000        	dq 13
   942 00000CBE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   943 00000CC6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   944                                  	; L_constants + 3275:
   945 00000CCB 03                      	db T_string	; "vector-append"
   946 00000CCC 0D00000000000000        	dq 13
   947 00000CD4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   948 00000CDC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   949                                  	; L_constants + 3297:
   950 00000CE1 03                      	db T_string	; "string-reverse"
   951 00000CE2 0E00000000000000        	dq 14
   952 00000CEA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   953 00000CF2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   954                                  	; L_constants + 3320:
   955 00000CF8 03                      	db T_string	; "vector-reverse"
   956 00000CF9 0E00000000000000        	dq 14
   957 00000D01 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   958 00000D09 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   959                                  	; L_constants + 3343:
   960 00000D0F 03                      	db T_string	; "string-reverse!"
   961 00000D10 0F00000000000000        	dq 15
   962 00000D18 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   963 00000D20 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   964                                  	; L_constants + 3367:
   965 00000D27 03                      	db T_string	; "vector-reverse!"
   966 00000D28 0F00000000000000        	dq 15
   967 00000D30 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   968 00000D38 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   969                                  	; L_constants + 3391:
   970 00000D3F 03                      	db T_string	; "make-list-thunk"
   971 00000D40 0F00000000000000        	dq 15
   972 00000D48 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   973 00000D50 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   974                                  	; L_constants + 3415:
   975 00000D57 03                      	db T_string	; "make-string-thunk"
   976 00000D58 1100000000000000        	dq 17
   977 00000D60 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   978 00000D68 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   979 00000D70 6B                      	db 0x6B
   980                                  	; L_constants + 3441:
   981 00000D71 03                      	db T_string	; "make-vector-thunk"
   982 00000D72 1100000000000000        	dq 17
   983 00000D7A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   984 00000D82 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   985 00000D8A 6B                      	db 0x6B
   986                                  	; L_constants + 3467:
   987 00000D8B 03                      	db T_string	; "logarithm"
   988 00000D8C 0900000000000000        	dq 9
   989 00000D94 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   990 00000D9C 6D                      	db 0x6D
   991                                  	; L_constants + 3485:
   992 00000D9D 13                      	db T_real	; 1.000000
   993 00000D9E 000000000000F03F        	dq 1.000000
   994                                  	; L_constants + 3494:
   995 00000DA6 03                      	db T_string	; "newline"
   996 00000DA7 0700000000000000        	dq 7
   997 00000DAF 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   998                                  	; L_constants + 3510:
   999 00000DB6 020A                    	db T_char, 0x0A	; #\newline
  1000                                  	; L_constants + 3512:
  1001 00000DB8 03                      	db T_string	; "void"
  1002 00000DB9 0400000000000000        	dq 4
  1003 00000DC1 766F6964                	db 0x76, 0x6F, 0x69, 0x64
  1004                                  free_var_0:	; location of *
  1005 00000DC5 [CD0D000000000000]      	dq .undefined_object
  1006                                  .undefined_object:
  1007 00000DCD 05                      	db T_undefined
  1008 00000DCE [D408000000000000]      	dq L_constants + 2260
  1009                                  
  1010                                  free_var_1:	; location of +
  1011 00000DD6 [DE0D000000000000]      	dq .undefined_object
  1012                                  .undefined_object:
  1013 00000DDE 05                      	db T_undefined
  1014 00000DDF [4D08000000000000]      	dq L_constants + 2125
  1015                                  
  1016                                  free_var_2:	; location of -
  1017 00000DE7 [EF0D000000000000]      	dq .undefined_object
  1018                                  .undefined_object:
  1019 00000DEF 05                      	db T_undefined
  1020 00000DF0 [B408000000000000]      	dq L_constants + 2228
  1021                                  
  1022                                  free_var_3:	; location of /
  1023 00000DF8 [000E000000000000]      	dq .undefined_object
  1024                                  .undefined_object:
  1025 00000E00 05                      	db T_undefined
  1026 00000E01 [F008000000000000]      	dq L_constants + 2288
  1027                                  
  1028                                  free_var_4:	; location of <
  1029 00000E09 [110E000000000000]      	dq .undefined_object
  1030                                  .undefined_object:
  1031 00000E11 05                      	db T_undefined
  1032 00000E12 [1009000000000000]      	dq L_constants + 2320
  1033                                  
  1034                                  free_var_5:	; location of <=
  1035 00000E1A [220E000000000000]      	dq .undefined_object
  1036                                  .undefined_object:
  1037 00000E22 05                      	db T_undefined
  1038 00000E23 [1A09000000000000]      	dq L_constants + 2330
  1039                                  
  1040                                  free_var_6:	; location of =
  1041 00000E2B [330E000000000000]      	dq .undefined_object
  1042                                  .undefined_object:
  1043 00000E33 05                      	db T_undefined
  1044 00000E34 [3A09000000000000]      	dq L_constants + 2362
  1045                                  
  1046                                  free_var_7:	; location of >
  1047 00000E3C [440E000000000000]      	dq .undefined_object
  1048                                  .undefined_object:
  1049 00000E44 05                      	db T_undefined
  1050 00000E45 [2509000000000000]      	dq L_constants + 2341
  1051                                  
  1052                                  free_var_8:	; location of >=
  1053 00000E4D [550E000000000000]      	dq .undefined_object
  1054                                  .undefined_object:
  1055 00000E55 05                      	db T_undefined
  1056 00000E56 [2F09000000000000]      	dq L_constants + 2351
  1057                                  
  1058                                  free_var_9:	; location of __bin-add-qq
  1059 00000E5E [660E000000000000]      	dq .undefined_object
  1060                                  .undefined_object:
  1061 00000E66 05                      	db T_undefined
  1062 00000E67 [6902000000000000]      	dq L_constants + 617
  1063                                  
  1064                                  free_var_10:	; location of __bin-add-rr
  1065 00000E6F [770E000000000000]      	dq .undefined_object
  1066                                  .undefined_object:
  1067 00000E77 05                      	db T_undefined
  1068 00000E78 [1502000000000000]      	dq L_constants + 533
  1069                                  
  1070                                  free_var_11:	; location of __bin-add-zz
  1071 00000E80 [880E000000000000]      	dq .undefined_object
  1072                                  .undefined_object:
  1073 00000E88 05                      	db T_undefined
  1074 00000E89 [BD02000000000000]      	dq L_constants + 701
  1075                                  
  1076                                  free_var_12:	; location of __bin-apply
  1077 00000E91 [990E000000000000]      	dq .undefined_object
  1078                                  .undefined_object:
  1079 00000E99 05                      	db T_undefined
  1080 00000E9A [0102000000000000]      	dq L_constants + 513
  1081                                  
  1082                                  free_var_13:	; location of __bin-div-qq
  1083 00000EA2 [AA0E000000000000]      	dq .undefined_object
  1084                                  .undefined_object:
  1085 00000EAA 05                      	db T_undefined
  1086 00000EAB [A802000000000000]      	dq L_constants + 680
  1087                                  
  1088                                  free_var_14:	; location of __bin-div-rr
  1089 00000EB3 [BB0E000000000000]      	dq .undefined_object
  1090                                  .undefined_object:
  1091 00000EBB 05                      	db T_undefined
  1092 00000EBC [5402000000000000]      	dq L_constants + 596
  1093                                  
  1094                                  free_var_15:	; location of __bin-div-zz
  1095 00000EC4 [CC0E000000000000]      	dq .undefined_object
  1096                                  .undefined_object:
  1097 00000ECC 05                      	db T_undefined
  1098 00000ECD [FC02000000000000]      	dq L_constants + 764
  1099                                  
  1100                                  free_var_16:	; location of __bin-equal-qq
  1101 00000ED5 [DD0E000000000000]      	dq .undefined_object
  1102                                  .undefined_object:
  1103 00000EDD 05                      	db T_undefined
  1104 00000EDE [8703000000000000]      	dq L_constants + 903
  1105                                  
  1106                                  free_var_17:	; location of __bin-equal-rr
  1107 00000EE6 [EE0E000000000000]      	dq .undefined_object
  1108                                  .undefined_object:
  1109 00000EEE 05                      	db T_undefined
  1110 00000EEF [7003000000000000]      	dq L_constants + 880
  1111                                  
  1112                                  free_var_18:	; location of __bin-equal-zz
  1113 00000EF7 [FF0E000000000000]      	dq .undefined_object
  1114                                  .undefined_object:
  1115 00000EFF 05                      	db T_undefined
  1116 00000F00 [9E03000000000000]      	dq L_constants + 926
  1117                                  
  1118                                  free_var_19:	; location of __bin-less-than-qq
  1119 00000F08 [100F000000000000]      	dq .undefined_object
  1120                                  .undefined_object:
  1121 00000F10 05                      	db T_undefined
  1122 00000F11 [3A03000000000000]      	dq L_constants + 826
  1123                                  
  1124                                  free_var_20:	; location of __bin-less-than-rr
  1125 00000F19 [210F000000000000]      	dq .undefined_object
  1126                                  .undefined_object:
  1127 00000F21 05                      	db T_undefined
  1128 00000F22 [1F03000000000000]      	dq L_constants + 799
  1129                                  
  1130                                  free_var_21:	; location of __bin-less-than-zz
  1131 00000F2A [320F000000000000]      	dq .undefined_object
  1132                                  .undefined_object:
  1133 00000F32 05                      	db T_undefined
  1134 00000F33 [5503000000000000]      	dq L_constants + 853
  1135                                  
  1136                                  free_var_22:	; location of __bin-mul-qq
  1137 00000F3B [430F000000000000]      	dq .undefined_object
  1138                                  .undefined_object:
  1139 00000F43 05                      	db T_undefined
  1140 00000F44 [9302000000000000]      	dq L_constants + 659
  1141                                  
  1142                                  free_var_23:	; location of __bin-mul-rr
  1143 00000F4C [540F000000000000]      	dq .undefined_object
  1144                                  .undefined_object:
  1145 00000F54 05                      	db T_undefined
  1146 00000F55 [3F02000000000000]      	dq L_constants + 575
  1147                                  
  1148                                  free_var_24:	; location of __bin-mul-zz
  1149 00000F5D [650F000000000000]      	dq .undefined_object
  1150                                  .undefined_object:
  1151 00000F65 05                      	db T_undefined
  1152 00000F66 [E702000000000000]      	dq L_constants + 743
  1153                                  
  1154                                  free_var_25:	; location of __bin-sub-qq
  1155 00000F6E [760F000000000000]      	dq .undefined_object
  1156                                  .undefined_object:
  1157 00000F76 05                      	db T_undefined
  1158 00000F77 [7E02000000000000]      	dq L_constants + 638
  1159                                  
  1160                                  free_var_26:	; location of __bin-sub-rr
  1161 00000F7F [870F000000000000]      	dq .undefined_object
  1162                                  .undefined_object:
  1163 00000F87 05                      	db T_undefined
  1164 00000F88 [2A02000000000000]      	dq L_constants + 554
  1165                                  
  1166                                  free_var_27:	; location of __bin-sub-zz
  1167 00000F90 [980F000000000000]      	dq .undefined_object
  1168                                  .undefined_object:
  1169 00000F98 05                      	db T_undefined
  1170 00000F99 [D202000000000000]      	dq L_constants + 722
  1171                                  
  1172                                  free_var_28:	; location of __bin_integer_to_fraction
  1173 00000FA1 [A90F000000000000]      	dq .undefined_object
  1174                                  .undefined_object:
  1175 00000FA9 05                      	db T_undefined
  1176 00000FAA [6008000000000000]      	dq L_constants + 2144
  1177                                  
  1178                                  free_var_29:	; location of __integer-to-fraction
  1179 00000FB2 [BA0F000000000000]      	dq .undefined_object
  1180                                  .undefined_object:
  1181 00000FBA 05                      	db T_undefined
  1182 00000FBB [A204000000000000]      	dq L_constants + 1186
  1183                                  
  1184                                  free_var_30:	; location of abs
  1185 00000FC3 [CB0F000000000000]      	dq .undefined_object
  1186                                  .undefined_object:
  1187 00000FCB 05                      	db T_undefined
  1188 00000FCC [8C0C000000000000]      	dq L_constants + 3212
  1189                                  
  1190                                  free_var_31:	; location of andmap
  1191 00000FD4 [DC0F000000000000]      	dq .undefined_object
  1192                                  .undefined_object:
  1193 00000FDC 05                      	db T_undefined
  1194 00000FDD [FA07000000000000]      	dq L_constants + 2042
  1195                                  
  1196                                  free_var_32:	; location of append
  1197 00000FE5 [ED0F000000000000]      	dq .undefined_object
  1198                                  .undefined_object:
  1199 00000FED 05                      	db T_undefined
  1200 00000FEE [2B08000000000000]      	dq L_constants + 2091
  1201                                  
  1202                                  free_var_33:	; location of apply
  1203 00000FF6 [FE0F000000000000]      	dq .undefined_object
  1204                                  .undefined_object:
  1205 00000FFE 05                      	db T_undefined
  1206 00000FFF [D207000000000000]      	dq L_constants + 2002
  1207                                  
  1208                                  free_var_34:	; location of assoc
  1209 00001007 [0F10000000000000]      	dq .undefined_object
  1210                                  .undefined_object:
  1211 0000100F 05                      	db T_undefined
  1212 00001010 [A70C000000000000]      	dq L_constants + 3239
  1213                                  
  1214                                  free_var_35:	; location of caaaar
  1215 00001018 [2010000000000000]      	dq .undefined_object
  1216                                  .undefined_object:
  1217 00001020 05                      	db T_undefined
  1218 00001021 [8106000000000000]      	dq L_constants + 1665
  1219                                  
  1220                                  free_var_36:	; location of caaadr
  1221 00001029 [3110000000000000]      	dq .undefined_object
  1222                                  .undefined_object:
  1223 00001031 05                      	db T_undefined
  1224 00001032 [9006000000000000]      	dq L_constants + 1680
  1225                                  
  1226                                  free_var_37:	; location of caaar
  1227 0000103A [4210000000000000]      	dq .undefined_object
  1228                                  .undefined_object:
  1229 00001042 05                      	db T_undefined
  1230 00001043 [1106000000000000]      	dq L_constants + 1553
  1231                                  
  1232                                  free_var_38:	; location of caadar
  1233 0000104B [5310000000000000]      	dq .undefined_object
  1234                                  .undefined_object:
  1235 00001053 05                      	db T_undefined
  1236 00001054 [9F06000000000000]      	dq L_constants + 1695
  1237                                  
  1238                                  free_var_39:	; location of caaddr
  1239 0000105C [6410000000000000]      	dq .undefined_object
  1240                                  .undefined_object:
  1241 00001064 05                      	db T_undefined
  1242 00001065 [AE06000000000000]      	dq L_constants + 1710
  1243                                  
  1244                                  free_var_40:	; location of caadr
  1245 0000106D [7510000000000000]      	dq .undefined_object
  1246                                  .undefined_object:
  1247 00001075 05                      	db T_undefined
  1248 00001076 [1F06000000000000]      	dq L_constants + 1567
  1249                                  
  1250                                  free_var_41:	; location of caar
  1251 0000107E [8610000000000000]      	dq .undefined_object
  1252                                  .undefined_object:
  1253 00001086 05                      	db T_undefined
  1254 00001087 [DD05000000000000]      	dq L_constants + 1501
  1255                                  
  1256                                  free_var_42:	; location of cadaar
  1257 0000108F [9710000000000000]      	dq .undefined_object
  1258                                  .undefined_object:
  1259 00001097 05                      	db T_undefined
  1260 00001098 [BD06000000000000]      	dq L_constants + 1725
  1261                                  
  1262                                  free_var_43:	; location of cadadr
  1263 000010A0 [A810000000000000]      	dq .undefined_object
  1264                                  .undefined_object:
  1265 000010A8 05                      	db T_undefined
  1266 000010A9 [CC06000000000000]      	dq L_constants + 1740
  1267                                  
  1268                                  free_var_44:	; location of cadar
  1269 000010B1 [B910000000000000]      	dq .undefined_object
  1270                                  .undefined_object:
  1271 000010B9 05                      	db T_undefined
  1272 000010BA [2D06000000000000]      	dq L_constants + 1581
  1273                                  
  1274                                  free_var_45:	; location of caddar
  1275 000010C2 [CA10000000000000]      	dq .undefined_object
  1276                                  .undefined_object:
  1277 000010CA 05                      	db T_undefined
  1278 000010CB [DB06000000000000]      	dq L_constants + 1755
  1279                                  
  1280                                  free_var_46:	; location of cadddr
  1281 000010D3 [DB10000000000000]      	dq .undefined_object
  1282                                  .undefined_object:
  1283 000010DB 05                      	db T_undefined
  1284 000010DC [EA06000000000000]      	dq L_constants + 1770
  1285                                  
  1286                                  free_var_47:	; location of caddr
  1287 000010E4 [EC10000000000000]      	dq .undefined_object
  1288                                  .undefined_object:
  1289 000010EC 05                      	db T_undefined
  1290 000010ED [3B06000000000000]      	dq L_constants + 1595
  1291                                  
  1292                                  free_var_48:	; location of cadr
  1293 000010F5 [FD10000000000000]      	dq .undefined_object
  1294                                  .undefined_object:
  1295 000010FD 05                      	db T_undefined
  1296 000010FE [EA05000000000000]      	dq L_constants + 1514
  1297                                  
  1298                                  free_var_49:	; location of car
  1299 00001106 [0E11000000000000]      	dq .undefined_object
  1300                                  .undefined_object:
  1301 0000110E 05                      	db T_undefined
  1302 0000110F [1501000000000000]      	dq L_constants + 277
  1303                                  
  1304                                  free_var_50:	; location of cdaaar
  1305 00001117 [1F11000000000000]      	dq .undefined_object
  1306                                  .undefined_object:
  1307 0000111F 05                      	db T_undefined
  1308 00001120 [F906000000000000]      	dq L_constants + 1785
  1309                                  
  1310                                  free_var_51:	; location of cdaadr
  1311 00001128 [3011000000000000]      	dq .undefined_object
  1312                                  .undefined_object:
  1313 00001130 05                      	db T_undefined
  1314 00001131 [0807000000000000]      	dq L_constants + 1800
  1315                                  
  1316                                  free_var_52:	; location of cdaar
  1317 00001139 [4111000000000000]      	dq .undefined_object
  1318                                  .undefined_object:
  1319 00001141 05                      	db T_undefined
  1320 00001142 [4906000000000000]      	dq L_constants + 1609
  1321                                  
  1322                                  free_var_53:	; location of cdadar
  1323 0000114A [5211000000000000]      	dq .undefined_object
  1324                                  .undefined_object:
  1325 00001152 05                      	db T_undefined
  1326 00001153 [1707000000000000]      	dq L_constants + 1815
  1327                                  
  1328                                  free_var_54:	; location of cdaddr
  1329 0000115B [6311000000000000]      	dq .undefined_object
  1330                                  .undefined_object:
  1331 00001163 05                      	db T_undefined
  1332 00001164 [2607000000000000]      	dq L_constants + 1830
  1333                                  
  1334                                  free_var_55:	; location of cdadr
  1335 0000116C [7411000000000000]      	dq .undefined_object
  1336                                  .undefined_object:
  1337 00001174 05                      	db T_undefined
  1338 00001175 [5706000000000000]      	dq L_constants + 1623
  1339                                  
  1340                                  free_var_56:	; location of cdar
  1341 0000117D [8511000000000000]      	dq .undefined_object
  1342                                  .undefined_object:
  1343 00001185 05                      	db T_undefined
  1344 00001186 [F705000000000000]      	dq L_constants + 1527
  1345                                  
  1346                                  free_var_57:	; location of cddaar
  1347 0000118E [9611000000000000]      	dq .undefined_object
  1348                                  .undefined_object:
  1349 00001196 05                      	db T_undefined
  1350 00001197 [3507000000000000]      	dq L_constants + 1845
  1351                                  
  1352                                  free_var_58:	; location of cddadr
  1353 0000119F [A711000000000000]      	dq .undefined_object
  1354                                  .undefined_object:
  1355 000011A7 05                      	db T_undefined
  1356 000011A8 [4407000000000000]      	dq L_constants + 1860
  1357                                  
  1358                                  free_var_59:	; location of cddar
  1359 000011B0 [B811000000000000]      	dq .undefined_object
  1360                                  .undefined_object:
  1361 000011B8 05                      	db T_undefined
  1362 000011B9 [6506000000000000]      	dq L_constants + 1637
  1363                                  
  1364                                  free_var_60:	; location of cdddar
  1365 000011C1 [C911000000000000]      	dq .undefined_object
  1366                                  .undefined_object:
  1367 000011C9 05                      	db T_undefined
  1368 000011CA [5307000000000000]      	dq L_constants + 1875
  1369                                  
  1370                                  free_var_61:	; location of cddddr
  1371 000011D2 [DA11000000000000]      	dq .undefined_object
  1372                                  .undefined_object:
  1373 000011DA 05                      	db T_undefined
  1374 000011DB [6207000000000000]      	dq L_constants + 1890
  1375                                  
  1376                                  free_var_62:	; location of cdddr
  1377 000011E3 [EB11000000000000]      	dq .undefined_object
  1378                                  .undefined_object:
  1379 000011EB 05                      	db T_undefined
  1380 000011EC [7306000000000000]      	dq L_constants + 1651
  1381                                  
  1382                                  free_var_63:	; location of cddr
  1383 000011F4 [FC11000000000000]      	dq .undefined_object
  1384                                  .undefined_object:
  1385 000011FC 05                      	db T_undefined
  1386 000011FD [0406000000000000]      	dq L_constants + 1540
  1387                                  
  1388                                  free_var_64:	; location of cdr
  1389 00001205 [0D12000000000000]      	dq .undefined_object
  1390                                  .undefined_object:
  1391 0000120D 05                      	db T_undefined
  1392 0000120E [2101000000000000]      	dq L_constants + 289
  1393                                  
  1394                                  free_var_65:	; location of char->integer
  1395 00001216 [1E12000000000000]      	dq .undefined_object
  1396                                  .undefined_object:
  1397 0000121E 05                      	db T_undefined
  1398 0000121F [A901000000000000]      	dq L_constants + 425
  1399                                  
  1400                                  free_var_66:	; location of char-ci<=?
  1401 00001227 [2F12000000000000]      	dq .undefined_object
  1402                                  .undefined_object:
  1403 0000122F 05                      	db T_undefined
  1404 00001230 [230A000000000000]      	dq L_constants + 2595
  1405                                  
  1406                                  free_var_67:	; location of char-ci<?
  1407 00001238 [4012000000000000]      	dq .undefined_object
  1408                                  .undefined_object:
  1409 00001240 05                      	db T_undefined
  1410 00001241 [110A000000000000]      	dq L_constants + 2577
  1411                                  
  1412                                  free_var_68:	; location of char-ci=?
  1413 00001249 [5112000000000000]      	dq .undefined_object
  1414                                  .undefined_object:
  1415 00001251 05                      	db T_undefined
  1416 00001252 [360A000000000000]      	dq L_constants + 2614
  1417                                  
  1418                                  free_var_69:	; location of char-ci>=?
  1419 0000125A [6212000000000000]      	dq .undefined_object
  1420                                  .undefined_object:
  1421 00001262 05                      	db T_undefined
  1422 00001263 [5A0A000000000000]      	dq L_constants + 2650
  1423                                  
  1424                                  free_var_70:	; location of char-ci>?
  1425 0000126B [7312000000000000]      	dq .undefined_object
  1426                                  .undefined_object:
  1427 00001273 05                      	db T_undefined
  1428 00001274 [480A000000000000]      	dq L_constants + 2632
  1429                                  
  1430                                  free_var_71:	; location of char-downcase
  1431 0000127C [8412000000000000]      	dq .undefined_object
  1432                                  .undefined_object:
  1433 00001284 05                      	db T_undefined
  1434 00001285 [DF09000000000000]      	dq L_constants + 2527
  1435                                  
  1436                                  free_var_72:	; location of char-upcase
  1437 0000128D [9512000000000000]      	dq .undefined_object
  1438                                  .undefined_object:
  1439 00001295 05                      	db T_undefined
  1440 00001296 [F509000000000000]      	dq L_constants + 2549
  1441                                  
  1442                                  free_var_73:	; location of char<=?
  1443 0000129E [A612000000000000]      	dq .undefined_object
  1444                                  .undefined_object:
  1445 000012A6 05                      	db T_undefined
  1446 000012A7 [A109000000000000]      	dq L_constants + 2465
  1447                                  
  1448                                  free_var_74:	; location of char<?
  1449 000012AF [B712000000000000]      	dq .undefined_object
  1450                                  .undefined_object:
  1451 000012B7 05                      	db T_undefined
  1452 000012B8 [9209000000000000]      	dq L_constants + 2450
  1453                                  
  1454                                  free_var_75:	; location of char=?
  1455 000012C0 [C812000000000000]      	dq .undefined_object
  1456                                  .undefined_object:
  1457 000012C8 05                      	db T_undefined
  1458 000012C9 [B109000000000000]      	dq L_constants + 2481
  1459                                  
  1460                                  free_var_76:	; location of char>=?
  1461 000012D1 [D912000000000000]      	dq .undefined_object
  1462                                  .undefined_object:
  1463 000012D9 05                      	db T_undefined
  1464 000012DA [CF09000000000000]      	dq L_constants + 2511
  1465                                  
  1466                                  free_var_77:	; location of char>?
  1467 000012E2 [EA12000000000000]      	dq .undefined_object
  1468                                  .undefined_object:
  1469 000012EA 05                      	db T_undefined
  1470 000012EB [C009000000000000]      	dq L_constants + 2496
  1471                                  
  1472                                  free_var_78:	; location of char?
  1473 000012F3 [FB12000000000000]      	dq .undefined_object
  1474                                  .undefined_object:
  1475 000012FB 05                      	db T_undefined
  1476 000012FC [3000000000000000]      	dq L_constants + 48
  1477                                  
  1478                                  free_var_79:	; location of cons
  1479 00001304 [0C13000000000000]      	dq .undefined_object
  1480                                  .undefined_object:
  1481 0000130C 05                      	db T_undefined
  1482 0000130D [DF00000000000000]      	dq L_constants + 223
  1483                                  
  1484                                  free_var_80:	; location of eq?
  1485 00001315 [1D13000000000000]      	dq .undefined_object
  1486                                  .undefined_object:
  1487 0000131D 05                      	db T_undefined
  1488 0000131E [9604000000000000]      	dq L_constants + 1174
  1489                                  
  1490                                  free_var_81:	; location of equal?
  1491 00001326 [2E13000000000000]      	dq .undefined_object
  1492                                  .undefined_object:
  1493 0000132E 05                      	db T_undefined
  1494 0000132F [980C000000000000]      	dq L_constants + 3224
  1495                                  
  1496                                  free_var_82:	; location of error
  1497 00001337 [3F13000000000000]      	dq .undefined_object
  1498                                  .undefined_object:
  1499 0000133F 05                      	db T_undefined
  1500 00001340 [1103000000000000]      	dq L_constants + 785
  1501                                  
  1502                                  free_var_83:	; location of even?
  1503 00001348 [5013000000000000]      	dq .undefined_object
  1504                                  .undefined_object:
  1505 00001350 05                      	db T_undefined
  1506 00001351 [680C000000000000]      	dq L_constants + 3176
  1507                                  
  1508                                  free_var_84:	; location of fact
  1509 00001359 [6113000000000000]      	dq .undefined_object
  1510                                  .undefined_object:
  1511 00001361 05                      	db T_undefined
  1512 00001362 [0309000000000000]      	dq L_constants + 2307
  1513                                  
  1514                                  free_var_85:	; location of fold-left
  1515 0000136A [7213000000000000]      	dq .undefined_object
  1516                                  .undefined_object:
  1517 00001372 05                      	db T_undefined
  1518 00001373 [1908000000000000]      	dq L_constants + 2073
  1519                                  
  1520                                  free_var_86:	; location of fold-right
  1521 0000137B [8313000000000000]      	dq .undefined_object
  1522                                  .undefined_object:
  1523 00001383 05                      	db T_undefined
  1524 00001384 [3A08000000000000]      	dq L_constants + 2106
  1525                                  
  1526                                  free_var_87:	; location of fraction->real
  1527 0000138C [9413000000000000]      	dq .undefined_object
  1528                                  .undefined_object:
  1529 00001394 05                      	db T_undefined
  1530 00001395 [9201000000000000]      	dq L_constants + 402
  1531                                  
  1532                                  free_var_88:	; location of fraction?
  1533 0000139D [A513000000000000]      	dq .undefined_object
  1534                                  .undefined_object:
  1535 000013A5 05                      	db T_undefined
  1536 000013A6 [9800000000000000]      	dq L_constants + 152
  1537                                  
  1538                                  free_var_89:	; location of integer->char
  1539 000013AE [B613000000000000]      	dq .undefined_object
  1540                                  .undefined_object:
  1541 000013B6 05                      	db T_undefined
  1542 000013B7 [BF01000000000000]      	dq L_constants + 447
  1543                                  
  1544                                  free_var_90:	; location of integer->real
  1545 000013BF [C713000000000000]      	dq .undefined_object
  1546                                  .undefined_object:
  1547 000013C7 05                      	db T_undefined
  1548 000013C8 [7C01000000000000]      	dq L_constants + 380
  1549                                  
  1550                                  free_var_91:	; location of integer?
  1551 000013D0 [D813000000000000]      	dq .undefined_object
  1552                                  .undefined_object:
  1553 000013D8 05                      	db T_undefined
  1554 000013D9 [F001000000000000]      	dq L_constants + 496
  1555                                  
  1556                                  free_var_92:	; location of list
  1557 000013E1 [E913000000000000]      	dq .undefined_object
  1558                                  .undefined_object:
  1559 000013E9 05                      	db T_undefined
  1560 000013EA [7F07000000000000]      	dq L_constants + 1919
  1561                                  
  1562                                  free_var_93:	; location of list*
  1563 000013F2 [FA13000000000000]      	dq .undefined_object
  1564                                  .undefined_object:
  1565 000013FA 05                      	db T_undefined
  1566 000013FB [AA07000000000000]      	dq L_constants + 1962
  1567                                  
  1568                                  free_var_94:	; location of list->string
  1569 00001403 [0B14000000000000]      	dq .undefined_object
  1570                                  .undefined_object:
  1571 0000140B 05                      	db T_undefined
  1572 0000140C [9B0A000000000000]      	dq L_constants + 2715
  1573                                  
  1574                                  free_var_95:	; location of list->vector
  1575 00001414 [1C14000000000000]      	dq .undefined_object
  1576                                  .undefined_object:
  1577 0000141C 05                      	db T_undefined
  1578 0000141D [FC0B000000000000]      	dq L_constants + 3068
  1579                                  
  1580                                  free_var_96:	; location of list?
  1581 00001425 [2D14000000000000]      	dq .undefined_object
  1582                                  .undefined_object:
  1583 0000142D 05                      	db T_undefined
  1584 0000142E [7107000000000000]      	dq L_constants + 1905
  1585                                  
  1586                                  free_var_97:	; location of logarithm
  1587 00001436 [3E14000000000000]      	dq .undefined_object
  1588                                  .undefined_object:
  1589 0000143E 05                      	db T_undefined
  1590 0000143F [8B0D000000000000]      	dq L_constants + 3467
  1591                                  
  1592                                  free_var_98:	; location of make-list-thunk
  1593 00001447 [4F14000000000000]      	dq .undefined_object
  1594                                  .undefined_object:
  1595 0000144F 05                      	db T_undefined
  1596 00001450 [3F0D000000000000]      	dq L_constants + 3391
  1597                                  
  1598                                  free_var_99:	; location of make-string
  1599 00001458 [6014000000000000]      	dq .undefined_object
  1600                                  .undefined_object:
  1601 00001460 05                      	db T_undefined
  1602 00001461 [5C04000000000000]      	dq L_constants + 1116
  1603                                  
  1604                                  free_var_100:	; location of make-string-thunk
  1605 00001469 [7114000000000000]      	dq .undefined_object
  1606                                  .undefined_object:
  1607 00001471 05                      	db T_undefined
  1608 00001472 [570D000000000000]      	dq L_constants + 3415
  1609                                  
  1610                                  free_var_101:	; location of make-vector
  1611 0000147A [8214000000000000]      	dq .undefined_object
  1612                                  .undefined_object:
  1613 00001482 05                      	db T_undefined
  1614 00001483 [4804000000000000]      	dq L_constants + 1096
  1615                                  
  1616                                  free_var_102:	; location of make-vector-thunk
  1617 0000148B [9314000000000000]      	dq .undefined_object
  1618                                  .undefined_object:
  1619 00001493 05                      	db T_undefined
  1620 00001494 [710D000000000000]      	dq L_constants + 3441
  1621                                  
  1622                                  free_var_103:	; location of map
  1623 0000149C [A414000000000000]      	dq .undefined_object
  1624                                  .undefined_object:
  1625 000014A4 05                      	db T_undefined
  1626 000014A5 [EE07000000000000]      	dq L_constants + 2030
  1627                                  
  1628                                  free_var_104:	; location of negative?
  1629 000014AD [B514000000000000]      	dq .undefined_object
  1630                                  .undefined_object:
  1631 000014B5 05                      	db T_undefined
  1632 000014B6 [560C000000000000]      	dq L_constants + 3158
  1633                                  
  1634                                  free_var_105:	; location of newline
  1635 000014BE [C614000000000000]      	dq .undefined_object
  1636                                  .undefined_object:
  1637 000014C6 05                      	db T_undefined
  1638 000014C7 [A60D000000000000]      	dq L_constants + 3494
  1639                                  
  1640                                  free_var_106:	; location of not
  1641 000014CF [D714000000000000]      	dq .undefined_object
  1642                                  .undefined_object:
  1643 000014D7 05                      	db T_undefined
  1644 000014D8 [8C07000000000000]      	dq L_constants + 1932
  1645                                  
  1646                                  free_var_107:	; location of null?
  1647 000014E0 [E814000000000000]      	dq .undefined_object
  1648                                  .undefined_object:
  1649 000014E8 05                      	db T_undefined
  1650 000014E9 [0600000000000000]      	dq L_constants + 6
  1651                                  
  1652                                  free_var_108:	; location of number?
  1653 000014F1 [F914000000000000]      	dq .undefined_object
  1654                                  .undefined_object:
  1655 000014F9 05                      	db T_undefined
  1656 000014FA [BB00000000000000]      	dq L_constants + 187
  1657                                  
  1658                                  free_var_109:	; location of odd?
  1659 00001502 [0A15000000000000]      	dq .undefined_object
  1660                                  .undefined_object:
  1661 0000150A 05                      	db T_undefined
  1662 0000150B [7F0C000000000000]      	dq L_constants + 3199
  1663                                  
  1664                                  free_var_110:	; location of ormap
  1665 00001513 [1B15000000000000]      	dq .undefined_object
  1666                                  .undefined_object:
  1667 0000151B 05                      	db T_undefined
  1668 0000151C [E007000000000000]      	dq L_constants + 2016
  1669                                  
  1670                                  free_var_111:	; location of pair?
  1671 00001524 [2C15000000000000]      	dq .undefined_object
  1672                                  .undefined_object:
  1673 0000152C 05                      	db T_undefined
  1674 0000152D [1400000000000000]      	dq L_constants + 20
  1675                                  
  1676                                  free_var_112:	; location of positive?
  1677 00001535 [3D15000000000000]      	dq .undefined_object
  1678                                  .undefined_object:
  1679 0000153D 05                      	db T_undefined
  1680 0000153E [440C000000000000]      	dq L_constants + 3140
  1681                                  
  1682                                  free_var_113:	; location of random
  1683 00001546 [4E15000000000000]      	dq .undefined_object
  1684                                  .undefined_object:
  1685 0000154E 05                      	db T_undefined
  1686 0000154F [350C000000000000]      	dq L_constants + 3125
  1687                                  
  1688                                  free_var_114:	; location of rational?
  1689 00001557 [5F15000000000000]      	dq .undefined_object
  1690                                  .undefined_object:
  1691 0000155F 05                      	db T_undefined
  1692 00001560 [9807000000000000]      	dq L_constants + 1944
  1693                                  
  1694                                  free_var_115:	; location of real
  1695 00001568 [7015000000000000]      	dq .undefined_object
  1696                                  .undefined_object:
  1697 00001570 05                      	db T_undefined
  1698 00001571 [BE08000000000000]      	dq L_constants + 2238
  1699                                  
  1700                                  free_var_116:	; location of real?
  1701 00001579 [8115000000000000]      	dq .undefined_object
  1702                                  .undefined_object:
  1703 00001581 05                      	db T_undefined
  1704 00001582 [8A00000000000000]      	dq L_constants + 138
  1705                                  
  1706                                  free_var_117:	; location of remainder
  1707 0000158A [9215000000000000]      	dq .undefined_object
  1708                                  .undefined_object:
  1709 00001592 05                      	db T_undefined
  1710 00001593 [C603000000000000]      	dq L_constants + 966
  1711                                  
  1712                                  free_var_118:	; location of reverse
  1713 0000159B [A315000000000000]      	dq .undefined_object
  1714                                  .undefined_object:
  1715 000015A3 05                      	db T_undefined
  1716 000015A4 [0908000000000000]      	dq L_constants + 2057
  1717                                  
  1718                                  free_var_119:	; location of string->list
  1719 000015AC [B415000000000000]      	dq .undefined_object
  1720                                  .undefined_object:
  1721 000015B4 05                      	db T_undefined
  1722 000015B5 [B00A000000000000]      	dq L_constants + 2736
  1723                                  
  1724                                  free_var_120:	; location of string-append
  1725 000015BD [C515000000000000]      	dq .undefined_object
  1726                                  .undefined_object:
  1727 000015C5 05                      	db T_undefined
  1728 000015C6 [B50C000000000000]      	dq L_constants + 3253
  1729                                  
  1730                                  free_var_121:	; location of string-ci<=?
  1731 000015CE [D615000000000000]      	dq .undefined_object
  1732                                  .undefined_object:
  1733 000015D6 05                      	db T_undefined
  1734 000015D7 [300B000000000000]      	dq L_constants + 2864
  1735                                  
  1736                                  free_var_122:	; location of string-ci<?
  1737 000015DF [E715000000000000]      	dq .undefined_object
  1738                                  .undefined_object:
  1739 000015E7 05                      	db T_undefined
  1740 000015E8 [1C0B000000000000]      	dq L_constants + 2844
  1741                                  
  1742                                  free_var_123:	; location of string-ci=?
  1743 000015F0 [F815000000000000]      	dq .undefined_object
  1744                                  .undefined_object:
  1745 000015F8 05                      	db T_undefined
  1746 000015F9 [450B000000000000]      	dq L_constants + 2885
  1747                                  
  1748                                  free_var_124:	; location of string-ci>=?
  1749 00001601 [0916000000000000]      	dq .undefined_object
  1750                                  .undefined_object:
  1751 00001609 05                      	db T_undefined
  1752 0000160A [590B000000000000]      	dq L_constants + 2905
  1753                                  
  1754                                  free_var_125:	; location of string-ci>?
  1755 00001612 [1A16000000000000]      	dq .undefined_object
  1756                                  .undefined_object:
  1757 0000161A 05                      	db T_undefined
  1758 0000161B [6E0B000000000000]      	dq L_constants + 2926
  1759                                  
  1760                                  free_var_126:	; location of string-downcase
  1761 00001623 [2B16000000000000]      	dq .undefined_object
  1762                                  .undefined_object:
  1763 0000162B 05                      	db T_undefined
  1764 0000162C [6D0A000000000000]      	dq L_constants + 2669
  1765                                  
  1766                                  free_var_127:	; location of string-length
  1767 00001634 [3C16000000000000]      	dq .undefined_object
  1768                                  .undefined_object:
  1769 0000163C 05                      	db T_undefined
  1770 0000163D [2D01000000000000]      	dq L_constants + 301
  1771                                  
  1772                                  free_var_128:	; location of string-ref
  1773 00001645 [4D16000000000000]      	dq .undefined_object
  1774                                  .undefined_object:
  1775 0000164D 05                      	db T_undefined
  1776 0000164E [FA03000000000000]      	dq L_constants + 1018
  1777                                  
  1778                                  free_var_129:	; location of string-reverse
  1779 00001656 [5E16000000000000]      	dq .undefined_object
  1780                                  .undefined_object:
  1781 0000165E 05                      	db T_undefined
  1782 0000165F [E10C000000000000]      	dq L_constants + 3297
  1783                                  
  1784                                  free_var_130:	; location of string-reverse!
  1785 00001667 [6F16000000000000]      	dq .undefined_object
  1786                                  .undefined_object:
  1787 0000166F 05                      	db T_undefined
  1788 00001670 [0F0D000000000000]      	dq L_constants + 3343
  1789                                  
  1790                                  free_var_131:	; location of string-set!
  1791 00001678 [8016000000000000]      	dq .undefined_object
  1792                                  .undefined_object:
  1793 00001680 05                      	db T_undefined
  1794 00001681 [3404000000000000]      	dq L_constants + 1076
  1795                                  
  1796                                  free_var_132:	; location of string-upcase
  1797 00001689 [9116000000000000]      	dq .undefined_object
  1798                                  .undefined_object:
  1799 00001691 05                      	db T_undefined
  1800 00001692 [850A000000000000]      	dq L_constants + 2693
  1801                                  
  1802                                  free_var_133:	; location of string<=?
  1803 0000169A [A216000000000000]      	dq .undefined_object
  1804                                  .undefined_object:
  1805 000016A2 05                      	db T_undefined
  1806 000016A3 [D60A000000000000]      	dq L_constants + 2774
  1807                                  
  1808                                  free_var_134:	; location of string<?
  1809 000016AB [B316000000000000]      	dq .undefined_object
  1810                                  .undefined_object:
  1811 000016B3 05                      	db T_undefined
  1812 000016B4 [C50A000000000000]      	dq L_constants + 2757
  1813                                  
  1814                                  free_var_135:	; location of string=?
  1815 000016BC [C416000000000000]      	dq .undefined_object
  1816                                  .undefined_object:
  1817 000016C4 05                      	db T_undefined
  1818 000016C5 [E80A000000000000]      	dq L_constants + 2792
  1819                                  
  1820                                  free_var_136:	; location of string>=?
  1821 000016CD [D516000000000000]      	dq .undefined_object
  1822                                  .undefined_object:
  1823 000016D5 05                      	db T_undefined
  1824 000016D6 [F90A000000000000]      	dq L_constants + 2809
  1825                                  
  1826                                  free_var_137:	; location of string>?
  1827 000016DE [E616000000000000]      	dq .undefined_object
  1828                                  .undefined_object:
  1829 000016E6 05                      	db T_undefined
  1830 000016E7 [0B0B000000000000]      	dq L_constants + 2827
  1831                                  
  1832                                  free_var_138:	; location of string?
  1833 000016EF [F716000000000000]      	dq .undefined_object
  1834                                  .undefined_object:
  1835 000016F7 05                      	db T_undefined
  1836 000016F8 [3E00000000000000]      	dq L_constants + 62
  1837                                  
  1838                                  free_var_139:	; location of trng
  1839 00001700 [0817000000000000]      	dq .undefined_object
  1840                                  .undefined_object:
  1841 00001708 05                      	db T_undefined
  1842 00001709 [D501000000000000]      	dq L_constants + 469
  1843                                  
  1844                                  free_var_140:	; location of vector
  1845 00001711 [1917000000000000]      	dq .undefined_object
  1846                                  .undefined_object:
  1847 00001719 05                      	db T_undefined
  1848 0000171A [110C000000000000]      	dq L_constants + 3089
  1849                                  
  1850                                  free_var_141:	; location of vector->list
  1851 00001722 [2A17000000000000]      	dq .undefined_object
  1852                                  .undefined_object:
  1853 0000172A 05                      	db T_undefined
  1854 0000172B [200C000000000000]      	dq L_constants + 3104
  1855                                  
  1856                                  free_var_142:	; location of vector-append
  1857 00001733 [3B17000000000000]      	dq .undefined_object
  1858                                  .undefined_object:
  1859 0000173B 05                      	db T_undefined
  1860 0000173C [CB0C000000000000]      	dq L_constants + 3275
  1861                                  
  1862                                  free_var_143:	; location of vector-length
  1863 00001744 [4C17000000000000]      	dq .undefined_object
  1864                                  .undefined_object:
  1865 0000174C 05                      	db T_undefined
  1866 0000174D [4301000000000000]      	dq L_constants + 323
  1867                                  
  1868                                  free_var_144:	; location of vector-ref
  1869 00001755 [5D17000000000000]      	dq .undefined_object
  1870                                  .undefined_object:
  1871 0000175D 05                      	db T_undefined
  1872 0000175E [0D04000000000000]      	dq L_constants + 1037
  1873                                  
  1874                                  free_var_145:	; location of vector-reverse
  1875 00001766 [6E17000000000000]      	dq .undefined_object
  1876                                  .undefined_object:
  1877 0000176E 05                      	db T_undefined
  1878 0000176F [F80C000000000000]      	dq L_constants + 3320
  1879                                  
  1880                                  free_var_146:	; location of vector-reverse!
  1881 00001777 [7F17000000000000]      	dq .undefined_object
  1882                                  .undefined_object:
  1883 0000177F 05                      	db T_undefined
  1884 00001780 [270D000000000000]      	dq L_constants + 3367
  1885                                  
  1886                                  free_var_147:	; location of vector-set!
  1887 00001788 [9017000000000000]      	dq .undefined_object
  1888                                  .undefined_object:
  1889 00001790 05                      	db T_undefined
  1890 00001791 [2004000000000000]      	dq L_constants + 1056
  1891                                  
  1892                                  free_var_148:	; location of vector?
  1893 00001799 [A117000000000000]      	dq .undefined_object
  1894                                  .undefined_object:
  1895 000017A1 05                      	db T_undefined
  1896 000017A2 [6700000000000000]      	dq L_constants + 103
  1897                                  
  1898                                  free_var_149:	; location of void
  1899 000017AA [B217000000000000]      	dq .undefined_object
  1900                                  .undefined_object:
  1901 000017B2 05                      	db T_undefined
  1902 000017B3 [B80D000000000000]      	dq L_constants + 3512
  1903                                  
  1904                                  free_var_150:	; location of write-char
  1905 000017BB [C317000000000000]      	dq .undefined_object
  1906                                  .undefined_object:
  1907 000017C3 05                      	db T_undefined
  1908 000017C4 [0201000000000000]      	dq L_constants + 258
  1909                                  
  1910                                  free_var_151:	; location of zero?
  1911 000017CC [D417000000000000]      	dq .undefined_object
  1912                                  .undefined_object:
  1913 000017D4 05                      	db T_undefined
  1914 000017D5 [E201000000000000]      	dq L_constants + 482
  1915                                  
  1916                                  
  1917                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1918                                  global main
  1919                                  section .text
  1920                                  main:
  1921 00000000 C8000000                        enter 0, 0
  1922 00000004 6A00                            push 0
  1923 00000006 6A00                            push 0
  1924 00000008 68[747E0100]                    push Lend
  1925 0000000D C8000000                        enter 0, 0
  1926                                  	; building closure for null?
  1927 00000011 48BF-                   	mov rdi, free_var_107
  1927 00000013 [E014000000000000] 
  1928 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1928 0000001D [138A010000000000] 
  1929 00000025 E8E5870100              	call bind_primitive
  1930                                  
  1931                                  	; building closure for pair?
  1932 0000002A 48BF-                   	mov rdi, free_var_111
  1932 0000002C [2415000000000000] 
  1933 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1933 00000036 [458A010000000000] 
  1934 0000003E E8CC870100              	call bind_primitive
  1935                                  
  1936                                  	; building closure for char?
  1937 00000043 48BF-                   	mov rdi, free_var_78
  1937 00000045 [F312000000000000] 
  1938 0000004D 48BE-                   	mov rsi, L_code_ptr_is_char
  1938 0000004F [A98A010000000000] 
  1939 00000057 E8B3870100              	call bind_primitive
  1940                                  
  1941                                  	; building closure for string?
  1942 0000005C 48BF-                   	mov rdi, free_var_138
  1942 0000005E [EF16000000000000] 
  1943 00000066 48BE-                   	mov rsi, L_code_ptr_is_string
  1943 00000068 [DB8A010000000000] 
  1944 00000070 E89A870100              	call bind_primitive
  1945                                  
  1946                                  	; building closure for vector?
  1947 00000075 48BF-                   	mov rdi, free_var_148
  1947 00000077 [9917000000000000] 
  1948 0000007F 48BE-                   	mov rsi, L_code_ptr_is_vector
  1948 00000081 [D98B010000000000] 
  1949 00000089 E881870100              	call bind_primitive
  1950                                  
  1951                                  	; building closure for real?
  1952 0000008E 48BF-                   	mov rdi, free_var_116
  1952 00000090 [7915000000000000] 
  1953 00000098 48BE-                   	mov rsi, L_code_ptr_is_real
  1953 0000009A [3D8C010000000000] 
  1954 000000A2 E868870100              	call bind_primitive
  1955                                  
  1956                                  	; building closure for fraction?
  1957 000000A7 48BF-                   	mov rdi, free_var_88
  1957 000000A9 [9D13000000000000] 
  1958 000000B1 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1958 000000B3 [6F8C010000000000] 
  1959 000000BB E84F870100              	call bind_primitive
  1960                                  
  1961                                  	; building closure for number?
  1962 000000C0 48BF-                   	mov rdi, free_var_108
  1962 000000C2 [F114000000000000] 
  1963 000000CA 48BE-                   	mov rsi, L_code_ptr_is_number
  1963 000000CC [3D8D010000000000] 
  1964 000000D4 E836870100              	call bind_primitive
  1965                                  
  1966                                  	; building closure for cons
  1967 000000D9 48BF-                   	mov rdi, free_var_79
  1967 000000DB [0413000000000000] 
  1968 000000E3 48BE-                   	mov rsi, L_code_ptr_cons
  1968 000000E5 [A58D010000000000] 
  1969 000000ED E81D870100              	call bind_primitive
  1970                                  
  1971                                  	; building closure for write-char
  1972 000000F2 48BF-                   	mov rdi, free_var_150
  1972 000000F4 [BB17000000000000] 
  1973 000000FC 48BE-                   	mov rsi, L_code_ptr_write_char
  1973 000000FE [FB8D010000000000] 
  1974 00000106 E804870100              	call bind_primitive
  1975                                  
  1976                                  	; building closure for car
  1977 0000010B 48BF-                   	mov rdi, free_var_49
  1977 0000010D [0611000000000000] 
  1978 00000115 48BE-                   	mov rsi, L_code_ptr_car
  1978 00000117 [4E8E010000000000] 
  1979 0000011F E8EB860100              	call bind_primitive
  1980                                  
  1981                                  	; building closure for cdr
  1982 00000124 48BF-                   	mov rdi, free_var_64
  1982 00000126 [0512000000000000] 
  1983 0000012E 48BE-                   	mov rsi, L_code_ptr_cdr
  1983 00000130 [728E010000000000] 
  1984 00000138 E8D2860100              	call bind_primitive
  1985                                  
  1986                                  	; building closure for string-length
  1987 0000013D 48BF-                   	mov rdi, free_var_127
  1987 0000013F [3416000000000000] 
  1988 00000147 48BE-                   	mov rsi, L_code_ptr_string_length
  1988 00000149 [968E010000000000] 
  1989 00000151 E8B9860100              	call bind_primitive
  1990                                  
  1991                                  	; building closure for vector-length
  1992 00000156 48BF-                   	mov rdi, free_var_143
  1992 00000158 [4417000000000000] 
  1993 00000160 48BE-                   	mov rsi, L_code_ptr_vector_length
  1993 00000162 [BF8E010000000000] 
  1994 0000016A E8A0860100              	call bind_primitive
  1995                                  
  1996                                  	; building closure for integer->real
  1997 0000016F 48BF-                   	mov rdi, free_var_90
  1997 00000171 [BF13000000000000] 
  1998 00000179 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1998 0000017B [308F010000000000] 
  1999 00000183 E887860100              	call bind_primitive
  2000                                  
  2001                                  	; building closure for fraction->real
  2002 00000188 48BF-                   	mov rdi, free_var_87
  2002 0000018A [8C13000000000000] 
  2003 00000192 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2003 00000194 [5E8F010000000000] 
  2004 0000019C E86E860100              	call bind_primitive
  2005                                  
  2006                                  	; building closure for char->integer
  2007 000001A1 48BF-                   	mov rdi, free_var_65
  2007 000001A3 [1612000000000000] 
  2008 000001AB 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2008 000001AD [998F010000000000] 
  2009 000001B5 E855860100              	call bind_primitive
  2010                                  
  2011                                  	; building closure for integer->char
  2012 000001BA 48BF-                   	mov rdi, free_var_89
  2012 000001BC [AE13000000000000] 
  2013 000001C4 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2013 000001C6 [0890010000000000] 
  2014 000001CE E83C860100              	call bind_primitive
  2015                                  
  2016                                  	; building closure for trng
  2017 000001D3 48BF-                   	mov rdi, free_var_139
  2017 000001D5 [0017000000000000] 
  2018 000001DD 48BE-                   	mov rsi, L_code_ptr_trng
  2018 000001DF [5390010000000000] 
  2019 000001E7 E823860100              	call bind_primitive
  2020                                  
  2021                                  	; building closure for zero?
  2022 000001EC 48BF-                   	mov rdi, free_var_151
  2022 000001EE [CC17000000000000] 
  2023 000001F6 48BE-                   	mov rsi, L_code_ptr_is_zero
  2023 000001F8 [7290010000000000] 
  2024 00000200 E80A860100              	call bind_primitive
  2025                                  
  2026                                  	; building closure for integer?
  2027 00000205 48BF-                   	mov rdi, free_var_91
  2027 00000207 [D013000000000000] 
  2028 0000020F 48BE-                   	mov rsi, L_code_ptr_is_integer
  2028 00000211 [D790010000000000] 
  2029 00000219 E8F1850100              	call bind_primitive
  2030                                  
  2031                                  	; building closure for __bin-apply
  2032 0000021E 48BF-                   	mov rdi, free_var_12
  2032 00000220 [910E000000000000] 
  2033 00000228 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2033 0000022A [7F89010000000000] 
  2034 00000232 E8D8850100              	call bind_primitive
  2035                                  
  2036                                  	; building closure for __bin-add-rr
  2037 00000237 48BF-                   	mov rdi, free_var_10
  2037 00000239 [6F0E000000000000] 
  2038 00000241 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2038 00000243 [0991010000000000] 
  2039 0000024B E8BF850100              	call bind_primitive
  2040                                  
  2041                                  	; building closure for __bin-sub-rr
  2042 00000250 48BF-                   	mov rdi, free_var_26
  2042 00000252 [7F0F000000000000] 
  2043 0000025A 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2043 0000025C [4991010000000000] 
  2044 00000264 E8A6850100              	call bind_primitive
  2045                                  
  2046                                  	; building closure for __bin-mul-rr
  2047 00000269 48BF-                   	mov rdi, free_var_23
  2047 0000026B [4C0F000000000000] 
  2048 00000273 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2048 00000275 [8991010000000000] 
  2049 0000027D E88D850100              	call bind_primitive
  2050                                  
  2051                                  	; building closure for __bin-div-rr
  2052 00000282 48BF-                   	mov rdi, free_var_14
  2052 00000284 [B30E000000000000] 
  2053 0000028C 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2053 0000028E [C991010000000000] 
  2054 00000296 E874850100              	call bind_primitive
  2055                                  
  2056                                  	; building closure for __bin-add-qq
  2057 0000029B 48BF-                   	mov rdi, free_var_9
  2057 0000029D [5E0E000000000000] 
  2058 000002A5 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2058 000002A7 [5392010000000000] 
  2059 000002AF E85B850100              	call bind_primitive
  2060                                  
  2061                                  	; building closure for __bin-sub-qq
  2062 000002B4 48BF-                   	mov rdi, free_var_25
  2062 000002B6 [6E0F000000000000] 
  2063 000002BE 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2063 000002C0 [F392010000000000] 
  2064 000002C8 E842850100              	call bind_primitive
  2065                                  
  2066                                  	; building closure for __bin-mul-qq
  2067 000002CD 48BF-                   	mov rdi, free_var_22
  2067 000002CF [3B0F000000000000] 
  2068 000002D7 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2068 000002D9 [9893010000000000] 
  2069 000002E1 E829850100              	call bind_primitive
  2070                                  
  2071                                  	; building closure for __bin-div-qq
  2072 000002E6 48BF-                   	mov rdi, free_var_13
  2072 000002E8 [A20E000000000000] 
  2073 000002F0 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2073 000002F2 [3294010000000000] 
  2074 000002FA E810850100              	call bind_primitive
  2075                                  
  2076                                  	; building closure for __bin-add-zz
  2077 000002FF 48BF-                   	mov rdi, free_var_11
  2077 00000301 [800E000000000000] 
  2078 00000309 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2078 0000030B [1792010000000000] 
  2079 00000313 E8F7840100              	call bind_primitive
  2080                                  
  2081                                  	; building closure for __bin-sub-zz
  2082 00000318 48BF-                   	mov rdi, free_var_27
  2082 0000031A [900F000000000000] 
  2083 00000322 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2083 00000324 [B792010000000000] 
  2084 0000032C E8DE840100              	call bind_primitive
  2085                                  
  2086                                  	; building closure for __bin-mul-zz
  2087 00000331 48BF-                   	mov rdi, free_var_24
  2087 00000333 [5D0F000000000000] 
  2088 0000033B 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2088 0000033D [5793010000000000] 
  2089 00000345 E8C5840100              	call bind_primitive
  2090                                  
  2091                                  	; building closure for __bin-div-zz
  2092 0000034A 48BF-                   	mov rdi, free_var_15
  2092 0000034C [C40E000000000000] 
  2093 00000354 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2093 00000356 [EC93010000000000] 
  2094 0000035E E8AC840100              	call bind_primitive
  2095                                  
  2096                                  	; building closure for error
  2097 00000363 48BF-                   	mov rdi, free_var_82
  2097 00000365 [3713000000000000] 
  2098 0000036D 48BE-                   	mov rsi, L_code_ptr_error
  2098 0000036F [1C95010000000000] 
  2099 00000377 E893840100              	call bind_primitive
  2100                                  
  2101                                  	; building closure for __bin-less-than-rr
  2102 0000037C 48BF-                   	mov rdi, free_var_20
  2102 0000037E [190F000000000000] 
  2103 00000386 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2103 00000388 [D895010000000000] 
  2104 00000390 E87A840100              	call bind_primitive
  2105                                  
  2106                                  	; building closure for __bin-less-than-qq
  2107 00000395 48BF-                   	mov rdi, free_var_19
  2107 00000397 [080F000000000000] 
  2108 0000039F 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2108 000003A1 [7A96010000000000] 
  2109 000003A9 E861840100              	call bind_primitive
  2110                                  
  2111                                  	; building closure for __bin-less-than-zz
  2112 000003AE 48BF-                   	mov rdi, free_var_21
  2112 000003B0 [2A0F000000000000] 
  2113 000003B8 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2113 000003BA [2B96010000000000] 
  2114 000003C2 E848840100              	call bind_primitive
  2115                                  
  2116                                  	; building closure for __bin-equal-rr
  2117 000003C7 48BF-                   	mov rdi, free_var_17
  2117 000003C9 [E60E000000000000] 
  2118 000003D1 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2118 000003D3 [D996010000000000] 
  2119 000003DB E82F840100              	call bind_primitive
  2120                                  
  2121                                  	; building closure for __bin-equal-qq
  2122 000003E0 48BF-                   	mov rdi, free_var_16
  2122 000003E2 [D50E000000000000] 
  2123 000003EA 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2123 000003EC [7B97010000000000] 
  2124 000003F4 E816840100              	call bind_primitive
  2125                                  
  2126                                  	; building closure for __bin-equal-zz
  2127 000003F9 48BF-                   	mov rdi, free_var_18
  2127 000003FB [F70E000000000000] 
  2128 00000403 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2128 00000405 [2C97010000000000] 
  2129 0000040D E8FD830100              	call bind_primitive
  2130                                  
  2131                                  	; building closure for remainder
  2132 00000412 48BF-                   	mov rdi, free_var_117
  2132 00000414 [8A15000000000000] 
  2133 0000041C 48BE-                   	mov rsi, L_code_ptr_remainder
  2133 0000041E [2698010000000000] 
  2134 00000426 E8E4830100              	call bind_primitive
  2135                                  
  2136                                  	; building closure for string-ref
  2137 0000042B 48BF-                   	mov rdi, free_var_128
  2137 0000042D [4516000000000000] 
  2138 00000435 48BE-                   	mov rsi, L_code_ptr_string_ref
  2138 00000437 [D698010000000000] 
  2139 0000043F E8CB830100              	call bind_primitive
  2140                                  
  2141                                  	; building closure for vector-ref
  2142 00000444 48BF-                   	mov rdi, free_var_144
  2142 00000446 [5517000000000000] 
  2143 0000044E 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2143 00000450 [3299010000000000] 
  2144 00000458 E8B2830100              	call bind_primitive
  2145                                  
  2146                                  	; building closure for vector-set!
  2147 0000045D 48BF-                   	mov rdi, free_var_147
  2147 0000045F [8817000000000000] 
  2148 00000467 48BE-                   	mov rsi, L_code_ptr_vector_set
  2148 00000469 [7F99010000000000] 
  2149 00000471 E899830100              	call bind_primitive
  2150                                  
  2151                                  	; building closure for string-set!
  2152 00000476 48BF-                   	mov rdi, free_var_131
  2152 00000478 [7816000000000000] 
  2153 00000480 48BE-                   	mov rsi, L_code_ptr_string_set
  2153 00000482 [DA99010000000000] 
  2154 0000048A E880830100              	call bind_primitive
  2155                                  
  2156                                  	; building closure for make-vector
  2157 0000048F 48BF-                   	mov rdi, free_var_101
  2157 00000491 [7A14000000000000] 
  2158 00000499 48BE-                   	mov rsi, L_code_ptr_make_vector
  2158 0000049B [409A010000000000] 
  2159 000004A3 E867830100              	call bind_primitive
  2160                                  
  2161                                  	; building closure for make-string
  2162 000004A8 48BF-                   	mov rdi, free_var_99
  2162 000004AA [5814000000000000] 
  2163 000004B2 48BE-                   	mov rsi, L_code_ptr_make_string
  2163 000004B4 [9B9A010000000000] 
  2164 000004BC E84E830100              	call bind_primitive
  2165                                  
  2166                                  	; building closure for eq?
  2167 000004C1 48BF-                   	mov rdi, free_var_80
  2167 000004C3 [1513000000000000] 
  2168 000004CB 48BE-                   	mov rsi, L_code_ptr_is_eq
  2168 000004CD [509B010000000000] 
  2169 000004D5 E835830100              	call bind_primitive
  2170                                  
  2171                                  	; building closure for __integer-to-fraction
  2172 000004DA 48BF-                   	mov rdi, free_var_29
  2172 000004DC [B20F000000000000] 
  2173 000004E4 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2173 000004E6 [CA8F010000000000] 
  2174 000004EE E81C830100              	call bind_primitive
  2175                                  
  2176 000004F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2177 000004F8 E8E27A0100              	call malloc
  2178 000004FD 50                      	push rax
  2179 000004FE BF00000000              	mov rdi, 8 * 0	; new rib
  2180 00000503 E8D77A0100              	call malloc
  2181 00000508 50                      	push rax
  2182 00000509 BF08000000              	mov rdi, 8 * 1	; extended env
  2183 0000050E E8CC7A0100              	call malloc
  2184 00000513 488B7D10                	mov rdi, ENV
  2185 00000517 BE00000000              	mov rsi, 0
  2186 0000051C BA01000000              	mov rdx, 1
  2187                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  2188 00000521 4883FE00                	cmp rsi, 0
  2189 00000525 7410                    	je .L_lambda_simple_env_end_0001
  2190 00000527 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2191 0000052B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2192 0000052F 48FFC6                  	inc rsi
  2193 00000532 48FFC2                  	inc rdx
  2194 00000535 EBEA                    	jmp .L_lambda_simple_env_loop_0001
  2195                                  .L_lambda_simple_env_end_0001:
  2196 00000537 5B                      	pop rbx
  2197 00000538 BE00000000              	mov rsi, 0
  2198                                  .L_lambda_simple_params_loop_0001:	; copy params
  2199 0000053D 4883FE00                	cmp rsi, 0
  2200 00000541 740E                    	je .L_lambda_simple_params_end_0001
  2201 00000543 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2202 00000548 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2203 0000054C 48FFC6                  	inc rsi
  2204 0000054F EBEC                    	jmp .L_lambda_simple_params_loop_0001
  2205                                  .L_lambda_simple_params_end_0001:
  2206 00000551 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2207 00000554 4889C3                  	mov rbx, rax
  2208 00000557 58                      	pop rax
  2209 00000558 C60004                  	mov byte [rax], T_closure
  2210 0000055B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2211 0000055F 48C74009[6C050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  2212 00000567 E9AA000000              	jmp .L_lambda_simple_end_0001
  2213                                  .L_lambda_simple_code_0001:	; lambda-simple body
  2214 0000056C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2215 00000572 740B                    	je .L_lambda_simple_arity_check_ok_0001
  2216 00000574 FF742410                	push qword [rsp + 8 * 2]
  2217 00000578 6A01                    	push 1
  2218 0000057A E9197A0100              	jmp L_error_incorrect_arity_simple
  2219                                  .L_lambda_simple_arity_check_ok_0001:
  2220 0000057F C8000000                	enter 0, 0
  2221                                  	; preparing a tail-call
  2222                                  	; preparing a non-tail-call
  2223 00000583 488B4520                	mov rax, PARAM(0)	; param x
  2224 00000587 50                      	push rax
  2225 00000588 6A01                    	push 1	; arg count
  2226 0000058A 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2227 00000592 803805                  	cmp byte [rax], T_undefined
  2228 00000595 0F8417790100            	je L_error_fvar_undefined
  2229 0000059B 803804                  	cmp byte [rax], T_closure
  2230 0000059E 0F8592790100            	jne L_error_non_closure
  2231 000005A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2232 000005A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2233 000005AA 50                      	push rax
  2234 000005AB 6A01                    	push 1	; arg count
  2235 000005AD 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2236 000005B5 803805                  	cmp byte [rax], T_undefined
  2237 000005B8 0F84F4780100            	je L_error_fvar_undefined
  2238 000005BE 803804                  	cmp byte [rax], T_closure
  2239 000005C1 0F856F790100            	jne L_error_non_closure
  2240 000005C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2241 000005CA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2242 000005CD FF7500                  	push qword[rbp]
  2243 000005D0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2244 000005D3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2245 000005D7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2246 000005DB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2247 000005DF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2248 000005E2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2249 000005E5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2250 000005EA 4983C103                	add r9, 3 	 ;for getting to the params
  2251 000005EE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2252 000005F2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2253                                  .L_tc_recycle_frame_loop_0001:
  2254 000005F5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2255 000005F8 7410                    	je .L_tc_recycle_frame_done_0001
  2256 000005FA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2257 000005FD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2258 00000600 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2259 00000604 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2260 00000608 EBEB                    	jmp .L_tc_recycle_frame_loop_0001
  2261                                  .L_tc_recycle_frame_done_0001:
  2262 0000060A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2263 0000060B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2264 0000060F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2265 00000612 C9                      	leave
  2266 00000613 C21800                  	ret AND_KILL_FRAME(1)
  2267                                  .L_lambda_simple_end_0001:	; new closure is in rax
  2268 00000616 48890425[7E100000]      	mov qword [free_var_41], rax
  2269 0000061E 48B8-                   	mov rax, sob_void
  2269 00000620 [0000000000000000] 
  2270                                  
  2271 00000628 4889C7                  	mov rdi, rax
  2272 0000062B E8047C0100              	call print_sexpr_if_not_void
  2273 00000630 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2274 00000635 E8A5790100              	call malloc
  2275 0000063A 50                      	push rax
  2276 0000063B BF00000000              	mov rdi, 8 * 0	; new rib
  2277 00000640 E89A790100              	call malloc
  2278 00000645 50                      	push rax
  2279 00000646 BF08000000              	mov rdi, 8 * 1	; extended env
  2280 0000064B E88F790100              	call malloc
  2281 00000650 488B7D10                	mov rdi, ENV
  2282 00000654 BE00000000              	mov rsi, 0
  2283 00000659 BA01000000              	mov rdx, 1
  2284                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  2285 0000065E 4883FE00                	cmp rsi, 0
  2286 00000662 7410                    	je .L_lambda_simple_env_end_0002
  2287 00000664 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2288 00000668 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2289 0000066C 48FFC6                  	inc rsi
  2290 0000066F 48FFC2                  	inc rdx
  2291 00000672 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  2292                                  .L_lambda_simple_env_end_0002:
  2293 00000674 5B                      	pop rbx
  2294 00000675 BE00000000              	mov rsi, 0
  2295                                  .L_lambda_simple_params_loop_0002:	; copy params
  2296 0000067A 4883FE00                	cmp rsi, 0
  2297 0000067E 740E                    	je .L_lambda_simple_params_end_0002
  2298 00000680 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2299 00000685 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2300 00000689 48FFC6                  	inc rsi
  2301 0000068C EBEC                    	jmp .L_lambda_simple_params_loop_0002
  2302                                  .L_lambda_simple_params_end_0002:
  2303 0000068E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2304 00000691 4889C3                  	mov rbx, rax
  2305 00000694 58                      	pop rax
  2306 00000695 C60004                  	mov byte [rax], T_closure
  2307 00000698 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2308 0000069C 48C74009[A9060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  2309 000006A4 E9AA000000              	jmp .L_lambda_simple_end_0002
  2310                                  .L_lambda_simple_code_0002:	; lambda-simple body
  2311 000006A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2312 000006AF 740B                    	je .L_lambda_simple_arity_check_ok_0002
  2313 000006B1 FF742410                	push qword [rsp + 8 * 2]
  2314 000006B5 6A01                    	push 1
  2315 000006B7 E9DC780100              	jmp L_error_incorrect_arity_simple
  2316                                  .L_lambda_simple_arity_check_ok_0002:
  2317 000006BC C8000000                	enter 0, 0
  2318                                  	; preparing a tail-call
  2319                                  	; preparing a non-tail-call
  2320 000006C0 488B4520                	mov rax, PARAM(0)	; param x
  2321 000006C4 50                      	push rax
  2322 000006C5 6A01                    	push 1	; arg count
  2323 000006C7 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2324 000006CF 803805                  	cmp byte [rax], T_undefined
  2325 000006D2 0F84DA770100            	je L_error_fvar_undefined
  2326 000006D8 803804                  	cmp byte [rax], T_closure
  2327 000006DB 0F8555780100            	jne L_error_non_closure
  2328 000006E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2329 000006E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2330 000006E7 50                      	push rax
  2331 000006E8 6A01                    	push 1	; arg count
  2332 000006EA 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2333 000006F2 803805                  	cmp byte [rax], T_undefined
  2334 000006F5 0F84B7770100            	je L_error_fvar_undefined
  2335 000006FB 803804                  	cmp byte [rax], T_closure
  2336 000006FE 0F8532780100            	jne L_error_non_closure
  2337 00000704 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2338 00000707 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2339 0000070A FF7500                  	push qword[rbp]
  2340 0000070D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2341 00000710 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2342 00000714 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2343 00000718 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2344 0000071C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2345 0000071F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2346 00000722 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2347 00000727 4983C103                	add r9, 3 	 ;for getting to the params
  2348 0000072B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2349 0000072F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2350                                  .L_tc_recycle_frame_loop_0002:
  2351 00000732 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2352 00000735 7410                    	je .L_tc_recycle_frame_done_0002
  2353 00000737 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2354 0000073A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2355 0000073D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2356 00000741 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2357 00000745 EBEB                    	jmp .L_tc_recycle_frame_loop_0002
  2358                                  .L_tc_recycle_frame_done_0002:
  2359 00000747 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2360 00000748 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2361 0000074C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2362 0000074F C9                      	leave
  2363 00000750 C21800                  	ret AND_KILL_FRAME(1)
  2364                                  .L_lambda_simple_end_0002:	; new closure is in rax
  2365 00000753 48890425[F5100000]      	mov qword [free_var_48], rax
  2366 0000075B 48B8-                   	mov rax, sob_void
  2366 0000075D [0000000000000000] 
  2367                                  
  2368 00000765 4889C7                  	mov rdi, rax
  2369 00000768 E8C77A0100              	call print_sexpr_if_not_void
  2370 0000076D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2371 00000772 E868780100              	call malloc
  2372 00000777 50                      	push rax
  2373 00000778 BF00000000              	mov rdi, 8 * 0	; new rib
  2374 0000077D E85D780100              	call malloc
  2375 00000782 50                      	push rax
  2376 00000783 BF08000000              	mov rdi, 8 * 1	; extended env
  2377 00000788 E852780100              	call malloc
  2378 0000078D 488B7D10                	mov rdi, ENV
  2379 00000791 BE00000000              	mov rsi, 0
  2380 00000796 BA01000000              	mov rdx, 1
  2381                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  2382 0000079B 4883FE00                	cmp rsi, 0
  2383 0000079F 7410                    	je .L_lambda_simple_env_end_0003
  2384 000007A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2385 000007A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2386 000007A9 48FFC6                  	inc rsi
  2387 000007AC 48FFC2                  	inc rdx
  2388 000007AF EBEA                    	jmp .L_lambda_simple_env_loop_0003
  2389                                  .L_lambda_simple_env_end_0003:
  2390 000007B1 5B                      	pop rbx
  2391 000007B2 BE00000000              	mov rsi, 0
  2392                                  .L_lambda_simple_params_loop_0003:	; copy params
  2393 000007B7 4883FE00                	cmp rsi, 0
  2394 000007BB 740E                    	je .L_lambda_simple_params_end_0003
  2395 000007BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2396 000007C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2397 000007C6 48FFC6                  	inc rsi
  2398 000007C9 EBEC                    	jmp .L_lambda_simple_params_loop_0003
  2399                                  .L_lambda_simple_params_end_0003:
  2400 000007CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2401 000007CE 4889C3                  	mov rbx, rax
  2402 000007D1 58                      	pop rax
  2403 000007D2 C60004                  	mov byte [rax], T_closure
  2404 000007D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2405 000007D9 48C74009[E6070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  2406 000007E1 E9AA000000              	jmp .L_lambda_simple_end_0003
  2407                                  .L_lambda_simple_code_0003:	; lambda-simple body
  2408 000007E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2409 000007EC 740B                    	je .L_lambda_simple_arity_check_ok_0003
  2410 000007EE FF742410                	push qword [rsp + 8 * 2]
  2411 000007F2 6A01                    	push 1
  2412 000007F4 E99F770100              	jmp L_error_incorrect_arity_simple
  2413                                  .L_lambda_simple_arity_check_ok_0003:
  2414 000007F9 C8000000                	enter 0, 0
  2415                                  	; preparing a tail-call
  2416                                  	; preparing a non-tail-call
  2417 000007FD 488B4520                	mov rax, PARAM(0)	; param x
  2418 00000801 50                      	push rax
  2419 00000802 6A01                    	push 1	; arg count
  2420 00000804 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2421 0000080C 803805                  	cmp byte [rax], T_undefined
  2422 0000080F 0F849D760100            	je L_error_fvar_undefined
  2423 00000815 803804                  	cmp byte [rax], T_closure
  2424 00000818 0F8518770100            	jne L_error_non_closure
  2425 0000081E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2426 00000821 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2427 00000824 50                      	push rax
  2428 00000825 6A01                    	push 1	; arg count
  2429 00000827 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2430 0000082F 803805                  	cmp byte [rax], T_undefined
  2431 00000832 0F847A760100            	je L_error_fvar_undefined
  2432 00000838 803804                  	cmp byte [rax], T_closure
  2433 0000083B 0F85F5760100            	jne L_error_non_closure
  2434 00000841 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2435 00000844 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2436 00000847 FF7500                  	push qword[rbp]
  2437 0000084A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2438 0000084D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2439 00000851 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2440 00000855 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2441 00000859 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2442 0000085C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2443 0000085F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2444 00000864 4983C103                	add r9, 3 	 ;for getting to the params
  2445 00000868 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2446 0000086C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2447                                  .L_tc_recycle_frame_loop_0003:
  2448 0000086F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2449 00000872 7410                    	je .L_tc_recycle_frame_done_0003
  2450 00000874 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2451 00000877 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2452 0000087A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2453 0000087E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2454 00000882 EBEB                    	jmp .L_tc_recycle_frame_loop_0003
  2455                                  .L_tc_recycle_frame_done_0003:
  2456 00000884 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2457 00000885 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2458 00000889 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2459 0000088C C9                      	leave
  2460 0000088D C21800                  	ret AND_KILL_FRAME(1)
  2461                                  .L_lambda_simple_end_0003:	; new closure is in rax
  2462 00000890 48890425[7D110000]      	mov qword [free_var_56], rax
  2463 00000898 48B8-                   	mov rax, sob_void
  2463 0000089A [0000000000000000] 
  2464                                  
  2465 000008A2 4889C7                  	mov rdi, rax
  2466 000008A5 E88A790100              	call print_sexpr_if_not_void
  2467 000008AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2468 000008AF E82B770100              	call malloc
  2469 000008B4 50                      	push rax
  2470 000008B5 BF00000000              	mov rdi, 8 * 0	; new rib
  2471 000008BA E820770100              	call malloc
  2472 000008BF 50                      	push rax
  2473 000008C0 BF08000000              	mov rdi, 8 * 1	; extended env
  2474 000008C5 E815770100              	call malloc
  2475 000008CA 488B7D10                	mov rdi, ENV
  2476 000008CE BE00000000              	mov rsi, 0
  2477 000008D3 BA01000000              	mov rdx, 1
  2478                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  2479 000008D8 4883FE00                	cmp rsi, 0
  2480 000008DC 7410                    	je .L_lambda_simple_env_end_0004
  2481 000008DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2482 000008E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2483 000008E6 48FFC6                  	inc rsi
  2484 000008E9 48FFC2                  	inc rdx
  2485 000008EC EBEA                    	jmp .L_lambda_simple_env_loop_0004
  2486                                  .L_lambda_simple_env_end_0004:
  2487 000008EE 5B                      	pop rbx
  2488 000008EF BE00000000              	mov rsi, 0
  2489                                  .L_lambda_simple_params_loop_0004:	; copy params
  2490 000008F4 4883FE00                	cmp rsi, 0
  2491 000008F8 740E                    	je .L_lambda_simple_params_end_0004
  2492 000008FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2493 000008FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2494 00000903 48FFC6                  	inc rsi
  2495 00000906 EBEC                    	jmp .L_lambda_simple_params_loop_0004
  2496                                  .L_lambda_simple_params_end_0004:
  2497 00000908 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2498 0000090B 4889C3                  	mov rbx, rax
  2499 0000090E 58                      	pop rax
  2500 0000090F C60004                  	mov byte [rax], T_closure
  2501 00000912 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2502 00000916 48C74009[23090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  2503 0000091E E9AA000000              	jmp .L_lambda_simple_end_0004
  2504                                  .L_lambda_simple_code_0004:	; lambda-simple body
  2505 00000923 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2506 00000929 740B                    	je .L_lambda_simple_arity_check_ok_0004
  2507 0000092B FF742410                	push qword [rsp + 8 * 2]
  2508 0000092F 6A01                    	push 1
  2509 00000931 E962760100              	jmp L_error_incorrect_arity_simple
  2510                                  .L_lambda_simple_arity_check_ok_0004:
  2511 00000936 C8000000                	enter 0, 0
  2512                                  	; preparing a tail-call
  2513                                  	; preparing a non-tail-call
  2514 0000093A 488B4520                	mov rax, PARAM(0)	; param x
  2515 0000093E 50                      	push rax
  2516 0000093F 6A01                    	push 1	; arg count
  2517 00000941 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2518 00000949 803805                  	cmp byte [rax], T_undefined
  2519 0000094C 0F8460750100            	je L_error_fvar_undefined
  2520 00000952 803804                  	cmp byte [rax], T_closure
  2521 00000955 0F85DB750100            	jne L_error_non_closure
  2522 0000095B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2523 0000095E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2524 00000961 50                      	push rax
  2525 00000962 6A01                    	push 1	; arg count
  2526 00000964 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  2527 0000096C 803805                  	cmp byte [rax], T_undefined
  2528 0000096F 0F843D750100            	je L_error_fvar_undefined
  2529 00000975 803804                  	cmp byte [rax], T_closure
  2530 00000978 0F85B8750100            	jne L_error_non_closure
  2531 0000097E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2532 00000981 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2533 00000984 FF7500                  	push qword[rbp]
  2534 00000987 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2535 0000098A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2536 0000098E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2537 00000992 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2538 00000996 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2539 00000999 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2540 0000099C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2541 000009A1 4983C103                	add r9, 3 	 ;for getting to the params
  2542 000009A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2543 000009A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2544                                  .L_tc_recycle_frame_loop_0004:
  2545 000009AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2546 000009AF 7410                    	je .L_tc_recycle_frame_done_0004
  2547 000009B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2548 000009B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2549 000009B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2550 000009BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2551 000009BF EBEB                    	jmp .L_tc_recycle_frame_loop_0004
  2552                                  .L_tc_recycle_frame_done_0004:
  2553 000009C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2554 000009C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2555 000009C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2556 000009C9 C9                      	leave
  2557 000009CA C21800                  	ret AND_KILL_FRAME(1)
  2558                                  .L_lambda_simple_end_0004:	; new closure is in rax
  2559 000009CD 48890425[F4110000]      	mov qword [free_var_63], rax
  2560 000009D5 48B8-                   	mov rax, sob_void
  2560 000009D7 [0000000000000000] 
  2561                                  
  2562 000009DF 4889C7                  	mov rdi, rax
  2563 000009E2 E84D780100              	call print_sexpr_if_not_void
  2564 000009E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2565 000009EC E8EE750100              	call malloc
  2566 000009F1 50                      	push rax
  2567 000009F2 BF00000000              	mov rdi, 8 * 0	; new rib
  2568 000009F7 E8E3750100              	call malloc
  2569 000009FC 50                      	push rax
  2570 000009FD BF08000000              	mov rdi, 8 * 1	; extended env
  2571 00000A02 E8D8750100              	call malloc
  2572 00000A07 488B7D10                	mov rdi, ENV
  2573 00000A0B BE00000000              	mov rsi, 0
  2574 00000A10 BA01000000              	mov rdx, 1
  2575                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  2576 00000A15 4883FE00                	cmp rsi, 0
  2577 00000A19 7410                    	je .L_lambda_simple_env_end_0005
  2578 00000A1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2579 00000A1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2580 00000A23 48FFC6                  	inc rsi
  2581 00000A26 48FFC2                  	inc rdx
  2582 00000A29 EBEA                    	jmp .L_lambda_simple_env_loop_0005
  2583                                  .L_lambda_simple_env_end_0005:
  2584 00000A2B 5B                      	pop rbx
  2585 00000A2C BE00000000              	mov rsi, 0
  2586                                  .L_lambda_simple_params_loop_0005:	; copy params
  2587 00000A31 4883FE00                	cmp rsi, 0
  2588 00000A35 740E                    	je .L_lambda_simple_params_end_0005
  2589 00000A37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2590 00000A3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2591 00000A40 48FFC6                  	inc rsi
  2592 00000A43 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  2593                                  .L_lambda_simple_params_end_0005:
  2594 00000A45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2595 00000A48 4889C3                  	mov rbx, rax
  2596 00000A4B 58                      	pop rax
  2597 00000A4C C60004                  	mov byte [rax], T_closure
  2598 00000A4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2599 00000A53 48C74009[600A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  2600 00000A5B E9AA000000              	jmp .L_lambda_simple_end_0005
  2601                                  .L_lambda_simple_code_0005:	; lambda-simple body
  2602 00000A60 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2603 00000A66 740B                    	je .L_lambda_simple_arity_check_ok_0005
  2604 00000A68 FF742410                	push qword [rsp + 8 * 2]
  2605 00000A6C 6A01                    	push 1
  2606 00000A6E E925750100              	jmp L_error_incorrect_arity_simple
  2607                                  .L_lambda_simple_arity_check_ok_0005:
  2608 00000A73 C8000000                	enter 0, 0
  2609                                  	; preparing a tail-call
  2610                                  	; preparing a non-tail-call
  2611 00000A77 488B4520                	mov rax, PARAM(0)	; param x
  2612 00000A7B 50                      	push rax
  2613 00000A7C 6A01                    	push 1	; arg count
  2614 00000A7E 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  2615 00000A86 803805                  	cmp byte [rax], T_undefined
  2616 00000A89 0F8423740100            	je L_error_fvar_undefined
  2617 00000A8F 803804                  	cmp byte [rax], T_closure
  2618 00000A92 0F859E740100            	jne L_error_non_closure
  2619 00000A98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2620 00000A9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2621 00000A9E 50                      	push rax
  2622 00000A9F 6A01                    	push 1	; arg count
  2623 00000AA1 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2624 00000AA9 803805                  	cmp byte [rax], T_undefined
  2625 00000AAC 0F8400740100            	je L_error_fvar_undefined
  2626 00000AB2 803804                  	cmp byte [rax], T_closure
  2627 00000AB5 0F857B740100            	jne L_error_non_closure
  2628 00000ABB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2629 00000ABE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2630 00000AC1 FF7500                  	push qword[rbp]
  2631 00000AC4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2632 00000AC7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2633 00000ACB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2634 00000ACF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2635 00000AD3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2636 00000AD6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2637 00000AD9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2638 00000ADE 4983C103                	add r9, 3 	 ;for getting to the params
  2639 00000AE2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2640 00000AE6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2641                                  .L_tc_recycle_frame_loop_0005:
  2642 00000AE9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2643 00000AEC 7410                    	je .L_tc_recycle_frame_done_0005
  2644 00000AEE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2645 00000AF1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2646 00000AF4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2647 00000AF8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2648 00000AFC EBEB                    	jmp .L_tc_recycle_frame_loop_0005
  2649                                  .L_tc_recycle_frame_done_0005:
  2650 00000AFE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2651 00000AFF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2652 00000B03 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2653 00000B06 C9                      	leave
  2654 00000B07 C21800                  	ret AND_KILL_FRAME(1)
  2655                                  .L_lambda_simple_end_0005:	; new closure is in rax
  2656 00000B0A 48890425[3A100000]      	mov qword [free_var_37], rax
  2657 00000B12 48B8-                   	mov rax, sob_void
  2657 00000B14 [0000000000000000] 
  2658                                  
  2659 00000B1C 4889C7                  	mov rdi, rax
  2660 00000B1F E810770100              	call print_sexpr_if_not_void
  2661 00000B24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2662 00000B29 E8B1740100              	call malloc
  2663 00000B2E 50                      	push rax
  2664 00000B2F BF00000000              	mov rdi, 8 * 0	; new rib
  2665 00000B34 E8A6740100              	call malloc
  2666 00000B39 50                      	push rax
  2667 00000B3A BF08000000              	mov rdi, 8 * 1	; extended env
  2668 00000B3F E89B740100              	call malloc
  2669 00000B44 488B7D10                	mov rdi, ENV
  2670 00000B48 BE00000000              	mov rsi, 0
  2671 00000B4D BA01000000              	mov rdx, 1
  2672                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  2673 00000B52 4883FE00                	cmp rsi, 0
  2674 00000B56 7410                    	je .L_lambda_simple_env_end_0006
  2675 00000B58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2676 00000B5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2677 00000B60 48FFC6                  	inc rsi
  2678 00000B63 48FFC2                  	inc rdx
  2679 00000B66 EBEA                    	jmp .L_lambda_simple_env_loop_0006
  2680                                  .L_lambda_simple_env_end_0006:
  2681 00000B68 5B                      	pop rbx
  2682 00000B69 BE00000000              	mov rsi, 0
  2683                                  .L_lambda_simple_params_loop_0006:	; copy params
  2684 00000B6E 4883FE00                	cmp rsi, 0
  2685 00000B72 740E                    	je .L_lambda_simple_params_end_0006
  2686 00000B74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2687 00000B79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2688 00000B7D 48FFC6                  	inc rsi
  2689 00000B80 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  2690                                  .L_lambda_simple_params_end_0006:
  2691 00000B82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2692 00000B85 4889C3                  	mov rbx, rax
  2693 00000B88 58                      	pop rax
  2694 00000B89 C60004                  	mov byte [rax], T_closure
  2695 00000B8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2696 00000B90 48C74009[9D0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  2697 00000B98 E9AA000000              	jmp .L_lambda_simple_end_0006
  2698                                  .L_lambda_simple_code_0006:	; lambda-simple body
  2699 00000B9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2700 00000BA3 740B                    	je .L_lambda_simple_arity_check_ok_0006
  2701 00000BA5 FF742410                	push qword [rsp + 8 * 2]
  2702 00000BA9 6A01                    	push 1
  2703 00000BAB E9E8730100              	jmp L_error_incorrect_arity_simple
  2704                                  .L_lambda_simple_arity_check_ok_0006:
  2705 00000BB0 C8000000                	enter 0, 0
  2706                                  	; preparing a tail-call
  2707                                  	; preparing a non-tail-call
  2708 00000BB4 488B4520                	mov rax, PARAM(0)	; param x
  2709 00000BB8 50                      	push rax
  2710 00000BB9 6A01                    	push 1	; arg count
  2711 00000BBB 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  2712 00000BC3 803805                  	cmp byte [rax], T_undefined
  2713 00000BC6 0F84E6720100            	je L_error_fvar_undefined
  2714 00000BCC 803804                  	cmp byte [rax], T_closure
  2715 00000BCF 0F8561730100            	jne L_error_non_closure
  2716 00000BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2717 00000BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2718 00000BDB 50                      	push rax
  2719 00000BDC 6A01                    	push 1	; arg count
  2720 00000BDE 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2721 00000BE6 803805                  	cmp byte [rax], T_undefined
  2722 00000BE9 0F84C3720100            	je L_error_fvar_undefined
  2723 00000BEF 803804                  	cmp byte [rax], T_closure
  2724 00000BF2 0F853E730100            	jne L_error_non_closure
  2725 00000BF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2726 00000BFB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2727 00000BFE FF7500                  	push qword[rbp]
  2728 00000C01 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2729 00000C04 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2730 00000C08 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2731 00000C0C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2732 00000C10 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2733 00000C13 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2734 00000C16 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2735 00000C1B 4983C103                	add r9, 3 	 ;for getting to the params
  2736 00000C1F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2737 00000C23 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2738                                  .L_tc_recycle_frame_loop_0006:
  2739 00000C26 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2740 00000C29 7410                    	je .L_tc_recycle_frame_done_0006
  2741 00000C2B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2742 00000C2E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2743 00000C31 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2744 00000C35 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2745 00000C39 EBEB                    	jmp .L_tc_recycle_frame_loop_0006
  2746                                  .L_tc_recycle_frame_done_0006:
  2747 00000C3B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2748 00000C3C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2749 00000C40 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2750 00000C43 C9                      	leave
  2751 00000C44 C21800                  	ret AND_KILL_FRAME(1)
  2752                                  .L_lambda_simple_end_0006:	; new closure is in rax
  2753 00000C47 48890425[6D100000]      	mov qword [free_var_40], rax
  2754 00000C4F 48B8-                   	mov rax, sob_void
  2754 00000C51 [0000000000000000] 
  2755                                  
  2756 00000C59 4889C7                  	mov rdi, rax
  2757 00000C5C E8D3750100              	call print_sexpr_if_not_void
  2758 00000C61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2759 00000C66 E874730100              	call malloc
  2760 00000C6B 50                      	push rax
  2761 00000C6C BF00000000              	mov rdi, 8 * 0	; new rib
  2762 00000C71 E869730100              	call malloc
  2763 00000C76 50                      	push rax
  2764 00000C77 BF08000000              	mov rdi, 8 * 1	; extended env
  2765 00000C7C E85E730100              	call malloc
  2766 00000C81 488B7D10                	mov rdi, ENV
  2767 00000C85 BE00000000              	mov rsi, 0
  2768 00000C8A BA01000000              	mov rdx, 1
  2769                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  2770 00000C8F 4883FE00                	cmp rsi, 0
  2771 00000C93 7410                    	je .L_lambda_simple_env_end_0007
  2772 00000C95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2773 00000C99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2774 00000C9D 48FFC6                  	inc rsi
  2775 00000CA0 48FFC2                  	inc rdx
  2776 00000CA3 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  2777                                  .L_lambda_simple_env_end_0007:
  2778 00000CA5 5B                      	pop rbx
  2779 00000CA6 BE00000000              	mov rsi, 0
  2780                                  .L_lambda_simple_params_loop_0007:	; copy params
  2781 00000CAB 4883FE00                	cmp rsi, 0
  2782 00000CAF 740E                    	je .L_lambda_simple_params_end_0007
  2783 00000CB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2784 00000CB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2785 00000CBA 48FFC6                  	inc rsi
  2786 00000CBD EBEC                    	jmp .L_lambda_simple_params_loop_0007
  2787                                  .L_lambda_simple_params_end_0007:
  2788 00000CBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2789 00000CC2 4889C3                  	mov rbx, rax
  2790 00000CC5 58                      	pop rax
  2791 00000CC6 C60004                  	mov byte [rax], T_closure
  2792 00000CC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2793 00000CCD 48C74009[DA0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  2794 00000CD5 E9AA000000              	jmp .L_lambda_simple_end_0007
  2795                                  .L_lambda_simple_code_0007:	; lambda-simple body
  2796 00000CDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2797 00000CE0 740B                    	je .L_lambda_simple_arity_check_ok_0007
  2798 00000CE2 FF742410                	push qword [rsp + 8 * 2]
  2799 00000CE6 6A01                    	push 1
  2800 00000CE8 E9AB720100              	jmp L_error_incorrect_arity_simple
  2801                                  .L_lambda_simple_arity_check_ok_0007:
  2802 00000CED C8000000                	enter 0, 0
  2803                                  	; preparing a tail-call
  2804                                  	; preparing a non-tail-call
  2805 00000CF1 488B4520                	mov rax, PARAM(0)	; param x
  2806 00000CF5 50                      	push rax
  2807 00000CF6 6A01                    	push 1	; arg count
  2808 00000CF8 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  2809 00000D00 803805                  	cmp byte [rax], T_undefined
  2810 00000D03 0F84A9710100            	je L_error_fvar_undefined
  2811 00000D09 803804                  	cmp byte [rax], T_closure
  2812 00000D0C 0F8524720100            	jne L_error_non_closure
  2813 00000D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2814 00000D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2815 00000D18 50                      	push rax
  2816 00000D19 6A01                    	push 1	; arg count
  2817 00000D1B 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2818 00000D23 803805                  	cmp byte [rax], T_undefined
  2819 00000D26 0F8486710100            	je L_error_fvar_undefined
  2820 00000D2C 803804                  	cmp byte [rax], T_closure
  2821 00000D2F 0F8501720100            	jne L_error_non_closure
  2822 00000D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2823 00000D38 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2824 00000D3B FF7500                  	push qword[rbp]
  2825 00000D3E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2826 00000D41 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2827 00000D45 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2828 00000D49 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2829 00000D4D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2830 00000D50 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2831 00000D53 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2832 00000D58 4983C103                	add r9, 3 	 ;for getting to the params
  2833 00000D5C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2834 00000D60 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2835                                  .L_tc_recycle_frame_loop_0007:
  2836 00000D63 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2837 00000D66 7410                    	je .L_tc_recycle_frame_done_0007
  2838 00000D68 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2839 00000D6B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2840 00000D6E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2841 00000D72 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2842 00000D76 EBEB                    	jmp .L_tc_recycle_frame_loop_0007
  2843                                  .L_tc_recycle_frame_done_0007:
  2844 00000D78 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2845 00000D79 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2846 00000D7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2847 00000D80 C9                      	leave
  2848 00000D81 C21800                  	ret AND_KILL_FRAME(1)
  2849                                  .L_lambda_simple_end_0007:	; new closure is in rax
  2850 00000D84 48890425[B1100000]      	mov qword [free_var_44], rax
  2851 00000D8C 48B8-                   	mov rax, sob_void
  2851 00000D8E [0000000000000000] 
  2852                                  
  2853 00000D96 4889C7                  	mov rdi, rax
  2854 00000D99 E896740100              	call print_sexpr_if_not_void
  2855 00000D9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2856 00000DA3 E837720100              	call malloc
  2857 00000DA8 50                      	push rax
  2858 00000DA9 BF00000000              	mov rdi, 8 * 0	; new rib
  2859 00000DAE E82C720100              	call malloc
  2860 00000DB3 50                      	push rax
  2861 00000DB4 BF08000000              	mov rdi, 8 * 1	; extended env
  2862 00000DB9 E821720100              	call malloc
  2863 00000DBE 488B7D10                	mov rdi, ENV
  2864 00000DC2 BE00000000              	mov rsi, 0
  2865 00000DC7 BA01000000              	mov rdx, 1
  2866                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  2867 00000DCC 4883FE00                	cmp rsi, 0
  2868 00000DD0 7410                    	je .L_lambda_simple_env_end_0008
  2869 00000DD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2870 00000DD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2871 00000DDA 48FFC6                  	inc rsi
  2872 00000DDD 48FFC2                  	inc rdx
  2873 00000DE0 EBEA                    	jmp .L_lambda_simple_env_loop_0008
  2874                                  .L_lambda_simple_env_end_0008:
  2875 00000DE2 5B                      	pop rbx
  2876 00000DE3 BE00000000              	mov rsi, 0
  2877                                  .L_lambda_simple_params_loop_0008:	; copy params
  2878 00000DE8 4883FE00                	cmp rsi, 0
  2879 00000DEC 740E                    	je .L_lambda_simple_params_end_0008
  2880 00000DEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2881 00000DF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2882 00000DF7 48FFC6                  	inc rsi
  2883 00000DFA EBEC                    	jmp .L_lambda_simple_params_loop_0008
  2884                                  .L_lambda_simple_params_end_0008:
  2885 00000DFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2886 00000DFF 4889C3                  	mov rbx, rax
  2887 00000E02 58                      	pop rax
  2888 00000E03 C60004                  	mov byte [rax], T_closure
  2889 00000E06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2890 00000E0A 48C74009[170E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  2891 00000E12 E9AA000000              	jmp .L_lambda_simple_end_0008
  2892                                  .L_lambda_simple_code_0008:	; lambda-simple body
  2893 00000E17 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2894 00000E1D 740B                    	je .L_lambda_simple_arity_check_ok_0008
  2895 00000E1F FF742410                	push qword [rsp + 8 * 2]
  2896 00000E23 6A01                    	push 1
  2897 00000E25 E96E710100              	jmp L_error_incorrect_arity_simple
  2898                                  .L_lambda_simple_arity_check_ok_0008:
  2899 00000E2A C8000000                	enter 0, 0
  2900                                  	; preparing a tail-call
  2901                                  	; preparing a non-tail-call
  2902 00000E2E 488B4520                	mov rax, PARAM(0)	; param x
  2903 00000E32 50                      	push rax
  2904 00000E33 6A01                    	push 1	; arg count
  2905 00000E35 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  2906 00000E3D 803805                  	cmp byte [rax], T_undefined
  2907 00000E40 0F846C700100            	je L_error_fvar_undefined
  2908 00000E46 803804                  	cmp byte [rax], T_closure
  2909 00000E49 0F85E7700100            	jne L_error_non_closure
  2910 00000E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2911 00000E52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2912 00000E55 50                      	push rax
  2913 00000E56 6A01                    	push 1	; arg count
  2914 00000E58 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  2915 00000E60 803805                  	cmp byte [rax], T_undefined
  2916 00000E63 0F8449700100            	je L_error_fvar_undefined
  2917 00000E69 803804                  	cmp byte [rax], T_closure
  2918 00000E6C 0F85C4700100            	jne L_error_non_closure
  2919 00000E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2920 00000E75 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2921 00000E78 FF7500                  	push qword[rbp]
  2922 00000E7B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2923 00000E7E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2924 00000E82 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2925 00000E86 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2926 00000E8A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2927 00000E8D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2928 00000E90 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2929 00000E95 4983C103                	add r9, 3 	 ;for getting to the params
  2930 00000E99 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2931 00000E9D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2932                                  .L_tc_recycle_frame_loop_0008:
  2933 00000EA0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2934 00000EA3 7410                    	je .L_tc_recycle_frame_done_0008
  2935 00000EA5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2936 00000EA8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2937 00000EAB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2938 00000EAF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2939 00000EB3 EBEB                    	jmp .L_tc_recycle_frame_loop_0008
  2940                                  .L_tc_recycle_frame_done_0008:
  2941 00000EB5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2942 00000EB6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2943 00000EBA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2944 00000EBD C9                      	leave
  2945 00000EBE C21800                  	ret AND_KILL_FRAME(1)
  2946                                  .L_lambda_simple_end_0008:	; new closure is in rax
  2947 00000EC1 48890425[E4100000]      	mov qword [free_var_47], rax
  2948 00000EC9 48B8-                   	mov rax, sob_void
  2948 00000ECB [0000000000000000] 
  2949                                  
  2950 00000ED3 4889C7                  	mov rdi, rax
  2951 00000ED6 E859730100              	call print_sexpr_if_not_void
  2952 00000EDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2953 00000EE0 E8FA700100              	call malloc
  2954 00000EE5 50                      	push rax
  2955 00000EE6 BF00000000              	mov rdi, 8 * 0	; new rib
  2956 00000EEB E8EF700100              	call malloc
  2957 00000EF0 50                      	push rax
  2958 00000EF1 BF08000000              	mov rdi, 8 * 1	; extended env
  2959 00000EF6 E8E4700100              	call malloc
  2960 00000EFB 488B7D10                	mov rdi, ENV
  2961 00000EFF BE00000000              	mov rsi, 0
  2962 00000F04 BA01000000              	mov rdx, 1
  2963                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  2964 00000F09 4883FE00                	cmp rsi, 0
  2965 00000F0D 7410                    	je .L_lambda_simple_env_end_0009
  2966 00000F0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2967 00000F13 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2968 00000F17 48FFC6                  	inc rsi
  2969 00000F1A 48FFC2                  	inc rdx
  2970 00000F1D EBEA                    	jmp .L_lambda_simple_env_loop_0009
  2971                                  .L_lambda_simple_env_end_0009:
  2972 00000F1F 5B                      	pop rbx
  2973 00000F20 BE00000000              	mov rsi, 0
  2974                                  .L_lambda_simple_params_loop_0009:	; copy params
  2975 00000F25 4883FE00                	cmp rsi, 0
  2976 00000F29 740E                    	je .L_lambda_simple_params_end_0009
  2977 00000F2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2978 00000F30 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2979 00000F34 48FFC6                  	inc rsi
  2980 00000F37 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  2981                                  .L_lambda_simple_params_end_0009:
  2982 00000F39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2983 00000F3C 4889C3                  	mov rbx, rax
  2984 00000F3F 58                      	pop rax
  2985 00000F40 C60004                  	mov byte [rax], T_closure
  2986 00000F43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2987 00000F47 48C74009[540F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  2988 00000F4F E9AA000000              	jmp .L_lambda_simple_end_0009
  2989                                  .L_lambda_simple_code_0009:	; lambda-simple body
  2990 00000F54 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2991 00000F5A 740B                    	je .L_lambda_simple_arity_check_ok_0009
  2992 00000F5C FF742410                	push qword [rsp + 8 * 2]
  2993 00000F60 6A01                    	push 1
  2994 00000F62 E931700100              	jmp L_error_incorrect_arity_simple
  2995                                  .L_lambda_simple_arity_check_ok_0009:
  2996 00000F67 C8000000                	enter 0, 0
  2997                                  	; preparing a tail-call
  2998                                  	; preparing a non-tail-call
  2999 00000F6B 488B4520                	mov rax, PARAM(0)	; param x
  3000 00000F6F 50                      	push rax
  3001 00000F70 6A01                    	push 1	; arg count
  3002 00000F72 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3003 00000F7A 803805                  	cmp byte [rax], T_undefined
  3004 00000F7D 0F842F6F0100            	je L_error_fvar_undefined
  3005 00000F83 803804                  	cmp byte [rax], T_closure
  3006 00000F86 0F85AA6F0100            	jne L_error_non_closure
  3007 00000F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3008 00000F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3009 00000F92 50                      	push rax
  3010 00000F93 6A01                    	push 1	; arg count
  3011 00000F95 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3012 00000F9D 803805                  	cmp byte [rax], T_undefined
  3013 00000FA0 0F840C6F0100            	je L_error_fvar_undefined
  3014 00000FA6 803804                  	cmp byte [rax], T_closure
  3015 00000FA9 0F85876F0100            	jne L_error_non_closure
  3016 00000FAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3017 00000FB2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3018 00000FB5 FF7500                  	push qword[rbp]
  3019 00000FB8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3020 00000FBB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3021 00000FBF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3022 00000FC3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3023 00000FC7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3024 00000FCA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3025 00000FCD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3026 00000FD2 4983C103                	add r9, 3 	 ;for getting to the params
  3027 00000FD6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3028 00000FDA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3029                                  .L_tc_recycle_frame_loop_0009:
  3030 00000FDD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3031 00000FE0 7410                    	je .L_tc_recycle_frame_done_0009
  3032 00000FE2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3033 00000FE5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3034 00000FE8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3035 00000FEC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3036 00000FF0 EBEB                    	jmp .L_tc_recycle_frame_loop_0009
  3037                                  .L_tc_recycle_frame_done_0009:
  3038 00000FF2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3039 00000FF3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3040 00000FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3041 00000FFA C9                      	leave
  3042 00000FFB C21800                  	ret AND_KILL_FRAME(1)
  3043                                  .L_lambda_simple_end_0009:	; new closure is in rax
  3044 00000FFE 48890425[39110000]      	mov qword [free_var_52], rax
  3045 00001006 48B8-                   	mov rax, sob_void
  3045 00001008 [0000000000000000] 
  3046                                  
  3047 00001010 4889C7                  	mov rdi, rax
  3048 00001013 E81C720100              	call print_sexpr_if_not_void
  3049 00001018 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3050 0000101D E8BD6F0100              	call malloc
  3051 00001022 50                      	push rax
  3052 00001023 BF00000000              	mov rdi, 8 * 0	; new rib
  3053 00001028 E8B26F0100              	call malloc
  3054 0000102D 50                      	push rax
  3055 0000102E BF08000000              	mov rdi, 8 * 1	; extended env
  3056 00001033 E8A76F0100              	call malloc
  3057 00001038 488B7D10                	mov rdi, ENV
  3058 0000103C BE00000000              	mov rsi, 0
  3059 00001041 BA01000000              	mov rdx, 1
  3060                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  3061 00001046 4883FE00                	cmp rsi, 0
  3062 0000104A 7410                    	je .L_lambda_simple_env_end_000a
  3063 0000104C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3064 00001050 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3065 00001054 48FFC6                  	inc rsi
  3066 00001057 48FFC2                  	inc rdx
  3067 0000105A EBEA                    	jmp .L_lambda_simple_env_loop_000a
  3068                                  .L_lambda_simple_env_end_000a:
  3069 0000105C 5B                      	pop rbx
  3070 0000105D BE00000000              	mov rsi, 0
  3071                                  .L_lambda_simple_params_loop_000a:	; copy params
  3072 00001062 4883FE00                	cmp rsi, 0
  3073 00001066 740E                    	je .L_lambda_simple_params_end_000a
  3074 00001068 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3075 0000106D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3076 00001071 48FFC6                  	inc rsi
  3077 00001074 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  3078                                  .L_lambda_simple_params_end_000a:
  3079 00001076 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3080 00001079 4889C3                  	mov rbx, rax
  3081 0000107C 58                      	pop rax
  3082 0000107D C60004                  	mov byte [rax], T_closure
  3083 00001080 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3084 00001084 48C74009[91100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  3085 0000108C E9AA000000              	jmp .L_lambda_simple_end_000a
  3086                                  .L_lambda_simple_code_000a:	; lambda-simple body
  3087 00001091 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3088 00001097 740B                    	je .L_lambda_simple_arity_check_ok_000a
  3089 00001099 FF742410                	push qword [rsp + 8 * 2]
  3090 0000109D 6A01                    	push 1
  3091 0000109F E9F46E0100              	jmp L_error_incorrect_arity_simple
  3092                                  .L_lambda_simple_arity_check_ok_000a:
  3093 000010A4 C8000000                	enter 0, 0
  3094                                  	; preparing a tail-call
  3095                                  	; preparing a non-tail-call
  3096 000010A8 488B4520                	mov rax, PARAM(0)	; param x
  3097 000010AC 50                      	push rax
  3098 000010AD 6A01                    	push 1	; arg count
  3099 000010AF 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3100 000010B7 803805                  	cmp byte [rax], T_undefined
  3101 000010BA 0F84F26D0100            	je L_error_fvar_undefined
  3102 000010C0 803804                  	cmp byte [rax], T_closure
  3103 000010C3 0F856D6E0100            	jne L_error_non_closure
  3104 000010C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3105 000010CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3106 000010CF 50                      	push rax
  3107 000010D0 6A01                    	push 1	; arg count
  3108 000010D2 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3109 000010DA 803805                  	cmp byte [rax], T_undefined
  3110 000010DD 0F84CF6D0100            	je L_error_fvar_undefined
  3111 000010E3 803804                  	cmp byte [rax], T_closure
  3112 000010E6 0F854A6E0100            	jne L_error_non_closure
  3113 000010EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3114 000010EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3115 000010F2 FF7500                  	push qword[rbp]
  3116 000010F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3117 000010F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3118 000010FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3119 00001100 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3120 00001104 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3121 00001107 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3122 0000110A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3123 0000110F 4983C103                	add r9, 3 	 ;for getting to the params
  3124 00001113 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3125 00001117 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3126                                  .L_tc_recycle_frame_loop_000a:
  3127 0000111A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3128 0000111D 7410                    	je .L_tc_recycle_frame_done_000a
  3129 0000111F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3130 00001122 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3131 00001125 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3132 00001129 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3133 0000112D EBEB                    	jmp .L_tc_recycle_frame_loop_000a
  3134                                  .L_tc_recycle_frame_done_000a:
  3135 0000112F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3136 00001130 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3137 00001134 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3138 00001137 C9                      	leave
  3139 00001138 C21800                  	ret AND_KILL_FRAME(1)
  3140                                  .L_lambda_simple_end_000a:	; new closure is in rax
  3141 0000113B 48890425[6C110000]      	mov qword [free_var_55], rax
  3142 00001143 48B8-                   	mov rax, sob_void
  3142 00001145 [0000000000000000] 
  3143                                  
  3144 0000114D 4889C7                  	mov rdi, rax
  3145 00001150 E8DF700100              	call print_sexpr_if_not_void
  3146 00001155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3147 0000115A E8806E0100              	call malloc
  3148 0000115F 50                      	push rax
  3149 00001160 BF00000000              	mov rdi, 8 * 0	; new rib
  3150 00001165 E8756E0100              	call malloc
  3151 0000116A 50                      	push rax
  3152 0000116B BF08000000              	mov rdi, 8 * 1	; extended env
  3153 00001170 E86A6E0100              	call malloc
  3154 00001175 488B7D10                	mov rdi, ENV
  3155 00001179 BE00000000              	mov rsi, 0
  3156 0000117E BA01000000              	mov rdx, 1
  3157                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  3158 00001183 4883FE00                	cmp rsi, 0
  3159 00001187 7410                    	je .L_lambda_simple_env_end_000b
  3160 00001189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3161 0000118D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3162 00001191 48FFC6                  	inc rsi
  3163 00001194 48FFC2                  	inc rdx
  3164 00001197 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  3165                                  .L_lambda_simple_env_end_000b:
  3166 00001199 5B                      	pop rbx
  3167 0000119A BE00000000              	mov rsi, 0
  3168                                  .L_lambda_simple_params_loop_000b:	; copy params
  3169 0000119F 4883FE00                	cmp rsi, 0
  3170 000011A3 740E                    	je .L_lambda_simple_params_end_000b
  3171 000011A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3172 000011AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3173 000011AE 48FFC6                  	inc rsi
  3174 000011B1 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  3175                                  .L_lambda_simple_params_end_000b:
  3176 000011B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3177 000011B6 4889C3                  	mov rbx, rax
  3178 000011B9 58                      	pop rax
  3179 000011BA C60004                  	mov byte [rax], T_closure
  3180 000011BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3181 000011C1 48C74009[CE110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  3182 000011C9 E9AA000000              	jmp .L_lambda_simple_end_000b
  3183                                  .L_lambda_simple_code_000b:	; lambda-simple body
  3184 000011CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3185 000011D4 740B                    	je .L_lambda_simple_arity_check_ok_000b
  3186 000011D6 FF742410                	push qword [rsp + 8 * 2]
  3187 000011DA 6A01                    	push 1
  3188 000011DC E9B76D0100              	jmp L_error_incorrect_arity_simple
  3189                                  .L_lambda_simple_arity_check_ok_000b:
  3190 000011E1 C8000000                	enter 0, 0
  3191                                  	; preparing a tail-call
  3192                                  	; preparing a non-tail-call
  3193 000011E5 488B4520                	mov rax, PARAM(0)	; param x
  3194 000011E9 50                      	push rax
  3195 000011EA 6A01                    	push 1	; arg count
  3196 000011EC 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  3197 000011F4 803805                  	cmp byte [rax], T_undefined
  3198 000011F7 0F84B56C0100            	je L_error_fvar_undefined
  3199 000011FD 803804                  	cmp byte [rax], T_closure
  3200 00001200 0F85306D0100            	jne L_error_non_closure
  3201 00001206 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3202 00001209 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3203 0000120C 50                      	push rax
  3204 0000120D 6A01                    	push 1	; arg count
  3205 0000120F 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3206 00001217 803805                  	cmp byte [rax], T_undefined
  3207 0000121A 0F84926C0100            	je L_error_fvar_undefined
  3208 00001220 803804                  	cmp byte [rax], T_closure
  3209 00001223 0F850D6D0100            	jne L_error_non_closure
  3210 00001229 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3211 0000122C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3212 0000122F FF7500                  	push qword[rbp]
  3213 00001232 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3214 00001235 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3215 00001239 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3216 0000123D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3217 00001241 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3218 00001244 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3219 00001247 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3220 0000124C 4983C103                	add r9, 3 	 ;for getting to the params
  3221 00001250 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3222 00001254 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3223                                  .L_tc_recycle_frame_loop_000b:
  3224 00001257 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3225 0000125A 7410                    	je .L_tc_recycle_frame_done_000b
  3226 0000125C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3227 0000125F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3228 00001262 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3229 00001266 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3230 0000126A EBEB                    	jmp .L_tc_recycle_frame_loop_000b
  3231                                  .L_tc_recycle_frame_done_000b:
  3232 0000126C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3233 0000126D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3234 00001271 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3235 00001274 C9                      	leave
  3236 00001275 C21800                  	ret AND_KILL_FRAME(1)
  3237                                  .L_lambda_simple_end_000b:	; new closure is in rax
  3238 00001278 48890425[B0110000]      	mov qword [free_var_59], rax
  3239 00001280 48B8-                   	mov rax, sob_void
  3239 00001282 [0000000000000000] 
  3240                                  
  3241 0000128A 4889C7                  	mov rdi, rax
  3242 0000128D E8A26F0100              	call print_sexpr_if_not_void
  3243 00001292 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3244 00001297 E8436D0100              	call malloc
  3245 0000129C 50                      	push rax
  3246 0000129D BF00000000              	mov rdi, 8 * 0	; new rib
  3247 000012A2 E8386D0100              	call malloc
  3248 000012A7 50                      	push rax
  3249 000012A8 BF08000000              	mov rdi, 8 * 1	; extended env
  3250 000012AD E82D6D0100              	call malloc
  3251 000012B2 488B7D10                	mov rdi, ENV
  3252 000012B6 BE00000000              	mov rsi, 0
  3253 000012BB BA01000000              	mov rdx, 1
  3254                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  3255 000012C0 4883FE00                	cmp rsi, 0
  3256 000012C4 7410                    	je .L_lambda_simple_env_end_000c
  3257 000012C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3258 000012CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3259 000012CE 48FFC6                  	inc rsi
  3260 000012D1 48FFC2                  	inc rdx
  3261 000012D4 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  3262                                  .L_lambda_simple_env_end_000c:
  3263 000012D6 5B                      	pop rbx
  3264 000012D7 BE00000000              	mov rsi, 0
  3265                                  .L_lambda_simple_params_loop_000c:	; copy params
  3266 000012DC 4883FE00                	cmp rsi, 0
  3267 000012E0 740E                    	je .L_lambda_simple_params_end_000c
  3268 000012E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3269 000012E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3270 000012EB 48FFC6                  	inc rsi
  3271 000012EE EBEC                    	jmp .L_lambda_simple_params_loop_000c
  3272                                  .L_lambda_simple_params_end_000c:
  3273 000012F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3274 000012F3 4889C3                  	mov rbx, rax
  3275 000012F6 58                      	pop rax
  3276 000012F7 C60004                  	mov byte [rax], T_closure
  3277 000012FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3278 000012FE 48C74009[0B130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  3279 00001306 E9AA000000              	jmp .L_lambda_simple_end_000c
  3280                                  .L_lambda_simple_code_000c:	; lambda-simple body
  3281 0000130B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3282 00001311 740B                    	je .L_lambda_simple_arity_check_ok_000c
  3283 00001313 FF742410                	push qword [rsp + 8 * 2]
  3284 00001317 6A01                    	push 1
  3285 00001319 E97A6C0100              	jmp L_error_incorrect_arity_simple
  3286                                  .L_lambda_simple_arity_check_ok_000c:
  3287 0000131E C8000000                	enter 0, 0
  3288                                  	; preparing a tail-call
  3289                                  	; preparing a non-tail-call
  3290 00001322 488B4520                	mov rax, PARAM(0)	; param x
  3291 00001326 50                      	push rax
  3292 00001327 6A01                    	push 1	; arg count
  3293 00001329 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  3294 00001331 803805                  	cmp byte [rax], T_undefined
  3295 00001334 0F84786B0100            	je L_error_fvar_undefined
  3296 0000133A 803804                  	cmp byte [rax], T_closure
  3297 0000133D 0F85F36B0100            	jne L_error_non_closure
  3298 00001343 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3299 00001346 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3300 00001349 50                      	push rax
  3301 0000134A 6A01                    	push 1	; arg count
  3302 0000134C 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  3303 00001354 803805                  	cmp byte [rax], T_undefined
  3304 00001357 0F84556B0100            	je L_error_fvar_undefined
  3305 0000135D 803804                  	cmp byte [rax], T_closure
  3306 00001360 0F85D06B0100            	jne L_error_non_closure
  3307 00001366 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3308 00001369 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3309 0000136C FF7500                  	push qword[rbp]
  3310 0000136F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3311 00001372 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3312 00001376 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3313 0000137A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3314 0000137E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3315 00001381 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3316 00001384 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3317 00001389 4983C103                	add r9, 3 	 ;for getting to the params
  3318 0000138D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3319 00001391 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3320                                  .L_tc_recycle_frame_loop_000c:
  3321 00001394 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3322 00001397 7410                    	je .L_tc_recycle_frame_done_000c
  3323 00001399 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3324 0000139C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3325 0000139F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3326 000013A3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3327 000013A7 EBEB                    	jmp .L_tc_recycle_frame_loop_000c
  3328                                  .L_tc_recycle_frame_done_000c:
  3329 000013A9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3330 000013AA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3331 000013AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3332 000013B1 C9                      	leave
  3333 000013B2 C21800                  	ret AND_KILL_FRAME(1)
  3334                                  .L_lambda_simple_end_000c:	; new closure is in rax
  3335 000013B5 48890425[E3110000]      	mov qword [free_var_62], rax
  3336 000013BD 48B8-                   	mov rax, sob_void
  3336 000013BF [0000000000000000] 
  3337                                  
  3338 000013C7 4889C7                  	mov rdi, rax
  3339 000013CA E8656E0100              	call print_sexpr_if_not_void
  3340 000013CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3341 000013D4 E8066C0100              	call malloc
  3342 000013D9 50                      	push rax
  3343 000013DA BF00000000              	mov rdi, 8 * 0	; new rib
  3344 000013DF E8FB6B0100              	call malloc
  3345 000013E4 50                      	push rax
  3346 000013E5 BF08000000              	mov rdi, 8 * 1	; extended env
  3347 000013EA E8F06B0100              	call malloc
  3348 000013EF 488B7D10                	mov rdi, ENV
  3349 000013F3 BE00000000              	mov rsi, 0
  3350 000013F8 BA01000000              	mov rdx, 1
  3351                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  3352 000013FD 4883FE00                	cmp rsi, 0
  3353 00001401 7410                    	je .L_lambda_simple_env_end_000d
  3354 00001403 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3355 00001407 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3356 0000140B 48FFC6                  	inc rsi
  3357 0000140E 48FFC2                  	inc rdx
  3358 00001411 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  3359                                  .L_lambda_simple_env_end_000d:
  3360 00001413 5B                      	pop rbx
  3361 00001414 BE00000000              	mov rsi, 0
  3362                                  .L_lambda_simple_params_loop_000d:	; copy params
  3363 00001419 4883FE00                	cmp rsi, 0
  3364 0000141D 740E                    	je .L_lambda_simple_params_end_000d
  3365 0000141F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3366 00001424 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3367 00001428 48FFC6                  	inc rsi
  3368 0000142B EBEC                    	jmp .L_lambda_simple_params_loop_000d
  3369                                  .L_lambda_simple_params_end_000d:
  3370 0000142D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3371 00001430 4889C3                  	mov rbx, rax
  3372 00001433 58                      	pop rax
  3373 00001434 C60004                  	mov byte [rax], T_closure
  3374 00001437 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3375 0000143B 48C74009[48140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  3376 00001443 E9AA000000              	jmp .L_lambda_simple_end_000d
  3377                                  .L_lambda_simple_code_000d:	; lambda-simple body
  3378 00001448 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3379 0000144E 740B                    	je .L_lambda_simple_arity_check_ok_000d
  3380 00001450 FF742410                	push qword [rsp + 8 * 2]
  3381 00001454 6A01                    	push 1
  3382 00001456 E93D6B0100              	jmp L_error_incorrect_arity_simple
  3383                                  .L_lambda_simple_arity_check_ok_000d:
  3384 0000145B C8000000                	enter 0, 0
  3385                                  	; preparing a tail-call
  3386                                  	; preparing a non-tail-call
  3387 0000145F 488B4520                	mov rax, PARAM(0)	; param x
  3388 00001463 50                      	push rax
  3389 00001464 6A01                    	push 1	; arg count
  3390 00001466 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3391 0000146E 803805                  	cmp byte [rax], T_undefined
  3392 00001471 0F843B6A0100            	je L_error_fvar_undefined
  3393 00001477 803804                  	cmp byte [rax], T_closure
  3394 0000147A 0F85B66A0100            	jne L_error_non_closure
  3395 00001480 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3396 00001483 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3397 00001486 50                      	push rax
  3398 00001487 6A01                    	push 1	; arg count
  3399 00001489 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3400 00001491 803805                  	cmp byte [rax], T_undefined
  3401 00001494 0F84186A0100            	je L_error_fvar_undefined
  3402 0000149A 803804                  	cmp byte [rax], T_closure
  3403 0000149D 0F85936A0100            	jne L_error_non_closure
  3404 000014A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3405 000014A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3406 000014A9 FF7500                  	push qword[rbp]
  3407 000014AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3408 000014AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3409 000014B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3410 000014B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3411 000014BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3412 000014BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3413 000014C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3414 000014C6 4983C103                	add r9, 3 	 ;for getting to the params
  3415 000014CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3416 000014CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3417                                  .L_tc_recycle_frame_loop_000d:
  3418 000014D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3419 000014D4 7410                    	je .L_tc_recycle_frame_done_000d
  3420 000014D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3421 000014D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3422 000014DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3423 000014E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3424 000014E4 EBEB                    	jmp .L_tc_recycle_frame_loop_000d
  3425                                  .L_tc_recycle_frame_done_000d:
  3426 000014E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3427 000014E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3428 000014EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3429 000014EE C9                      	leave
  3430 000014EF C21800                  	ret AND_KILL_FRAME(1)
  3431                                  .L_lambda_simple_end_000d:	; new closure is in rax
  3432 000014F2 48890425[18100000]      	mov qword [free_var_35], rax
  3433 000014FA 48B8-                   	mov rax, sob_void
  3433 000014FC [0000000000000000] 
  3434                                  
  3435 00001504 4889C7                  	mov rdi, rax
  3436 00001507 E8286D0100              	call print_sexpr_if_not_void
  3437 0000150C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3438 00001511 E8C96A0100              	call malloc
  3439 00001516 50                      	push rax
  3440 00001517 BF00000000              	mov rdi, 8 * 0	; new rib
  3441 0000151C E8BE6A0100              	call malloc
  3442 00001521 50                      	push rax
  3443 00001522 BF08000000              	mov rdi, 8 * 1	; extended env
  3444 00001527 E8B36A0100              	call malloc
  3445 0000152C 488B7D10                	mov rdi, ENV
  3446 00001530 BE00000000              	mov rsi, 0
  3447 00001535 BA01000000              	mov rdx, 1
  3448                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  3449 0000153A 4883FE00                	cmp rsi, 0
  3450 0000153E 7410                    	je .L_lambda_simple_env_end_000e
  3451 00001540 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3452 00001544 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3453 00001548 48FFC6                  	inc rsi
  3454 0000154B 48FFC2                  	inc rdx
  3455 0000154E EBEA                    	jmp .L_lambda_simple_env_loop_000e
  3456                                  .L_lambda_simple_env_end_000e:
  3457 00001550 5B                      	pop rbx
  3458 00001551 BE00000000              	mov rsi, 0
  3459                                  .L_lambda_simple_params_loop_000e:	; copy params
  3460 00001556 4883FE00                	cmp rsi, 0
  3461 0000155A 740E                    	je .L_lambda_simple_params_end_000e
  3462 0000155C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3463 00001561 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3464 00001565 48FFC6                  	inc rsi
  3465 00001568 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  3466                                  .L_lambda_simple_params_end_000e:
  3467 0000156A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3468 0000156D 4889C3                  	mov rbx, rax
  3469 00001570 58                      	pop rax
  3470 00001571 C60004                  	mov byte [rax], T_closure
  3471 00001574 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3472 00001578 48C74009[85150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  3473 00001580 E9AA000000              	jmp .L_lambda_simple_end_000e
  3474                                  .L_lambda_simple_code_000e:	; lambda-simple body
  3475 00001585 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3476 0000158B 740B                    	je .L_lambda_simple_arity_check_ok_000e
  3477 0000158D FF742410                	push qword [rsp + 8 * 2]
  3478 00001591 6A01                    	push 1
  3479 00001593 E9006A0100              	jmp L_error_incorrect_arity_simple
  3480                                  .L_lambda_simple_arity_check_ok_000e:
  3481 00001598 C8000000                	enter 0, 0
  3482                                  	; preparing a tail-call
  3483                                  	; preparing a non-tail-call
  3484 0000159C 488B4520                	mov rax, PARAM(0)	; param x
  3485 000015A0 50                      	push rax
  3486 000015A1 6A01                    	push 1	; arg count
  3487 000015A3 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3488 000015AB 803805                  	cmp byte [rax], T_undefined
  3489 000015AE 0F84FE680100            	je L_error_fvar_undefined
  3490 000015B4 803804                  	cmp byte [rax], T_closure
  3491 000015B7 0F8579690100            	jne L_error_non_closure
  3492 000015BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3493 000015C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3494 000015C3 50                      	push rax
  3495 000015C4 6A01                    	push 1	; arg count
  3496 000015C6 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3497 000015CE 803805                  	cmp byte [rax], T_undefined
  3498 000015D1 0F84DB680100            	je L_error_fvar_undefined
  3499 000015D7 803804                  	cmp byte [rax], T_closure
  3500 000015DA 0F8556690100            	jne L_error_non_closure
  3501 000015E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3502 000015E3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3503 000015E6 FF7500                  	push qword[rbp]
  3504 000015E9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3505 000015EC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3506 000015F0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3507 000015F4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3508 000015F8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3509 000015FB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3510 000015FE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3511 00001603 4983C103                	add r9, 3 	 ;for getting to the params
  3512 00001607 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3513 0000160B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3514                                  .L_tc_recycle_frame_loop_000e:
  3515 0000160E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3516 00001611 7410                    	je .L_tc_recycle_frame_done_000e
  3517 00001613 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3518 00001616 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3519 00001619 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3520 0000161D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3521 00001621 EBEB                    	jmp .L_tc_recycle_frame_loop_000e
  3522                                  .L_tc_recycle_frame_done_000e:
  3523 00001623 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3524 00001624 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3525 00001628 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3526 0000162B C9                      	leave
  3527 0000162C C21800                  	ret AND_KILL_FRAME(1)
  3528                                  .L_lambda_simple_end_000e:	; new closure is in rax
  3529 0000162F 48890425[29100000]      	mov qword [free_var_36], rax
  3530 00001637 48B8-                   	mov rax, sob_void
  3530 00001639 [0000000000000000] 
  3531                                  
  3532 00001641 4889C7                  	mov rdi, rax
  3533 00001644 E8EB6B0100              	call print_sexpr_if_not_void
  3534 00001649 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3535 0000164E E88C690100              	call malloc
  3536 00001653 50                      	push rax
  3537 00001654 BF00000000              	mov rdi, 8 * 0	; new rib
  3538 00001659 E881690100              	call malloc
  3539 0000165E 50                      	push rax
  3540 0000165F BF08000000              	mov rdi, 8 * 1	; extended env
  3541 00001664 E876690100              	call malloc
  3542 00001669 488B7D10                	mov rdi, ENV
  3543 0000166D BE00000000              	mov rsi, 0
  3544 00001672 BA01000000              	mov rdx, 1
  3545                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  3546 00001677 4883FE00                	cmp rsi, 0
  3547 0000167B 7410                    	je .L_lambda_simple_env_end_000f
  3548 0000167D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3549 00001681 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3550 00001685 48FFC6                  	inc rsi
  3551 00001688 48FFC2                  	inc rdx
  3552 0000168B EBEA                    	jmp .L_lambda_simple_env_loop_000f
  3553                                  .L_lambda_simple_env_end_000f:
  3554 0000168D 5B                      	pop rbx
  3555 0000168E BE00000000              	mov rsi, 0
  3556                                  .L_lambda_simple_params_loop_000f:	; copy params
  3557 00001693 4883FE00                	cmp rsi, 0
  3558 00001697 740E                    	je .L_lambda_simple_params_end_000f
  3559 00001699 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3560 0000169E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3561 000016A2 48FFC6                  	inc rsi
  3562 000016A5 EBEC                    	jmp .L_lambda_simple_params_loop_000f
  3563                                  .L_lambda_simple_params_end_000f:
  3564 000016A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3565 000016AA 4889C3                  	mov rbx, rax
  3566 000016AD 58                      	pop rax
  3567 000016AE C60004                  	mov byte [rax], T_closure
  3568 000016B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3569 000016B5 48C74009[C2160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  3570 000016BD E9AA000000              	jmp .L_lambda_simple_end_000f
  3571                                  .L_lambda_simple_code_000f:	; lambda-simple body
  3572 000016C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3573 000016C8 740B                    	je .L_lambda_simple_arity_check_ok_000f
  3574 000016CA FF742410                	push qword [rsp + 8 * 2]
  3575 000016CE 6A01                    	push 1
  3576 000016D0 E9C3680100              	jmp L_error_incorrect_arity_simple
  3577                                  .L_lambda_simple_arity_check_ok_000f:
  3578 000016D5 C8000000                	enter 0, 0
  3579                                  	; preparing a tail-call
  3580                                  	; preparing a non-tail-call
  3581 000016D9 488B4520                	mov rax, PARAM(0)	; param x
  3582 000016DD 50                      	push rax
  3583 000016DE 6A01                    	push 1	; arg count
  3584 000016E0 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  3585 000016E8 803805                  	cmp byte [rax], T_undefined
  3586 000016EB 0F84C1670100            	je L_error_fvar_undefined
  3587 000016F1 803804                  	cmp byte [rax], T_closure
  3588 000016F4 0F853C680100            	jne L_error_non_closure
  3589 000016FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3590 000016FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3591 00001700 50                      	push rax
  3592 00001701 6A01                    	push 1	; arg count
  3593 00001703 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3594 0000170B 803805                  	cmp byte [rax], T_undefined
  3595 0000170E 0F849E670100            	je L_error_fvar_undefined
  3596 00001714 803804                  	cmp byte [rax], T_closure
  3597 00001717 0F8519680100            	jne L_error_non_closure
  3598 0000171D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3599 00001720 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3600 00001723 FF7500                  	push qword[rbp]
  3601 00001726 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3602 00001729 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3603 0000172D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3604 00001731 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3605 00001735 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3606 00001738 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3607 0000173B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3608 00001740 4983C103                	add r9, 3 	 ;for getting to the params
  3609 00001744 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3610 00001748 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3611                                  .L_tc_recycle_frame_loop_000f:
  3612 0000174B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3613 0000174E 7410                    	je .L_tc_recycle_frame_done_000f
  3614 00001750 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3615 00001753 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3616 00001756 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3617 0000175A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3618 0000175E EBEB                    	jmp .L_tc_recycle_frame_loop_000f
  3619                                  .L_tc_recycle_frame_done_000f:
  3620 00001760 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3621 00001761 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3622 00001765 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3623 00001768 C9                      	leave
  3624 00001769 C21800                  	ret AND_KILL_FRAME(1)
  3625                                  .L_lambda_simple_end_000f:	; new closure is in rax
  3626 0000176C 48890425[4B100000]      	mov qword [free_var_38], rax
  3627 00001774 48B8-                   	mov rax, sob_void
  3627 00001776 [0000000000000000] 
  3628                                  
  3629 0000177E 4889C7                  	mov rdi, rax
  3630 00001781 E8AE6A0100              	call print_sexpr_if_not_void
  3631 00001786 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3632 0000178B E84F680100              	call malloc
  3633 00001790 50                      	push rax
  3634 00001791 BF00000000              	mov rdi, 8 * 0	; new rib
  3635 00001796 E844680100              	call malloc
  3636 0000179B 50                      	push rax
  3637 0000179C BF08000000              	mov rdi, 8 * 1	; extended env
  3638 000017A1 E839680100              	call malloc
  3639 000017A6 488B7D10                	mov rdi, ENV
  3640 000017AA BE00000000              	mov rsi, 0
  3641 000017AF BA01000000              	mov rdx, 1
  3642                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  3643 000017B4 4883FE00                	cmp rsi, 0
  3644 000017B8 7410                    	je .L_lambda_simple_env_end_0010
  3645 000017BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3646 000017BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3647 000017C2 48FFC6                  	inc rsi
  3648 000017C5 48FFC2                  	inc rdx
  3649 000017C8 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  3650                                  .L_lambda_simple_env_end_0010:
  3651 000017CA 5B                      	pop rbx
  3652 000017CB BE00000000              	mov rsi, 0
  3653                                  .L_lambda_simple_params_loop_0010:	; copy params
  3654 000017D0 4883FE00                	cmp rsi, 0
  3655 000017D4 740E                    	je .L_lambda_simple_params_end_0010
  3656 000017D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3657 000017DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3658 000017DF 48FFC6                  	inc rsi
  3659 000017E2 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  3660                                  .L_lambda_simple_params_end_0010:
  3661 000017E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3662 000017E7 4889C3                  	mov rbx, rax
  3663 000017EA 58                      	pop rax
  3664 000017EB C60004                  	mov byte [rax], T_closure
  3665 000017EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3666 000017F2 48C74009[FF170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  3667 000017FA E9AA000000              	jmp .L_lambda_simple_end_0010
  3668                                  .L_lambda_simple_code_0010:	; lambda-simple body
  3669 000017FF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3670 00001805 740B                    	je .L_lambda_simple_arity_check_ok_0010
  3671 00001807 FF742410                	push qword [rsp + 8 * 2]
  3672 0000180B 6A01                    	push 1
  3673 0000180D E986670100              	jmp L_error_incorrect_arity_simple
  3674                                  .L_lambda_simple_arity_check_ok_0010:
  3675 00001812 C8000000                	enter 0, 0
  3676                                  	; preparing a tail-call
  3677                                  	; preparing a non-tail-call
  3678 00001816 488B4520                	mov rax, PARAM(0)	; param x
  3679 0000181A 50                      	push rax
  3680 0000181B 6A01                    	push 1	; arg count
  3681 0000181D 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  3682 00001825 803805                  	cmp byte [rax], T_undefined
  3683 00001828 0F8484660100            	je L_error_fvar_undefined
  3684 0000182E 803804                  	cmp byte [rax], T_closure
  3685 00001831 0F85FF660100            	jne L_error_non_closure
  3686 00001837 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3687 0000183A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3688 0000183D 50                      	push rax
  3689 0000183E 6A01                    	push 1	; arg count
  3690 00001840 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3691 00001848 803805                  	cmp byte [rax], T_undefined
  3692 0000184B 0F8461660100            	je L_error_fvar_undefined
  3693 00001851 803804                  	cmp byte [rax], T_closure
  3694 00001854 0F85DC660100            	jne L_error_non_closure
  3695 0000185A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3696 0000185D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3697 00001860 FF7500                  	push qword[rbp]
  3698 00001863 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3699 00001866 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3700 0000186A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3701 0000186E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3702 00001872 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3703 00001875 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3704 00001878 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3705 0000187D 4983C103                	add r9, 3 	 ;for getting to the params
  3706 00001881 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3707 00001885 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3708                                  .L_tc_recycle_frame_loop_0010:
  3709 00001888 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3710 0000188B 7410                    	je .L_tc_recycle_frame_done_0010
  3711 0000188D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3712 00001890 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3713 00001893 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3714 00001897 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3715 0000189B EBEB                    	jmp .L_tc_recycle_frame_loop_0010
  3716                                  .L_tc_recycle_frame_done_0010:
  3717 0000189D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3718 0000189E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3719 000018A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3720 000018A5 C9                      	leave
  3721 000018A6 C21800                  	ret AND_KILL_FRAME(1)
  3722                                  .L_lambda_simple_end_0010:	; new closure is in rax
  3723 000018A9 48890425[5C100000]      	mov qword [free_var_39], rax
  3724 000018B1 48B8-                   	mov rax, sob_void
  3724 000018B3 [0000000000000000] 
  3725                                  
  3726 000018BB 4889C7                  	mov rdi, rax
  3727 000018BE E871690100              	call print_sexpr_if_not_void
  3728 000018C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3729 000018C8 E812670100              	call malloc
  3730 000018CD 50                      	push rax
  3731 000018CE BF00000000              	mov rdi, 8 * 0	; new rib
  3732 000018D3 E807670100              	call malloc
  3733 000018D8 50                      	push rax
  3734 000018D9 BF08000000              	mov rdi, 8 * 1	; extended env
  3735 000018DE E8FC660100              	call malloc
  3736 000018E3 488B7D10                	mov rdi, ENV
  3737 000018E7 BE00000000              	mov rsi, 0
  3738 000018EC BA01000000              	mov rdx, 1
  3739                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  3740 000018F1 4883FE00                	cmp rsi, 0
  3741 000018F5 7410                    	je .L_lambda_simple_env_end_0011
  3742 000018F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3743 000018FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3744 000018FF 48FFC6                  	inc rsi
  3745 00001902 48FFC2                  	inc rdx
  3746 00001905 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  3747                                  .L_lambda_simple_env_end_0011:
  3748 00001907 5B                      	pop rbx
  3749 00001908 BE00000000              	mov rsi, 0
  3750                                  .L_lambda_simple_params_loop_0011:	; copy params
  3751 0000190D 4883FE00                	cmp rsi, 0
  3752 00001911 740E                    	je .L_lambda_simple_params_end_0011
  3753 00001913 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3754 00001918 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3755 0000191C 48FFC6                  	inc rsi
  3756 0000191F EBEC                    	jmp .L_lambda_simple_params_loop_0011
  3757                                  .L_lambda_simple_params_end_0011:
  3758 00001921 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3759 00001924 4889C3                  	mov rbx, rax
  3760 00001927 58                      	pop rax
  3761 00001928 C60004                  	mov byte [rax], T_closure
  3762 0000192B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3763 0000192F 48C74009[3C190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  3764 00001937 E9AA000000              	jmp .L_lambda_simple_end_0011
  3765                                  .L_lambda_simple_code_0011:	; lambda-simple body
  3766 0000193C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3767 00001942 740B                    	je .L_lambda_simple_arity_check_ok_0011
  3768 00001944 FF742410                	push qword [rsp + 8 * 2]
  3769 00001948 6A01                    	push 1
  3770 0000194A E949660100              	jmp L_error_incorrect_arity_simple
  3771                                  .L_lambda_simple_arity_check_ok_0011:
  3772 0000194F C8000000                	enter 0, 0
  3773                                  	; preparing a tail-call
  3774                                  	; preparing a non-tail-call
  3775 00001953 488B4520                	mov rax, PARAM(0)	; param x
  3776 00001957 50                      	push rax
  3777 00001958 6A01                    	push 1	; arg count
  3778 0000195A 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  3779 00001962 803805                  	cmp byte [rax], T_undefined
  3780 00001965 0F8447650100            	je L_error_fvar_undefined
  3781 0000196B 803804                  	cmp byte [rax], T_closure
  3782 0000196E 0F85C2650100            	jne L_error_non_closure
  3783 00001974 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3784 00001977 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3785 0000197A 50                      	push rax
  3786 0000197B 6A01                    	push 1	; arg count
  3787 0000197D 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3788 00001985 803805                  	cmp byte [rax], T_undefined
  3789 00001988 0F8424650100            	je L_error_fvar_undefined
  3790 0000198E 803804                  	cmp byte [rax], T_closure
  3791 00001991 0F859F650100            	jne L_error_non_closure
  3792 00001997 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3793 0000199A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3794 0000199D FF7500                  	push qword[rbp]
  3795 000019A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3796 000019A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3797 000019A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3798 000019AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3799 000019AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3800 000019B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3801 000019B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3802 000019BA 4983C103                	add r9, 3 	 ;for getting to the params
  3803 000019BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3804 000019C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3805                                  .L_tc_recycle_frame_loop_0011:
  3806 000019C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3807 000019C8 7410                    	je .L_tc_recycle_frame_done_0011
  3808 000019CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3809 000019CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3810 000019D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3811 000019D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3812 000019D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0011
  3813                                  .L_tc_recycle_frame_done_0011:
  3814 000019DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3815 000019DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3816 000019DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3817 000019E2 C9                      	leave
  3818 000019E3 C21800                  	ret AND_KILL_FRAME(1)
  3819                                  .L_lambda_simple_end_0011:	; new closure is in rax
  3820 000019E6 48890425[8F100000]      	mov qword [free_var_42], rax
  3821 000019EE 48B8-                   	mov rax, sob_void
  3821 000019F0 [0000000000000000] 
  3822                                  
  3823 000019F8 4889C7                  	mov rdi, rax
  3824 000019FB E834680100              	call print_sexpr_if_not_void
  3825 00001A00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3826 00001A05 E8D5650100              	call malloc
  3827 00001A0A 50                      	push rax
  3828 00001A0B BF00000000              	mov rdi, 8 * 0	; new rib
  3829 00001A10 E8CA650100              	call malloc
  3830 00001A15 50                      	push rax
  3831 00001A16 BF08000000              	mov rdi, 8 * 1	; extended env
  3832 00001A1B E8BF650100              	call malloc
  3833 00001A20 488B7D10                	mov rdi, ENV
  3834 00001A24 BE00000000              	mov rsi, 0
  3835 00001A29 BA01000000              	mov rdx, 1
  3836                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  3837 00001A2E 4883FE00                	cmp rsi, 0
  3838 00001A32 7410                    	je .L_lambda_simple_env_end_0012
  3839 00001A34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3840 00001A38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3841 00001A3C 48FFC6                  	inc rsi
  3842 00001A3F 48FFC2                  	inc rdx
  3843 00001A42 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  3844                                  .L_lambda_simple_env_end_0012:
  3845 00001A44 5B                      	pop rbx
  3846 00001A45 BE00000000              	mov rsi, 0
  3847                                  .L_lambda_simple_params_loop_0012:	; copy params
  3848 00001A4A 4883FE00                	cmp rsi, 0
  3849 00001A4E 740E                    	je .L_lambda_simple_params_end_0012
  3850 00001A50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3851 00001A55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3852 00001A59 48FFC6                  	inc rsi
  3853 00001A5C EBEC                    	jmp .L_lambda_simple_params_loop_0012
  3854                                  .L_lambda_simple_params_end_0012:
  3855 00001A5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3856 00001A61 4889C3                  	mov rbx, rax
  3857 00001A64 58                      	pop rax
  3858 00001A65 C60004                  	mov byte [rax], T_closure
  3859 00001A68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3860 00001A6C 48C74009[791A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  3861 00001A74 E9AA000000              	jmp .L_lambda_simple_end_0012
  3862                                  .L_lambda_simple_code_0012:	; lambda-simple body
  3863 00001A79 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3864 00001A7F 740B                    	je .L_lambda_simple_arity_check_ok_0012
  3865 00001A81 FF742410                	push qword [rsp + 8 * 2]
  3866 00001A85 6A01                    	push 1
  3867 00001A87 E90C650100              	jmp L_error_incorrect_arity_simple
  3868                                  .L_lambda_simple_arity_check_ok_0012:
  3869 00001A8C C8000000                	enter 0, 0
  3870                                  	; preparing a tail-call
  3871                                  	; preparing a non-tail-call
  3872 00001A90 488B4520                	mov rax, PARAM(0)	; param x
  3873 00001A94 50                      	push rax
  3874 00001A95 6A01                    	push 1	; arg count
  3875 00001A97 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3876 00001A9F 803805                  	cmp byte [rax], T_undefined
  3877 00001AA2 0F840A640100            	je L_error_fvar_undefined
  3878 00001AA8 803804                  	cmp byte [rax], T_closure
  3879 00001AAB 0F8585640100            	jne L_error_non_closure
  3880 00001AB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3881 00001AB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3882 00001AB7 50                      	push rax
  3883 00001AB8 6A01                    	push 1	; arg count
  3884 00001ABA 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3885 00001AC2 803805                  	cmp byte [rax], T_undefined
  3886 00001AC5 0F84E7630100            	je L_error_fvar_undefined
  3887 00001ACB 803804                  	cmp byte [rax], T_closure
  3888 00001ACE 0F8562640100            	jne L_error_non_closure
  3889 00001AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3890 00001AD7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3891 00001ADA FF7500                  	push qword[rbp]
  3892 00001ADD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3893 00001AE0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3894 00001AE4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3895 00001AE8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3896 00001AEC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3897 00001AEF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3898 00001AF2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3899 00001AF7 4983C103                	add r9, 3 	 ;for getting to the params
  3900 00001AFB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3901 00001AFF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3902                                  .L_tc_recycle_frame_loop_0012:
  3903 00001B02 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3904 00001B05 7410                    	je .L_tc_recycle_frame_done_0012
  3905 00001B07 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3906 00001B0A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3907 00001B0D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3908 00001B11 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3909 00001B15 EBEB                    	jmp .L_tc_recycle_frame_loop_0012
  3910                                  .L_tc_recycle_frame_done_0012:
  3911 00001B17 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3912 00001B18 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3913 00001B1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3914 00001B1F C9                      	leave
  3915 00001B20 C21800                  	ret AND_KILL_FRAME(1)
  3916                                  .L_lambda_simple_end_0012:	; new closure is in rax
  3917 00001B23 48890425[A0100000]      	mov qword [free_var_43], rax
  3918 00001B2B 48B8-                   	mov rax, sob_void
  3918 00001B2D [0000000000000000] 
  3919                                  
  3920 00001B35 4889C7                  	mov rdi, rax
  3921 00001B38 E8F7660100              	call print_sexpr_if_not_void
  3922 00001B3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3923 00001B42 E898640100              	call malloc
  3924 00001B47 50                      	push rax
  3925 00001B48 BF00000000              	mov rdi, 8 * 0	; new rib
  3926 00001B4D E88D640100              	call malloc
  3927 00001B52 50                      	push rax
  3928 00001B53 BF08000000              	mov rdi, 8 * 1	; extended env
  3929 00001B58 E882640100              	call malloc
  3930 00001B5D 488B7D10                	mov rdi, ENV
  3931 00001B61 BE00000000              	mov rsi, 0
  3932 00001B66 BA01000000              	mov rdx, 1
  3933                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  3934 00001B6B 4883FE00                	cmp rsi, 0
  3935 00001B6F 7410                    	je .L_lambda_simple_env_end_0013
  3936 00001B71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3937 00001B75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3938 00001B79 48FFC6                  	inc rsi
  3939 00001B7C 48FFC2                  	inc rdx
  3940 00001B7F EBEA                    	jmp .L_lambda_simple_env_loop_0013
  3941                                  .L_lambda_simple_env_end_0013:
  3942 00001B81 5B                      	pop rbx
  3943 00001B82 BE00000000              	mov rsi, 0
  3944                                  .L_lambda_simple_params_loop_0013:	; copy params
  3945 00001B87 4883FE00                	cmp rsi, 0
  3946 00001B8B 740E                    	je .L_lambda_simple_params_end_0013
  3947 00001B8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3948 00001B92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3949 00001B96 48FFC6                  	inc rsi
  3950 00001B99 EBEC                    	jmp .L_lambda_simple_params_loop_0013
  3951                                  .L_lambda_simple_params_end_0013:
  3952 00001B9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3953 00001B9E 4889C3                  	mov rbx, rax
  3954 00001BA1 58                      	pop rax
  3955 00001BA2 C60004                  	mov byte [rax], T_closure
  3956 00001BA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3957 00001BA9 48C74009[B61B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  3958 00001BB1 E9AA000000              	jmp .L_lambda_simple_end_0013
  3959                                  .L_lambda_simple_code_0013:	; lambda-simple body
  3960 00001BB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3961 00001BBC 740B                    	je .L_lambda_simple_arity_check_ok_0013
  3962 00001BBE FF742410                	push qword [rsp + 8 * 2]
  3963 00001BC2 6A01                    	push 1
  3964 00001BC4 E9CF630100              	jmp L_error_incorrect_arity_simple
  3965                                  .L_lambda_simple_arity_check_ok_0013:
  3966 00001BC9 C8000000                	enter 0, 0
  3967                                  	; preparing a tail-call
  3968                                  	; preparing a non-tail-call
  3969 00001BCD 488B4520                	mov rax, PARAM(0)	; param x
  3970 00001BD1 50                      	push rax
  3971 00001BD2 6A01                    	push 1	; arg count
  3972 00001BD4 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  3973 00001BDC 803805                  	cmp byte [rax], T_undefined
  3974 00001BDF 0F84CD620100            	je L_error_fvar_undefined
  3975 00001BE5 803804                  	cmp byte [rax], T_closure
  3976 00001BE8 0F8548630100            	jne L_error_non_closure
  3977 00001BEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3978 00001BF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3979 00001BF4 50                      	push rax
  3980 00001BF5 6A01                    	push 1	; arg count
  3981 00001BF7 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  3982 00001BFF 803805                  	cmp byte [rax], T_undefined
  3983 00001C02 0F84AA620100            	je L_error_fvar_undefined
  3984 00001C08 803804                  	cmp byte [rax], T_closure
  3985 00001C0B 0F8525630100            	jne L_error_non_closure
  3986 00001C11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3987 00001C14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3988 00001C17 FF7500                  	push qword[rbp]
  3989 00001C1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3990 00001C1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3991 00001C21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3992 00001C25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3993 00001C29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3994 00001C2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3995 00001C2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3996 00001C34 4983C103                	add r9, 3 	 ;for getting to the params
  3997 00001C38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3998 00001C3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3999                                  .L_tc_recycle_frame_loop_0013:
  4000 00001C3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4001 00001C42 7410                    	je .L_tc_recycle_frame_done_0013
  4002 00001C44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4003 00001C47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4004 00001C4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4005 00001C4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4006 00001C52 EBEB                    	jmp .L_tc_recycle_frame_loop_0013
  4007                                  .L_tc_recycle_frame_done_0013:
  4008 00001C54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4009 00001C55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4010 00001C59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4011 00001C5C C9                      	leave
  4012 00001C5D C21800                  	ret AND_KILL_FRAME(1)
  4013                                  .L_lambda_simple_end_0013:	; new closure is in rax
  4014 00001C60 48890425[C2100000]      	mov qword [free_var_45], rax
  4015 00001C68 48B8-                   	mov rax, sob_void
  4015 00001C6A [0000000000000000] 
  4016                                  
  4017 00001C72 4889C7                  	mov rdi, rax
  4018 00001C75 E8BA650100              	call print_sexpr_if_not_void
  4019 00001C7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4020 00001C7F E85B630100              	call malloc
  4021 00001C84 50                      	push rax
  4022 00001C85 BF00000000              	mov rdi, 8 * 0	; new rib
  4023 00001C8A E850630100              	call malloc
  4024 00001C8F 50                      	push rax
  4025 00001C90 BF08000000              	mov rdi, 8 * 1	; extended env
  4026 00001C95 E845630100              	call malloc
  4027 00001C9A 488B7D10                	mov rdi, ENV
  4028 00001C9E BE00000000              	mov rsi, 0
  4029 00001CA3 BA01000000              	mov rdx, 1
  4030                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  4031 00001CA8 4883FE00                	cmp rsi, 0
  4032 00001CAC 7410                    	je .L_lambda_simple_env_end_0014
  4033 00001CAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4034 00001CB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4035 00001CB6 48FFC6                  	inc rsi
  4036 00001CB9 48FFC2                  	inc rdx
  4037 00001CBC EBEA                    	jmp .L_lambda_simple_env_loop_0014
  4038                                  .L_lambda_simple_env_end_0014:
  4039 00001CBE 5B                      	pop rbx
  4040 00001CBF BE00000000              	mov rsi, 0
  4041                                  .L_lambda_simple_params_loop_0014:	; copy params
  4042 00001CC4 4883FE00                	cmp rsi, 0
  4043 00001CC8 740E                    	je .L_lambda_simple_params_end_0014
  4044 00001CCA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4045 00001CCF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4046 00001CD3 48FFC6                  	inc rsi
  4047 00001CD6 EBEC                    	jmp .L_lambda_simple_params_loop_0014
  4048                                  .L_lambda_simple_params_end_0014:
  4049 00001CD8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4050 00001CDB 4889C3                  	mov rbx, rax
  4051 00001CDE 58                      	pop rax
  4052 00001CDF C60004                  	mov byte [rax], T_closure
  4053 00001CE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4054 00001CE6 48C74009[F31C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  4055 00001CEE E9AA000000              	jmp .L_lambda_simple_end_0014
  4056                                  .L_lambda_simple_code_0014:	; lambda-simple body
  4057 00001CF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4058 00001CF9 740B                    	je .L_lambda_simple_arity_check_ok_0014
  4059 00001CFB FF742410                	push qword [rsp + 8 * 2]
  4060 00001CFF 6A01                    	push 1
  4061 00001D01 E992620100              	jmp L_error_incorrect_arity_simple
  4062                                  .L_lambda_simple_arity_check_ok_0014:
  4063 00001D06 C8000000                	enter 0, 0
  4064                                  	; preparing a tail-call
  4065                                  	; preparing a non-tail-call
  4066 00001D0A 488B4520                	mov rax, PARAM(0)	; param x
  4067 00001D0E 50                      	push rax
  4068 00001D0F 6A01                    	push 1	; arg count
  4069 00001D11 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4070 00001D19 803805                  	cmp byte [rax], T_undefined
  4071 00001D1C 0F8490610100            	je L_error_fvar_undefined
  4072 00001D22 803804                  	cmp byte [rax], T_closure
  4073 00001D25 0F850B620100            	jne L_error_non_closure
  4074 00001D2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4075 00001D2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4076 00001D31 50                      	push rax
  4077 00001D32 6A01                    	push 1	; arg count
  4078 00001D34 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  4079 00001D3C 803805                  	cmp byte [rax], T_undefined
  4080 00001D3F 0F846D610100            	je L_error_fvar_undefined
  4081 00001D45 803804                  	cmp byte [rax], T_closure
  4082 00001D48 0F85E8610100            	jne L_error_non_closure
  4083 00001D4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4084 00001D51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4085 00001D54 FF7500                  	push qword[rbp]
  4086 00001D57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4087 00001D5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4088 00001D5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4089 00001D62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4090 00001D66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4091 00001D69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4092 00001D6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4093 00001D71 4983C103                	add r9, 3 	 ;for getting to the params
  4094 00001D75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4095 00001D79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4096                                  .L_tc_recycle_frame_loop_0014:
  4097 00001D7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4098 00001D7F 7410                    	je .L_tc_recycle_frame_done_0014
  4099 00001D81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4100 00001D84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4101 00001D87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4102 00001D8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4103 00001D8F EBEB                    	jmp .L_tc_recycle_frame_loop_0014
  4104                                  .L_tc_recycle_frame_done_0014:
  4105 00001D91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4106 00001D92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4107 00001D96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4108 00001D99 C9                      	leave
  4109 00001D9A C21800                  	ret AND_KILL_FRAME(1)
  4110                                  .L_lambda_simple_end_0014:	; new closure is in rax
  4111 00001D9D 48890425[D3100000]      	mov qword [free_var_46], rax
  4112 00001DA5 48B8-                   	mov rax, sob_void
  4112 00001DA7 [0000000000000000] 
  4113                                  
  4114 00001DAF 4889C7                  	mov rdi, rax
  4115 00001DB2 E87D640100              	call print_sexpr_if_not_void
  4116 00001DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4117 00001DBC E81E620100              	call malloc
  4118 00001DC1 50                      	push rax
  4119 00001DC2 BF00000000              	mov rdi, 8 * 0	; new rib
  4120 00001DC7 E813620100              	call malloc
  4121 00001DCC 50                      	push rax
  4122 00001DCD BF08000000              	mov rdi, 8 * 1	; extended env
  4123 00001DD2 E808620100              	call malloc
  4124 00001DD7 488B7D10                	mov rdi, ENV
  4125 00001DDB BE00000000              	mov rsi, 0
  4126 00001DE0 BA01000000              	mov rdx, 1
  4127                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  4128 00001DE5 4883FE00                	cmp rsi, 0
  4129 00001DE9 7410                    	je .L_lambda_simple_env_end_0015
  4130 00001DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4131 00001DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4132 00001DF3 48FFC6                  	inc rsi
  4133 00001DF6 48FFC2                  	inc rdx
  4134 00001DF9 EBEA                    	jmp .L_lambda_simple_env_loop_0015
  4135                                  .L_lambda_simple_env_end_0015:
  4136 00001DFB 5B                      	pop rbx
  4137 00001DFC BE00000000              	mov rsi, 0
  4138                                  .L_lambda_simple_params_loop_0015:	; copy params
  4139 00001E01 4883FE00                	cmp rsi, 0
  4140 00001E05 740E                    	je .L_lambda_simple_params_end_0015
  4141 00001E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4142 00001E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4143 00001E10 48FFC6                  	inc rsi
  4144 00001E13 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  4145                                  .L_lambda_simple_params_end_0015:
  4146 00001E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4147 00001E18 4889C3                  	mov rbx, rax
  4148 00001E1B 58                      	pop rax
  4149 00001E1C C60004                  	mov byte [rax], T_closure
  4150 00001E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4151 00001E23 48C74009[301E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  4152 00001E2B E9AA000000              	jmp .L_lambda_simple_end_0015
  4153                                  .L_lambda_simple_code_0015:	; lambda-simple body
  4154 00001E30 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4155 00001E36 740B                    	je .L_lambda_simple_arity_check_ok_0015
  4156 00001E38 FF742410                	push qword [rsp + 8 * 2]
  4157 00001E3C 6A01                    	push 1
  4158 00001E3E E955610100              	jmp L_error_incorrect_arity_simple
  4159                                  .L_lambda_simple_arity_check_ok_0015:
  4160 00001E43 C8000000                	enter 0, 0
  4161                                  	; preparing a tail-call
  4162                                  	; preparing a non-tail-call
  4163 00001E47 488B4520                	mov rax, PARAM(0)	; param x
  4164 00001E4B 50                      	push rax
  4165 00001E4C 6A01                    	push 1	; arg count
  4166 00001E4E 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  4167 00001E56 803805                  	cmp byte [rax], T_undefined
  4168 00001E59 0F8453600100            	je L_error_fvar_undefined
  4169 00001E5F 803804                  	cmp byte [rax], T_closure
  4170 00001E62 0F85CE600100            	jne L_error_non_closure
  4171 00001E68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4172 00001E6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4173 00001E6E 50                      	push rax
  4174 00001E6F 6A01                    	push 1	; arg count
  4175 00001E71 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4176 00001E79 803805                  	cmp byte [rax], T_undefined
  4177 00001E7C 0F8430600100            	je L_error_fvar_undefined
  4178 00001E82 803804                  	cmp byte [rax], T_closure
  4179 00001E85 0F85AB600100            	jne L_error_non_closure
  4180 00001E8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4181 00001E8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4182 00001E91 FF7500                  	push qword[rbp]
  4183 00001E94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4184 00001E97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4185 00001E9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4186 00001E9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4187 00001EA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4188 00001EA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4189 00001EA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4190 00001EAE 4983C103                	add r9, 3 	 ;for getting to the params
  4191 00001EB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4192 00001EB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4193                                  .L_tc_recycle_frame_loop_0015:
  4194 00001EB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4195 00001EBC 7410                    	je .L_tc_recycle_frame_done_0015
  4196 00001EBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4197 00001EC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4198 00001EC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4199 00001EC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4200 00001ECC EBEB                    	jmp .L_tc_recycle_frame_loop_0015
  4201                                  .L_tc_recycle_frame_done_0015:
  4202 00001ECE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4203 00001ECF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4204 00001ED3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4205 00001ED6 C9                      	leave
  4206 00001ED7 C21800                  	ret AND_KILL_FRAME(1)
  4207                                  .L_lambda_simple_end_0015:	; new closure is in rax
  4208 00001EDA 48890425[17110000]      	mov qword [free_var_50], rax
  4209 00001EE2 48B8-                   	mov rax, sob_void
  4209 00001EE4 [0000000000000000] 
  4210                                  
  4211 00001EEC 4889C7                  	mov rdi, rax
  4212 00001EEF E840630100              	call print_sexpr_if_not_void
  4213 00001EF4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4214 00001EF9 E8E1600100              	call malloc
  4215 00001EFE 50                      	push rax
  4216 00001EFF BF00000000              	mov rdi, 8 * 0	; new rib
  4217 00001F04 E8D6600100              	call malloc
  4218 00001F09 50                      	push rax
  4219 00001F0A BF08000000              	mov rdi, 8 * 1	; extended env
  4220 00001F0F E8CB600100              	call malloc
  4221 00001F14 488B7D10                	mov rdi, ENV
  4222 00001F18 BE00000000              	mov rsi, 0
  4223 00001F1D BA01000000              	mov rdx, 1
  4224                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  4225 00001F22 4883FE00                	cmp rsi, 0
  4226 00001F26 7410                    	je .L_lambda_simple_env_end_0016
  4227 00001F28 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4228 00001F2C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4229 00001F30 48FFC6                  	inc rsi
  4230 00001F33 48FFC2                  	inc rdx
  4231 00001F36 EBEA                    	jmp .L_lambda_simple_env_loop_0016
  4232                                  .L_lambda_simple_env_end_0016:
  4233 00001F38 5B                      	pop rbx
  4234 00001F39 BE00000000              	mov rsi, 0
  4235                                  .L_lambda_simple_params_loop_0016:	; copy params
  4236 00001F3E 4883FE00                	cmp rsi, 0
  4237 00001F42 740E                    	je .L_lambda_simple_params_end_0016
  4238 00001F44 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4239 00001F49 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4240 00001F4D 48FFC6                  	inc rsi
  4241 00001F50 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  4242                                  .L_lambda_simple_params_end_0016:
  4243 00001F52 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4244 00001F55 4889C3                  	mov rbx, rax
  4245 00001F58 58                      	pop rax
  4246 00001F59 C60004                  	mov byte [rax], T_closure
  4247 00001F5C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4248 00001F60 48C74009[6D1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  4249 00001F68 E9AA000000              	jmp .L_lambda_simple_end_0016
  4250                                  .L_lambda_simple_code_0016:	; lambda-simple body
  4251 00001F6D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4252 00001F73 740B                    	je .L_lambda_simple_arity_check_ok_0016
  4253 00001F75 FF742410                	push qword [rsp + 8 * 2]
  4254 00001F79 6A01                    	push 1
  4255 00001F7B E918600100              	jmp L_error_incorrect_arity_simple
  4256                                  .L_lambda_simple_arity_check_ok_0016:
  4257 00001F80 C8000000                	enter 0, 0
  4258                                  	; preparing a tail-call
  4259                                  	; preparing a non-tail-call
  4260 00001F84 488B4520                	mov rax, PARAM(0)	; param x
  4261 00001F88 50                      	push rax
  4262 00001F89 6A01                    	push 1	; arg count
  4263 00001F8B 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  4264 00001F93 803805                  	cmp byte [rax], T_undefined
  4265 00001F96 0F84165F0100            	je L_error_fvar_undefined
  4266 00001F9C 803804                  	cmp byte [rax], T_closure
  4267 00001F9F 0F85915F0100            	jne L_error_non_closure
  4268 00001FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4269 00001FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4270 00001FAB 50                      	push rax
  4271 00001FAC 6A01                    	push 1	; arg count
  4272 00001FAE 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4273 00001FB6 803805                  	cmp byte [rax], T_undefined
  4274 00001FB9 0F84F35E0100            	je L_error_fvar_undefined
  4275 00001FBF 803804                  	cmp byte [rax], T_closure
  4276 00001FC2 0F856E5F0100            	jne L_error_non_closure
  4277 00001FC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4278 00001FCB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4279 00001FCE FF7500                  	push qword[rbp]
  4280 00001FD1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4281 00001FD4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4282 00001FD8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4283 00001FDC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4284 00001FE0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4285 00001FE3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4286 00001FE6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4287 00001FEB 4983C103                	add r9, 3 	 ;for getting to the params
  4288 00001FEF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4289 00001FF3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4290                                  .L_tc_recycle_frame_loop_0016:
  4291 00001FF6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4292 00001FF9 7410                    	je .L_tc_recycle_frame_done_0016
  4293 00001FFB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4294 00001FFE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4295 00002001 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4296 00002005 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4297 00002009 EBEB                    	jmp .L_tc_recycle_frame_loop_0016
  4298                                  .L_tc_recycle_frame_done_0016:
  4299 0000200B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4300 0000200C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4301 00002010 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4302 00002013 C9                      	leave
  4303 00002014 C21800                  	ret AND_KILL_FRAME(1)
  4304                                  .L_lambda_simple_end_0016:	; new closure is in rax
  4305 00002017 48890425[28110000]      	mov qword [free_var_51], rax
  4306 0000201F 48B8-                   	mov rax, sob_void
  4306 00002021 [0000000000000000] 
  4307                                  
  4308 00002029 4889C7                  	mov rdi, rax
  4309 0000202C E803620100              	call print_sexpr_if_not_void
  4310 00002031 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4311 00002036 E8A45F0100              	call malloc
  4312 0000203B 50                      	push rax
  4313 0000203C BF00000000              	mov rdi, 8 * 0	; new rib
  4314 00002041 E8995F0100              	call malloc
  4315 00002046 50                      	push rax
  4316 00002047 BF08000000              	mov rdi, 8 * 1	; extended env
  4317 0000204C E88E5F0100              	call malloc
  4318 00002051 488B7D10                	mov rdi, ENV
  4319 00002055 BE00000000              	mov rsi, 0
  4320 0000205A BA01000000              	mov rdx, 1
  4321                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  4322 0000205F 4883FE00                	cmp rsi, 0
  4323 00002063 7410                    	je .L_lambda_simple_env_end_0017
  4324 00002065 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4325 00002069 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4326 0000206D 48FFC6                  	inc rsi
  4327 00002070 48FFC2                  	inc rdx
  4328 00002073 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  4329                                  .L_lambda_simple_env_end_0017:
  4330 00002075 5B                      	pop rbx
  4331 00002076 BE00000000              	mov rsi, 0
  4332                                  .L_lambda_simple_params_loop_0017:	; copy params
  4333 0000207B 4883FE00                	cmp rsi, 0
  4334 0000207F 740E                    	je .L_lambda_simple_params_end_0017
  4335 00002081 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4336 00002086 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4337 0000208A 48FFC6                  	inc rsi
  4338 0000208D EBEC                    	jmp .L_lambda_simple_params_loop_0017
  4339                                  .L_lambda_simple_params_end_0017:
  4340 0000208F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4341 00002092 4889C3                  	mov rbx, rax
  4342 00002095 58                      	pop rax
  4343 00002096 C60004                  	mov byte [rax], T_closure
  4344 00002099 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4345 0000209D 48C74009[AA200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  4346 000020A5 E9AA000000              	jmp .L_lambda_simple_end_0017
  4347                                  .L_lambda_simple_code_0017:	; lambda-simple body
  4348 000020AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4349 000020B0 740B                    	je .L_lambda_simple_arity_check_ok_0017
  4350 000020B2 FF742410                	push qword [rsp + 8 * 2]
  4351 000020B6 6A01                    	push 1
  4352 000020B8 E9DB5E0100              	jmp L_error_incorrect_arity_simple
  4353                                  .L_lambda_simple_arity_check_ok_0017:
  4354 000020BD C8000000                	enter 0, 0
  4355                                  	; preparing a tail-call
  4356                                  	; preparing a non-tail-call
  4357 000020C1 488B4520                	mov rax, PARAM(0)	; param x
  4358 000020C5 50                      	push rax
  4359 000020C6 6A01                    	push 1	; arg count
  4360 000020C8 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4361 000020D0 803805                  	cmp byte [rax], T_undefined
  4362 000020D3 0F84D95D0100            	je L_error_fvar_undefined
  4363 000020D9 803804                  	cmp byte [rax], T_closure
  4364 000020DC 0F85545E0100            	jne L_error_non_closure
  4365 000020E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4366 000020E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4367 000020E8 50                      	push rax
  4368 000020E9 6A01                    	push 1	; arg count
  4369 000020EB 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4370 000020F3 803805                  	cmp byte [rax], T_undefined
  4371 000020F6 0F84B65D0100            	je L_error_fvar_undefined
  4372 000020FC 803804                  	cmp byte [rax], T_closure
  4373 000020FF 0F85315E0100            	jne L_error_non_closure
  4374 00002105 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4375 00002108 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4376 0000210B FF7500                  	push qword[rbp]
  4377 0000210E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4378 00002111 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4379 00002115 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4380 00002119 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4381 0000211D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4382 00002120 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4383 00002123 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4384 00002128 4983C103                	add r9, 3 	 ;for getting to the params
  4385 0000212C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4386 00002130 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4387                                  .L_tc_recycle_frame_loop_0017:
  4388 00002133 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4389 00002136 7410                    	je .L_tc_recycle_frame_done_0017
  4390 00002138 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4391 0000213B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4392 0000213E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4393 00002142 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4394 00002146 EBEB                    	jmp .L_tc_recycle_frame_loop_0017
  4395                                  .L_tc_recycle_frame_done_0017:
  4396 00002148 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4397 00002149 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4398 0000214D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4399 00002150 C9                      	leave
  4400 00002151 C21800                  	ret AND_KILL_FRAME(1)
  4401                                  .L_lambda_simple_end_0017:	; new closure is in rax
  4402 00002154 48890425[4A110000]      	mov qword [free_var_53], rax
  4403 0000215C 48B8-                   	mov rax, sob_void
  4403 0000215E [0000000000000000] 
  4404                                  
  4405 00002166 4889C7                  	mov rdi, rax
  4406 00002169 E8C6600100              	call print_sexpr_if_not_void
  4407 0000216E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4408 00002173 E8675E0100              	call malloc
  4409 00002178 50                      	push rax
  4410 00002179 BF00000000              	mov rdi, 8 * 0	; new rib
  4411 0000217E E85C5E0100              	call malloc
  4412 00002183 50                      	push rax
  4413 00002184 BF08000000              	mov rdi, 8 * 1	; extended env
  4414 00002189 E8515E0100              	call malloc
  4415 0000218E 488B7D10                	mov rdi, ENV
  4416 00002192 BE00000000              	mov rsi, 0
  4417 00002197 BA01000000              	mov rdx, 1
  4418                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  4419 0000219C 4883FE00                	cmp rsi, 0
  4420 000021A0 7410                    	je .L_lambda_simple_env_end_0018
  4421 000021A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4422 000021A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4423 000021AA 48FFC6                  	inc rsi
  4424 000021AD 48FFC2                  	inc rdx
  4425 000021B0 EBEA                    	jmp .L_lambda_simple_env_loop_0018
  4426                                  .L_lambda_simple_env_end_0018:
  4427 000021B2 5B                      	pop rbx
  4428 000021B3 BE00000000              	mov rsi, 0
  4429                                  .L_lambda_simple_params_loop_0018:	; copy params
  4430 000021B8 4883FE00                	cmp rsi, 0
  4431 000021BC 740E                    	je .L_lambda_simple_params_end_0018
  4432 000021BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4433 000021C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4434 000021C7 48FFC6                  	inc rsi
  4435 000021CA EBEC                    	jmp .L_lambda_simple_params_loop_0018
  4436                                  .L_lambda_simple_params_end_0018:
  4437 000021CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4438 000021CF 4889C3                  	mov rbx, rax
  4439 000021D2 58                      	pop rax
  4440 000021D3 C60004                  	mov byte [rax], T_closure
  4441 000021D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4442 000021DA 48C74009[E7210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  4443 000021E2 E9AA000000              	jmp .L_lambda_simple_end_0018
  4444                                  .L_lambda_simple_code_0018:	; lambda-simple body
  4445 000021E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4446 000021ED 740B                    	je .L_lambda_simple_arity_check_ok_0018
  4447 000021EF FF742410                	push qword [rsp + 8 * 2]
  4448 000021F3 6A01                    	push 1
  4449 000021F5 E99E5D0100              	jmp L_error_incorrect_arity_simple
  4450                                  .L_lambda_simple_arity_check_ok_0018:
  4451 000021FA C8000000                	enter 0, 0
  4452                                  	; preparing a tail-call
  4453                                  	; preparing a non-tail-call
  4454 000021FE 488B4520                	mov rax, PARAM(0)	; param x
  4455 00002202 50                      	push rax
  4456 00002203 6A01                    	push 1	; arg count
  4457 00002205 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4458 0000220D 803805                  	cmp byte [rax], T_undefined
  4459 00002210 0F849C5C0100            	je L_error_fvar_undefined
  4460 00002216 803804                  	cmp byte [rax], T_closure
  4461 00002219 0F85175D0100            	jne L_error_non_closure
  4462 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4463 00002222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4464 00002225 50                      	push rax
  4465 00002226 6A01                    	push 1	; arg count
  4466 00002228 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4467 00002230 803805                  	cmp byte [rax], T_undefined
  4468 00002233 0F84795C0100            	je L_error_fvar_undefined
  4469 00002239 803804                  	cmp byte [rax], T_closure
  4470 0000223C 0F85F45C0100            	jne L_error_non_closure
  4471 00002242 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4472 00002245 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4473 00002248 FF7500                  	push qword[rbp]
  4474 0000224B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4475 0000224E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4476 00002252 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4477 00002256 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4478 0000225A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4479 0000225D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4480 00002260 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4481 00002265 4983C103                	add r9, 3 	 ;for getting to the params
  4482 00002269 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4483 0000226D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4484                                  .L_tc_recycle_frame_loop_0018:
  4485 00002270 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4486 00002273 7410                    	je .L_tc_recycle_frame_done_0018
  4487 00002275 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4488 00002278 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4489 0000227B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4490 0000227F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4491 00002283 EBEB                    	jmp .L_tc_recycle_frame_loop_0018
  4492                                  .L_tc_recycle_frame_done_0018:
  4493 00002285 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4494 00002286 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4495 0000228A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4496 0000228D C9                      	leave
  4497 0000228E C21800                  	ret AND_KILL_FRAME(1)
  4498                                  .L_lambda_simple_end_0018:	; new closure is in rax
  4499 00002291 48890425[5B110000]      	mov qword [free_var_54], rax
  4500 00002299 48B8-                   	mov rax, sob_void
  4500 0000229B [0000000000000000] 
  4501                                  
  4502 000022A3 4889C7                  	mov rdi, rax
  4503 000022A6 E8895F0100              	call print_sexpr_if_not_void
  4504 000022AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4505 000022B0 E82A5D0100              	call malloc
  4506 000022B5 50                      	push rax
  4507 000022B6 BF00000000              	mov rdi, 8 * 0	; new rib
  4508 000022BB E81F5D0100              	call malloc
  4509 000022C0 50                      	push rax
  4510 000022C1 BF08000000              	mov rdi, 8 * 1	; extended env
  4511 000022C6 E8145D0100              	call malloc
  4512 000022CB 488B7D10                	mov rdi, ENV
  4513 000022CF BE00000000              	mov rsi, 0
  4514 000022D4 BA01000000              	mov rdx, 1
  4515                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  4516 000022D9 4883FE00                	cmp rsi, 0
  4517 000022DD 7410                    	je .L_lambda_simple_env_end_0019
  4518 000022DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4519 000022E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4520 000022E7 48FFC6                  	inc rsi
  4521 000022EA 48FFC2                  	inc rdx
  4522 000022ED EBEA                    	jmp .L_lambda_simple_env_loop_0019
  4523                                  .L_lambda_simple_env_end_0019:
  4524 000022EF 5B                      	pop rbx
  4525 000022F0 BE00000000              	mov rsi, 0
  4526                                  .L_lambda_simple_params_loop_0019:	; copy params
  4527 000022F5 4883FE00                	cmp rsi, 0
  4528 000022F9 740E                    	je .L_lambda_simple_params_end_0019
  4529 000022FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4530 00002300 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4531 00002304 48FFC6                  	inc rsi
  4532 00002307 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  4533                                  .L_lambda_simple_params_end_0019:
  4534 00002309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4535 0000230C 4889C3                  	mov rbx, rax
  4536 0000230F 58                      	pop rax
  4537 00002310 C60004                  	mov byte [rax], T_closure
  4538 00002313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4539 00002317 48C74009[24230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  4540 0000231F E9AA000000              	jmp .L_lambda_simple_end_0019
  4541                                  .L_lambda_simple_code_0019:	; lambda-simple body
  4542 00002324 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4543 0000232A 740B                    	je .L_lambda_simple_arity_check_ok_0019
  4544 0000232C FF742410                	push qword [rsp + 8 * 2]
  4545 00002330 6A01                    	push 1
  4546 00002332 E9615C0100              	jmp L_error_incorrect_arity_simple
  4547                                  .L_lambda_simple_arity_check_ok_0019:
  4548 00002337 C8000000                	enter 0, 0
  4549                                  	; preparing a tail-call
  4550                                  	; preparing a non-tail-call
  4551 0000233B 488B4520                	mov rax, PARAM(0)	; param x
  4552 0000233F 50                      	push rax
  4553 00002340 6A01                    	push 1	; arg count
  4554 00002342 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
  4555 0000234A 803805                  	cmp byte [rax], T_undefined
  4556 0000234D 0F845F5B0100            	je L_error_fvar_undefined
  4557 00002353 803804                  	cmp byte [rax], T_closure
  4558 00002356 0F85DA5B0100            	jne L_error_non_closure
  4559 0000235C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4560 0000235F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4561 00002362 50                      	push rax
  4562 00002363 6A01                    	push 1	; arg count
  4563 00002365 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4564 0000236D 803805                  	cmp byte [rax], T_undefined
  4565 00002370 0F843C5B0100            	je L_error_fvar_undefined
  4566 00002376 803804                  	cmp byte [rax], T_closure
  4567 00002379 0F85B75B0100            	jne L_error_non_closure
  4568 0000237F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4569 00002382 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4570 00002385 FF7500                  	push qword[rbp]
  4571 00002388 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4572 0000238B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4573 0000238F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4574 00002393 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4575 00002397 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4576 0000239A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4577 0000239D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4578 000023A2 4983C103                	add r9, 3 	 ;for getting to the params
  4579 000023A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4580 000023AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4581                                  .L_tc_recycle_frame_loop_0019:
  4582 000023AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4583 000023B0 7410                    	je .L_tc_recycle_frame_done_0019
  4584 000023B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4585 000023B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4586 000023B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4587 000023BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4588 000023C0 EBEB                    	jmp .L_tc_recycle_frame_loop_0019
  4589                                  .L_tc_recycle_frame_done_0019:
  4590 000023C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4591 000023C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4592 000023C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4593 000023CA C9                      	leave
  4594 000023CB C21800                  	ret AND_KILL_FRAME(1)
  4595                                  .L_lambda_simple_end_0019:	; new closure is in rax
  4596 000023CE 48890425[8E110000]      	mov qword [free_var_57], rax
  4597 000023D6 48B8-                   	mov rax, sob_void
  4597 000023D8 [0000000000000000] 
  4598                                  
  4599 000023E0 4889C7                  	mov rdi, rax
  4600 000023E3 E84C5E0100              	call print_sexpr_if_not_void
  4601 000023E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4602 000023ED E8ED5B0100              	call malloc
  4603 000023F2 50                      	push rax
  4604 000023F3 BF00000000              	mov rdi, 8 * 0	; new rib
  4605 000023F8 E8E25B0100              	call malloc
  4606 000023FD 50                      	push rax
  4607 000023FE BF08000000              	mov rdi, 8 * 1	; extended env
  4608 00002403 E8D75B0100              	call malloc
  4609 00002408 488B7D10                	mov rdi, ENV
  4610 0000240C BE00000000              	mov rsi, 0
  4611 00002411 BA01000000              	mov rdx, 1
  4612                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  4613 00002416 4883FE00                	cmp rsi, 0
  4614 0000241A 7410                    	je .L_lambda_simple_env_end_001a
  4615 0000241C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4616 00002420 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4617 00002424 48FFC6                  	inc rsi
  4618 00002427 48FFC2                  	inc rdx
  4619 0000242A EBEA                    	jmp .L_lambda_simple_env_loop_001a
  4620                                  .L_lambda_simple_env_end_001a:
  4621 0000242C 5B                      	pop rbx
  4622 0000242D BE00000000              	mov rsi, 0
  4623                                  .L_lambda_simple_params_loop_001a:	; copy params
  4624 00002432 4883FE00                	cmp rsi, 0
  4625 00002436 740E                    	je .L_lambda_simple_params_end_001a
  4626 00002438 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4627 0000243D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4628 00002441 48FFC6                  	inc rsi
  4629 00002444 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  4630                                  .L_lambda_simple_params_end_001a:
  4631 00002446 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4632 00002449 4889C3                  	mov rbx, rax
  4633 0000244C 58                      	pop rax
  4634 0000244D C60004                  	mov byte [rax], T_closure
  4635 00002450 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4636 00002454 48C74009[61240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  4637 0000245C E9AA000000              	jmp .L_lambda_simple_end_001a
  4638                                  .L_lambda_simple_code_001a:	; lambda-simple body
  4639 00002461 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4640 00002467 740B                    	je .L_lambda_simple_arity_check_ok_001a
  4641 00002469 FF742410                	push qword [rsp + 8 * 2]
  4642 0000246D 6A01                    	push 1
  4643 0000246F E9245B0100              	jmp L_error_incorrect_arity_simple
  4644                                  .L_lambda_simple_arity_check_ok_001a:
  4645 00002474 C8000000                	enter 0, 0
  4646                                  	; preparing a tail-call
  4647                                  	; preparing a non-tail-call
  4648 00002478 488B4520                	mov rax, PARAM(0)	; param x
  4649 0000247C 50                      	push rax
  4650 0000247D 6A01                    	push 1	; arg count
  4651 0000247F 488B0425[F5100000]      	mov rax, qword [free_var_48]	; free var cadr
  4652 00002487 803805                  	cmp byte [rax], T_undefined
  4653 0000248A 0F84225A0100            	je L_error_fvar_undefined
  4654 00002490 803804                  	cmp byte [rax], T_closure
  4655 00002493 0F859D5A0100            	jne L_error_non_closure
  4656 00002499 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4657 0000249C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4658 0000249F 50                      	push rax
  4659 000024A0 6A01                    	push 1	; arg count
  4660 000024A2 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4661 000024AA 803805                  	cmp byte [rax], T_undefined
  4662 000024AD 0F84FF590100            	je L_error_fvar_undefined
  4663 000024B3 803804                  	cmp byte [rax], T_closure
  4664 000024B6 0F857A5A0100            	jne L_error_non_closure
  4665 000024BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4666 000024BF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4667 000024C2 FF7500                  	push qword[rbp]
  4668 000024C5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4669 000024C8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4670 000024CC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4671 000024D0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4672 000024D4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4673 000024D7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4674 000024DA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4675 000024DF 4983C103                	add r9, 3 	 ;for getting to the params
  4676 000024E3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4677 000024E7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4678                                  .L_tc_recycle_frame_loop_001a:
  4679 000024EA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4680 000024ED 7410                    	je .L_tc_recycle_frame_done_001a
  4681 000024EF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4682 000024F2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4683 000024F5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4684 000024F9 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4685 000024FD EBEB                    	jmp .L_tc_recycle_frame_loop_001a
  4686                                  .L_tc_recycle_frame_done_001a:
  4687 000024FF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4688 00002500 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4689 00002504 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4690 00002507 C9                      	leave
  4691 00002508 C21800                  	ret AND_KILL_FRAME(1)
  4692                                  .L_lambda_simple_end_001a:	; new closure is in rax
  4693 0000250B 48890425[9F110000]      	mov qword [free_var_58], rax
  4694 00002513 48B8-                   	mov rax, sob_void
  4694 00002515 [0000000000000000] 
  4695                                  
  4696 0000251D 4889C7                  	mov rdi, rax
  4697 00002520 E80F5D0100              	call print_sexpr_if_not_void
  4698 00002525 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4699 0000252A E8B05A0100              	call malloc
  4700 0000252F 50                      	push rax
  4701 00002530 BF00000000              	mov rdi, 8 * 0	; new rib
  4702 00002535 E8A55A0100              	call malloc
  4703 0000253A 50                      	push rax
  4704 0000253B BF08000000              	mov rdi, 8 * 1	; extended env
  4705 00002540 E89A5A0100              	call malloc
  4706 00002545 488B7D10                	mov rdi, ENV
  4707 00002549 BE00000000              	mov rsi, 0
  4708 0000254E BA01000000              	mov rdx, 1
  4709                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  4710 00002553 4883FE00                	cmp rsi, 0
  4711 00002557 7410                    	je .L_lambda_simple_env_end_001b
  4712 00002559 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4713 0000255D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4714 00002561 48FFC6                  	inc rsi
  4715 00002564 48FFC2                  	inc rdx
  4716 00002567 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  4717                                  .L_lambda_simple_env_end_001b:
  4718 00002569 5B                      	pop rbx
  4719 0000256A BE00000000              	mov rsi, 0
  4720                                  .L_lambda_simple_params_loop_001b:	; copy params
  4721 0000256F 4883FE00                	cmp rsi, 0
  4722 00002573 740E                    	je .L_lambda_simple_params_end_001b
  4723 00002575 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4724 0000257A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4725 0000257E 48FFC6                  	inc rsi
  4726 00002581 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  4727                                  .L_lambda_simple_params_end_001b:
  4728 00002583 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4729 00002586 4889C3                  	mov rbx, rax
  4730 00002589 58                      	pop rax
  4731 0000258A C60004                  	mov byte [rax], T_closure
  4732 0000258D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4733 00002591 48C74009[9E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  4734 00002599 E9AA000000              	jmp .L_lambda_simple_end_001b
  4735                                  .L_lambda_simple_code_001b:	; lambda-simple body
  4736 0000259E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4737 000025A4 740B                    	je .L_lambda_simple_arity_check_ok_001b
  4738 000025A6 FF742410                	push qword [rsp + 8 * 2]
  4739 000025AA 6A01                    	push 1
  4740 000025AC E9E7590100              	jmp L_error_incorrect_arity_simple
  4741                                  .L_lambda_simple_arity_check_ok_001b:
  4742 000025B1 C8000000                	enter 0, 0
  4743                                  	; preparing a tail-call
  4744                                  	; preparing a non-tail-call
  4745 000025B5 488B4520                	mov rax, PARAM(0)	; param x
  4746 000025B9 50                      	push rax
  4747 000025BA 6A01                    	push 1	; arg count
  4748 000025BC 488B0425[7D110000]      	mov rax, qword [free_var_56]	; free var cdar
  4749 000025C4 803805                  	cmp byte [rax], T_undefined
  4750 000025C7 0F84E5580100            	je L_error_fvar_undefined
  4751 000025CD 803804                  	cmp byte [rax], T_closure
  4752 000025D0 0F8560590100            	jne L_error_non_closure
  4753 000025D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4754 000025D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4755 000025DC 50                      	push rax
  4756 000025DD 6A01                    	push 1	; arg count
  4757 000025DF 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4758 000025E7 803805                  	cmp byte [rax], T_undefined
  4759 000025EA 0F84C2580100            	je L_error_fvar_undefined
  4760 000025F0 803804                  	cmp byte [rax], T_closure
  4761 000025F3 0F853D590100            	jne L_error_non_closure
  4762 000025F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4763 000025FC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4764 000025FF FF7500                  	push qword[rbp]
  4765 00002602 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4766 00002605 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4767 00002609 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4768 0000260D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4769 00002611 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4770 00002614 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4771 00002617 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4772 0000261C 4983C103                	add r9, 3 	 ;for getting to the params
  4773 00002620 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4774 00002624 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4775                                  .L_tc_recycle_frame_loop_001b:
  4776 00002627 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4777 0000262A 7410                    	je .L_tc_recycle_frame_done_001b
  4778 0000262C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4779 0000262F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4780 00002632 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4781 00002636 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4782 0000263A EBEB                    	jmp .L_tc_recycle_frame_loop_001b
  4783                                  .L_tc_recycle_frame_done_001b:
  4784 0000263C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4785 0000263D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4786 00002641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4787 00002644 C9                      	leave
  4788 00002645 C21800                  	ret AND_KILL_FRAME(1)
  4789                                  .L_lambda_simple_end_001b:	; new closure is in rax
  4790 00002648 48890425[C1110000]      	mov qword [free_var_60], rax
  4791 00002650 48B8-                   	mov rax, sob_void
  4791 00002652 [0000000000000000] 
  4792                                  
  4793 0000265A 4889C7                  	mov rdi, rax
  4794 0000265D E8D25B0100              	call print_sexpr_if_not_void
  4795 00002662 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4796 00002667 E873590100              	call malloc
  4797 0000266C 50                      	push rax
  4798 0000266D BF00000000              	mov rdi, 8 * 0	; new rib
  4799 00002672 E868590100              	call malloc
  4800 00002677 50                      	push rax
  4801 00002678 BF08000000              	mov rdi, 8 * 1	; extended env
  4802 0000267D E85D590100              	call malloc
  4803 00002682 488B7D10                	mov rdi, ENV
  4804 00002686 BE00000000              	mov rsi, 0
  4805 0000268B BA01000000              	mov rdx, 1
  4806                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  4807 00002690 4883FE00                	cmp rsi, 0
  4808 00002694 7410                    	je .L_lambda_simple_env_end_001c
  4809 00002696 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4810 0000269A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4811 0000269E 48FFC6                  	inc rsi
  4812 000026A1 48FFC2                  	inc rdx
  4813 000026A4 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  4814                                  .L_lambda_simple_env_end_001c:
  4815 000026A6 5B                      	pop rbx
  4816 000026A7 BE00000000              	mov rsi, 0
  4817                                  .L_lambda_simple_params_loop_001c:	; copy params
  4818 000026AC 4883FE00                	cmp rsi, 0
  4819 000026B0 740E                    	je .L_lambda_simple_params_end_001c
  4820 000026B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4821 000026B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4822 000026BB 48FFC6                  	inc rsi
  4823 000026BE EBEC                    	jmp .L_lambda_simple_params_loop_001c
  4824                                  .L_lambda_simple_params_end_001c:
  4825 000026C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4826 000026C3 4889C3                  	mov rbx, rax
  4827 000026C6 58                      	pop rax
  4828 000026C7 C60004                  	mov byte [rax], T_closure
  4829 000026CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4830 000026CE 48C74009[DB260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  4831 000026D6 E9AA000000              	jmp .L_lambda_simple_end_001c
  4832                                  .L_lambda_simple_code_001c:	; lambda-simple body
  4833 000026DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4834 000026E1 740B                    	je .L_lambda_simple_arity_check_ok_001c
  4835 000026E3 FF742410                	push qword [rsp + 8 * 2]
  4836 000026E7 6A01                    	push 1
  4837 000026E9 E9AA580100              	jmp L_error_incorrect_arity_simple
  4838                                  .L_lambda_simple_arity_check_ok_001c:
  4839 000026EE C8000000                	enter 0, 0
  4840                                  	; preparing a tail-call
  4841                                  	; preparing a non-tail-call
  4842 000026F2 488B4520                	mov rax, PARAM(0)	; param x
  4843 000026F6 50                      	push rax
  4844 000026F7 6A01                    	push 1	; arg count
  4845 000026F9 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4846 00002701 803805                  	cmp byte [rax], T_undefined
  4847 00002704 0F84A8570100            	je L_error_fvar_undefined
  4848 0000270A 803804                  	cmp byte [rax], T_closure
  4849 0000270D 0F8523580100            	jne L_error_non_closure
  4850 00002713 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4851 00002716 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4852 00002719 50                      	push rax
  4853 0000271A 6A01                    	push 1	; arg count
  4854 0000271C 488B0425[F4110000]      	mov rax, qword [free_var_63]	; free var cddr
  4855 00002724 803805                  	cmp byte [rax], T_undefined
  4856 00002727 0F8485570100            	je L_error_fvar_undefined
  4857 0000272D 803804                  	cmp byte [rax], T_closure
  4858 00002730 0F8500580100            	jne L_error_non_closure
  4859 00002736 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4860 00002739 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4861 0000273C FF7500                  	push qword[rbp]
  4862 0000273F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4863 00002742 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4864 00002746 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4865 0000274A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4866 0000274E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4867 00002751 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4868 00002754 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4869 00002759 4983C103                	add r9, 3 	 ;for getting to the params
  4870 0000275D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4871 00002761 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4872                                  .L_tc_recycle_frame_loop_001c:
  4873 00002764 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4874 00002767 7410                    	je .L_tc_recycle_frame_done_001c
  4875 00002769 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4876 0000276C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4877 0000276F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4878 00002773 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4879 00002777 EBEB                    	jmp .L_tc_recycle_frame_loop_001c
  4880                                  .L_tc_recycle_frame_done_001c:
  4881 00002779 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4882 0000277A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4883 0000277E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4884 00002781 C9                      	leave
  4885 00002782 C21800                  	ret AND_KILL_FRAME(1)
  4886                                  .L_lambda_simple_end_001c:	; new closure is in rax
  4887 00002785 48890425[D2110000]      	mov qword [free_var_61], rax
  4888 0000278D 48B8-                   	mov rax, sob_void
  4888 0000278F [0000000000000000] 
  4889                                  
  4890 00002797 4889C7                  	mov rdi, rax
  4891 0000279A E8955A0100              	call print_sexpr_if_not_void
  4892 0000279F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4893 000027A4 E836580100              	call malloc
  4894 000027A9 50                      	push rax
  4895 000027AA BF00000000              	mov rdi, 8 * 0	; new rib
  4896 000027AF E82B580100              	call malloc
  4897 000027B4 50                      	push rax
  4898 000027B5 BF08000000              	mov rdi, 8 * 1	; extended env
  4899 000027BA E820580100              	call malloc
  4900 000027BF 488B7D10                	mov rdi, ENV
  4901 000027C3 BE00000000              	mov rsi, 0
  4902 000027C8 BA01000000              	mov rdx, 1
  4903                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  4904 000027CD 4883FE00                	cmp rsi, 0
  4905 000027D1 7410                    	je .L_lambda_simple_env_end_001d
  4906 000027D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4907 000027D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4908 000027DB 48FFC6                  	inc rsi
  4909 000027DE 48FFC2                  	inc rdx
  4910 000027E1 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  4911                                  .L_lambda_simple_env_end_001d:
  4912 000027E3 5B                      	pop rbx
  4913 000027E4 BE00000000              	mov rsi, 0
  4914                                  .L_lambda_simple_params_loop_001d:	; copy params
  4915 000027E9 4883FE00                	cmp rsi, 0
  4916 000027ED 740E                    	je .L_lambda_simple_params_end_001d
  4917 000027EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4918 000027F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4919 000027F8 48FFC6                  	inc rsi
  4920 000027FB EBEC                    	jmp .L_lambda_simple_params_loop_001d
  4921                                  .L_lambda_simple_params_end_001d:
  4922 000027FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4923 00002800 4889C3                  	mov rbx, rax
  4924 00002803 58                      	pop rax
  4925 00002804 C60004                  	mov byte [rax], T_closure
  4926 00002807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4927 0000280B 48C74009[18280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  4928 00002813 E91C010000              	jmp .L_lambda_simple_end_001d
  4929                                  .L_lambda_simple_code_001d:	; lambda-simple body
  4930 00002818 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4931 0000281E 740B                    	je .L_lambda_simple_arity_check_ok_001d
  4932 00002820 FF742410                	push qword [rsp + 8 * 2]
  4933 00002824 6A01                    	push 1
  4934 00002826 E96D570100              	jmp L_error_incorrect_arity_simple
  4935                                  .L_lambda_simple_arity_check_ok_001d:
  4936 0000282B C8000000                	enter 0, 0
  4937                                  	; preparing a non-tail-call
  4938 0000282F 488B4520                	mov rax, PARAM(0)	; param e
  4939 00002833 50                      	push rax
  4940 00002834 6A01                    	push 1	; arg count
  4941 00002836 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  4942 0000283E 803805                  	cmp byte [rax], T_undefined
  4943 00002841 0F846B560100            	je L_error_fvar_undefined
  4944 00002847 803804                  	cmp byte [rax], T_closure
  4945 0000284A 0F85E6560100            	jne L_error_non_closure
  4946 00002850 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4947 00002853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4948 00002856 483D[02000000]          	cmp rax, sob_boolean_false
  4949 0000285C 0F85CE000000            	jne .L_or_end_0001
  4950                                  	; preparing a non-tail-call
  4951 00002862 488B4520                	mov rax, PARAM(0)	; param e
  4952 00002866 50                      	push rax
  4953 00002867 6A01                    	push 1	; arg count
  4954 00002869 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  4955 00002871 803805                  	cmp byte [rax], T_undefined
  4956 00002874 0F8438560100            	je L_error_fvar_undefined
  4957 0000287A 803804                  	cmp byte [rax], T_closure
  4958 0000287D 0F85B3560100            	jne L_error_non_closure
  4959 00002883 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4960 00002886 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4961 00002889 483D[02000000]          	cmp rax, sob_boolean_false
  4962 0000288F 0F8491000000            	je .L_if_else_0001
  4963                                  	; preparing a tail-call
  4964                                  	; preparing a non-tail-call
  4965 00002895 488B4520                	mov rax, PARAM(0)	; param e
  4966 00002899 50                      	push rax
  4967 0000289A 6A01                    	push 1	; arg count
  4968 0000289C 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  4969 000028A4 803805                  	cmp byte [rax], T_undefined
  4970 000028A7 0F8405560100            	je L_error_fvar_undefined
  4971 000028AD 803804                  	cmp byte [rax], T_closure
  4972 000028B0 0F8580560100            	jne L_error_non_closure
  4973 000028B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4974 000028B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4975 000028BC 50                      	push rax
  4976 000028BD 6A01                    	push 1	; arg count
  4977 000028BF 488B0425[25140000]      	mov rax, qword [free_var_96]	; free var list?
  4978 000028C7 803805                  	cmp byte [rax], T_undefined
  4979 000028CA 0F84E2550100            	je L_error_fvar_undefined
  4980 000028D0 803804                  	cmp byte [rax], T_closure
  4981 000028D3 0F855D560100            	jne L_error_non_closure
  4982 000028D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4983 000028DC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4984 000028DF FF7500                  	push qword[rbp]
  4985 000028E2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4986 000028E5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4987 000028E9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4988 000028ED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4989 000028F1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4990 000028F4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4991 000028F7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4992 000028FC 4983C103                	add r9, 3 	 ;for getting to the params
  4993 00002900 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4994 00002904 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4995                                  .L_tc_recycle_frame_loop_001d:
  4996 00002907 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4997 0000290A 7410                    	je .L_tc_recycle_frame_done_001d
  4998 0000290C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4999 0000290F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5000 00002912 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5001 00002916 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5002 0000291A EBEB                    	jmp .L_tc_recycle_frame_loop_001d
  5003                                  .L_tc_recycle_frame_done_001d:
  5004 0000291C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5005 0000291D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5006 00002921 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5007 00002924 EB0A                    	jmp .L_if_end_0001
  5008                                  .L_if_else_0001:
  5009 00002926 48B8-                   	mov rax, L_constants + 2
  5009 00002928 [0200000000000000] 
  5010                                  .L_if_end_0001:
  5011                                  .L_or_end_0001:
  5012 00002930 C9                      	leave
  5013 00002931 C21800                  	ret AND_KILL_FRAME(1)
  5014                                  .L_lambda_simple_end_001d:	; new closure is in rax
  5015 00002934 48890425[25140000]      	mov qword [free_var_96], rax
  5016 0000293C 48B8-                   	mov rax, sob_void
  5016 0000293E [0000000000000000] 
  5017                                  
  5018 00002946 4889C7                  	mov rdi, rax
  5019 00002949 E8E6580100              	call print_sexpr_if_not_void
  5020 0000294E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5021 00002953 E887560100              	call malloc
  5022 00002958 50                      	push rax
  5023 00002959 BF00000000              	mov rdi, 8 * 0	; new rib
  5024 0000295E E87C560100              	call malloc
  5025 00002963 50                      	push rax
  5026 00002964 BF08000000              	mov rdi, 8 * 1	; extended env
  5027 00002969 E871560100              	call malloc
  5028 0000296E 488B7D10                	mov rdi, ENV
  5029 00002972 BE00000000              	mov rsi, 0
  5030 00002977 BA01000000              	mov rdx, 1
  5031                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  5032 0000297C 4883FE00                	cmp rsi, 0
  5033 00002980 7410                    	je .L_lambda_opt_env_end_0001
  5034 00002982 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5035 00002986 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5036 0000298A 48FFC6                  	inc rsi
  5037 0000298D 48FFC2                  	inc rdx
  5038 00002990 EBEA                    	jmp .L_lambda_opt_env_loop_0001
  5039                                  .L_lambda_opt_env_end_0001:
  5040 00002992 5B                      	pop rbx
  5041 00002993 BE00000000              	mov rsi, 0
  5042                                  .L_lambda_opt_params_loop_0001:	; copy params
  5043 00002998 4883FE00                	cmp rsi, 0
  5044 0000299C 740E                    	je .L_lambda_opt_params_end_0001
  5045 0000299E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5046 000029A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5047 000029A7 48FFC6                  	inc rsi
  5048 000029AA EBEC                    	jmp .L_lambda_opt_params_loop_0001
  5049                                  .L_lambda_opt_params_end_0001:
  5050 000029AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5051 000029AF 4889C3                  	mov rbx, rax
  5052 000029B2 58                      	pop rax
  5053 000029B3 C60004                  	mov byte [rax], T_closure
  5054 000029B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5055 000029BA 48C74009[C7290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  5056 000029C2 E919010000              	jmp .L_lambda_opt_end_0001
  5057                                  .L_lambda_opt_code_0001:	; lambda-opt body
  5058 000029C7 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5059 000029CD 740D                    	je .L_lambda_opt_arity_check_exact_0001
  5060 000029CF 7F4C                    	jg .L_lambda_opt_arity_check_more_0001
  5061 000029D1 FF742410                	push qword [rsp + 8 * 2]
  5062 000029D5 6A00                    	push 0
  5063 000029D7 E9D0550100              	jmp L_error_incorrect_arity_opt
  5064                                  .L_lambda_opt_arity_check_exact_0001:
  5065 000029DC 4883EC08                	sub rsp, 8
  5066 000029E0 488B442408              	mov rax, qword[rsp + 8 *1]
  5067 000029E5 48890424                	mov qword[rsp], rax  
  5068 000029E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5069 000029EE 4889442408              	mov qword[rsp + 8 * 1], rax
  5070 000029F3 B801000000              	mov rax, 1
  5071 000029F8 4889442410              	mov qword[rsp + 8 *2], rax
  5072 000029FD 48B8-                   	mov rax, sob_nil
  5072 000029FF [0100000000000000] 
  5073 00002A07 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5074 00002A0C C8000000                	enter 0, 0
  5075 00002A10 488B4520                	mov rax, PARAM(0)	; param args
  5076 00002A14 C9                      	leave
  5077 00002A15 C21800                  	ret AND_KILL_FRAME(1)
  5078 00002A18 E9C3000000              	jmp .L_lambda_opt_end_0001	; new closure is in rax
  5079                                  .L_lambda_opt_arity_check_more_0001:
  5080 00002A1D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5081 00002A22 49B9-                   	mov r9, sob_nil
  5081 00002A24 [0100000000000000] 
  5082 00002A2C 4889E3                  	mov rbx, rsp 
  5083 00002A2F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5084 00002A33 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5085 00002A36 49C1E003                	shl r8, 3
  5086 00002A3A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5087 00002A3D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5088                                  .L_lambda_opt_stack_shrink_loop_0001:
  5089 00002A42 4983F800                	cmp r8, 0
  5090 00002A46 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  5091 00002A48 BF11000000              	mov rdi, 1+8+8	;for pair
  5092 00002A4D E88D550100              	call malloc	 ;to create the pair in the stack
  5093 00002A52 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5094 00002A55 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  5095 00002A58 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  5096 00002A5C 4C894809                 	mov qword[rax+1+8],r9
  5097 00002A60 4989C1                  	mov r9, rax	 ; for the recursion 
  5098 00002A63 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  5099 00002A66 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  5100 00002A6A EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  5101                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  5102 00002A6C 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  5103 00002A71 4883E901                	sub rcx, 1
  5104 00002A75 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  5105 00002A79 4801CC                  	add rsp, rcx	 ;shrinking the stack
  5106 00002A7C 4889E0                  	mov rax, rsp
  5107 00002A7F 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  5108 00002A82 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  5109 00002A86 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  5110 00002A89 4883C018                	add rax, 3 * 8 	;now rax is param 0
  5111 00002A8D 49C1E003                	shl r8, 3 	; convert to byte
  5112 00002A91 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  5113 00002A94 4C8908                  	mov qword[rax], r9	;puting the list at the top
  5114 00002A97 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  5115 00002A9B 4889E3                  	mov rbx, rsp 
  5116 00002A9E 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  5117 00002AA1 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
  5118 00002AA7 49FFCA                  	dec r10 
  5119 00002AAA 49C1E203                	shl r10, 3	;to get bytes
  5120 00002AAE 4883C318                	add rbx, 3*8 	;rbx is the first param
  5121 00002AB2 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  5122 00002AB5 4889E0                  	mov rax, rsp
  5123 00002AB8 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5124 00002ABB 48C744241001000000      	mov qword [rsp+2*8], 1
  5125 00002AC4 488B5808                	mov rbx, qword[rax + 8 *1]
  5126 00002AC8 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5127 00002ACD 488B18                  	mov rbx, qword[rax]
  5128 00002AD0 48891C24                	mov qword [rsp], rbx
  5129 00002AD4 C8000000                	enter 0, 0
  5130 00002AD8 488B4520                	mov rax, PARAM(0)	; param args
  5131 00002ADC C9                      	leave
  5132 00002ADD C21800                  	ret AND_KILL_FRAME(1)
  5133                                  .L_lambda_opt_end_0001:	; new closure is in rax
  5134 00002AE0 48890425[E1130000]      	mov qword [free_var_92], rax
  5135 00002AE8 48B8-                   	mov rax, sob_void
  5135 00002AEA [0000000000000000] 
  5136                                  
  5137 00002AF2 4889C7                  	mov rdi, rax
  5138 00002AF5 E83A570100              	call print_sexpr_if_not_void
  5139 00002AFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5140 00002AFF E8DB540100              	call malloc
  5141 00002B04 50                      	push rax
  5142 00002B05 BF00000000              	mov rdi, 8 * 0	; new rib
  5143 00002B0A E8D0540100              	call malloc
  5144 00002B0F 50                      	push rax
  5145 00002B10 BF08000000              	mov rdi, 8 * 1	; extended env
  5146 00002B15 E8C5540100              	call malloc
  5147 00002B1A 488B7D10                	mov rdi, ENV
  5148 00002B1E BE00000000              	mov rsi, 0
  5149 00002B23 BA01000000              	mov rdx, 1
  5150                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  5151 00002B28 4883FE00                	cmp rsi, 0
  5152 00002B2C 7410                    	je .L_lambda_simple_env_end_001e
  5153 00002B2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5154 00002B32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5155 00002B36 48FFC6                  	inc rsi
  5156 00002B39 48FFC2                  	inc rdx
  5157 00002B3C EBEA                    	jmp .L_lambda_simple_env_loop_001e
  5158                                  .L_lambda_simple_env_end_001e:
  5159 00002B3E 5B                      	pop rbx
  5160 00002B3F BE00000000              	mov rsi, 0
  5161                                  .L_lambda_simple_params_loop_001e:	; copy params
  5162 00002B44 4883FE00                	cmp rsi, 0
  5163 00002B48 740E                    	je .L_lambda_simple_params_end_001e
  5164 00002B4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5165 00002B4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5166 00002B53 48FFC6                  	inc rsi
  5167 00002B56 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  5168                                  .L_lambda_simple_params_end_001e:
  5169 00002B58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5170 00002B5B 4889C3                  	mov rbx, rax
  5171 00002B5E 58                      	pop rax
  5172 00002B5F C60004                  	mov byte [rax], T_closure
  5173 00002B62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5174 00002B66 48C74009[702B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  5175 00002B6E EB3D                    	jmp .L_lambda_simple_end_001e
  5176                                  .L_lambda_simple_code_001e:	; lambda-simple body
  5177 00002B70 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5178 00002B76 740B                    	je .L_lambda_simple_arity_check_ok_001e
  5179 00002B78 FF742410                	push qword [rsp + 8 * 2]
  5180 00002B7C 6A01                    	push 1
  5181 00002B7E E915540100              	jmp L_error_incorrect_arity_simple
  5182                                  .L_lambda_simple_arity_check_ok_001e:
  5183 00002B83 C8000000                	enter 0, 0
  5184 00002B87 488B4520                	mov rax, PARAM(0)	; param x
  5185 00002B8B 483D[02000000]          	cmp rax, sob_boolean_false
  5186 00002B91 740C                    	je .L_if_else_0002
  5187 00002B93 48B8-                   	mov rax, L_constants + 2
  5187 00002B95 [0200000000000000] 
  5188 00002B9D EB0A                    	jmp .L_if_end_0002
  5189                                  .L_if_else_0002:
  5190 00002B9F 48B8-                   	mov rax, L_constants + 3
  5190 00002BA1 [0300000000000000] 
  5191                                  .L_if_end_0002:
  5192 00002BA9 C9                      	leave
  5193 00002BAA C21800                  	ret AND_KILL_FRAME(1)
  5194                                  .L_lambda_simple_end_001e:	; new closure is in rax
  5195 00002BAD 48890425[CF140000]      	mov qword [free_var_106], rax
  5196 00002BB5 48B8-                   	mov rax, sob_void
  5196 00002BB7 [0000000000000000] 
  5197                                  
  5198 00002BBF 4889C7                  	mov rdi, rax
  5199 00002BC2 E86D560100              	call print_sexpr_if_not_void
  5200 00002BC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5201 00002BCC E80E540100              	call malloc
  5202 00002BD1 50                      	push rax
  5203 00002BD2 BF00000000              	mov rdi, 8 * 0	; new rib
  5204 00002BD7 E803540100              	call malloc
  5205 00002BDC 50                      	push rax
  5206 00002BDD BF08000000              	mov rdi, 8 * 1	; extended env
  5207 00002BE2 E8F8530100              	call malloc
  5208 00002BE7 488B7D10                	mov rdi, ENV
  5209 00002BEB BE00000000              	mov rsi, 0
  5210 00002BF0 BA01000000              	mov rdx, 1
  5211                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  5212 00002BF5 4883FE00                	cmp rsi, 0
  5213 00002BF9 7410                    	je .L_lambda_simple_env_end_001f
  5214 00002BFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5215 00002BFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5216 00002C03 48FFC6                  	inc rsi
  5217 00002C06 48FFC2                  	inc rdx
  5218 00002C09 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  5219                                  .L_lambda_simple_env_end_001f:
  5220 00002C0B 5B                      	pop rbx
  5221 00002C0C BE00000000              	mov rsi, 0
  5222                                  .L_lambda_simple_params_loop_001f:	; copy params
  5223 00002C11 4883FE00                	cmp rsi, 0
  5224 00002C15 740E                    	je .L_lambda_simple_params_end_001f
  5225 00002C17 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5226 00002C1C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5227 00002C20 48FFC6                  	inc rsi
  5228 00002C23 EBEC                    	jmp .L_lambda_simple_params_loop_001f
  5229                                  .L_lambda_simple_params_end_001f:
  5230 00002C25 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5231 00002C28 4889C3                  	mov rbx, rax
  5232 00002C2B 58                      	pop rax
  5233 00002C2C C60004                  	mov byte [rax], T_closure
  5234 00002C2F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5235 00002C33 48C74009[402C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  5236 00002C3B E9B6000000              	jmp .L_lambda_simple_end_001f
  5237                                  .L_lambda_simple_code_001f:	; lambda-simple body
  5238 00002C40 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5239 00002C46 740B                    	je .L_lambda_simple_arity_check_ok_001f
  5240 00002C48 FF742410                	push qword [rsp + 8 * 2]
  5241 00002C4C 6A01                    	push 1
  5242 00002C4E E945530100              	jmp L_error_incorrect_arity_simple
  5243                                  .L_lambda_simple_arity_check_ok_001f:
  5244 00002C53 C8000000                	enter 0, 0
  5245                                  	; preparing a non-tail-call
  5246 00002C57 488B4520                	mov rax, PARAM(0)	; param q
  5247 00002C5B 50                      	push rax
  5248 00002C5C 6A01                    	push 1	; arg count
  5249 00002C5E 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
  5250 00002C66 803805                  	cmp byte [rax], T_undefined
  5251 00002C69 0F8443520100            	je L_error_fvar_undefined
  5252 00002C6F 803804                  	cmp byte [rax], T_closure
  5253 00002C72 0F85BE520100            	jne L_error_non_closure
  5254 00002C78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5255 00002C7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5256 00002C7E 483D[02000000]          	cmp rax, sob_boolean_false
  5257 00002C84 756C                    	jne .L_or_end_0002
  5258                                  	; preparing a tail-call
  5259 00002C86 488B4520                	mov rax, PARAM(0)	; param q
  5260 00002C8A 50                      	push rax
  5261 00002C8B 6A01                    	push 1	; arg count
  5262 00002C8D 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
  5263 00002C95 803805                  	cmp byte [rax], T_undefined
  5264 00002C98 0F8414520100            	je L_error_fvar_undefined
  5265 00002C9E 803804                  	cmp byte [rax], T_closure
  5266 00002CA1 0F858F520100            	jne L_error_non_closure
  5267 00002CA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5268 00002CAA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5269 00002CAD FF7500                  	push qword[rbp]
  5270 00002CB0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5271 00002CB3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5272 00002CB7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5273 00002CBB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5274 00002CBF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5275 00002CC2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5276 00002CC5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5277 00002CCA 4983C103                	add r9, 3 	 ;for getting to the params
  5278 00002CCE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5279 00002CD2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5280                                  .L_tc_recycle_frame_loop_001e:
  5281 00002CD5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5282 00002CD8 7410                    	je .L_tc_recycle_frame_done_001e
  5283 00002CDA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5284 00002CDD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5285 00002CE0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5286 00002CE4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5287 00002CE8 EBEB                    	jmp .L_tc_recycle_frame_loop_001e
  5288                                  .L_tc_recycle_frame_done_001e:
  5289 00002CEA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5290 00002CEB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5291 00002CEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5292                                  .L_or_end_0002:
  5293 00002CF2 C9                      	leave
  5294 00002CF3 C21800                  	ret AND_KILL_FRAME(1)
  5295                                  .L_lambda_simple_end_001f:	; new closure is in rax
  5296 00002CF6 48890425[57150000]      	mov qword [free_var_114], rax
  5297 00002CFE 48B8-                   	mov rax, sob_void
  5297 00002D00 [0000000000000000] 
  5298                                  
  5299 00002D08 4889C7                  	mov rdi, rax
  5300 00002D0B E824550100              	call print_sexpr_if_not_void
  5301                                  	; preparing a non-tail-call
  5302 00002D10 48B8-                   	mov rax, L_constants + 1993
  5302 00002D12 [C907000000000000] 
  5303 00002D1A 50                      	push rax
  5304 00002D1B 6A01                    	push 1	; arg count
  5305 00002D1D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5306 00002D22 E8B8520100              	call malloc
  5307 00002D27 50                      	push rax
  5308 00002D28 BF00000000              	mov rdi, 8 * 0	; new rib
  5309 00002D2D E8AD520100              	call malloc
  5310 00002D32 50                      	push rax
  5311 00002D33 BF08000000              	mov rdi, 8 * 1	; extended env
  5312 00002D38 E8A2520100              	call malloc
  5313 00002D3D 488B7D10                	mov rdi, ENV
  5314 00002D41 BE00000000              	mov rsi, 0
  5315 00002D46 BA01000000              	mov rdx, 1
  5316                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  5317 00002D4B 4883FE00                	cmp rsi, 0
  5318 00002D4F 7410                    	je .L_lambda_simple_env_end_0020
  5319 00002D51 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5320 00002D55 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5321 00002D59 48FFC6                  	inc rsi
  5322 00002D5C 48FFC2                  	inc rdx
  5323 00002D5F EBEA                    	jmp .L_lambda_simple_env_loop_0020
  5324                                  .L_lambda_simple_env_end_0020:
  5325 00002D61 5B                      	pop rbx
  5326 00002D62 BE00000000              	mov rsi, 0
  5327                                  .L_lambda_simple_params_loop_0020:	; copy params
  5328 00002D67 4883FE00                	cmp rsi, 0
  5329 00002D6B 740E                    	je .L_lambda_simple_params_end_0020
  5330 00002D6D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5331 00002D72 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5332 00002D76 48FFC6                  	inc rsi
  5333 00002D79 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  5334                                  .L_lambda_simple_params_end_0020:
  5335 00002D7B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5336 00002D7E 4889C3                  	mov rbx, rax
  5337 00002D81 58                      	pop rax
  5338 00002D82 C60004                  	mov byte [rax], T_closure
  5339 00002D85 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5340 00002D89 48C74009[962D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  5341 00002D91 E972040000              	jmp .L_lambda_simple_end_0020
  5342                                  .L_lambda_simple_code_0020:	; lambda-simple body
  5343 00002D96 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5344 00002D9C 740B                    	je .L_lambda_simple_arity_check_ok_0020
  5345 00002D9E FF742410                	push qword [rsp + 8 * 2]
  5346 00002DA2 6A01                    	push 1
  5347 00002DA4 E9EF510100              	jmp L_error_incorrect_arity_simple
  5348                                  .L_lambda_simple_arity_check_ok_0020:
  5349 00002DA9 C8000000                	enter 0, 0
  5350 00002DAD BF08000000              	mov rdi, 8*1
  5351 00002DB2 E828520100              	call malloc
  5352 00002DB7 488B5D20                	mov rbx, PARAM(0)
  5353 00002DBB 488918                  	mov qword[rax], rbx
  5354 00002DBE 48894520                	mov PARAM(0), rax
  5355 00002DC2 48B8-                   	mov rax, sob_void
  5355 00002DC4 [0000000000000000] 
  5356                                  
  5357 00002DCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5358 00002DD1 E809520100              	call malloc
  5359 00002DD6 50                      	push rax
  5360 00002DD7 BF08000000              	mov rdi, 8 * 1	; new rib
  5361 00002DDC E8FE510100              	call malloc
  5362 00002DE1 50                      	push rax
  5363 00002DE2 BF10000000              	mov rdi, 8 * 2	; extended env
  5364 00002DE7 E8F3510100              	call malloc
  5365 00002DEC 488B7D10                	mov rdi, ENV
  5366 00002DF0 BE00000000              	mov rsi, 0
  5367 00002DF5 BA01000000              	mov rdx, 1
  5368                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  5369 00002DFA 4883FE01                	cmp rsi, 1
  5370 00002DFE 7410                    	je .L_lambda_simple_env_end_0021
  5371 00002E00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5372 00002E04 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5373 00002E08 48FFC6                  	inc rsi
  5374 00002E0B 48FFC2                  	inc rdx
  5375 00002E0E EBEA                    	jmp .L_lambda_simple_env_loop_0021
  5376                                  .L_lambda_simple_env_end_0021:
  5377 00002E10 5B                      	pop rbx
  5378 00002E11 BE00000000              	mov rsi, 0
  5379                                  .L_lambda_simple_params_loop_0021:	; copy params
  5380 00002E16 4883FE01                	cmp rsi, 1
  5381 00002E1A 740E                    	je .L_lambda_simple_params_end_0021
  5382 00002E1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5383 00002E21 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5384 00002E25 48FFC6                  	inc rsi
  5385 00002E28 EBEC                    	jmp .L_lambda_simple_params_loop_0021
  5386                                  .L_lambda_simple_params_end_0021:
  5387 00002E2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5388 00002E2D 4889C3                  	mov rbx, rax
  5389 00002E30 58                      	pop rax
  5390 00002E31 C60004                  	mov byte [rax], T_closure
  5391 00002E34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5392 00002E38 48C74009[452E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  5393 00002E40 E92E010000              	jmp .L_lambda_simple_end_0021
  5394                                  .L_lambda_simple_code_0021:	; lambda-simple body
  5395 00002E45 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5396 00002E4B 740B                    	je .L_lambda_simple_arity_check_ok_0021
  5397 00002E4D FF742410                	push qword [rsp + 8 * 2]
  5398 00002E51 6A02                    	push 2
  5399 00002E53 E940510100              	jmp L_error_incorrect_arity_simple
  5400                                  .L_lambda_simple_arity_check_ok_0021:
  5401 00002E58 C8000000                	enter 0, 0
  5402                                  	; preparing a non-tail-call
  5403 00002E5C 488B4528                	mov rax, PARAM(1)	; param s
  5404 00002E60 50                      	push rax
  5405 00002E61 6A01                    	push 1	; arg count
  5406 00002E63 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  5407 00002E6B 803805                  	cmp byte [rax], T_undefined
  5408 00002E6E 0F843E500100            	je L_error_fvar_undefined
  5409 00002E74 803804                  	cmp byte [rax], T_closure
  5410 00002E77 0F85B9500100            	jne L_error_non_closure
  5411 00002E7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5412 00002E80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5413 00002E83 483D[02000000]          	cmp rax, sob_boolean_false
  5414 00002E89 7409                    	je .L_if_else_0003
  5415 00002E8B 488B4520                	mov rax, PARAM(0)	; param a
  5416 00002E8F E9DB000000              	jmp .L_if_end_0003
  5417                                  .L_if_else_0003:
  5418                                  	; preparing a tail-call
  5419                                  	; preparing a non-tail-call
  5420                                  	; preparing a non-tail-call
  5421 00002E94 488B4528                	mov rax, PARAM(1)	; param s
  5422 00002E98 50                      	push rax
  5423 00002E99 6A01                    	push 1	; arg count
  5424 00002E9B 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  5425 00002EA3 803805                  	cmp byte [rax], T_undefined
  5426 00002EA6 0F8406500100            	je L_error_fvar_undefined
  5427 00002EAC 803804                  	cmp byte [rax], T_closure
  5428 00002EAF 0F8581500100            	jne L_error_non_closure
  5429 00002EB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5430 00002EB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5431 00002EBB 50                      	push rax
  5432                                  	; preparing a non-tail-call
  5433 00002EBC 488B4528                	mov rax, PARAM(1)	; param s
  5434 00002EC0 50                      	push rax
  5435 00002EC1 6A01                    	push 1	; arg count
  5436 00002EC3 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  5437 00002ECB 803805                  	cmp byte [rax], T_undefined
  5438 00002ECE 0F84DE4F0100            	je L_error_fvar_undefined
  5439 00002ED4 803804                  	cmp byte [rax], T_closure
  5440 00002ED7 0F8559500100            	jne L_error_non_closure
  5441 00002EDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5442 00002EE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5443 00002EE3 50                      	push rax
  5444 00002EE4 6A02                    	push 2	; arg count
  5445 00002EE6 488B4510                	mov rax, ENV
  5446 00002EEA 488B00                  	mov rax, qword [rax + 8 * 0]
  5447 00002EED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5448 00002EF0 488B00                  	mov rax, qword [rax]
  5449 00002EF3 803804                  	cmp byte [rax], T_closure
  5450 00002EF6 0F853A500100            	jne L_error_non_closure
  5451 00002EFC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5452 00002EFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5453 00002F02 50                      	push rax
  5454 00002F03 488B4520                	mov rax, PARAM(0)	; param a
  5455 00002F07 50                      	push rax
  5456 00002F08 6A02                    	push 2	; arg count
  5457 00002F0A 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  5458 00002F12 803805                  	cmp byte [rax], T_undefined
  5459 00002F15 0F84974F0100            	je L_error_fvar_undefined
  5460 00002F1B 803804                  	cmp byte [rax], T_closure
  5461 00002F1E 0F8512500100            	jne L_error_non_closure
  5462 00002F24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5463 00002F27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5464 00002F2A FF7500                  	push qword[rbp]
  5465 00002F2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5466 00002F30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5467 00002F34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5468 00002F38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5469 00002F3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5470 00002F3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5471 00002F42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5472 00002F47 4983C103                	add r9, 3 	 ;for getting to the params
  5473 00002F4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5474 00002F4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5475                                  .L_tc_recycle_frame_loop_001f:
  5476 00002F52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5477 00002F55 7410                    	je .L_tc_recycle_frame_done_001f
  5478 00002F57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5479 00002F5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5480 00002F5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5481 00002F61 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5482 00002F65 EBEB                    	jmp .L_tc_recycle_frame_loop_001f
  5483                                  .L_tc_recycle_frame_done_001f:
  5484 00002F67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5485 00002F68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5486 00002F6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5487                                  .L_if_end_0003:
  5488 00002F6F C9                      	leave
  5489 00002F70 C22000                  	ret AND_KILL_FRAME(2)
  5490                                  .L_lambda_simple_end_0021:	; new closure is in rax
  5491 00002F73 50                      	push rax
  5492 00002F74 488B4520                	mov rax, PARAM(0)	; param run
  5493 00002F78 8F00                    	pop qword [rax]
  5494 00002F7A 48B8-                   	mov rax, sob_void
  5494 00002F7C [0000000000000000] 
  5495                                  
  5496 00002F84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5497 00002F89 E851500100              	call malloc
  5498 00002F8E 50                      	push rax
  5499 00002F8F BF08000000              	mov rdi, 8 * 1	; new rib
  5500 00002F94 E846500100              	call malloc
  5501 00002F99 50                      	push rax
  5502 00002F9A BF10000000              	mov rdi, 8 * 2	; extended env
  5503 00002F9F E83B500100              	call malloc
  5504 00002FA4 488B7D10                	mov rdi, ENV
  5505 00002FA8 BE00000000              	mov rsi, 0
  5506 00002FAD BA01000000              	mov rdx, 1
  5507                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  5508 00002FB2 4883FE01                	cmp rsi, 1
  5509 00002FB6 7410                    	je .L_lambda_opt_env_end_0002
  5510 00002FB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5511 00002FBC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5512 00002FC0 48FFC6                  	inc rsi
  5513 00002FC3 48FFC2                  	inc rdx
  5514 00002FC6 EBEA                    	jmp .L_lambda_opt_env_loop_0002
  5515                                  .L_lambda_opt_env_end_0002:
  5516 00002FC8 5B                      	pop rbx
  5517 00002FC9 BE00000000              	mov rsi, 0
  5518                                  .L_lambda_opt_params_loop_0002:	; copy params
  5519 00002FCE 4883FE01                	cmp rsi, 1
  5520 00002FD2 740E                    	je .L_lambda_opt_params_end_0002
  5521 00002FD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5522 00002FD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5523 00002FDD 48FFC6                  	inc rsi
  5524 00002FE0 EBEC                    	jmp .L_lambda_opt_params_loop_0002
  5525                                  .L_lambda_opt_params_end_0002:
  5526 00002FE2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5527 00002FE5 4889C3                  	mov rbx, rax
  5528 00002FE8 58                      	pop rax
  5529 00002FE9 C60004                  	mov byte [rax], T_closure
  5530 00002FEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5531 00002FF0 48C74009[FD2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  5532 00002FF8 E907020000              	jmp .L_lambda_opt_end_0002
  5533                                  .L_lambda_opt_code_0002:	; lambda-opt body
  5534 00002FFD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5535 00003003 7411                    	je .L_lambda_opt_arity_check_exact_0002
  5536 00003005 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0002
  5537 0000300B FF742410                	push qword [rsp + 8 * 2]
  5538 0000300F 6A01                    	push 1
  5539 00003011 E9964F0100              	jmp L_error_incorrect_arity_opt
  5540                                  .L_lambda_opt_arity_check_exact_0002:
  5541 00003016 4883EC08                	sub rsp, 8
  5542 0000301A 488B442408              	mov rax, qword[rsp + 8 *1]
  5543 0000301F 48890424                	mov qword[rsp], rax  
  5544 00003023 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5545 00003028 4889442408              	mov qword[rsp + 8 * 1], rax
  5546 0000302D B802000000              	mov rax, 2
  5547 00003032 4889442410              	mov qword[rsp + 8 *2], rax
  5548 00003037 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5549 0000303C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5550 00003041 48B8-                   	mov rax, sob_nil
  5550 00003043 [0100000000000000] 
  5551 0000304B 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5552 00003050 C8000000                	enter 0, 0
  5553                                  	; preparing a tail-call
  5554 00003054 488B4528                	mov rax, PARAM(1)	; param s
  5555 00003058 50                      	push rax
  5556 00003059 488B4520                	mov rax, PARAM(0)	; param a
  5557 0000305D 50                      	push rax
  5558 0000305E 6A02                    	push 2	; arg count
  5559 00003060 488B4510                	mov rax, ENV
  5560 00003064 488B00                  	mov rax, qword [rax + 8 * 0]
  5561 00003067 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5562 0000306A 488B00                  	mov rax, qword [rax]
  5563 0000306D 803804                  	cmp byte [rax], T_closure
  5564 00003070 0F85C04E0100            	jne L_error_non_closure
  5565 00003076 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5566 00003079 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5567 0000307C FF7500                  	push qword[rbp]
  5568 0000307F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5569 00003082 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5570 00003086 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5571 0000308A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5572 0000308E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5573 00003091 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5574 00003094 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5575 00003099 4983C103                	add r9, 3 	 ;for getting to the params
  5576 0000309D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5577 000030A1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5578                                  .L_tc_recycle_frame_loop_0021:
  5579 000030A4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5580 000030A7 7410                    	je .L_tc_recycle_frame_done_0021
  5581 000030A9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5582 000030AC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5583 000030AF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5584 000030B3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5585 000030B7 EBEB                    	jmp .L_tc_recycle_frame_loop_0021
  5586                                  .L_tc_recycle_frame_done_0021:
  5587 000030B9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5588 000030BA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5589 000030BE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5590 000030C1 C9                      	leave
  5591 000030C2 C22000                  	ret AND_KILL_FRAME(2)
  5592 000030C5 E93A010000              	jmp .L_lambda_opt_end_0002	; new closure is in rax
  5593                                  .L_lambda_opt_arity_check_more_0002:
  5594 000030CA 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5595 000030CF 49B9-                   	mov r9, sob_nil
  5595 000030D1 [0100000000000000] 
  5596 000030D9 4889E3                  	mov rbx, rsp 
  5597 000030DC 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5598 000030E0 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5599 000030E3 49C1E003                	shl r8, 3
  5600 000030E7 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5601 000030EA 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5602                                  .L_lambda_opt_stack_shrink_loop_0002:
  5603 000030EF 4983F801                	cmp r8, 1
  5604 000030F3 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  5605 000030F5 BF11000000              	mov rdi, 1+8+8	;for pair
  5606 000030FA E8E04E0100              	call malloc	 ;to create the pair in the stack
  5607 000030FF C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5608 00003102 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  5609 00003105 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  5610 00003109 4C894809                 	mov qword[rax+1+8],r9
  5611 0000310D 4989C1                  	mov r9, rax	 ; for the recursion 
  5612 00003110 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  5613 00003113 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  5614 00003117 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  5615                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  5616 00003119 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  5617 0000311E 4883E902                	sub rcx, 2
  5618 00003122 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  5619 00003126 4801CC                  	add rsp, rcx	 ;shrinking the stack
  5620 00003129 4889E0                  	mov rax, rsp
  5621 0000312C 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  5622 0000312F 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  5623 00003133 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  5624 00003136 4883C018                	add rax, 3 * 8 	;now rax is param 0
  5625 0000313A 49C1E003                	shl r8, 3 	; convert to byte
  5626 0000313E 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  5627 00003141 4C8908                  	mov qword[rax], r9	;puting the list at the top
  5628 00003144 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  5629 00003148 4889E3                  	mov rbx, rsp 
  5630 0000314B 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  5631 0000314E 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  5632 00003154 49FFCA                  	dec r10 
  5633 00003157 49C1E203                	shl r10, 3	;to get bytes
  5634 0000315B 4883C318                	add rbx, 3*8 	;rbx is the first param
  5635 0000315F 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  5636 00003162 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  5637                                  
  5638 00003165 4C8900                              	mov qword[rax], r8
  5639 00003168 4883E808                            	sub rax, 8
  5640 0000316C 4883EB08                	sub rbx, 8
  5641 00003170 4889E0                  	mov rax, rsp
  5642 00003173 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5643 00003176 48C744241002000000      	mov qword [rsp+2*8], 2
  5644 0000317F 488B5808                	mov rbx, qword[rax + 8 *1]
  5645 00003183 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5646 00003188 488B18                  	mov rbx, qword[rax]
  5647 0000318B 48891C24                	mov qword [rsp], rbx
  5648 0000318F C8000000                	enter 0, 0
  5649                                  	; preparing a tail-call
  5650 00003193 488B4528                	mov rax, PARAM(1)	; param s
  5651 00003197 50                      	push rax
  5652 00003198 488B4520                	mov rax, PARAM(0)	; param a
  5653 0000319C 50                      	push rax
  5654 0000319D 6A02                    	push 2	; arg count
  5655 0000319F 488B4510                	mov rax, ENV
  5656 000031A3 488B00                  	mov rax, qword [rax + 8 * 0]
  5657 000031A6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5658 000031A9 488B00                  	mov rax, qword [rax]
  5659 000031AC 803804                  	cmp byte [rax], T_closure
  5660 000031AF 0F85814D0100            	jne L_error_non_closure
  5661 000031B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5662 000031B8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5663 000031BB FF7500                  	push qword[rbp]
  5664 000031BE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5665 000031C1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5666 000031C5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5667 000031C9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5668 000031CD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5669 000031D0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5670 000031D3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5671 000031D8 4983C103                	add r9, 3 	 ;for getting to the params
  5672 000031DC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5673 000031E0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5674                                  .L_tc_recycle_frame_loop_0020:
  5675 000031E3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5676 000031E6 7410                    	je .L_tc_recycle_frame_done_0020
  5677 000031E8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5678 000031EB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5679 000031EE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5680 000031F2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5681 000031F6 EBEB                    	jmp .L_tc_recycle_frame_loop_0020
  5682                                  .L_tc_recycle_frame_done_0020:
  5683 000031F8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5684 000031F9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5685 000031FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5686 00003200 C9                      	leave
  5687 00003201 C22000                  	ret AND_KILL_FRAME(2)
  5688                                  .L_lambda_opt_end_0002:	; new closure is in rax
  5689 00003204 C9                      	leave
  5690 00003205 C21800                  	ret AND_KILL_FRAME(1)
  5691                                  .L_lambda_simple_end_0020:	; new closure is in rax
  5692 00003208 803804                  	cmp byte [rax], T_closure
  5693 0000320B 0F85254D0100            	jne L_error_non_closure
  5694 00003211 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5695 00003214 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5696 00003217 48890425[F2130000]      	mov qword [free_var_93], rax
  5697 0000321F 48B8-                   	mov rax, sob_void
  5697 00003221 [0000000000000000] 
  5698                                  
  5699 00003229 4889C7                  	mov rdi, rax
  5700 0000322C E803500100              	call print_sexpr_if_not_void
  5701                                  	; preparing a non-tail-call
  5702 00003231 48B8-                   	mov rax, L_constants + 1993
  5702 00003233 [C907000000000000] 
  5703 0000323B 50                      	push rax
  5704 0000323C 6A01                    	push 1	; arg count
  5705 0000323E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5706 00003243 E8974D0100              	call malloc
  5707 00003248 50                      	push rax
  5708 00003249 BF00000000              	mov rdi, 8 * 0	; new rib
  5709 0000324E E88C4D0100              	call malloc
  5710 00003253 50                      	push rax
  5711 00003254 BF08000000              	mov rdi, 8 * 1	; extended env
  5712 00003259 E8814D0100              	call malloc
  5713 0000325E 488B7D10                	mov rdi, ENV
  5714 00003262 BE00000000              	mov rsi, 0
  5715 00003267 BA01000000              	mov rdx, 1
  5716                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  5717 0000326C 4883FE00                	cmp rsi, 0
  5718 00003270 7410                    	je .L_lambda_simple_env_end_0022
  5719 00003272 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5720 00003276 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5721 0000327A 48FFC6                  	inc rsi
  5722 0000327D 48FFC2                  	inc rdx
  5723 00003280 EBEA                    	jmp .L_lambda_simple_env_loop_0022
  5724                                  .L_lambda_simple_env_end_0022:
  5725 00003282 5B                      	pop rbx
  5726 00003283 BE00000000              	mov rsi, 0
  5727                                  .L_lambda_simple_params_loop_0022:	; copy params
  5728 00003288 4883FE00                	cmp rsi, 0
  5729 0000328C 740E                    	je .L_lambda_simple_params_end_0022
  5730 0000328E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5731 00003293 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5732 00003297 48FFC6                  	inc rsi
  5733 0000329A EBEC                    	jmp .L_lambda_simple_params_loop_0022
  5734                                  .L_lambda_simple_params_end_0022:
  5735 0000329C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5736 0000329F 4889C3                  	mov rbx, rax
  5737 000032A2 58                      	pop rax
  5738 000032A3 C60004                  	mov byte [rax], T_closure
  5739 000032A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5740 000032AA 48C74009[B7320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  5741 000032B2 E94F050000              	jmp .L_lambda_simple_end_0022
  5742                                  .L_lambda_simple_code_0022:	; lambda-simple body
  5743 000032B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5744 000032BD 740B                    	je .L_lambda_simple_arity_check_ok_0022
  5745 000032BF FF742410                	push qword [rsp + 8 * 2]
  5746 000032C3 6A01                    	push 1
  5747 000032C5 E9CE4C0100              	jmp L_error_incorrect_arity_simple
  5748                                  .L_lambda_simple_arity_check_ok_0022:
  5749 000032CA C8000000                	enter 0, 0
  5750 000032CE BF08000000              	mov rdi, 8*1
  5751 000032D3 E8074D0100              	call malloc
  5752 000032D8 488B5D20                	mov rbx, PARAM(0)
  5753 000032DC 488918                  	mov qword[rax], rbx
  5754 000032DF 48894520                	mov PARAM(0), rax
  5755 000032E3 48B8-                   	mov rax, sob_void
  5755 000032E5 [0000000000000000] 
  5756                                  
  5757 000032ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5758 000032F2 E8E84C0100              	call malloc
  5759 000032F7 50                      	push rax
  5760 000032F8 BF08000000              	mov rdi, 8 * 1	; new rib
  5761 000032FD E8DD4C0100              	call malloc
  5762 00003302 50                      	push rax
  5763 00003303 BF10000000              	mov rdi, 8 * 2	; extended env
  5764 00003308 E8D24C0100              	call malloc
  5765 0000330D 488B7D10                	mov rdi, ENV
  5766 00003311 BE00000000              	mov rsi, 0
  5767 00003316 BA01000000              	mov rdx, 1
  5768                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  5769 0000331B 4883FE01                	cmp rsi, 1
  5770 0000331F 7410                    	je .L_lambda_simple_env_end_0023
  5771 00003321 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5772 00003325 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5773 00003329 48FFC6                  	inc rsi
  5774 0000332C 48FFC2                  	inc rdx
  5775 0000332F EBEA                    	jmp .L_lambda_simple_env_loop_0023
  5776                                  .L_lambda_simple_env_end_0023:
  5777 00003331 5B                      	pop rbx
  5778 00003332 BE00000000              	mov rsi, 0
  5779                                  .L_lambda_simple_params_loop_0023:	; copy params
  5780 00003337 4883FE01                	cmp rsi, 1
  5781 0000333B 740E                    	je .L_lambda_simple_params_end_0023
  5782 0000333D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5783 00003342 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5784 00003346 48FFC6                  	inc rsi
  5785 00003349 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  5786                                  .L_lambda_simple_params_end_0023:
  5787 0000334B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5788 0000334E 4889C3                  	mov rbx, rax
  5789 00003351 58                      	pop rax
  5790 00003352 C60004                  	mov byte [rax], T_closure
  5791 00003355 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5792 00003359 48C74009[66330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  5793 00003361 E92F010000              	jmp .L_lambda_simple_end_0023
  5794                                  .L_lambda_simple_code_0023:	; lambda-simple body
  5795 00003366 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5796 0000336C 740B                    	je .L_lambda_simple_arity_check_ok_0023
  5797 0000336E FF742410                	push qword [rsp + 8 * 2]
  5798 00003372 6A02                    	push 2
  5799 00003374 E91F4C0100              	jmp L_error_incorrect_arity_simple
  5800                                  .L_lambda_simple_arity_check_ok_0023:
  5801 00003379 C8000000                	enter 0, 0
  5802                                  	; preparing a non-tail-call
  5803 0000337D 488B4528                	mov rax, PARAM(1)	; param s
  5804 00003381 50                      	push rax
  5805 00003382 6A01                    	push 1	; arg count
  5806 00003384 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  5807 0000338C 803805                  	cmp byte [rax], T_undefined
  5808 0000338F 0F841D4B0100            	je L_error_fvar_undefined
  5809 00003395 803804                  	cmp byte [rax], T_closure
  5810 00003398 0F85984B0100            	jne L_error_non_closure
  5811 0000339E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5812 000033A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5813 000033A4 483D[02000000]          	cmp rax, sob_boolean_false
  5814 000033AA 0F84DD000000            	je .L_if_else_0004
  5815                                  	; preparing a tail-call
  5816                                  	; preparing a non-tail-call
  5817                                  	; preparing a non-tail-call
  5818 000033B0 488B4528                	mov rax, PARAM(1)	; param s
  5819 000033B4 50                      	push rax
  5820 000033B5 6A01                    	push 1	; arg count
  5821 000033B7 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  5822 000033BF 803805                  	cmp byte [rax], T_undefined
  5823 000033C2 0F84EA4A0100            	je L_error_fvar_undefined
  5824 000033C8 803804                  	cmp byte [rax], T_closure
  5825 000033CB 0F85654B0100            	jne L_error_non_closure
  5826 000033D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5827 000033D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5828 000033D7 50                      	push rax
  5829                                  	; preparing a non-tail-call
  5830 000033D8 488B4528                	mov rax, PARAM(1)	; param s
  5831 000033DC 50                      	push rax
  5832 000033DD 6A01                    	push 1	; arg count
  5833 000033DF 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  5834 000033E7 803805                  	cmp byte [rax], T_undefined
  5835 000033EA 0F84C24A0100            	je L_error_fvar_undefined
  5836 000033F0 803804                  	cmp byte [rax], T_closure
  5837 000033F3 0F853D4B0100            	jne L_error_non_closure
  5838 000033F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5839 000033FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5840 000033FF 50                      	push rax
  5841 00003400 6A02                    	push 2	; arg count
  5842 00003402 488B4510                	mov rax, ENV
  5843 00003406 488B00                  	mov rax, qword [rax + 8 * 0]
  5844 00003409 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5845 0000340C 488B00                  	mov rax, qword [rax]
  5846 0000340F 803804                  	cmp byte [rax], T_closure
  5847 00003412 0F851E4B0100            	jne L_error_non_closure
  5848 00003418 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5849 0000341B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5850 0000341E 50                      	push rax
  5851 0000341F 488B4520                	mov rax, PARAM(0)	; param a
  5852 00003423 50                      	push rax
  5853 00003424 6A02                    	push 2	; arg count
  5854 00003426 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  5855 0000342E 803805                  	cmp byte [rax], T_undefined
  5856 00003431 0F847B4A0100            	je L_error_fvar_undefined
  5857 00003437 803804                  	cmp byte [rax], T_closure
  5858 0000343A 0F85F64A0100            	jne L_error_non_closure
  5859 00003440 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5860 00003443 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5861 00003446 FF7500                  	push qword[rbp]
  5862 00003449 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5863 0000344C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5864 00003450 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5865 00003454 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5866 00003458 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5867 0000345B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5868 0000345E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5869 00003463 4983C103                	add r9, 3 	 ;for getting to the params
  5870 00003467 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5871 0000346B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5872                                  .L_tc_recycle_frame_loop_0022:
  5873 0000346E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5874 00003471 7410                    	je .L_tc_recycle_frame_done_0022
  5875 00003473 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5876 00003476 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5877 00003479 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5878 0000347D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5879 00003481 EBEB                    	jmp .L_tc_recycle_frame_loop_0022
  5880                                  .L_tc_recycle_frame_done_0022:
  5881 00003483 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5882 00003484 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5883 00003488 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5884 0000348B EB04                    	jmp .L_if_end_0004
  5885                                  .L_if_else_0004:
  5886 0000348D 488B4520                	mov rax, PARAM(0)	; param a
  5887                                  .L_if_end_0004:
  5888 00003491 C9                      	leave
  5889 00003492 C22000                  	ret AND_KILL_FRAME(2)
  5890                                  .L_lambda_simple_end_0023:	; new closure is in rax
  5891 00003495 50                      	push rax
  5892 00003496 488B4520                	mov rax, PARAM(0)	; param run
  5893 0000349A 8F00                    	pop qword [rax]
  5894 0000349C 48B8-                   	mov rax, sob_void
  5894 0000349E [0000000000000000] 
  5895                                  
  5896 000034A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5897 000034AB E82F4B0100              	call malloc
  5898 000034B0 50                      	push rax
  5899 000034B1 BF08000000              	mov rdi, 8 * 1	; new rib
  5900 000034B6 E8244B0100              	call malloc
  5901 000034BB 50                      	push rax
  5902 000034BC BF10000000              	mov rdi, 8 * 2	; extended env
  5903 000034C1 E8194B0100              	call malloc
  5904 000034C6 488B7D10                	mov rdi, ENV
  5905 000034CA BE00000000              	mov rsi, 0
  5906 000034CF BA01000000              	mov rdx, 1
  5907                                  .L_lambda_opt_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  5908 000034D4 4883FE01                	cmp rsi, 1
  5909 000034D8 7410                    	je .L_lambda_opt_env_end_0003
  5910 000034DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5911 000034DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5912 000034E2 48FFC6                  	inc rsi
  5913 000034E5 48FFC2                  	inc rdx
  5914 000034E8 EBEA                    	jmp .L_lambda_opt_env_loop_0003
  5915                                  .L_lambda_opt_env_end_0003:
  5916 000034EA 5B                      	pop rbx
  5917 000034EB BE00000000              	mov rsi, 0
  5918                                  .L_lambda_opt_params_loop_0003:	; copy params
  5919 000034F0 4883FE01                	cmp rsi, 1
  5920 000034F4 740E                    	je .L_lambda_opt_params_end_0003
  5921 000034F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5922 000034FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5923 000034FF 48FFC6                  	inc rsi
  5924 00003502 EBEC                    	jmp .L_lambda_opt_params_loop_0003
  5925                                  .L_lambda_opt_params_end_0003:
  5926 00003504 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5927 00003507 4889C3                  	mov rbx, rax
  5928 0000350A 58                      	pop rax
  5929 0000350B C60004                  	mov byte [rax], T_closure
  5930 0000350E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5931 00003512 48C74009[1F350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  5932 0000351A E9E3020000              	jmp .L_lambda_opt_end_0003
  5933                                  .L_lambda_opt_code_0003:	; lambda-opt body
  5934 0000351F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5935 00003525 7411                    	je .L_lambda_opt_arity_check_exact_0003
  5936 00003527 0F8F2D010000            	jg .L_lambda_opt_arity_check_more_0003
  5937 0000352D FF742410                	push qword [rsp + 8 * 2]
  5938 00003531 6A01                    	push 1
  5939 00003533 E9744A0100              	jmp L_error_incorrect_arity_opt
  5940                                  .L_lambda_opt_arity_check_exact_0003:
  5941 00003538 4883EC08                	sub rsp, 8
  5942 0000353C 488B442408              	mov rax, qword[rsp + 8 *1]
  5943 00003541 48890424                	mov qword[rsp], rax  
  5944 00003545 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5945 0000354A 4889442408              	mov qword[rsp + 8 * 1], rax
  5946 0000354F B802000000              	mov rax, 2
  5947 00003554 4889442410              	mov qword[rsp + 8 *2], rax
  5948 00003559 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5949 0000355E 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5950 00003563 48B8-                   	mov rax, sob_nil
  5950 00003565 [0100000000000000] 
  5951 0000356D 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5952 00003572 C8000000                	enter 0, 0
  5953                                  	; preparing a tail-call
  5954                                  	; preparing a non-tail-call
  5955                                  	; preparing a non-tail-call
  5956 00003576 488B4528                	mov rax, PARAM(1)	; param s
  5957 0000357A 50                      	push rax
  5958 0000357B 6A01                    	push 1	; arg count
  5959 0000357D 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  5960 00003585 803805                  	cmp byte [rax], T_undefined
  5961 00003588 0F8424490100            	je L_error_fvar_undefined
  5962 0000358E 803804                  	cmp byte [rax], T_closure
  5963 00003591 0F859F490100            	jne L_error_non_closure
  5964 00003597 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5965 0000359A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5966 0000359D 50                      	push rax
  5967                                  	; preparing a non-tail-call
  5968 0000359E 488B4528                	mov rax, PARAM(1)	; param s
  5969 000035A2 50                      	push rax
  5970 000035A3 6A01                    	push 1	; arg count
  5971 000035A5 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  5972 000035AD 803805                  	cmp byte [rax], T_undefined
  5973 000035B0 0F84FC480100            	je L_error_fvar_undefined
  5974 000035B6 803804                  	cmp byte [rax], T_closure
  5975 000035B9 0F8577490100            	jne L_error_non_closure
  5976 000035BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5977 000035C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5978 000035C5 50                      	push rax
  5979 000035C6 6A02                    	push 2	; arg count
  5980 000035C8 488B4510                	mov rax, ENV
  5981 000035CC 488B00                  	mov rax, qword [rax + 8 * 0]
  5982 000035CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5983 000035D2 488B00                  	mov rax, qword [rax]
  5984 000035D5 803804                  	cmp byte [rax], T_closure
  5985 000035D8 0F8558490100            	jne L_error_non_closure
  5986 000035DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5987 000035E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5988 000035E4 50                      	push rax
  5989 000035E5 488B4520                	mov rax, PARAM(0)	; param f
  5990 000035E9 50                      	push rax
  5991 000035EA 6A02                    	push 2	; arg count
  5992 000035EC 488B0425[910E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  5993 000035F4 803805                  	cmp byte [rax], T_undefined
  5994 000035F7 0F84B5480100            	je L_error_fvar_undefined
  5995 000035FD 803804                  	cmp byte [rax], T_closure
  5996 00003600 0F8530490100            	jne L_error_non_closure
  5997 00003606 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5998 00003609 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5999 0000360C FF7500                  	push qword[rbp]
  6000 0000360F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6001 00003612 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6002 00003616 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6003 0000361A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6004 0000361E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6005 00003621 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6006 00003624 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6007 00003629 4983C103                	add r9, 3 	 ;for getting to the params
  6008 0000362D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6009 00003631 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6010                                  .L_tc_recycle_frame_loop_0024:
  6011 00003634 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6012 00003637 7410                    	je .L_tc_recycle_frame_done_0024
  6013 00003639 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6014 0000363C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6015 0000363F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6016 00003643 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6017 00003647 EBEB                    	jmp .L_tc_recycle_frame_loop_0024
  6018                                  .L_tc_recycle_frame_done_0024:
  6019 00003649 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6020 0000364A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6021 0000364E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6022 00003651 C9                      	leave
  6023 00003652 C22000                  	ret AND_KILL_FRAME(2)
  6024 00003655 E9A8010000              	jmp .L_lambda_opt_end_0003	; new closure is in rax
  6025                                  .L_lambda_opt_arity_check_more_0003:
  6026 0000365A 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6027 0000365F 49B9-                   	mov r9, sob_nil
  6027 00003661 [0100000000000000] 
  6028 00003669 4889E3                  	mov rbx, rsp 
  6029 0000366C 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6030 00003670 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6031 00003673 49C1E003                	shl r8, 3
  6032 00003677 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6033 0000367A 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6034                                  .L_lambda_opt_stack_shrink_loop_0003:
  6035 0000367F 4983F801                	cmp r8, 1
  6036 00003683 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  6037 00003685 BF11000000              	mov rdi, 1+8+8	;for pair
  6038 0000368A E850490100              	call malloc	 ;to create the pair in the stack
  6039 0000368F C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6040 00003692 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  6041 00003695 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  6042 00003699 4C894809                 	mov qword[rax+1+8],r9
  6043 0000369D 4989C1                  	mov r9, rax	 ; for the recursion 
  6044 000036A0 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  6045 000036A3 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  6046 000036A7 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  6047                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  6048 000036A9 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  6049 000036AE 4883E902                	sub rcx, 2
  6050 000036B2 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  6051 000036B6 4801CC                  	add rsp, rcx	 ;shrinking the stack
  6052 000036B9 4889E0                  	mov rax, rsp
  6053 000036BC 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  6054 000036BF 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  6055 000036C3 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  6056 000036C6 4883C018                	add rax, 3 * 8 	;now rax is param 0
  6057 000036CA 49C1E003                	shl r8, 3 	; convert to byte
  6058 000036CE 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  6059 000036D1 4C8908                  	mov qword[rax], r9	;puting the list at the top
  6060 000036D4 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  6061 000036D8 4889E3                  	mov rbx, rsp 
  6062 000036DB 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  6063 000036DE 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  6064 000036E4 49FFCA                  	dec r10 
  6065 000036E7 49C1E203                	shl r10, 3	;to get bytes
  6066 000036EB 4883C318                	add rbx, 3*8 	;rbx is the first param
  6067 000036EF 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  6068 000036F2 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6069                                  
  6070 000036F5 4C8900                              	mov qword[rax], r8
  6071 000036F8 4883E808                            	sub rax, 8
  6072 000036FC 4883EB08                	sub rbx, 8
  6073 00003700 4889E0                  	mov rax, rsp
  6074 00003703 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6075 00003706 48C744241002000000      	mov qword [rsp+2*8], 2
  6076 0000370F 488B5808                	mov rbx, qword[rax + 8 *1]
  6077 00003713 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6078 00003718 488B18                  	mov rbx, qword[rax]
  6079 0000371B 48891C24                	mov qword [rsp], rbx
  6080 0000371F C8000000                	enter 0, 0
  6081                                  	; preparing a tail-call
  6082                                  	; preparing a non-tail-call
  6083                                  	; preparing a non-tail-call
  6084 00003723 488B4528                	mov rax, PARAM(1)	; param s
  6085 00003727 50                      	push rax
  6086 00003728 6A01                    	push 1	; arg count
  6087 0000372A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  6088 00003732 803805                  	cmp byte [rax], T_undefined
  6089 00003735 0F8477470100            	je L_error_fvar_undefined
  6090 0000373B 803804                  	cmp byte [rax], T_closure
  6091 0000373E 0F85F2470100            	jne L_error_non_closure
  6092 00003744 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6093 00003747 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6094 0000374A 50                      	push rax
  6095                                  	; preparing a non-tail-call
  6096 0000374B 488B4528                	mov rax, PARAM(1)	; param s
  6097 0000374F 50                      	push rax
  6098 00003750 6A01                    	push 1	; arg count
  6099 00003752 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6100 0000375A 803805                  	cmp byte [rax], T_undefined
  6101 0000375D 0F844F470100            	je L_error_fvar_undefined
  6102 00003763 803804                  	cmp byte [rax], T_closure
  6103 00003766 0F85CA470100            	jne L_error_non_closure
  6104 0000376C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6105 0000376F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6106 00003772 50                      	push rax
  6107 00003773 6A02                    	push 2	; arg count
  6108 00003775 488B4510                	mov rax, ENV
  6109 00003779 488B00                  	mov rax, qword [rax + 8 * 0]
  6110 0000377C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6111 0000377F 488B00                  	mov rax, qword [rax]
  6112 00003782 803804                  	cmp byte [rax], T_closure
  6113 00003785 0F85AB470100            	jne L_error_non_closure
  6114 0000378B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6115 0000378E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6116 00003791 50                      	push rax
  6117 00003792 488B4520                	mov rax, PARAM(0)	; param f
  6118 00003796 50                      	push rax
  6119 00003797 6A02                    	push 2	; arg count
  6120 00003799 488B0425[910E0000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  6121 000037A1 803805                  	cmp byte [rax], T_undefined
  6122 000037A4 0F8408470100            	je L_error_fvar_undefined
  6123 000037AA 803804                  	cmp byte [rax], T_closure
  6124 000037AD 0F8583470100            	jne L_error_non_closure
  6125 000037B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6126 000037B6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6127 000037B9 FF7500                  	push qword[rbp]
  6128 000037BC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6129 000037BF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6130 000037C3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6131 000037C7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6132 000037CB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6133 000037CE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6134 000037D1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6135 000037D6 4983C103                	add r9, 3 	 ;for getting to the params
  6136 000037DA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6137 000037DE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6138                                  .L_tc_recycle_frame_loop_0023:
  6139 000037E1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6140 000037E4 7410                    	je .L_tc_recycle_frame_done_0023
  6141 000037E6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6142 000037E9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6143 000037EC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6144 000037F0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6145 000037F4 EBEB                    	jmp .L_tc_recycle_frame_loop_0023
  6146                                  .L_tc_recycle_frame_done_0023:
  6147 000037F6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6148 000037F7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6149 000037FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6150 000037FE C9                      	leave
  6151 000037FF C22000                  	ret AND_KILL_FRAME(2)
  6152                                  .L_lambda_opt_end_0003:	; new closure is in rax
  6153 00003802 C9                      	leave
  6154 00003803 C21800                  	ret AND_KILL_FRAME(1)
  6155                                  .L_lambda_simple_end_0022:	; new closure is in rax
  6156 00003806 803804                  	cmp byte [rax], T_closure
  6157 00003809 0F8527470100            	jne L_error_non_closure
  6158 0000380F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6159 00003812 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6160 00003815 48890425[F60F0000]      	mov qword [free_var_33], rax
  6161 0000381D 48B8-                   	mov rax, sob_void
  6161 0000381F [0000000000000000] 
  6162                                  
  6163 00003827 4889C7                  	mov rdi, rax
  6164 0000382A E8054A0100              	call print_sexpr_if_not_void
  6165 0000382F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6166 00003834 E8A6470100              	call malloc
  6167 00003839 50                      	push rax
  6168 0000383A BF00000000              	mov rdi, 8 * 0	; new rib
  6169 0000383F E89B470100              	call malloc
  6170 00003844 50                      	push rax
  6171 00003845 BF08000000              	mov rdi, 8 * 1	; extended env
  6172 0000384A E890470100              	call malloc
  6173 0000384F 488B7D10                	mov rdi, ENV
  6174 00003853 BE00000000              	mov rsi, 0
  6175 00003858 BA01000000              	mov rdx, 1
  6176                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  6177 0000385D 4883FE00                	cmp rsi, 0
  6178 00003861 7410                    	je .L_lambda_opt_env_end_0004
  6179 00003863 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6180 00003867 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6181 0000386B 48FFC6                  	inc rsi
  6182 0000386E 48FFC2                  	inc rdx
  6183 00003871 EBEA                    	jmp .L_lambda_opt_env_loop_0004
  6184                                  .L_lambda_opt_env_end_0004:
  6185 00003873 5B                      	pop rbx
  6186 00003874 BE00000000              	mov rsi, 0
  6187                                  .L_lambda_opt_params_loop_0004:	; copy params
  6188 00003879 4883FE00                	cmp rsi, 0
  6189 0000387D 740E                    	je .L_lambda_opt_params_end_0004
  6190 0000387F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6191 00003884 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6192 00003888 48FFC6                  	inc rsi
  6193 0000388B EBEC                    	jmp .L_lambda_opt_params_loop_0004
  6194                                  .L_lambda_opt_params_end_0004:
  6195 0000388D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6196 00003890 4889C3                  	mov rbx, rax
  6197 00003893 58                      	pop rax
  6198 00003894 C60004                  	mov byte [rax], T_closure
  6199 00003897 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6200 0000389B 48C74009[A8380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  6201 000038A3 E9DB080000              	jmp .L_lambda_opt_end_0004
  6202                                  .L_lambda_opt_code_0004:	; lambda-opt body
  6203 000038A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6204 000038AE 7411                    	je .L_lambda_opt_arity_check_exact_0004
  6205 000038B0 0F8F29040000            	jg .L_lambda_opt_arity_check_more_0004
  6206 000038B6 FF742410                	push qword [rsp + 8 * 2]
  6207 000038BA 6A01                    	push 1
  6208 000038BC E9EB460100              	jmp L_error_incorrect_arity_opt
  6209                                  .L_lambda_opt_arity_check_exact_0004:
  6210 000038C1 4883EC08                	sub rsp, 8
  6211 000038C5 488B442408              	mov rax, qword[rsp + 8 *1]
  6212 000038CA 48890424                	mov qword[rsp], rax  
  6213 000038CE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6214 000038D3 4889442408              	mov qword[rsp + 8 * 1], rax
  6215 000038D8 B802000000              	mov rax, 2
  6216 000038DD 4889442410              	mov qword[rsp + 8 *2], rax
  6217 000038E2 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6218 000038E7 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6219 000038EC 48B8-                   	mov rax, sob_nil
  6219 000038EE [0100000000000000] 
  6220 000038F6 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6221 000038FB C8000000                	enter 0, 0
  6222                                  	; preparing a tail-call
  6223 000038FF 48B8-                   	mov rax, L_constants + 1993
  6223 00003901 [C907000000000000] 
  6224 00003909 50                      	push rax
  6225 0000390A 6A01                    	push 1	; arg count
  6226 0000390C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6227 00003911 E8C9460100              	call malloc
  6228 00003916 50                      	push rax
  6229 00003917 BF10000000              	mov rdi, 8 * 2	; new rib
  6230 0000391C E8BE460100              	call malloc
  6231 00003921 50                      	push rax
  6232 00003922 BF10000000              	mov rdi, 8 * 2	; extended env
  6233 00003927 E8B3460100              	call malloc
  6234 0000392C 488B7D10                	mov rdi, ENV
  6235 00003930 BE00000000              	mov rsi, 0
  6236 00003935 BA01000000              	mov rdx, 1
  6237                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  6238 0000393A 4883FE01                	cmp rsi, 1
  6239 0000393E 7410                    	je .L_lambda_simple_env_end_0026
  6240 00003940 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6241 00003944 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6242 00003948 48FFC6                  	inc rsi
  6243 0000394B 48FFC2                  	inc rdx
  6244 0000394E EBEA                    	jmp .L_lambda_simple_env_loop_0026
  6245                                  .L_lambda_simple_env_end_0026:
  6246 00003950 5B                      	pop rbx
  6247 00003951 BE00000000              	mov rsi, 0
  6248                                  .L_lambda_simple_params_loop_0026:	; copy params
  6249 00003956 4883FE02                	cmp rsi, 2
  6250 0000395A 740E                    	je .L_lambda_simple_params_end_0026
  6251 0000395C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6252 00003961 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6253 00003965 48FFC6                  	inc rsi
  6254 00003968 EBEC                    	jmp .L_lambda_simple_params_loop_0026
  6255                                  .L_lambda_simple_params_end_0026:
  6256 0000396A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6257 0000396D 4889C3                  	mov rbx, rax
  6258 00003970 58                      	pop rax
  6259 00003971 C60004                  	mov byte [rax], T_closure
  6260 00003974 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6261 00003978 48C74009[85390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  6262 00003980 E9FD020000              	jmp .L_lambda_simple_end_0026
  6263                                  .L_lambda_simple_code_0026:	; lambda-simple body
  6264 00003985 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6265 0000398B 740B                    	je .L_lambda_simple_arity_check_ok_0026
  6266 0000398D FF742410                	push qword [rsp + 8 * 2]
  6267 00003991 6A01                    	push 1
  6268 00003993 E900460100              	jmp L_error_incorrect_arity_simple
  6269                                  .L_lambda_simple_arity_check_ok_0026:
  6270 00003998 C8000000                	enter 0, 0
  6271 0000399C BF08000000              	mov rdi, 8*1
  6272 000039A1 E839460100              	call malloc
  6273 000039A6 488B5D20                	mov rbx, PARAM(0)
  6274 000039AA 488918                  	mov qword[rax], rbx
  6275 000039AD 48894520                	mov PARAM(0), rax
  6276 000039B1 48B8-                   	mov rax, sob_void
  6276 000039B3 [0000000000000000] 
  6277                                  
  6278 000039BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6279 000039C0 E81A460100              	call malloc
  6280 000039C5 50                      	push rax
  6281 000039C6 BF08000000              	mov rdi, 8 * 1	; new rib
  6282 000039CB E80F460100              	call malloc
  6283 000039D0 50                      	push rax
  6284 000039D1 BF18000000              	mov rdi, 8 * 3	; extended env
  6285 000039D6 E804460100              	call malloc
  6286 000039DB 488B7D10                	mov rdi, ENV
  6287 000039DF BE00000000              	mov rsi, 0
  6288 000039E4 BA01000000              	mov rdx, 1
  6289                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  6290 000039E9 4883FE02                	cmp rsi, 2
  6291 000039ED 7410                    	je .L_lambda_simple_env_end_0027
  6292 000039EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6293 000039F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6294 000039F7 48FFC6                  	inc rsi
  6295 000039FA 48FFC2                  	inc rdx
  6296 000039FD EBEA                    	jmp .L_lambda_simple_env_loop_0027
  6297                                  .L_lambda_simple_env_end_0027:
  6298 000039FF 5B                      	pop rbx
  6299 00003A00 BE00000000              	mov rsi, 0
  6300                                  .L_lambda_simple_params_loop_0027:	; copy params
  6301 00003A05 4883FE01                	cmp rsi, 1
  6302 00003A09 740E                    	je .L_lambda_simple_params_end_0027
  6303 00003A0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6304 00003A10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6305 00003A14 48FFC6                  	inc rsi
  6306 00003A17 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  6307                                  .L_lambda_simple_params_end_0027:
  6308 00003A19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6309 00003A1C 4889C3                  	mov rbx, rax
  6310 00003A1F 58                      	pop rax
  6311 00003A20 C60004                  	mov byte [rax], T_closure
  6312 00003A23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6313 00003A27 48C74009[343A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  6314 00003A2F E98E010000              	jmp .L_lambda_simple_end_0027
  6315                                  .L_lambda_simple_code_0027:	; lambda-simple body
  6316 00003A34 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6317 00003A3A 740B                    	je .L_lambda_simple_arity_check_ok_0027
  6318 00003A3C FF742410                	push qword [rsp + 8 * 2]
  6319 00003A40 6A01                    	push 1
  6320 00003A42 E951450100              	jmp L_error_incorrect_arity_simple
  6321                                  .L_lambda_simple_arity_check_ok_0027:
  6322 00003A47 C8000000                	enter 0, 0
  6323                                  	; preparing a non-tail-call
  6324                                  	; preparing a non-tail-call
  6325 00003A4B 488B4520                	mov rax, PARAM(0)	; param s
  6326 00003A4F 50                      	push rax
  6327 00003A50 6A01                    	push 1	; arg count
  6328 00003A52 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6329 00003A5A 803805                  	cmp byte [rax], T_undefined
  6330 00003A5D 0F844F440100            	je L_error_fvar_undefined
  6331 00003A63 803804                  	cmp byte [rax], T_closure
  6332 00003A66 0F85CA440100            	jne L_error_non_closure
  6333 00003A6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6334 00003A6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6335 00003A72 50                      	push rax
  6336 00003A73 6A01                    	push 1	; arg count
  6337 00003A75 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6338 00003A7D 803805                  	cmp byte [rax], T_undefined
  6339 00003A80 0F842C440100            	je L_error_fvar_undefined
  6340 00003A86 803804                  	cmp byte [rax], T_closure
  6341 00003A89 0F85A7440100            	jne L_error_non_closure
  6342 00003A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6343 00003A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6344 00003A95 483D[02000000]          	cmp rax, sob_boolean_false
  6345 00003A9B 0F8413010000            	je .L_if_else_0007
  6346                                  	; preparing a non-tail-call
  6347                                  	; preparing a non-tail-call
  6348 00003AA1 488B4520                	mov rax, PARAM(0)	; param s
  6349 00003AA5 50                      	push rax
  6350 00003AA6 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6351 00003AAE 803805                  	cmp byte [rax], T_undefined
  6352 00003AB1 0F84FB430100            	je L_error_fvar_undefined
  6353 00003AB7 50                      	push rax
  6354 00003AB8 6A02                    	push 2	; arg count
  6355 00003ABA 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6356 00003AC2 803805                  	cmp byte [rax], T_undefined
  6357 00003AC5 0F84E7430100            	je L_error_fvar_undefined
  6358 00003ACB 803804                  	cmp byte [rax], T_closure
  6359 00003ACE 0F8562440100            	jne L_error_non_closure
  6360 00003AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6361 00003AD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6362 00003ADA 50                      	push rax
  6363 00003ADB 488B4510                	mov rax, ENV
  6364 00003ADF 488B4008                	mov rax, qword [rax + 8 * 1]
  6365 00003AE3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6366 00003AE6 50                      	push rax
  6367 00003AE7 6A02                    	push 2	; arg count
  6368 00003AE9 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  6369 00003AF1 803805                  	cmp byte [rax], T_undefined
  6370 00003AF4 0F84B8430100            	je L_error_fvar_undefined
  6371 00003AFA 803804                  	cmp byte [rax], T_closure
  6372 00003AFD 0F8533440100            	jne L_error_non_closure
  6373 00003B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6374 00003B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6375 00003B09 483D[02000000]          	cmp rax, sob_boolean_false
  6376 00003B0F 0F859D000000            	jne .L_or_end_0004
  6377                                  	; preparing a tail-call
  6378                                  	; preparing a non-tail-call
  6379 00003B15 488B4520                	mov rax, PARAM(0)	; param s
  6380 00003B19 50                      	push rax
  6381 00003B1A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  6382 00003B22 803805                  	cmp byte [rax], T_undefined
  6383 00003B25 0F8487430100            	je L_error_fvar_undefined
  6384 00003B2B 50                      	push rax
  6385 00003B2C 6A02                    	push 2	; arg count
  6386 00003B2E 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6387 00003B36 803805                  	cmp byte [rax], T_undefined
  6388 00003B39 0F8473430100            	je L_error_fvar_undefined
  6389 00003B3F 803804                  	cmp byte [rax], T_closure
  6390 00003B42 0F85EE430100            	jne L_error_non_closure
  6391 00003B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6392 00003B4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6393 00003B4E 50                      	push rax
  6394 00003B4F 6A01                    	push 1	; arg count
  6395 00003B51 488B4510                	mov rax, ENV
  6396 00003B55 488B00                  	mov rax, qword [rax + 8 * 0]
  6397 00003B58 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6398 00003B5B 488B00                  	mov rax, qword [rax]
  6399 00003B5E 803804                  	cmp byte [rax], T_closure
  6400 00003B61 0F85CF430100            	jne L_error_non_closure
  6401 00003B67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6402 00003B6A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6403 00003B6D FF7500                  	push qword[rbp]
  6404 00003B70 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6405 00003B73 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6406 00003B77 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6407 00003B7B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6408 00003B7F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6409 00003B82 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6410 00003B85 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6411 00003B8A 4983C103                	add r9, 3 	 ;for getting to the params
  6412 00003B8E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6413 00003B92 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6414                                  .L_tc_recycle_frame_loop_0028:
  6415 00003B95 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6416 00003B98 7410                    	je .L_tc_recycle_frame_done_0028
  6417 00003B9A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6418 00003B9D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6419 00003BA0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6420 00003BA4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6421 00003BA8 EBEB                    	jmp .L_tc_recycle_frame_loop_0028
  6422                                  .L_tc_recycle_frame_done_0028:
  6423 00003BAA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6424 00003BAB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6425 00003BAF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6426                                  .L_or_end_0004:
  6427 00003BB2 EB0A                    	jmp .L_if_end_0007
  6428                                  .L_if_else_0007:
  6429 00003BB4 48B8-                   	mov rax, L_constants + 2
  6429 00003BB6 [0200000000000000] 
  6430                                  .L_if_end_0007:
  6431 00003BBE C9                      	leave
  6432 00003BBF C21800                  	ret AND_KILL_FRAME(1)
  6433                                  .L_lambda_simple_end_0027:	; new closure is in rax
  6434 00003BC2 50                      	push rax
  6435 00003BC3 488B4520                	mov rax, PARAM(0)	; param loop
  6436 00003BC7 8F00                    	pop qword [rax]
  6437 00003BC9 48B8-                   	mov rax, sob_void
  6437 00003BCB [0000000000000000] 
  6438                                  
  6439                                  	; preparing a non-tail-call
  6440 00003BD3 488B4510                	mov rax, ENV
  6441 00003BD7 488B00                  	mov rax, qword [rax + 8 * 0]
  6442 00003BDA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6443 00003BDE 50                      	push rax
  6444 00003BDF 6A01                    	push 1	; arg count
  6445 00003BE1 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6446 00003BE9 803805                  	cmp byte [rax], T_undefined
  6447 00003BEC 0F84C0420100            	je L_error_fvar_undefined
  6448 00003BF2 803804                  	cmp byte [rax], T_closure
  6449 00003BF5 0F853B430100            	jne L_error_non_closure
  6450 00003BFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6451 00003BFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6452 00003C01 483D[02000000]          	cmp rax, sob_boolean_false
  6453 00003C07 746B                    	je .L_if_else_0008
  6454                                  	; preparing a tail-call
  6455 00003C09 488B4510                	mov rax, ENV
  6456 00003C0D 488B00                  	mov rax, qword [rax + 8 * 0]
  6457 00003C10 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6458 00003C14 50                      	push rax
  6459 00003C15 6A01                    	push 1	; arg count
  6460 00003C17 488B4520                	mov rax, PARAM(0)	; param loop
  6461 00003C1B 488B00                  	mov rax, qword [rax]
  6462 00003C1E 803804                  	cmp byte [rax], T_closure
  6463 00003C21 0F850F430100            	jne L_error_non_closure
  6464 00003C27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6465 00003C2A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6466 00003C2D FF7500                  	push qword[rbp]
  6467 00003C30 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6468 00003C33 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6469 00003C37 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6470 00003C3B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6471 00003C3F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6472 00003C42 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6473 00003C45 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6474 00003C4A 4983C103                	add r9, 3 	 ;for getting to the params
  6475 00003C4E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6476 00003C52 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6477                                  .L_tc_recycle_frame_loop_0029:
  6478 00003C55 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6479 00003C58 7410                    	je .L_tc_recycle_frame_done_0029
  6480 00003C5A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6481 00003C5D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6482 00003C60 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6483 00003C64 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6484 00003C68 EBEB                    	jmp .L_tc_recycle_frame_loop_0029
  6485                                  .L_tc_recycle_frame_done_0029:
  6486 00003C6A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6487 00003C6B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6488 00003C6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6489 00003C72 EB0A                    	jmp .L_if_end_0008
  6490                                  .L_if_else_0008:
  6491 00003C74 48B8-                   	mov rax, L_constants + 2
  6491 00003C76 [0200000000000000] 
  6492                                  .L_if_end_0008:
  6493 00003C7E C9                      	leave
  6494 00003C7F C21800                  	ret AND_KILL_FRAME(1)
  6495                                  .L_lambda_simple_end_0026:	; new closure is in rax
  6496 00003C82 803804                  	cmp byte [rax], T_closure
  6497 00003C85 0F85AB420100            	jne L_error_non_closure
  6498 00003C8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6499 00003C8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6500 00003C91 FF7500                  	push qword[rbp]
  6501 00003C94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6502 00003C97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6503 00003C9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6504 00003C9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6505 00003CA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6506 00003CA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6507 00003CA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6508 00003CAE 4983C103                	add r9, 3 	 ;for getting to the params
  6509 00003CB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6510 00003CB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6511                                  .L_tc_recycle_frame_loop_002a:
  6512 00003CB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6513 00003CBC 7410                    	je .L_tc_recycle_frame_done_002a
  6514 00003CBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6515 00003CC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6516 00003CC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6517 00003CC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6518 00003CCC EBEB                    	jmp .L_tc_recycle_frame_loop_002a
  6519                                  .L_tc_recycle_frame_done_002a:
  6520 00003CCE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6521 00003CCF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6522 00003CD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6523 00003CD6 C9                      	leave
  6524 00003CD7 C22000                  	ret AND_KILL_FRAME(2)
  6525 00003CDA E9A4040000              	jmp .L_lambda_opt_end_0004	; new closure is in rax
  6526                                  .L_lambda_opt_arity_check_more_0004:
  6527 00003CDF 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6528 00003CE4 49B9-                   	mov r9, sob_nil
  6528 00003CE6 [0100000000000000] 
  6529 00003CEE 4889E3                  	mov rbx, rsp 
  6530 00003CF1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6531 00003CF5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6532 00003CF8 49C1E003                	shl r8, 3
  6533 00003CFC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6534 00003CFF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6535                                  .L_lambda_opt_stack_shrink_loop_0004:
  6536 00003D04 4983F801                	cmp r8, 1
  6537 00003D08 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  6538 00003D0A BF11000000              	mov rdi, 1+8+8	;for pair
  6539 00003D0F E8CB420100              	call malloc	 ;to create the pair in the stack
  6540 00003D14 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6541 00003D17 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  6542 00003D1A 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  6543 00003D1E 4C894809                 	mov qword[rax+1+8],r9
  6544 00003D22 4989C1                  	mov r9, rax	 ; for the recursion 
  6545 00003D25 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  6546 00003D28 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  6547 00003D2C EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  6548                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  6549 00003D2E 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  6550 00003D33 4883E902                	sub rcx, 2
  6551 00003D37 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  6552 00003D3B 4801CC                  	add rsp, rcx	 ;shrinking the stack
  6553 00003D3E 4889E0                  	mov rax, rsp
  6554 00003D41 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  6555 00003D44 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  6556 00003D48 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  6557 00003D4B 4883C018                	add rax, 3 * 8 	;now rax is param 0
  6558 00003D4F 49C1E003                	shl r8, 3 	; convert to byte
  6559 00003D53 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  6560 00003D56 4C8908                  	mov qword[rax], r9	;puting the list at the top
  6561 00003D59 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  6562 00003D5D 4889E3                  	mov rbx, rsp 
  6563 00003D60 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  6564 00003D63 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  6565 00003D69 49FFCA                  	dec r10 
  6566 00003D6C 49C1E203                	shl r10, 3	;to get bytes
  6567 00003D70 4883C318                	add rbx, 3*8 	;rbx is the first param
  6568 00003D74 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  6569 00003D77 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6570                                  
  6571 00003D7A 4C8900                              	mov qword[rax], r8
  6572 00003D7D 4883E808                            	sub rax, 8
  6573 00003D81 4883EB08                	sub rbx, 8
  6574 00003D85 4889E0                  	mov rax, rsp
  6575 00003D88 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6576 00003D8B 48C744241002000000      	mov qword [rsp+2*8], 2
  6577 00003D94 488B5808                	mov rbx, qword[rax + 8 *1]
  6578 00003D98 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6579 00003D9D 488B18                  	mov rbx, qword[rax]
  6580 00003DA0 48891C24                	mov qword [rsp], rbx
  6581 00003DA4 C8000000                	enter 0, 0
  6582                                  	; preparing a tail-call
  6583 00003DA8 48B8-                   	mov rax, L_constants + 1993
  6583 00003DAA [C907000000000000] 
  6584 00003DB2 50                      	push rax
  6585 00003DB3 6A01                    	push 1	; arg count
  6586 00003DB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6587 00003DBA E820420100              	call malloc
  6588 00003DBF 50                      	push rax
  6589 00003DC0 BF10000000              	mov rdi, 8 * 2	; new rib
  6590 00003DC5 E815420100              	call malloc
  6591 00003DCA 50                      	push rax
  6592 00003DCB BF10000000              	mov rdi, 8 * 2	; extended env
  6593 00003DD0 E80A420100              	call malloc
  6594 00003DD5 488B7D10                	mov rdi, ENV
  6595 00003DD9 BE00000000              	mov rsi, 0
  6596 00003DDE BA01000000              	mov rdx, 1
  6597                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  6598 00003DE3 4883FE01                	cmp rsi, 1
  6599 00003DE7 7410                    	je .L_lambda_simple_env_end_0024
  6600 00003DE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6601 00003DED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6602 00003DF1 48FFC6                  	inc rsi
  6603 00003DF4 48FFC2                  	inc rdx
  6604 00003DF7 EBEA                    	jmp .L_lambda_simple_env_loop_0024
  6605                                  .L_lambda_simple_env_end_0024:
  6606 00003DF9 5B                      	pop rbx
  6607 00003DFA BE00000000              	mov rsi, 0
  6608                                  .L_lambda_simple_params_loop_0024:	; copy params
  6609 00003DFF 4883FE02                	cmp rsi, 2
  6610 00003E03 740E                    	je .L_lambda_simple_params_end_0024
  6611 00003E05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6612 00003E0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6613 00003E0E 48FFC6                  	inc rsi
  6614 00003E11 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  6615                                  .L_lambda_simple_params_end_0024:
  6616 00003E13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6617 00003E16 4889C3                  	mov rbx, rax
  6618 00003E19 58                      	pop rax
  6619 00003E1A C60004                  	mov byte [rax], T_closure
  6620 00003E1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6621 00003E21 48C74009[2E3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  6622 00003E29 E9FD020000              	jmp .L_lambda_simple_end_0024
  6623                                  .L_lambda_simple_code_0024:	; lambda-simple body
  6624 00003E2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6625 00003E34 740B                    	je .L_lambda_simple_arity_check_ok_0024
  6626 00003E36 FF742410                	push qword [rsp + 8 * 2]
  6627 00003E3A 6A01                    	push 1
  6628 00003E3C E957410100              	jmp L_error_incorrect_arity_simple
  6629                                  .L_lambda_simple_arity_check_ok_0024:
  6630 00003E41 C8000000                	enter 0, 0
  6631 00003E45 BF08000000              	mov rdi, 8*1
  6632 00003E4A E890410100              	call malloc
  6633 00003E4F 488B5D20                	mov rbx, PARAM(0)
  6634 00003E53 488918                  	mov qword[rax], rbx
  6635 00003E56 48894520                	mov PARAM(0), rax
  6636 00003E5A 48B8-                   	mov rax, sob_void
  6636 00003E5C [0000000000000000] 
  6637                                  
  6638 00003E64 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6639 00003E69 E871410100              	call malloc
  6640 00003E6E 50                      	push rax
  6641 00003E6F BF08000000              	mov rdi, 8 * 1	; new rib
  6642 00003E74 E866410100              	call malloc
  6643 00003E79 50                      	push rax
  6644 00003E7A BF18000000              	mov rdi, 8 * 3	; extended env
  6645 00003E7F E85B410100              	call malloc
  6646 00003E84 488B7D10                	mov rdi, ENV
  6647 00003E88 BE00000000              	mov rsi, 0
  6648 00003E8D BA01000000              	mov rdx, 1
  6649                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  6650 00003E92 4883FE02                	cmp rsi, 2
  6651 00003E96 7410                    	je .L_lambda_simple_env_end_0025
  6652 00003E98 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6653 00003E9C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6654 00003EA0 48FFC6                  	inc rsi
  6655 00003EA3 48FFC2                  	inc rdx
  6656 00003EA6 EBEA                    	jmp .L_lambda_simple_env_loop_0025
  6657                                  .L_lambda_simple_env_end_0025:
  6658 00003EA8 5B                      	pop rbx
  6659 00003EA9 BE00000000              	mov rsi, 0
  6660                                  .L_lambda_simple_params_loop_0025:	; copy params
  6661 00003EAE 4883FE01                	cmp rsi, 1
  6662 00003EB2 740E                    	je .L_lambda_simple_params_end_0025
  6663 00003EB4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6664 00003EB9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6665 00003EBD 48FFC6                  	inc rsi
  6666 00003EC0 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  6667                                  .L_lambda_simple_params_end_0025:
  6668 00003EC2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6669 00003EC5 4889C3                  	mov rbx, rax
  6670 00003EC8 58                      	pop rax
  6671 00003EC9 C60004                  	mov byte [rax], T_closure
  6672 00003ECC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6673 00003ED0 48C74009[DD3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  6674 00003ED8 E98E010000              	jmp .L_lambda_simple_end_0025
  6675                                  .L_lambda_simple_code_0025:	; lambda-simple body
  6676 00003EDD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6677 00003EE3 740B                    	je .L_lambda_simple_arity_check_ok_0025
  6678 00003EE5 FF742410                	push qword [rsp + 8 * 2]
  6679 00003EE9 6A01                    	push 1
  6680 00003EEB E9A8400100              	jmp L_error_incorrect_arity_simple
  6681                                  .L_lambda_simple_arity_check_ok_0025:
  6682 00003EF0 C8000000                	enter 0, 0
  6683                                  	; preparing a non-tail-call
  6684                                  	; preparing a non-tail-call
  6685 00003EF4 488B4520                	mov rax, PARAM(0)	; param s
  6686 00003EF8 50                      	push rax
  6687 00003EF9 6A01                    	push 1	; arg count
  6688 00003EFB 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6689 00003F03 803805                  	cmp byte [rax], T_undefined
  6690 00003F06 0F84A63F0100            	je L_error_fvar_undefined
  6691 00003F0C 803804                  	cmp byte [rax], T_closure
  6692 00003F0F 0F8521400100            	jne L_error_non_closure
  6693 00003F15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6694 00003F18 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6695 00003F1B 50                      	push rax
  6696 00003F1C 6A01                    	push 1	; arg count
  6697 00003F1E 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6698 00003F26 803805                  	cmp byte [rax], T_undefined
  6699 00003F29 0F84833F0100            	je L_error_fvar_undefined
  6700 00003F2F 803804                  	cmp byte [rax], T_closure
  6701 00003F32 0F85FE3F0100            	jne L_error_non_closure
  6702 00003F38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6703 00003F3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6704 00003F3E 483D[02000000]          	cmp rax, sob_boolean_false
  6705 00003F44 0F8413010000            	je .L_if_else_0005
  6706                                  	; preparing a non-tail-call
  6707                                  	; preparing a non-tail-call
  6708 00003F4A 488B4520                	mov rax, PARAM(0)	; param s
  6709 00003F4E 50                      	push rax
  6710 00003F4F 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  6711 00003F57 803805                  	cmp byte [rax], T_undefined
  6712 00003F5A 0F84523F0100            	je L_error_fvar_undefined
  6713 00003F60 50                      	push rax
  6714 00003F61 6A02                    	push 2	; arg count
  6715 00003F63 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6716 00003F6B 803805                  	cmp byte [rax], T_undefined
  6717 00003F6E 0F843E3F0100            	je L_error_fvar_undefined
  6718 00003F74 803804                  	cmp byte [rax], T_closure
  6719 00003F77 0F85B93F0100            	jne L_error_non_closure
  6720 00003F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6721 00003F80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6722 00003F83 50                      	push rax
  6723 00003F84 488B4510                	mov rax, ENV
  6724 00003F88 488B4008                	mov rax, qword [rax + 8 * 1]
  6725 00003F8C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6726 00003F8F 50                      	push rax
  6727 00003F90 6A02                    	push 2	; arg count
  6728 00003F92 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  6729 00003F9A 803805                  	cmp byte [rax], T_undefined
  6730 00003F9D 0F840F3F0100            	je L_error_fvar_undefined
  6731 00003FA3 803804                  	cmp byte [rax], T_closure
  6732 00003FA6 0F858A3F0100            	jne L_error_non_closure
  6733 00003FAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6734 00003FAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6735 00003FB2 483D[02000000]          	cmp rax, sob_boolean_false
  6736 00003FB8 0F859D000000            	jne .L_or_end_0003
  6737                                  	; preparing a tail-call
  6738                                  	; preparing a non-tail-call
  6739 00003FBE 488B4520                	mov rax, PARAM(0)	; param s
  6740 00003FC2 50                      	push rax
  6741 00003FC3 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  6742 00003FCB 803805                  	cmp byte [rax], T_undefined
  6743 00003FCE 0F84DE3E0100            	je L_error_fvar_undefined
  6744 00003FD4 50                      	push rax
  6745 00003FD5 6A02                    	push 2	; arg count
  6746 00003FD7 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  6747 00003FDF 803805                  	cmp byte [rax], T_undefined
  6748 00003FE2 0F84CA3E0100            	je L_error_fvar_undefined
  6749 00003FE8 803804                  	cmp byte [rax], T_closure
  6750 00003FEB 0F85453F0100            	jne L_error_non_closure
  6751 00003FF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6752 00003FF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6753 00003FF7 50                      	push rax
  6754 00003FF8 6A01                    	push 1	; arg count
  6755 00003FFA 488B4510                	mov rax, ENV
  6756 00003FFE 488B00                  	mov rax, qword [rax + 8 * 0]
  6757 00004001 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6758 00004004 488B00                  	mov rax, qword [rax]
  6759 00004007 803804                  	cmp byte [rax], T_closure
  6760 0000400A 0F85263F0100            	jne L_error_non_closure
  6761 00004010 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6762 00004013 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6763 00004016 FF7500                  	push qword[rbp]
  6764 00004019 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6765 0000401C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6766 00004020 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6767 00004024 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6768 00004028 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6769 0000402B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6770 0000402E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6771 00004033 4983C103                	add r9, 3 	 ;for getting to the params
  6772 00004037 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6773 0000403B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6774                                  .L_tc_recycle_frame_loop_0025:
  6775 0000403E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6776 00004041 7410                    	je .L_tc_recycle_frame_done_0025
  6777 00004043 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6778 00004046 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6779 00004049 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6780 0000404D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6781 00004051 EBEB                    	jmp .L_tc_recycle_frame_loop_0025
  6782                                  .L_tc_recycle_frame_done_0025:
  6783 00004053 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6784 00004054 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6785 00004058 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6786                                  .L_or_end_0003:
  6787 0000405B EB0A                    	jmp .L_if_end_0005
  6788                                  .L_if_else_0005:
  6789 0000405D 48B8-                   	mov rax, L_constants + 2
  6789 0000405F [0200000000000000] 
  6790                                  .L_if_end_0005:
  6791 00004067 C9                      	leave
  6792 00004068 C21800                  	ret AND_KILL_FRAME(1)
  6793                                  .L_lambda_simple_end_0025:	; new closure is in rax
  6794 0000406B 50                      	push rax
  6795 0000406C 488B4520                	mov rax, PARAM(0)	; param loop
  6796 00004070 8F00                    	pop qword [rax]
  6797 00004072 48B8-                   	mov rax, sob_void
  6797 00004074 [0000000000000000] 
  6798                                  
  6799                                  	; preparing a non-tail-call
  6800 0000407C 488B4510                	mov rax, ENV
  6801 00004080 488B00                  	mov rax, qword [rax + 8 * 0]
  6802 00004083 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6803 00004087 50                      	push rax
  6804 00004088 6A01                    	push 1	; arg count
  6805 0000408A 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  6806 00004092 803805                  	cmp byte [rax], T_undefined
  6807 00004095 0F84173E0100            	je L_error_fvar_undefined
  6808 0000409B 803804                  	cmp byte [rax], T_closure
  6809 0000409E 0F85923E0100            	jne L_error_non_closure
  6810 000040A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6811 000040A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6812 000040AA 483D[02000000]          	cmp rax, sob_boolean_false
  6813 000040B0 746B                    	je .L_if_else_0006
  6814                                  	; preparing a tail-call
  6815 000040B2 488B4510                	mov rax, ENV
  6816 000040B6 488B00                  	mov rax, qword [rax + 8 * 0]
  6817 000040B9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6818 000040BD 50                      	push rax
  6819 000040BE 6A01                    	push 1	; arg count
  6820 000040C0 488B4520                	mov rax, PARAM(0)	; param loop
  6821 000040C4 488B00                  	mov rax, qword [rax]
  6822 000040C7 803804                  	cmp byte [rax], T_closure
  6823 000040CA 0F85663E0100            	jne L_error_non_closure
  6824 000040D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6825 000040D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6826 000040D6 FF7500                  	push qword[rbp]
  6827 000040D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6828 000040DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6829 000040E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6830 000040E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6831 000040E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6832 000040EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6833 000040EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6834 000040F3 4983C103                	add r9, 3 	 ;for getting to the params
  6835 000040F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6836 000040FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6837                                  .L_tc_recycle_frame_loop_0026:
  6838 000040FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6839 00004101 7410                    	je .L_tc_recycle_frame_done_0026
  6840 00004103 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6841 00004106 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6842 00004109 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6843 0000410D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6844 00004111 EBEB                    	jmp .L_tc_recycle_frame_loop_0026
  6845                                  .L_tc_recycle_frame_done_0026:
  6846 00004113 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6847 00004114 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6848 00004118 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6849 0000411B EB0A                    	jmp .L_if_end_0006
  6850                                  .L_if_else_0006:
  6851 0000411D 48B8-                   	mov rax, L_constants + 2
  6851 0000411F [0200000000000000] 
  6852                                  .L_if_end_0006:
  6853 00004127 C9                      	leave
  6854 00004128 C21800                  	ret AND_KILL_FRAME(1)
  6855                                  .L_lambda_simple_end_0024:	; new closure is in rax
  6856 0000412B 803804                  	cmp byte [rax], T_closure
  6857 0000412E 0F85023E0100            	jne L_error_non_closure
  6858 00004134 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6859 00004137 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6860 0000413A FF7500                  	push qword[rbp]
  6861 0000413D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6862 00004140 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6863 00004144 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6864 00004148 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6865 0000414C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6866 0000414F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6867 00004152 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6868 00004157 4983C103                	add r9, 3 	 ;for getting to the params
  6869 0000415B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6870 0000415F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6871                                  .L_tc_recycle_frame_loop_0027:
  6872 00004162 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6873 00004165 7410                    	je .L_tc_recycle_frame_done_0027
  6874 00004167 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6875 0000416A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6876 0000416D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6877 00004171 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6878 00004175 EBEB                    	jmp .L_tc_recycle_frame_loop_0027
  6879                                  .L_tc_recycle_frame_done_0027:
  6880 00004177 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6881 00004178 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6882 0000417C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6883 0000417F C9                      	leave
  6884 00004180 C22000                  	ret AND_KILL_FRAME(2)
  6885                                  .L_lambda_opt_end_0004:	; new closure is in rax
  6886 00004183 48890425[13150000]      	mov qword [free_var_110], rax
  6887 0000418B 48B8-                   	mov rax, sob_void
  6887 0000418D [0000000000000000] 
  6888                                  
  6889 00004195 4889C7                  	mov rdi, rax
  6890 00004198 E897400100              	call print_sexpr_if_not_void
  6891 0000419D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6892 000041A2 E8383E0100              	call malloc
  6893 000041A7 50                      	push rax
  6894 000041A8 BF00000000              	mov rdi, 8 * 0	; new rib
  6895 000041AD E82D3E0100              	call malloc
  6896 000041B2 50                      	push rax
  6897 000041B3 BF08000000              	mov rdi, 8 * 1	; extended env
  6898 000041B8 E8223E0100              	call malloc
  6899 000041BD 488B7D10                	mov rdi, ENV
  6900 000041C1 BE00000000              	mov rsi, 0
  6901 000041C6 BA01000000              	mov rdx, 1
  6902                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  6903 000041CB 4883FE00                	cmp rsi, 0
  6904 000041CF 7410                    	je .L_lambda_opt_env_end_0005
  6905 000041D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6906 000041D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6907 000041D9 48FFC6                  	inc rsi
  6908 000041DC 48FFC2                  	inc rdx
  6909 000041DF EBEA                    	jmp .L_lambda_opt_env_loop_0005
  6910                                  .L_lambda_opt_env_end_0005:
  6911 000041E1 5B                      	pop rbx
  6912 000041E2 BE00000000              	mov rsi, 0
  6913                                  .L_lambda_opt_params_loop_0005:	; copy params
  6914 000041E7 4883FE00                	cmp rsi, 0
  6915 000041EB 740E                    	je .L_lambda_opt_params_end_0005
  6916 000041ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6917 000041F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6918 000041F6 48FFC6                  	inc rsi
  6919 000041F9 EBEC                    	jmp .L_lambda_opt_params_loop_0005
  6920                                  .L_lambda_opt_params_end_0005:
  6921 000041FB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6922 000041FE 4889C3                  	mov rbx, rax
  6923 00004201 58                      	pop rax
  6924 00004202 C60004                  	mov byte [rax], T_closure
  6925 00004205 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6926 00004209 48C74009[16420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  6927 00004211 E94F090000              	jmp .L_lambda_opt_end_0005
  6928                                  .L_lambda_opt_code_0005:	; lambda-opt body
  6929 00004216 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6930 0000421C 7411                    	je .L_lambda_opt_arity_check_exact_0005
  6931 0000421E 0F8F63040000            	jg .L_lambda_opt_arity_check_more_0005
  6932 00004224 FF742410                	push qword [rsp + 8 * 2]
  6933 00004228 6A01                    	push 1
  6934 0000422A E97D3D0100              	jmp L_error_incorrect_arity_opt
  6935                                  .L_lambda_opt_arity_check_exact_0005:
  6936 0000422F 4883EC08                	sub rsp, 8
  6937 00004233 488B442408              	mov rax, qword[rsp + 8 *1]
  6938 00004238 48890424                	mov qword[rsp], rax  
  6939 0000423C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6940 00004241 4889442408              	mov qword[rsp + 8 * 1], rax
  6941 00004246 B802000000              	mov rax, 2
  6942 0000424B 4889442410              	mov qword[rsp + 8 *2], rax
  6943 00004250 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6944 00004255 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6945 0000425A 48B8-                   	mov rax, sob_nil
  6945 0000425C [0100000000000000] 
  6946 00004264 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6947 00004269 C8000000                	enter 0, 0
  6948                                  	; preparing a tail-call
  6949 0000426D 48B8-                   	mov rax, L_constants + 1993
  6949 0000426F [C907000000000000] 
  6950 00004277 50                      	push rax
  6951 00004278 6A01                    	push 1	; arg count
  6952 0000427A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6953 0000427F E85B3D0100              	call malloc
  6954 00004284 50                      	push rax
  6955 00004285 BF10000000              	mov rdi, 8 * 2	; new rib
  6956 0000428A E8503D0100              	call malloc
  6957 0000428F 50                      	push rax
  6958 00004290 BF10000000              	mov rdi, 8 * 2	; extended env
  6959 00004295 E8453D0100              	call malloc
  6960 0000429A 488B7D10                	mov rdi, ENV
  6961 0000429E BE00000000              	mov rsi, 0
  6962 000042A3 BA01000000              	mov rdx, 1
  6963                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  6964 000042A8 4883FE01                	cmp rsi, 1
  6965 000042AC 7410                    	je .L_lambda_simple_env_end_002a
  6966 000042AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6967 000042B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6968 000042B6 48FFC6                  	inc rsi
  6969 000042B9 48FFC2                  	inc rdx
  6970 000042BC EBEA                    	jmp .L_lambda_simple_env_loop_002a
  6971                                  .L_lambda_simple_env_end_002a:
  6972 000042BE 5B                      	pop rbx
  6973 000042BF BE00000000              	mov rsi, 0
  6974                                  .L_lambda_simple_params_loop_002a:	; copy params
  6975 000042C4 4883FE02                	cmp rsi, 2
  6976 000042C8 740E                    	je .L_lambda_simple_params_end_002a
  6977 000042CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6978 000042CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6979 000042D3 48FFC6                  	inc rsi
  6980 000042D6 EBEC                    	jmp .L_lambda_simple_params_loop_002a
  6981                                  .L_lambda_simple_params_end_002a:
  6982 000042D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6983 000042DB 4889C3                  	mov rbx, rax
  6984 000042DE 58                      	pop rax
  6985 000042DF C60004                  	mov byte [rax], T_closure
  6986 000042E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6987 000042E6 48C74009[F3420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  6988 000042EE E937030000              	jmp .L_lambda_simple_end_002a
  6989                                  .L_lambda_simple_code_002a:	; lambda-simple body
  6990 000042F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6991 000042F9 740B                    	je .L_lambda_simple_arity_check_ok_002a
  6992 000042FB FF742410                	push qword [rsp + 8 * 2]
  6993 000042FF 6A01                    	push 1
  6994 00004301 E9923C0100              	jmp L_error_incorrect_arity_simple
  6995                                  .L_lambda_simple_arity_check_ok_002a:
  6996 00004306 C8000000                	enter 0, 0
  6997 0000430A BF08000000              	mov rdi, 8*1
  6998 0000430F E8CB3C0100              	call malloc
  6999 00004314 488B5D20                	mov rbx, PARAM(0)
  7000 00004318 488918                  	mov qword[rax], rbx
  7001 0000431B 48894520                	mov PARAM(0), rax
  7002 0000431F 48B8-                   	mov rax, sob_void
  7002 00004321 [0000000000000000] 
  7003                                  
  7004 00004329 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7005 0000432E E8AC3C0100              	call malloc
  7006 00004333 50                      	push rax
  7007 00004334 BF08000000              	mov rdi, 8 * 1	; new rib
  7008 00004339 E8A13C0100              	call malloc
  7009 0000433E 50                      	push rax
  7010 0000433F BF18000000              	mov rdi, 8 * 3	; extended env
  7011 00004344 E8963C0100              	call malloc
  7012 00004349 488B7D10                	mov rdi, ENV
  7013 0000434D BE00000000              	mov rsi, 0
  7014 00004352 BA01000000              	mov rdx, 1
  7015                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  7016 00004357 4883FE02                	cmp rsi, 2
  7017 0000435B 7410                    	je .L_lambda_simple_env_end_002b
  7018 0000435D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7019 00004361 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7020 00004365 48FFC6                  	inc rsi
  7021 00004368 48FFC2                  	inc rdx
  7022 0000436B EBEA                    	jmp .L_lambda_simple_env_loop_002b
  7023                                  .L_lambda_simple_env_end_002b:
  7024 0000436D 5B                      	pop rbx
  7025 0000436E BE00000000              	mov rsi, 0
  7026                                  .L_lambda_simple_params_loop_002b:	; copy params
  7027 00004373 4883FE01                	cmp rsi, 1
  7028 00004377 740E                    	je .L_lambda_simple_params_end_002b
  7029 00004379 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7030 0000437E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7031 00004382 48FFC6                  	inc rsi
  7032 00004385 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  7033                                  .L_lambda_simple_params_end_002b:
  7034 00004387 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7035 0000438A 4889C3                  	mov rbx, rax
  7036 0000438D 58                      	pop rax
  7037 0000438E C60004                  	mov byte [rax], T_closure
  7038 00004391 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7039 00004395 48C74009[A2430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  7040 0000439D E98E010000              	jmp .L_lambda_simple_end_002b
  7041                                  .L_lambda_simple_code_002b:	; lambda-simple body
  7042 000043A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7043 000043A8 740B                    	je .L_lambda_simple_arity_check_ok_002b
  7044 000043AA FF742410                	push qword [rsp + 8 * 2]
  7045 000043AE 6A01                    	push 1
  7046 000043B0 E9E33B0100              	jmp L_error_incorrect_arity_simple
  7047                                  .L_lambda_simple_arity_check_ok_002b:
  7048 000043B5 C8000000                	enter 0, 0
  7049                                  	; preparing a non-tail-call
  7050                                  	; preparing a non-tail-call
  7051 000043B9 488B4520                	mov rax, PARAM(0)	; param s
  7052 000043BD 50                      	push rax
  7053 000043BE 6A01                    	push 1	; arg count
  7054 000043C0 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7055 000043C8 803805                  	cmp byte [rax], T_undefined
  7056 000043CB 0F84E13A0100            	je L_error_fvar_undefined
  7057 000043D1 803804                  	cmp byte [rax], T_closure
  7058 000043D4 0F855C3B0100            	jne L_error_non_closure
  7059 000043DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7060 000043DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7061 000043E0 50                      	push rax
  7062 000043E1 6A01                    	push 1	; arg count
  7063 000043E3 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7064 000043EB 803805                  	cmp byte [rax], T_undefined
  7065 000043EE 0F84BE3A0100            	je L_error_fvar_undefined
  7066 000043F4 803804                  	cmp byte [rax], T_closure
  7067 000043F7 0F85393B0100            	jne L_error_non_closure
  7068 000043FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7069 00004400 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7070 00004403 483D[02000000]          	cmp rax, sob_boolean_false
  7071 00004409 0F851D010000            	jne .L_or_end_0007
  7072                                  	; preparing a non-tail-call
  7073                                  	; preparing a non-tail-call
  7074 0000440F 488B4520                	mov rax, PARAM(0)	; param s
  7075 00004413 50                      	push rax
  7076 00004414 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7077 0000441C 803805                  	cmp byte [rax], T_undefined
  7078 0000441F 0F848D3A0100            	je L_error_fvar_undefined
  7079 00004425 50                      	push rax
  7080 00004426 6A02                    	push 2	; arg count
  7081 00004428 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7082 00004430 803805                  	cmp byte [rax], T_undefined
  7083 00004433 0F84793A0100            	je L_error_fvar_undefined
  7084 00004439 803804                  	cmp byte [rax], T_closure
  7085 0000443C 0F85F43A0100            	jne L_error_non_closure
  7086 00004442 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7087 00004445 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7088 00004448 50                      	push rax
  7089 00004449 488B4510                	mov rax, ENV
  7090 0000444D 488B4008                	mov rax, qword [rax + 8 * 1]
  7091 00004451 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7092 00004454 50                      	push rax
  7093 00004455 6A02                    	push 2	; arg count
  7094 00004457 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  7095 0000445F 803805                  	cmp byte [rax], T_undefined
  7096 00004462 0F844A3A0100            	je L_error_fvar_undefined
  7097 00004468 803804                  	cmp byte [rax], T_closure
  7098 0000446B 0F85C53A0100            	jne L_error_non_closure
  7099 00004471 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7100 00004474 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7101 00004477 483D[02000000]          	cmp rax, sob_boolean_false
  7102 0000447D 0F849F000000            	je .L_if_else_000b
  7103                                  	; preparing a tail-call
  7104                                  	; preparing a non-tail-call
  7105 00004483 488B4520                	mov rax, PARAM(0)	; param s
  7106 00004487 50                      	push rax
  7107 00004488 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7108 00004490 803805                  	cmp byte [rax], T_undefined
  7109 00004493 0F84193A0100            	je L_error_fvar_undefined
  7110 00004499 50                      	push rax
  7111 0000449A 6A02                    	push 2	; arg count
  7112 0000449C 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7113 000044A4 803805                  	cmp byte [rax], T_undefined
  7114 000044A7 0F84053A0100            	je L_error_fvar_undefined
  7115 000044AD 803804                  	cmp byte [rax], T_closure
  7116 000044B0 0F85803A0100            	jne L_error_non_closure
  7117 000044B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7118 000044B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7119 000044BC 50                      	push rax
  7120 000044BD 6A01                    	push 1	; arg count
  7121 000044BF 488B4510                	mov rax, ENV
  7122 000044C3 488B00                  	mov rax, qword [rax + 8 * 0]
  7123 000044C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7124 000044C9 488B00                  	mov rax, qword [rax]
  7125 000044CC 803804                  	cmp byte [rax], T_closure
  7126 000044CF 0F85613A0100            	jne L_error_non_closure
  7127 000044D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7128 000044D8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7129 000044DB FF7500                  	push qword[rbp]
  7130 000044DE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7131 000044E1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7132 000044E5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7133 000044E9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7134 000044ED 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7135 000044F0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7136 000044F3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7137 000044F8 4983C103                	add r9, 3 	 ;for getting to the params
  7138 000044FC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7139 00004500 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7140                                  .L_tc_recycle_frame_loop_002e:
  7141 00004503 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7142 00004506 7410                    	je .L_tc_recycle_frame_done_002e
  7143 00004508 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7144 0000450B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7145 0000450E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7146 00004512 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7147 00004516 EBEB                    	jmp .L_tc_recycle_frame_loop_002e
  7148                                  .L_tc_recycle_frame_done_002e:
  7149 00004518 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7150 00004519 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7151 0000451D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7152 00004520 EB0A                    	jmp .L_if_end_000b
  7153                                  .L_if_else_000b:
  7154 00004522 48B8-                   	mov rax, L_constants + 2
  7154 00004524 [0200000000000000] 
  7155                                  .L_if_end_000b:
  7156                                  .L_or_end_0007:
  7157 0000452C C9                      	leave
  7158 0000452D C21800                  	ret AND_KILL_FRAME(1)
  7159                                  .L_lambda_simple_end_002b:	; new closure is in rax
  7160 00004530 50                      	push rax
  7161 00004531 488B4520                	mov rax, PARAM(0)	; param loop
  7162 00004535 8F00                    	pop qword [rax]
  7163 00004537 48B8-                   	mov rax, sob_void
  7163 00004539 [0000000000000000] 
  7164                                  
  7165                                  	; preparing a non-tail-call
  7166 00004541 488B4510                	mov rax, ENV
  7167 00004545 488B00                  	mov rax, qword [rax + 8 * 0]
  7168 00004548 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7169 0000454C 50                      	push rax
  7170 0000454D 6A01                    	push 1	; arg count
  7171 0000454F 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7172 00004557 803805                  	cmp byte [rax], T_undefined
  7173 0000455A 0F8452390100            	je L_error_fvar_undefined
  7174 00004560 803804                  	cmp byte [rax], T_closure
  7175 00004563 0F85CD390100            	jne L_error_non_closure
  7176 00004569 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7177 0000456C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7178 0000456F 483D[02000000]          	cmp rax, sob_boolean_false
  7179 00004575 0F85AB000000            	jne .L_or_end_0008
  7180                                  	; preparing a non-tail-call
  7181 0000457B 488B4510                	mov rax, ENV
  7182 0000457F 488B00                  	mov rax, qword [rax + 8 * 0]
  7183 00004582 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7184 00004586 50                      	push rax
  7185 00004587 6A01                    	push 1	; arg count
  7186 00004589 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  7187 00004591 803805                  	cmp byte [rax], T_undefined
  7188 00004594 0F8418390100            	je L_error_fvar_undefined
  7189 0000459A 803804                  	cmp byte [rax], T_closure
  7190 0000459D 0F8593390100            	jne L_error_non_closure
  7191 000045A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7192 000045A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7193 000045A9 483D[02000000]          	cmp rax, sob_boolean_false
  7194 000045AF 746B                    	je .L_if_else_000c
  7195                                  	; preparing a tail-call
  7196 000045B1 488B4510                	mov rax, ENV
  7197 000045B5 488B00                  	mov rax, qword [rax + 8 * 0]
  7198 000045B8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7199 000045BC 50                      	push rax
  7200 000045BD 6A01                    	push 1	; arg count
  7201 000045BF 488B4520                	mov rax, PARAM(0)	; param loop
  7202 000045C3 488B00                  	mov rax, qword [rax]
  7203 000045C6 803804                  	cmp byte [rax], T_closure
  7204 000045C9 0F8567390100            	jne L_error_non_closure
  7205 000045CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7206 000045D2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7207 000045D5 FF7500                  	push qword[rbp]
  7208 000045D8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7209 000045DB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7210 000045DF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7211 000045E3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7212 000045E7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7213 000045EA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7214 000045ED 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7215 000045F2 4983C103                	add r9, 3 	 ;for getting to the params
  7216 000045F6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7217 000045FA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7218                                  .L_tc_recycle_frame_loop_002f:
  7219 000045FD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7220 00004600 7410                    	je .L_tc_recycle_frame_done_002f
  7221 00004602 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7222 00004605 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7223 00004608 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7224 0000460C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7225 00004610 EBEB                    	jmp .L_tc_recycle_frame_loop_002f
  7226                                  .L_tc_recycle_frame_done_002f:
  7227 00004612 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7228 00004613 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7229 00004617 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7230 0000461A EB0A                    	jmp .L_if_end_000c
  7231                                  .L_if_else_000c:
  7232 0000461C 48B8-                   	mov rax, L_constants + 2
  7232 0000461E [0200000000000000] 
  7233                                  .L_if_end_000c:
  7234                                  .L_or_end_0008:
  7235 00004626 C9                      	leave
  7236 00004627 C21800                  	ret AND_KILL_FRAME(1)
  7237                                  .L_lambda_simple_end_002a:	; new closure is in rax
  7238 0000462A 803804                  	cmp byte [rax], T_closure
  7239 0000462D 0F8503390100            	jne L_error_non_closure
  7240 00004633 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7241 00004636 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7242 00004639 FF7500                  	push qword[rbp]
  7243 0000463C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7244 0000463F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7245 00004643 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7246 00004647 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7247 0000464B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7248 0000464E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7249 00004651 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7250 00004656 4983C103                	add r9, 3 	 ;for getting to the params
  7251 0000465A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7252 0000465E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7253                                  .L_tc_recycle_frame_loop_0030:
  7254 00004661 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7255 00004664 7410                    	je .L_tc_recycle_frame_done_0030
  7256 00004666 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7257 00004669 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7258 0000466C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7259 00004670 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7260 00004674 EBEB                    	jmp .L_tc_recycle_frame_loop_0030
  7261                                  .L_tc_recycle_frame_done_0030:
  7262 00004676 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7263 00004677 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7264 0000467B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7265 0000467E C9                      	leave
  7266 0000467F C22000                  	ret AND_KILL_FRAME(2)
  7267 00004682 E9DE040000              	jmp .L_lambda_opt_end_0005	; new closure is in rax
  7268                                  .L_lambda_opt_arity_check_more_0005:
  7269 00004687 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  7270 0000468C 49B9-                   	mov r9, sob_nil
  7270 0000468E [0100000000000000] 
  7271 00004696 4889E3                  	mov rbx, rsp 
  7272 00004699 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  7273 0000469D 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  7274 000046A0 49C1E003                	shl r8, 3
  7275 000046A4 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  7276 000046A7 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  7277                                  .L_lambda_opt_stack_shrink_loop_0005:
  7278 000046AC 4983F801                	cmp r8, 1
  7279 000046B0 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  7280 000046B2 BF11000000              	mov rdi, 1+8+8	;for pair
  7281 000046B7 E823390100              	call malloc	 ;to create the pair in the stack
  7282 000046BC C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  7283 000046BF 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  7284 000046C2 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  7285 000046C6 4C894809                 	mov qword[rax+1+8],r9
  7286 000046CA 4989C1                  	mov r9, rax	 ; for the recursion 
  7287 000046CD 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  7288 000046D0 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  7289 000046D4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  7290                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  7291 000046D6 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  7292 000046DB 4883E902                	sub rcx, 2
  7293 000046DF 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  7294 000046E3 4801CC                  	add rsp, rcx	 ;shrinking the stack
  7295 000046E6 4889E0                  	mov rax, rsp
  7296 000046E9 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  7297 000046EC 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  7298 000046F0 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  7299 000046F3 4883C018                	add rax, 3 * 8 	;now rax is param 0
  7300 000046F7 49C1E003                	shl r8, 3 	; convert to byte
  7301 000046FB 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  7302 000046FE 4C8908                  	mov qword[rax], r9	;puting the list at the top
  7303 00004701 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  7304 00004705 4889E3                  	mov rbx, rsp 
  7305 00004708 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  7306 0000470B 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  7307 00004711 49FFCA                  	dec r10 
  7308 00004714 49C1E203                	shl r10, 3	;to get bytes
  7309 00004718 4883C318                	add rbx, 3*8 	;rbx is the first param
  7310 0000471C 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  7311 0000471F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  7312                                  
  7313 00004722 4C8900                              	mov qword[rax], r8
  7314 00004725 4883E808                            	sub rax, 8
  7315 00004729 4883EB08                	sub rbx, 8
  7316 0000472D 4889E0                  	mov rax, rsp
  7317 00004730 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  7318 00004733 48C744241002000000      	mov qword [rsp+2*8], 2
  7319 0000473C 488B5808                	mov rbx, qword[rax + 8 *1]
  7320 00004740 48895C2408              	mov qword [rsp + 1*8] ,rbx
  7321 00004745 488B18                  	mov rbx, qword[rax]
  7322 00004748 48891C24                	mov qword [rsp], rbx
  7323 0000474C C8000000                	enter 0, 0
  7324                                  	; preparing a tail-call
  7325 00004750 48B8-                   	mov rax, L_constants + 1993
  7325 00004752 [C907000000000000] 
  7326 0000475A 50                      	push rax
  7327 0000475B 6A01                    	push 1	; arg count
  7328 0000475D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7329 00004762 E878380100              	call malloc
  7330 00004767 50                      	push rax
  7331 00004768 BF10000000              	mov rdi, 8 * 2	; new rib
  7332 0000476D E86D380100              	call malloc
  7333 00004772 50                      	push rax
  7334 00004773 BF10000000              	mov rdi, 8 * 2	; extended env
  7335 00004778 E862380100              	call malloc
  7336 0000477D 488B7D10                	mov rdi, ENV
  7337 00004781 BE00000000              	mov rsi, 0
  7338 00004786 BA01000000              	mov rdx, 1
  7339                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  7340 0000478B 4883FE01                	cmp rsi, 1
  7341 0000478F 7410                    	je .L_lambda_simple_env_end_0028
  7342 00004791 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7343 00004795 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7344 00004799 48FFC6                  	inc rsi
  7345 0000479C 48FFC2                  	inc rdx
  7346 0000479F EBEA                    	jmp .L_lambda_simple_env_loop_0028
  7347                                  .L_lambda_simple_env_end_0028:
  7348 000047A1 5B                      	pop rbx
  7349 000047A2 BE00000000              	mov rsi, 0
  7350                                  .L_lambda_simple_params_loop_0028:	; copy params
  7351 000047A7 4883FE02                	cmp rsi, 2
  7352 000047AB 740E                    	je .L_lambda_simple_params_end_0028
  7353 000047AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7354 000047B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7355 000047B6 48FFC6                  	inc rsi
  7356 000047B9 EBEC                    	jmp .L_lambda_simple_params_loop_0028
  7357                                  .L_lambda_simple_params_end_0028:
  7358 000047BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7359 000047BE 4889C3                  	mov rbx, rax
  7360 000047C1 58                      	pop rax
  7361 000047C2 C60004                  	mov byte [rax], T_closure
  7362 000047C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7363 000047C9 48C74009[D6470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  7364 000047D1 E937030000              	jmp .L_lambda_simple_end_0028
  7365                                  .L_lambda_simple_code_0028:	; lambda-simple body
  7366 000047D6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7367 000047DC 740B                    	je .L_lambda_simple_arity_check_ok_0028
  7368 000047DE FF742410                	push qword [rsp + 8 * 2]
  7369 000047E2 6A01                    	push 1
  7370 000047E4 E9AF370100              	jmp L_error_incorrect_arity_simple
  7371                                  .L_lambda_simple_arity_check_ok_0028:
  7372 000047E9 C8000000                	enter 0, 0
  7373 000047ED BF08000000              	mov rdi, 8*1
  7374 000047F2 E8E8370100              	call malloc
  7375 000047F7 488B5D20                	mov rbx, PARAM(0)
  7376 000047FB 488918                  	mov qword[rax], rbx
  7377 000047FE 48894520                	mov PARAM(0), rax
  7378 00004802 48B8-                   	mov rax, sob_void
  7378 00004804 [0000000000000000] 
  7379                                  
  7380 0000480C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7381 00004811 E8C9370100              	call malloc
  7382 00004816 50                      	push rax
  7383 00004817 BF08000000              	mov rdi, 8 * 1	; new rib
  7384 0000481C E8BE370100              	call malloc
  7385 00004821 50                      	push rax
  7386 00004822 BF18000000              	mov rdi, 8 * 3	; extended env
  7387 00004827 E8B3370100              	call malloc
  7388 0000482C 488B7D10                	mov rdi, ENV
  7389 00004830 BE00000000              	mov rsi, 0
  7390 00004835 BA01000000              	mov rdx, 1
  7391                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  7392 0000483A 4883FE02                	cmp rsi, 2
  7393 0000483E 7410                    	je .L_lambda_simple_env_end_0029
  7394 00004840 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7395 00004844 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7396 00004848 48FFC6                  	inc rsi
  7397 0000484B 48FFC2                  	inc rdx
  7398 0000484E EBEA                    	jmp .L_lambda_simple_env_loop_0029
  7399                                  .L_lambda_simple_env_end_0029:
  7400 00004850 5B                      	pop rbx
  7401 00004851 BE00000000              	mov rsi, 0
  7402                                  .L_lambda_simple_params_loop_0029:	; copy params
  7403 00004856 4883FE01                	cmp rsi, 1
  7404 0000485A 740E                    	je .L_lambda_simple_params_end_0029
  7405 0000485C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7406 00004861 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7407 00004865 48FFC6                  	inc rsi
  7408 00004868 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  7409                                  .L_lambda_simple_params_end_0029:
  7410 0000486A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7411 0000486D 4889C3                  	mov rbx, rax
  7412 00004870 58                      	pop rax
  7413 00004871 C60004                  	mov byte [rax], T_closure
  7414 00004874 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7415 00004878 48C74009[85480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  7416 00004880 E98E010000              	jmp .L_lambda_simple_end_0029
  7417                                  .L_lambda_simple_code_0029:	; lambda-simple body
  7418 00004885 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7419 0000488B 740B                    	je .L_lambda_simple_arity_check_ok_0029
  7420 0000488D FF742410                	push qword [rsp + 8 * 2]
  7421 00004891 6A01                    	push 1
  7422 00004893 E900370100              	jmp L_error_incorrect_arity_simple
  7423                                  .L_lambda_simple_arity_check_ok_0029:
  7424 00004898 C8000000                	enter 0, 0
  7425                                  	; preparing a non-tail-call
  7426                                  	; preparing a non-tail-call
  7427 0000489C 488B4520                	mov rax, PARAM(0)	; param s
  7428 000048A0 50                      	push rax
  7429 000048A1 6A01                    	push 1	; arg count
  7430 000048A3 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7431 000048AB 803805                  	cmp byte [rax], T_undefined
  7432 000048AE 0F84FE350100            	je L_error_fvar_undefined
  7433 000048B4 803804                  	cmp byte [rax], T_closure
  7434 000048B7 0F8579360100            	jne L_error_non_closure
  7435 000048BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7436 000048C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7437 000048C3 50                      	push rax
  7438 000048C4 6A01                    	push 1	; arg count
  7439 000048C6 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7440 000048CE 803805                  	cmp byte [rax], T_undefined
  7441 000048D1 0F84DB350100            	je L_error_fvar_undefined
  7442 000048D7 803804                  	cmp byte [rax], T_closure
  7443 000048DA 0F8556360100            	jne L_error_non_closure
  7444 000048E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7445 000048E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7446 000048E6 483D[02000000]          	cmp rax, sob_boolean_false
  7447 000048EC 0F851D010000            	jne .L_or_end_0005
  7448                                  	; preparing a non-tail-call
  7449                                  	; preparing a non-tail-call
  7450 000048F2 488B4520                	mov rax, PARAM(0)	; param s
  7451 000048F6 50                      	push rax
  7452 000048F7 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7453 000048FF 803805                  	cmp byte [rax], T_undefined
  7454 00004902 0F84AA350100            	je L_error_fvar_undefined
  7455 00004908 50                      	push rax
  7456 00004909 6A02                    	push 2	; arg count
  7457 0000490B 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7458 00004913 803805                  	cmp byte [rax], T_undefined
  7459 00004916 0F8496350100            	je L_error_fvar_undefined
  7460 0000491C 803804                  	cmp byte [rax], T_closure
  7461 0000491F 0F8511360100            	jne L_error_non_closure
  7462 00004925 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7463 00004928 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7464 0000492B 50                      	push rax
  7465 0000492C 488B4510                	mov rax, ENV
  7466 00004930 488B4008                	mov rax, qword [rax + 8 * 1]
  7467 00004934 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7468 00004937 50                      	push rax
  7469 00004938 6A02                    	push 2	; arg count
  7470 0000493A 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  7471 00004942 803805                  	cmp byte [rax], T_undefined
  7472 00004945 0F8467350100            	je L_error_fvar_undefined
  7473 0000494B 803804                  	cmp byte [rax], T_closure
  7474 0000494E 0F85E2350100            	jne L_error_non_closure
  7475 00004954 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7476 00004957 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7477 0000495A 483D[02000000]          	cmp rax, sob_boolean_false
  7478 00004960 0F849F000000            	je .L_if_else_0009
  7479                                  	; preparing a tail-call
  7480                                  	; preparing a non-tail-call
  7481 00004966 488B4520                	mov rax, PARAM(0)	; param s
  7482 0000496A 50                      	push rax
  7483 0000496B 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7484 00004973 803805                  	cmp byte [rax], T_undefined
  7485 00004976 0F8436350100            	je L_error_fvar_undefined
  7486 0000497C 50                      	push rax
  7487 0000497D 6A02                    	push 2	; arg count
  7488 0000497F 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  7489 00004987 803805                  	cmp byte [rax], T_undefined
  7490 0000498A 0F8422350100            	je L_error_fvar_undefined
  7491 00004990 803804                  	cmp byte [rax], T_closure
  7492 00004993 0F859D350100            	jne L_error_non_closure
  7493 00004999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7494 0000499C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7495 0000499F 50                      	push rax
  7496 000049A0 6A01                    	push 1	; arg count
  7497 000049A2 488B4510                	mov rax, ENV
  7498 000049A6 488B00                  	mov rax, qword [rax + 8 * 0]
  7499 000049A9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7500 000049AC 488B00                  	mov rax, qword [rax]
  7501 000049AF 803804                  	cmp byte [rax], T_closure
  7502 000049B2 0F857E350100            	jne L_error_non_closure
  7503 000049B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7504 000049BB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7505 000049BE FF7500                  	push qword[rbp]
  7506 000049C1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7507 000049C4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7508 000049C8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7509 000049CC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7510 000049D0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7511 000049D3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7512 000049D6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7513 000049DB 4983C103                	add r9, 3 	 ;for getting to the params
  7514 000049DF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7515 000049E3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7516                                  .L_tc_recycle_frame_loop_002b:
  7517 000049E6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7518 000049E9 7410                    	je .L_tc_recycle_frame_done_002b
  7519 000049EB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7520 000049EE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7521 000049F1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7522 000049F5 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7523 000049F9 EBEB                    	jmp .L_tc_recycle_frame_loop_002b
  7524                                  .L_tc_recycle_frame_done_002b:
  7525 000049FB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7526 000049FC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7527 00004A00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7528 00004A03 EB0A                    	jmp .L_if_end_0009
  7529                                  .L_if_else_0009:
  7530 00004A05 48B8-                   	mov rax, L_constants + 2
  7530 00004A07 [0200000000000000] 
  7531                                  .L_if_end_0009:
  7532                                  .L_or_end_0005:
  7533 00004A0F C9                      	leave
  7534 00004A10 C21800                  	ret AND_KILL_FRAME(1)
  7535                                  .L_lambda_simple_end_0029:	; new closure is in rax
  7536 00004A13 50                      	push rax
  7537 00004A14 488B4520                	mov rax, PARAM(0)	; param loop
  7538 00004A18 8F00                    	pop qword [rax]
  7539 00004A1A 48B8-                   	mov rax, sob_void
  7539 00004A1C [0000000000000000] 
  7540                                  
  7541                                  	; preparing a non-tail-call
  7542 00004A24 488B4510                	mov rax, ENV
  7543 00004A28 488B00                  	mov rax, qword [rax + 8 * 0]
  7544 00004A2B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7545 00004A2F 50                      	push rax
  7546 00004A30 6A01                    	push 1	; arg count
  7547 00004A32 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7548 00004A3A 803805                  	cmp byte [rax], T_undefined
  7549 00004A3D 0F846F340100            	je L_error_fvar_undefined
  7550 00004A43 803804                  	cmp byte [rax], T_closure
  7551 00004A46 0F85EA340100            	jne L_error_non_closure
  7552 00004A4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7553 00004A4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7554 00004A52 483D[02000000]          	cmp rax, sob_boolean_false
  7555 00004A58 0F85AB000000            	jne .L_or_end_0006
  7556                                  	; preparing a non-tail-call
  7557 00004A5E 488B4510                	mov rax, ENV
  7558 00004A62 488B00                  	mov rax, qword [rax + 8 * 0]
  7559 00004A65 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7560 00004A69 50                      	push rax
  7561 00004A6A 6A01                    	push 1	; arg count
  7562 00004A6C 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
  7563 00004A74 803805                  	cmp byte [rax], T_undefined
  7564 00004A77 0F8435340100            	je L_error_fvar_undefined
  7565 00004A7D 803804                  	cmp byte [rax], T_closure
  7566 00004A80 0F85B0340100            	jne L_error_non_closure
  7567 00004A86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7568 00004A89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7569 00004A8C 483D[02000000]          	cmp rax, sob_boolean_false
  7570 00004A92 746B                    	je .L_if_else_000a
  7571                                  	; preparing a tail-call
  7572 00004A94 488B4510                	mov rax, ENV
  7573 00004A98 488B00                  	mov rax, qword [rax + 8 * 0]
  7574 00004A9B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7575 00004A9F 50                      	push rax
  7576 00004AA0 6A01                    	push 1	; arg count
  7577 00004AA2 488B4520                	mov rax, PARAM(0)	; param loop
  7578 00004AA6 488B00                  	mov rax, qword [rax]
  7579 00004AA9 803804                  	cmp byte [rax], T_closure
  7580 00004AAC 0F8584340100            	jne L_error_non_closure
  7581 00004AB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7582 00004AB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7583 00004AB8 FF7500                  	push qword[rbp]
  7584 00004ABB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7585 00004ABE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7586 00004AC2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7587 00004AC6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7588 00004ACA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7589 00004ACD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7590 00004AD0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7591 00004AD5 4983C103                	add r9, 3 	 ;for getting to the params
  7592 00004AD9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7593 00004ADD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7594                                  .L_tc_recycle_frame_loop_002c:
  7595 00004AE0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7596 00004AE3 7410                    	je .L_tc_recycle_frame_done_002c
  7597 00004AE5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7598 00004AE8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7599 00004AEB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7600 00004AEF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7601 00004AF3 EBEB                    	jmp .L_tc_recycle_frame_loop_002c
  7602                                  .L_tc_recycle_frame_done_002c:
  7603 00004AF5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7604 00004AF6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7605 00004AFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7606 00004AFD EB0A                    	jmp .L_if_end_000a
  7607                                  .L_if_else_000a:
  7608 00004AFF 48B8-                   	mov rax, L_constants + 2
  7608 00004B01 [0200000000000000] 
  7609                                  .L_if_end_000a:
  7610                                  .L_or_end_0006:
  7611 00004B09 C9                      	leave
  7612 00004B0A C21800                  	ret AND_KILL_FRAME(1)
  7613                                  .L_lambda_simple_end_0028:	; new closure is in rax
  7614 00004B0D 803804                  	cmp byte [rax], T_closure
  7615 00004B10 0F8520340100            	jne L_error_non_closure
  7616 00004B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7617 00004B19 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7618 00004B1C FF7500                  	push qword[rbp]
  7619 00004B1F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7620 00004B22 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7621 00004B26 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7622 00004B2A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7623 00004B2E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7624 00004B31 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7625 00004B34 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7626 00004B39 4983C103                	add r9, 3 	 ;for getting to the params
  7627 00004B3D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7628 00004B41 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7629                                  .L_tc_recycle_frame_loop_002d:
  7630 00004B44 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7631 00004B47 7410                    	je .L_tc_recycle_frame_done_002d
  7632 00004B49 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7633 00004B4C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7634 00004B4F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7635 00004B53 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7636 00004B57 EBEB                    	jmp .L_tc_recycle_frame_loop_002d
  7637                                  .L_tc_recycle_frame_done_002d:
  7638 00004B59 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7639 00004B5A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7640 00004B5E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7641 00004B61 C9                      	leave
  7642 00004B62 C22000                  	ret AND_KILL_FRAME(2)
  7643                                  .L_lambda_opt_end_0005:	; new closure is in rax
  7644 00004B65 48890425[D40F0000]      	mov qword [free_var_31], rax
  7645 00004B6D 48B8-                   	mov rax, sob_void
  7645 00004B6F [0000000000000000] 
  7646                                  
  7647 00004B77 4889C7                  	mov rdi, rax
  7648 00004B7A E8B5360100              	call print_sexpr_if_not_void
  7649                                  	; preparing a non-tail-call
  7650 00004B7F 48B8-                   	mov rax, L_constants + 1993
  7650 00004B81 [C907000000000000] 
  7651 00004B89 50                      	push rax
  7652 00004B8A 48B8-                   	mov rax, L_constants + 1993
  7652 00004B8C [C907000000000000] 
  7653 00004B94 50                      	push rax
  7654 00004B95 6A02                    	push 2	; arg count
  7655 00004B97 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7656 00004B9C E83E340100              	call malloc
  7657 00004BA1 50                      	push rax
  7658 00004BA2 BF00000000              	mov rdi, 8 * 0	; new rib
  7659 00004BA7 E833340100              	call malloc
  7660 00004BAC 50                      	push rax
  7661 00004BAD BF08000000              	mov rdi, 8 * 1	; extended env
  7662 00004BB2 E828340100              	call malloc
  7663 00004BB7 488B7D10                	mov rdi, ENV
  7664 00004BBB BE00000000              	mov rsi, 0
  7665 00004BC0 BA01000000              	mov rdx, 1
  7666                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  7667 00004BC5 4883FE00                	cmp rsi, 0
  7668 00004BC9 7410                    	je .L_lambda_simple_env_end_002c
  7669 00004BCB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7670 00004BCF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7671 00004BD3 48FFC6                  	inc rsi
  7672 00004BD6 48FFC2                  	inc rdx
  7673 00004BD9 EBEA                    	jmp .L_lambda_simple_env_loop_002c
  7674                                  .L_lambda_simple_env_end_002c:
  7675 00004BDB 5B                      	pop rbx
  7676 00004BDC BE00000000              	mov rsi, 0
  7677                                  .L_lambda_simple_params_loop_002c:	; copy params
  7678 00004BE1 4883FE00                	cmp rsi, 0
  7679 00004BE5 740E                    	je .L_lambda_simple_params_end_002c
  7680 00004BE7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7681 00004BEC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7682 00004BF0 48FFC6                  	inc rsi
  7683 00004BF3 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  7684                                  .L_lambda_simple_params_end_002c:
  7685 00004BF5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7686 00004BF8 4889C3                  	mov rbx, rax
  7687 00004BFB 58                      	pop rax
  7688 00004BFC C60004                  	mov byte [rax], T_closure
  7689 00004BFF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7690 00004C03 48C74009[104C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  7691 00004C0B E94B070000              	jmp .L_lambda_simple_end_002c
  7692                                  .L_lambda_simple_code_002c:	; lambda-simple body
  7693 00004C10 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7694 00004C16 740B                    	je .L_lambda_simple_arity_check_ok_002c
  7695 00004C18 FF742410                	push qword [rsp + 8 * 2]
  7696 00004C1C 6A02                    	push 2
  7697 00004C1E E975330100              	jmp L_error_incorrect_arity_simple
  7698                                  .L_lambda_simple_arity_check_ok_002c:
  7699 00004C23 C8000000                	enter 0, 0
  7700 00004C27 BF08000000              	mov rdi, 8*1
  7701 00004C2C E8AE330100              	call malloc
  7702 00004C31 488B5D20                	mov rbx, PARAM(0)
  7703 00004C35 488918                  	mov qword[rax], rbx
  7704 00004C38 48894520                	mov PARAM(0), rax
  7705 00004C3C 48B8-                   	mov rax, sob_void
  7705 00004C3E [0000000000000000] 
  7706                                  
  7707 00004C46 BF08000000              	mov rdi, 8*1
  7708 00004C4B E88F330100              	call malloc
  7709 00004C50 488B5D28                	mov rbx, PARAM(1)
  7710 00004C54 488918                  	mov qword[rax], rbx
  7711 00004C57 48894528                	mov PARAM(1), rax
  7712 00004C5B 48B8-                   	mov rax, sob_void
  7712 00004C5D [0000000000000000] 
  7713                                  
  7714 00004C65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7715 00004C6A E870330100              	call malloc
  7716 00004C6F 50                      	push rax
  7717 00004C70 BF10000000              	mov rdi, 8 * 2	; new rib
  7718 00004C75 E865330100              	call malloc
  7719 00004C7A 50                      	push rax
  7720 00004C7B BF10000000              	mov rdi, 8 * 2	; extended env
  7721 00004C80 E85A330100              	call malloc
  7722 00004C85 488B7D10                	mov rdi, ENV
  7723 00004C89 BE00000000              	mov rsi, 0
  7724 00004C8E BA01000000              	mov rdx, 1
  7725                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  7726 00004C93 4883FE01                	cmp rsi, 1
  7727 00004C97 7410                    	je .L_lambda_simple_env_end_002d
  7728 00004C99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7729 00004C9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7730 00004CA1 48FFC6                  	inc rsi
  7731 00004CA4 48FFC2                  	inc rdx
  7732 00004CA7 EBEA                    	jmp .L_lambda_simple_env_loop_002d
  7733                                  .L_lambda_simple_env_end_002d:
  7734 00004CA9 5B                      	pop rbx
  7735 00004CAA BE00000000              	mov rsi, 0
  7736                                  .L_lambda_simple_params_loop_002d:	; copy params
  7737 00004CAF 4883FE02                	cmp rsi, 2
  7738 00004CB3 740E                    	je .L_lambda_simple_params_end_002d
  7739 00004CB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7740 00004CBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7741 00004CBE 48FFC6                  	inc rsi
  7742 00004CC1 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  7743                                  .L_lambda_simple_params_end_002d:
  7744 00004CC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7745 00004CC6 4889C3                  	mov rbx, rax
  7746 00004CC9 58                      	pop rax
  7747 00004CCA C60004                  	mov byte [rax], T_closure
  7748 00004CCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7749 00004CD1 48C74009[DE4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  7750 00004CD9 E94A010000              	jmp .L_lambda_simple_end_002d
  7751                                  .L_lambda_simple_code_002d:	; lambda-simple body
  7752 00004CDE 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7753 00004CE4 740B                    	je .L_lambda_simple_arity_check_ok_002d
  7754 00004CE6 FF742410                	push qword [rsp + 8 * 2]
  7755 00004CEA 6A02                    	push 2
  7756 00004CEC E9A7320100              	jmp L_error_incorrect_arity_simple
  7757                                  .L_lambda_simple_arity_check_ok_002d:
  7758 00004CF1 C8000000                	enter 0, 0
  7759                                  	; preparing a non-tail-call
  7760 00004CF5 488B4528                	mov rax, PARAM(1)	; param s
  7761 00004CF9 50                      	push rax
  7762 00004CFA 6A01                    	push 1	; arg count
  7763 00004CFC 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7764 00004D04 803805                  	cmp byte [rax], T_undefined
  7765 00004D07 0F84A5310100            	je L_error_fvar_undefined
  7766 00004D0D 803804                  	cmp byte [rax], T_closure
  7767 00004D10 0F8520320100            	jne L_error_non_closure
  7768 00004D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7769 00004D19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7770 00004D1C 483D[02000000]          	cmp rax, sob_boolean_false
  7771 00004D22 740F                    	je .L_if_else_000d
  7772 00004D24 48B8-                   	mov rax, L_constants + 1
  7772 00004D26 [0100000000000000] 
  7773 00004D2E E9F1000000              	jmp .L_if_end_000d
  7774                                  .L_if_else_000d:
  7775                                  	; preparing a tail-call
  7776                                  	; preparing a non-tail-call
  7777                                  	; preparing a non-tail-call
  7778 00004D33 488B4528                	mov rax, PARAM(1)	; param s
  7779 00004D37 50                      	push rax
  7780 00004D38 6A01                    	push 1	; arg count
  7781 00004D3A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7782 00004D42 803805                  	cmp byte [rax], T_undefined
  7783 00004D45 0F8467310100            	je L_error_fvar_undefined
  7784 00004D4B 803804                  	cmp byte [rax], T_closure
  7785 00004D4E 0F85E2310100            	jne L_error_non_closure
  7786 00004D54 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7787 00004D57 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7788 00004D5A 50                      	push rax
  7789 00004D5B 488B4520                	mov rax, PARAM(0)	; param f
  7790 00004D5F 50                      	push rax
  7791 00004D60 6A02                    	push 2	; arg count
  7792 00004D62 488B4510                	mov rax, ENV
  7793 00004D66 488B00                  	mov rax, qword [rax + 8 * 0]
  7794 00004D69 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7795 00004D6C 488B00                  	mov rax, qword [rax]
  7796 00004D6F 803804                  	cmp byte [rax], T_closure
  7797 00004D72 0F85BE310100            	jne L_error_non_closure
  7798 00004D78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7799 00004D7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7800 00004D7E 50                      	push rax
  7801                                  	; preparing a non-tail-call
  7802                                  	; preparing a non-tail-call
  7803 00004D7F 488B4528                	mov rax, PARAM(1)	; param s
  7804 00004D83 50                      	push rax
  7805 00004D84 6A01                    	push 1	; arg count
  7806 00004D86 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7807 00004D8E 803805                  	cmp byte [rax], T_undefined
  7808 00004D91 0F841B310100            	je L_error_fvar_undefined
  7809 00004D97 803804                  	cmp byte [rax], T_closure
  7810 00004D9A 0F8596310100            	jne L_error_non_closure
  7811 00004DA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7812 00004DA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7813 00004DA6 50                      	push rax
  7814 00004DA7 6A01                    	push 1	; arg count
  7815 00004DA9 488B4520                	mov rax, PARAM(0)	; param f
  7816 00004DAD 803804                  	cmp byte [rax], T_closure
  7817 00004DB0 0F8580310100            	jne L_error_non_closure
  7818 00004DB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7819 00004DB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7820 00004DBC 50                      	push rax
  7821 00004DBD 6A02                    	push 2	; arg count
  7822 00004DBF 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  7823 00004DC7 803805                  	cmp byte [rax], T_undefined
  7824 00004DCA 0F84E2300100            	je L_error_fvar_undefined
  7825 00004DD0 803804                  	cmp byte [rax], T_closure
  7826 00004DD3 0F855D310100            	jne L_error_non_closure
  7827 00004DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7828 00004DDC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7829 00004DDF FF7500                  	push qword[rbp]
  7830 00004DE2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7831 00004DE5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7832 00004DE9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7833 00004DED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7834 00004DF1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7835 00004DF4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7836 00004DF7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7837 00004DFC 4983C103                	add r9, 3 	 ;for getting to the params
  7838 00004E00 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7839 00004E04 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7840                                  .L_tc_recycle_frame_loop_0031:
  7841 00004E07 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7842 00004E0A 7410                    	je .L_tc_recycle_frame_done_0031
  7843 00004E0C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7844 00004E0F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7845 00004E12 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7846 00004E16 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7847 00004E1A EBEB                    	jmp .L_tc_recycle_frame_loop_0031
  7848                                  .L_tc_recycle_frame_done_0031:
  7849 00004E1C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7850 00004E1D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7851 00004E21 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7852                                  .L_if_end_000d:
  7853 00004E24 C9                      	leave
  7854 00004E25 C22000                  	ret AND_KILL_FRAME(2)
  7855                                  .L_lambda_simple_end_002d:	; new closure is in rax
  7856 00004E28 50                      	push rax
  7857 00004E29 488B4520                	mov rax, PARAM(0)	; param map1
  7858 00004E2D 8F00                    	pop qword [rax]
  7859 00004E2F 48B8-                   	mov rax, sob_void
  7859 00004E31 [0000000000000000] 
  7860                                  
  7861 00004E39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7862 00004E3E E89C310100              	call malloc
  7863 00004E43 50                      	push rax
  7864 00004E44 BF10000000              	mov rdi, 8 * 2	; new rib
  7865 00004E49 E891310100              	call malloc
  7866 00004E4E 50                      	push rax
  7867 00004E4F BF10000000              	mov rdi, 8 * 2	; extended env
  7868 00004E54 E886310100              	call malloc
  7869 00004E59 488B7D10                	mov rdi, ENV
  7870 00004E5D BE00000000              	mov rsi, 0
  7871 00004E62 BA01000000              	mov rdx, 1
  7872                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  7873 00004E67 4883FE01                	cmp rsi, 1
  7874 00004E6B 7410                    	je .L_lambda_simple_env_end_002e
  7875 00004E6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7876 00004E71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7877 00004E75 48FFC6                  	inc rsi
  7878 00004E78 48FFC2                  	inc rdx
  7879 00004E7B EBEA                    	jmp .L_lambda_simple_env_loop_002e
  7880                                  .L_lambda_simple_env_end_002e:
  7881 00004E7D 5B                      	pop rbx
  7882 00004E7E BE00000000              	mov rsi, 0
  7883                                  .L_lambda_simple_params_loop_002e:	; copy params
  7884 00004E83 4883FE02                	cmp rsi, 2
  7885 00004E87 740E                    	je .L_lambda_simple_params_end_002e
  7886 00004E89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7887 00004E8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7888 00004E92 48FFC6                  	inc rsi
  7889 00004E95 EBEC                    	jmp .L_lambda_simple_params_loop_002e
  7890                                  .L_lambda_simple_params_end_002e:
  7891 00004E97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7892 00004E9A 4889C3                  	mov rbx, rax
  7893 00004E9D 58                      	pop rax
  7894 00004E9E C60004                  	mov byte [rax], T_closure
  7895 00004EA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7896 00004EA5 48C74009[B24E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  7897 00004EAD E99C010000              	jmp .L_lambda_simple_end_002e
  7898                                  .L_lambda_simple_code_002e:	; lambda-simple body
  7899 00004EB2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7900 00004EB8 740B                    	je .L_lambda_simple_arity_check_ok_002e
  7901 00004EBA FF742410                	push qword [rsp + 8 * 2]
  7902 00004EBE 6A02                    	push 2
  7903 00004EC0 E9D3300100              	jmp L_error_incorrect_arity_simple
  7904                                  .L_lambda_simple_arity_check_ok_002e:
  7905 00004EC5 C8000000                	enter 0, 0
  7906                                  	; preparing a non-tail-call
  7907                                  	; preparing a non-tail-call
  7908 00004EC9 488B4528                	mov rax, PARAM(1)	; param s
  7909 00004ECD 50                      	push rax
  7910 00004ECE 6A01                    	push 1	; arg count
  7911 00004ED0 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7912 00004ED8 803805                  	cmp byte [rax], T_undefined
  7913 00004EDB 0F84D12F0100            	je L_error_fvar_undefined
  7914 00004EE1 803804                  	cmp byte [rax], T_closure
  7915 00004EE4 0F854C300100            	jne L_error_non_closure
  7916 00004EEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7917 00004EED FF5009                  	call SOB_CLOSURE_CODE(rax)
  7918 00004EF0 50                      	push rax
  7919 00004EF1 6A01                    	push 1	; arg count
  7920 00004EF3 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  7921 00004EFB 803805                  	cmp byte [rax], T_undefined
  7922 00004EFE 0F84AE2F0100            	je L_error_fvar_undefined
  7923 00004F04 803804                  	cmp byte [rax], T_closure
  7924 00004F07 0F8529300100            	jne L_error_non_closure
  7925 00004F0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7926 00004F10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7927 00004F13 483D[02000000]          	cmp rax, sob_boolean_false
  7928 00004F19 740F                    	je .L_if_else_000e
  7929 00004F1B 48B8-                   	mov rax, L_constants + 1
  7929 00004F1D [0100000000000000] 
  7930 00004F25 E920010000              	jmp .L_if_end_000e
  7931                                  .L_if_else_000e:
  7932                                  	; preparing a tail-call
  7933                                  	; preparing a non-tail-call
  7934                                  	; preparing a non-tail-call
  7935 00004F2A 488B4528                	mov rax, PARAM(1)	; param s
  7936 00004F2E 50                      	push rax
  7937 00004F2F 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  7938 00004F37 803805                  	cmp byte [rax], T_undefined
  7939 00004F3A 0F84722F0100            	je L_error_fvar_undefined
  7940 00004F40 50                      	push rax
  7941 00004F41 6A02                    	push 2	; arg count
  7942 00004F43 488B4510                	mov rax, ENV
  7943 00004F47 488B00                  	mov rax, qword [rax + 8 * 0]
  7944 00004F4A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7945 00004F4D 488B00                  	mov rax, qword [rax]
  7946 00004F50 803804                  	cmp byte [rax], T_closure
  7947 00004F53 0F85DD2F0100            	jne L_error_non_closure
  7948 00004F59 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7949 00004F5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7950 00004F5F 50                      	push rax
  7951 00004F60 488B4520                	mov rax, PARAM(0)	; param f
  7952 00004F64 50                      	push rax
  7953 00004F65 6A02                    	push 2	; arg count
  7954 00004F67 488B4510                	mov rax, ENV
  7955 00004F6B 488B00                  	mov rax, qword [rax + 8 * 0]
  7956 00004F6E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  7957 00004F72 488B00                  	mov rax, qword [rax]
  7958 00004F75 803804                  	cmp byte [rax], T_closure
  7959 00004F78 0F85B82F0100            	jne L_error_non_closure
  7960 00004F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7961 00004F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7962 00004F84 50                      	push rax
  7963                                  	; preparing a non-tail-call
  7964                                  	; preparing a non-tail-call
  7965 00004F85 488B4528                	mov rax, PARAM(1)	; param s
  7966 00004F89 50                      	push rax
  7967 00004F8A 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  7968 00004F92 803805                  	cmp byte [rax], T_undefined
  7969 00004F95 0F84172F0100            	je L_error_fvar_undefined
  7970 00004F9B 50                      	push rax
  7971 00004F9C 6A02                    	push 2	; arg count
  7972 00004F9E 488B4510                	mov rax, ENV
  7973 00004FA2 488B00                  	mov rax, qword [rax + 8 * 0]
  7974 00004FA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7975 00004FA8 488B00                  	mov rax, qword [rax]
  7976 00004FAB 803804                  	cmp byte [rax], T_closure
  7977 00004FAE 0F85822F0100            	jne L_error_non_closure
  7978 00004FB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7979 00004FB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7980 00004FBA 50                      	push rax
  7981 00004FBB 488B4520                	mov rax, PARAM(0)	; param f
  7982 00004FBF 50                      	push rax
  7983 00004FC0 6A02                    	push 2	; arg count
  7984 00004FC2 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  7985 00004FCA 803805                  	cmp byte [rax], T_undefined
  7986 00004FCD 0F84DF2E0100            	je L_error_fvar_undefined
  7987 00004FD3 803804                  	cmp byte [rax], T_closure
  7988 00004FD6 0F855A2F0100            	jne L_error_non_closure
  7989 00004FDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7990 00004FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7991 00004FE2 50                      	push rax
  7992 00004FE3 6A02                    	push 2	; arg count
  7993 00004FE5 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  7994 00004FED 803805                  	cmp byte [rax], T_undefined
  7995 00004FF0 0F84BC2E0100            	je L_error_fvar_undefined
  7996 00004FF6 803804                  	cmp byte [rax], T_closure
  7997 00004FF9 0F85372F0100            	jne L_error_non_closure
  7998 00004FFF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7999 00005002 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8000 00005005 FF7500                  	push qword[rbp]
  8001 00005008 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8002 0000500B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8003 0000500F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8004 00005013 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8005 00005017 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8006 0000501A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8007 0000501D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8008 00005022 4983C103                	add r9, 3 	 ;for getting to the params
  8009 00005026 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8010 0000502A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8011                                  .L_tc_recycle_frame_loop_0032:
  8012 0000502D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8013 00005030 7410                    	je .L_tc_recycle_frame_done_0032
  8014 00005032 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8015 00005035 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8016 00005038 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8017 0000503C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8018 00005040 EBEB                    	jmp .L_tc_recycle_frame_loop_0032
  8019                                  .L_tc_recycle_frame_done_0032:
  8020 00005042 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8021 00005043 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8022 00005047 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8023                                  .L_if_end_000e:
  8024 0000504A C9                      	leave
  8025 0000504B C22000                  	ret AND_KILL_FRAME(2)
  8026                                  .L_lambda_simple_end_002e:	; new closure is in rax
  8027 0000504E 50                      	push rax
  8028 0000504F 488B4528                	mov rax, PARAM(1)	; param map-list
  8029 00005053 8F00                    	pop qword [rax]
  8030 00005055 48B8-                   	mov rax, sob_void
  8030 00005057 [0000000000000000] 
  8031                                  
  8032 0000505F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8033 00005064 E8762F0100              	call malloc
  8034 00005069 50                      	push rax
  8035 0000506A BF10000000              	mov rdi, 8 * 2	; new rib
  8036 0000506F E86B2F0100              	call malloc
  8037 00005074 50                      	push rax
  8038 00005075 BF10000000              	mov rdi, 8 * 2	; extended env
  8039 0000507A E8602F0100              	call malloc
  8040 0000507F 488B7D10                	mov rdi, ENV
  8041 00005083 BE00000000              	mov rsi, 0
  8042 00005088 BA01000000              	mov rdx, 1
  8043                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  8044 0000508D 4883FE01                	cmp rsi, 1
  8045 00005091 7410                    	je .L_lambda_opt_env_end_0006
  8046 00005093 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8047 00005097 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8048 0000509B 48FFC6                  	inc rsi
  8049 0000509E 48FFC2                  	inc rdx
  8050 000050A1 EBEA                    	jmp .L_lambda_opt_env_loop_0006
  8051                                  .L_lambda_opt_env_end_0006:
  8052 000050A3 5B                      	pop rbx
  8053 000050A4 BE00000000              	mov rsi, 0
  8054                                  .L_lambda_opt_params_loop_0006:	; copy params
  8055 000050A9 4883FE02                	cmp rsi, 2
  8056 000050AD 740E                    	je .L_lambda_opt_params_end_0006
  8057 000050AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8058 000050B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8059 000050B8 48FFC6                  	inc rsi
  8060 000050BB EBEC                    	jmp .L_lambda_opt_params_loop_0006
  8061                                  .L_lambda_opt_params_end_0006:
  8062 000050BD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8063 000050C0 4889C3                  	mov rbx, rax
  8064 000050C3 58                      	pop rax
  8065 000050C4 C60004                  	mov byte [rax], T_closure
  8066 000050C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8067 000050CB 48C74009[D8500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  8068 000050D3 E97F020000              	jmp .L_lambda_opt_end_0006
  8069                                  .L_lambda_opt_code_0006:	; lambda-opt body
  8070 000050D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8071 000050DE 7411                    	je .L_lambda_opt_arity_check_exact_0006
  8072 000050E0 0F8FFB000000            	jg .L_lambda_opt_arity_check_more_0006
  8073 000050E6 FF742410                	push qword [rsp + 8 * 2]
  8074 000050EA 6A01                    	push 1
  8075 000050EC E9BB2E0100              	jmp L_error_incorrect_arity_opt
  8076                                  .L_lambda_opt_arity_check_exact_0006:
  8077 000050F1 4883EC08                	sub rsp, 8
  8078 000050F5 488B442408              	mov rax, qword[rsp + 8 *1]
  8079 000050FA 48890424                	mov qword[rsp], rax  
  8080 000050FE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8081 00005103 4889442408              	mov qword[rsp + 8 * 1], rax
  8082 00005108 B802000000              	mov rax, 2
  8083 0000510D 4889442410              	mov qword[rsp + 8 *2], rax
  8084 00005112 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  8085 00005117 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8086 0000511C 48B8-                   	mov rax, sob_nil
  8086 0000511E [0100000000000000] 
  8087 00005126 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  8088 0000512B C8000000                	enter 0, 0
  8089                                  	; preparing a non-tail-call
  8090 0000512F 488B4528                	mov rax, PARAM(1)	; param s
  8091 00005133 50                      	push rax
  8092 00005134 6A01                    	push 1	; arg count
  8093 00005136 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8094 0000513E 803805                  	cmp byte [rax], T_undefined
  8095 00005141 0F846B2D0100            	je L_error_fvar_undefined
  8096 00005147 803804                  	cmp byte [rax], T_closure
  8097 0000514A 0F85E62D0100            	jne L_error_non_closure
  8098 00005150 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8099 00005153 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8100 00005156 483D[02000000]          	cmp rax, sob_boolean_false
  8101 0000515C 740C                    	je .L_if_else_0010
  8102 0000515E 48B8-                   	mov rax, L_constants + 1
  8102 00005160 [0100000000000000] 
  8103 00005168 EB6E                    	jmp .L_if_end_0010
  8104                                  .L_if_else_0010:
  8105                                  	; preparing a tail-call
  8106 0000516A 488B4528                	mov rax, PARAM(1)	; param s
  8107 0000516E 50                      	push rax
  8108 0000516F 488B4520                	mov rax, PARAM(0)	; param f
  8109 00005173 50                      	push rax
  8110 00005174 6A02                    	push 2	; arg count
  8111 00005176 488B4510                	mov rax, ENV
  8112 0000517A 488B00                  	mov rax, qword [rax + 8 * 0]
  8113 0000517D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8114 00005181 488B00                  	mov rax, qword [rax]
  8115 00005184 803804                  	cmp byte [rax], T_closure
  8116 00005187 0F85A92D0100            	jne L_error_non_closure
  8117 0000518D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8118 00005190 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8119 00005193 FF7500                  	push qword[rbp]
  8120 00005196 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8121 00005199 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8122 0000519D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8123 000051A1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8124 000051A5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8125 000051A8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8126 000051AB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8127 000051B0 4983C103                	add r9, 3 	 ;for getting to the params
  8128 000051B4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8129 000051B8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8130                                  .L_tc_recycle_frame_loop_0034:
  8131 000051BB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8132 000051BE 7410                    	je .L_tc_recycle_frame_done_0034
  8133 000051C0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8134 000051C3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8135 000051C6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8136 000051CA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8137 000051CE EBEB                    	jmp .L_tc_recycle_frame_loop_0034
  8138                                  .L_tc_recycle_frame_done_0034:
  8139 000051D0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8140 000051D1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8141 000051D5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8142                                  .L_if_end_0010:
  8143 000051D8 C9                      	leave
  8144 000051D9 C22000                  	ret AND_KILL_FRAME(2)
  8145 000051DC E976010000              	jmp .L_lambda_opt_end_0006	; new closure is in rax
  8146                                  .L_lambda_opt_arity_check_more_0006:
  8147 000051E1 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  8148 000051E6 49B9-                   	mov r9, sob_nil
  8148 000051E8 [0100000000000000] 
  8149 000051F0 4889E3                  	mov rbx, rsp 
  8150 000051F3 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  8151 000051F7 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  8152 000051FA 49C1E003                	shl r8, 3
  8153 000051FE 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  8154 00005201 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  8155                                  .L_lambda_opt_stack_shrink_loop_0006:
  8156 00005206 4983F801                	cmp r8, 1
  8157 0000520A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  8158 0000520C BF11000000              	mov rdi, 1+8+8	;for pair
  8159 00005211 E8C92D0100              	call malloc	 ;to create the pair in the stack
  8160 00005216 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  8161 00005219 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  8162 0000521C 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  8163 00005220 4C894809                 	mov qword[rax+1+8],r9
  8164 00005224 4989C1                  	mov r9, rax	 ; for the recursion 
  8165 00005227 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  8166 0000522A 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  8167 0000522E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  8168                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  8169 00005230 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  8170 00005235 4883E902                	sub rcx, 2
  8171 00005239 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  8172 0000523D 4801CC                  	add rsp, rcx	 ;shrinking the stack
  8173 00005240 4889E0                  	mov rax, rsp
  8174 00005243 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  8175 00005246 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  8176 0000524A 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  8177 0000524D 4883C018                	add rax, 3 * 8 	;now rax is param 0
  8178 00005251 49C1E003                	shl r8, 3 	; convert to byte
  8179 00005255 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  8180 00005258 4C8908                  	mov qword[rax], r9	;puting the list at the top
  8181 0000525B 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  8182 0000525F 4889E3                  	mov rbx, rsp 
  8183 00005262 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  8184 00005265 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
  8185 0000526B 49FFCA                  	dec r10 
  8186 0000526E 49C1E203                	shl r10, 3	;to get bytes
  8187 00005272 4883C318                	add rbx, 3*8 	;rbx is the first param
  8188 00005276 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  8189 00005279 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  8190                                  
  8191 0000527C 4C8900                              	mov qword[rax], r8
  8192 0000527F 4883E808                            	sub rax, 8
  8193 00005283 4883EB08                	sub rbx, 8
  8194 00005287 4889E0                  	mov rax, rsp
  8195 0000528A 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  8196 0000528D 48C744241002000000      	mov qword [rsp+2*8], 2
  8197 00005296 488B5808                	mov rbx, qword[rax + 8 *1]
  8198 0000529A 48895C2408              	mov qword [rsp + 1*8] ,rbx
  8199 0000529F 488B18                  	mov rbx, qword[rax]
  8200 000052A2 48891C24                	mov qword [rsp], rbx
  8201 000052A6 C8000000                	enter 0, 0
  8202                                  	; preparing a non-tail-call
  8203 000052AA 488B4528                	mov rax, PARAM(1)	; param s
  8204 000052AE 50                      	push rax
  8205 000052AF 6A01                    	push 1	; arg count
  8206 000052B1 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8207 000052B9 803805                  	cmp byte [rax], T_undefined
  8208 000052BC 0F84F02B0100            	je L_error_fvar_undefined
  8209 000052C2 803804                  	cmp byte [rax], T_closure
  8210 000052C5 0F856B2C0100            	jne L_error_non_closure
  8211 000052CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8212 000052CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8213 000052D1 483D[02000000]          	cmp rax, sob_boolean_false
  8214 000052D7 740C                    	je .L_if_else_000f
  8215 000052D9 48B8-                   	mov rax, L_constants + 1
  8215 000052DB [0100000000000000] 
  8216 000052E3 EB6E                    	jmp .L_if_end_000f
  8217                                  .L_if_else_000f:
  8218                                  	; preparing a tail-call
  8219 000052E5 488B4528                	mov rax, PARAM(1)	; param s
  8220 000052E9 50                      	push rax
  8221 000052EA 488B4520                	mov rax, PARAM(0)	; param f
  8222 000052EE 50                      	push rax
  8223 000052EF 6A02                    	push 2	; arg count
  8224 000052F1 488B4510                	mov rax, ENV
  8225 000052F5 488B00                  	mov rax, qword [rax + 8 * 0]
  8226 000052F8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8227 000052FC 488B00                  	mov rax, qword [rax]
  8228 000052FF 803804                  	cmp byte [rax], T_closure
  8229 00005302 0F852E2C0100            	jne L_error_non_closure
  8230 00005308 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8231 0000530B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8232 0000530E FF7500                  	push qword[rbp]
  8233 00005311 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8234 00005314 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8235 00005318 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8236 0000531C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8237 00005320 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8238 00005323 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8239 00005326 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8240 0000532B 4983C103                	add r9, 3 	 ;for getting to the params
  8241 0000532F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8242 00005333 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8243                                  .L_tc_recycle_frame_loop_0033:
  8244 00005336 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8245 00005339 7410                    	je .L_tc_recycle_frame_done_0033
  8246 0000533B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8247 0000533E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8248 00005341 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8249 00005345 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8250 00005349 EBEB                    	jmp .L_tc_recycle_frame_loop_0033
  8251                                  .L_tc_recycle_frame_done_0033:
  8252 0000534B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8253 0000534C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8254 00005350 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8255                                  .L_if_end_000f:
  8256 00005353 C9                      	leave
  8257 00005354 C22000                  	ret AND_KILL_FRAME(2)
  8258                                  .L_lambda_opt_end_0006:	; new closure is in rax
  8259 00005357 C9                      	leave
  8260 00005358 C22000                  	ret AND_KILL_FRAME(2)
  8261                                  .L_lambda_simple_end_002c:	; new closure is in rax
  8262 0000535B 803804                  	cmp byte [rax], T_closure
  8263 0000535E 0F85D22B0100            	jne L_error_non_closure
  8264 00005364 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8265 00005367 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8266 0000536A 48890425[9C140000]      	mov qword [free_var_103], rax
  8267 00005372 48B8-                   	mov rax, sob_void
  8267 00005374 [0000000000000000] 
  8268                                  
  8269 0000537C 4889C7                  	mov rdi, rax
  8270 0000537F E8B02E0100              	call print_sexpr_if_not_void
  8271 00005384 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8272 00005389 E8512C0100              	call malloc
  8273 0000538E 50                      	push rax
  8274 0000538F BF00000000              	mov rdi, 8 * 0	; new rib
  8275 00005394 E8462C0100              	call malloc
  8276 00005399 50                      	push rax
  8277 0000539A BF08000000              	mov rdi, 8 * 1	; extended env
  8278 0000539F E83B2C0100              	call malloc
  8279 000053A4 488B7D10                	mov rdi, ENV
  8280 000053A8 BE00000000              	mov rsi, 0
  8281 000053AD BA01000000              	mov rdx, 1
  8282                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  8283 000053B2 4883FE00                	cmp rsi, 0
  8284 000053B6 7410                    	je .L_lambda_simple_env_end_002f
  8285 000053B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8286 000053BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8287 000053C0 48FFC6                  	inc rsi
  8288 000053C3 48FFC2                  	inc rdx
  8289 000053C6 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  8290                                  .L_lambda_simple_env_end_002f:
  8291 000053C8 5B                      	pop rbx
  8292 000053C9 BE00000000              	mov rsi, 0
  8293                                  .L_lambda_simple_params_loop_002f:	; copy params
  8294 000053CE 4883FE00                	cmp rsi, 0
  8295 000053D2 740E                    	je .L_lambda_simple_params_end_002f
  8296 000053D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8297 000053D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8298 000053DD 48FFC6                  	inc rsi
  8299 000053E0 EBEC                    	jmp .L_lambda_simple_params_loop_002f
  8300                                  .L_lambda_simple_params_end_002f:
  8301 000053E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8302 000053E5 4889C3                  	mov rbx, rax
  8303 000053E8 58                      	pop rax
  8304 000053E9 C60004                  	mov byte [rax], T_closure
  8305 000053EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8306 000053F0 48C74009[FD530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  8307 000053F8 E998010000              	jmp .L_lambda_simple_end_002f
  8308                                  .L_lambda_simple_code_002f:	; lambda-simple body
  8309 000053FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8310 00005403 740B                    	je .L_lambda_simple_arity_check_ok_002f
  8311 00005405 FF742410                	push qword [rsp + 8 * 2]
  8312 00005409 6A01                    	push 1
  8313 0000540B E9882B0100              	jmp L_error_incorrect_arity_simple
  8314                                  .L_lambda_simple_arity_check_ok_002f:
  8315 00005410 C8000000                	enter 0, 0
  8316                                  	; preparing a tail-call
  8317 00005414 488B4520                	mov rax, PARAM(0)	; param s
  8318 00005418 50                      	push rax
  8319 00005419 48B8-                   	mov rax, L_constants + 1
  8319 0000541B [0100000000000000] 
  8320 00005423 50                      	push rax
  8321 00005424 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8322 00005429 E8B12B0100              	call malloc
  8323 0000542E 50                      	push rax
  8324 0000542F BF08000000              	mov rdi, 8 * 1	; new rib
  8325 00005434 E8A62B0100              	call malloc
  8326 00005439 50                      	push rax
  8327 0000543A BF10000000              	mov rdi, 8 * 2	; extended env
  8328 0000543F E89B2B0100              	call malloc
  8329 00005444 488B7D10                	mov rdi, ENV
  8330 00005448 BE00000000              	mov rsi, 0
  8331 0000544D BA01000000              	mov rdx, 1
  8332                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  8333 00005452 4883FE01                	cmp rsi, 1
  8334 00005456 7410                    	je .L_lambda_simple_env_end_0030
  8335 00005458 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8336 0000545C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8337 00005460 48FFC6                  	inc rsi
  8338 00005463 48FFC2                  	inc rdx
  8339 00005466 EBEA                    	jmp .L_lambda_simple_env_loop_0030
  8340                                  .L_lambda_simple_env_end_0030:
  8341 00005468 5B                      	pop rbx
  8342 00005469 BE00000000              	mov rsi, 0
  8343                                  .L_lambda_simple_params_loop_0030:	; copy params
  8344 0000546E 4883FE01                	cmp rsi, 1
  8345 00005472 740E                    	je .L_lambda_simple_params_end_0030
  8346 00005474 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8347 00005479 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8348 0000547D 48FFC6                  	inc rsi
  8349 00005480 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  8350                                  .L_lambda_simple_params_end_0030:
  8351 00005482 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8352 00005485 4889C3                  	mov rbx, rax
  8353 00005488 58                      	pop rax
  8354 00005489 C60004                  	mov byte [rax], T_closure
  8355 0000548C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8356 00005490 48C74009[9D540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  8357 00005498 E98C000000              	jmp .L_lambda_simple_end_0030
  8358                                  .L_lambda_simple_code_0030:	; lambda-simple body
  8359 0000549D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8360 000054A3 740B                    	je .L_lambda_simple_arity_check_ok_0030
  8361 000054A5 FF742410                	push qword [rsp + 8 * 2]
  8362 000054A9 6A02                    	push 2
  8363 000054AB E9E82A0100              	jmp L_error_incorrect_arity_simple
  8364                                  .L_lambda_simple_arity_check_ok_0030:
  8365 000054B0 C8000000                	enter 0, 0
  8366                                  	; preparing a tail-call
  8367 000054B4 488B4520                	mov rax, PARAM(0)	; param r
  8368 000054B8 50                      	push rax
  8369 000054B9 488B4528                	mov rax, PARAM(1)	; param a
  8370 000054BD 50                      	push rax
  8371 000054BE 6A02                    	push 2	; arg count
  8372 000054C0 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  8373 000054C8 803805                  	cmp byte [rax], T_undefined
  8374 000054CB 0F84E1290100            	je L_error_fvar_undefined
  8375 000054D1 803804                  	cmp byte [rax], T_closure
  8376 000054D4 0F855C2A0100            	jne L_error_non_closure
  8377 000054DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8378 000054DD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8379 000054E0 FF7500                  	push qword[rbp]
  8380 000054E3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8381 000054E6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8382 000054EA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8383 000054EE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8384 000054F2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8385 000054F5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8386 000054F8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8387 000054FD 4983C103                	add r9, 3 	 ;for getting to the params
  8388 00005501 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8389 00005505 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8390                                  .L_tc_recycle_frame_loop_0035:
  8391 00005508 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8392 0000550B 7410                    	je .L_tc_recycle_frame_done_0035
  8393 0000550D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8394 00005510 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8395 00005513 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8396 00005517 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8397 0000551B EBEB                    	jmp .L_tc_recycle_frame_loop_0035
  8398                                  .L_tc_recycle_frame_done_0035:
  8399 0000551D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8400 0000551E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8401 00005522 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8402 00005525 C9                      	leave
  8403 00005526 C22000                  	ret AND_KILL_FRAME(2)
  8404                                  .L_lambda_simple_end_0030:	; new closure is in rax
  8405 00005529 50                      	push rax
  8406 0000552A 6A03                    	push 3	; arg count
  8407 0000552C 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
  8408 00005534 803805                  	cmp byte [rax], T_undefined
  8409 00005537 0F8475290100            	je L_error_fvar_undefined
  8410 0000553D 803804                  	cmp byte [rax], T_closure
  8411 00005540 0F85F0290100            	jne L_error_non_closure
  8412 00005546 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8413 00005549 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8414 0000554C FF7500                  	push qword[rbp]
  8415 0000554F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8416 00005552 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8417 00005556 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8418 0000555A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8419 0000555E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8420 00005561 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8421 00005564 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8422 00005569 4983C103                	add r9, 3 	 ;for getting to the params
  8423 0000556D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8424 00005571 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8425                                  .L_tc_recycle_frame_loop_0036:
  8426 00005574 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8427 00005577 7410                    	je .L_tc_recycle_frame_done_0036
  8428 00005579 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8429 0000557C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8430 0000557F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8431 00005583 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8432 00005587 EBEB                    	jmp .L_tc_recycle_frame_loop_0036
  8433                                  .L_tc_recycle_frame_done_0036:
  8434 00005589 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8435 0000558A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8436 0000558E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8437 00005591 C9                      	leave
  8438 00005592 C21800                  	ret AND_KILL_FRAME(1)
  8439                                  .L_lambda_simple_end_002f:	; new closure is in rax
  8440 00005595 48890425[9B150000]      	mov qword [free_var_118], rax
  8441 0000559D 48B8-                   	mov rax, sob_void
  8441 0000559F [0000000000000000] 
  8442                                  
  8443 000055A7 4889C7                  	mov rdi, rax
  8444 000055AA E8852C0100              	call print_sexpr_if_not_void
  8445                                  	; preparing a non-tail-call
  8446 000055AF 48B8-                   	mov rax, L_constants + 1993
  8446 000055B1 [C907000000000000] 
  8447 000055B9 50                      	push rax
  8448 000055BA 48B8-                   	mov rax, L_constants + 1993
  8448 000055BC [C907000000000000] 
  8449 000055C4 50                      	push rax
  8450 000055C5 6A02                    	push 2	; arg count
  8451 000055C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8452 000055CC E80E2A0100              	call malloc
  8453 000055D1 50                      	push rax
  8454 000055D2 BF00000000              	mov rdi, 8 * 0	; new rib
  8455 000055D7 E8032A0100              	call malloc
  8456 000055DC 50                      	push rax
  8457 000055DD BF08000000              	mov rdi, 8 * 1	; extended env
  8458 000055E2 E8F8290100              	call malloc
  8459 000055E7 488B7D10                	mov rdi, ENV
  8460 000055EB BE00000000              	mov rsi, 0
  8461 000055F0 BA01000000              	mov rdx, 1
  8462                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  8463 000055F5 4883FE00                	cmp rsi, 0
  8464 000055F9 7410                    	je .L_lambda_simple_env_end_0031
  8465 000055FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8466 000055FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8467 00005603 48FFC6                  	inc rsi
  8468 00005606 48FFC2                  	inc rdx
  8469 00005609 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  8470                                  .L_lambda_simple_env_end_0031:
  8471 0000560B 5B                      	pop rbx
  8472 0000560C BE00000000              	mov rsi, 0
  8473                                  .L_lambda_simple_params_loop_0031:	; copy params
  8474 00005611 4883FE00                	cmp rsi, 0
  8475 00005615 740E                    	je .L_lambda_simple_params_end_0031
  8476 00005617 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8477 0000561C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8478 00005620 48FFC6                  	inc rsi
  8479 00005623 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  8480                                  .L_lambda_simple_params_end_0031:
  8481 00005625 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8482 00005628 4889C3                  	mov rbx, rax
  8483 0000562B 58                      	pop rax
  8484 0000562C C60004                  	mov byte [rax], T_closure
  8485 0000562F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8486 00005633 48C74009[40560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  8487 0000563B E937070000              	jmp .L_lambda_simple_end_0031
  8488                                  .L_lambda_simple_code_0031:	; lambda-simple body
  8489 00005640 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8490 00005646 740B                    	je .L_lambda_simple_arity_check_ok_0031
  8491 00005648 FF742410                	push qword [rsp + 8 * 2]
  8492 0000564C 6A02                    	push 2
  8493 0000564E E945290100              	jmp L_error_incorrect_arity_simple
  8494                                  .L_lambda_simple_arity_check_ok_0031:
  8495 00005653 C8000000                	enter 0, 0
  8496 00005657 BF08000000              	mov rdi, 8*1
  8497 0000565C E87E290100              	call malloc
  8498 00005661 488B5D20                	mov rbx, PARAM(0)
  8499 00005665 488918                  	mov qword[rax], rbx
  8500 00005668 48894520                	mov PARAM(0), rax
  8501 0000566C 48B8-                   	mov rax, sob_void
  8501 0000566E [0000000000000000] 
  8502                                  
  8503 00005676 BF08000000              	mov rdi, 8*1
  8504 0000567B E85F290100              	call malloc
  8505 00005680 488B5D28                	mov rbx, PARAM(1)
  8506 00005684 488918                  	mov qword[rax], rbx
  8507 00005687 48894528                	mov PARAM(1), rax
  8508 0000568B 48B8-                   	mov rax, sob_void
  8508 0000568D [0000000000000000] 
  8509                                  
  8510 00005695 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8511 0000569A E840290100              	call malloc
  8512 0000569F 50                      	push rax
  8513 000056A0 BF10000000              	mov rdi, 8 * 2	; new rib
  8514 000056A5 E835290100              	call malloc
  8515 000056AA 50                      	push rax
  8516 000056AB BF10000000              	mov rdi, 8 * 2	; extended env
  8517 000056B0 E82A290100              	call malloc
  8518 000056B5 488B7D10                	mov rdi, ENV
  8519 000056B9 BE00000000              	mov rsi, 0
  8520 000056BE BA01000000              	mov rdx, 1
  8521                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  8522 000056C3 4883FE01                	cmp rsi, 1
  8523 000056C7 7410                    	je .L_lambda_simple_env_end_0032
  8524 000056C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8525 000056CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8526 000056D1 48FFC6                  	inc rsi
  8527 000056D4 48FFC2                  	inc rdx
  8528 000056D7 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  8529                                  .L_lambda_simple_env_end_0032:
  8530 000056D9 5B                      	pop rbx
  8531 000056DA BE00000000              	mov rsi, 0
  8532                                  .L_lambda_simple_params_loop_0032:	; copy params
  8533 000056DF 4883FE02                	cmp rsi, 2
  8534 000056E3 740E                    	je .L_lambda_simple_params_end_0032
  8535 000056E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8536 000056EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8537 000056EE 48FFC6                  	inc rsi
  8538 000056F1 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  8539                                  .L_lambda_simple_params_end_0032:
  8540 000056F3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8541 000056F6 4889C3                  	mov rbx, rax
  8542 000056F9 58                      	pop rax
  8543 000056FA C60004                  	mov byte [rax], T_closure
  8544 000056FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8545 00005701 48C74009[0E570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  8546 00005709 E92B010000              	jmp .L_lambda_simple_end_0032
  8547                                  .L_lambda_simple_code_0032:	; lambda-simple body
  8548 0000570E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8549 00005714 740B                    	je .L_lambda_simple_arity_check_ok_0032
  8550 00005716 FF742410                	push qword [rsp + 8 * 2]
  8551 0000571A 6A02                    	push 2
  8552 0000571C E977280100              	jmp L_error_incorrect_arity_simple
  8553                                  .L_lambda_simple_arity_check_ok_0032:
  8554 00005721 C8000000                	enter 0, 0
  8555                                  	; preparing a non-tail-call
  8556 00005725 488B4528                	mov rax, PARAM(1)	; param sr
  8557 00005729 50                      	push rax
  8558 0000572A 6A01                    	push 1	; arg count
  8559 0000572C 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8560 00005734 803805                  	cmp byte [rax], T_undefined
  8561 00005737 0F8475270100            	je L_error_fvar_undefined
  8562 0000573D 803804                  	cmp byte [rax], T_closure
  8563 00005740 0F85F0270100            	jne L_error_non_closure
  8564 00005746 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8565 00005749 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8566 0000574C 483D[02000000]          	cmp rax, sob_boolean_false
  8567 00005752 7409                    	je .L_if_else_0011
  8568 00005754 488B4520                	mov rax, PARAM(0)	; param s1
  8569 00005758 E9D8000000              	jmp .L_if_end_0011
  8570                                  .L_if_else_0011:
  8571                                  	; preparing a tail-call
  8572                                  	; preparing a non-tail-call
  8573                                  	; preparing a non-tail-call
  8574 0000575D 488B4528                	mov rax, PARAM(1)	; param sr
  8575 00005761 50                      	push rax
  8576 00005762 6A01                    	push 1	; arg count
  8577 00005764 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8578 0000576C 803805                  	cmp byte [rax], T_undefined
  8579 0000576F 0F843D270100            	je L_error_fvar_undefined
  8580 00005775 803804                  	cmp byte [rax], T_closure
  8581 00005778 0F85B8270100            	jne L_error_non_closure
  8582 0000577E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8583 00005781 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8584 00005784 50                      	push rax
  8585                                  	; preparing a non-tail-call
  8586 00005785 488B4528                	mov rax, PARAM(1)	; param sr
  8587 00005789 50                      	push rax
  8588 0000578A 6A01                    	push 1	; arg count
  8589 0000578C 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8590 00005794 803805                  	cmp byte [rax], T_undefined
  8591 00005797 0F8415270100            	je L_error_fvar_undefined
  8592 0000579D 803804                  	cmp byte [rax], T_closure
  8593 000057A0 0F8590270100            	jne L_error_non_closure
  8594 000057A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8595 000057A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8596 000057AC 50                      	push rax
  8597 000057AD 6A02                    	push 2	; arg count
  8598 000057AF 488B4510                	mov rax, ENV
  8599 000057B3 488B00                  	mov rax, qword [rax + 8 * 0]
  8600 000057B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8601 000057B9 488B00                  	mov rax, qword [rax]
  8602 000057BC 803804                  	cmp byte [rax], T_closure
  8603 000057BF 0F8571270100            	jne L_error_non_closure
  8604 000057C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8605 000057C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8606 000057CB 50                      	push rax
  8607 000057CC 488B4520                	mov rax, PARAM(0)	; param s1
  8608 000057D0 50                      	push rax
  8609 000057D1 6A02                    	push 2	; arg count
  8610 000057D3 488B4510                	mov rax, ENV
  8611 000057D7 488B00                  	mov rax, qword [rax + 8 * 0]
  8612 000057DA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8613 000057DE 488B00                  	mov rax, qword [rax]
  8614 000057E1 803804                  	cmp byte [rax], T_closure
  8615 000057E4 0F854C270100            	jne L_error_non_closure
  8616 000057EA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8617 000057ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8618 000057F0 FF7500                  	push qword[rbp]
  8619 000057F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8620 000057F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8621 000057FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8622 000057FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8623 00005802 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8624 00005805 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8625 00005808 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8626 0000580D 4983C103                	add r9, 3 	 ;for getting to the params
  8627 00005811 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8628 00005815 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8629                                  .L_tc_recycle_frame_loop_0037:
  8630 00005818 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8631 0000581B 7410                    	je .L_tc_recycle_frame_done_0037
  8632 0000581D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8633 00005820 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8634 00005823 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8635 00005827 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8636 0000582B EBEB                    	jmp .L_tc_recycle_frame_loop_0037
  8637                                  .L_tc_recycle_frame_done_0037:
  8638 0000582D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8639 0000582E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8640 00005832 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8641                                  .L_if_end_0011:
  8642 00005835 C9                      	leave
  8643 00005836 C22000                  	ret AND_KILL_FRAME(2)
  8644                                  .L_lambda_simple_end_0032:	; new closure is in rax
  8645 00005839 50                      	push rax
  8646 0000583A 488B4520                	mov rax, PARAM(0)	; param run-1
  8647 0000583E 8F00                    	pop qword [rax]
  8648 00005840 48B8-                   	mov rax, sob_void
  8648 00005842 [0000000000000000] 
  8649                                  
  8650 0000584A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8651 0000584F E88B270100              	call malloc
  8652 00005854 50                      	push rax
  8653 00005855 BF10000000              	mov rdi, 8 * 2	; new rib
  8654 0000585A E880270100              	call malloc
  8655 0000585F 50                      	push rax
  8656 00005860 BF10000000              	mov rdi, 8 * 2	; extended env
  8657 00005865 E875270100              	call malloc
  8658 0000586A 488B7D10                	mov rdi, ENV
  8659 0000586E BE00000000              	mov rsi, 0
  8660 00005873 BA01000000              	mov rdx, 1
  8661                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  8662 00005878 4883FE01                	cmp rsi, 1
  8663 0000587C 7410                    	je .L_lambda_simple_env_end_0033
  8664 0000587E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8665 00005882 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8666 00005886 48FFC6                  	inc rsi
  8667 00005889 48FFC2                  	inc rdx
  8668 0000588C EBEA                    	jmp .L_lambda_simple_env_loop_0033
  8669                                  .L_lambda_simple_env_end_0033:
  8670 0000588E 5B                      	pop rbx
  8671 0000588F BE00000000              	mov rsi, 0
  8672                                  .L_lambda_simple_params_loop_0033:	; copy params
  8673 00005894 4883FE02                	cmp rsi, 2
  8674 00005898 740E                    	je .L_lambda_simple_params_end_0033
  8675 0000589A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8676 0000589F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8677 000058A3 48FFC6                  	inc rsi
  8678 000058A6 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  8679                                  .L_lambda_simple_params_end_0033:
  8680 000058A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8681 000058AB 4889C3                  	mov rbx, rax
  8682 000058AE 58                      	pop rax
  8683 000058AF C60004                  	mov byte [rax], T_closure
  8684 000058B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8685 000058B6 48C74009[C3580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  8686 000058BE E92F010000              	jmp .L_lambda_simple_end_0033
  8687                                  .L_lambda_simple_code_0033:	; lambda-simple body
  8688 000058C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8689 000058C9 740B                    	je .L_lambda_simple_arity_check_ok_0033
  8690 000058CB FF742410                	push qword [rsp + 8 * 2]
  8691 000058CF 6A02                    	push 2
  8692 000058D1 E9C2260100              	jmp L_error_incorrect_arity_simple
  8693                                  .L_lambda_simple_arity_check_ok_0033:
  8694 000058D6 C8000000                	enter 0, 0
  8695                                  	; preparing a non-tail-call
  8696 000058DA 488B4520                	mov rax, PARAM(0)	; param s1
  8697 000058DE 50                      	push rax
  8698 000058DF 6A01                    	push 1	; arg count
  8699 000058E1 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8700 000058E9 803805                  	cmp byte [rax], T_undefined
  8701 000058EC 0F84C0250100            	je L_error_fvar_undefined
  8702 000058F2 803804                  	cmp byte [rax], T_closure
  8703 000058F5 0F853B260100            	jne L_error_non_closure
  8704 000058FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8705 000058FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8706 00005901 483D[02000000]          	cmp rax, sob_boolean_false
  8707 00005907 7409                    	je .L_if_else_0012
  8708 00005909 488B4528                	mov rax, PARAM(1)	; param s2
  8709 0000590D E9DC000000              	jmp .L_if_end_0012
  8710                                  .L_if_else_0012:
  8711                                  	; preparing a tail-call
  8712                                  	; preparing a non-tail-call
  8713 00005912 488B4528                	mov rax, PARAM(1)	; param s2
  8714 00005916 50                      	push rax
  8715                                  	; preparing a non-tail-call
  8716 00005917 488B4520                	mov rax, PARAM(0)	; param s1
  8717 0000591B 50                      	push rax
  8718 0000591C 6A01                    	push 1	; arg count
  8719 0000591E 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8720 00005926 803805                  	cmp byte [rax], T_undefined
  8721 00005929 0F8483250100            	je L_error_fvar_undefined
  8722 0000592F 803804                  	cmp byte [rax], T_closure
  8723 00005932 0F85FE250100            	jne L_error_non_closure
  8724 00005938 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8725 0000593B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8726 0000593E 50                      	push rax
  8727 0000593F 6A02                    	push 2	; arg count
  8728 00005941 488B4510                	mov rax, ENV
  8729 00005945 488B00                  	mov rax, qword [rax + 8 * 0]
  8730 00005948 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8731 0000594C 488B00                  	mov rax, qword [rax]
  8732 0000594F 803804                  	cmp byte [rax], T_closure
  8733 00005952 0F85DE250100            	jne L_error_non_closure
  8734 00005958 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8735 0000595B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8736 0000595E 50                      	push rax
  8737                                  	; preparing a non-tail-call
  8738 0000595F 488B4520                	mov rax, PARAM(0)	; param s1
  8739 00005963 50                      	push rax
  8740 00005964 6A01                    	push 1	; arg count
  8741 00005966 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8742 0000596E 803805                  	cmp byte [rax], T_undefined
  8743 00005971 0F843B250100            	je L_error_fvar_undefined
  8744 00005977 803804                  	cmp byte [rax], T_closure
  8745 0000597A 0F85B6250100            	jne L_error_non_closure
  8746 00005980 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8747 00005983 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8748 00005986 50                      	push rax
  8749 00005987 6A02                    	push 2	; arg count
  8750 00005989 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  8751 00005991 803805                  	cmp byte [rax], T_undefined
  8752 00005994 0F8418250100            	je L_error_fvar_undefined
  8753 0000599A 803804                  	cmp byte [rax], T_closure
  8754 0000599D 0F8593250100            	jne L_error_non_closure
  8755 000059A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8756 000059A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8757 000059A9 FF7500                  	push qword[rbp]
  8758 000059AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8759 000059AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8760 000059B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8761 000059B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8762 000059BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8763 000059BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8764 000059C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8765 000059C6 4983C103                	add r9, 3 	 ;for getting to the params
  8766 000059CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8767 000059CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8768                                  .L_tc_recycle_frame_loop_0038:
  8769 000059D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8770 000059D4 7410                    	je .L_tc_recycle_frame_done_0038
  8771 000059D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8772 000059D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8773 000059DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8774 000059E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8775 000059E4 EBEB                    	jmp .L_tc_recycle_frame_loop_0038
  8776                                  .L_tc_recycle_frame_done_0038:
  8777 000059E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8778 000059E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8779 000059EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8780                                  .L_if_end_0012:
  8781 000059EE C9                      	leave
  8782 000059EF C22000                  	ret AND_KILL_FRAME(2)
  8783                                  .L_lambda_simple_end_0033:	; new closure is in rax
  8784 000059F2 50                      	push rax
  8785 000059F3 488B4528                	mov rax, PARAM(1)	; param run-2
  8786 000059F7 8F00                    	pop qword [rax]
  8787 000059F9 48B8-                   	mov rax, sob_void
  8787 000059FB [0000000000000000] 
  8788                                  
  8789 00005A03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8790 00005A08 E8D2250100              	call malloc
  8791 00005A0D 50                      	push rax
  8792 00005A0E BF10000000              	mov rdi, 8 * 2	; new rib
  8793 00005A13 E8C7250100              	call malloc
  8794 00005A18 50                      	push rax
  8795 00005A19 BF10000000              	mov rdi, 8 * 2	; extended env
  8796 00005A1E E8BC250100              	call malloc
  8797 00005A23 488B7D10                	mov rdi, ENV
  8798 00005A27 BE00000000              	mov rsi, 0
  8799 00005A2C BA01000000              	mov rdx, 1
  8800                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  8801 00005A31 4883FE01                	cmp rsi, 1
  8802 00005A35 7410                    	je .L_lambda_opt_env_end_0007
  8803 00005A37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8804 00005A3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8805 00005A3F 48FFC6                  	inc rsi
  8806 00005A42 48FFC2                  	inc rdx
  8807 00005A45 EBEA                    	jmp .L_lambda_opt_env_loop_0007
  8808                                  .L_lambda_opt_env_end_0007:
  8809 00005A47 5B                      	pop rbx
  8810 00005A48 BE00000000              	mov rsi, 0
  8811                                  .L_lambda_opt_params_loop_0007:	; copy params
  8812 00005A4D 4883FE02                	cmp rsi, 2
  8813 00005A51 740E                    	je .L_lambda_opt_params_end_0007
  8814 00005A53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8815 00005A58 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8816 00005A5C 48FFC6                  	inc rsi
  8817 00005A5F EBEC                    	jmp .L_lambda_opt_params_loop_0007
  8818                                  .L_lambda_opt_params_end_0007:
  8819 00005A61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8820 00005A64 4889C3                  	mov rbx, rax
  8821 00005A67 58                      	pop rax
  8822 00005A68 C60004                  	mov byte [rax], T_closure
  8823 00005A6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8824 00005A6F 48C74009[7C5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  8825 00005A77 E9F7020000              	jmp .L_lambda_opt_end_0007
  8826                                  .L_lambda_opt_code_0007:	; lambda-opt body
  8827 00005A7C 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8828 00005A82 7411                    	je .L_lambda_opt_arity_check_exact_0007
  8829 00005A84 0F8F39010000            	jg .L_lambda_opt_arity_check_more_0007
  8830 00005A8A FF742410                	push qword [rsp + 8 * 2]
  8831 00005A8E 6A00                    	push 0
  8832 00005A90 E917250100              	jmp L_error_incorrect_arity_opt
  8833                                  .L_lambda_opt_arity_check_exact_0007:
  8834 00005A95 4883EC08                	sub rsp, 8
  8835 00005A99 488B442408              	mov rax, qword[rsp + 8 *1]
  8836 00005A9E 48890424                	mov qword[rsp], rax  
  8837 00005AA2 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8838 00005AA7 4889442408              	mov qword[rsp + 8 * 1], rax
  8839 00005AAC B801000000              	mov rax, 1
  8840 00005AB1 4889442410              	mov qword[rsp + 8 *2], rax
  8841 00005AB6 48B8-                   	mov rax, sob_nil
  8841 00005AB8 [0100000000000000] 
  8842 00005AC0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8843 00005AC5 C8000000                	enter 0, 0
  8844                                  	; preparing a non-tail-call
  8845 00005AC9 488B4520                	mov rax, PARAM(0)	; param s
  8846 00005ACD 50                      	push rax
  8847 00005ACE 6A01                    	push 1	; arg count
  8848 00005AD0 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8849 00005AD8 803805                  	cmp byte [rax], T_undefined
  8850 00005ADB 0F84D1230100            	je L_error_fvar_undefined
  8851 00005AE1 803804                  	cmp byte [rax], T_closure
  8852 00005AE4 0F854C240100            	jne L_error_non_closure
  8853 00005AEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8854 00005AED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8855 00005AF0 483D[02000000]          	cmp rax, sob_boolean_false
  8856 00005AF6 740F                    	je .L_if_else_0014
  8857 00005AF8 48B8-                   	mov rax, L_constants + 1
  8857 00005AFA [0100000000000000] 
  8858 00005B02 E9B3000000              	jmp .L_if_end_0014
  8859                                  .L_if_else_0014:
  8860                                  	; preparing a tail-call
  8861                                  	; preparing a non-tail-call
  8862 00005B07 488B4520                	mov rax, PARAM(0)	; param s
  8863 00005B0B 50                      	push rax
  8864 00005B0C 6A01                    	push 1	; arg count
  8865 00005B0E 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8866 00005B16 803805                  	cmp byte [rax], T_undefined
  8867 00005B19 0F8493230100            	je L_error_fvar_undefined
  8868 00005B1F 803804                  	cmp byte [rax], T_closure
  8869 00005B22 0F850E240100            	jne L_error_non_closure
  8870 00005B28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8871 00005B2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8872 00005B2E 50                      	push rax
  8873                                  	; preparing a non-tail-call
  8874 00005B2F 488B4520                	mov rax, PARAM(0)	; param s
  8875 00005B33 50                      	push rax
  8876 00005B34 6A01                    	push 1	; arg count
  8877 00005B36 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  8878 00005B3E 803805                  	cmp byte [rax], T_undefined
  8879 00005B41 0F846B230100            	je L_error_fvar_undefined
  8880 00005B47 803804                  	cmp byte [rax], T_closure
  8881 00005B4A 0F85E6230100            	jne L_error_non_closure
  8882 00005B50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8883 00005B53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8884 00005B56 50                      	push rax
  8885 00005B57 6A02                    	push 2	; arg count
  8886 00005B59 488B4510                	mov rax, ENV
  8887 00005B5D 488B00                  	mov rax, qword [rax + 8 * 0]
  8888 00005B60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8889 00005B63 488B00                  	mov rax, qword [rax]
  8890 00005B66 803804                  	cmp byte [rax], T_closure
  8891 00005B69 0F85C7230100            	jne L_error_non_closure
  8892 00005B6F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8893 00005B72 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8894 00005B75 FF7500                  	push qword[rbp]
  8895 00005B78 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8896 00005B7B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8897 00005B7F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8898 00005B83 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8899 00005B87 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8900 00005B8A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8901 00005B8D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8902 00005B92 4983C103                	add r9, 3 	 ;for getting to the params
  8903 00005B96 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8904 00005B9A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8905                                  .L_tc_recycle_frame_loop_003a:
  8906 00005B9D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8907 00005BA0 7410                    	je .L_tc_recycle_frame_done_003a
  8908 00005BA2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8909 00005BA5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8910 00005BA8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8911 00005BAC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8912 00005BB0 EBEB                    	jmp .L_tc_recycle_frame_loop_003a
  8913                                  .L_tc_recycle_frame_done_003a:
  8914 00005BB2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8915 00005BB3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8916 00005BB7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8917                                  .L_if_end_0014:
  8918 00005BBA C9                      	leave
  8919 00005BBB C21800                  	ret AND_KILL_FRAME(1)
  8920 00005BBE E9B0010000              	jmp .L_lambda_opt_end_0007	; new closure is in rax
  8921                                  .L_lambda_opt_arity_check_more_0007:
  8922 00005BC3 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  8923 00005BC8 49B9-                   	mov r9, sob_nil
  8923 00005BCA [0100000000000000] 
  8924 00005BD2 4889E3                  	mov rbx, rsp 
  8925 00005BD5 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  8926 00005BD9 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  8927 00005BDC 49C1E003                	shl r8, 3
  8928 00005BE0 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  8929 00005BE3 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  8930                                  .L_lambda_opt_stack_shrink_loop_0007:
  8931 00005BE8 4983F800                	cmp r8, 0
  8932 00005BEC 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  8933 00005BEE BF11000000              	mov rdi, 1+8+8	;for pair
  8934 00005BF3 E8E7230100              	call malloc	 ;to create the pair in the stack
  8935 00005BF8 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  8936 00005BFB 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  8937 00005BFE 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  8938 00005C02 4C894809                 	mov qword[rax+1+8],r9
  8939 00005C06 4989C1                  	mov r9, rax	 ; for the recursion 
  8940 00005C09 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  8941 00005C0C 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  8942 00005C10 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  8943                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  8944 00005C12 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  8945 00005C17 4883E901                	sub rcx, 1
  8946 00005C1B 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  8947 00005C1F 4801CC                  	add rsp, rcx	 ;shrinking the stack
  8948 00005C22 4889E0                  	mov rax, rsp
  8949 00005C25 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  8950 00005C28 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  8951 00005C2C 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  8952 00005C2F 4883C018                	add rax, 3 * 8 	;now rax is param 0
  8953 00005C33 49C1E003                	shl r8, 3 	; convert to byte
  8954 00005C37 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  8955 00005C3A 4C8908                  	mov qword[rax], r9	;puting the list at the top
  8956 00005C3D 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  8957 00005C41 4889E3                  	mov rbx, rsp 
  8958 00005C44 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  8959 00005C47 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
  8960 00005C4D 49FFCA                  	dec r10 
  8961 00005C50 49C1E203                	shl r10, 3	;to get bytes
  8962 00005C54 4883C318                	add rbx, 3*8 	;rbx is the first param
  8963 00005C58 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  8964 00005C5B 4889E0                  	mov rax, rsp
  8965 00005C5E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  8966 00005C61 48C744241001000000      	mov qword [rsp+2*8], 1
  8967 00005C6A 488B5808                	mov rbx, qword[rax + 8 *1]
  8968 00005C6E 48895C2408              	mov qword [rsp + 1*8] ,rbx
  8969 00005C73 488B18                  	mov rbx, qword[rax]
  8970 00005C76 48891C24                	mov qword [rsp], rbx
  8971 00005C7A C8000000                	enter 0, 0
  8972                                  	; preparing a non-tail-call
  8973 00005C7E 488B4520                	mov rax, PARAM(0)	; param s
  8974 00005C82 50                      	push rax
  8975 00005C83 6A01                    	push 1	; arg count
  8976 00005C85 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  8977 00005C8D 803805                  	cmp byte [rax], T_undefined
  8978 00005C90 0F841C220100            	je L_error_fvar_undefined
  8979 00005C96 803804                  	cmp byte [rax], T_closure
  8980 00005C99 0F8597220100            	jne L_error_non_closure
  8981 00005C9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8982 00005CA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8983 00005CA5 483D[02000000]          	cmp rax, sob_boolean_false
  8984 00005CAB 740F                    	je .L_if_else_0013
  8985 00005CAD 48B8-                   	mov rax, L_constants + 1
  8985 00005CAF [0100000000000000] 
  8986 00005CB7 E9B3000000              	jmp .L_if_end_0013
  8987                                  .L_if_else_0013:
  8988                                  	; preparing a tail-call
  8989                                  	; preparing a non-tail-call
  8990 00005CBC 488B4520                	mov rax, PARAM(0)	; param s
  8991 00005CC0 50                      	push rax
  8992 00005CC1 6A01                    	push 1	; arg count
  8993 00005CC3 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  8994 00005CCB 803805                  	cmp byte [rax], T_undefined
  8995 00005CCE 0F84DE210100            	je L_error_fvar_undefined
  8996 00005CD4 803804                  	cmp byte [rax], T_closure
  8997 00005CD7 0F8559220100            	jne L_error_non_closure
  8998 00005CDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8999 00005CE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9000 00005CE3 50                      	push rax
  9001                                  	; preparing a non-tail-call
  9002 00005CE4 488B4520                	mov rax, PARAM(0)	; param s
  9003 00005CE8 50                      	push rax
  9004 00005CE9 6A01                    	push 1	; arg count
  9005 00005CEB 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  9006 00005CF3 803805                  	cmp byte [rax], T_undefined
  9007 00005CF6 0F84B6210100            	je L_error_fvar_undefined
  9008 00005CFC 803804                  	cmp byte [rax], T_closure
  9009 00005CFF 0F8531220100            	jne L_error_non_closure
  9010 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9011 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9012 00005D0B 50                      	push rax
  9013 00005D0C 6A02                    	push 2	; arg count
  9014 00005D0E 488B4510                	mov rax, ENV
  9015 00005D12 488B00                  	mov rax, qword [rax + 8 * 0]
  9016 00005D15 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  9017 00005D18 488B00                  	mov rax, qword [rax]
  9018 00005D1B 803804                  	cmp byte [rax], T_closure
  9019 00005D1E 0F8512220100            	jne L_error_non_closure
  9020 00005D24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9021 00005D27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9022 00005D2A FF7500                  	push qword[rbp]
  9023 00005D2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9024 00005D30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9025 00005D34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9026 00005D38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9027 00005D3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9028 00005D3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9029 00005D42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9030 00005D47 4983C103                	add r9, 3 	 ;for getting to the params
  9031 00005D4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9032 00005D4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9033                                  .L_tc_recycle_frame_loop_0039:
  9034 00005D52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9035 00005D55 7410                    	je .L_tc_recycle_frame_done_0039
  9036 00005D57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9037 00005D5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9038 00005D5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9039 00005D61 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9040 00005D65 EBEB                    	jmp .L_tc_recycle_frame_loop_0039
  9041                                  .L_tc_recycle_frame_done_0039:
  9042 00005D67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9043 00005D68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9044 00005D6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9045                                  .L_if_end_0013:
  9046 00005D6F C9                      	leave
  9047 00005D70 C21800                  	ret AND_KILL_FRAME(1)
  9048                                  .L_lambda_opt_end_0007:	; new closure is in rax
  9049 00005D73 C9                      	leave
  9050 00005D74 C22000                  	ret AND_KILL_FRAME(2)
  9051                                  .L_lambda_simple_end_0031:	; new closure is in rax
  9052 00005D77 803804                  	cmp byte [rax], T_closure
  9053 00005D7A 0F85B6210100            	jne L_error_non_closure
  9054 00005D80 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9055 00005D83 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9056 00005D86 48890425[E50F0000]      	mov qword [free_var_32], rax
  9057 00005D8E 48B8-                   	mov rax, sob_void
  9057 00005D90 [0000000000000000] 
  9058                                  
  9059 00005D98 4889C7                  	mov rdi, rax
  9060 00005D9B E894240100              	call print_sexpr_if_not_void
  9061                                  	; preparing a non-tail-call
  9062 00005DA0 48B8-                   	mov rax, L_constants + 1993
  9062 00005DA2 [C907000000000000] 
  9063 00005DAA 50                      	push rax
  9064 00005DAB 6A01                    	push 1	; arg count
  9065 00005DAD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9066 00005DB2 E828220100              	call malloc
  9067 00005DB7 50                      	push rax
  9068 00005DB8 BF00000000              	mov rdi, 8 * 0	; new rib
  9069 00005DBD E81D220100              	call malloc
  9070 00005DC2 50                      	push rax
  9071 00005DC3 BF08000000              	mov rdi, 8 * 1	; extended env
  9072 00005DC8 E812220100              	call malloc
  9073 00005DCD 488B7D10                	mov rdi, ENV
  9074 00005DD1 BE00000000              	mov rsi, 0
  9075 00005DD6 BA01000000              	mov rdx, 1
  9076                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  9077 00005DDB 4883FE00                	cmp rsi, 0
  9078 00005DDF 7410                    	je .L_lambda_simple_env_end_0034
  9079 00005DE1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9080 00005DE5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9081 00005DE9 48FFC6                  	inc rsi
  9082 00005DEC 48FFC2                  	inc rdx
  9083 00005DEF EBEA                    	jmp .L_lambda_simple_env_loop_0034
  9084                                  .L_lambda_simple_env_end_0034:
  9085 00005DF1 5B                      	pop rbx
  9086 00005DF2 BE00000000              	mov rsi, 0
  9087                                  .L_lambda_simple_params_loop_0034:	; copy params
  9088 00005DF7 4883FE00                	cmp rsi, 0
  9089 00005DFB 740E                    	je .L_lambda_simple_params_end_0034
  9090 00005DFD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9091 00005E02 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9092 00005E06 48FFC6                  	inc rsi
  9093 00005E09 EBEC                    	jmp .L_lambda_simple_params_loop_0034
  9094                                  .L_lambda_simple_params_end_0034:
  9095 00005E0B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9096 00005E0E 4889C3                  	mov rbx, rax
  9097 00005E11 58                      	pop rax
  9098 00005E12 C60004                  	mov byte [rax], T_closure
  9099 00005E15 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9100 00005E19 48C74009[265E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  9101 00005E21 E9D4040000              	jmp .L_lambda_simple_end_0034
  9102                                  .L_lambda_simple_code_0034:	; lambda-simple body
  9103 00005E26 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9104 00005E2C 740B                    	je .L_lambda_simple_arity_check_ok_0034
  9105 00005E2E FF742410                	push qword [rsp + 8 * 2]
  9106 00005E32 6A01                    	push 1
  9107 00005E34 E95F210100              	jmp L_error_incorrect_arity_simple
  9108                                  .L_lambda_simple_arity_check_ok_0034:
  9109 00005E39 C8000000                	enter 0, 0
  9110 00005E3D BF08000000              	mov rdi, 8*1
  9111 00005E42 E898210100              	call malloc
  9112 00005E47 488B5D20                	mov rbx, PARAM(0)
  9113 00005E4B 488918                  	mov qword[rax], rbx
  9114 00005E4E 48894520                	mov PARAM(0), rax
  9115 00005E52 48B8-                   	mov rax, sob_void
  9115 00005E54 [0000000000000000] 
  9116                                  
  9117 00005E5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9118 00005E61 E879210100              	call malloc
  9119 00005E66 50                      	push rax
  9120 00005E67 BF08000000              	mov rdi, 8 * 1	; new rib
  9121 00005E6C E86E210100              	call malloc
  9122 00005E71 50                      	push rax
  9123 00005E72 BF10000000              	mov rdi, 8 * 2	; extended env
  9124 00005E77 E863210100              	call malloc
  9125 00005E7C 488B7D10                	mov rdi, ENV
  9126 00005E80 BE00000000              	mov rsi, 0
  9127 00005E85 BA01000000              	mov rdx, 1
  9128                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  9129 00005E8A 4883FE01                	cmp rsi, 1
  9130 00005E8E 7410                    	je .L_lambda_simple_env_end_0035
  9131 00005E90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9132 00005E94 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9133 00005E98 48FFC6                  	inc rsi
  9134 00005E9B 48FFC2                  	inc rdx
  9135 00005E9E EBEA                    	jmp .L_lambda_simple_env_loop_0035
  9136                                  .L_lambda_simple_env_end_0035:
  9137 00005EA0 5B                      	pop rbx
  9138 00005EA1 BE00000000              	mov rsi, 0
  9139                                  .L_lambda_simple_params_loop_0035:	; copy params
  9140 00005EA6 4883FE01                	cmp rsi, 1
  9141 00005EAA 740E                    	je .L_lambda_simple_params_end_0035
  9142 00005EAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9143 00005EB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9144 00005EB5 48FFC6                  	inc rsi
  9145 00005EB8 EBEC                    	jmp .L_lambda_simple_params_loop_0035
  9146                                  .L_lambda_simple_params_end_0035:
  9147 00005EBA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9148 00005EBD 4889C3                  	mov rbx, rax
  9149 00005EC0 58                      	pop rax
  9150 00005EC1 C60004                  	mov byte [rax], T_closure
  9151 00005EC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9152 00005EC8 48C74009[D55E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  9153 00005ED0 E96E010000              	jmp .L_lambda_simple_end_0035
  9154                                  .L_lambda_simple_code_0035:	; lambda-simple body
  9155 00005ED5 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9156 00005EDB 740B                    	je .L_lambda_simple_arity_check_ok_0035
  9157 00005EDD FF742410                	push qword [rsp + 8 * 2]
  9158 00005EE1 6A03                    	push 3
  9159 00005EE3 E9B0200100              	jmp L_error_incorrect_arity_simple
  9160                                  .L_lambda_simple_arity_check_ok_0035:
  9161 00005EE8 C8000000                	enter 0, 0
  9162                                  	; preparing a non-tail-call
  9163 00005EEC 488B4530                	mov rax, PARAM(2)	; param ss
  9164 00005EF0 50                      	push rax
  9165 00005EF1 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  9166 00005EF9 803805                  	cmp byte [rax], T_undefined
  9167 00005EFC 0F84B01F0100            	je L_error_fvar_undefined
  9168 00005F02 50                      	push rax
  9169 00005F03 6A02                    	push 2	; arg count
  9170 00005F05 488B0425[13150000]      	mov rax, qword [free_var_110]	; free var ormap
  9171 00005F0D 803805                  	cmp byte [rax], T_undefined
  9172 00005F10 0F849C1F0100            	je L_error_fvar_undefined
  9173 00005F16 803804                  	cmp byte [rax], T_closure
  9174 00005F19 0F8517200100            	jne L_error_non_closure
  9175 00005F1F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9176 00005F22 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9177 00005F25 483D[02000000]          	cmp rax, sob_boolean_false
  9178 00005F2B 7409                    	je .L_if_else_0015
  9179 00005F2D 488B4528                	mov rax, PARAM(1)	; param unit
  9180 00005F31 E909010000              	jmp .L_if_end_0015
  9181                                  .L_if_else_0015:
  9182                                  	; preparing a tail-call
  9183                                  	; preparing a non-tail-call
  9184 00005F36 488B4530                	mov rax, PARAM(2)	; param ss
  9185 00005F3A 50                      	push rax
  9186 00005F3B 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  9187 00005F43 803805                  	cmp byte [rax], T_undefined
  9188 00005F46 0F84661F0100            	je L_error_fvar_undefined
  9189 00005F4C 50                      	push rax
  9190 00005F4D 6A02                    	push 2	; arg count
  9191 00005F4F 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9192 00005F57 803805                  	cmp byte [rax], T_undefined
  9193 00005F5A 0F84521F0100            	je L_error_fvar_undefined
  9194 00005F60 803804                  	cmp byte [rax], T_closure
  9195 00005F63 0F85CD1F0100            	jne L_error_non_closure
  9196 00005F69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9197 00005F6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9198 00005F6F 50                      	push rax
  9199                                  	; preparing a non-tail-call
  9200                                  	; preparing a non-tail-call
  9201 00005F70 488B4530                	mov rax, PARAM(2)	; param ss
  9202 00005F74 50                      	push rax
  9203 00005F75 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  9204 00005F7D 803805                  	cmp byte [rax], T_undefined
  9205 00005F80 0F842C1F0100            	je L_error_fvar_undefined
  9206 00005F86 50                      	push rax
  9207 00005F87 6A02                    	push 2	; arg count
  9208 00005F89 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9209 00005F91 803805                  	cmp byte [rax], T_undefined
  9210 00005F94 0F84181F0100            	je L_error_fvar_undefined
  9211 00005F9A 803804                  	cmp byte [rax], T_closure
  9212 00005F9D 0F85931F0100            	jne L_error_non_closure
  9213 00005FA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9214 00005FA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9215 00005FA9 50                      	push rax
  9216 00005FAA 488B4528                	mov rax, PARAM(1)	; param unit
  9217 00005FAE 50                      	push rax
  9218 00005FAF 488B4520                	mov rax, PARAM(0)	; param f
  9219 00005FB3 50                      	push rax
  9220 00005FB4 6A03                    	push 3	; arg count
  9221 00005FB6 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  9222 00005FBE 803805                  	cmp byte [rax], T_undefined
  9223 00005FC1 0F84EB1E0100            	je L_error_fvar_undefined
  9224 00005FC7 803804                  	cmp byte [rax], T_closure
  9225 00005FCA 0F85661F0100            	jne L_error_non_closure
  9226 00005FD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9227 00005FD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9228 00005FD6 50                      	push rax
  9229 00005FD7 488B4520                	mov rax, PARAM(0)	; param f
  9230 00005FDB 50                      	push rax
  9231 00005FDC 6A03                    	push 3	; arg count
  9232 00005FDE 488B4510                	mov rax, ENV
  9233 00005FE2 488B00                  	mov rax, qword [rax + 8 * 0]
  9234 00005FE5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9235 00005FE8 488B00                  	mov rax, qword [rax]
  9236 00005FEB 803804                  	cmp byte [rax], T_closure
  9237 00005FEE 0F85421F0100            	jne L_error_non_closure
  9238 00005FF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9239 00005FF7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9240 00005FFA FF7500                  	push qword[rbp]
  9241 00005FFD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9242 00006000 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9243 00006004 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9244 00006008 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9245 0000600C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9246 0000600F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9247 00006012 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9248 00006017 4983C103                	add r9, 3 	 ;for getting to the params
  9249 0000601B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9250 0000601F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9251                                  .L_tc_recycle_frame_loop_003b:
  9252 00006022 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9253 00006025 7410                    	je .L_tc_recycle_frame_done_003b
  9254 00006027 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9255 0000602A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9256 0000602D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9257 00006031 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9258 00006035 EBEB                    	jmp .L_tc_recycle_frame_loop_003b
  9259                                  .L_tc_recycle_frame_done_003b:
  9260 00006037 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9261 00006038 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9262 0000603C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9263                                  .L_if_end_0015:
  9264 0000603F C9                      	leave
  9265 00006040 C22800                  	ret AND_KILL_FRAME(3)
  9266                                  .L_lambda_simple_end_0035:	; new closure is in rax
  9267 00006043 50                      	push rax
  9268 00006044 488B4520                	mov rax, PARAM(0)	; param run
  9269 00006048 8F00                    	pop qword [rax]
  9270 0000604A 48B8-                   	mov rax, sob_void
  9270 0000604C [0000000000000000] 
  9271                                  
  9272 00006054 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9273 00006059 E8811F0100              	call malloc
  9274 0000605E 50                      	push rax
  9275 0000605F BF08000000              	mov rdi, 8 * 1	; new rib
  9276 00006064 E8761F0100              	call malloc
  9277 00006069 50                      	push rax
  9278 0000606A BF10000000              	mov rdi, 8 * 2	; extended env
  9279 0000606F E86B1F0100              	call malloc
  9280 00006074 488B7D10                	mov rdi, ENV
  9281 00006078 BE00000000              	mov rsi, 0
  9282 0000607D BA01000000              	mov rdx, 1
  9283                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  9284 00006082 4883FE01                	cmp rsi, 1
  9285 00006086 7410                    	je .L_lambda_opt_env_end_0008
  9286 00006088 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9287 0000608C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9288 00006090 48FFC6                  	inc rsi
  9289 00006093 48FFC2                  	inc rdx
  9290 00006096 EBEA                    	jmp .L_lambda_opt_env_loop_0008
  9291                                  .L_lambda_opt_env_end_0008:
  9292 00006098 5B                      	pop rbx
  9293 00006099 BE00000000              	mov rsi, 0
  9294                                  .L_lambda_opt_params_loop_0008:	; copy params
  9295 0000609E 4883FE01                	cmp rsi, 1
  9296 000060A2 740E                    	je .L_lambda_opt_params_end_0008
  9297 000060A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9298 000060A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9299 000060AD 48FFC6                  	inc rsi
  9300 000060B0 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  9301                                  .L_lambda_opt_params_end_0008:
  9302 000060B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9303 000060B5 4889C3                  	mov rbx, rax
  9304 000060B8 58                      	pop rax
  9305 000060B9 C60004                  	mov byte [rax], T_closure
  9306 000060BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9307 000060C0 48C74009[CD600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  9308 000060C8 E929020000              	jmp .L_lambda_opt_end_0008
  9309                                  .L_lambda_opt_code_0008:	; lambda-opt body
  9310 000060CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9311 000060D3 7411                    	je .L_lambda_opt_arity_check_exact_0008
  9312 000060D5 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0008
  9313 000060DB FF742410                	push qword [rsp + 8 * 2]
  9314 000060DF 6A02                    	push 2
  9315 000060E1 E9C61E0100              	jmp L_error_incorrect_arity_opt
  9316                                  .L_lambda_opt_arity_check_exact_0008:
  9317 000060E6 4883EC08                	sub rsp, 8
  9318 000060EA 488B442408              	mov rax, qword[rsp + 8 *1]
  9319 000060EF 48890424                	mov qword[rsp], rax  
  9320 000060F3 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9321 000060F8 4889442408              	mov qword[rsp + 8 * 1], rax
  9322 000060FD B803000000              	mov rax, 3
  9323 00006102 4889442410              	mov qword[rsp + 8 *2], rax
  9324 00006107 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9325 0000610C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9326 00006111 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9327 00006116 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9328 0000611B 48B8-                   	mov rax, sob_nil
  9328 0000611D [0100000000000000] 
  9329 00006125 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9330 0000612A C8000000                	enter 0, 0
  9331                                  	; preparing a tail-call
  9332 0000612E 488B4530                	mov rax, PARAM(2)	; param ss
  9333 00006132 50                      	push rax
  9334 00006133 488B4528                	mov rax, PARAM(1)	; param unit
  9335 00006137 50                      	push rax
  9336 00006138 488B4520                	mov rax, PARAM(0)	; param f
  9337 0000613C 50                      	push rax
  9338 0000613D 6A03                    	push 3	; arg count
  9339 0000613F 488B4510                	mov rax, ENV
  9340 00006143 488B00                  	mov rax, qword [rax + 8 * 0]
  9341 00006146 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9342 00006149 488B00                  	mov rax, qword [rax]
  9343 0000614C 803804                  	cmp byte [rax], T_closure
  9344 0000614F 0F85E11D0100            	jne L_error_non_closure
  9345 00006155 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9346 00006158 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9347 0000615B FF7500                  	push qword[rbp]
  9348 0000615E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9349 00006161 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9350 00006165 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9351 00006169 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9352 0000616D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9353 00006170 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9354 00006173 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9355 00006178 4983C103                	add r9, 3 	 ;for getting to the params
  9356 0000617C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9357 00006180 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9358                                  .L_tc_recycle_frame_loop_003d:
  9359 00006183 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9360 00006186 7410                    	je .L_tc_recycle_frame_done_003d
  9361 00006188 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9362 0000618B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9363 0000618E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9364 00006192 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9365 00006196 EBEB                    	jmp .L_tc_recycle_frame_loop_003d
  9366                                  .L_tc_recycle_frame_done_003d:
  9367 00006198 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9368 00006199 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9369 0000619D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9370 000061A0 C9                      	leave
  9371 000061A1 C22800                  	ret AND_KILL_FRAME(3)
  9372 000061A4 E94D010000              	jmp .L_lambda_opt_end_0008	; new closure is in rax
  9373                                  .L_lambda_opt_arity_check_more_0008:
  9374 000061A9 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9375 000061AE 49B9-                   	mov r9, sob_nil
  9375 000061B0 [0100000000000000] 
  9376 000061B8 4889E3                  	mov rbx, rsp 
  9377 000061BB 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9378 000061BF 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9379 000061C2 49C1E003                	shl r8, 3
  9380 000061C6 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9381 000061C9 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9382                                  .L_lambda_opt_stack_shrink_loop_0008:
  9383 000061CE 4983F802                	cmp r8, 2
  9384 000061D2 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  9385 000061D4 BF11000000              	mov rdi, 1+8+8	;for pair
  9386 000061D9 E8011E0100              	call malloc	 ;to create the pair in the stack
  9387 000061DE C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  9388 000061E1 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  9389 000061E4 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  9390 000061E8 4C894809                 	mov qword[rax+1+8],r9
  9391 000061EC 4989C1                  	mov r9, rax	 ; for the recursion 
  9392 000061EF 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  9393 000061F2 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  9394 000061F6 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  9395                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  9396 000061F8 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  9397 000061FD 4883E903                	sub rcx, 3
  9398 00006201 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  9399 00006205 4801CC                  	add rsp, rcx	 ;shrinking the stack
  9400 00006208 4889E0                  	mov rax, rsp
  9401 0000620B 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  9402 0000620E 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  9403 00006212 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  9404 00006215 4883C018                	add rax, 3 * 8 	;now rax is param 0
  9405 00006219 49C1E003                	shl r8, 3 	; convert to byte
  9406 0000621D 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  9407 00006220 4C8908                  	mov qword[rax], r9	;puting the list at the top
  9408 00006223 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  9409 00006227 4889E3                  	mov rbx, rsp 
  9410 0000622A 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  9411 0000622D 41BA02000000            	mov r10, 2 	 ;r10 is the not opt params length
  9412 00006233 49FFCA                  	dec r10 
  9413 00006236 49C1E203                	shl r10, 3	;to get bytes
  9414 0000623A 4883C318                	add rbx, 3*8 	;rbx is the first param
  9415 0000623E 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  9416 00006241 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9417                                  
  9418 00006244 4C8900                              	mov qword[rax], r8
  9419 00006247 4883E808                            	sub rax, 8
  9420 0000624B 4883EB08                	sub rbx, 8
  9421 0000624F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9422                                  
  9423 00006252 4C8900                              	mov qword[rax], r8
  9424 00006255 4883E808                            	sub rax, 8
  9425 00006259 4883EB08                	sub rbx, 8
  9426 0000625D 4889E0                  	mov rax, rsp
  9427 00006260 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9428 00006263 48C744241003000000      	mov qword [rsp+2*8], 3
  9429 0000626C 488B5808                	mov rbx, qword[rax + 8 *1]
  9430 00006270 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9431 00006275 488B18                  	mov rbx, qword[rax]
  9432 00006278 48891C24                	mov qword [rsp], rbx
  9433 0000627C C8000000                	enter 0, 0
  9434                                  	; preparing a tail-call
  9435 00006280 488B4530                	mov rax, PARAM(2)	; param ss
  9436 00006284 50                      	push rax
  9437 00006285 488B4528                	mov rax, PARAM(1)	; param unit
  9438 00006289 50                      	push rax
  9439 0000628A 488B4520                	mov rax, PARAM(0)	; param f
  9440 0000628E 50                      	push rax
  9441 0000628F 6A03                    	push 3	; arg count
  9442 00006291 488B4510                	mov rax, ENV
  9443 00006295 488B00                  	mov rax, qword [rax + 8 * 0]
  9444 00006298 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9445 0000629B 488B00                  	mov rax, qword [rax]
  9446 0000629E 803804                  	cmp byte [rax], T_closure
  9447 000062A1 0F858F1C0100            	jne L_error_non_closure
  9448 000062A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9449 000062AA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9450 000062AD FF7500                  	push qword[rbp]
  9451 000062B0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9452 000062B3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9453 000062B7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9454 000062BB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9455 000062BF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9456 000062C2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9457 000062C5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9458 000062CA 4983C103                	add r9, 3 	 ;for getting to the params
  9459 000062CE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9460 000062D2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9461                                  .L_tc_recycle_frame_loop_003c:
  9462 000062D5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9463 000062D8 7410                    	je .L_tc_recycle_frame_done_003c
  9464 000062DA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9465 000062DD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9466 000062E0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9467 000062E4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9468 000062E8 EBEB                    	jmp .L_tc_recycle_frame_loop_003c
  9469                                  .L_tc_recycle_frame_done_003c:
  9470 000062EA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9471 000062EB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9472 000062EF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9473 000062F2 C9                      	leave
  9474 000062F3 C22800                  	ret AND_KILL_FRAME(3)
  9475                                  .L_lambda_opt_end_0008:	; new closure is in rax
  9476 000062F6 C9                      	leave
  9477 000062F7 C21800                  	ret AND_KILL_FRAME(1)
  9478                                  .L_lambda_simple_end_0034:	; new closure is in rax
  9479 000062FA 803804                  	cmp byte [rax], T_closure
  9480 000062FD 0F85331C0100            	jne L_error_non_closure
  9481 00006303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9482 00006306 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9483 00006309 48890425[6A130000]      	mov qword [free_var_85], rax
  9484 00006311 48B8-                   	mov rax, sob_void
  9484 00006313 [0000000000000000] 
  9485                                  
  9486 0000631B 4889C7                  	mov rdi, rax
  9487 0000631E E8111F0100              	call print_sexpr_if_not_void
  9488                                  	; preparing a non-tail-call
  9489 00006323 48B8-                   	mov rax, L_constants + 1993
  9489 00006325 [C907000000000000] 
  9490 0000632D 50                      	push rax
  9491 0000632E 6A01                    	push 1	; arg count
  9492 00006330 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9493 00006335 E8A51C0100              	call malloc
  9494 0000633A 50                      	push rax
  9495 0000633B BF00000000              	mov rdi, 8 * 0	; new rib
  9496 00006340 E89A1C0100              	call malloc
  9497 00006345 50                      	push rax
  9498 00006346 BF08000000              	mov rdi, 8 * 1	; extended env
  9499 0000634B E88F1C0100              	call malloc
  9500 00006350 488B7D10                	mov rdi, ENV
  9501 00006354 BE00000000              	mov rsi, 0
  9502 00006359 BA01000000              	mov rdx, 1
  9503                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  9504 0000635E 4883FE00                	cmp rsi, 0
  9505 00006362 7410                    	je .L_lambda_simple_env_end_0036
  9506 00006364 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9507 00006368 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9508 0000636C 48FFC6                  	inc rsi
  9509 0000636F 48FFC2                  	inc rdx
  9510 00006372 EBEA                    	jmp .L_lambda_simple_env_loop_0036
  9511                                  .L_lambda_simple_env_end_0036:
  9512 00006374 5B                      	pop rbx
  9513 00006375 BE00000000              	mov rsi, 0
  9514                                  .L_lambda_simple_params_loop_0036:	; copy params
  9515 0000637A 4883FE00                	cmp rsi, 0
  9516 0000637E 740E                    	je .L_lambda_simple_params_end_0036
  9517 00006380 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9518 00006385 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9519 00006389 48FFC6                  	inc rsi
  9520 0000638C EBEC                    	jmp .L_lambda_simple_params_loop_0036
  9521                                  .L_lambda_simple_params_end_0036:
  9522 0000638E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9523 00006391 4889C3                  	mov rbx, rax
  9524 00006394 58                      	pop rax
  9525 00006395 C60004                  	mov byte [rax], T_closure
  9526 00006398 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9527 0000639C 48C74009[A9630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  9528 000063A4 E925050000              	jmp .L_lambda_simple_end_0036
  9529                                  .L_lambda_simple_code_0036:	; lambda-simple body
  9530 000063A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9531 000063AF 740B                    	je .L_lambda_simple_arity_check_ok_0036
  9532 000063B1 FF742410                	push qword [rsp + 8 * 2]
  9533 000063B5 6A01                    	push 1
  9534 000063B7 E9DC1B0100              	jmp L_error_incorrect_arity_simple
  9535                                  .L_lambda_simple_arity_check_ok_0036:
  9536 000063BC C8000000                	enter 0, 0
  9537 000063C0 BF08000000              	mov rdi, 8*1
  9538 000063C5 E8151C0100              	call malloc
  9539 000063CA 488B5D20                	mov rbx, PARAM(0)
  9540 000063CE 488918                  	mov qword[rax], rbx
  9541 000063D1 48894520                	mov PARAM(0), rax
  9542 000063D5 48B8-                   	mov rax, sob_void
  9542 000063D7 [0000000000000000] 
  9543                                  
  9544 000063DF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9545 000063E4 E8F61B0100              	call malloc
  9546 000063E9 50                      	push rax
  9547 000063EA BF08000000              	mov rdi, 8 * 1	; new rib
  9548 000063EF E8EB1B0100              	call malloc
  9549 000063F4 50                      	push rax
  9550 000063F5 BF10000000              	mov rdi, 8 * 2	; extended env
  9551 000063FA E8E01B0100              	call malloc
  9552 000063FF 488B7D10                	mov rdi, ENV
  9553 00006403 BE00000000              	mov rsi, 0
  9554 00006408 BA01000000              	mov rdx, 1
  9555                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  9556 0000640D 4883FE01                	cmp rsi, 1
  9557 00006411 7410                    	je .L_lambda_simple_env_end_0037
  9558 00006413 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9559 00006417 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9560 0000641B 48FFC6                  	inc rsi
  9561 0000641E 48FFC2                  	inc rdx
  9562 00006421 EBEA                    	jmp .L_lambda_simple_env_loop_0037
  9563                                  .L_lambda_simple_env_end_0037:
  9564 00006423 5B                      	pop rbx
  9565 00006424 BE00000000              	mov rsi, 0
  9566                                  .L_lambda_simple_params_loop_0037:	; copy params
  9567 00006429 4883FE01                	cmp rsi, 1
  9568 0000642D 740E                    	je .L_lambda_simple_params_end_0037
  9569 0000642F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9570 00006434 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9571 00006438 48FFC6                  	inc rsi
  9572 0000643B EBEC                    	jmp .L_lambda_simple_params_loop_0037
  9573                                  .L_lambda_simple_params_end_0037:
  9574 0000643D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9575 00006440 4889C3                  	mov rbx, rax
  9576 00006443 58                      	pop rax
  9577 00006444 C60004                  	mov byte [rax], T_closure
  9578 00006447 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9579 0000644B 48C74009[58640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  9580 00006453 E9BF010000              	jmp .L_lambda_simple_end_0037
  9581                                  .L_lambda_simple_code_0037:	; lambda-simple body
  9582 00006458 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9583 0000645E 740B                    	je .L_lambda_simple_arity_check_ok_0037
  9584 00006460 FF742410                	push qword [rsp + 8 * 2]
  9585 00006464 6A03                    	push 3
  9586 00006466 E92D1B0100              	jmp L_error_incorrect_arity_simple
  9587                                  .L_lambda_simple_arity_check_ok_0037:
  9588 0000646B C8000000                	enter 0, 0
  9589                                  	; preparing a non-tail-call
  9590 0000646F 488B4530                	mov rax, PARAM(2)	; param ss
  9591 00006473 50                      	push rax
  9592 00006474 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
  9593 0000647C 803805                  	cmp byte [rax], T_undefined
  9594 0000647F 0F842D1A0100            	je L_error_fvar_undefined
  9595 00006485 50                      	push rax
  9596 00006486 6A02                    	push 2	; arg count
  9597 00006488 488B0425[13150000]      	mov rax, qword [free_var_110]	; free var ormap
  9598 00006490 803805                  	cmp byte [rax], T_undefined
  9599 00006493 0F84191A0100            	je L_error_fvar_undefined
  9600 00006499 803804                  	cmp byte [rax], T_closure
  9601 0000649C 0F85941A0100            	jne L_error_non_closure
  9602 000064A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9603 000064A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9604 000064A8 483D[02000000]          	cmp rax, sob_boolean_false
  9605 000064AE 7409                    	je .L_if_else_0016
  9606 000064B0 488B4528                	mov rax, PARAM(1)	; param unit
  9607 000064B4 E95A010000              	jmp .L_if_end_0016
  9608                                  .L_if_else_0016:
  9609                                  	; preparing a tail-call
  9610                                  	; preparing a non-tail-call
  9611                                  	; preparing a non-tail-call
  9612 000064B9 48B8-                   	mov rax, L_constants + 1
  9612 000064BB [0100000000000000] 
  9613 000064C3 50                      	push rax
  9614                                  	; preparing a non-tail-call
  9615                                  	; preparing a non-tail-call
  9616 000064C4 488B4530                	mov rax, PARAM(2)	; param ss
  9617 000064C8 50                      	push rax
  9618 000064C9 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
  9619 000064D1 803805                  	cmp byte [rax], T_undefined
  9620 000064D4 0F84D8190100            	je L_error_fvar_undefined
  9621 000064DA 50                      	push rax
  9622 000064DB 6A02                    	push 2	; arg count
  9623 000064DD 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9624 000064E5 803805                  	cmp byte [rax], T_undefined
  9625 000064E8 0F84C4190100            	je L_error_fvar_undefined
  9626 000064EE 803804                  	cmp byte [rax], T_closure
  9627 000064F1 0F853F1A0100            	jne L_error_non_closure
  9628 000064F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9629 000064FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9630 000064FD 50                      	push rax
  9631 000064FE 488B4528                	mov rax, PARAM(1)	; param unit
  9632 00006502 50                      	push rax
  9633 00006503 488B4520                	mov rax, PARAM(0)	; param f
  9634 00006507 50                      	push rax
  9635 00006508 6A03                    	push 3	; arg count
  9636 0000650A 488B4510                	mov rax, ENV
  9637 0000650E 488B00                  	mov rax, qword [rax + 8 * 0]
  9638 00006511 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9639 00006514 488B00                  	mov rax, qword [rax]
  9640 00006517 803804                  	cmp byte [rax], T_closure
  9641 0000651A 0F85161A0100            	jne L_error_non_closure
  9642 00006520 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9643 00006523 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9644 00006526 50                      	push rax
  9645 00006527 6A02                    	push 2	; arg count
  9646 00006529 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
  9647 00006531 803805                  	cmp byte [rax], T_undefined
  9648 00006534 0F8478190100            	je L_error_fvar_undefined
  9649 0000653A 803804                  	cmp byte [rax], T_closure
  9650 0000653D 0F85F3190100            	jne L_error_non_closure
  9651 00006543 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9652 00006546 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9653 00006549 50                      	push rax
  9654                                  	; preparing a non-tail-call
  9655 0000654A 488B4530                	mov rax, PARAM(2)	; param ss
  9656 0000654E 50                      	push rax
  9657 0000654F 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
  9658 00006557 803805                  	cmp byte [rax], T_undefined
  9659 0000655A 0F8452190100            	je L_error_fvar_undefined
  9660 00006560 50                      	push rax
  9661 00006561 6A02                    	push 2	; arg count
  9662 00006563 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
  9663 0000656B 803805                  	cmp byte [rax], T_undefined
  9664 0000656E 0F843E190100            	je L_error_fvar_undefined
  9665 00006574 803804                  	cmp byte [rax], T_closure
  9666 00006577 0F85B9190100            	jne L_error_non_closure
  9667 0000657D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9668 00006580 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9669 00006583 50                      	push rax
  9670 00006584 6A02                    	push 2	; arg count
  9671 00006586 488B0425[E50F0000]      	mov rax, qword [free_var_32]	; free var append
  9672 0000658E 803805                  	cmp byte [rax], T_undefined
  9673 00006591 0F841B190100            	je L_error_fvar_undefined
  9674 00006597 803804                  	cmp byte [rax], T_closure
  9675 0000659A 0F8596190100            	jne L_error_non_closure
  9676 000065A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9677 000065A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9678 000065A6 50                      	push rax
  9679 000065A7 488B4520                	mov rax, PARAM(0)	; param f
  9680 000065AB 50                      	push rax
  9681 000065AC 6A02                    	push 2	; arg count
  9682 000065AE 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
  9683 000065B6 803805                  	cmp byte [rax], T_undefined
  9684 000065B9 0F84F3180100            	je L_error_fvar_undefined
  9685 000065BF 803804                  	cmp byte [rax], T_closure
  9686 000065C2 0F856E190100            	jne L_error_non_closure
  9687 000065C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9688 000065CB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9689 000065CE FF7500                  	push qword[rbp]
  9690 000065D1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9691 000065D4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9692 000065D8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9693 000065DC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9694 000065E0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9695 000065E3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9696 000065E6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9697 000065EB 4983C103                	add r9, 3 	 ;for getting to the params
  9698 000065EF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9699 000065F3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9700                                  .L_tc_recycle_frame_loop_003e:
  9701 000065F6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9702 000065F9 7410                    	je .L_tc_recycle_frame_done_003e
  9703 000065FB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9704 000065FE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9705 00006601 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9706 00006605 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9707 00006609 EBEB                    	jmp .L_tc_recycle_frame_loop_003e
  9708                                  .L_tc_recycle_frame_done_003e:
  9709 0000660B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9710 0000660C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9711 00006610 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9712                                  .L_if_end_0016:
  9713 00006613 C9                      	leave
  9714 00006614 C22800                  	ret AND_KILL_FRAME(3)
  9715                                  .L_lambda_simple_end_0037:	; new closure is in rax
  9716 00006617 50                      	push rax
  9717 00006618 488B4520                	mov rax, PARAM(0)	; param run
  9718 0000661C 8F00                    	pop qword [rax]
  9719 0000661E 48B8-                   	mov rax, sob_void
  9719 00006620 [0000000000000000] 
  9720                                  
  9721 00006628 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9722 0000662D E8AD190100              	call malloc
  9723 00006632 50                      	push rax
  9724 00006633 BF08000000              	mov rdi, 8 * 1	; new rib
  9725 00006638 E8A2190100              	call malloc
  9726 0000663D 50                      	push rax
  9727 0000663E BF10000000              	mov rdi, 8 * 2	; extended env
  9728 00006643 E897190100              	call malloc
  9729 00006648 488B7D10                	mov rdi, ENV
  9730 0000664C BE00000000              	mov rsi, 0
  9731 00006651 BA01000000              	mov rdx, 1
  9732                                  .L_lambda_opt_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  9733 00006656 4883FE01                	cmp rsi, 1
  9734 0000665A 7410                    	je .L_lambda_opt_env_end_0009
  9735 0000665C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9736 00006660 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9737 00006664 48FFC6                  	inc rsi
  9738 00006667 48FFC2                  	inc rdx
  9739 0000666A EBEA                    	jmp .L_lambda_opt_env_loop_0009
  9740                                  .L_lambda_opt_env_end_0009:
  9741 0000666C 5B                      	pop rbx
  9742 0000666D BE00000000              	mov rsi, 0
  9743                                  .L_lambda_opt_params_loop_0009:	; copy params
  9744 00006672 4883FE01                	cmp rsi, 1
  9745 00006676 740E                    	je .L_lambda_opt_params_end_0009
  9746 00006678 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9747 0000667D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9748 00006681 48FFC6                  	inc rsi
  9749 00006684 EBEC                    	jmp .L_lambda_opt_params_loop_0009
  9750                                  .L_lambda_opt_params_end_0009:
  9751 00006686 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9752 00006689 4889C3                  	mov rbx, rax
  9753 0000668C 58                      	pop rax
  9754 0000668D C60004                  	mov byte [rax], T_closure
  9755 00006690 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9756 00006694 48C74009[A1660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  9757 0000669C E929020000              	jmp .L_lambda_opt_end_0009
  9758                                  .L_lambda_opt_code_0009:	; lambda-opt body
  9759 000066A1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9760 000066A7 7411                    	je .L_lambda_opt_arity_check_exact_0009
  9761 000066A9 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0009
  9762 000066AF FF742410                	push qword [rsp + 8 * 2]
  9763 000066B3 6A02                    	push 2
  9764 000066B5 E9F2180100              	jmp L_error_incorrect_arity_opt
  9765                                  .L_lambda_opt_arity_check_exact_0009:
  9766 000066BA 4883EC08                	sub rsp, 8
  9767 000066BE 488B442408              	mov rax, qword[rsp + 8 *1]
  9768 000066C3 48890424                	mov qword[rsp], rax  
  9769 000066C7 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9770 000066CC 4889442408              	mov qword[rsp + 8 * 1], rax
  9771 000066D1 B803000000              	mov rax, 3
  9772 000066D6 4889442410              	mov qword[rsp + 8 *2], rax
  9773 000066DB 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9774 000066E0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9775 000066E5 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9776 000066EA 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9777 000066EF 48B8-                   	mov rax, sob_nil
  9777 000066F1 [0100000000000000] 
  9778 000066F9 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9779 000066FE C8000000                	enter 0, 0
  9780                                  	; preparing a tail-call
  9781 00006702 488B4530                	mov rax, PARAM(2)	; param ss
  9782 00006706 50                      	push rax
  9783 00006707 488B4528                	mov rax, PARAM(1)	; param unit
  9784 0000670B 50                      	push rax
  9785 0000670C 488B4520                	mov rax, PARAM(0)	; param f
  9786 00006710 50                      	push rax
  9787 00006711 6A03                    	push 3	; arg count
  9788 00006713 488B4510                	mov rax, ENV
  9789 00006717 488B00                  	mov rax, qword [rax + 8 * 0]
  9790 0000671A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9791 0000671D 488B00                  	mov rax, qword [rax]
  9792 00006720 803804                  	cmp byte [rax], T_closure
  9793 00006723 0F850D180100            	jne L_error_non_closure
  9794 00006729 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9795 0000672C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9796 0000672F FF7500                  	push qword[rbp]
  9797 00006732 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9798 00006735 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9799 00006739 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9800 0000673D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9801 00006741 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9802 00006744 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9803 00006747 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9804 0000674C 4983C103                	add r9, 3 	 ;for getting to the params
  9805 00006750 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9806 00006754 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9807                                  .L_tc_recycle_frame_loop_0040:
  9808 00006757 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9809 0000675A 7410                    	je .L_tc_recycle_frame_done_0040
  9810 0000675C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9811 0000675F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9812 00006762 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9813 00006766 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9814 0000676A EBEB                    	jmp .L_tc_recycle_frame_loop_0040
  9815                                  .L_tc_recycle_frame_done_0040:
  9816 0000676C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9817 0000676D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9818 00006771 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9819 00006774 C9                      	leave
  9820 00006775 C22800                  	ret AND_KILL_FRAME(3)
  9821 00006778 E94D010000              	jmp .L_lambda_opt_end_0009	; new closure is in rax
  9822                                  .L_lambda_opt_arity_check_more_0009:
  9823 0000677D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9824 00006782 49B9-                   	mov r9, sob_nil
  9824 00006784 [0100000000000000] 
  9825 0000678C 4889E3                  	mov rbx, rsp 
  9826 0000678F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9827 00006793 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9828 00006796 49C1E003                	shl r8, 3
  9829 0000679A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9830 0000679D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9831                                  .L_lambda_opt_stack_shrink_loop_0009:
  9832 000067A2 4983F802                	cmp r8, 2
  9833 000067A6 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  9834 000067A8 BF11000000              	mov rdi, 1+8+8	;for pair
  9835 000067AD E82D180100              	call malloc	 ;to create the pair in the stack
  9836 000067B2 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  9837 000067B5 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
  9838 000067B8 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
  9839 000067BC 4C894809                 	mov qword[rax+1+8],r9
  9840 000067C0 4989C1                  	mov r9, rax	 ; for the recursion 
  9841 000067C3 49FFC8                  	dec r8 	;we finished copy another opt param to the list
  9842 000067C6 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
  9843 000067CA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  9844                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  9845 000067CC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
  9846 000067D1 4883E903                	sub rcx, 3
  9847 000067D5 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
  9848 000067D9 4801CC                  	add rsp, rcx	 ;shrinking the stack
  9849 000067DC 4889E0                  	mov rax, rsp
  9850 000067DF 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
  9851 000067E2 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
  9852 000067E6 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
  9853 000067E9 4883C018                	add rax, 3 * 8 	;now rax is param 0
  9854 000067ED 49C1E003                	shl r8, 3 	; convert to byte
  9855 000067F1 4C01C0                  	add rax, r8 	;now rax is the top of the stack
  9856 000067F4 4C8908                  	mov qword[rax], r9	;puting the list at the top
  9857 000067F7 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
  9858 000067FB 4889E3                  	mov rbx, rsp 
  9859 000067FE 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
  9860 00006801 41BA02000000            	mov r10, 2 	 ;r10 is the not opt params length
  9861 00006807 49FFCA                  	dec r10 
  9862 0000680A 49C1E203                	shl r10, 3	;to get bytes
  9863 0000680E 4883C318                	add rbx, 3*8 	;rbx is the first param
  9864 00006812 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
  9865 00006815 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9866                                  
  9867 00006818 4C8900                              	mov qword[rax], r8
  9868 0000681B 4883E808                            	sub rax, 8
  9869 0000681F 4883EB08                	sub rbx, 8
  9870 00006823 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9871                                  
  9872 00006826 4C8900                              	mov qword[rax], r8
  9873 00006829 4883E808                            	sub rax, 8
  9874 0000682D 4883EB08                	sub rbx, 8
  9875 00006831 4889E0                  	mov rax, rsp
  9876 00006834 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9877 00006837 48C744241003000000      	mov qword [rsp+2*8], 3
  9878 00006840 488B5808                	mov rbx, qword[rax + 8 *1]
  9879 00006844 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9880 00006849 488B18                  	mov rbx, qword[rax]
  9881 0000684C 48891C24                	mov qword [rsp], rbx
  9882 00006850 C8000000                	enter 0, 0
  9883                                  	; preparing a tail-call
  9884 00006854 488B4530                	mov rax, PARAM(2)	; param ss
  9885 00006858 50                      	push rax
  9886 00006859 488B4528                	mov rax, PARAM(1)	; param unit
  9887 0000685D 50                      	push rax
  9888 0000685E 488B4520                	mov rax, PARAM(0)	; param f
  9889 00006862 50                      	push rax
  9890 00006863 6A03                    	push 3	; arg count
  9891 00006865 488B4510                	mov rax, ENV
  9892 00006869 488B00                  	mov rax, qword [rax + 8 * 0]
  9893 0000686C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9894 0000686F 488B00                  	mov rax, qword [rax]
  9895 00006872 803804                  	cmp byte [rax], T_closure
  9896 00006875 0F85BB160100            	jne L_error_non_closure
  9897 0000687B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9898 0000687E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9899 00006881 FF7500                  	push qword[rbp]
  9900 00006884 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9901 00006887 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9902 0000688B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9903 0000688F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9904 00006893 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9905 00006896 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9906 00006899 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9907 0000689E 4983C103                	add r9, 3 	 ;for getting to the params
  9908 000068A2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9909 000068A6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9910                                  .L_tc_recycle_frame_loop_003f:
  9911 000068A9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9912 000068AC 7410                    	je .L_tc_recycle_frame_done_003f
  9913 000068AE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9914 000068B1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9915 000068B4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9916 000068B8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9917 000068BC EBEB                    	jmp .L_tc_recycle_frame_loop_003f
  9918                                  .L_tc_recycle_frame_done_003f:
  9919 000068BE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9920 000068BF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9921 000068C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9922 000068C6 C9                      	leave
  9923 000068C7 C22800                  	ret AND_KILL_FRAME(3)
  9924                                  .L_lambda_opt_end_0009:	; new closure is in rax
  9925 000068CA C9                      	leave
  9926 000068CB C21800                  	ret AND_KILL_FRAME(1)
  9927                                  .L_lambda_simple_end_0036:	; new closure is in rax
  9928 000068CE 803804                  	cmp byte [rax], T_closure
  9929 000068D1 0F855F160100            	jne L_error_non_closure
  9930 000068D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9931 000068DA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9932 000068DD 48890425[7B130000]      	mov qword [free_var_86], rax
  9933 000068E5 48B8-                   	mov rax, sob_void
  9933 000068E7 [0000000000000000] 
  9934                                  
  9935 000068EF 4889C7                  	mov rdi, rax
  9936 000068F2 E83D190100              	call print_sexpr_if_not_void
  9937                                  	; preparing a non-tail-call
  9938 000068F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9939 000068FC E8DE160100              	call malloc
  9940 00006901 50                      	push rax
  9941 00006902 BF00000000              	mov rdi, 8 * 0	; new rib
  9942 00006907 E8D3160100              	call malloc
  9943 0000690C 50                      	push rax
  9944 0000690D BF08000000              	mov rdi, 8 * 1	; extended env
  9945 00006912 E8C8160100              	call malloc
  9946 00006917 488B7D10                	mov rdi, ENV
  9947 0000691B BE00000000              	mov rsi, 0
  9948 00006920 BA01000000              	mov rdx, 1
  9949                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  9950 00006925 4883FE00                	cmp rsi, 0
  9951 00006929 7410                    	je .L_lambda_simple_env_end_0038
  9952 0000692B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9953 0000692F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9954 00006933 48FFC6                  	inc rsi
  9955 00006936 48FFC2                  	inc rdx
  9956 00006939 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  9957                                  .L_lambda_simple_env_end_0038:
  9958 0000693B 5B                      	pop rbx
  9959 0000693C BE00000000              	mov rsi, 0
  9960                                  .L_lambda_simple_params_loop_0038:	; copy params
  9961 00006941 4883FE00                	cmp rsi, 0
  9962 00006945 740E                    	je .L_lambda_simple_params_end_0038
  9963 00006947 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9964 0000694C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9965 00006950 48FFC6                  	inc rsi
  9966 00006953 EBEC                    	jmp .L_lambda_simple_params_loop_0038
  9967                                  .L_lambda_simple_params_end_0038:
  9968 00006955 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9969 00006958 4889C3                  	mov rbx, rax
  9970 0000695B 58                      	pop rax
  9971 0000695C C60004                  	mov byte [rax], T_closure
  9972 0000695F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9973 00006963 48C74009[70690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  9974 0000696B E998000000              	jmp .L_lambda_simple_end_0038
  9975                                  .L_lambda_simple_code_0038:	; lambda-simple body
  9976 00006970 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9977 00006976 740B                    	je .L_lambda_simple_arity_check_ok_0038
  9978 00006978 FF742410                	push qword [rsp + 8 * 2]
  9979 0000697C 6A00                    	push 0
  9980 0000697E E915160100              	jmp L_error_incorrect_arity_simple
  9981                                  .L_lambda_simple_arity_check_ok_0038:
  9982 00006983 C8000000                	enter 0, 0
  9983                                  	; preparing a tail-call
  9984 00006987 48B8-                   	mov rax, L_constants + 2187
  9984 00006989 [8B08000000000000] 
  9985 00006991 50                      	push rax
  9986 00006992 48B8-                   	mov rax, L_constants + 2178
  9986 00006994 [8208000000000000] 
  9987 0000699C 50                      	push rax
  9988 0000699D 6A02                    	push 2	; arg count
  9989 0000699F 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
  9990 000069A7 803805                  	cmp byte [rax], T_undefined
  9991 000069AA 0F8402150100            	je L_error_fvar_undefined
  9992 000069B0 803804                  	cmp byte [rax], T_closure
  9993 000069B3 0F857D150100            	jne L_error_non_closure
  9994 000069B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9995 000069BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9996 000069BF FF7500                  	push qword[rbp]
  9997 000069C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9998 000069C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9999 000069C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10000 000069CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10001 000069D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10002 000069D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10003 000069D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10004 000069DC 4983C103                	add r9, 3 	 ;for getting to the params
 10005 000069E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10006 000069E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10007                                  .L_tc_recycle_frame_loop_0041:
 10008 000069E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10009 000069EA 7410                    	je .L_tc_recycle_frame_done_0041
 10010 000069EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10011 000069EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10012 000069F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10013 000069F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10014 000069FA EBEB                    	jmp .L_tc_recycle_frame_loop_0041
 10015                                  .L_tc_recycle_frame_done_0041:
 10016 000069FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10017 000069FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10018 00006A01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10019 00006A04 C9                      	leave
 10020 00006A05 C21000                  	ret AND_KILL_FRAME(0)
 10021                                  .L_lambda_simple_end_0038:	; new closure is in rax
 10022 00006A08 50                      	push rax
 10023 00006A09 6A01                    	push 1	; arg count
 10024 00006A0B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10025 00006A10 E8CA150100              	call malloc
 10026 00006A15 50                      	push rax
 10027 00006A16 BF00000000              	mov rdi, 8 * 0	; new rib
 10028 00006A1B E8BF150100              	call malloc
 10029 00006A20 50                      	push rax
 10030 00006A21 BF08000000              	mov rdi, 8 * 1	; extended env
 10031 00006A26 E8B4150100              	call malloc
 10032 00006A2B 488B7D10                	mov rdi, ENV
 10033 00006A2F BE00000000              	mov rsi, 0
 10034 00006A34 BA01000000              	mov rdx, 1
 10035                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
 10036 00006A39 4883FE00                	cmp rsi, 0
 10037 00006A3D 7410                    	je .L_lambda_simple_env_end_0039
 10038 00006A3F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10039 00006A43 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10040 00006A47 48FFC6                  	inc rsi
 10041 00006A4A 48FFC2                  	inc rdx
 10042 00006A4D EBEA                    	jmp .L_lambda_simple_env_loop_0039
 10043                                  .L_lambda_simple_env_end_0039:
 10044 00006A4F 5B                      	pop rbx
 10045 00006A50 BE00000000              	mov rsi, 0
 10046                                  .L_lambda_simple_params_loop_0039:	; copy params
 10047 00006A55 4883FE00                	cmp rsi, 0
 10048 00006A59 740E                    	je .L_lambda_simple_params_end_0039
 10049 00006A5B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10050 00006A60 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10051 00006A64 48FFC6                  	inc rsi
 10052 00006A67 EBEC                    	jmp .L_lambda_simple_params_loop_0039
 10053                                  .L_lambda_simple_params_end_0039:
 10054 00006A69 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10055 00006A6C 4889C3                  	mov rbx, rax
 10056 00006A6F 58                      	pop rax
 10057 00006A70 C60004                  	mov byte [rax], T_closure
 10058 00006A73 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10059 00006A77 48C74009[846A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
 10060 00006A7F E9FF0C0000              	jmp .L_lambda_simple_end_0039
 10061                                  .L_lambda_simple_code_0039:	; lambda-simple body
 10062 00006A84 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10063 00006A8A 740B                    	je .L_lambda_simple_arity_check_ok_0039
 10064 00006A8C FF742410                	push qword [rsp + 8 * 2]
 10065 00006A90 6A01                    	push 1
 10066 00006A92 E901150100              	jmp L_error_incorrect_arity_simple
 10067                                  .L_lambda_simple_arity_check_ok_0039:
 10068 00006A97 C8000000                	enter 0, 0
 10069                                  	; preparing a tail-call
 10070 00006A9B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10071 00006AA0 E83A150100              	call malloc
 10072 00006AA5 50                      	push rax
 10073 00006AA6 BF08000000              	mov rdi, 8 * 1	; new rib
 10074 00006AAB E82F150100              	call malloc
 10075 00006AB0 50                      	push rax
 10076 00006AB1 BF10000000              	mov rdi, 8 * 2	; extended env
 10077 00006AB6 E824150100              	call malloc
 10078 00006ABB 488B7D10                	mov rdi, ENV
 10079 00006ABF BE00000000              	mov rsi, 0
 10080 00006AC4 BA01000000              	mov rdx, 1
 10081                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
 10082 00006AC9 4883FE01                	cmp rsi, 1
 10083 00006ACD 7410                    	je .L_lambda_simple_env_end_003a
 10084 00006ACF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10085 00006AD3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10086 00006AD7 48FFC6                  	inc rsi
 10087 00006ADA 48FFC2                  	inc rdx
 10088 00006ADD EBEA                    	jmp .L_lambda_simple_env_loop_003a
 10089                                  .L_lambda_simple_env_end_003a:
 10090 00006ADF 5B                      	pop rbx
 10091 00006AE0 BE00000000              	mov rsi, 0
 10092                                  .L_lambda_simple_params_loop_003a:	; copy params
 10093 00006AE5 4883FE01                	cmp rsi, 1
 10094 00006AE9 740E                    	je .L_lambda_simple_params_end_003a
 10095 00006AEB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10096 00006AF0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10097 00006AF4 48FFC6                  	inc rsi
 10098 00006AF7 EBEC                    	jmp .L_lambda_simple_params_loop_003a
 10099                                  .L_lambda_simple_params_end_003a:
 10100 00006AF9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10101 00006AFC 4889C3                  	mov rbx, rax
 10102 00006AFF 58                      	pop rax
 10103 00006B00 C60004                  	mov byte [rax], T_closure
 10104 00006B03 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10105 00006B07 48C74009[146B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
 10106 00006B0F E9EE080000              	jmp .L_lambda_simple_end_003a
 10107                                  .L_lambda_simple_code_003a:	; lambda-simple body
 10108 00006B14 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10109 00006B1A 740B                    	je .L_lambda_simple_arity_check_ok_003a
 10110 00006B1C FF742410                	push qword [rsp + 8 * 2]
 10111 00006B20 6A02                    	push 2
 10112 00006B22 E971140100              	jmp L_error_incorrect_arity_simple
 10113                                  .L_lambda_simple_arity_check_ok_003a:
 10114 00006B27 C8000000                	enter 0, 0
 10115                                  	; preparing a non-tail-call
 10116 00006B2B 488B4520                	mov rax, PARAM(0)	; param a
 10117 00006B2F 50                      	push rax
 10118 00006B30 6A01                    	push 1	; arg count
 10119 00006B32 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10120 00006B3A 803805                  	cmp byte [rax], T_undefined
 10121 00006B3D 0F846F130100            	je L_error_fvar_undefined
 10122 00006B43 803804                  	cmp byte [rax], T_closure
 10123 00006B46 0F85EA130100            	jne L_error_non_closure
 10124 00006B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10125 00006B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10126 00006B52 483D[02000000]          	cmp rax, sob_boolean_false
 10127 00006B58 0F849F020000            	je .L_if_else_0022
 10128                                  	; preparing a non-tail-call
 10129 00006B5E 488B4528                	mov rax, PARAM(1)	; param b
 10130 00006B62 50                      	push rax
 10131 00006B63 6A01                    	push 1	; arg count
 10132 00006B65 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10133 00006B6D 803805                  	cmp byte [rax], T_undefined
 10134 00006B70 0F843C130100            	je L_error_fvar_undefined
 10135 00006B76 803804                  	cmp byte [rax], T_closure
 10136 00006B79 0F85B7130100            	jne L_error_non_closure
 10137 00006B7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10138 00006B82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10139 00006B85 483D[02000000]          	cmp rax, sob_boolean_false
 10140 00006B8B 7476                    	je .L_if_else_0019
 10141                                  	; preparing a tail-call
 10142 00006B8D 488B4528                	mov rax, PARAM(1)	; param b
 10143 00006B91 50                      	push rax
 10144 00006B92 488B4520                	mov rax, PARAM(0)	; param a
 10145 00006B96 50                      	push rax
 10146 00006B97 6A02                    	push 2	; arg count
 10147 00006B99 488B0425[800E0000]      	mov rax, qword [free_var_11]	; free var __bin-add-zz
 10148 00006BA1 803805                  	cmp byte [rax], T_undefined
 10149 00006BA4 0F8408130100            	je L_error_fvar_undefined
 10150 00006BAA 803804                  	cmp byte [rax], T_closure
 10151 00006BAD 0F8583130100            	jne L_error_non_closure
 10152 00006BB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10153 00006BB6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10154 00006BB9 FF7500                  	push qword[rbp]
 10155 00006BBC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10156 00006BBF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10157 00006BC3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10158 00006BC7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10159 00006BCB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10160 00006BCE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10161 00006BD1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10162 00006BD6 4983C103                	add r9, 3 	 ;for getting to the params
 10163 00006BDA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10164 00006BDE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10165                                  .L_tc_recycle_frame_loop_0042:
 10166 00006BE1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10167 00006BE4 7410                    	je .L_tc_recycle_frame_done_0042
 10168 00006BE6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10169 00006BE9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10170 00006BEC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10171 00006BF0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10172 00006BF4 EBEB                    	jmp .L_tc_recycle_frame_loop_0042
 10173                                  .L_tc_recycle_frame_done_0042:
 10174 00006BF6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10175 00006BF7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10176 00006BFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10177 00006BFE E9F5010000              	jmp .L_if_end_0019
 10178                                  .L_if_else_0019:
 10179                                  	; preparing a non-tail-call
 10180 00006C03 488B4528                	mov rax, PARAM(1)	; param b
 10181 00006C07 50                      	push rax
 10182 00006C08 6A01                    	push 1	; arg count
 10183 00006C0A 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10184 00006C12 803805                  	cmp byte [rax], T_undefined
 10185 00006C15 0F8497120100            	je L_error_fvar_undefined
 10186 00006C1B 803804                  	cmp byte [rax], T_closure
 10187 00006C1E 0F8512130100            	jne L_error_non_closure
 10188 00006C24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10189 00006C27 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10190 00006C2A 483D[02000000]          	cmp rax, sob_boolean_false
 10191 00006C30 0F8499000000            	je .L_if_else_0018
 10192                                  	; preparing a tail-call
 10193 00006C36 488B4528                	mov rax, PARAM(1)	; param b
 10194 00006C3A 50                      	push rax
 10195                                  	; preparing a non-tail-call
 10196 00006C3B 488B4520                	mov rax, PARAM(0)	; param a
 10197 00006C3F 50                      	push rax
 10198 00006C40 6A01                    	push 1	; arg count
 10199 00006C42 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10200 00006C4A 803805                  	cmp byte [rax], T_undefined
 10201 00006C4D 0F845F120100            	je L_error_fvar_undefined
 10202 00006C53 803804                  	cmp byte [rax], T_closure
 10203 00006C56 0F85DA120100            	jne L_error_non_closure
 10204 00006C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10205 00006C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10206 00006C62 50                      	push rax
 10207 00006C63 6A02                    	push 2	; arg count
 10208 00006C65 488B0425[5E0E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10209 00006C6D 803805                  	cmp byte [rax], T_undefined
 10210 00006C70 0F843C120100            	je L_error_fvar_undefined
 10211 00006C76 803804                  	cmp byte [rax], T_closure
 10212 00006C79 0F85B7120100            	jne L_error_non_closure
 10213 00006C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10214 00006C82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10215 00006C85 FF7500                  	push qword[rbp]
 10216 00006C88 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10217 00006C8B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10218 00006C8F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10219 00006C93 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10220 00006C97 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10221 00006C9A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10222 00006C9D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10223 00006CA2 4983C103                	add r9, 3 	 ;for getting to the params
 10224 00006CA6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10225 00006CAA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10226                                  .L_tc_recycle_frame_loop_0043:
 10227 00006CAD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10228 00006CB0 7410                    	je .L_tc_recycle_frame_done_0043
 10229 00006CB2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10230 00006CB5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10231 00006CB8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10232 00006CBC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10233 00006CC0 EBEB                    	jmp .L_tc_recycle_frame_loop_0043
 10234                                  .L_tc_recycle_frame_done_0043:
 10235 00006CC2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10236 00006CC3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10237 00006CC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10238 00006CCA E929010000              	jmp .L_if_end_0018
 10239                                  .L_if_else_0018:
 10240                                  	; preparing a non-tail-call
 10241 00006CCF 488B4528                	mov rax, PARAM(1)	; param b
 10242 00006CD3 50                      	push rax
 10243 00006CD4 6A01                    	push 1	; arg count
 10244 00006CD6 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10245 00006CDE 803805                  	cmp byte [rax], T_undefined
 10246 00006CE1 0F84CB110100            	je L_error_fvar_undefined
 10247 00006CE7 803804                  	cmp byte [rax], T_closure
 10248 00006CEA 0F8546120100            	jne L_error_non_closure
 10249 00006CF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10250 00006CF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10251 00006CF6 483D[02000000]          	cmp rax, sob_boolean_false
 10252 00006CFC 0F8496000000            	je .L_if_else_0017
 10253                                  	; preparing a tail-call
 10254 00006D02 488B4528                	mov rax, PARAM(1)	; param b
 10255 00006D06 50                      	push rax
 10256                                  	; preparing a non-tail-call
 10257 00006D07 488B4520                	mov rax, PARAM(0)	; param a
 10258 00006D0B 50                      	push rax
 10259 00006D0C 6A01                    	push 1	; arg count
 10260 00006D0E 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10261 00006D16 803805                  	cmp byte [rax], T_undefined
 10262 00006D19 0F8493110100            	je L_error_fvar_undefined
 10263 00006D1F 803804                  	cmp byte [rax], T_closure
 10264 00006D22 0F850E120100            	jne L_error_non_closure
 10265 00006D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10266 00006D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10267 00006D2E 50                      	push rax
 10268 00006D2F 6A02                    	push 2	; arg count
 10269 00006D31 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10270 00006D39 803805                  	cmp byte [rax], T_undefined
 10271 00006D3C 0F8470110100            	je L_error_fvar_undefined
 10272 00006D42 803804                  	cmp byte [rax], T_closure
 10273 00006D45 0F85EB110100            	jne L_error_non_closure
 10274 00006D4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10275 00006D4E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10276 00006D51 FF7500                  	push qword[rbp]
 10277 00006D54 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10278 00006D57 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10279 00006D5B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10280 00006D5F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10281 00006D63 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10282 00006D66 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10283 00006D69 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10284 00006D6E 4983C103                	add r9, 3 	 ;for getting to the params
 10285 00006D72 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10286 00006D76 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10287                                  .L_tc_recycle_frame_loop_0044:
 10288 00006D79 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10289 00006D7C 7410                    	je .L_tc_recycle_frame_done_0044
 10290 00006D7E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10291 00006D81 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10292 00006D84 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10293 00006D88 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10294 00006D8C EBEB                    	jmp .L_tc_recycle_frame_loop_0044
 10295                                  .L_tc_recycle_frame_done_0044:
 10296 00006D8E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10297 00006D8F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10298 00006D93 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10299 00006D96 EB60                    	jmp .L_if_end_0017
 10300                                  .L_if_else_0017:
 10301                                  	; preparing a tail-call
 10302 00006D98 6A00                    	push 0	; arg count
 10303 00006D9A 488B4510                	mov rax, ENV
 10304 00006D9E 488B00                  	mov rax, qword [rax + 8 * 0]
 10305 00006DA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10306 00006DA4 803804                  	cmp byte [rax], T_closure
 10307 00006DA7 0F8589110100            	jne L_error_non_closure
 10308 00006DAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 10309 00006DB0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10310 00006DB3 FF7500                  	push qword[rbp]
 10311 00006DB6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10312 00006DB9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10313 00006DBD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10314 00006DC1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10315 00006DC5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10316 00006DC8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10317 00006DCB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10318 00006DD0 4983C103                	add r9, 3 	 ;for getting to the params
 10319 00006DD4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10320 00006DD8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10321                                  .L_tc_recycle_frame_loop_0045:
 10322 00006DDB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10323 00006DDE 7410                    	je .L_tc_recycle_frame_done_0045
 10324 00006DE0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10325 00006DE3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10326 00006DE6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10327 00006DEA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10328 00006DEE EBEB                    	jmp .L_tc_recycle_frame_loop_0045
 10329                                  .L_tc_recycle_frame_done_0045:
 10330 00006DF0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10331 00006DF1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10332 00006DF5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10333                                  .L_if_end_0017:
 10334                                  .L_if_end_0018:
 10335                                  .L_if_end_0019:
 10336 00006DF8 E901060000              	jmp .L_if_end_0022
 10337                                  .L_if_else_0022:
 10338                                  	; preparing a non-tail-call
 10339 00006DFD 488B4520                	mov rax, PARAM(0)	; param a
 10340 00006E01 50                      	push rax
 10341 00006E02 6A01                    	push 1	; arg count
 10342 00006E04 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10343 00006E0C 803805                  	cmp byte [rax], T_undefined
 10344 00006E0F 0F849D100100            	je L_error_fvar_undefined
 10345 00006E15 803804                  	cmp byte [rax], T_closure
 10346 00006E18 0F8518110100            	jne L_error_non_closure
 10347 00006E1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10348 00006E21 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10349 00006E24 483D[02000000]          	cmp rax, sob_boolean_false
 10350 00006E2A 0F849F020000            	je .L_if_else_0021
 10351                                  	; preparing a non-tail-call
 10352 00006E30 488B4528                	mov rax, PARAM(1)	; param b
 10353 00006E34 50                      	push rax
 10354 00006E35 6A01                    	push 1	; arg count
 10355 00006E37 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10356 00006E3F 803805                  	cmp byte [rax], T_undefined
 10357 00006E42 0F846A100100            	je L_error_fvar_undefined
 10358 00006E48 803804                  	cmp byte [rax], T_closure
 10359 00006E4B 0F85E5100100            	jne L_error_non_closure
 10360 00006E51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10361 00006E54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10362 00006E57 483D[02000000]          	cmp rax, sob_boolean_false
 10363 00006E5D 0F8499000000            	je .L_if_else_001c
 10364                                  	; preparing a tail-call
 10365                                  	; preparing a non-tail-call
 10366 00006E63 488B4528                	mov rax, PARAM(1)	; param b
 10367 00006E67 50                      	push rax
 10368 00006E68 6A01                    	push 1	; arg count
 10369 00006E6A 488B0425[A10F0000]      	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
 10370 00006E72 803805                  	cmp byte [rax], T_undefined
 10371 00006E75 0F8437100100            	je L_error_fvar_undefined
 10372 00006E7B 803804                  	cmp byte [rax], T_closure
 10373 00006E7E 0F85B2100100            	jne L_error_non_closure
 10374 00006E84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10375 00006E87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10376 00006E8A 50                      	push rax
 10377 00006E8B 488B4520                	mov rax, PARAM(0)	; param a
 10378 00006E8F 50                      	push rax
 10379 00006E90 6A02                    	push 2	; arg count
 10380 00006E92 488B0425[5E0E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10381 00006E9A 803805                  	cmp byte [rax], T_undefined
 10382 00006E9D 0F840F100100            	je L_error_fvar_undefined
 10383 00006EA3 803804                  	cmp byte [rax], T_closure
 10384 00006EA6 0F858A100100            	jne L_error_non_closure
 10385 00006EAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10386 00006EAF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10387 00006EB2 FF7500                  	push qword[rbp]
 10388 00006EB5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10389 00006EB8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10390 00006EBC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10391 00006EC0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10392 00006EC4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10393 00006EC7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10394 00006ECA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10395 00006ECF 4983C103                	add r9, 3 	 ;for getting to the params
 10396 00006ED3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10397 00006ED7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10398                                  .L_tc_recycle_frame_loop_0046:
 10399 00006EDA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10400 00006EDD 7410                    	je .L_tc_recycle_frame_done_0046
 10401 00006EDF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10402 00006EE2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10403 00006EE5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10404 00006EE9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10405 00006EED EBEB                    	jmp .L_tc_recycle_frame_loop_0046
 10406                                  .L_tc_recycle_frame_done_0046:
 10407 00006EEF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10408 00006EF0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10409 00006EF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10410 00006EF7 E9CE010000              	jmp .L_if_end_001c
 10411                                  .L_if_else_001c:
 10412                                  	; preparing a non-tail-call
 10413 00006EFC 488B4528                	mov rax, PARAM(1)	; param b
 10414 00006F00 50                      	push rax
 10415 00006F01 6A01                    	push 1	; arg count
 10416 00006F03 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10417 00006F0B 803805                  	cmp byte [rax], T_undefined
 10418 00006F0E 0F849E0F0100            	je L_error_fvar_undefined
 10419 00006F14 803804                  	cmp byte [rax], T_closure
 10420 00006F17 0F8519100100            	jne L_error_non_closure
 10421 00006F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10422 00006F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10423 00006F23 483D[02000000]          	cmp rax, sob_boolean_false
 10424 00006F29 7476                    	je .L_if_else_001b
 10425                                  	; preparing a tail-call
 10426 00006F2B 488B4528                	mov rax, PARAM(1)	; param b
 10427 00006F2F 50                      	push rax
 10428 00006F30 488B4520                	mov rax, PARAM(0)	; param a
 10429 00006F34 50                      	push rax
 10430 00006F35 6A02                    	push 2	; arg count
 10431 00006F37 488B0425[5E0E0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10432 00006F3F 803805                  	cmp byte [rax], T_undefined
 10433 00006F42 0F846A0F0100            	je L_error_fvar_undefined
 10434 00006F48 803804                  	cmp byte [rax], T_closure
 10435 00006F4B 0F85E50F0100            	jne L_error_non_closure
 10436 00006F51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10437 00006F54 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10438 00006F57 FF7500                  	push qword[rbp]
 10439 00006F5A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10440 00006F5D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10441 00006F61 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10442 00006F65 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10443 00006F69 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10444 00006F6C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10445 00006F6F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10446 00006F74 4983C103                	add r9, 3 	 ;for getting to the params
 10447 00006F78 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10448 00006F7C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10449                                  .L_tc_recycle_frame_loop_0047:
 10450 00006F7F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10451 00006F82 7410                    	je .L_tc_recycle_frame_done_0047
 10452 00006F84 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10453 00006F87 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10454 00006F8A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10455 00006F8E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10456 00006F92 EBEB                    	jmp .L_tc_recycle_frame_loop_0047
 10457                                  .L_tc_recycle_frame_done_0047:
 10458 00006F94 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10459 00006F95 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10460 00006F99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10461 00006F9C E929010000              	jmp .L_if_end_001b
 10462                                  .L_if_else_001b:
 10463                                  	; preparing a non-tail-call
 10464 00006FA1 488B4528                	mov rax, PARAM(1)	; param b
 10465 00006FA5 50                      	push rax
 10466 00006FA6 6A01                    	push 1	; arg count
 10467 00006FA8 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10468 00006FB0 803805                  	cmp byte [rax], T_undefined
 10469 00006FB3 0F84F90E0100            	je L_error_fvar_undefined
 10470 00006FB9 803804                  	cmp byte [rax], T_closure
 10471 00006FBC 0F85740F0100            	jne L_error_non_closure
 10472 00006FC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10473 00006FC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10474 00006FC8 483D[02000000]          	cmp rax, sob_boolean_false
 10475 00006FCE 0F8496000000            	je .L_if_else_001a
 10476                                  	; preparing a tail-call
 10477 00006FD4 488B4528                	mov rax, PARAM(1)	; param b
 10478 00006FD8 50                      	push rax
 10479                                  	; preparing a non-tail-call
 10480 00006FD9 488B4520                	mov rax, PARAM(0)	; param a
 10481 00006FDD 50                      	push rax
 10482 00006FDE 6A01                    	push 1	; arg count
 10483 00006FE0 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10484 00006FE8 803805                  	cmp byte [rax], T_undefined
 10485 00006FEB 0F84C10E0100            	je L_error_fvar_undefined
 10486 00006FF1 803804                  	cmp byte [rax], T_closure
 10487 00006FF4 0F853C0F0100            	jne L_error_non_closure
 10488 00006FFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10489 00006FFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10490 00007000 50                      	push rax
 10491 00007001 6A02                    	push 2	; arg count
 10492 00007003 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10493 0000700B 803805                  	cmp byte [rax], T_undefined
 10494 0000700E 0F849E0E0100            	je L_error_fvar_undefined
 10495 00007014 803804                  	cmp byte [rax], T_closure
 10496 00007017 0F85190F0100            	jne L_error_non_closure
 10497 0000701D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10498 00007020 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10499 00007023 FF7500                  	push qword[rbp]
 10500 00007026 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10501 00007029 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10502 0000702D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10503 00007031 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10504 00007035 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10505 00007038 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10506 0000703B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10507 00007040 4983C103                	add r9, 3 	 ;for getting to the params
 10508 00007044 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10509 00007048 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10510                                  .L_tc_recycle_frame_loop_0048:
 10511 0000704B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10512 0000704E 7410                    	je .L_tc_recycle_frame_done_0048
 10513 00007050 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10514 00007053 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10515 00007056 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10516 0000705A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10517 0000705E EBEB                    	jmp .L_tc_recycle_frame_loop_0048
 10518                                  .L_tc_recycle_frame_done_0048:
 10519 00007060 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10520 00007061 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10521 00007065 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10522 00007068 EB60                    	jmp .L_if_end_001a
 10523                                  .L_if_else_001a:
 10524                                  	; preparing a tail-call
 10525 0000706A 6A00                    	push 0	; arg count
 10526 0000706C 488B4510                	mov rax, ENV
 10527 00007070 488B00                  	mov rax, qword [rax + 8 * 0]
 10528 00007073 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10529 00007076 803804                  	cmp byte [rax], T_closure
 10530 00007079 0F85B70E0100            	jne L_error_non_closure
 10531 0000707F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10532 00007082 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10533 00007085 FF7500                  	push qword[rbp]
 10534 00007088 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10535 0000708B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10536 0000708F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10537 00007093 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10538 00007097 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10539 0000709A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10540 0000709D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10541 000070A2 4983C103                	add r9, 3 	 ;for getting to the params
 10542 000070A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10543 000070AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10544                                  .L_tc_recycle_frame_loop_0049:
 10545 000070AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10546 000070B0 7410                    	je .L_tc_recycle_frame_done_0049
 10547 000070B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10548 000070B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10549 000070B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10550 000070BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10551 000070C0 EBEB                    	jmp .L_tc_recycle_frame_loop_0049
 10552                                  .L_tc_recycle_frame_done_0049:
 10553 000070C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10554 000070C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10555 000070C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10556                                  .L_if_end_001a:
 10557                                  .L_if_end_001b:
 10558                                  .L_if_end_001c:
 10559 000070CA E92F030000              	jmp .L_if_end_0021
 10560                                  .L_if_else_0021:
 10561                                  	; preparing a non-tail-call
 10562 000070CF 488B4520                	mov rax, PARAM(0)	; param a
 10563 000070D3 50                      	push rax
 10564 000070D4 6A01                    	push 1	; arg count
 10565 000070D6 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10566 000070DE 803805                  	cmp byte [rax], T_undefined
 10567 000070E1 0F84CB0D0100            	je L_error_fvar_undefined
 10568 000070E7 803804                  	cmp byte [rax], T_closure
 10569 000070EA 0F85460E0100            	jne L_error_non_closure
 10570 000070F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10571 000070F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10572 000070F6 483D[02000000]          	cmp rax, sob_boolean_false
 10573 000070FC 0F849C020000            	je .L_if_else_0020
 10574                                  	; preparing a non-tail-call
 10575 00007102 488B4528                	mov rax, PARAM(1)	; param b
 10576 00007106 50                      	push rax
 10577 00007107 6A01                    	push 1	; arg count
 10578 00007109 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 10579 00007111 803805                  	cmp byte [rax], T_undefined
 10580 00007114 0F84980D0100            	je L_error_fvar_undefined
 10581 0000711A 803804                  	cmp byte [rax], T_closure
 10582 0000711D 0F85130E0100            	jne L_error_non_closure
 10583 00007123 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10584 00007126 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10585 00007129 483D[02000000]          	cmp rax, sob_boolean_false
 10586 0000712F 0F8499000000            	je .L_if_else_001f
 10587                                  	; preparing a tail-call
 10588                                  	; preparing a non-tail-call
 10589 00007135 488B4528                	mov rax, PARAM(1)	; param b
 10590 00007139 50                      	push rax
 10591 0000713A 6A01                    	push 1	; arg count
 10592 0000713C 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 10593 00007144 803805                  	cmp byte [rax], T_undefined
 10594 00007147 0F84650D0100            	je L_error_fvar_undefined
 10595 0000714D 803804                  	cmp byte [rax], T_closure
 10596 00007150 0F85E00D0100            	jne L_error_non_closure
 10597 00007156 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10598 00007159 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10599 0000715C 50                      	push rax
 10600 0000715D 488B4520                	mov rax, PARAM(0)	; param a
 10601 00007161 50                      	push rax
 10602 00007162 6A02                    	push 2	; arg count
 10603 00007164 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10604 0000716C 803805                  	cmp byte [rax], T_undefined
 10605 0000716F 0F843D0D0100            	je L_error_fvar_undefined
 10606 00007175 803804                  	cmp byte [rax], T_closure
 10607 00007178 0F85B80D0100            	jne L_error_non_closure
 10608 0000717E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10609 00007181 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10610 00007184 FF7500                  	push qword[rbp]
 10611 00007187 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10612 0000718A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10613 0000718E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10614 00007192 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10615 00007196 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10616 00007199 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10617 0000719C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10618 000071A1 4983C103                	add r9, 3 	 ;for getting to the params
 10619 000071A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10620 000071A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10621                                  .L_tc_recycle_frame_loop_004a:
 10622 000071AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10623 000071AF 7410                    	je .L_tc_recycle_frame_done_004a
 10624 000071B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10625 000071B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10626 000071B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10627 000071BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10628 000071BF EBEB                    	jmp .L_tc_recycle_frame_loop_004a
 10629                                  .L_tc_recycle_frame_done_004a:
 10630 000071C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10631 000071C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10632 000071C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10633 000071C9 E9CE010000              	jmp .L_if_end_001f
 10634                                  .L_if_else_001f:
 10635                                  	; preparing a non-tail-call
 10636 000071CE 488B4528                	mov rax, PARAM(1)	; param b
 10637 000071D2 50                      	push rax
 10638 000071D3 6A01                    	push 1	; arg count
 10639 000071D5 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 10640 000071DD 803805                  	cmp byte [rax], T_undefined
 10641 000071E0 0F84CC0C0100            	je L_error_fvar_undefined
 10642 000071E6 803804                  	cmp byte [rax], T_closure
 10643 000071E9 0F85470D0100            	jne L_error_non_closure
 10644 000071EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10645 000071F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10646 000071F5 483D[02000000]          	cmp rax, sob_boolean_false
 10647 000071FB 0F8499000000            	je .L_if_else_001e
 10648                                  	; preparing a tail-call
 10649                                  	; preparing a non-tail-call
 10650 00007201 488B4528                	mov rax, PARAM(1)	; param b
 10651 00007205 50                      	push rax
 10652 00007206 6A01                    	push 1	; arg count
 10653 00007208 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10654 00007210 803805                  	cmp byte [rax], T_undefined
 10655 00007213 0F84990C0100            	je L_error_fvar_undefined
 10656 00007219 803804                  	cmp byte [rax], T_closure
 10657 0000721C 0F85140D0100            	jne L_error_non_closure
 10658 00007222 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10659 00007225 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10660 00007228 50                      	push rax
 10661 00007229 488B4520                	mov rax, PARAM(0)	; param a
 10662 0000722D 50                      	push rax
 10663 0000722E 6A02                    	push 2	; arg count
 10664 00007230 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10665 00007238 803805                  	cmp byte [rax], T_undefined
 10666 0000723B 0F84710C0100            	je L_error_fvar_undefined
 10667 00007241 803804                  	cmp byte [rax], T_closure
 10668 00007244 0F85EC0C0100            	jne L_error_non_closure
 10669 0000724A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10670 0000724D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10671 00007250 FF7500                  	push qword[rbp]
 10672 00007253 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10673 00007256 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10674 0000725A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10675 0000725E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10676 00007262 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10677 00007265 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10678 00007268 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10679 0000726D 4983C103                	add r9, 3 	 ;for getting to the params
 10680 00007271 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10681 00007275 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10682                                  .L_tc_recycle_frame_loop_004b:
 10683 00007278 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10684 0000727B 7410                    	je .L_tc_recycle_frame_done_004b
 10685 0000727D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10686 00007280 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10687 00007283 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10688 00007287 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10689 0000728B EBEB                    	jmp .L_tc_recycle_frame_loop_004b
 10690                                  .L_tc_recycle_frame_done_004b:
 10691 0000728D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10692 0000728E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10693 00007292 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10694 00007295 E902010000              	jmp .L_if_end_001e
 10695                                  .L_if_else_001e:
 10696                                  	; preparing a non-tail-call
 10697 0000729A 488B4528                	mov rax, PARAM(1)	; param b
 10698 0000729E 50                      	push rax
 10699 0000729F 6A01                    	push 1	; arg count
 10700 000072A1 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 10701 000072A9 803805                  	cmp byte [rax], T_undefined
 10702 000072AC 0F84000C0100            	je L_error_fvar_undefined
 10703 000072B2 803804                  	cmp byte [rax], T_closure
 10704 000072B5 0F857B0C0100            	jne L_error_non_closure
 10705 000072BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 10706 000072BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 10707 000072C1 483D[02000000]          	cmp rax, sob_boolean_false
 10708 000072C7 7473                    	je .L_if_else_001d
 10709                                  	; preparing a tail-call
 10710 000072C9 488B4528                	mov rax, PARAM(1)	; param b
 10711 000072CD 50                      	push rax
 10712 000072CE 488B4520                	mov rax, PARAM(0)	; param a
 10713 000072D2 50                      	push rax
 10714 000072D3 6A02                    	push 2	; arg count
 10715 000072D5 488B0425[6F0E0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10716 000072DD 803805                  	cmp byte [rax], T_undefined
 10717 000072E0 0F84CC0B0100            	je L_error_fvar_undefined
 10718 000072E6 803804                  	cmp byte [rax], T_closure
 10719 000072E9 0F85470C0100            	jne L_error_non_closure
 10720 000072EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10721 000072F2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10722 000072F5 FF7500                  	push qword[rbp]
 10723 000072F8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10724 000072FB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10725 000072FF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10726 00007303 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10727 00007307 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10728 0000730A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10729 0000730D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10730 00007312 4983C103                	add r9, 3 	 ;for getting to the params
 10731 00007316 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10732 0000731A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10733                                  .L_tc_recycle_frame_loop_004c:
 10734 0000731D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10735 00007320 7410                    	je .L_tc_recycle_frame_done_004c
 10736 00007322 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10737 00007325 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10738 00007328 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10739 0000732C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10740 00007330 EBEB                    	jmp .L_tc_recycle_frame_loop_004c
 10741                                  .L_tc_recycle_frame_done_004c:
 10742 00007332 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10743 00007333 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10744 00007337 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10745 0000733A EB60                    	jmp .L_if_end_001d
 10746                                  .L_if_else_001d:
 10747                                  	; preparing a tail-call
 10748 0000733C 6A00                    	push 0	; arg count
 10749 0000733E 488B4510                	mov rax, ENV
 10750 00007342 488B00                  	mov rax, qword [rax + 8 * 0]
 10751 00007345 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10752 00007348 803804                  	cmp byte [rax], T_closure
 10753 0000734B 0F85E50B0100            	jne L_error_non_closure
 10754 00007351 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10755 00007354 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10756 00007357 FF7500                  	push qword[rbp]
 10757 0000735A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10758 0000735D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10759 00007361 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10760 00007365 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10761 00007369 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10762 0000736C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10763 0000736F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10764 00007374 4983C103                	add r9, 3 	 ;for getting to the params
 10765 00007378 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10766 0000737C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10767                                  .L_tc_recycle_frame_loop_004d:
 10768 0000737F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10769 00007382 7410                    	je .L_tc_recycle_frame_done_004d
 10770 00007384 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10771 00007387 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10772 0000738A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10773 0000738E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10774 00007392 EBEB                    	jmp .L_tc_recycle_frame_loop_004d
 10775                                  .L_tc_recycle_frame_done_004d:
 10776 00007394 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10777 00007395 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10778 00007399 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10779                                  .L_if_end_001d:
 10780                                  .L_if_end_001e:
 10781                                  .L_if_end_001f:
 10782 0000739C EB60                    	jmp .L_if_end_0020
 10783                                  .L_if_else_0020:
 10784                                  	; preparing a tail-call
 10785 0000739E 6A00                    	push 0	; arg count
 10786 000073A0 488B4510                	mov rax, ENV
 10787 000073A4 488B00                  	mov rax, qword [rax + 8 * 0]
 10788 000073A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10789 000073AA 803804                  	cmp byte [rax], T_closure
 10790 000073AD 0F85830B0100            	jne L_error_non_closure
 10791 000073B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10792 000073B6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10793 000073B9 FF7500                  	push qword[rbp]
 10794 000073BC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10795 000073BF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10796 000073C3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10797 000073C7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10798 000073CB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10799 000073CE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10800 000073D1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10801 000073D6 4983C103                	add r9, 3 	 ;for getting to the params
 10802 000073DA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10803 000073DE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10804                                  .L_tc_recycle_frame_loop_004e:
 10805 000073E1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10806 000073E4 7410                    	je .L_tc_recycle_frame_done_004e
 10807 000073E6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10808 000073E9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10809 000073EC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10810 000073F0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10811 000073F4 EBEB                    	jmp .L_tc_recycle_frame_loop_004e
 10812                                  .L_tc_recycle_frame_done_004e:
 10813 000073F6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10814 000073F7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10815 000073FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10816                                  .L_if_end_0020:
 10817                                  .L_if_end_0021:
 10818                                  .L_if_end_0022:
 10819 000073FE C9                      	leave
 10820 000073FF C22000                  	ret AND_KILL_FRAME(2)
 10821                                  .L_lambda_simple_end_003a:	; new closure is in rax
 10822 00007402 50                      	push rax
 10823 00007403 6A01                    	push 1	; arg count
 10824 00007405 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10825 0000740A E8D00B0100              	call malloc
 10826 0000740F 50                      	push rax
 10827 00007410 BF08000000              	mov rdi, 8 * 1	; new rib
 10828 00007415 E8C50B0100              	call malloc
 10829 0000741A 50                      	push rax
 10830 0000741B BF10000000              	mov rdi, 8 * 2	; extended env
 10831 00007420 E8BA0B0100              	call malloc
 10832 00007425 488B7D10                	mov rdi, ENV
 10833 00007429 BE00000000              	mov rsi, 0
 10834 0000742E BA01000000              	mov rdx, 1
 10835                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
 10836 00007433 4883FE01                	cmp rsi, 1
 10837 00007437 7410                    	je .L_lambda_simple_env_end_003b
 10838 00007439 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10839 0000743D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10840 00007441 48FFC6                  	inc rsi
 10841 00007444 48FFC2                  	inc rdx
 10842 00007447 EBEA                    	jmp .L_lambda_simple_env_loop_003b
 10843                                  .L_lambda_simple_env_end_003b:
 10844 00007449 5B                      	pop rbx
 10845 0000744A BE00000000              	mov rsi, 0
 10846                                  .L_lambda_simple_params_loop_003b:	; copy params
 10847 0000744F 4883FE01                	cmp rsi, 1
 10848 00007453 740E                    	je .L_lambda_simple_params_end_003b
 10849 00007455 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10850 0000745A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10851 0000745E 48FFC6                  	inc rsi
 10852 00007461 EBEC                    	jmp .L_lambda_simple_params_loop_003b
 10853                                  .L_lambda_simple_params_end_003b:
 10854 00007463 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10855 00007466 4889C3                  	mov rbx, rax
 10856 00007469 58                      	pop rax
 10857 0000746A C60004                  	mov byte [rax], T_closure
 10858 0000746D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10859 00007471 48C74009[7E740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
 10860 00007479 E9AD020000              	jmp .L_lambda_simple_end_003b
 10861                                  .L_lambda_simple_code_003b:	; lambda-simple body
 10862 0000747E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10863 00007484 740B                    	je .L_lambda_simple_arity_check_ok_003b
 10864 00007486 FF742410                	push qword [rsp + 8 * 2]
 10865 0000748A 6A01                    	push 1
 10866 0000748C E9070B0100              	jmp L_error_incorrect_arity_simple
 10867                                  .L_lambda_simple_arity_check_ok_003b:
 10868 00007491 C8000000                	enter 0, 0
 10869 00007495 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10870 0000749A E8400B0100              	call malloc
 10871 0000749F 50                      	push rax
 10872 000074A0 BF08000000              	mov rdi, 8 * 1	; new rib
 10873 000074A5 E8350B0100              	call malloc
 10874 000074AA 50                      	push rax
 10875 000074AB BF18000000              	mov rdi, 8 * 3	; extended env
 10876 000074B0 E82A0B0100              	call malloc
 10877 000074B5 488B7D10                	mov rdi, ENV
 10878 000074B9 BE00000000              	mov rsi, 0
 10879 000074BE BA01000000              	mov rdx, 1
 10880                                  .L_lambda_opt_env_loop_000a:	; ext_env[i + 1] <-- env[i]
 10881 000074C3 4883FE02                	cmp rsi, 2
 10882 000074C7 7410                    	je .L_lambda_opt_env_end_000a
 10883 000074C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10884 000074CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10885 000074D1 48FFC6                  	inc rsi
 10886 000074D4 48FFC2                  	inc rdx
 10887 000074D7 EBEA                    	jmp .L_lambda_opt_env_loop_000a
 10888                                  .L_lambda_opt_env_end_000a:
 10889 000074D9 5B                      	pop rbx
 10890 000074DA BE00000000              	mov rsi, 0
 10891                                  .L_lambda_opt_params_loop_000a:	; copy params
 10892 000074DF 4883FE01                	cmp rsi, 1
 10893 000074E3 740E                    	je .L_lambda_opt_params_end_000a
 10894 000074E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10895 000074EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10896 000074EE 48FFC6                  	inc rsi
 10897 000074F1 EBEC                    	jmp .L_lambda_opt_params_loop_000a
 10898                                  .L_lambda_opt_params_end_000a:
 10899 000074F3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10900 000074F6 4889C3                  	mov rbx, rax
 10901 000074F9 58                      	pop rax
 10902 000074FA C60004                  	mov byte [rax], T_closure
 10903 000074FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10904 00007501 48C74009[0E750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000a
 10905 00007509 E919020000              	jmp .L_lambda_opt_end_000a
 10906                                  .L_lambda_opt_code_000a:	; lambda-opt body
 10907 0000750E 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10908 00007514 7411                    	je .L_lambda_opt_arity_check_exact_000a
 10909 00007516 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_000a
 10910 0000751C FF742410                	push qword [rsp + 8 * 2]
 10911 00007520 6A00                    	push 0
 10912 00007522 E9850A0100              	jmp L_error_incorrect_arity_opt
 10913                                  .L_lambda_opt_arity_check_exact_000a:
 10914 00007527 4883EC08                	sub rsp, 8
 10915 0000752B 488B442408              	mov rax, qword[rsp + 8 *1]
 10916 00007530 48890424                	mov qword[rsp], rax  
 10917 00007534 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 10918 00007539 4889442408              	mov qword[rsp + 8 * 1], rax
 10919 0000753E B801000000              	mov rax, 1
 10920 00007543 4889442410              	mov qword[rsp + 8 *2], rax
 10921 00007548 48B8-                   	mov rax, sob_nil
 10921 0000754A [0100000000000000] 
 10922 00007552 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 10923 00007557 C8000000                	enter 0, 0
 10924                                  	; preparing a tail-call
 10925 0000755B 488B4520                	mov rax, PARAM(0)	; param s
 10926 0000755F 50                      	push rax
 10927 00007560 48B8-                   	mov rax, L_constants + 2135
 10927 00007562 [5708000000000000] 
 10928 0000756A 50                      	push rax
 10929 0000756B 488B4510                	mov rax, ENV
 10930 0000756F 488B00                  	mov rax, qword [rax + 8 * 0]
 10931 00007572 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 10932 00007575 50                      	push rax
 10933 00007576 6A03                    	push 3	; arg count
 10934 00007578 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 10935 00007580 803805                  	cmp byte [rax], T_undefined
 10936 00007583 0F8429090100            	je L_error_fvar_undefined
 10937 00007589 803804                  	cmp byte [rax], T_closure
 10938 0000758C 0F85A4090100            	jne L_error_non_closure
 10939 00007592 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10940 00007595 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10941 00007598 FF7500                  	push qword[rbp]
 10942 0000759B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10943 0000759E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10944 000075A2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10945 000075A6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10946 000075AA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10947 000075AD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10948 000075B0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10949 000075B5 4983C103                	add r9, 3 	 ;for getting to the params
 10950 000075B9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10951 000075BD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10952                                  .L_tc_recycle_frame_loop_0050:
 10953 000075C0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10954 000075C3 7410                    	je .L_tc_recycle_frame_done_0050
 10955 000075C5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10956 000075C8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10957 000075CB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10958 000075CF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10959 000075D3 EBEB                    	jmp .L_tc_recycle_frame_loop_0050
 10960                                  .L_tc_recycle_frame_done_0050:
 10961 000075D5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10962 000075D6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10963 000075DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10964 000075DD C9                      	leave
 10965 000075DE C21800                  	ret AND_KILL_FRAME(1)
 10966 000075E1 E941010000              	jmp .L_lambda_opt_end_000a	; new closure is in rax
 10967                                  .L_lambda_opt_arity_check_more_000a:
 10968 000075E6 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 10969 000075EB 49B9-                   	mov r9, sob_nil
 10969 000075ED [0100000000000000] 
 10970 000075F5 4889E3                  	mov rbx, rsp 
 10971 000075F8 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 10972 000075FC 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 10973 000075FF 49C1E003                	shl r8, 3
 10974 00007603 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 10975 00007606 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 10976                                  .L_lambda_opt_stack_shrink_loop_000a:
 10977 0000760B 4983F800                	cmp r8, 0
 10978 0000760F 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
 10979 00007611 BF11000000              	mov rdi, 1+8+8	;for pair
 10980 00007616 E8C4090100              	call malloc	 ;to create the pair in the stack
 10981 0000761B C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 10982 0000761E 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 10983 00007621 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 10984 00007625 4C894809                 	mov qword[rax+1+8],r9
 10985 00007629 4989C1                  	mov r9, rax	 ; for the recursion 
 10986 0000762C 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 10987 0000762F 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 10988 00007633 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000a
 10989                                  .L_lambda_opt_stack_shrink_loop_exit_000a:
 10990 00007635 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 10991 0000763A 4883E901                	sub rcx, 1
 10992 0000763E 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 10993 00007642 4801CC                  	add rsp, rcx	 ;shrinking the stack
 10994 00007645 4889E0                  	mov rax, rsp
 10995 00007648 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 10996 0000764B 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 10997 0000764F 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 10998 00007652 4883C018                	add rax, 3 * 8 	;now rax is param 0
 10999 00007656 49C1E003                	shl r8, 3 	; convert to byte
 11000 0000765A 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 11001 0000765D 4C8908                  	mov qword[rax], r9	;puting the list at the top
 11002 00007660 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 11003 00007664 4889E3                  	mov rbx, rsp 
 11004 00007667 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 11005 0000766A 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 11006 00007670 49FFCA                  	dec r10 
 11007 00007673 49C1E203                	shl r10, 3	;to get bytes
 11008 00007677 4883C318                	add rbx, 3*8 	;rbx is the first param
 11009 0000767B 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 11010 0000767E 4889E0                  	mov rax, rsp
 11011 00007681 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 11012 00007684 48C744241001000000      	mov qword [rsp+2*8], 1
 11013 0000768D 488B5808                	mov rbx, qword[rax + 8 *1]
 11014 00007691 48895C2408              	mov qword [rsp + 1*8] ,rbx
 11015 00007696 488B18                  	mov rbx, qword[rax]
 11016 00007699 48891C24                	mov qword [rsp], rbx
 11017 0000769D C8000000                	enter 0, 0
 11018                                  	; preparing a tail-call
 11019 000076A1 488B4520                	mov rax, PARAM(0)	; param s
 11020 000076A5 50                      	push rax
 11021 000076A6 48B8-                   	mov rax, L_constants + 2135
 11021 000076A8 [5708000000000000] 
 11022 000076B0 50                      	push rax
 11023 000076B1 488B4510                	mov rax, ENV
 11024 000076B5 488B00                  	mov rax, qword [rax + 8 * 0]
 11025 000076B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 11026 000076BB 50                      	push rax
 11027 000076BC 6A03                    	push 3	; arg count
 11028 000076BE 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 11029 000076C6 803805                  	cmp byte [rax], T_undefined
 11030 000076C9 0F84E3070100            	je L_error_fvar_undefined
 11031 000076CF 803804                  	cmp byte [rax], T_closure
 11032 000076D2 0F855E080100            	jne L_error_non_closure
 11033 000076D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11034 000076DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11035 000076DE FF7500                  	push qword[rbp]
 11036 000076E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11037 000076E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11038 000076E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11039 000076EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11040 000076F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11041 000076F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11042 000076F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11043 000076FB 4983C103                	add r9, 3 	 ;for getting to the params
 11044 000076FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11045 00007703 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11046                                  .L_tc_recycle_frame_loop_004f:
 11047 00007706 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11048 00007709 7410                    	je .L_tc_recycle_frame_done_004f
 11049 0000770B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11050 0000770E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11051 00007711 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11052 00007715 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11053 00007719 EBEB                    	jmp .L_tc_recycle_frame_loop_004f
 11054                                  .L_tc_recycle_frame_done_004f:
 11055 0000771B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11056 0000771C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11057 00007720 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11058 00007723 C9                      	leave
 11059 00007724 C21800                  	ret AND_KILL_FRAME(1)
 11060                                  .L_lambda_opt_end_000a:	; new closure is in rax
 11061 00007727 C9                      	leave
 11062 00007728 C21800                  	ret AND_KILL_FRAME(1)
 11063                                  .L_lambda_simple_end_003b:	; new closure is in rax
 11064 0000772B 803804                  	cmp byte [rax], T_closure
 11065 0000772E 0F8502080100            	jne L_error_non_closure
 11066 00007734 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11067 00007737 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11068 0000773A FF7500                  	push qword[rbp]
 11069 0000773D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11070 00007740 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11071 00007744 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11072 00007748 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11073 0000774C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11074 0000774F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11075 00007752 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11076 00007757 4983C103                	add r9, 3 	 ;for getting to the params
 11077 0000775B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11078 0000775F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11079                                  .L_tc_recycle_frame_loop_0051:
 11080 00007762 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11081 00007765 7410                    	je .L_tc_recycle_frame_done_0051
 11082 00007767 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11083 0000776A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11084 0000776D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11085 00007771 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11086 00007775 EBEB                    	jmp .L_tc_recycle_frame_loop_0051
 11087                                  .L_tc_recycle_frame_done_0051:
 11088 00007777 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11089 00007778 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11090 0000777C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11091 0000777F C9                      	leave
 11092 00007780 C21800                  	ret AND_KILL_FRAME(1)
 11093                                  .L_lambda_simple_end_0039:	; new closure is in rax
 11094 00007783 803804                  	cmp byte [rax], T_closure
 11095 00007786 0F85AA070100            	jne L_error_non_closure
 11096 0000778C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11097 0000778F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11098 00007792 48890425[D60D0000]      	mov qword [free_var_1], rax
 11099 0000779A 48B8-                   	mov rax, sob_void
 11099 0000779C [0000000000000000] 
 11100                                  
 11101 000077A4 4889C7                  	mov rdi, rax
 11102 000077A7 E8880A0100              	call print_sexpr_if_not_void
 11103                                  	; preparing a non-tail-call
 11104 000077AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11105 000077B1 E829080100              	call malloc
 11106 000077B6 50                      	push rax
 11107 000077B7 BF00000000              	mov rdi, 8 * 0	; new rib
 11108 000077BC E81E080100              	call malloc
 11109 000077C1 50                      	push rax
 11110 000077C2 BF08000000              	mov rdi, 8 * 1	; extended env
 11111 000077C7 E813080100              	call malloc
 11112 000077CC 488B7D10                	mov rdi, ENV
 11113 000077D0 BE00000000              	mov rsi, 0
 11114 000077D5 BA01000000              	mov rdx, 1
 11115                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
 11116 000077DA 4883FE00                	cmp rsi, 0
 11117 000077DE 7410                    	je .L_lambda_simple_env_end_003c
 11118 000077E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11119 000077E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11120 000077E8 48FFC6                  	inc rsi
 11121 000077EB 48FFC2                  	inc rdx
 11122 000077EE EBEA                    	jmp .L_lambda_simple_env_loop_003c
 11123                                  .L_lambda_simple_env_end_003c:
 11124 000077F0 5B                      	pop rbx
 11125 000077F1 BE00000000              	mov rsi, 0
 11126                                  .L_lambda_simple_params_loop_003c:	; copy params
 11127 000077F6 4883FE00                	cmp rsi, 0
 11128 000077FA 740E                    	je .L_lambda_simple_params_end_003c
 11129 000077FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11130 00007801 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11131 00007805 48FFC6                  	inc rsi
 11132 00007808 EBEC                    	jmp .L_lambda_simple_params_loop_003c
 11133                                  .L_lambda_simple_params_end_003c:
 11134 0000780A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11135 0000780D 4889C3                  	mov rbx, rax
 11136 00007810 58                      	pop rax
 11137 00007811 C60004                  	mov byte [rax], T_closure
 11138 00007814 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11139 00007818 48C74009[25780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
 11140 00007820 E998000000              	jmp .L_lambda_simple_end_003c
 11141                                  .L_lambda_simple_code_003c:	; lambda-simple body
 11142 00007825 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11143 0000782B 740B                    	je .L_lambda_simple_arity_check_ok_003c
 11144 0000782D FF742410                	push qword [rsp + 8 * 2]
 11145 00007831 6A00                    	push 0
 11146 00007833 E960070100              	jmp L_error_incorrect_arity_simple
 11147                                  .L_lambda_simple_arity_check_ok_003c:
 11148 00007838 C8000000                	enter 0, 0
 11149                                  	; preparing a tail-call
 11150 0000783C 48B8-                   	mov rax, L_constants + 2187
 11150 0000783E [8B08000000000000] 
 11151 00007846 50                      	push rax
 11152 00007847 48B8-                   	mov rax, L_constants + 2251
 11152 00007849 [CB08000000000000] 
 11153 00007851 50                      	push rax
 11154 00007852 6A02                    	push 2	; arg count
 11155 00007854 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 11156 0000785C 803805                  	cmp byte [rax], T_undefined
 11157 0000785F 0F844D060100            	je L_error_fvar_undefined
 11158 00007865 803804                  	cmp byte [rax], T_closure
 11159 00007868 0F85C8060100            	jne L_error_non_closure
 11160 0000786E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11161 00007871 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11162 00007874 FF7500                  	push qword[rbp]
 11163 00007877 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11164 0000787A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11165 0000787E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11166 00007882 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11167 00007886 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11168 00007889 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11169 0000788C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11170 00007891 4983C103                	add r9, 3 	 ;for getting to the params
 11171 00007895 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11172 00007899 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11173                                  .L_tc_recycle_frame_loop_0052:
 11174 0000789C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11175 0000789F 7410                    	je .L_tc_recycle_frame_done_0052
 11176 000078A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11177 000078A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11178 000078A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11179 000078AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11180 000078AF EBEB                    	jmp .L_tc_recycle_frame_loop_0052
 11181                                  .L_tc_recycle_frame_done_0052:
 11182 000078B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11183 000078B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11184 000078B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11185 000078B9 C9                      	leave
 11186 000078BA C21000                  	ret AND_KILL_FRAME(0)
 11187                                  .L_lambda_simple_end_003c:	; new closure is in rax
 11188 000078BD 50                      	push rax
 11189 000078BE 6A01                    	push 1	; arg count
 11190 000078C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11191 000078C5 E815070100              	call malloc
 11192 000078CA 50                      	push rax
 11193 000078CB BF00000000              	mov rdi, 8 * 0	; new rib
 11194 000078D0 E80A070100              	call malloc
 11195 000078D5 50                      	push rax
 11196 000078D6 BF08000000              	mov rdi, 8 * 1	; extended env
 11197 000078DB E8FF060100              	call malloc
 11198 000078E0 488B7D10                	mov rdi, ENV
 11199 000078E4 BE00000000              	mov rsi, 0
 11200 000078E9 BA01000000              	mov rdx, 1
 11201                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
 11202 000078EE 4883FE00                	cmp rsi, 0
 11203 000078F2 7410                    	je .L_lambda_simple_env_end_003d
 11204 000078F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11205 000078F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11206 000078FC 48FFC6                  	inc rsi
 11207 000078FF 48FFC2                  	inc rdx
 11208 00007902 EBEA                    	jmp .L_lambda_simple_env_loop_003d
 11209                                  .L_lambda_simple_env_end_003d:
 11210 00007904 5B                      	pop rbx
 11211 00007905 BE00000000              	mov rsi, 0
 11212                                  .L_lambda_simple_params_loop_003d:	; copy params
 11213 0000790A 4883FE00                	cmp rsi, 0
 11214 0000790E 740E                    	je .L_lambda_simple_params_end_003d
 11215 00007910 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11216 00007915 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11217 00007919 48FFC6                  	inc rsi
 11218 0000791C EBEC                    	jmp .L_lambda_simple_params_loop_003d
 11219                                  .L_lambda_simple_params_end_003d:
 11220 0000791E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11221 00007921 4889C3                  	mov rbx, rax
 11222 00007924 58                      	pop rax
 11223 00007925 C60004                  	mov byte [rax], T_closure
 11224 00007928 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11225 0000792C 48C74009[39790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
 11226 00007934 E99B100000              	jmp .L_lambda_simple_end_003d
 11227                                  .L_lambda_simple_code_003d:	; lambda-simple body
 11228 00007939 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11229 0000793F 740B                    	je .L_lambda_simple_arity_check_ok_003d
 11230 00007941 FF742410                	push qword [rsp + 8 * 2]
 11231 00007945 6A01                    	push 1
 11232 00007947 E94C060100              	jmp L_error_incorrect_arity_simple
 11233                                  .L_lambda_simple_arity_check_ok_003d:
 11234 0000794C C8000000                	enter 0, 0
 11235                                  	; preparing a tail-call
 11236 00007950 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11237 00007955 E885060100              	call malloc
 11238 0000795A 50                      	push rax
 11239 0000795B BF08000000              	mov rdi, 8 * 1	; new rib
 11240 00007960 E87A060100              	call malloc
 11241 00007965 50                      	push rax
 11242 00007966 BF10000000              	mov rdi, 8 * 2	; extended env
 11243 0000796B E86F060100              	call malloc
 11244 00007970 488B7D10                	mov rdi, ENV
 11245 00007974 BE00000000              	mov rsi, 0
 11246 00007979 BA01000000              	mov rdx, 1
 11247                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
 11248 0000797E 4883FE01                	cmp rsi, 1
 11249 00007982 7410                    	je .L_lambda_simple_env_end_003e
 11250 00007984 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11251 00007988 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11252 0000798C 48FFC6                  	inc rsi
 11253 0000798F 48FFC2                  	inc rdx
 11254 00007992 EBEA                    	jmp .L_lambda_simple_env_loop_003e
 11255                                  .L_lambda_simple_env_end_003e:
 11256 00007994 5B                      	pop rbx
 11257 00007995 BE00000000              	mov rsi, 0
 11258                                  .L_lambda_simple_params_loop_003e:	; copy params
 11259 0000799A 4883FE01                	cmp rsi, 1
 11260 0000799E 740E                    	je .L_lambda_simple_params_end_003e
 11261 000079A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11262 000079A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11263 000079A9 48FFC6                  	inc rsi
 11264 000079AC EBEC                    	jmp .L_lambda_simple_params_loop_003e
 11265                                  .L_lambda_simple_params_end_003e:
 11266 000079AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11267 000079B1 4889C3                  	mov rbx, rax
 11268 000079B4 58                      	pop rax
 11269 000079B5 C60004                  	mov byte [rax], T_closure
 11270 000079B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11271 000079BC 48C74009[C9790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
 11272 000079C4 E9EE080000              	jmp .L_lambda_simple_end_003e
 11273                                  .L_lambda_simple_code_003e:	; lambda-simple body
 11274 000079C9 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11275 000079CF 740B                    	je .L_lambda_simple_arity_check_ok_003e
 11276 000079D1 FF742410                	push qword [rsp + 8 * 2]
 11277 000079D5 6A02                    	push 2
 11278 000079D7 E9BC050100              	jmp L_error_incorrect_arity_simple
 11279                                  .L_lambda_simple_arity_check_ok_003e:
 11280 000079DC C8000000                	enter 0, 0
 11281                                  	; preparing a non-tail-call
 11282 000079E0 488B4520                	mov rax, PARAM(0)	; param a
 11283 000079E4 50                      	push rax
 11284 000079E5 6A01                    	push 1	; arg count
 11285 000079E7 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11286 000079EF 803805                  	cmp byte [rax], T_undefined
 11287 000079F2 0F84BA040100            	je L_error_fvar_undefined
 11288 000079F8 803804                  	cmp byte [rax], T_closure
 11289 000079FB 0F8535050100            	jne L_error_non_closure
 11290 00007A01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11291 00007A04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11292 00007A07 483D[02000000]          	cmp rax, sob_boolean_false
 11293 00007A0D 0F849F020000            	je .L_if_else_002e
 11294                                  	; preparing a non-tail-call
 11295 00007A13 488B4528                	mov rax, PARAM(1)	; param b
 11296 00007A17 50                      	push rax
 11297 00007A18 6A01                    	push 1	; arg count
 11298 00007A1A 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11299 00007A22 803805                  	cmp byte [rax], T_undefined
 11300 00007A25 0F8487040100            	je L_error_fvar_undefined
 11301 00007A2B 803804                  	cmp byte [rax], T_closure
 11302 00007A2E 0F8502050100            	jne L_error_non_closure
 11303 00007A34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11304 00007A37 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11305 00007A3A 483D[02000000]          	cmp rax, sob_boolean_false
 11306 00007A40 7476                    	je .L_if_else_0025
 11307                                  	; preparing a tail-call
 11308 00007A42 488B4528                	mov rax, PARAM(1)	; param b
 11309 00007A46 50                      	push rax
 11310 00007A47 488B4520                	mov rax, PARAM(0)	; param a
 11311 00007A4B 50                      	push rax
 11312 00007A4C 6A02                    	push 2	; arg count
 11313 00007A4E 488B0425[900F0000]      	mov rax, qword [free_var_27]	; free var __bin-sub-zz
 11314 00007A56 803805                  	cmp byte [rax], T_undefined
 11315 00007A59 0F8453040100            	je L_error_fvar_undefined
 11316 00007A5F 803804                  	cmp byte [rax], T_closure
 11317 00007A62 0F85CE040100            	jne L_error_non_closure
 11318 00007A68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11319 00007A6B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11320 00007A6E FF7500                  	push qword[rbp]
 11321 00007A71 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11322 00007A74 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11323 00007A78 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11324 00007A7C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11325 00007A80 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11326 00007A83 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11327 00007A86 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11328 00007A8B 4983C103                	add r9, 3 	 ;for getting to the params
 11329 00007A8F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11330 00007A93 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11331                                  .L_tc_recycle_frame_loop_0053:
 11332 00007A96 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11333 00007A99 7410                    	je .L_tc_recycle_frame_done_0053
 11334 00007A9B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11335 00007A9E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11336 00007AA1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11337 00007AA5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11338 00007AA9 EBEB                    	jmp .L_tc_recycle_frame_loop_0053
 11339                                  .L_tc_recycle_frame_done_0053:
 11340 00007AAB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11341 00007AAC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11342 00007AB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11343 00007AB3 E9F5010000              	jmp .L_if_end_0025
 11344                                  .L_if_else_0025:
 11345                                  	; preparing a non-tail-call
 11346 00007AB8 488B4528                	mov rax, PARAM(1)	; param b
 11347 00007ABC 50                      	push rax
 11348 00007ABD 6A01                    	push 1	; arg count
 11349 00007ABF 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11350 00007AC7 803805                  	cmp byte [rax], T_undefined
 11351 00007ACA 0F84E2030100            	je L_error_fvar_undefined
 11352 00007AD0 803804                  	cmp byte [rax], T_closure
 11353 00007AD3 0F855D040100            	jne L_error_non_closure
 11354 00007AD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11355 00007ADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11356 00007ADF 483D[02000000]          	cmp rax, sob_boolean_false
 11357 00007AE5 0F8499000000            	je .L_if_else_0024
 11358                                  	; preparing a tail-call
 11359 00007AEB 488B4528                	mov rax, PARAM(1)	; param b
 11360 00007AEF 50                      	push rax
 11361                                  	; preparing a non-tail-call
 11362 00007AF0 488B4520                	mov rax, PARAM(0)	; param a
 11363 00007AF4 50                      	push rax
 11364 00007AF5 6A01                    	push 1	; arg count
 11365 00007AF7 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11366 00007AFF 803805                  	cmp byte [rax], T_undefined
 11367 00007B02 0F84AA030100            	je L_error_fvar_undefined
 11368 00007B08 803804                  	cmp byte [rax], T_closure
 11369 00007B0B 0F8525040100            	jne L_error_non_closure
 11370 00007B11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11371 00007B14 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11372 00007B17 50                      	push rax
 11373 00007B18 6A02                    	push 2	; arg count
 11374 00007B1A 488B0425[6E0F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11375 00007B22 803805                  	cmp byte [rax], T_undefined
 11376 00007B25 0F8487030100            	je L_error_fvar_undefined
 11377 00007B2B 803804                  	cmp byte [rax], T_closure
 11378 00007B2E 0F8502040100            	jne L_error_non_closure
 11379 00007B34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11380 00007B37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11381 00007B3A FF7500                  	push qword[rbp]
 11382 00007B3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11383 00007B40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11384 00007B44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11385 00007B48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11386 00007B4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11387 00007B4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11388 00007B52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11389 00007B57 4983C103                	add r9, 3 	 ;for getting to the params
 11390 00007B5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11391 00007B5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11392                                  .L_tc_recycle_frame_loop_0054:
 11393 00007B62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11394 00007B65 7410                    	je .L_tc_recycle_frame_done_0054
 11395 00007B67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11396 00007B6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11397 00007B6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11398 00007B71 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11399 00007B75 EBEB                    	jmp .L_tc_recycle_frame_loop_0054
 11400                                  .L_tc_recycle_frame_done_0054:
 11401 00007B77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11402 00007B78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11403 00007B7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11404 00007B7F E929010000              	jmp .L_if_end_0024
 11405                                  .L_if_else_0024:
 11406                                  	; preparing a non-tail-call
 11407 00007B84 488B4528                	mov rax, PARAM(1)	; param b
 11408 00007B88 50                      	push rax
 11409 00007B89 6A01                    	push 1	; arg count
 11410 00007B8B 488B0425[68150000]      	mov rax, qword [free_var_115]	; free var real
 11411 00007B93 803805                  	cmp byte [rax], T_undefined
 11412 00007B96 0F8416030100            	je L_error_fvar_undefined
 11413 00007B9C 803804                  	cmp byte [rax], T_closure
 11414 00007B9F 0F8591030100            	jne L_error_non_closure
 11415 00007BA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11416 00007BA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11417 00007BAB 483D[02000000]          	cmp rax, sob_boolean_false
 11418 00007BB1 0F8496000000            	je .L_if_else_0023
 11419                                  	; preparing a tail-call
 11420 00007BB7 488B4528                	mov rax, PARAM(1)	; param b
 11421 00007BBB 50                      	push rax
 11422                                  	; preparing a non-tail-call
 11423 00007BBC 488B4520                	mov rax, PARAM(0)	; param a
 11424 00007BC0 50                      	push rax
 11425 00007BC1 6A01                    	push 1	; arg count
 11426 00007BC3 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11427 00007BCB 803805                  	cmp byte [rax], T_undefined
 11428 00007BCE 0F84DE020100            	je L_error_fvar_undefined
 11429 00007BD4 803804                  	cmp byte [rax], T_closure
 11430 00007BD7 0F8559030100            	jne L_error_non_closure
 11431 00007BDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11432 00007BE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11433 00007BE3 50                      	push rax
 11434 00007BE4 6A02                    	push 2	; arg count
 11435 00007BE6 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11436 00007BEE 803805                  	cmp byte [rax], T_undefined
 11437 00007BF1 0F84BB020100            	je L_error_fvar_undefined
 11438 00007BF7 803804                  	cmp byte [rax], T_closure
 11439 00007BFA 0F8536030100            	jne L_error_non_closure
 11440 00007C00 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11441 00007C03 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11442 00007C06 FF7500                  	push qword[rbp]
 11443 00007C09 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11444 00007C0C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11445 00007C10 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11446 00007C14 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11447 00007C18 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11448 00007C1B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11449 00007C1E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11450 00007C23 4983C103                	add r9, 3 	 ;for getting to the params
 11451 00007C27 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11452 00007C2B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11453                                  .L_tc_recycle_frame_loop_0055:
 11454 00007C2E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11455 00007C31 7410                    	je .L_tc_recycle_frame_done_0055
 11456 00007C33 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11457 00007C36 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11458 00007C39 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11459 00007C3D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11460 00007C41 EBEB                    	jmp .L_tc_recycle_frame_loop_0055
 11461                                  .L_tc_recycle_frame_done_0055:
 11462 00007C43 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11463 00007C44 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11464 00007C48 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11465 00007C4B EB60                    	jmp .L_if_end_0023
 11466                                  .L_if_else_0023:
 11467                                  	; preparing a tail-call
 11468 00007C4D 6A00                    	push 0	; arg count
 11469 00007C4F 488B4510                	mov rax, ENV
 11470 00007C53 488B00                  	mov rax, qword [rax + 8 * 0]
 11471 00007C56 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11472 00007C59 803804                  	cmp byte [rax], T_closure
 11473 00007C5C 0F85D4020100            	jne L_error_non_closure
 11474 00007C62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11475 00007C65 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11476 00007C68 FF7500                  	push qword[rbp]
 11477 00007C6B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11478 00007C6E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11479 00007C72 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11480 00007C76 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11481 00007C7A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11482 00007C7D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11483 00007C80 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11484 00007C85 4983C103                	add r9, 3 	 ;for getting to the params
 11485 00007C89 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11486 00007C8D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11487                                  .L_tc_recycle_frame_loop_0056:
 11488 00007C90 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11489 00007C93 7410                    	je .L_tc_recycle_frame_done_0056
 11490 00007C95 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11491 00007C98 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11492 00007C9B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11493 00007C9F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11494 00007CA3 EBEB                    	jmp .L_tc_recycle_frame_loop_0056
 11495                                  .L_tc_recycle_frame_done_0056:
 11496 00007CA5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11497 00007CA6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11498 00007CAA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11499                                  .L_if_end_0023:
 11500                                  .L_if_end_0024:
 11501                                  .L_if_end_0025:
 11502 00007CAD E901060000              	jmp .L_if_end_002e
 11503                                  .L_if_else_002e:
 11504                                  	; preparing a non-tail-call
 11505 00007CB2 488B4520                	mov rax, PARAM(0)	; param a
 11506 00007CB6 50                      	push rax
 11507 00007CB7 6A01                    	push 1	; arg count
 11508 00007CB9 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11509 00007CC1 803805                  	cmp byte [rax], T_undefined
 11510 00007CC4 0F84E8010100            	je L_error_fvar_undefined
 11511 00007CCA 803804                  	cmp byte [rax], T_closure
 11512 00007CCD 0F8563020100            	jne L_error_non_closure
 11513 00007CD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11514 00007CD6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11515 00007CD9 483D[02000000]          	cmp rax, sob_boolean_false
 11516 00007CDF 0F849F020000            	je .L_if_else_002d
 11517                                  	; preparing a non-tail-call
 11518 00007CE5 488B4528                	mov rax, PARAM(1)	; param b
 11519 00007CE9 50                      	push rax
 11520 00007CEA 6A01                    	push 1	; arg count
 11521 00007CEC 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11522 00007CF4 803805                  	cmp byte [rax], T_undefined
 11523 00007CF7 0F84B5010100            	je L_error_fvar_undefined
 11524 00007CFD 803804                  	cmp byte [rax], T_closure
 11525 00007D00 0F8530020100            	jne L_error_non_closure
 11526 00007D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11527 00007D09 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11528 00007D0C 483D[02000000]          	cmp rax, sob_boolean_false
 11529 00007D12 0F8499000000            	je .L_if_else_0028
 11530                                  	; preparing a tail-call
 11531                                  	; preparing a non-tail-call
 11532 00007D18 488B4528                	mov rax, PARAM(1)	; param b
 11533 00007D1C 50                      	push rax
 11534 00007D1D 6A01                    	push 1	; arg count
 11535 00007D1F 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11536 00007D27 803805                  	cmp byte [rax], T_undefined
 11537 00007D2A 0F8482010100            	je L_error_fvar_undefined
 11538 00007D30 803804                  	cmp byte [rax], T_closure
 11539 00007D33 0F85FD010100            	jne L_error_non_closure
 11540 00007D39 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11541 00007D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11542 00007D3F 50                      	push rax
 11543 00007D40 488B4520                	mov rax, PARAM(0)	; param a
 11544 00007D44 50                      	push rax
 11545 00007D45 6A02                    	push 2	; arg count
 11546 00007D47 488B0425[6E0F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11547 00007D4F 803805                  	cmp byte [rax], T_undefined
 11548 00007D52 0F845A010100            	je L_error_fvar_undefined
 11549 00007D58 803804                  	cmp byte [rax], T_closure
 11550 00007D5B 0F85D5010100            	jne L_error_non_closure
 11551 00007D61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11552 00007D64 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11553 00007D67 FF7500                  	push qword[rbp]
 11554 00007D6A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11555 00007D6D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11556 00007D71 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11557 00007D75 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11558 00007D79 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11559 00007D7C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11560 00007D7F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11561 00007D84 4983C103                	add r9, 3 	 ;for getting to the params
 11562 00007D88 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11563 00007D8C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11564                                  .L_tc_recycle_frame_loop_0057:
 11565 00007D8F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11566 00007D92 7410                    	je .L_tc_recycle_frame_done_0057
 11567 00007D94 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11568 00007D97 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11569 00007D9A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11570 00007D9E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11571 00007DA2 EBEB                    	jmp .L_tc_recycle_frame_loop_0057
 11572                                  .L_tc_recycle_frame_done_0057:
 11573 00007DA4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11574 00007DA5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11575 00007DA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11576 00007DAC E9CE010000              	jmp .L_if_end_0028
 11577                                  .L_if_else_0028:
 11578                                  	; preparing a non-tail-call
 11579 00007DB1 488B4528                	mov rax, PARAM(1)	; param b
 11580 00007DB5 50                      	push rax
 11581 00007DB6 6A01                    	push 1	; arg count
 11582 00007DB8 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11583 00007DC0 803805                  	cmp byte [rax], T_undefined
 11584 00007DC3 0F84E9000100            	je L_error_fvar_undefined
 11585 00007DC9 803804                  	cmp byte [rax], T_closure
 11586 00007DCC 0F8564010100            	jne L_error_non_closure
 11587 00007DD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11588 00007DD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11589 00007DD8 483D[02000000]          	cmp rax, sob_boolean_false
 11590 00007DDE 7476                    	je .L_if_else_0027
 11591                                  	; preparing a tail-call
 11592 00007DE0 488B4528                	mov rax, PARAM(1)	; param b
 11593 00007DE4 50                      	push rax
 11594 00007DE5 488B4520                	mov rax, PARAM(0)	; param a
 11595 00007DE9 50                      	push rax
 11596 00007DEA 6A02                    	push 2	; arg count
 11597 00007DEC 488B0425[6E0F0000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11598 00007DF4 803805                  	cmp byte [rax], T_undefined
 11599 00007DF7 0F84B5000100            	je L_error_fvar_undefined
 11600 00007DFD 803804                  	cmp byte [rax], T_closure
 11601 00007E00 0F8530010100            	jne L_error_non_closure
 11602 00007E06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11603 00007E09 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11604 00007E0C FF7500                  	push qword[rbp]
 11605 00007E0F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11606 00007E12 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11607 00007E16 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11608 00007E1A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11609 00007E1E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11610 00007E21 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11611 00007E24 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11612 00007E29 4983C103                	add r9, 3 	 ;for getting to the params
 11613 00007E2D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11614 00007E31 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11615                                  .L_tc_recycle_frame_loop_0058:
 11616 00007E34 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11617 00007E37 7410                    	je .L_tc_recycle_frame_done_0058
 11618 00007E39 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11619 00007E3C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11620 00007E3F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11621 00007E43 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11622 00007E47 EBEB                    	jmp .L_tc_recycle_frame_loop_0058
 11623                                  .L_tc_recycle_frame_done_0058:
 11624 00007E49 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11625 00007E4A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11626 00007E4E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11627 00007E51 E929010000              	jmp .L_if_end_0027
 11628                                  .L_if_else_0027:
 11629                                  	; preparing a non-tail-call
 11630 00007E56 488B4528                	mov rax, PARAM(1)	; param b
 11631 00007E5A 50                      	push rax
 11632 00007E5B 6A01                    	push 1	; arg count
 11633 00007E5D 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 11634 00007E65 803805                  	cmp byte [rax], T_undefined
 11635 00007E68 0F8444000100            	je L_error_fvar_undefined
 11636 00007E6E 803804                  	cmp byte [rax], T_closure
 11637 00007E71 0F85BF000100            	jne L_error_non_closure
 11638 00007E77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11639 00007E7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11640 00007E7D 483D[02000000]          	cmp rax, sob_boolean_false
 11641 00007E83 0F8496000000            	je .L_if_else_0026
 11642                                  	; preparing a tail-call
 11643 00007E89 488B4528                	mov rax, PARAM(1)	; param b
 11644 00007E8D 50                      	push rax
 11645                                  	; preparing a non-tail-call
 11646 00007E8E 488B4520                	mov rax, PARAM(0)	; param a
 11647 00007E92 50                      	push rax
 11648 00007E93 6A01                    	push 1	; arg count
 11649 00007E95 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11650 00007E9D 803805                  	cmp byte [rax], T_undefined
 11651 00007EA0 0F840C000100            	je L_error_fvar_undefined
 11652 00007EA6 803804                  	cmp byte [rax], T_closure
 11653 00007EA9 0F8587000100            	jne L_error_non_closure
 11654 00007EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11655 00007EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11656 00007EB5 50                      	push rax
 11657 00007EB6 6A02                    	push 2	; arg count
 11658 00007EB8 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11659 00007EC0 803805                  	cmp byte [rax], T_undefined
 11660 00007EC3 0F84E9FF0000            	je L_error_fvar_undefined
 11661 00007EC9 803804                  	cmp byte [rax], T_closure
 11662 00007ECC 0F8564000100            	jne L_error_non_closure
 11663 00007ED2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11664 00007ED5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11665 00007ED8 FF7500                  	push qword[rbp]
 11666 00007EDB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11667 00007EDE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11668 00007EE2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11669 00007EE6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11670 00007EEA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11671 00007EED 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11672 00007EF0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11673 00007EF5 4983C103                	add r9, 3 	 ;for getting to the params
 11674 00007EF9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11675 00007EFD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11676                                  .L_tc_recycle_frame_loop_0059:
 11677 00007F00 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11678 00007F03 7410                    	je .L_tc_recycle_frame_done_0059
 11679 00007F05 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11680 00007F08 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11681 00007F0B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11682 00007F0F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11683 00007F13 EBEB                    	jmp .L_tc_recycle_frame_loop_0059
 11684                                  .L_tc_recycle_frame_done_0059:
 11685 00007F15 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11686 00007F16 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11687 00007F1A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11688 00007F1D EB60                    	jmp .L_if_end_0026
 11689                                  .L_if_else_0026:
 11690                                  	; preparing a tail-call
 11691 00007F1F 6A00                    	push 0	; arg count
 11692 00007F21 488B4510                	mov rax, ENV
 11693 00007F25 488B00                  	mov rax, qword [rax + 8 * 0]
 11694 00007F28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11695 00007F2B 803804                  	cmp byte [rax], T_closure
 11696 00007F2E 0F8502000100            	jne L_error_non_closure
 11697 00007F34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11698 00007F37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11699 00007F3A FF7500                  	push qword[rbp]
 11700 00007F3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11701 00007F40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11702 00007F44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11703 00007F48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11704 00007F4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11705 00007F4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11706 00007F52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11707 00007F57 4983C103                	add r9, 3 	 ;for getting to the params
 11708 00007F5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11709 00007F5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11710                                  .L_tc_recycle_frame_loop_005a:
 11711 00007F62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11712 00007F65 7410                    	je .L_tc_recycle_frame_done_005a
 11713 00007F67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11714 00007F6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11715 00007F6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11716 00007F71 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11717 00007F75 EBEB                    	jmp .L_tc_recycle_frame_loop_005a
 11718                                  .L_tc_recycle_frame_done_005a:
 11719 00007F77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11720 00007F78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11721 00007F7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11722                                  .L_if_end_0026:
 11723                                  .L_if_end_0027:
 11724                                  .L_if_end_0028:
 11725 00007F7F E92F030000              	jmp .L_if_end_002d
 11726                                  .L_if_else_002d:
 11727                                  	; preparing a non-tail-call
 11728 00007F84 488B4520                	mov rax, PARAM(0)	; param a
 11729 00007F88 50                      	push rax
 11730 00007F89 6A01                    	push 1	; arg count
 11731 00007F8B 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 11732 00007F93 803805                  	cmp byte [rax], T_undefined
 11733 00007F96 0F8416FF0000            	je L_error_fvar_undefined
 11734 00007F9C 803804                  	cmp byte [rax], T_closure
 11735 00007F9F 0F8591FF0000            	jne L_error_non_closure
 11736 00007FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11737 00007FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11738 00007FAB 483D[02000000]          	cmp rax, sob_boolean_false
 11739 00007FB1 0F849C020000            	je .L_if_else_002c
 11740                                  	; preparing a non-tail-call
 11741 00007FB7 488B4528                	mov rax, PARAM(1)	; param b
 11742 00007FBB 50                      	push rax
 11743 00007FBC 6A01                    	push 1	; arg count
 11744 00007FBE 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 11745 00007FC6 803805                  	cmp byte [rax], T_undefined
 11746 00007FC9 0F84E3FE0000            	je L_error_fvar_undefined
 11747 00007FCF 803804                  	cmp byte [rax], T_closure
 11748 00007FD2 0F855EFF0000            	jne L_error_non_closure
 11749 00007FD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11750 00007FDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 11751 00007FDE 483D[02000000]          	cmp rax, sob_boolean_false
 11752 00007FE4 0F8499000000            	je .L_if_else_002b
 11753                                  	; preparing a tail-call
 11754                                  	; preparing a non-tail-call
 11755 00007FEA 488B4528                	mov rax, PARAM(1)	; param b
 11756 00007FEE 50                      	push rax
 11757 00007FEF 6A01                    	push 1	; arg count
 11758 00007FF1 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 11759 00007FF9 803805                  	cmp byte [rax], T_undefined
 11760 00007FFC 0F84B0FE0000            	je L_error_fvar_undefined
 11761 00008002 803804                  	cmp byte [rax], T_closure
 11762 00008005 0F852BFF0000            	jne L_error_non_closure
 11763 0000800B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11764 0000800E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11765 00008011 50                      	push rax
 11766 00008012 488B4520                	mov rax, PARAM(0)	; param a
 11767 00008016 50                      	push rax
 11768 00008017 6A02                    	push 2	; arg count
 11769 00008019 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11770 00008021 803805                  	cmp byte [rax], T_undefined
 11771 00008024 0F8488FE0000            	je L_error_fvar_undefined
 11772 0000802A 803804                  	cmp byte [rax], T_closure
 11773 0000802D 0F8503FF0000            	jne L_error_non_closure
 11774 00008033 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11775 00008036 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11776 00008039 FF7500                  	push qword[rbp]
 11777 0000803C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11778 0000803F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11779 00008043 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11780 00008047 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11781 0000804B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11782 0000804E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11783 00008051 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11784 00008056 4983C103                	add r9, 3 	 ;for getting to the params
 11785 0000805A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11786 0000805E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11787                                  .L_tc_recycle_frame_loop_005b:
 11788 00008061 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11789 00008064 7410                    	je .L_tc_recycle_frame_done_005b
 11790 00008066 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11791 00008069 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11792 0000806C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11793 00008070 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11794 00008074 EBEB                    	jmp .L_tc_recycle_frame_loop_005b
 11795                                  .L_tc_recycle_frame_done_005b:
 11796 00008076 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11797 00008077 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11798 0000807B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11799 0000807E E9CE010000              	jmp .L_if_end_002b
 11800                                  .L_if_else_002b:
 11801                                  	; preparing a non-tail-call
 11802 00008083 488B4528                	mov rax, PARAM(1)	; param b
 11803 00008087 50                      	push rax
 11804 00008088 6A01                    	push 1	; arg count
 11805 0000808A 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 11806 00008092 803805                  	cmp byte [rax], T_undefined
 11807 00008095 0F8417FE0000            	je L_error_fvar_undefined
 11808 0000809B 803804                  	cmp byte [rax], T_closure
 11809 0000809E 0F8592FE0000            	jne L_error_non_closure
 11810 000080A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11811 000080A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11812 000080AA 483D[02000000]          	cmp rax, sob_boolean_false
 11813 000080B0 0F8499000000            	je .L_if_else_002a
 11814                                  	; preparing a tail-call
 11815                                  	; preparing a non-tail-call
 11816 000080B6 488B4528                	mov rax, PARAM(1)	; param b
 11817 000080BA 50                      	push rax
 11818 000080BB 6A01                    	push 1	; arg count
 11819 000080BD 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11820 000080C5 803805                  	cmp byte [rax], T_undefined
 11821 000080C8 0F84E4FD0000            	je L_error_fvar_undefined
 11822 000080CE 803804                  	cmp byte [rax], T_closure
 11823 000080D1 0F855FFE0000            	jne L_error_non_closure
 11824 000080D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11825 000080DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 11826 000080DD 50                      	push rax
 11827 000080DE 488B4520                	mov rax, PARAM(0)	; param a
 11828 000080E2 50                      	push rax
 11829 000080E3 6A02                    	push 2	; arg count
 11830 000080E5 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11831 000080ED 803805                  	cmp byte [rax], T_undefined
 11832 000080F0 0F84BCFD0000            	je L_error_fvar_undefined
 11833 000080F6 803804                  	cmp byte [rax], T_closure
 11834 000080F9 0F8537FE0000            	jne L_error_non_closure
 11835 000080FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11836 00008102 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11837 00008105 FF7500                  	push qword[rbp]
 11838 00008108 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11839 0000810B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11840 0000810F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11841 00008113 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11842 00008117 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11843 0000811A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11844 0000811D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11845 00008122 4983C103                	add r9, 3 	 ;for getting to the params
 11846 00008126 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11847 0000812A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11848                                  .L_tc_recycle_frame_loop_005c:
 11849 0000812D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11850 00008130 7410                    	je .L_tc_recycle_frame_done_005c
 11851 00008132 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11852 00008135 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11853 00008138 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11854 0000813C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11855 00008140 EBEB                    	jmp .L_tc_recycle_frame_loop_005c
 11856                                  .L_tc_recycle_frame_done_005c:
 11857 00008142 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11858 00008143 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11859 00008147 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11860 0000814A E902010000              	jmp .L_if_end_002a
 11861                                  .L_if_else_002a:
 11862                                  	; preparing a non-tail-call
 11863 0000814F 488B4528                	mov rax, PARAM(1)	; param b
 11864 00008153 50                      	push rax
 11865 00008154 6A01                    	push 1	; arg count
 11866 00008156 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 11867 0000815E 803805                  	cmp byte [rax], T_undefined
 11868 00008161 0F844BFD0000            	je L_error_fvar_undefined
 11869 00008167 803804                  	cmp byte [rax], T_closure
 11870 0000816A 0F85C6FD0000            	jne L_error_non_closure
 11871 00008170 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11872 00008173 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11873 00008176 483D[02000000]          	cmp rax, sob_boolean_false
 11874 0000817C 7473                    	je .L_if_else_0029
 11875                                  	; preparing a tail-call
 11876 0000817E 488B4528                	mov rax, PARAM(1)	; param b
 11877 00008182 50                      	push rax
 11878 00008183 488B4520                	mov rax, PARAM(0)	; param a
 11879 00008187 50                      	push rax
 11880 00008188 6A02                    	push 2	; arg count
 11881 0000818A 488B0425[7F0F0000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11882 00008192 803805                  	cmp byte [rax], T_undefined
 11883 00008195 0F8417FD0000            	je L_error_fvar_undefined
 11884 0000819B 803804                  	cmp byte [rax], T_closure
 11885 0000819E 0F8592FD0000            	jne L_error_non_closure
 11886 000081A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11887 000081A7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11888 000081AA FF7500                  	push qword[rbp]
 11889 000081AD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11890 000081B0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11891 000081B4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11892 000081B8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11893 000081BC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11894 000081BF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11895 000081C2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11896 000081C7 4983C103                	add r9, 3 	 ;for getting to the params
 11897 000081CB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11898 000081CF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11899                                  .L_tc_recycle_frame_loop_005d:
 11900 000081D2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11901 000081D5 7410                    	je .L_tc_recycle_frame_done_005d
 11902 000081D7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11903 000081DA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11904 000081DD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11905 000081E1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11906 000081E5 EBEB                    	jmp .L_tc_recycle_frame_loop_005d
 11907                                  .L_tc_recycle_frame_done_005d:
 11908 000081E7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11909 000081E8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11910 000081EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11911 000081EF EB60                    	jmp .L_if_end_0029
 11912                                  .L_if_else_0029:
 11913                                  	; preparing a tail-call
 11914 000081F1 6A00                    	push 0	; arg count
 11915 000081F3 488B4510                	mov rax, ENV
 11916 000081F7 488B00                  	mov rax, qword [rax + 8 * 0]
 11917 000081FA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11918 000081FD 803804                  	cmp byte [rax], T_closure
 11919 00008200 0F8530FD0000            	jne L_error_non_closure
 11920 00008206 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11921 00008209 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11922 0000820C FF7500                  	push qword[rbp]
 11923 0000820F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11924 00008212 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11925 00008216 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11926 0000821A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11927 0000821E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11928 00008221 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11929 00008224 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11930 00008229 4983C103                	add r9, 3 	 ;for getting to the params
 11931 0000822D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11932 00008231 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11933                                  .L_tc_recycle_frame_loop_005e:
 11934 00008234 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11935 00008237 7410                    	je .L_tc_recycle_frame_done_005e
 11936 00008239 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11937 0000823C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11938 0000823F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11939 00008243 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11940 00008247 EBEB                    	jmp .L_tc_recycle_frame_loop_005e
 11941                                  .L_tc_recycle_frame_done_005e:
 11942 00008249 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11943 0000824A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11944 0000824E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11945                                  .L_if_end_0029:
 11946                                  .L_if_end_002a:
 11947                                  .L_if_end_002b:
 11948 00008251 EB60                    	jmp .L_if_end_002c
 11949                                  .L_if_else_002c:
 11950                                  	; preparing a tail-call
 11951 00008253 6A00                    	push 0	; arg count
 11952 00008255 488B4510                	mov rax, ENV
 11953 00008259 488B00                  	mov rax, qword [rax + 8 * 0]
 11954 0000825C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11955 0000825F 803804                  	cmp byte [rax], T_closure
 11956 00008262 0F85CEFC0000            	jne L_error_non_closure
 11957 00008268 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11958 0000826B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11959 0000826E FF7500                  	push qword[rbp]
 11960 00008271 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11961 00008274 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11962 00008278 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11963 0000827C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11964 00008280 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11965 00008283 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11966 00008286 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11967 0000828B 4983C103                	add r9, 3 	 ;for getting to the params
 11968 0000828F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11969 00008293 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11970                                  .L_tc_recycle_frame_loop_005f:
 11971 00008296 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11972 00008299 7410                    	je .L_tc_recycle_frame_done_005f
 11973 0000829B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11974 0000829E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11975 000082A1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11976 000082A5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11977 000082A9 EBEB                    	jmp .L_tc_recycle_frame_loop_005f
 11978                                  .L_tc_recycle_frame_done_005f:
 11979 000082AB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11980 000082AC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11981 000082B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11982                                  .L_if_end_002c:
 11983                                  .L_if_end_002d:
 11984                                  .L_if_end_002e:
 11985 000082B3 C9                      	leave
 11986 000082B4 C22000                  	ret AND_KILL_FRAME(2)
 11987                                  .L_lambda_simple_end_003e:	; new closure is in rax
 11988 000082B7 50                      	push rax
 11989 000082B8 6A01                    	push 1	; arg count
 11990 000082BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11991 000082BF E81BFD0000              	call malloc
 11992 000082C4 50                      	push rax
 11993 000082C5 BF08000000              	mov rdi, 8 * 1	; new rib
 11994 000082CA E810FD0000              	call malloc
 11995 000082CF 50                      	push rax
 11996 000082D0 BF10000000              	mov rdi, 8 * 2	; extended env
 11997 000082D5 E805FD0000              	call malloc
 11998 000082DA 488B7D10                	mov rdi, ENV
 11999 000082DE BE00000000              	mov rsi, 0
 12000 000082E3 BA01000000              	mov rdx, 1
 12001                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
 12002 000082E8 4883FE01                	cmp rsi, 1
 12003 000082EC 7410                    	je .L_lambda_simple_env_end_003f
 12004 000082EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12005 000082F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12006 000082F6 48FFC6                  	inc rsi
 12007 000082F9 48FFC2                  	inc rdx
 12008 000082FC EBEA                    	jmp .L_lambda_simple_env_loop_003f
 12009                                  .L_lambda_simple_env_end_003f:
 12010 000082FE 5B                      	pop rbx
 12011 000082FF BE00000000              	mov rsi, 0
 12012                                  .L_lambda_simple_params_loop_003f:	; copy params
 12013 00008304 4883FE01                	cmp rsi, 1
 12014 00008308 740E                    	je .L_lambda_simple_params_end_003f
 12015 0000830A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12016 0000830F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12017 00008313 48FFC6                  	inc rsi
 12018 00008316 EBEC                    	jmp .L_lambda_simple_params_loop_003f
 12019                                  .L_lambda_simple_params_end_003f:
 12020 00008318 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12021 0000831B 4889C3                  	mov rbx, rax
 12022 0000831E 58                      	pop rax
 12023 0000831F C60004                  	mov byte [rax], T_closure
 12024 00008322 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12025 00008326 48C74009[33830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
 12026 0000832E E949060000              	jmp .L_lambda_simple_end_003f
 12027                                  .L_lambda_simple_code_003f:	; lambda-simple body
 12028 00008333 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12029 00008339 740B                    	je .L_lambda_simple_arity_check_ok_003f
 12030 0000833B FF742410                	push qword [rsp + 8 * 2]
 12031 0000833F 6A01                    	push 1
 12032 00008341 E952FC0000              	jmp L_error_incorrect_arity_simple
 12033                                  .L_lambda_simple_arity_check_ok_003f:
 12034 00008346 C8000000                	enter 0, 0
 12035 0000834A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12036 0000834F E88BFC0000              	call malloc
 12037 00008354 50                      	push rax
 12038 00008355 BF08000000              	mov rdi, 8 * 1	; new rib
 12039 0000835A E880FC0000              	call malloc
 12040 0000835F 50                      	push rax
 12041 00008360 BF18000000              	mov rdi, 8 * 3	; extended env
 12042 00008365 E875FC0000              	call malloc
 12043 0000836A 488B7D10                	mov rdi, ENV
 12044 0000836E BE00000000              	mov rsi, 0
 12045 00008373 BA01000000              	mov rdx, 1
 12046                                  .L_lambda_opt_env_loop_000b:	; ext_env[i + 1] <-- env[i]
 12047 00008378 4883FE02                	cmp rsi, 2
 12048 0000837C 7410                    	je .L_lambda_opt_env_end_000b
 12049 0000837E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12050 00008382 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12051 00008386 48FFC6                  	inc rsi
 12052 00008389 48FFC2                  	inc rdx
 12053 0000838C EBEA                    	jmp .L_lambda_opt_env_loop_000b
 12054                                  .L_lambda_opt_env_end_000b:
 12055 0000838E 5B                      	pop rbx
 12056 0000838F BE00000000              	mov rsi, 0
 12057                                  .L_lambda_opt_params_loop_000b:	; copy params
 12058 00008394 4883FE01                	cmp rsi, 1
 12059 00008398 740E                    	je .L_lambda_opt_params_end_000b
 12060 0000839A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12061 0000839F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12062 000083A3 48FFC6                  	inc rsi
 12063 000083A6 EBEC                    	jmp .L_lambda_opt_params_loop_000b
 12064                                  .L_lambda_opt_params_end_000b:
 12065 000083A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12066 000083AB 4889C3                  	mov rbx, rax
 12067 000083AE 58                      	pop rax
 12068 000083AF C60004                  	mov byte [rax], T_closure
 12069 000083B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12070 000083B6 48C74009[C3830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000b
 12071 000083BE E9B5050000              	jmp .L_lambda_opt_end_000b
 12072                                  .L_lambda_opt_code_000b:	; lambda-opt body
 12073 000083C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12074 000083C9 7411                    	je .L_lambda_opt_arity_check_exact_000b
 12075 000083CB 0F8F96020000            	jg .L_lambda_opt_arity_check_more_000b
 12076 000083D1 FF742410                	push qword [rsp + 8 * 2]
 12077 000083D5 6A01                    	push 1
 12078 000083D7 E9D0FB0000              	jmp L_error_incorrect_arity_opt
 12079                                  .L_lambda_opt_arity_check_exact_000b:
 12080 000083DC 4883EC08                	sub rsp, 8
 12081 000083E0 488B442408              	mov rax, qword[rsp + 8 *1]
 12082 000083E5 48890424                	mov qword[rsp], rax  
 12083 000083E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 12084 000083EE 4889442408              	mov qword[rsp + 8 * 1], rax
 12085 000083F3 B802000000              	mov rax, 2
 12086 000083F8 4889442410              	mov qword[rsp + 8 *2], rax
 12087 000083FD 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 12088 00008402 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 12089 00008407 48B8-                   	mov rax, sob_nil
 12089 00008409 [0100000000000000] 
 12090 00008411 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 12091 00008416 C8000000                	enter 0, 0
 12092                                  	; preparing a non-tail-call
 12093 0000841A 488B4528                	mov rax, PARAM(1)	; param s
 12094 0000841E 50                      	push rax
 12095 0000841F 6A01                    	push 1	; arg count
 12096 00008421 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 12097 00008429 803805                  	cmp byte [rax], T_undefined
 12098 0000842C 0F8480FA0000            	je L_error_fvar_undefined
 12099 00008432 803804                  	cmp byte [rax], T_closure
 12100 00008435 0F85FBFA0000            	jne L_error_non_closure
 12101 0000843B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12102 0000843E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12103 00008441 483D[02000000]          	cmp rax, sob_boolean_false
 12104 00008447 7475                    	je .L_if_else_0030
 12105                                  	; preparing a tail-call
 12106 00008449 488B4520                	mov rax, PARAM(0)	; param a
 12107 0000844D 50                      	push rax
 12108 0000844E 48B8-                   	mov rax, L_constants + 2135
 12108 00008450 [5708000000000000] 
 12109 00008458 50                      	push rax
 12110 00008459 6A02                    	push 2	; arg count
 12111 0000845B 488B4510                	mov rax, ENV
 12112 0000845F 488B00                  	mov rax, qword [rax + 8 * 0]
 12113 00008462 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12114 00008465 803804                  	cmp byte [rax], T_closure
 12115 00008468 0F85C8FA0000            	jne L_error_non_closure
 12116 0000846E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12117 00008471 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12118 00008474 FF7500                  	push qword[rbp]
 12119 00008477 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12120 0000847A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12121 0000847E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12122 00008482 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12123 00008486 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12124 00008489 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12125 0000848C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12126 00008491 4983C103                	add r9, 3 	 ;for getting to the params
 12127 00008495 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12128 00008499 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12129                                  .L_tc_recycle_frame_loop_0063:
 12130 0000849C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12131 0000849F 7410                    	je .L_tc_recycle_frame_done_0063
 12132 000084A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12133 000084A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12134 000084A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12135 000084AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12136 000084AF EBEB                    	jmp .L_tc_recycle_frame_loop_0063
 12137                                  .L_tc_recycle_frame_done_0063:
 12138 000084B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12139 000084B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12140 000084B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12141 000084B9 E9A0010000              	jmp .L_if_end_0030
 12142                                  .L_if_else_0030:
 12143                                  	; preparing a tail-call
 12144                                  	; preparing a non-tail-call
 12145 000084BE 488B4528                	mov rax, PARAM(1)	; param s
 12146 000084C2 50                      	push rax
 12147 000084C3 48B8-                   	mov rax, L_constants + 2135
 12147 000084C5 [5708000000000000] 
 12148 000084CD 50                      	push rax
 12149 000084CE 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 12150 000084D6 803805                  	cmp byte [rax], T_undefined
 12151 000084D9 0F84D3F90000            	je L_error_fvar_undefined
 12152 000084DF 50                      	push rax
 12153 000084E0 6A03                    	push 3	; arg count
 12154 000084E2 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12155 000084EA 803805                  	cmp byte [rax], T_undefined
 12156 000084ED 0F84BFF90000            	je L_error_fvar_undefined
 12157 000084F3 803804                  	cmp byte [rax], T_closure
 12158 000084F6 0F853AFA0000            	jne L_error_non_closure
 12159 000084FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12160 000084FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12161 00008502 50                      	push rax
 12162 00008503 6A01                    	push 1	; arg count
 12163 00008505 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12164 0000850A E8D0FA0000              	call malloc
 12165 0000850F 50                      	push rax
 12166 00008510 BF10000000              	mov rdi, 8 * 2	; new rib
 12167 00008515 E8C5FA0000              	call malloc
 12168 0000851A 50                      	push rax
 12169 0000851B BF20000000              	mov rdi, 8 * 4	; extended env
 12170 00008520 E8BAFA0000              	call malloc
 12171 00008525 488B7D10                	mov rdi, ENV
 12172 00008529 BE00000000              	mov rsi, 0
 12173 0000852E BA01000000              	mov rdx, 1
 12174                                  .L_lambda_simple_env_loop_0041:	; ext_env[i + 1] <-- env[i]
 12175 00008533 4883FE03                	cmp rsi, 3
 12176 00008537 7410                    	je .L_lambda_simple_env_end_0041
 12177 00008539 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12178 0000853D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12179 00008541 48FFC6                  	inc rsi
 12180 00008544 48FFC2                  	inc rdx
 12181 00008547 EBEA                    	jmp .L_lambda_simple_env_loop_0041
 12182                                  .L_lambda_simple_env_end_0041:
 12183 00008549 5B                      	pop rbx
 12184 0000854A BE00000000              	mov rsi, 0
 12185                                  .L_lambda_simple_params_loop_0041:	; copy params
 12186 0000854F 4883FE02                	cmp rsi, 2
 12187 00008553 740E                    	je .L_lambda_simple_params_end_0041
 12188 00008555 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12189 0000855A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12190 0000855E 48FFC6                  	inc rsi
 12191 00008561 EBEC                    	jmp .L_lambda_simple_params_loop_0041
 12192                                  .L_lambda_simple_params_end_0041:
 12193 00008563 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12194 00008566 4889C3                  	mov rbx, rax
 12195 00008569 58                      	pop rax
 12196 0000856A C60004                  	mov byte [rax], T_closure
 12197 0000856D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12198 00008571 48C74009[7E850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0041
 12199 00008579 E98C000000              	jmp .L_lambda_simple_end_0041
 12200                                  .L_lambda_simple_code_0041:	; lambda-simple body
 12201 0000857E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12202 00008584 740B                    	je .L_lambda_simple_arity_check_ok_0041
 12203 00008586 FF742410                	push qword [rsp + 8 * 2]
 12204 0000858A 6A01                    	push 1
 12205 0000858C E907FA0000              	jmp L_error_incorrect_arity_simple
 12206                                  .L_lambda_simple_arity_check_ok_0041:
 12207 00008591 C8000000                	enter 0, 0
 12208                                  	; preparing a tail-call
 12209 00008595 488B4520                	mov rax, PARAM(0)	; param b
 12210 00008599 50                      	push rax
 12211 0000859A 488B4510                	mov rax, ENV
 12212 0000859E 488B00                  	mov rax, qword [rax + 8 * 0]
 12213 000085A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12214 000085A4 50                      	push rax
 12215 000085A5 6A02                    	push 2	; arg count
 12216 000085A7 488B4510                	mov rax, ENV
 12217 000085AB 488B4008                	mov rax, qword [rax + 8 * 1]
 12218 000085AF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12219 000085B2 803804                  	cmp byte [rax], T_closure
 12220 000085B5 0F857BF90000            	jne L_error_non_closure
 12221 000085BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12222 000085BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12223 000085C1 FF7500                  	push qword[rbp]
 12224 000085C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12225 000085C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12226 000085CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12227 000085CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12228 000085D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12229 000085D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12230 000085D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12231 000085DE 4983C103                	add r9, 3 	 ;for getting to the params
 12232 000085E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12233 000085E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12234                                  .L_tc_recycle_frame_loop_0064:
 12235 000085E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12236 000085EC 7410                    	je .L_tc_recycle_frame_done_0064
 12237 000085EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12238 000085F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12239 000085F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12240 000085F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12241 000085FC EBEB                    	jmp .L_tc_recycle_frame_loop_0064
 12242                                  .L_tc_recycle_frame_done_0064:
 12243 000085FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12244 000085FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12245 00008603 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12246 00008606 C9                      	leave
 12247 00008607 C21800                  	ret AND_KILL_FRAME(1)
 12248                                  .L_lambda_simple_end_0041:	; new closure is in rax
 12249 0000860A 803804                  	cmp byte [rax], T_closure
 12250 0000860D 0F8523F90000            	jne L_error_non_closure
 12251 00008613 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12252 00008616 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12253 00008619 FF7500                  	push qword[rbp]
 12254 0000861C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12255 0000861F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12256 00008623 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12257 00008627 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12258 0000862B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12259 0000862E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12260 00008631 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12261 00008636 4983C103                	add r9, 3 	 ;for getting to the params
 12262 0000863A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12263 0000863E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12264                                  .L_tc_recycle_frame_loop_0065:
 12265 00008641 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12266 00008644 7410                    	je .L_tc_recycle_frame_done_0065
 12267 00008646 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12268 00008649 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12269 0000864C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12270 00008650 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12271 00008654 EBEB                    	jmp .L_tc_recycle_frame_loop_0065
 12272                                  .L_tc_recycle_frame_done_0065:
 12273 00008656 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12274 00008657 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12275 0000865B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12276                                  .L_if_end_0030:
 12277 0000865E C9                      	leave
 12278 0000865F C22000                  	ret AND_KILL_FRAME(2)
 12279 00008662 E911030000              	jmp .L_lambda_opt_end_000b	; new closure is in rax
 12280                                  .L_lambda_opt_arity_check_more_000b:
 12281 00008667 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 12282 0000866C 49B9-                   	mov r9, sob_nil
 12282 0000866E [0100000000000000] 
 12283 00008676 4889E3                  	mov rbx, rsp 
 12284 00008679 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 12285 0000867D 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 12286 00008680 49C1E003                	shl r8, 3
 12287 00008684 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 12288 00008687 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 12289                                  .L_lambda_opt_stack_shrink_loop_000b:
 12290 0000868C 4983F801                	cmp r8, 1
 12291 00008690 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000b
 12292 00008692 BF11000000              	mov rdi, 1+8+8	;for pair
 12293 00008697 E843F90000              	call malloc	 ;to create the pair in the stack
 12294 0000869C C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 12295 0000869F 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 12296 000086A2 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 12297 000086A6 4C894809                 	mov qword[rax+1+8],r9
 12298 000086AA 4989C1                  	mov r9, rax	 ; for the recursion 
 12299 000086AD 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 12300 000086B0 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 12301 000086B4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000b
 12302                                  .L_lambda_opt_stack_shrink_loop_exit_000b:
 12303 000086B6 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 12304 000086BB 4883E902                	sub rcx, 2
 12305 000086BF 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 12306 000086C3 4801CC                  	add rsp, rcx	 ;shrinking the stack
 12307 000086C6 4889E0                  	mov rax, rsp
 12308 000086C9 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 12309 000086CC 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 12310 000086D0 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 12311 000086D3 4883C018                	add rax, 3 * 8 	;now rax is param 0
 12312 000086D7 49C1E003                	shl r8, 3 	; convert to byte
 12313 000086DB 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 12314 000086DE 4C8908                  	mov qword[rax], r9	;puting the list at the top
 12315 000086E1 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 12316 000086E5 4889E3                  	mov rbx, rsp 
 12317 000086E8 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 12318 000086EB 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 12319 000086F1 49FFCA                  	dec r10 
 12320 000086F4 49C1E203                	shl r10, 3	;to get bytes
 12321 000086F8 4883C318                	add rbx, 3*8 	;rbx is the first param
 12322 000086FC 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 12323 000086FF 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 12324                                  
 12325 00008702 4C8900                              	mov qword[rax], r8
 12326 00008705 4883E808                            	sub rax, 8
 12327 00008709 4883EB08                	sub rbx, 8
 12328 0000870D 4889E0                  	mov rax, rsp
 12329 00008710 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 12330 00008713 48C744241002000000      	mov qword [rsp+2*8], 2
 12331 0000871C 488B5808                	mov rbx, qword[rax + 8 *1]
 12332 00008720 48895C2408              	mov qword [rsp + 1*8] ,rbx
 12333 00008725 488B18                  	mov rbx, qword[rax]
 12334 00008728 48891C24                	mov qword [rsp], rbx
 12335 0000872C C8000000                	enter 0, 0
 12336                                  	; preparing a non-tail-call
 12337 00008730 488B4528                	mov rax, PARAM(1)	; param s
 12338 00008734 50                      	push rax
 12339 00008735 6A01                    	push 1	; arg count
 12340 00008737 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 12341 0000873F 803805                  	cmp byte [rax], T_undefined
 12342 00008742 0F846AF70000            	je L_error_fvar_undefined
 12343 00008748 803804                  	cmp byte [rax], T_closure
 12344 0000874B 0F85E5F70000            	jne L_error_non_closure
 12345 00008751 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12346 00008754 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12347 00008757 483D[02000000]          	cmp rax, sob_boolean_false
 12348 0000875D 7475                    	je .L_if_else_002f
 12349                                  	; preparing a tail-call
 12350 0000875F 488B4520                	mov rax, PARAM(0)	; param a
 12351 00008763 50                      	push rax
 12352 00008764 48B8-                   	mov rax, L_constants + 2135
 12352 00008766 [5708000000000000] 
 12353 0000876E 50                      	push rax
 12354 0000876F 6A02                    	push 2	; arg count
 12355 00008771 488B4510                	mov rax, ENV
 12356 00008775 488B00                  	mov rax, qword [rax + 8 * 0]
 12357 00008778 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12358 0000877B 803804                  	cmp byte [rax], T_closure
 12359 0000877E 0F85B2F70000            	jne L_error_non_closure
 12360 00008784 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12361 00008787 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12362 0000878A FF7500                  	push qword[rbp]
 12363 0000878D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12364 00008790 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12365 00008794 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12366 00008798 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12367 0000879C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12368 0000879F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12369 000087A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12370 000087A7 4983C103                	add r9, 3 	 ;for getting to the params
 12371 000087AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12372 000087AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12373                                  .L_tc_recycle_frame_loop_0060:
 12374 000087B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12375 000087B5 7410                    	je .L_tc_recycle_frame_done_0060
 12376 000087B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12377 000087BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12378 000087BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12379 000087C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12380 000087C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0060
 12381                                  .L_tc_recycle_frame_done_0060:
 12382 000087C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12383 000087C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12384 000087CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12385 000087CF E9A0010000              	jmp .L_if_end_002f
 12386                                  .L_if_else_002f:
 12387                                  	; preparing a tail-call
 12388                                  	; preparing a non-tail-call
 12389 000087D4 488B4528                	mov rax, PARAM(1)	; param s
 12390 000087D8 50                      	push rax
 12391 000087D9 48B8-                   	mov rax, L_constants + 2135
 12391 000087DB [5708000000000000] 
 12392 000087E3 50                      	push rax
 12393 000087E4 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 12394 000087EC 803805                  	cmp byte [rax], T_undefined
 12395 000087EF 0F84BDF60000            	je L_error_fvar_undefined
 12396 000087F5 50                      	push rax
 12397 000087F6 6A03                    	push 3	; arg count
 12398 000087F8 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 12399 00008800 803805                  	cmp byte [rax], T_undefined
 12400 00008803 0F84A9F60000            	je L_error_fvar_undefined
 12401 00008809 803804                  	cmp byte [rax], T_closure
 12402 0000880C 0F8524F70000            	jne L_error_non_closure
 12403 00008812 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12404 00008815 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12405 00008818 50                      	push rax
 12406 00008819 6A01                    	push 1	; arg count
 12407 0000881B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12408 00008820 E8BAF70000              	call malloc
 12409 00008825 50                      	push rax
 12410 00008826 BF10000000              	mov rdi, 8 * 2	; new rib
 12411 0000882B E8AFF70000              	call malloc
 12412 00008830 50                      	push rax
 12413 00008831 BF20000000              	mov rdi, 8 * 4	; extended env
 12414 00008836 E8A4F70000              	call malloc
 12415 0000883B 488B7D10                	mov rdi, ENV
 12416 0000883F BE00000000              	mov rsi, 0
 12417 00008844 BA01000000              	mov rdx, 1
 12418                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
 12419 00008849 4883FE03                	cmp rsi, 3
 12420 0000884D 7410                    	je .L_lambda_simple_env_end_0040
 12421 0000884F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12422 00008853 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12423 00008857 48FFC6                  	inc rsi
 12424 0000885A 48FFC2                  	inc rdx
 12425 0000885D EBEA                    	jmp .L_lambda_simple_env_loop_0040
 12426                                  .L_lambda_simple_env_end_0040:
 12427 0000885F 5B                      	pop rbx
 12428 00008860 BE00000000              	mov rsi, 0
 12429                                  .L_lambda_simple_params_loop_0040:	; copy params
 12430 00008865 4883FE02                	cmp rsi, 2
 12431 00008869 740E                    	je .L_lambda_simple_params_end_0040
 12432 0000886B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12433 00008870 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12434 00008874 48FFC6                  	inc rsi
 12435 00008877 EBEC                    	jmp .L_lambda_simple_params_loop_0040
 12436                                  .L_lambda_simple_params_end_0040:
 12437 00008879 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12438 0000887C 4889C3                  	mov rbx, rax
 12439 0000887F 58                      	pop rax
 12440 00008880 C60004                  	mov byte [rax], T_closure
 12441 00008883 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12442 00008887 48C74009[94880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
 12443 0000888F E98C000000              	jmp .L_lambda_simple_end_0040
 12444                                  .L_lambda_simple_code_0040:	; lambda-simple body
 12445 00008894 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12446 0000889A 740B                    	je .L_lambda_simple_arity_check_ok_0040
 12447 0000889C FF742410                	push qword [rsp + 8 * 2]
 12448 000088A0 6A01                    	push 1
 12449 000088A2 E9F1F60000              	jmp L_error_incorrect_arity_simple
 12450                                  .L_lambda_simple_arity_check_ok_0040:
 12451 000088A7 C8000000                	enter 0, 0
 12452                                  	; preparing a tail-call
 12453 000088AB 488B4520                	mov rax, PARAM(0)	; param b
 12454 000088AF 50                      	push rax
 12455 000088B0 488B4510                	mov rax, ENV
 12456 000088B4 488B00                  	mov rax, qword [rax + 8 * 0]
 12457 000088B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12458 000088BA 50                      	push rax
 12459 000088BB 6A02                    	push 2	; arg count
 12460 000088BD 488B4510                	mov rax, ENV
 12461 000088C1 488B4008                	mov rax, qword [rax + 8 * 1]
 12462 000088C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12463 000088C8 803804                  	cmp byte [rax], T_closure
 12464 000088CB 0F8565F60000            	jne L_error_non_closure
 12465 000088D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12466 000088D4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12467 000088D7 FF7500                  	push qword[rbp]
 12468 000088DA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12469 000088DD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12470 000088E1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12471 000088E5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12472 000088E9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12473 000088EC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12474 000088EF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12475 000088F4 4983C103                	add r9, 3 	 ;for getting to the params
 12476 000088F8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12477 000088FC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12478                                  .L_tc_recycle_frame_loop_0061:
 12479 000088FF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12480 00008902 7410                    	je .L_tc_recycle_frame_done_0061
 12481 00008904 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12482 00008907 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12483 0000890A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12484 0000890E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12485 00008912 EBEB                    	jmp .L_tc_recycle_frame_loop_0061
 12486                                  .L_tc_recycle_frame_done_0061:
 12487 00008914 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12488 00008915 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12489 00008919 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12490 0000891C C9                      	leave
 12491 0000891D C21800                  	ret AND_KILL_FRAME(1)
 12492                                  .L_lambda_simple_end_0040:	; new closure is in rax
 12493 00008920 803804                  	cmp byte [rax], T_closure
 12494 00008923 0F850DF60000            	jne L_error_non_closure
 12495 00008929 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12496 0000892C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12497 0000892F FF7500                  	push qword[rbp]
 12498 00008932 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12499 00008935 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12500 00008939 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12501 0000893D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12502 00008941 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12503 00008944 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12504 00008947 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12505 0000894C 4983C103                	add r9, 3 	 ;for getting to the params
 12506 00008950 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12507 00008954 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12508                                  .L_tc_recycle_frame_loop_0062:
 12509 00008957 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12510 0000895A 7410                    	je .L_tc_recycle_frame_done_0062
 12511 0000895C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12512 0000895F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12513 00008962 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12514 00008966 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12515 0000896A EBEB                    	jmp .L_tc_recycle_frame_loop_0062
 12516                                  .L_tc_recycle_frame_done_0062:
 12517 0000896C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12518 0000896D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12519 00008971 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12520                                  .L_if_end_002f:
 12521 00008974 C9                      	leave
 12522 00008975 C22000                  	ret AND_KILL_FRAME(2)
 12523                                  .L_lambda_opt_end_000b:	; new closure is in rax
 12524 00008978 C9                      	leave
 12525 00008979 C21800                  	ret AND_KILL_FRAME(1)
 12526                                  .L_lambda_simple_end_003f:	; new closure is in rax
 12527 0000897C 803804                  	cmp byte [rax], T_closure
 12528 0000897F 0F85B1F50000            	jne L_error_non_closure
 12529 00008985 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12530 00008988 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12531 0000898B FF7500                  	push qword[rbp]
 12532 0000898E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12533 00008991 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12534 00008995 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12535 00008999 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12536 0000899D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12537 000089A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12538 000089A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12539 000089A8 4983C103                	add r9, 3 	 ;for getting to the params
 12540 000089AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12541 000089B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12542                                  .L_tc_recycle_frame_loop_0066:
 12543 000089B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12544 000089B6 7410                    	je .L_tc_recycle_frame_done_0066
 12545 000089B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12546 000089BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12547 000089BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12548 000089C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12549 000089C6 EBEB                    	jmp .L_tc_recycle_frame_loop_0066
 12550                                  .L_tc_recycle_frame_done_0066:
 12551 000089C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12552 000089C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12553 000089CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12554 000089D0 C9                      	leave
 12555 000089D1 C21800                  	ret AND_KILL_FRAME(1)
 12556                                  .L_lambda_simple_end_003d:	; new closure is in rax
 12557 000089D4 803804                  	cmp byte [rax], T_closure
 12558 000089D7 0F8559F50000            	jne L_error_non_closure
 12559 000089DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 12560 000089E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12561 000089E3 48890425[E70D0000]      	mov qword [free_var_2], rax
 12562 000089EB 48B8-                   	mov rax, sob_void
 12562 000089ED [0000000000000000] 
 12563                                  
 12564 000089F5 4889C7                  	mov rdi, rax
 12565 000089F8 E837F80000              	call print_sexpr_if_not_void
 12566                                  	; preparing a non-tail-call
 12567 000089FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12568 00008A02 E8D8F50000              	call malloc
 12569 00008A07 50                      	push rax
 12570 00008A08 BF00000000              	mov rdi, 8 * 0	; new rib
 12571 00008A0D E8CDF50000              	call malloc
 12572 00008A12 50                      	push rax
 12573 00008A13 BF08000000              	mov rdi, 8 * 1	; extended env
 12574 00008A18 E8C2F50000              	call malloc
 12575 00008A1D 488B7D10                	mov rdi, ENV
 12576 00008A21 BE00000000              	mov rsi, 0
 12577 00008A26 BA01000000              	mov rdx, 1
 12578                                  .L_lambda_simple_env_loop_0042:	; ext_env[i + 1] <-- env[i]
 12579 00008A2B 4883FE00                	cmp rsi, 0
 12580 00008A2F 7410                    	je .L_lambda_simple_env_end_0042
 12581 00008A31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12582 00008A35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12583 00008A39 48FFC6                  	inc rsi
 12584 00008A3C 48FFC2                  	inc rdx
 12585 00008A3F EBEA                    	jmp .L_lambda_simple_env_loop_0042
 12586                                  .L_lambda_simple_env_end_0042:
 12587 00008A41 5B                      	pop rbx
 12588 00008A42 BE00000000              	mov rsi, 0
 12589                                  .L_lambda_simple_params_loop_0042:	; copy params
 12590 00008A47 4883FE00                	cmp rsi, 0
 12591 00008A4B 740E                    	je .L_lambda_simple_params_end_0042
 12592 00008A4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12593 00008A52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12594 00008A56 48FFC6                  	inc rsi
 12595 00008A59 EBEC                    	jmp .L_lambda_simple_params_loop_0042
 12596                                  .L_lambda_simple_params_end_0042:
 12597 00008A5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12598 00008A5E 4889C3                  	mov rbx, rax
 12599 00008A61 58                      	pop rax
 12600 00008A62 C60004                  	mov byte [rax], T_closure
 12601 00008A65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12602 00008A69 48C74009[768A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0042
 12603 00008A71 E998000000              	jmp .L_lambda_simple_end_0042
 12604                                  .L_lambda_simple_code_0042:	; lambda-simple body
 12605 00008A76 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12606 00008A7C 740B                    	je .L_lambda_simple_arity_check_ok_0042
 12607 00008A7E FF742410                	push qword [rsp + 8 * 2]
 12608 00008A82 6A00                    	push 0
 12609 00008A84 E90FF50000              	jmp L_error_incorrect_arity_simple
 12610                                  .L_lambda_simple_arity_check_ok_0042:
 12611 00008A89 C8000000                	enter 0, 0
 12612                                  	; preparing a tail-call
 12613 00008A8D 48B8-                   	mov rax, L_constants + 2187
 12613 00008A8F [8B08000000000000] 
 12614 00008A97 50                      	push rax
 12615 00008A98 48B8-                   	mov rax, L_constants + 2279
 12615 00008A9A [E708000000000000] 
 12616 00008AA2 50                      	push rax
 12617 00008AA3 6A02                    	push 2	; arg count
 12618 00008AA5 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 12619 00008AAD 803805                  	cmp byte [rax], T_undefined
 12620 00008AB0 0F84FCF30000            	je L_error_fvar_undefined
 12621 00008AB6 803804                  	cmp byte [rax], T_closure
 12622 00008AB9 0F8577F40000            	jne L_error_non_closure
 12623 00008ABF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12624 00008AC2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12625 00008AC5 FF7500                  	push qword[rbp]
 12626 00008AC8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12627 00008ACB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12628 00008ACF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12629 00008AD3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12630 00008AD7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12631 00008ADA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12632 00008ADD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12633 00008AE2 4983C103                	add r9, 3 	 ;for getting to the params
 12634 00008AE6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12635 00008AEA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12636                                  .L_tc_recycle_frame_loop_0067:
 12637 00008AED 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12638 00008AF0 7410                    	je .L_tc_recycle_frame_done_0067
 12639 00008AF2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12640 00008AF5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12641 00008AF8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12642 00008AFC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12643 00008B00 EBEB                    	jmp .L_tc_recycle_frame_loop_0067
 12644                                  .L_tc_recycle_frame_done_0067:
 12645 00008B02 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12646 00008B03 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12647 00008B07 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12648 00008B0A C9                      	leave
 12649 00008B0B C21000                  	ret AND_KILL_FRAME(0)
 12650                                  .L_lambda_simple_end_0042:	; new closure is in rax
 12651 00008B0E 50                      	push rax
 12652 00008B0F 6A01                    	push 1	; arg count
 12653 00008B11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12654 00008B16 E8C4F40000              	call malloc
 12655 00008B1B 50                      	push rax
 12656 00008B1C BF00000000              	mov rdi, 8 * 0	; new rib
 12657 00008B21 E8B9F40000              	call malloc
 12658 00008B26 50                      	push rax
 12659 00008B27 BF08000000              	mov rdi, 8 * 1	; extended env
 12660 00008B2C E8AEF40000              	call malloc
 12661 00008B31 488B7D10                	mov rdi, ENV
 12662 00008B35 BE00000000              	mov rsi, 0
 12663 00008B3A BA01000000              	mov rdx, 1
 12664                                  .L_lambda_simple_env_loop_0043:	; ext_env[i + 1] <-- env[i]
 12665 00008B3F 4883FE00                	cmp rsi, 0
 12666 00008B43 7410                    	je .L_lambda_simple_env_end_0043
 12667 00008B45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12668 00008B49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12669 00008B4D 48FFC6                  	inc rsi
 12670 00008B50 48FFC2                  	inc rdx
 12671 00008B53 EBEA                    	jmp .L_lambda_simple_env_loop_0043
 12672                                  .L_lambda_simple_env_end_0043:
 12673 00008B55 5B                      	pop rbx
 12674 00008B56 BE00000000              	mov rsi, 0
 12675                                  .L_lambda_simple_params_loop_0043:	; copy params
 12676 00008B5B 4883FE00                	cmp rsi, 0
 12677 00008B5F 740E                    	je .L_lambda_simple_params_end_0043
 12678 00008B61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12679 00008B66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12680 00008B6A 48FFC6                  	inc rsi
 12681 00008B6D EBEC                    	jmp .L_lambda_simple_params_loop_0043
 12682                                  .L_lambda_simple_params_end_0043:
 12683 00008B6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12684 00008B72 4889C3                  	mov rbx, rax
 12685 00008B75 58                      	pop rax
 12686 00008B76 C60004                  	mov byte [rax], T_closure
 12687 00008B79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12688 00008B7D 48C74009[8A8B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0043
 12689 00008B85 E9FF0C0000              	jmp .L_lambda_simple_end_0043
 12690                                  .L_lambda_simple_code_0043:	; lambda-simple body
 12691 00008B8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12692 00008B90 740B                    	je .L_lambda_simple_arity_check_ok_0043
 12693 00008B92 FF742410                	push qword [rsp + 8 * 2]
 12694 00008B96 6A01                    	push 1
 12695 00008B98 E9FBF30000              	jmp L_error_incorrect_arity_simple
 12696                                  .L_lambda_simple_arity_check_ok_0043:
 12697 00008B9D C8000000                	enter 0, 0
 12698                                  	; preparing a tail-call
 12699 00008BA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12700 00008BA6 E834F40000              	call malloc
 12701 00008BAB 50                      	push rax
 12702 00008BAC BF08000000              	mov rdi, 8 * 1	; new rib
 12703 00008BB1 E829F40000              	call malloc
 12704 00008BB6 50                      	push rax
 12705 00008BB7 BF10000000              	mov rdi, 8 * 2	; extended env
 12706 00008BBC E81EF40000              	call malloc
 12707 00008BC1 488B7D10                	mov rdi, ENV
 12708 00008BC5 BE00000000              	mov rsi, 0
 12709 00008BCA BA01000000              	mov rdx, 1
 12710                                  .L_lambda_simple_env_loop_0044:	; ext_env[i + 1] <-- env[i]
 12711 00008BCF 4883FE01                	cmp rsi, 1
 12712 00008BD3 7410                    	je .L_lambda_simple_env_end_0044
 12713 00008BD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12714 00008BD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12715 00008BDD 48FFC6                  	inc rsi
 12716 00008BE0 48FFC2                  	inc rdx
 12717 00008BE3 EBEA                    	jmp .L_lambda_simple_env_loop_0044
 12718                                  .L_lambda_simple_env_end_0044:
 12719 00008BE5 5B                      	pop rbx
 12720 00008BE6 BE00000000              	mov rsi, 0
 12721                                  .L_lambda_simple_params_loop_0044:	; copy params
 12722 00008BEB 4883FE01                	cmp rsi, 1
 12723 00008BEF 740E                    	je .L_lambda_simple_params_end_0044
 12724 00008BF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12725 00008BF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12726 00008BFA 48FFC6                  	inc rsi
 12727 00008BFD EBEC                    	jmp .L_lambda_simple_params_loop_0044
 12728                                  .L_lambda_simple_params_end_0044:
 12729 00008BFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12730 00008C02 4889C3                  	mov rbx, rax
 12731 00008C05 58                      	pop rax
 12732 00008C06 C60004                  	mov byte [rax], T_closure
 12733 00008C09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12734 00008C0D 48C74009[1A8C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0044
 12735 00008C15 E9EE080000              	jmp .L_lambda_simple_end_0044
 12736                                  .L_lambda_simple_code_0044:	; lambda-simple body
 12737 00008C1A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12738 00008C20 740B                    	je .L_lambda_simple_arity_check_ok_0044
 12739 00008C22 FF742410                	push qword [rsp + 8 * 2]
 12740 00008C26 6A02                    	push 2
 12741 00008C28 E96BF30000              	jmp L_error_incorrect_arity_simple
 12742                                  .L_lambda_simple_arity_check_ok_0044:
 12743 00008C2D C8000000                	enter 0, 0
 12744                                  	; preparing a non-tail-call
 12745 00008C31 488B4520                	mov rax, PARAM(0)	; param a
 12746 00008C35 50                      	push rax
 12747 00008C36 6A01                    	push 1	; arg count
 12748 00008C38 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 12749 00008C40 803805                  	cmp byte [rax], T_undefined
 12750 00008C43 0F8469F20000            	je L_error_fvar_undefined
 12751 00008C49 803804                  	cmp byte [rax], T_closure
 12752 00008C4C 0F85E4F20000            	jne L_error_non_closure
 12753 00008C52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12754 00008C55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12755 00008C58 483D[02000000]          	cmp rax, sob_boolean_false
 12756 00008C5E 0F849F020000            	je .L_if_else_003c
 12757                                  	; preparing a non-tail-call
 12758 00008C64 488B4528                	mov rax, PARAM(1)	; param b
 12759 00008C68 50                      	push rax
 12760 00008C69 6A01                    	push 1	; arg count
 12761 00008C6B 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 12762 00008C73 803805                  	cmp byte [rax], T_undefined
 12763 00008C76 0F8436F20000            	je L_error_fvar_undefined
 12764 00008C7C 803804                  	cmp byte [rax], T_closure
 12765 00008C7F 0F85B1F20000            	jne L_error_non_closure
 12766 00008C85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12767 00008C88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12768 00008C8B 483D[02000000]          	cmp rax, sob_boolean_false
 12769 00008C91 7476                    	je .L_if_else_0033
 12770                                  	; preparing a tail-call
 12771 00008C93 488B4528                	mov rax, PARAM(1)	; param b
 12772 00008C97 50                      	push rax
 12773 00008C98 488B4520                	mov rax, PARAM(0)	; param a
 12774 00008C9C 50                      	push rax
 12775 00008C9D 6A02                    	push 2	; arg count
 12776 00008C9F 488B0425[5D0F0000]      	mov rax, qword [free_var_24]	; free var __bin-mul-zz
 12777 00008CA7 803805                  	cmp byte [rax], T_undefined
 12778 00008CAA 0F8402F20000            	je L_error_fvar_undefined
 12779 00008CB0 803804                  	cmp byte [rax], T_closure
 12780 00008CB3 0F857DF20000            	jne L_error_non_closure
 12781 00008CB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12782 00008CBC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12783 00008CBF FF7500                  	push qword[rbp]
 12784 00008CC2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12785 00008CC5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12786 00008CC9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12787 00008CCD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12788 00008CD1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12789 00008CD4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12790 00008CD7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12791 00008CDC 4983C103                	add r9, 3 	 ;for getting to the params
 12792 00008CE0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12793 00008CE4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12794                                  .L_tc_recycle_frame_loop_0068:
 12795 00008CE7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12796 00008CEA 7410                    	je .L_tc_recycle_frame_done_0068
 12797 00008CEC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12798 00008CEF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12799 00008CF2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12800 00008CF6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12801 00008CFA EBEB                    	jmp .L_tc_recycle_frame_loop_0068
 12802                                  .L_tc_recycle_frame_done_0068:
 12803 00008CFC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12804 00008CFD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12805 00008D01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12806 00008D04 E9F5010000              	jmp .L_if_end_0033
 12807                                  .L_if_else_0033:
 12808                                  	; preparing a non-tail-call
 12809 00008D09 488B4528                	mov rax, PARAM(1)	; param b
 12810 00008D0D 50                      	push rax
 12811 00008D0E 6A01                    	push 1	; arg count
 12812 00008D10 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12813 00008D18 803805                  	cmp byte [rax], T_undefined
 12814 00008D1B 0F8491F10000            	je L_error_fvar_undefined
 12815 00008D21 803804                  	cmp byte [rax], T_closure
 12816 00008D24 0F850CF20000            	jne L_error_non_closure
 12817 00008D2A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12818 00008D2D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12819 00008D30 483D[02000000]          	cmp rax, sob_boolean_false
 12820 00008D36 0F8499000000            	je .L_if_else_0032
 12821                                  	; preparing a tail-call
 12822 00008D3C 488B4528                	mov rax, PARAM(1)	; param b
 12823 00008D40 50                      	push rax
 12824                                  	; preparing a non-tail-call
 12825 00008D41 488B4520                	mov rax, PARAM(0)	; param a
 12826 00008D45 50                      	push rax
 12827 00008D46 6A01                    	push 1	; arg count
 12828 00008D48 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12829 00008D50 803805                  	cmp byte [rax], T_undefined
 12830 00008D53 0F8459F10000            	je L_error_fvar_undefined
 12831 00008D59 803804                  	cmp byte [rax], T_closure
 12832 00008D5C 0F85D4F10000            	jne L_error_non_closure
 12833 00008D62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12834 00008D65 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12835 00008D68 50                      	push rax
 12836 00008D69 6A02                    	push 2	; arg count
 12837 00008D6B 488B0425[3B0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 12838 00008D73 803805                  	cmp byte [rax], T_undefined
 12839 00008D76 0F8436F10000            	je L_error_fvar_undefined
 12840 00008D7C 803804                  	cmp byte [rax], T_closure
 12841 00008D7F 0F85B1F10000            	jne L_error_non_closure
 12842 00008D85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12843 00008D88 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12844 00008D8B FF7500                  	push qword[rbp]
 12845 00008D8E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12846 00008D91 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12847 00008D95 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12848 00008D99 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12849 00008D9D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12850 00008DA0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12851 00008DA3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12852 00008DA8 4983C103                	add r9, 3 	 ;for getting to the params
 12853 00008DAC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12854 00008DB0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12855                                  .L_tc_recycle_frame_loop_0069:
 12856 00008DB3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12857 00008DB6 7410                    	je .L_tc_recycle_frame_done_0069
 12858 00008DB8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12859 00008DBB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12860 00008DBE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12861 00008DC2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12862 00008DC6 EBEB                    	jmp .L_tc_recycle_frame_loop_0069
 12863                                  .L_tc_recycle_frame_done_0069:
 12864 00008DC8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12865 00008DC9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12866 00008DCD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12867 00008DD0 E929010000              	jmp .L_if_end_0032
 12868                                  .L_if_else_0032:
 12869                                  	; preparing a non-tail-call
 12870 00008DD5 488B4528                	mov rax, PARAM(1)	; param b
 12871 00008DD9 50                      	push rax
 12872 00008DDA 6A01                    	push 1	; arg count
 12873 00008DDC 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 12874 00008DE4 803805                  	cmp byte [rax], T_undefined
 12875 00008DE7 0F84C5F00000            	je L_error_fvar_undefined
 12876 00008DED 803804                  	cmp byte [rax], T_closure
 12877 00008DF0 0F8540F10000            	jne L_error_non_closure
 12878 00008DF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12879 00008DF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12880 00008DFC 483D[02000000]          	cmp rax, sob_boolean_false
 12881 00008E02 0F8496000000            	je .L_if_else_0031
 12882                                  	; preparing a tail-call
 12883 00008E08 488B4528                	mov rax, PARAM(1)	; param b
 12884 00008E0C 50                      	push rax
 12885                                  	; preparing a non-tail-call
 12886 00008E0D 488B4520                	mov rax, PARAM(0)	; param a
 12887 00008E11 50                      	push rax
 12888 00008E12 6A01                    	push 1	; arg count
 12889 00008E14 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 12890 00008E1C 803805                  	cmp byte [rax], T_undefined
 12891 00008E1F 0F848DF00000            	je L_error_fvar_undefined
 12892 00008E25 803804                  	cmp byte [rax], T_closure
 12893 00008E28 0F8508F10000            	jne L_error_non_closure
 12894 00008E2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12895 00008E31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12896 00008E34 50                      	push rax
 12897 00008E35 6A02                    	push 2	; arg count
 12898 00008E37 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12899 00008E3F 803805                  	cmp byte [rax], T_undefined
 12900 00008E42 0F846AF00000            	je L_error_fvar_undefined
 12901 00008E48 803804                  	cmp byte [rax], T_closure
 12902 00008E4B 0F85E5F00000            	jne L_error_non_closure
 12903 00008E51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12904 00008E54 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12905 00008E57 FF7500                  	push qword[rbp]
 12906 00008E5A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12907 00008E5D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12908 00008E61 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12909 00008E65 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12910 00008E69 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12911 00008E6C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12912 00008E6F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12913 00008E74 4983C103                	add r9, 3 	 ;for getting to the params
 12914 00008E78 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12915 00008E7C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12916                                  .L_tc_recycle_frame_loop_006a:
 12917 00008E7F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12918 00008E82 7410                    	je .L_tc_recycle_frame_done_006a
 12919 00008E84 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12920 00008E87 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12921 00008E8A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12922 00008E8E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12923 00008E92 EBEB                    	jmp .L_tc_recycle_frame_loop_006a
 12924                                  .L_tc_recycle_frame_done_006a:
 12925 00008E94 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12926 00008E95 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12927 00008E99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12928 00008E9C EB60                    	jmp .L_if_end_0031
 12929                                  .L_if_else_0031:
 12930                                  	; preparing a tail-call
 12931 00008E9E 6A00                    	push 0	; arg count
 12932 00008EA0 488B4510                	mov rax, ENV
 12933 00008EA4 488B00                  	mov rax, qword [rax + 8 * 0]
 12934 00008EA7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12935 00008EAA 803804                  	cmp byte [rax], T_closure
 12936 00008EAD 0F8583F00000            	jne L_error_non_closure
 12937 00008EB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12938 00008EB6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12939 00008EB9 FF7500                  	push qword[rbp]
 12940 00008EBC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12941 00008EBF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12942 00008EC3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12943 00008EC7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12944 00008ECB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12945 00008ECE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12946 00008ED1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12947 00008ED6 4983C103                	add r9, 3 	 ;for getting to the params
 12948 00008EDA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12949 00008EDE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12950                                  .L_tc_recycle_frame_loop_006b:
 12951 00008EE1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12952 00008EE4 7410                    	je .L_tc_recycle_frame_done_006b
 12953 00008EE6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12954 00008EE9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12955 00008EEC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12956 00008EF0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12957 00008EF4 EBEB                    	jmp .L_tc_recycle_frame_loop_006b
 12958                                  .L_tc_recycle_frame_done_006b:
 12959 00008EF6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12960 00008EF7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12961 00008EFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12962                                  .L_if_end_0031:
 12963                                  .L_if_end_0032:
 12964                                  .L_if_end_0033:
 12965 00008EFE E901060000              	jmp .L_if_end_003c
 12966                                  .L_if_else_003c:
 12967                                  	; preparing a non-tail-call
 12968 00008F03 488B4520                	mov rax, PARAM(0)	; param a
 12969 00008F07 50                      	push rax
 12970 00008F08 6A01                    	push 1	; arg count
 12971 00008F0A 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 12972 00008F12 803805                  	cmp byte [rax], T_undefined
 12973 00008F15 0F8497EF0000            	je L_error_fvar_undefined
 12974 00008F1B 803804                  	cmp byte [rax], T_closure
 12975 00008F1E 0F8512F00000            	jne L_error_non_closure
 12976 00008F24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12977 00008F27 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12978 00008F2A 483D[02000000]          	cmp rax, sob_boolean_false
 12979 00008F30 0F849F020000            	je .L_if_else_003b
 12980                                  	; preparing a non-tail-call
 12981 00008F36 488B4528                	mov rax, PARAM(1)	; param b
 12982 00008F3A 50                      	push rax
 12983 00008F3B 6A01                    	push 1	; arg count
 12984 00008F3D 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 12985 00008F45 803805                  	cmp byte [rax], T_undefined
 12986 00008F48 0F8464EF0000            	je L_error_fvar_undefined
 12987 00008F4E 803804                  	cmp byte [rax], T_closure
 12988 00008F51 0F85DFEF0000            	jne L_error_non_closure
 12989 00008F57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12990 00008F5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12991 00008F5D 483D[02000000]          	cmp rax, sob_boolean_false
 12992 00008F63 0F8499000000            	je .L_if_else_0036
 12993                                  	; preparing a tail-call
 12994                                  	; preparing a non-tail-call
 12995 00008F69 488B4528                	mov rax, PARAM(1)	; param b
 12996 00008F6D 50                      	push rax
 12997 00008F6E 6A01                    	push 1	; arg count
 12998 00008F70 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12999 00008F78 803805                  	cmp byte [rax], T_undefined
 13000 00008F7B 0F8431EF0000            	je L_error_fvar_undefined
 13001 00008F81 803804                  	cmp byte [rax], T_closure
 13002 00008F84 0F85ACEF0000            	jne L_error_non_closure
 13003 00008F8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13004 00008F8D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13005 00008F90 50                      	push rax
 13006 00008F91 488B4520                	mov rax, PARAM(0)	; param a
 13007 00008F95 50                      	push rax
 13008 00008F96 6A02                    	push 2	; arg count
 13009 00008F98 488B0425[3B0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 13010 00008FA0 803805                  	cmp byte [rax], T_undefined
 13011 00008FA3 0F8409EF0000            	je L_error_fvar_undefined
 13012 00008FA9 803804                  	cmp byte [rax], T_closure
 13013 00008FAC 0F8584EF0000            	jne L_error_non_closure
 13014 00008FB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13015 00008FB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13016 00008FB8 FF7500                  	push qword[rbp]
 13017 00008FBB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13018 00008FBE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13019 00008FC2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13020 00008FC6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13021 00008FCA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13022 00008FCD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13023 00008FD0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13024 00008FD5 4983C103                	add r9, 3 	 ;for getting to the params
 13025 00008FD9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13026 00008FDD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13027                                  .L_tc_recycle_frame_loop_006c:
 13028 00008FE0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13029 00008FE3 7410                    	je .L_tc_recycle_frame_done_006c
 13030 00008FE5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13031 00008FE8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13032 00008FEB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13033 00008FEF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13034 00008FF3 EBEB                    	jmp .L_tc_recycle_frame_loop_006c
 13035                                  .L_tc_recycle_frame_done_006c:
 13036 00008FF5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13037 00008FF6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13038 00008FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13039 00008FFD E9CE010000              	jmp .L_if_end_0036
 13040                                  .L_if_else_0036:
 13041                                  	; preparing a non-tail-call
 13042 00009002 488B4528                	mov rax, PARAM(1)	; param b
 13043 00009006 50                      	push rax
 13044 00009007 6A01                    	push 1	; arg count
 13045 00009009 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13046 00009011 803805                  	cmp byte [rax], T_undefined
 13047 00009014 0F8498EE0000            	je L_error_fvar_undefined
 13048 0000901A 803804                  	cmp byte [rax], T_closure
 13049 0000901D 0F8513EF0000            	jne L_error_non_closure
 13050 00009023 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13051 00009026 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13052 00009029 483D[02000000]          	cmp rax, sob_boolean_false
 13053 0000902F 7476                    	je .L_if_else_0035
 13054                                  	; preparing a tail-call
 13055 00009031 488B4528                	mov rax, PARAM(1)	; param b
 13056 00009035 50                      	push rax
 13057 00009036 488B4520                	mov rax, PARAM(0)	; param a
 13058 0000903A 50                      	push rax
 13059 0000903B 6A02                    	push 2	; arg count
 13060 0000903D 488B0425[3B0F0000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 13061 00009045 803805                  	cmp byte [rax], T_undefined
 13062 00009048 0F8464EE0000            	je L_error_fvar_undefined
 13063 0000904E 803804                  	cmp byte [rax], T_closure
 13064 00009051 0F85DFEE0000            	jne L_error_non_closure
 13065 00009057 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13066 0000905A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13067 0000905D FF7500                  	push qword[rbp]
 13068 00009060 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13069 00009063 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13070 00009067 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13071 0000906B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13072 0000906F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13073 00009072 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13074 00009075 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13075 0000907A 4983C103                	add r9, 3 	 ;for getting to the params
 13076 0000907E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13077 00009082 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13078                                  .L_tc_recycle_frame_loop_006d:
 13079 00009085 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13080 00009088 7410                    	je .L_tc_recycle_frame_done_006d
 13081 0000908A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13082 0000908D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13083 00009090 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13084 00009094 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13085 00009098 EBEB                    	jmp .L_tc_recycle_frame_loop_006d
 13086                                  .L_tc_recycle_frame_done_006d:
 13087 0000909A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13088 0000909B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13089 0000909F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13090 000090A2 E929010000              	jmp .L_if_end_0035
 13091                                  .L_if_else_0035:
 13092                                  	; preparing a non-tail-call
 13093 000090A7 488B4528                	mov rax, PARAM(1)	; param b
 13094 000090AB 50                      	push rax
 13095 000090AC 6A01                    	push 1	; arg count
 13096 000090AE 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 13097 000090B6 803805                  	cmp byte [rax], T_undefined
 13098 000090B9 0F84F3ED0000            	je L_error_fvar_undefined
 13099 000090BF 803804                  	cmp byte [rax], T_closure
 13100 000090C2 0F856EEE0000            	jne L_error_non_closure
 13101 000090C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13102 000090CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 13103 000090CE 483D[02000000]          	cmp rax, sob_boolean_false
 13104 000090D4 0F8496000000            	je .L_if_else_0034
 13105                                  	; preparing a tail-call
 13106 000090DA 488B4528                	mov rax, PARAM(1)	; param b
 13107 000090DE 50                      	push rax
 13108                                  	; preparing a non-tail-call
 13109 000090DF 488B4520                	mov rax, PARAM(0)	; param a
 13110 000090E3 50                      	push rax
 13111 000090E4 6A01                    	push 1	; arg count
 13112 000090E6 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13113 000090EE 803805                  	cmp byte [rax], T_undefined
 13114 000090F1 0F84BBED0000            	je L_error_fvar_undefined
 13115 000090F7 803804                  	cmp byte [rax], T_closure
 13116 000090FA 0F8536EE0000            	jne L_error_non_closure
 13117 00009100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13118 00009103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13119 00009106 50                      	push rax
 13120 00009107 6A02                    	push 2	; arg count
 13121 00009109 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13122 00009111 803805                  	cmp byte [rax], T_undefined
 13123 00009114 0F8498ED0000            	je L_error_fvar_undefined
 13124 0000911A 803804                  	cmp byte [rax], T_closure
 13125 0000911D 0F8513EE0000            	jne L_error_non_closure
 13126 00009123 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13127 00009126 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13128 00009129 FF7500                  	push qword[rbp]
 13129 0000912C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13130 0000912F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13131 00009133 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13132 00009137 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13133 0000913B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13134 0000913E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13135 00009141 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13136 00009146 4983C103                	add r9, 3 	 ;for getting to the params
 13137 0000914A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13138 0000914E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13139                                  .L_tc_recycle_frame_loop_006e:
 13140 00009151 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13141 00009154 7410                    	je .L_tc_recycle_frame_done_006e
 13142 00009156 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13143 00009159 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13144 0000915C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13145 00009160 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13146 00009164 EBEB                    	jmp .L_tc_recycle_frame_loop_006e
 13147                                  .L_tc_recycle_frame_done_006e:
 13148 00009166 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13149 00009167 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13150 0000916B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13151 0000916E EB60                    	jmp .L_if_end_0034
 13152                                  .L_if_else_0034:
 13153                                  	; preparing a tail-call
 13154 00009170 6A00                    	push 0	; arg count
 13155 00009172 488B4510                	mov rax, ENV
 13156 00009176 488B00                  	mov rax, qword [rax + 8 * 0]
 13157 00009179 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13158 0000917C 803804                  	cmp byte [rax], T_closure
 13159 0000917F 0F85B1ED0000            	jne L_error_non_closure
 13160 00009185 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13161 00009188 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13162 0000918B FF7500                  	push qword[rbp]
 13163 0000918E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13164 00009191 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13165 00009195 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13166 00009199 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13167 0000919D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13168 000091A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13169 000091A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13170 000091A8 4983C103                	add r9, 3 	 ;for getting to the params
 13171 000091AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13172 000091B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13173                                  .L_tc_recycle_frame_loop_006f:
 13174 000091B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13175 000091B6 7410                    	je .L_tc_recycle_frame_done_006f
 13176 000091B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13177 000091BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13178 000091BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13179 000091C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13180 000091C6 EBEB                    	jmp .L_tc_recycle_frame_loop_006f
 13181                                  .L_tc_recycle_frame_done_006f:
 13182 000091C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13183 000091C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13184 000091CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13185                                  .L_if_end_0034:
 13186                                  .L_if_end_0035:
 13187                                  .L_if_end_0036:
 13188 000091D0 E92F030000              	jmp .L_if_end_003b
 13189                                  .L_if_else_003b:
 13190                                  	; preparing a non-tail-call
 13191 000091D5 488B4520                	mov rax, PARAM(0)	; param a
 13192 000091D9 50                      	push rax
 13193 000091DA 6A01                    	push 1	; arg count
 13194 000091DC 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 13195 000091E4 803805                  	cmp byte [rax], T_undefined
 13196 000091E7 0F84C5EC0000            	je L_error_fvar_undefined
 13197 000091ED 803804                  	cmp byte [rax], T_closure
 13198 000091F0 0F8540ED0000            	jne L_error_non_closure
 13199 000091F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13200 000091F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13201 000091FC 483D[02000000]          	cmp rax, sob_boolean_false
 13202 00009202 0F849C020000            	je .L_if_else_003a
 13203                                  	; preparing a non-tail-call
 13204 00009208 488B4528                	mov rax, PARAM(1)	; param b
 13205 0000920C 50                      	push rax
 13206 0000920D 6A01                    	push 1	; arg count
 13207 0000920F 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 13208 00009217 803805                  	cmp byte [rax], T_undefined
 13209 0000921A 0F8492EC0000            	je L_error_fvar_undefined
 13210 00009220 803804                  	cmp byte [rax], T_closure
 13211 00009223 0F850DED0000            	jne L_error_non_closure
 13212 00009229 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13213 0000922C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13214 0000922F 483D[02000000]          	cmp rax, sob_boolean_false
 13215 00009235 0F8499000000            	je .L_if_else_0039
 13216                                  	; preparing a tail-call
 13217                                  	; preparing a non-tail-call
 13218 0000923B 488B4528                	mov rax, PARAM(1)	; param b
 13219 0000923F 50                      	push rax
 13220 00009240 6A01                    	push 1	; arg count
 13221 00009242 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 13222 0000924A 803805                  	cmp byte [rax], T_undefined
 13223 0000924D 0F845FEC0000            	je L_error_fvar_undefined
 13224 00009253 803804                  	cmp byte [rax], T_closure
 13225 00009256 0F85DAEC0000            	jne L_error_non_closure
 13226 0000925C FF7001                  	push SOB_CLOSURE_ENV(rax)
 13227 0000925F FF5009                  	call SOB_CLOSURE_CODE(rax)
 13228 00009262 50                      	push rax
 13229 00009263 488B4520                	mov rax, PARAM(0)	; param a
 13230 00009267 50                      	push rax
 13231 00009268 6A02                    	push 2	; arg count
 13232 0000926A 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13233 00009272 803805                  	cmp byte [rax], T_undefined
 13234 00009275 0F8437EC0000            	je L_error_fvar_undefined
 13235 0000927B 803804                  	cmp byte [rax], T_closure
 13236 0000927E 0F85B2EC0000            	jne L_error_non_closure
 13237 00009284 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13238 00009287 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13239 0000928A FF7500                  	push qword[rbp]
 13240 0000928D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13241 00009290 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13242 00009294 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13243 00009298 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13244 0000929C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13245 0000929F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13246 000092A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13247 000092A7 4983C103                	add r9, 3 	 ;for getting to the params
 13248 000092AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13249 000092AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13250                                  .L_tc_recycle_frame_loop_0070:
 13251 000092B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13252 000092B5 7410                    	je .L_tc_recycle_frame_done_0070
 13253 000092B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13254 000092BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13255 000092BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13256 000092C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13257 000092C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0070
 13258                                  .L_tc_recycle_frame_done_0070:
 13259 000092C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13260 000092C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13261 000092CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13262 000092CF E9CE010000              	jmp .L_if_end_0039
 13263                                  .L_if_else_0039:
 13264                                  	; preparing a non-tail-call
 13265 000092D4 488B4528                	mov rax, PARAM(1)	; param b
 13266 000092D8 50                      	push rax
 13267 000092D9 6A01                    	push 1	; arg count
 13268 000092DB 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13269 000092E3 803805                  	cmp byte [rax], T_undefined
 13270 000092E6 0F84C6EB0000            	je L_error_fvar_undefined
 13271 000092EC 803804                  	cmp byte [rax], T_closure
 13272 000092EF 0F8541EC0000            	jne L_error_non_closure
 13273 000092F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13274 000092F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13275 000092FB 483D[02000000]          	cmp rax, sob_boolean_false
 13276 00009301 0F8499000000            	je .L_if_else_0038
 13277                                  	; preparing a tail-call
 13278                                  	; preparing a non-tail-call
 13279 00009307 488B4528                	mov rax, PARAM(1)	; param b
 13280 0000930B 50                      	push rax
 13281 0000930C 6A01                    	push 1	; arg count
 13282 0000930E 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13283 00009316 803805                  	cmp byte [rax], T_undefined
 13284 00009319 0F8493EB0000            	je L_error_fvar_undefined
 13285 0000931F 803804                  	cmp byte [rax], T_closure
 13286 00009322 0F850EEC0000            	jne L_error_non_closure
 13287 00009328 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13288 0000932B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13289 0000932E 50                      	push rax
 13290 0000932F 488B4520                	mov rax, PARAM(0)	; param a
 13291 00009333 50                      	push rax
 13292 00009334 6A02                    	push 2	; arg count
 13293 00009336 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13294 0000933E 803805                  	cmp byte [rax], T_undefined
 13295 00009341 0F846BEB0000            	je L_error_fvar_undefined
 13296 00009347 803804                  	cmp byte [rax], T_closure
 13297 0000934A 0F85E6EB0000            	jne L_error_non_closure
 13298 00009350 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13299 00009353 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13300 00009356 FF7500                  	push qword[rbp]
 13301 00009359 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13302 0000935C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13303 00009360 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13304 00009364 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13305 00009368 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13306 0000936B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13307 0000936E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13308 00009373 4983C103                	add r9, 3 	 ;for getting to the params
 13309 00009377 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13310 0000937B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13311                                  .L_tc_recycle_frame_loop_0071:
 13312 0000937E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13313 00009381 7410                    	je .L_tc_recycle_frame_done_0071
 13314 00009383 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13315 00009386 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13316 00009389 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13317 0000938D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13318 00009391 EBEB                    	jmp .L_tc_recycle_frame_loop_0071
 13319                                  .L_tc_recycle_frame_done_0071:
 13320 00009393 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13321 00009394 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13322 00009398 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13323 0000939B E902010000              	jmp .L_if_end_0038
 13324                                  .L_if_else_0038:
 13325                                  	; preparing a non-tail-call
 13326 000093A0 488B4528                	mov rax, PARAM(1)	; param b
 13327 000093A4 50                      	push rax
 13328 000093A5 6A01                    	push 1	; arg count
 13329 000093A7 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 13330 000093AF 803805                  	cmp byte [rax], T_undefined
 13331 000093B2 0F84FAEA0000            	je L_error_fvar_undefined
 13332 000093B8 803804                  	cmp byte [rax], T_closure
 13333 000093BB 0F8575EB0000            	jne L_error_non_closure
 13334 000093C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13335 000093C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13336 000093C7 483D[02000000]          	cmp rax, sob_boolean_false
 13337 000093CD 7473                    	je .L_if_else_0037
 13338                                  	; preparing a tail-call
 13339 000093CF 488B4528                	mov rax, PARAM(1)	; param b
 13340 000093D3 50                      	push rax
 13341 000093D4 488B4520                	mov rax, PARAM(0)	; param a
 13342 000093D8 50                      	push rax
 13343 000093D9 6A02                    	push 2	; arg count
 13344 000093DB 488B0425[4C0F0000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13345 000093E3 803805                  	cmp byte [rax], T_undefined
 13346 000093E6 0F84C6EA0000            	je L_error_fvar_undefined
 13347 000093EC 803804                  	cmp byte [rax], T_closure
 13348 000093EF 0F8541EB0000            	jne L_error_non_closure
 13349 000093F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13350 000093F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13351 000093FB FF7500                  	push qword[rbp]
 13352 000093FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13353 00009401 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13354 00009405 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13355 00009409 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13356 0000940D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13357 00009410 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13358 00009413 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13359 00009418 4983C103                	add r9, 3 	 ;for getting to the params
 13360 0000941C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13361 00009420 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13362                                  .L_tc_recycle_frame_loop_0072:
 13363 00009423 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13364 00009426 7410                    	je .L_tc_recycle_frame_done_0072
 13365 00009428 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13366 0000942B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13367 0000942E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13368 00009432 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13369 00009436 EBEB                    	jmp .L_tc_recycle_frame_loop_0072
 13370                                  .L_tc_recycle_frame_done_0072:
 13371 00009438 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13372 00009439 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13373 0000943D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13374 00009440 EB60                    	jmp .L_if_end_0037
 13375                                  .L_if_else_0037:
 13376                                  	; preparing a tail-call
 13377 00009442 6A00                    	push 0	; arg count
 13378 00009444 488B4510                	mov rax, ENV
 13379 00009448 488B00                  	mov rax, qword [rax + 8 * 0]
 13380 0000944B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13381 0000944E 803804                  	cmp byte [rax], T_closure
 13382 00009451 0F85DFEA0000            	jne L_error_non_closure
 13383 00009457 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13384 0000945A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13385 0000945D FF7500                  	push qword[rbp]
 13386 00009460 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13387 00009463 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13388 00009467 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13389 0000946B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13390 0000946F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13391 00009472 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13392 00009475 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13393 0000947A 4983C103                	add r9, 3 	 ;for getting to the params
 13394 0000947E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13395 00009482 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13396                                  .L_tc_recycle_frame_loop_0073:
 13397 00009485 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13398 00009488 7410                    	je .L_tc_recycle_frame_done_0073
 13399 0000948A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13400 0000948D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13401 00009490 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13402 00009494 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13403 00009498 EBEB                    	jmp .L_tc_recycle_frame_loop_0073
 13404                                  .L_tc_recycle_frame_done_0073:
 13405 0000949A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13406 0000949B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13407 0000949F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13408                                  .L_if_end_0037:
 13409                                  .L_if_end_0038:
 13410                                  .L_if_end_0039:
 13411 000094A2 EB60                    	jmp .L_if_end_003a
 13412                                  .L_if_else_003a:
 13413                                  	; preparing a tail-call
 13414 000094A4 6A00                    	push 0	; arg count
 13415 000094A6 488B4510                	mov rax, ENV
 13416 000094AA 488B00                  	mov rax, qword [rax + 8 * 0]
 13417 000094AD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13418 000094B0 803804                  	cmp byte [rax], T_closure
 13419 000094B3 0F857DEA0000            	jne L_error_non_closure
 13420 000094B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13421 000094BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13422 000094BF FF7500                  	push qword[rbp]
 13423 000094C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13424 000094C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13425 000094C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13426 000094CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13427 000094D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13428 000094D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13429 000094D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13430 000094DC 4983C103                	add r9, 3 	 ;for getting to the params
 13431 000094E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13432 000094E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13433                                  .L_tc_recycle_frame_loop_0074:
 13434 000094E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13435 000094EA 7410                    	je .L_tc_recycle_frame_done_0074
 13436 000094EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13437 000094EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13438 000094F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13439 000094F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13440 000094FA EBEB                    	jmp .L_tc_recycle_frame_loop_0074
 13441                                  .L_tc_recycle_frame_done_0074:
 13442 000094FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13443 000094FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13444 00009501 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13445                                  .L_if_end_003a:
 13446                                  .L_if_end_003b:
 13447                                  .L_if_end_003c:
 13448 00009504 C9                      	leave
 13449 00009505 C22000                  	ret AND_KILL_FRAME(2)
 13450                                  .L_lambda_simple_end_0044:	; new closure is in rax
 13451 00009508 50                      	push rax
 13452 00009509 6A01                    	push 1	; arg count
 13453 0000950B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13454 00009510 E8CAEA0000              	call malloc
 13455 00009515 50                      	push rax
 13456 00009516 BF08000000              	mov rdi, 8 * 1	; new rib
 13457 0000951B E8BFEA0000              	call malloc
 13458 00009520 50                      	push rax
 13459 00009521 BF10000000              	mov rdi, 8 * 2	; extended env
 13460 00009526 E8B4EA0000              	call malloc
 13461 0000952B 488B7D10                	mov rdi, ENV
 13462 0000952F BE00000000              	mov rsi, 0
 13463 00009534 BA01000000              	mov rdx, 1
 13464                                  .L_lambda_simple_env_loop_0045:	; ext_env[i + 1] <-- env[i]
 13465 00009539 4883FE01                	cmp rsi, 1
 13466 0000953D 7410                    	je .L_lambda_simple_env_end_0045
 13467 0000953F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13468 00009543 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13469 00009547 48FFC6                  	inc rsi
 13470 0000954A 48FFC2                  	inc rdx
 13471 0000954D EBEA                    	jmp .L_lambda_simple_env_loop_0045
 13472                                  .L_lambda_simple_env_end_0045:
 13473 0000954F 5B                      	pop rbx
 13474 00009550 BE00000000              	mov rsi, 0
 13475                                  .L_lambda_simple_params_loop_0045:	; copy params
 13476 00009555 4883FE01                	cmp rsi, 1
 13477 00009559 740E                    	je .L_lambda_simple_params_end_0045
 13478 0000955B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13479 00009560 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13480 00009564 48FFC6                  	inc rsi
 13481 00009567 EBEC                    	jmp .L_lambda_simple_params_loop_0045
 13482                                  .L_lambda_simple_params_end_0045:
 13483 00009569 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13484 0000956C 4889C3                  	mov rbx, rax
 13485 0000956F 58                      	pop rax
 13486 00009570 C60004                  	mov byte [rax], T_closure
 13487 00009573 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13488 00009577 48C74009[84950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0045
 13489 0000957F E9AD020000              	jmp .L_lambda_simple_end_0045
 13490                                  .L_lambda_simple_code_0045:	; lambda-simple body
 13491 00009584 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13492 0000958A 740B                    	je .L_lambda_simple_arity_check_ok_0045
 13493 0000958C FF742410                	push qword [rsp + 8 * 2]
 13494 00009590 6A01                    	push 1
 13495 00009592 E901EA0000              	jmp L_error_incorrect_arity_simple
 13496                                  .L_lambda_simple_arity_check_ok_0045:
 13497 00009597 C8000000                	enter 0, 0
 13498 0000959B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13499 000095A0 E83AEA0000              	call malloc
 13500 000095A5 50                      	push rax
 13501 000095A6 BF08000000              	mov rdi, 8 * 1	; new rib
 13502 000095AB E82FEA0000              	call malloc
 13503 000095B0 50                      	push rax
 13504 000095B1 BF18000000              	mov rdi, 8 * 3	; extended env
 13505 000095B6 E824EA0000              	call malloc
 13506 000095BB 488B7D10                	mov rdi, ENV
 13507 000095BF BE00000000              	mov rsi, 0
 13508 000095C4 BA01000000              	mov rdx, 1
 13509                                  .L_lambda_opt_env_loop_000c:	; ext_env[i + 1] <-- env[i]
 13510 000095C9 4883FE02                	cmp rsi, 2
 13511 000095CD 7410                    	je .L_lambda_opt_env_end_000c
 13512 000095CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13513 000095D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13514 000095D7 48FFC6                  	inc rsi
 13515 000095DA 48FFC2                  	inc rdx
 13516 000095DD EBEA                    	jmp .L_lambda_opt_env_loop_000c
 13517                                  .L_lambda_opt_env_end_000c:
 13518 000095DF 5B                      	pop rbx
 13519 000095E0 BE00000000              	mov rsi, 0
 13520                                  .L_lambda_opt_params_loop_000c:	; copy params
 13521 000095E5 4883FE01                	cmp rsi, 1
 13522 000095E9 740E                    	je .L_lambda_opt_params_end_000c
 13523 000095EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13524 000095F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13525 000095F4 48FFC6                  	inc rsi
 13526 000095F7 EBEC                    	jmp .L_lambda_opt_params_loop_000c
 13527                                  .L_lambda_opt_params_end_000c:
 13528 000095F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13529 000095FC 4889C3                  	mov rbx, rax
 13530 000095FF 58                      	pop rax
 13531 00009600 C60004                  	mov byte [rax], T_closure
 13532 00009603 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13533 00009607 48C74009[14960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000c
 13534 0000960F E919020000              	jmp .L_lambda_opt_end_000c
 13535                                  .L_lambda_opt_code_000c:	; lambda-opt body
 13536 00009614 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13537 0000961A 7411                    	je .L_lambda_opt_arity_check_exact_000c
 13538 0000961C 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_000c
 13539 00009622 FF742410                	push qword [rsp + 8 * 2]
 13540 00009626 6A00                    	push 0
 13541 00009628 E97FE90000              	jmp L_error_incorrect_arity_opt
 13542                                  .L_lambda_opt_arity_check_exact_000c:
 13543 0000962D 4883EC08                	sub rsp, 8
 13544 00009631 488B442408              	mov rax, qword[rsp + 8 *1]
 13545 00009636 48890424                	mov qword[rsp], rax  
 13546 0000963A 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 13547 0000963F 4889442408              	mov qword[rsp + 8 * 1], rax
 13548 00009644 B801000000              	mov rax, 1
 13549 00009649 4889442410              	mov qword[rsp + 8 *2], rax
 13550 0000964E 48B8-                   	mov rax, sob_nil
 13550 00009650 [0100000000000000] 
 13551 00009658 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 13552 0000965D C8000000                	enter 0, 0
 13553                                  	; preparing a tail-call
 13554 00009661 488B4520                	mov rax, PARAM(0)	; param s
 13555 00009665 50                      	push rax
 13556 00009666 48B8-                   	mov rax, L_constants + 2270
 13556 00009668 [DE08000000000000] 
 13557 00009670 50                      	push rax
 13558 00009671 488B4510                	mov rax, ENV
 13559 00009675 488B00                  	mov rax, qword [rax + 8 * 0]
 13560 00009678 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13561 0000967B 50                      	push rax
 13562 0000967C 6A03                    	push 3	; arg count
 13563 0000967E 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13564 00009686 803805                  	cmp byte [rax], T_undefined
 13565 00009689 0F8423E80000            	je L_error_fvar_undefined
 13566 0000968F 803804                  	cmp byte [rax], T_closure
 13567 00009692 0F859EE80000            	jne L_error_non_closure
 13568 00009698 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13569 0000969B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13570 0000969E FF7500                  	push qword[rbp]
 13571 000096A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13572 000096A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13573 000096A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13574 000096AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13575 000096B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13576 000096B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13577 000096B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13578 000096BB 4983C103                	add r9, 3 	 ;for getting to the params
 13579 000096BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13580 000096C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13581                                  .L_tc_recycle_frame_loop_0076:
 13582 000096C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13583 000096C9 7410                    	je .L_tc_recycle_frame_done_0076
 13584 000096CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13585 000096CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13586 000096D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13587 000096D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13588 000096D9 EBEB                    	jmp .L_tc_recycle_frame_loop_0076
 13589                                  .L_tc_recycle_frame_done_0076:
 13590 000096DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13591 000096DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13592 000096E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13593 000096E3 C9                      	leave
 13594 000096E4 C21800                  	ret AND_KILL_FRAME(1)
 13595 000096E7 E941010000              	jmp .L_lambda_opt_end_000c	; new closure is in rax
 13596                                  .L_lambda_opt_arity_check_more_000c:
 13597 000096EC 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 13598 000096F1 49B9-                   	mov r9, sob_nil
 13598 000096F3 [0100000000000000] 
 13599 000096FB 4889E3                  	mov rbx, rsp 
 13600 000096FE 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 13601 00009702 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 13602 00009705 49C1E003                	shl r8, 3
 13603 00009709 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 13604 0000970C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 13605                                  .L_lambda_opt_stack_shrink_loop_000c:
 13606 00009711 4983F800                	cmp r8, 0
 13607 00009715 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000c
 13608 00009717 BF11000000              	mov rdi, 1+8+8	;for pair
 13609 0000971C E8BEE80000              	call malloc	 ;to create the pair in the stack
 13610 00009721 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 13611 00009724 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 13612 00009727 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 13613 0000972B 4C894809                 	mov qword[rax+1+8],r9
 13614 0000972F 4989C1                  	mov r9, rax	 ; for the recursion 
 13615 00009732 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 13616 00009735 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 13617 00009739 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000c
 13618                                  .L_lambda_opt_stack_shrink_loop_exit_000c:
 13619 0000973B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 13620 00009740 4883E901                	sub rcx, 1
 13621 00009744 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 13622 00009748 4801CC                  	add rsp, rcx	 ;shrinking the stack
 13623 0000974B 4889E0                  	mov rax, rsp
 13624 0000974E 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 13625 00009751 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 13626 00009755 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 13627 00009758 4883C018                	add rax, 3 * 8 	;now rax is param 0
 13628 0000975C 49C1E003                	shl r8, 3 	; convert to byte
 13629 00009760 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 13630 00009763 4C8908                  	mov qword[rax], r9	;puting the list at the top
 13631 00009766 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 13632 0000976A 4889E3                  	mov rbx, rsp 
 13633 0000976D 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 13634 00009770 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 13635 00009776 49FFCA                  	dec r10 
 13636 00009779 49C1E203                	shl r10, 3	;to get bytes
 13637 0000977D 4883C318                	add rbx, 3*8 	;rbx is the first param
 13638 00009781 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 13639 00009784 4889E0                  	mov rax, rsp
 13640 00009787 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 13641 0000978A 48C744241001000000      	mov qword [rsp+2*8], 1
 13642 00009793 488B5808                	mov rbx, qword[rax + 8 *1]
 13643 00009797 48895C2408              	mov qword [rsp + 1*8] ,rbx
 13644 0000979C 488B18                  	mov rbx, qword[rax]
 13645 0000979F 48891C24                	mov qword [rsp], rbx
 13646 000097A3 C8000000                	enter 0, 0
 13647                                  	; preparing a tail-call
 13648 000097A7 488B4520                	mov rax, PARAM(0)	; param s
 13649 000097AB 50                      	push rax
 13650 000097AC 48B8-                   	mov rax, L_constants + 2270
 13650 000097AE [DE08000000000000] 
 13651 000097B6 50                      	push rax
 13652 000097B7 488B4510                	mov rax, ENV
 13653 000097BB 488B00                  	mov rax, qword [rax + 8 * 0]
 13654 000097BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13655 000097C1 50                      	push rax
 13656 000097C2 6A03                    	push 3	; arg count
 13657 000097C4 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 13658 000097CC 803805                  	cmp byte [rax], T_undefined
 13659 000097CF 0F84DDE60000            	je L_error_fvar_undefined
 13660 000097D5 803804                  	cmp byte [rax], T_closure
 13661 000097D8 0F8558E70000            	jne L_error_non_closure
 13662 000097DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13663 000097E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13664 000097E4 FF7500                  	push qword[rbp]
 13665 000097E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13666 000097EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13667 000097EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13668 000097F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13669 000097F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13670 000097F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13671 000097FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13672 00009801 4983C103                	add r9, 3 	 ;for getting to the params
 13673 00009805 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13674 00009809 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13675                                  .L_tc_recycle_frame_loop_0075:
 13676 0000980C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13677 0000980F 7410                    	je .L_tc_recycle_frame_done_0075
 13678 00009811 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13679 00009814 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13680 00009817 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13681 0000981B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13682 0000981F EBEB                    	jmp .L_tc_recycle_frame_loop_0075
 13683                                  .L_tc_recycle_frame_done_0075:
 13684 00009821 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13685 00009822 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13686 00009826 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13687 00009829 C9                      	leave
 13688 0000982A C21800                  	ret AND_KILL_FRAME(1)
 13689                                  .L_lambda_opt_end_000c:	; new closure is in rax
 13690 0000982D C9                      	leave
 13691 0000982E C21800                  	ret AND_KILL_FRAME(1)
 13692                                  .L_lambda_simple_end_0045:	; new closure is in rax
 13693 00009831 803804                  	cmp byte [rax], T_closure
 13694 00009834 0F85FCE60000            	jne L_error_non_closure
 13695 0000983A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13696 0000983D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13697 00009840 FF7500                  	push qword[rbp]
 13698 00009843 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13699 00009846 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13700 0000984A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13701 0000984E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13702 00009852 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13703 00009855 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13704 00009858 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13705 0000985D 4983C103                	add r9, 3 	 ;for getting to the params
 13706 00009861 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13707 00009865 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13708                                  .L_tc_recycle_frame_loop_0077:
 13709 00009868 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13710 0000986B 7410                    	je .L_tc_recycle_frame_done_0077
 13711 0000986D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13712 00009870 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13713 00009873 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13714 00009877 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13715 0000987B EBEB                    	jmp .L_tc_recycle_frame_loop_0077
 13716                                  .L_tc_recycle_frame_done_0077:
 13717 0000987D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13718 0000987E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13719 00009882 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13720 00009885 C9                      	leave
 13721 00009886 C21800                  	ret AND_KILL_FRAME(1)
 13722                                  .L_lambda_simple_end_0043:	; new closure is in rax
 13723 00009889 803804                  	cmp byte [rax], T_closure
 13724 0000988C 0F85A4E60000            	jne L_error_non_closure
 13725 00009892 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13726 00009895 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13727 00009898 48890425[C50D0000]      	mov qword [free_var_0], rax
 13728 000098A0 48B8-                   	mov rax, sob_void
 13728 000098A2 [0000000000000000] 
 13729                                  
 13730 000098AA 4889C7                  	mov rdi, rax
 13731 000098AD E882E90000              	call print_sexpr_if_not_void
 13732                                  	; preparing a non-tail-call
 13733 000098B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13734 000098B7 E823E70000              	call malloc
 13735 000098BC 50                      	push rax
 13736 000098BD BF00000000              	mov rdi, 8 * 0	; new rib
 13737 000098C2 E818E70000              	call malloc
 13738 000098C7 50                      	push rax
 13739 000098C8 BF08000000              	mov rdi, 8 * 1	; extended env
 13740 000098CD E80DE70000              	call malloc
 13741 000098D2 488B7D10                	mov rdi, ENV
 13742 000098D6 BE00000000              	mov rsi, 0
 13743 000098DB BA01000000              	mov rdx, 1
 13744                                  .L_lambda_simple_env_loop_0046:	; ext_env[i + 1] <-- env[i]
 13745 000098E0 4883FE00                	cmp rsi, 0
 13746 000098E4 7410                    	je .L_lambda_simple_env_end_0046
 13747 000098E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13748 000098EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13749 000098EE 48FFC6                  	inc rsi
 13750 000098F1 48FFC2                  	inc rdx
 13751 000098F4 EBEA                    	jmp .L_lambda_simple_env_loop_0046
 13752                                  .L_lambda_simple_env_end_0046:
 13753 000098F6 5B                      	pop rbx
 13754 000098F7 BE00000000              	mov rsi, 0
 13755                                  .L_lambda_simple_params_loop_0046:	; copy params
 13756 000098FC 4883FE00                	cmp rsi, 0
 13757 00009900 740E                    	je .L_lambda_simple_params_end_0046
 13758 00009902 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13759 00009907 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13760 0000990B 48FFC6                  	inc rsi
 13761 0000990E EBEC                    	jmp .L_lambda_simple_params_loop_0046
 13762                                  .L_lambda_simple_params_end_0046:
 13763 00009910 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13764 00009913 4889C3                  	mov rbx, rax
 13765 00009916 58                      	pop rax
 13766 00009917 C60004                  	mov byte [rax], T_closure
 13767 0000991A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13768 0000991E 48C74009[2B990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0046
 13769 00009926 E998000000              	jmp .L_lambda_simple_end_0046
 13770                                  .L_lambda_simple_code_0046:	; lambda-simple body
 13771 0000992B 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13772 00009931 740B                    	je .L_lambda_simple_arity_check_ok_0046
 13773 00009933 FF742410                	push qword [rsp + 8 * 2]
 13774 00009937 6A00                    	push 0
 13775 00009939 E95AE60000              	jmp L_error_incorrect_arity_simple
 13776                                  .L_lambda_simple_arity_check_ok_0046:
 13777 0000993E C8000000                	enter 0, 0
 13778                                  	; preparing a tail-call
 13779 00009942 48B8-                   	mov rax, L_constants + 2187
 13779 00009944 [8B08000000000000] 
 13780 0000994C 50                      	push rax
 13781 0000994D 48B8-                   	mov rax, L_constants + 2298
 13781 0000994F [FA08000000000000] 
 13782 00009957 50                      	push rax
 13783 00009958 6A02                    	push 2	; arg count
 13784 0000995A 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 13785 00009962 803805                  	cmp byte [rax], T_undefined
 13786 00009965 0F8447E50000            	je L_error_fvar_undefined
 13787 0000996B 803804                  	cmp byte [rax], T_closure
 13788 0000996E 0F85C2E50000            	jne L_error_non_closure
 13789 00009974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13790 00009977 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13791 0000997A FF7500                  	push qword[rbp]
 13792 0000997D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13793 00009980 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13794 00009984 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13795 00009988 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13796 0000998C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13797 0000998F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13798 00009992 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13799 00009997 4983C103                	add r9, 3 	 ;for getting to the params
 13800 0000999B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13801 0000999F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13802                                  .L_tc_recycle_frame_loop_0078:
 13803 000099A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13804 000099A5 7410                    	je .L_tc_recycle_frame_done_0078
 13805 000099A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13806 000099AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13807 000099AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13808 000099B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13809 000099B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0078
 13810                                  .L_tc_recycle_frame_done_0078:
 13811 000099B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13812 000099B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13813 000099BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13814 000099BF C9                      	leave
 13815 000099C0 C21000                  	ret AND_KILL_FRAME(0)
 13816                                  .L_lambda_simple_end_0046:	; new closure is in rax
 13817 000099C3 50                      	push rax
 13818 000099C4 6A01                    	push 1	; arg count
 13819 000099C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13820 000099CB E80FE60000              	call malloc
 13821 000099D0 50                      	push rax
 13822 000099D1 BF00000000              	mov rdi, 8 * 0	; new rib
 13823 000099D6 E804E60000              	call malloc
 13824 000099DB 50                      	push rax
 13825 000099DC BF08000000              	mov rdi, 8 * 1	; extended env
 13826 000099E1 E8F9E50000              	call malloc
 13827 000099E6 488B7D10                	mov rdi, ENV
 13828 000099EA BE00000000              	mov rsi, 0
 13829 000099EF BA01000000              	mov rdx, 1
 13830                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
 13831 000099F4 4883FE00                	cmp rsi, 0
 13832 000099F8 7410                    	je .L_lambda_simple_env_end_0047
 13833 000099FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13834 000099FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13835 00009A02 48FFC6                  	inc rsi
 13836 00009A05 48FFC2                  	inc rdx
 13837 00009A08 EBEA                    	jmp .L_lambda_simple_env_loop_0047
 13838                                  .L_lambda_simple_env_end_0047:
 13839 00009A0A 5B                      	pop rbx
 13840 00009A0B BE00000000              	mov rsi, 0
 13841                                  .L_lambda_simple_params_loop_0047:	; copy params
 13842 00009A10 4883FE00                	cmp rsi, 0
 13843 00009A14 740E                    	je .L_lambda_simple_params_end_0047
 13844 00009A16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13845 00009A1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13846 00009A1F 48FFC6                  	inc rsi
 13847 00009A22 EBEC                    	jmp .L_lambda_simple_params_loop_0047
 13848                                  .L_lambda_simple_params_end_0047:
 13849 00009A24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13850 00009A27 4889C3                  	mov rbx, rax
 13851 00009A2A 58                      	pop rax
 13852 00009A2B C60004                  	mov byte [rax], T_closure
 13853 00009A2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13854 00009A32 48C74009[3F9A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
 13855 00009A3A E99B100000              	jmp .L_lambda_simple_end_0047
 13856                                  .L_lambda_simple_code_0047:	; lambda-simple body
 13857 00009A3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13858 00009A45 740B                    	je .L_lambda_simple_arity_check_ok_0047
 13859 00009A47 FF742410                	push qword [rsp + 8 * 2]
 13860 00009A4B 6A01                    	push 1
 13861 00009A4D E946E50000              	jmp L_error_incorrect_arity_simple
 13862                                  .L_lambda_simple_arity_check_ok_0047:
 13863 00009A52 C8000000                	enter 0, 0
 13864                                  	; preparing a tail-call
 13865 00009A56 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13866 00009A5B E87FE50000              	call malloc
 13867 00009A60 50                      	push rax
 13868 00009A61 BF08000000              	mov rdi, 8 * 1	; new rib
 13869 00009A66 E874E50000              	call malloc
 13870 00009A6B 50                      	push rax
 13871 00009A6C BF10000000              	mov rdi, 8 * 2	; extended env
 13872 00009A71 E869E50000              	call malloc
 13873 00009A76 488B7D10                	mov rdi, ENV
 13874 00009A7A BE00000000              	mov rsi, 0
 13875 00009A7F BA01000000              	mov rdx, 1
 13876                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
 13877 00009A84 4883FE01                	cmp rsi, 1
 13878 00009A88 7410                    	je .L_lambda_simple_env_end_0048
 13879 00009A8A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13880 00009A8E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13881 00009A92 48FFC6                  	inc rsi
 13882 00009A95 48FFC2                  	inc rdx
 13883 00009A98 EBEA                    	jmp .L_lambda_simple_env_loop_0048
 13884                                  .L_lambda_simple_env_end_0048:
 13885 00009A9A 5B                      	pop rbx
 13886 00009A9B BE00000000              	mov rsi, 0
 13887                                  .L_lambda_simple_params_loop_0048:	; copy params
 13888 00009AA0 4883FE01                	cmp rsi, 1
 13889 00009AA4 740E                    	je .L_lambda_simple_params_end_0048
 13890 00009AA6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13891 00009AAB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13892 00009AAF 48FFC6                  	inc rsi
 13893 00009AB2 EBEC                    	jmp .L_lambda_simple_params_loop_0048
 13894                                  .L_lambda_simple_params_end_0048:
 13895 00009AB4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13896 00009AB7 4889C3                  	mov rbx, rax
 13897 00009ABA 58                      	pop rax
 13898 00009ABB C60004                  	mov byte [rax], T_closure
 13899 00009ABE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13900 00009AC2 48C74009[CF9A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
 13901 00009ACA E9EE080000              	jmp .L_lambda_simple_end_0048
 13902                                  .L_lambda_simple_code_0048:	; lambda-simple body
 13903 00009ACF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13904 00009AD5 740B                    	je .L_lambda_simple_arity_check_ok_0048
 13905 00009AD7 FF742410                	push qword [rsp + 8 * 2]
 13906 00009ADB 6A02                    	push 2
 13907 00009ADD E9B6E40000              	jmp L_error_incorrect_arity_simple
 13908                                  .L_lambda_simple_arity_check_ok_0048:
 13909 00009AE2 C8000000                	enter 0, 0
 13910                                  	; preparing a non-tail-call
 13911 00009AE6 488B4520                	mov rax, PARAM(0)	; param a
 13912 00009AEA 50                      	push rax
 13913 00009AEB 6A01                    	push 1	; arg count
 13914 00009AED 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 13915 00009AF5 803805                  	cmp byte [rax], T_undefined
 13916 00009AF8 0F84B4E30000            	je L_error_fvar_undefined
 13917 00009AFE 803804                  	cmp byte [rax], T_closure
 13918 00009B01 0F852FE40000            	jne L_error_non_closure
 13919 00009B07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13920 00009B0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13921 00009B0D 483D[02000000]          	cmp rax, sob_boolean_false
 13922 00009B13 0F849F020000            	je .L_if_else_0048
 13923                                  	; preparing a non-tail-call
 13924 00009B19 488B4528                	mov rax, PARAM(1)	; param b
 13925 00009B1D 50                      	push rax
 13926 00009B1E 6A01                    	push 1	; arg count
 13927 00009B20 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 13928 00009B28 803805                  	cmp byte [rax], T_undefined
 13929 00009B2B 0F8481E30000            	je L_error_fvar_undefined
 13930 00009B31 803804                  	cmp byte [rax], T_closure
 13931 00009B34 0F85FCE30000            	jne L_error_non_closure
 13932 00009B3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13933 00009B3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13934 00009B40 483D[02000000]          	cmp rax, sob_boolean_false
 13935 00009B46 7476                    	je .L_if_else_003f
 13936                                  	; preparing a tail-call
 13937 00009B48 488B4528                	mov rax, PARAM(1)	; param b
 13938 00009B4C 50                      	push rax
 13939 00009B4D 488B4520                	mov rax, PARAM(0)	; param a
 13940 00009B51 50                      	push rax
 13941 00009B52 6A02                    	push 2	; arg count
 13942 00009B54 488B0425[C40E0000]      	mov rax, qword [free_var_15]	; free var __bin-div-zz
 13943 00009B5C 803805                  	cmp byte [rax], T_undefined
 13944 00009B5F 0F844DE30000            	je L_error_fvar_undefined
 13945 00009B65 803804                  	cmp byte [rax], T_closure
 13946 00009B68 0F85C8E30000            	jne L_error_non_closure
 13947 00009B6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13948 00009B71 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13949 00009B74 FF7500                  	push qword[rbp]
 13950 00009B77 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13951 00009B7A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13952 00009B7E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13953 00009B82 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13954 00009B86 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13955 00009B89 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13956 00009B8C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13957 00009B91 4983C103                	add r9, 3 	 ;for getting to the params
 13958 00009B95 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13959 00009B99 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13960                                  .L_tc_recycle_frame_loop_0079:
 13961 00009B9C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13962 00009B9F 7410                    	je .L_tc_recycle_frame_done_0079
 13963 00009BA1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13964 00009BA4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13965 00009BA7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13966 00009BAB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13967 00009BAF EBEB                    	jmp .L_tc_recycle_frame_loop_0079
 13968                                  .L_tc_recycle_frame_done_0079:
 13969 00009BB1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13970 00009BB2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13971 00009BB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13972 00009BB9 E9F5010000              	jmp .L_if_end_003f
 13973                                  .L_if_else_003f:
 13974                                  	; preparing a non-tail-call
 13975 00009BBE 488B4528                	mov rax, PARAM(1)	; param b
 13976 00009BC2 50                      	push rax
 13977 00009BC3 6A01                    	push 1	; arg count
 13978 00009BC5 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 13979 00009BCD 803805                  	cmp byte [rax], T_undefined
 13980 00009BD0 0F84DCE20000            	je L_error_fvar_undefined
 13981 00009BD6 803804                  	cmp byte [rax], T_closure
 13982 00009BD9 0F8557E30000            	jne L_error_non_closure
 13983 00009BDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 13984 00009BE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13985 00009BE5 483D[02000000]          	cmp rax, sob_boolean_false
 13986 00009BEB 0F8499000000            	je .L_if_else_003e
 13987                                  	; preparing a tail-call
 13988 00009BF1 488B4528                	mov rax, PARAM(1)	; param b
 13989 00009BF5 50                      	push rax
 13990                                  	; preparing a non-tail-call
 13991 00009BF6 488B4520                	mov rax, PARAM(0)	; param a
 13992 00009BFA 50                      	push rax
 13993 00009BFB 6A01                    	push 1	; arg count
 13994 00009BFD 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 13995 00009C05 803805                  	cmp byte [rax], T_undefined
 13996 00009C08 0F84A4E20000            	je L_error_fvar_undefined
 13997 00009C0E 803804                  	cmp byte [rax], T_closure
 13998 00009C11 0F851FE30000            	jne L_error_non_closure
 13999 00009C17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14000 00009C1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14001 00009C1D 50                      	push rax
 14002 00009C1E 6A02                    	push 2	; arg count
 14003 00009C20 488B0425[A20E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14004 00009C28 803805                  	cmp byte [rax], T_undefined
 14005 00009C2B 0F8481E20000            	je L_error_fvar_undefined
 14006 00009C31 803804                  	cmp byte [rax], T_closure
 14007 00009C34 0F85FCE20000            	jne L_error_non_closure
 14008 00009C3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14009 00009C3D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14010 00009C40 FF7500                  	push qword[rbp]
 14011 00009C43 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14012 00009C46 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14013 00009C4A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14014 00009C4E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14015 00009C52 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14016 00009C55 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14017 00009C58 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14018 00009C5D 4983C103                	add r9, 3 	 ;for getting to the params
 14019 00009C61 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14020 00009C65 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14021                                  .L_tc_recycle_frame_loop_007a:
 14022 00009C68 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14023 00009C6B 7410                    	je .L_tc_recycle_frame_done_007a
 14024 00009C6D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14025 00009C70 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14026 00009C73 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14027 00009C77 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14028 00009C7B EBEB                    	jmp .L_tc_recycle_frame_loop_007a
 14029                                  .L_tc_recycle_frame_done_007a:
 14030 00009C7D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14031 00009C7E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14032 00009C82 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14033 00009C85 E929010000              	jmp .L_if_end_003e
 14034                                  .L_if_else_003e:
 14035                                  	; preparing a non-tail-call
 14036 00009C8A 488B4528                	mov rax, PARAM(1)	; param b
 14037 00009C8E 50                      	push rax
 14038 00009C8F 6A01                    	push 1	; arg count
 14039 00009C91 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14040 00009C99 803805                  	cmp byte [rax], T_undefined
 14041 00009C9C 0F8410E20000            	je L_error_fvar_undefined
 14042 00009CA2 803804                  	cmp byte [rax], T_closure
 14043 00009CA5 0F858BE20000            	jne L_error_non_closure
 14044 00009CAB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14045 00009CAE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14046 00009CB1 483D[02000000]          	cmp rax, sob_boolean_false
 14047 00009CB7 0F8496000000            	je .L_if_else_003d
 14048                                  	; preparing a tail-call
 14049 00009CBD 488B4528                	mov rax, PARAM(1)	; param b
 14050 00009CC1 50                      	push rax
 14051                                  	; preparing a non-tail-call
 14052 00009CC2 488B4520                	mov rax, PARAM(0)	; param a
 14053 00009CC6 50                      	push rax
 14054 00009CC7 6A01                    	push 1	; arg count
 14055 00009CC9 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14056 00009CD1 803805                  	cmp byte [rax], T_undefined
 14057 00009CD4 0F84D8E10000            	je L_error_fvar_undefined
 14058 00009CDA 803804                  	cmp byte [rax], T_closure
 14059 00009CDD 0F8553E20000            	jne L_error_non_closure
 14060 00009CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14061 00009CE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14062 00009CE9 50                      	push rax
 14063 00009CEA 6A02                    	push 2	; arg count
 14064 00009CEC 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14065 00009CF4 803805                  	cmp byte [rax], T_undefined
 14066 00009CF7 0F84B5E10000            	je L_error_fvar_undefined
 14067 00009CFD 803804                  	cmp byte [rax], T_closure
 14068 00009D00 0F8530E20000            	jne L_error_non_closure
 14069 00009D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14070 00009D09 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14071 00009D0C FF7500                  	push qword[rbp]
 14072 00009D0F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14073 00009D12 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14074 00009D16 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14075 00009D1A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14076 00009D1E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14077 00009D21 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14078 00009D24 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14079 00009D29 4983C103                	add r9, 3 	 ;for getting to the params
 14080 00009D2D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14081 00009D31 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14082                                  .L_tc_recycle_frame_loop_007b:
 14083 00009D34 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14084 00009D37 7410                    	je .L_tc_recycle_frame_done_007b
 14085 00009D39 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14086 00009D3C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14087 00009D3F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14088 00009D43 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14089 00009D47 EBEB                    	jmp .L_tc_recycle_frame_loop_007b
 14090                                  .L_tc_recycle_frame_done_007b:
 14091 00009D49 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14092 00009D4A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14093 00009D4E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14094 00009D51 EB60                    	jmp .L_if_end_003d
 14095                                  .L_if_else_003d:
 14096                                  	; preparing a tail-call
 14097 00009D53 6A00                    	push 0	; arg count
 14098 00009D55 488B4510                	mov rax, ENV
 14099 00009D59 488B00                  	mov rax, qword [rax + 8 * 0]
 14100 00009D5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14101 00009D5F 803804                  	cmp byte [rax], T_closure
 14102 00009D62 0F85CEE10000            	jne L_error_non_closure
 14103 00009D68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14104 00009D6B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14105 00009D6E FF7500                  	push qword[rbp]
 14106 00009D71 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14107 00009D74 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14108 00009D78 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14109 00009D7C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14110 00009D80 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14111 00009D83 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14112 00009D86 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14113 00009D8B 4983C103                	add r9, 3 	 ;for getting to the params
 14114 00009D8F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14115 00009D93 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14116                                  .L_tc_recycle_frame_loop_007c:
 14117 00009D96 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14118 00009D99 7410                    	je .L_tc_recycle_frame_done_007c
 14119 00009D9B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14120 00009D9E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14121 00009DA1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14122 00009DA5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14123 00009DA9 EBEB                    	jmp .L_tc_recycle_frame_loop_007c
 14124                                  .L_tc_recycle_frame_done_007c:
 14125 00009DAB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14126 00009DAC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14127 00009DB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14128                                  .L_if_end_003d:
 14129                                  .L_if_end_003e:
 14130                                  .L_if_end_003f:
 14131 00009DB3 E901060000              	jmp .L_if_end_0048
 14132                                  .L_if_else_0048:
 14133                                  	; preparing a non-tail-call
 14134 00009DB8 488B4520                	mov rax, PARAM(0)	; param a
 14135 00009DBC 50                      	push rax
 14136 00009DBD 6A01                    	push 1	; arg count
 14137 00009DBF 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14138 00009DC7 803805                  	cmp byte [rax], T_undefined
 14139 00009DCA 0F84E2E00000            	je L_error_fvar_undefined
 14140 00009DD0 803804                  	cmp byte [rax], T_closure
 14141 00009DD3 0F855DE10000            	jne L_error_non_closure
 14142 00009DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14143 00009DDC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14144 00009DDF 483D[02000000]          	cmp rax, sob_boolean_false
 14145 00009DE5 0F849F020000            	je .L_if_else_0047
 14146                                  	; preparing a non-tail-call
 14147 00009DEB 488B4528                	mov rax, PARAM(1)	; param b
 14148 00009DEF 50                      	push rax
 14149 00009DF0 6A01                    	push 1	; arg count
 14150 00009DF2 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 14151 00009DFA 803805                  	cmp byte [rax], T_undefined
 14152 00009DFD 0F84AFE00000            	je L_error_fvar_undefined
 14153 00009E03 803804                  	cmp byte [rax], T_closure
 14154 00009E06 0F852AE10000            	jne L_error_non_closure
 14155 00009E0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14156 00009E0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 14157 00009E12 483D[02000000]          	cmp rax, sob_boolean_false
 14158 00009E18 0F8499000000            	je .L_if_else_0042
 14159                                  	; preparing a tail-call
 14160                                  	; preparing a non-tail-call
 14161 00009E1E 488B4528                	mov rax, PARAM(1)	; param b
 14162 00009E22 50                      	push rax
 14163 00009E23 6A01                    	push 1	; arg count
 14164 00009E25 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14165 00009E2D 803805                  	cmp byte [rax], T_undefined
 14166 00009E30 0F847CE00000            	je L_error_fvar_undefined
 14167 00009E36 803804                  	cmp byte [rax], T_closure
 14168 00009E39 0F85F7E00000            	jne L_error_non_closure
 14169 00009E3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14170 00009E42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14171 00009E45 50                      	push rax
 14172 00009E46 488B4520                	mov rax, PARAM(0)	; param a
 14173 00009E4A 50                      	push rax
 14174 00009E4B 6A02                    	push 2	; arg count
 14175 00009E4D 488B0425[A20E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14176 00009E55 803805                  	cmp byte [rax], T_undefined
 14177 00009E58 0F8454E00000            	je L_error_fvar_undefined
 14178 00009E5E 803804                  	cmp byte [rax], T_closure
 14179 00009E61 0F85CFE00000            	jne L_error_non_closure
 14180 00009E67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14181 00009E6A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14182 00009E6D FF7500                  	push qword[rbp]
 14183 00009E70 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14184 00009E73 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14185 00009E77 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14186 00009E7B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14187 00009E7F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14188 00009E82 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14189 00009E85 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14190 00009E8A 4983C103                	add r9, 3 	 ;for getting to the params
 14191 00009E8E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14192 00009E92 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14193                                  .L_tc_recycle_frame_loop_007d:
 14194 00009E95 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14195 00009E98 7410                    	je .L_tc_recycle_frame_done_007d
 14196 00009E9A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14197 00009E9D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14198 00009EA0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14199 00009EA4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14200 00009EA8 EBEB                    	jmp .L_tc_recycle_frame_loop_007d
 14201                                  .L_tc_recycle_frame_done_007d:
 14202 00009EAA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14203 00009EAB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14204 00009EAF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14205 00009EB2 E9CE010000              	jmp .L_if_end_0042
 14206                                  .L_if_else_0042:
 14207                                  	; preparing a non-tail-call
 14208 00009EB7 488B4528                	mov rax, PARAM(1)	; param b
 14209 00009EBB 50                      	push rax
 14210 00009EBC 6A01                    	push 1	; arg count
 14211 00009EBE 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14212 00009EC6 803805                  	cmp byte [rax], T_undefined
 14213 00009EC9 0F84E3DF0000            	je L_error_fvar_undefined
 14214 00009ECF 803804                  	cmp byte [rax], T_closure
 14215 00009ED2 0F855EE00000            	jne L_error_non_closure
 14216 00009ED8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14217 00009EDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 14218 00009EDE 483D[02000000]          	cmp rax, sob_boolean_false
 14219 00009EE4 7476                    	je .L_if_else_0041
 14220                                  	; preparing a tail-call
 14221 00009EE6 488B4528                	mov rax, PARAM(1)	; param b
 14222 00009EEA 50                      	push rax
 14223 00009EEB 488B4520                	mov rax, PARAM(0)	; param a
 14224 00009EEF 50                      	push rax
 14225 00009EF0 6A02                    	push 2	; arg count
 14226 00009EF2 488B0425[A20E0000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14227 00009EFA 803805                  	cmp byte [rax], T_undefined
 14228 00009EFD 0F84AFDF0000            	je L_error_fvar_undefined
 14229 00009F03 803804                  	cmp byte [rax], T_closure
 14230 00009F06 0F852AE00000            	jne L_error_non_closure
 14231 00009F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14232 00009F0F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14233 00009F12 FF7500                  	push qword[rbp]
 14234 00009F15 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14235 00009F18 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14236 00009F1C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14237 00009F20 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14238 00009F24 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14239 00009F27 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14240 00009F2A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14241 00009F2F 4983C103                	add r9, 3 	 ;for getting to the params
 14242 00009F33 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14243 00009F37 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14244                                  .L_tc_recycle_frame_loop_007e:
 14245 00009F3A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14246 00009F3D 7410                    	je .L_tc_recycle_frame_done_007e
 14247 00009F3F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14248 00009F42 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14249 00009F45 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14250 00009F49 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14251 00009F4D EBEB                    	jmp .L_tc_recycle_frame_loop_007e
 14252                                  .L_tc_recycle_frame_done_007e:
 14253 00009F4F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14254 00009F50 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14255 00009F54 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14256 00009F57 E929010000              	jmp .L_if_end_0041
 14257                                  .L_if_else_0041:
 14258                                  	; preparing a non-tail-call
 14259 00009F5C 488B4528                	mov rax, PARAM(1)	; param b
 14260 00009F60 50                      	push rax
 14261 00009F61 6A01                    	push 1	; arg count
 14262 00009F63 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14263 00009F6B 803805                  	cmp byte [rax], T_undefined
 14264 00009F6E 0F843EDF0000            	je L_error_fvar_undefined
 14265 00009F74 803804                  	cmp byte [rax], T_closure
 14266 00009F77 0F85B9DF0000            	jne L_error_non_closure
 14267 00009F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14268 00009F80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14269 00009F83 483D[02000000]          	cmp rax, sob_boolean_false
 14270 00009F89 0F8496000000            	je .L_if_else_0040
 14271                                  	; preparing a tail-call
 14272 00009F8F 488B4528                	mov rax, PARAM(1)	; param b
 14273 00009F93 50                      	push rax
 14274                                  	; preparing a non-tail-call
 14275 00009F94 488B4520                	mov rax, PARAM(0)	; param a
 14276 00009F98 50                      	push rax
 14277 00009F99 6A01                    	push 1	; arg count
 14278 00009F9B 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14279 00009FA3 803805                  	cmp byte [rax], T_undefined
 14280 00009FA6 0F8406DF0000            	je L_error_fvar_undefined
 14281 00009FAC 803804                  	cmp byte [rax], T_closure
 14282 00009FAF 0F8581DF0000            	jne L_error_non_closure
 14283 00009FB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14284 00009FB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14285 00009FBB 50                      	push rax
 14286 00009FBC 6A02                    	push 2	; arg count
 14287 00009FBE 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14288 00009FC6 803805                  	cmp byte [rax], T_undefined
 14289 00009FC9 0F84E3DE0000            	je L_error_fvar_undefined
 14290 00009FCF 803804                  	cmp byte [rax], T_closure
 14291 00009FD2 0F855EDF0000            	jne L_error_non_closure
 14292 00009FD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14293 00009FDB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14294 00009FDE FF7500                  	push qword[rbp]
 14295 00009FE1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14296 00009FE4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14297 00009FE8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14298 00009FEC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14299 00009FF0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14300 00009FF3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14301 00009FF6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14302 00009FFB 4983C103                	add r9, 3 	 ;for getting to the params
 14303 00009FFF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14304 0000A003 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14305                                  .L_tc_recycle_frame_loop_007f:
 14306 0000A006 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14307 0000A009 7410                    	je .L_tc_recycle_frame_done_007f
 14308 0000A00B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14309 0000A00E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14310 0000A011 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14311 0000A015 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14312 0000A019 EBEB                    	jmp .L_tc_recycle_frame_loop_007f
 14313                                  .L_tc_recycle_frame_done_007f:
 14314 0000A01B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14315 0000A01C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14316 0000A020 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14317 0000A023 EB60                    	jmp .L_if_end_0040
 14318                                  .L_if_else_0040:
 14319                                  	; preparing a tail-call
 14320 0000A025 6A00                    	push 0	; arg count
 14321 0000A027 488B4510                	mov rax, ENV
 14322 0000A02B 488B00                  	mov rax, qword [rax + 8 * 0]
 14323 0000A02E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14324 0000A031 803804                  	cmp byte [rax], T_closure
 14325 0000A034 0F85FCDE0000            	jne L_error_non_closure
 14326 0000A03A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14327 0000A03D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14328 0000A040 FF7500                  	push qword[rbp]
 14329 0000A043 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14330 0000A046 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14331 0000A04A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14332 0000A04E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14333 0000A052 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14334 0000A055 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14335 0000A058 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14336 0000A05D 4983C103                	add r9, 3 	 ;for getting to the params
 14337 0000A061 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14338 0000A065 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14339                                  .L_tc_recycle_frame_loop_0080:
 14340 0000A068 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14341 0000A06B 7410                    	je .L_tc_recycle_frame_done_0080
 14342 0000A06D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14343 0000A070 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14344 0000A073 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14345 0000A077 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14346 0000A07B EBEB                    	jmp .L_tc_recycle_frame_loop_0080
 14347                                  .L_tc_recycle_frame_done_0080:
 14348 0000A07D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14349 0000A07E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14350 0000A082 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14351                                  .L_if_end_0040:
 14352                                  .L_if_end_0041:
 14353                                  .L_if_end_0042:
 14354 0000A085 E92F030000              	jmp .L_if_end_0047
 14355                                  .L_if_else_0047:
 14356                                  	; preparing a non-tail-call
 14357 0000A08A 488B4520                	mov rax, PARAM(0)	; param a
 14358 0000A08E 50                      	push rax
 14359 0000A08F 6A01                    	push 1	; arg count
 14360 0000A091 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14361 0000A099 803805                  	cmp byte [rax], T_undefined
 14362 0000A09C 0F8410DE0000            	je L_error_fvar_undefined
 14363 0000A0A2 803804                  	cmp byte [rax], T_closure
 14364 0000A0A5 0F858BDE0000            	jne L_error_non_closure
 14365 0000A0AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14366 0000A0AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14367 0000A0B1 483D[02000000]          	cmp rax, sob_boolean_false
 14368 0000A0B7 0F849C020000            	je .L_if_else_0046
 14369                                  	; preparing a non-tail-call
 14370 0000A0BD 488B4528                	mov rax, PARAM(1)	; param b
 14371 0000A0C1 50                      	push rax
 14372 0000A0C2 6A01                    	push 1	; arg count
 14373 0000A0C4 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 14374 0000A0CC 803805                  	cmp byte [rax], T_undefined
 14375 0000A0CF 0F84DDDD0000            	je L_error_fvar_undefined
 14376 0000A0D5 803804                  	cmp byte [rax], T_closure
 14377 0000A0D8 0F8558DE0000            	jne L_error_non_closure
 14378 0000A0DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14379 0000A0E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14380 0000A0E4 483D[02000000]          	cmp rax, sob_boolean_false
 14381 0000A0EA 0F8499000000            	je .L_if_else_0045
 14382                                  	; preparing a tail-call
 14383                                  	; preparing a non-tail-call
 14384 0000A0F0 488B4528                	mov rax, PARAM(1)	; param b
 14385 0000A0F4 50                      	push rax
 14386 0000A0F5 6A01                    	push 1	; arg count
 14387 0000A0F7 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 14388 0000A0FF 803805                  	cmp byte [rax], T_undefined
 14389 0000A102 0F84AADD0000            	je L_error_fvar_undefined
 14390 0000A108 803804                  	cmp byte [rax], T_closure
 14391 0000A10B 0F8525DE0000            	jne L_error_non_closure
 14392 0000A111 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14393 0000A114 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14394 0000A117 50                      	push rax
 14395 0000A118 488B4520                	mov rax, PARAM(0)	; param a
 14396 0000A11C 50                      	push rax
 14397 0000A11D 6A02                    	push 2	; arg count
 14398 0000A11F 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14399 0000A127 803805                  	cmp byte [rax], T_undefined
 14400 0000A12A 0F8482DD0000            	je L_error_fvar_undefined
 14401 0000A130 803804                  	cmp byte [rax], T_closure
 14402 0000A133 0F85FDDD0000            	jne L_error_non_closure
 14403 0000A139 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14404 0000A13C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14405 0000A13F FF7500                  	push qword[rbp]
 14406 0000A142 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14407 0000A145 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14408 0000A149 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14409 0000A14D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14410 0000A151 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14411 0000A154 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14412 0000A157 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14413 0000A15C 4983C103                	add r9, 3 	 ;for getting to the params
 14414 0000A160 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14415 0000A164 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14416                                  .L_tc_recycle_frame_loop_0081:
 14417 0000A167 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14418 0000A16A 7410                    	je .L_tc_recycle_frame_done_0081
 14419 0000A16C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14420 0000A16F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14421 0000A172 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14422 0000A176 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14423 0000A17A EBEB                    	jmp .L_tc_recycle_frame_loop_0081
 14424                                  .L_tc_recycle_frame_done_0081:
 14425 0000A17C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14426 0000A17D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14427 0000A181 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14428 0000A184 E9CE010000              	jmp .L_if_end_0045
 14429                                  .L_if_else_0045:
 14430                                  	; preparing a non-tail-call
 14431 0000A189 488B4528                	mov rax, PARAM(1)	; param b
 14432 0000A18D 50                      	push rax
 14433 0000A18E 6A01                    	push 1	; arg count
 14434 0000A190 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 14435 0000A198 803805                  	cmp byte [rax], T_undefined
 14436 0000A19B 0F8411DD0000            	je L_error_fvar_undefined
 14437 0000A1A1 803804                  	cmp byte [rax], T_closure
 14438 0000A1A4 0F858CDD0000            	jne L_error_non_closure
 14439 0000A1AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14440 0000A1AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14441 0000A1B0 483D[02000000]          	cmp rax, sob_boolean_false
 14442 0000A1B6 0F8499000000            	je .L_if_else_0044
 14443                                  	; preparing a tail-call
 14444                                  	; preparing a non-tail-call
 14445 0000A1BC 488B4528                	mov rax, PARAM(1)	; param b
 14446 0000A1C0 50                      	push rax
 14447 0000A1C1 6A01                    	push 1	; arg count
 14448 0000A1C3 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14449 0000A1CB 803805                  	cmp byte [rax], T_undefined
 14450 0000A1CE 0F84DEDC0000            	je L_error_fvar_undefined
 14451 0000A1D4 803804                  	cmp byte [rax], T_closure
 14452 0000A1D7 0F8559DD0000            	jne L_error_non_closure
 14453 0000A1DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14454 0000A1E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14455 0000A1E3 50                      	push rax
 14456 0000A1E4 488B4520                	mov rax, PARAM(0)	; param a
 14457 0000A1E8 50                      	push rax
 14458 0000A1E9 6A02                    	push 2	; arg count
 14459 0000A1EB 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14460 0000A1F3 803805                  	cmp byte [rax], T_undefined
 14461 0000A1F6 0F84B6DC0000            	je L_error_fvar_undefined
 14462 0000A1FC 803804                  	cmp byte [rax], T_closure
 14463 0000A1FF 0F8531DD0000            	jne L_error_non_closure
 14464 0000A205 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14465 0000A208 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14466 0000A20B FF7500                  	push qword[rbp]
 14467 0000A20E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14468 0000A211 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14469 0000A215 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14470 0000A219 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14471 0000A21D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14472 0000A220 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14473 0000A223 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14474 0000A228 4983C103                	add r9, 3 	 ;for getting to the params
 14475 0000A22C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14476 0000A230 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14477                                  .L_tc_recycle_frame_loop_0082:
 14478 0000A233 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14479 0000A236 7410                    	je .L_tc_recycle_frame_done_0082
 14480 0000A238 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14481 0000A23B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14482 0000A23E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14483 0000A242 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14484 0000A246 EBEB                    	jmp .L_tc_recycle_frame_loop_0082
 14485                                  .L_tc_recycle_frame_done_0082:
 14486 0000A248 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14487 0000A249 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14488 0000A24D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14489 0000A250 E902010000              	jmp .L_if_end_0044
 14490                                  .L_if_else_0044:
 14491                                  	; preparing a non-tail-call
 14492 0000A255 488B4528                	mov rax, PARAM(1)	; param b
 14493 0000A259 50                      	push rax
 14494 0000A25A 6A01                    	push 1	; arg count
 14495 0000A25C 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 14496 0000A264 803805                  	cmp byte [rax], T_undefined
 14497 0000A267 0F8445DC0000            	je L_error_fvar_undefined
 14498 0000A26D 803804                  	cmp byte [rax], T_closure
 14499 0000A270 0F85C0DC0000            	jne L_error_non_closure
 14500 0000A276 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14501 0000A279 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14502 0000A27C 483D[02000000]          	cmp rax, sob_boolean_false
 14503 0000A282 7473                    	je .L_if_else_0043
 14504                                  	; preparing a tail-call
 14505 0000A284 488B4528                	mov rax, PARAM(1)	; param b
 14506 0000A288 50                      	push rax
 14507 0000A289 488B4520                	mov rax, PARAM(0)	; param a
 14508 0000A28D 50                      	push rax
 14509 0000A28E 6A02                    	push 2	; arg count
 14510 0000A290 488B0425[B30E0000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14511 0000A298 803805                  	cmp byte [rax], T_undefined
 14512 0000A29B 0F8411DC0000            	je L_error_fvar_undefined
 14513 0000A2A1 803804                  	cmp byte [rax], T_closure
 14514 0000A2A4 0F858CDC0000            	jne L_error_non_closure
 14515 0000A2AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14516 0000A2AD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14517 0000A2B0 FF7500                  	push qword[rbp]
 14518 0000A2B3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14519 0000A2B6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14520 0000A2BA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14521 0000A2BE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14522 0000A2C2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14523 0000A2C5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14524 0000A2C8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14525 0000A2CD 4983C103                	add r9, 3 	 ;for getting to the params
 14526 0000A2D1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14527 0000A2D5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14528                                  .L_tc_recycle_frame_loop_0083:
 14529 0000A2D8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14530 0000A2DB 7410                    	je .L_tc_recycle_frame_done_0083
 14531 0000A2DD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14532 0000A2E0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14533 0000A2E3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14534 0000A2E7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14535 0000A2EB EBEB                    	jmp .L_tc_recycle_frame_loop_0083
 14536                                  .L_tc_recycle_frame_done_0083:
 14537 0000A2ED 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14538 0000A2EE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14539 0000A2F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14540 0000A2F5 EB60                    	jmp .L_if_end_0043
 14541                                  .L_if_else_0043:
 14542                                  	; preparing a tail-call
 14543 0000A2F7 6A00                    	push 0	; arg count
 14544 0000A2F9 488B4510                	mov rax, ENV
 14545 0000A2FD 488B00                  	mov rax, qword [rax + 8 * 0]
 14546 0000A300 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14547 0000A303 803804                  	cmp byte [rax], T_closure
 14548 0000A306 0F852ADC0000            	jne L_error_non_closure
 14549 0000A30C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14550 0000A30F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14551 0000A312 FF7500                  	push qword[rbp]
 14552 0000A315 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14553 0000A318 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14554 0000A31C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14555 0000A320 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14556 0000A324 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14557 0000A327 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14558 0000A32A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14559 0000A32F 4983C103                	add r9, 3 	 ;for getting to the params
 14560 0000A333 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14561 0000A337 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14562                                  .L_tc_recycle_frame_loop_0084:
 14563 0000A33A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14564 0000A33D 7410                    	je .L_tc_recycle_frame_done_0084
 14565 0000A33F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14566 0000A342 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14567 0000A345 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14568 0000A349 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14569 0000A34D EBEB                    	jmp .L_tc_recycle_frame_loop_0084
 14570                                  .L_tc_recycle_frame_done_0084:
 14571 0000A34F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14572 0000A350 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14573 0000A354 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14574                                  .L_if_end_0043:
 14575                                  .L_if_end_0044:
 14576                                  .L_if_end_0045:
 14577 0000A357 EB60                    	jmp .L_if_end_0046
 14578                                  .L_if_else_0046:
 14579                                  	; preparing a tail-call
 14580 0000A359 6A00                    	push 0	; arg count
 14581 0000A35B 488B4510                	mov rax, ENV
 14582 0000A35F 488B00                  	mov rax, qword [rax + 8 * 0]
 14583 0000A362 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14584 0000A365 803804                  	cmp byte [rax], T_closure
 14585 0000A368 0F85C8DB0000            	jne L_error_non_closure
 14586 0000A36E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14587 0000A371 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14588 0000A374 FF7500                  	push qword[rbp]
 14589 0000A377 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14590 0000A37A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14591 0000A37E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14592 0000A382 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14593 0000A386 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14594 0000A389 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14595 0000A38C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14596 0000A391 4983C103                	add r9, 3 	 ;for getting to the params
 14597 0000A395 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14598 0000A399 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14599                                  .L_tc_recycle_frame_loop_0085:
 14600 0000A39C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14601 0000A39F 7410                    	je .L_tc_recycle_frame_done_0085
 14602 0000A3A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14603 0000A3A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14604 0000A3A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14605 0000A3AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14606 0000A3AF EBEB                    	jmp .L_tc_recycle_frame_loop_0085
 14607                                  .L_tc_recycle_frame_done_0085:
 14608 0000A3B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14609 0000A3B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14610 0000A3B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14611                                  .L_if_end_0046:
 14612                                  .L_if_end_0047:
 14613                                  .L_if_end_0048:
 14614 0000A3B9 C9                      	leave
 14615 0000A3BA C22000                  	ret AND_KILL_FRAME(2)
 14616                                  .L_lambda_simple_end_0048:	; new closure is in rax
 14617 0000A3BD 50                      	push rax
 14618 0000A3BE 6A01                    	push 1	; arg count
 14619 0000A3C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14620 0000A3C5 E815DC0000              	call malloc
 14621 0000A3CA 50                      	push rax
 14622 0000A3CB BF08000000              	mov rdi, 8 * 1	; new rib
 14623 0000A3D0 E80ADC0000              	call malloc
 14624 0000A3D5 50                      	push rax
 14625 0000A3D6 BF10000000              	mov rdi, 8 * 2	; extended env
 14626 0000A3DB E8FFDB0000              	call malloc
 14627 0000A3E0 488B7D10                	mov rdi, ENV
 14628 0000A3E4 BE00000000              	mov rsi, 0
 14629 0000A3E9 BA01000000              	mov rdx, 1
 14630                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
 14631 0000A3EE 4883FE01                	cmp rsi, 1
 14632 0000A3F2 7410                    	je .L_lambda_simple_env_end_0049
 14633 0000A3F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14634 0000A3F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14635 0000A3FC 48FFC6                  	inc rsi
 14636 0000A3FF 48FFC2                  	inc rdx
 14637 0000A402 EBEA                    	jmp .L_lambda_simple_env_loop_0049
 14638                                  .L_lambda_simple_env_end_0049:
 14639 0000A404 5B                      	pop rbx
 14640 0000A405 BE00000000              	mov rsi, 0
 14641                                  .L_lambda_simple_params_loop_0049:	; copy params
 14642 0000A40A 4883FE01                	cmp rsi, 1
 14643 0000A40E 740E                    	je .L_lambda_simple_params_end_0049
 14644 0000A410 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14645 0000A415 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14646 0000A419 48FFC6                  	inc rsi
 14647 0000A41C EBEC                    	jmp .L_lambda_simple_params_loop_0049
 14648                                  .L_lambda_simple_params_end_0049:
 14649 0000A41E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14650 0000A421 4889C3                  	mov rbx, rax
 14651 0000A424 58                      	pop rax
 14652 0000A425 C60004                  	mov byte [rax], T_closure
 14653 0000A428 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14654 0000A42C 48C74009[39A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
 14655 0000A434 E949060000              	jmp .L_lambda_simple_end_0049
 14656                                  .L_lambda_simple_code_0049:	; lambda-simple body
 14657 0000A439 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14658 0000A43F 740B                    	je .L_lambda_simple_arity_check_ok_0049
 14659 0000A441 FF742410                	push qword [rsp + 8 * 2]
 14660 0000A445 6A01                    	push 1
 14661 0000A447 E94CDB0000              	jmp L_error_incorrect_arity_simple
 14662                                  .L_lambda_simple_arity_check_ok_0049:
 14663 0000A44C C8000000                	enter 0, 0
 14664 0000A450 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14665 0000A455 E885DB0000              	call malloc
 14666 0000A45A 50                      	push rax
 14667 0000A45B BF08000000              	mov rdi, 8 * 1	; new rib
 14668 0000A460 E87ADB0000              	call malloc
 14669 0000A465 50                      	push rax
 14670 0000A466 BF18000000              	mov rdi, 8 * 3	; extended env
 14671 0000A46B E86FDB0000              	call malloc
 14672 0000A470 488B7D10                	mov rdi, ENV
 14673 0000A474 BE00000000              	mov rsi, 0
 14674 0000A479 BA01000000              	mov rdx, 1
 14675                                  .L_lambda_opt_env_loop_000d:	; ext_env[i + 1] <-- env[i]
 14676 0000A47E 4883FE02                	cmp rsi, 2
 14677 0000A482 7410                    	je .L_lambda_opt_env_end_000d
 14678 0000A484 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14679 0000A488 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14680 0000A48C 48FFC6                  	inc rsi
 14681 0000A48F 48FFC2                  	inc rdx
 14682 0000A492 EBEA                    	jmp .L_lambda_opt_env_loop_000d
 14683                                  .L_lambda_opt_env_end_000d:
 14684 0000A494 5B                      	pop rbx
 14685 0000A495 BE00000000              	mov rsi, 0
 14686                                  .L_lambda_opt_params_loop_000d:	; copy params
 14687 0000A49A 4883FE01                	cmp rsi, 1
 14688 0000A49E 740E                    	je .L_lambda_opt_params_end_000d
 14689 0000A4A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14690 0000A4A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14691 0000A4A9 48FFC6                  	inc rsi
 14692 0000A4AC EBEC                    	jmp .L_lambda_opt_params_loop_000d
 14693                                  .L_lambda_opt_params_end_000d:
 14694 0000A4AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14695 0000A4B1 4889C3                  	mov rbx, rax
 14696 0000A4B4 58                      	pop rax
 14697 0000A4B5 C60004                  	mov byte [rax], T_closure
 14698 0000A4B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14699 0000A4BC 48C74009[C9A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000d
 14700 0000A4C4 E9B5050000              	jmp .L_lambda_opt_end_000d
 14701                                  .L_lambda_opt_code_000d:	; lambda-opt body
 14702 0000A4C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14703 0000A4CF 7411                    	je .L_lambda_opt_arity_check_exact_000d
 14704 0000A4D1 0F8F96020000            	jg .L_lambda_opt_arity_check_more_000d
 14705 0000A4D7 FF742410                	push qword [rsp + 8 * 2]
 14706 0000A4DB 6A01                    	push 1
 14707 0000A4DD E9CADA0000              	jmp L_error_incorrect_arity_opt
 14708                                  .L_lambda_opt_arity_check_exact_000d:
 14709 0000A4E2 4883EC08                	sub rsp, 8
 14710 0000A4E6 488B442408              	mov rax, qword[rsp + 8 *1]
 14711 0000A4EB 48890424                	mov qword[rsp], rax  
 14712 0000A4EF 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 14713 0000A4F4 4889442408              	mov qword[rsp + 8 * 1], rax
 14714 0000A4F9 B802000000              	mov rax, 2
 14715 0000A4FE 4889442410              	mov qword[rsp + 8 *2], rax
 14716 0000A503 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 14717 0000A508 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 14718 0000A50D 48B8-                   	mov rax, sob_nil
 14718 0000A50F [0100000000000000] 
 14719 0000A517 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 14720 0000A51C C8000000                	enter 0, 0
 14721                                  	; preparing a non-tail-call
 14722 0000A520 488B4528                	mov rax, PARAM(1)	; param s
 14723 0000A524 50                      	push rax
 14724 0000A525 6A01                    	push 1	; arg count
 14725 0000A527 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 14726 0000A52F 803805                  	cmp byte [rax], T_undefined
 14727 0000A532 0F847AD90000            	je L_error_fvar_undefined
 14728 0000A538 803804                  	cmp byte [rax], T_closure
 14729 0000A53B 0F85F5D90000            	jne L_error_non_closure
 14730 0000A541 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14731 0000A544 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14732 0000A547 483D[02000000]          	cmp rax, sob_boolean_false
 14733 0000A54D 7475                    	je .L_if_else_004a
 14734                                  	; preparing a tail-call
 14735 0000A54F 488B4520                	mov rax, PARAM(0)	; param a
 14736 0000A553 50                      	push rax
 14737 0000A554 48B8-                   	mov rax, L_constants + 2270
 14737 0000A556 [DE08000000000000] 
 14738 0000A55E 50                      	push rax
 14739 0000A55F 6A02                    	push 2	; arg count
 14740 0000A561 488B4510                	mov rax, ENV
 14741 0000A565 488B00                  	mov rax, qword [rax + 8 * 0]
 14742 0000A568 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14743 0000A56B 803804                  	cmp byte [rax], T_closure
 14744 0000A56E 0F85C2D90000            	jne L_error_non_closure
 14745 0000A574 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14746 0000A577 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14747 0000A57A FF7500                  	push qword[rbp]
 14748 0000A57D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14749 0000A580 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14750 0000A584 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14751 0000A588 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14752 0000A58C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14753 0000A58F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14754 0000A592 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14755 0000A597 4983C103                	add r9, 3 	 ;for getting to the params
 14756 0000A59B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14757 0000A59F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14758                                  .L_tc_recycle_frame_loop_0089:
 14759 0000A5A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14760 0000A5A5 7410                    	je .L_tc_recycle_frame_done_0089
 14761 0000A5A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14762 0000A5AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14763 0000A5AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14764 0000A5B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14765 0000A5B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0089
 14766                                  .L_tc_recycle_frame_done_0089:
 14767 0000A5B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14768 0000A5B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14769 0000A5BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14770 0000A5BF E9A0010000              	jmp .L_if_end_004a
 14771                                  .L_if_else_004a:
 14772                                  	; preparing a tail-call
 14773                                  	; preparing a non-tail-call
 14774 0000A5C4 488B4528                	mov rax, PARAM(1)	; param s
 14775 0000A5C8 50                      	push rax
 14776 0000A5C9 48B8-                   	mov rax, L_constants + 2270
 14776 0000A5CB [DE08000000000000] 
 14777 0000A5D3 50                      	push rax
 14778 0000A5D4 488B0425[C50D0000]      	mov rax, qword [free_var_0]	; free var *
 14779 0000A5DC 803805                  	cmp byte [rax], T_undefined
 14780 0000A5DF 0F84CDD80000            	je L_error_fvar_undefined
 14781 0000A5E5 50                      	push rax
 14782 0000A5E6 6A03                    	push 3	; arg count
 14783 0000A5E8 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 14784 0000A5F0 803805                  	cmp byte [rax], T_undefined
 14785 0000A5F3 0F84B9D80000            	je L_error_fvar_undefined
 14786 0000A5F9 803804                  	cmp byte [rax], T_closure
 14787 0000A5FC 0F8534D90000            	jne L_error_non_closure
 14788 0000A602 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14789 0000A605 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14790 0000A608 50                      	push rax
 14791 0000A609 6A01                    	push 1	; arg count
 14792 0000A60B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14793 0000A610 E8CAD90000              	call malloc
 14794 0000A615 50                      	push rax
 14795 0000A616 BF10000000              	mov rdi, 8 * 2	; new rib
 14796 0000A61B E8BFD90000              	call malloc
 14797 0000A620 50                      	push rax
 14798 0000A621 BF20000000              	mov rdi, 8 * 4	; extended env
 14799 0000A626 E8B4D90000              	call malloc
 14800 0000A62B 488B7D10                	mov rdi, ENV
 14801 0000A62F BE00000000              	mov rsi, 0
 14802 0000A634 BA01000000              	mov rdx, 1
 14803                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
 14804 0000A639 4883FE03                	cmp rsi, 3
 14805 0000A63D 7410                    	je .L_lambda_simple_env_end_004b
 14806 0000A63F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14807 0000A643 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14808 0000A647 48FFC6                  	inc rsi
 14809 0000A64A 48FFC2                  	inc rdx
 14810 0000A64D EBEA                    	jmp .L_lambda_simple_env_loop_004b
 14811                                  .L_lambda_simple_env_end_004b:
 14812 0000A64F 5B                      	pop rbx
 14813 0000A650 BE00000000              	mov rsi, 0
 14814                                  .L_lambda_simple_params_loop_004b:	; copy params
 14815 0000A655 4883FE02                	cmp rsi, 2
 14816 0000A659 740E                    	je .L_lambda_simple_params_end_004b
 14817 0000A65B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14818 0000A660 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14819 0000A664 48FFC6                  	inc rsi
 14820 0000A667 EBEC                    	jmp .L_lambda_simple_params_loop_004b
 14821                                  .L_lambda_simple_params_end_004b:
 14822 0000A669 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14823 0000A66C 4889C3                  	mov rbx, rax
 14824 0000A66F 58                      	pop rax
 14825 0000A670 C60004                  	mov byte [rax], T_closure
 14826 0000A673 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14827 0000A677 48C74009[84A60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
 14828 0000A67F E98C000000              	jmp .L_lambda_simple_end_004b
 14829                                  .L_lambda_simple_code_004b:	; lambda-simple body
 14830 0000A684 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14831 0000A68A 740B                    	je .L_lambda_simple_arity_check_ok_004b
 14832 0000A68C FF742410                	push qword [rsp + 8 * 2]
 14833 0000A690 6A01                    	push 1
 14834 0000A692 E901D90000              	jmp L_error_incorrect_arity_simple
 14835                                  .L_lambda_simple_arity_check_ok_004b:
 14836 0000A697 C8000000                	enter 0, 0
 14837                                  	; preparing a tail-call
 14838 0000A69B 488B4520                	mov rax, PARAM(0)	; param b
 14839 0000A69F 50                      	push rax
 14840 0000A6A0 488B4510                	mov rax, ENV
 14841 0000A6A4 488B00                  	mov rax, qword [rax + 8 * 0]
 14842 0000A6A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 14843 0000A6AA 50                      	push rax
 14844 0000A6AB 6A02                    	push 2	; arg count
 14845 0000A6AD 488B4510                	mov rax, ENV
 14846 0000A6B1 488B4008                	mov rax, qword [rax + 8 * 1]
 14847 0000A6B5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14848 0000A6B8 803804                  	cmp byte [rax], T_closure
 14849 0000A6BB 0F8575D80000            	jne L_error_non_closure
 14850 0000A6C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14851 0000A6C4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14852 0000A6C7 FF7500                  	push qword[rbp]
 14853 0000A6CA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14854 0000A6CD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14855 0000A6D1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14856 0000A6D5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14857 0000A6D9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14858 0000A6DC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14859 0000A6DF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14860 0000A6E4 4983C103                	add r9, 3 	 ;for getting to the params
 14861 0000A6E8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14862 0000A6EC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14863                                  .L_tc_recycle_frame_loop_008a:
 14864 0000A6EF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14865 0000A6F2 7410                    	je .L_tc_recycle_frame_done_008a
 14866 0000A6F4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14867 0000A6F7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14868 0000A6FA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14869 0000A6FE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14870 0000A702 EBEB                    	jmp .L_tc_recycle_frame_loop_008a
 14871                                  .L_tc_recycle_frame_done_008a:
 14872 0000A704 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14873 0000A705 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14874 0000A709 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14875 0000A70C C9                      	leave
 14876 0000A70D C21800                  	ret AND_KILL_FRAME(1)
 14877                                  .L_lambda_simple_end_004b:	; new closure is in rax
 14878 0000A710 803804                  	cmp byte [rax], T_closure
 14879 0000A713 0F851DD80000            	jne L_error_non_closure
 14880 0000A719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14881 0000A71C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14882 0000A71F FF7500                  	push qword[rbp]
 14883 0000A722 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14884 0000A725 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14885 0000A729 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14886 0000A72D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14887 0000A731 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14888 0000A734 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14889 0000A737 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14890 0000A73C 4983C103                	add r9, 3 	 ;for getting to the params
 14891 0000A740 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14892 0000A744 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14893                                  .L_tc_recycle_frame_loop_008b:
 14894 0000A747 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14895 0000A74A 7410                    	je .L_tc_recycle_frame_done_008b
 14896 0000A74C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14897 0000A74F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14898 0000A752 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14899 0000A756 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14900 0000A75A EBEB                    	jmp .L_tc_recycle_frame_loop_008b
 14901                                  .L_tc_recycle_frame_done_008b:
 14902 0000A75C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14903 0000A75D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14904 0000A761 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14905                                  .L_if_end_004a:
 14906 0000A764 C9                      	leave
 14907 0000A765 C22000                  	ret AND_KILL_FRAME(2)
 14908 0000A768 E911030000              	jmp .L_lambda_opt_end_000d	; new closure is in rax
 14909                                  .L_lambda_opt_arity_check_more_000d:
 14910 0000A76D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 14911 0000A772 49B9-                   	mov r9, sob_nil
 14911 0000A774 [0100000000000000] 
 14912 0000A77C 4889E3                  	mov rbx, rsp 
 14913 0000A77F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 14914 0000A783 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 14915 0000A786 49C1E003                	shl r8, 3
 14916 0000A78A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 14917 0000A78D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 14918                                  .L_lambda_opt_stack_shrink_loop_000d:
 14919 0000A792 4983F801                	cmp r8, 1
 14920 0000A796 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000d
 14921 0000A798 BF11000000              	mov rdi, 1+8+8	;for pair
 14922 0000A79D E83DD80000              	call malloc	 ;to create the pair in the stack
 14923 0000A7A2 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 14924 0000A7A5 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 14925 0000A7A8 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 14926 0000A7AC 4C894809                 	mov qword[rax+1+8],r9
 14927 0000A7B0 4989C1                  	mov r9, rax	 ; for the recursion 
 14928 0000A7B3 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 14929 0000A7B6 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 14930 0000A7BA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000d
 14931                                  .L_lambda_opt_stack_shrink_loop_exit_000d:
 14932 0000A7BC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 14933 0000A7C1 4883E902                	sub rcx, 2
 14934 0000A7C5 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 14935 0000A7C9 4801CC                  	add rsp, rcx	 ;shrinking the stack
 14936 0000A7CC 4889E0                  	mov rax, rsp
 14937 0000A7CF 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 14938 0000A7D2 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 14939 0000A7D6 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 14940 0000A7D9 4883C018                	add rax, 3 * 8 	;now rax is param 0
 14941 0000A7DD 49C1E003                	shl r8, 3 	; convert to byte
 14942 0000A7E1 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 14943 0000A7E4 4C8908                  	mov qword[rax], r9	;puting the list at the top
 14944 0000A7E7 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 14945 0000A7EB 4889E3                  	mov rbx, rsp 
 14946 0000A7EE 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 14947 0000A7F1 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 14948 0000A7F7 49FFCA                  	dec r10 
 14949 0000A7FA 49C1E203                	shl r10, 3	;to get bytes
 14950 0000A7FE 4883C318                	add rbx, 3*8 	;rbx is the first param
 14951 0000A802 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 14952 0000A805 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 14953                                  
 14954 0000A808 4C8900                              	mov qword[rax], r8
 14955 0000A80B 4883E808                            	sub rax, 8
 14956 0000A80F 4883EB08                	sub rbx, 8
 14957 0000A813 4889E0                  	mov rax, rsp
 14958 0000A816 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 14959 0000A819 48C744241002000000      	mov qword [rsp+2*8], 2
 14960 0000A822 488B5808                	mov rbx, qword[rax + 8 *1]
 14961 0000A826 48895C2408              	mov qword [rsp + 1*8] ,rbx
 14962 0000A82B 488B18                  	mov rbx, qword[rax]
 14963 0000A82E 48891C24                	mov qword [rsp], rbx
 14964 0000A832 C8000000                	enter 0, 0
 14965                                  	; preparing a non-tail-call
 14966 0000A836 488B4528                	mov rax, PARAM(1)	; param s
 14967 0000A83A 50                      	push rax
 14968 0000A83B 6A01                    	push 1	; arg count
 14969 0000A83D 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 14970 0000A845 803805                  	cmp byte [rax], T_undefined
 14971 0000A848 0F8464D60000            	je L_error_fvar_undefined
 14972 0000A84E 803804                  	cmp byte [rax], T_closure
 14973 0000A851 0F85DFD60000            	jne L_error_non_closure
 14974 0000A857 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14975 0000A85A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14976 0000A85D 483D[02000000]          	cmp rax, sob_boolean_false
 14977 0000A863 7475                    	je .L_if_else_0049
 14978                                  	; preparing a tail-call
 14979 0000A865 488B4520                	mov rax, PARAM(0)	; param a
 14980 0000A869 50                      	push rax
 14981 0000A86A 48B8-                   	mov rax, L_constants + 2270
 14981 0000A86C [DE08000000000000] 
 14982 0000A874 50                      	push rax
 14983 0000A875 6A02                    	push 2	; arg count
 14984 0000A877 488B4510                	mov rax, ENV
 14985 0000A87B 488B00                  	mov rax, qword [rax + 8 * 0]
 14986 0000A87E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14987 0000A881 803804                  	cmp byte [rax], T_closure
 14988 0000A884 0F85ACD60000            	jne L_error_non_closure
 14989 0000A88A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14990 0000A88D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14991 0000A890 FF7500                  	push qword[rbp]
 14992 0000A893 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14993 0000A896 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14994 0000A89A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14995 0000A89E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14996 0000A8A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14997 0000A8A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14998 0000A8A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14999 0000A8AD 4983C103                	add r9, 3 	 ;for getting to the params
 15000 0000A8B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15001 0000A8B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15002                                  .L_tc_recycle_frame_loop_0086:
 15003 0000A8B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15004 0000A8BB 7410                    	je .L_tc_recycle_frame_done_0086
 15005 0000A8BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15006 0000A8C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15007 0000A8C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15008 0000A8C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15009 0000A8CB EBEB                    	jmp .L_tc_recycle_frame_loop_0086
 15010                                  .L_tc_recycle_frame_done_0086:
 15011 0000A8CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15012 0000A8CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15013 0000A8D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15014 0000A8D5 E9A0010000              	jmp .L_if_end_0049
 15015                                  .L_if_else_0049:
 15016                                  	; preparing a tail-call
 15017                                  	; preparing a non-tail-call
 15018 0000A8DA 488B4528                	mov rax, PARAM(1)	; param s
 15019 0000A8DE 50                      	push rax
 15020 0000A8DF 48B8-                   	mov rax, L_constants + 2270
 15020 0000A8E1 [DE08000000000000] 
 15021 0000A8E9 50                      	push rax
 15022 0000A8EA 488B0425[C50D0000]      	mov rax, qword [free_var_0]	; free var *
 15023 0000A8F2 803805                  	cmp byte [rax], T_undefined
 15024 0000A8F5 0F84B7D50000            	je L_error_fvar_undefined
 15025 0000A8FB 50                      	push rax
 15026 0000A8FC 6A03                    	push 3	; arg count
 15027 0000A8FE 488B0425[6A130000]      	mov rax, qword [free_var_85]	; free var fold-left
 15028 0000A906 803805                  	cmp byte [rax], T_undefined
 15029 0000A909 0F84A3D50000            	je L_error_fvar_undefined
 15030 0000A90F 803804                  	cmp byte [rax], T_closure
 15031 0000A912 0F851ED60000            	jne L_error_non_closure
 15032 0000A918 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15033 0000A91B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15034 0000A91E 50                      	push rax
 15035 0000A91F 6A01                    	push 1	; arg count
 15036 0000A921 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15037 0000A926 E8B4D60000              	call malloc
 15038 0000A92B 50                      	push rax
 15039 0000A92C BF10000000              	mov rdi, 8 * 2	; new rib
 15040 0000A931 E8A9D60000              	call malloc
 15041 0000A936 50                      	push rax
 15042 0000A937 BF20000000              	mov rdi, 8 * 4	; extended env
 15043 0000A93C E89ED60000              	call malloc
 15044 0000A941 488B7D10                	mov rdi, ENV
 15045 0000A945 BE00000000              	mov rsi, 0
 15046 0000A94A BA01000000              	mov rdx, 1
 15047                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
 15048 0000A94F 4883FE03                	cmp rsi, 3
 15049 0000A953 7410                    	je .L_lambda_simple_env_end_004a
 15050 0000A955 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15051 0000A959 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15052 0000A95D 48FFC6                  	inc rsi
 15053 0000A960 48FFC2                  	inc rdx
 15054 0000A963 EBEA                    	jmp .L_lambda_simple_env_loop_004a
 15055                                  .L_lambda_simple_env_end_004a:
 15056 0000A965 5B                      	pop rbx
 15057 0000A966 BE00000000              	mov rsi, 0
 15058                                  .L_lambda_simple_params_loop_004a:	; copy params
 15059 0000A96B 4883FE02                	cmp rsi, 2
 15060 0000A96F 740E                    	je .L_lambda_simple_params_end_004a
 15061 0000A971 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15062 0000A976 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15063 0000A97A 48FFC6                  	inc rsi
 15064 0000A97D EBEC                    	jmp .L_lambda_simple_params_loop_004a
 15065                                  .L_lambda_simple_params_end_004a:
 15066 0000A97F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15067 0000A982 4889C3                  	mov rbx, rax
 15068 0000A985 58                      	pop rax
 15069 0000A986 C60004                  	mov byte [rax], T_closure
 15070 0000A989 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15071 0000A98D 48C74009[9AA90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
 15072 0000A995 E98C000000              	jmp .L_lambda_simple_end_004a
 15073                                  .L_lambda_simple_code_004a:	; lambda-simple body
 15074 0000A99A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15075 0000A9A0 740B                    	je .L_lambda_simple_arity_check_ok_004a
 15076 0000A9A2 FF742410                	push qword [rsp + 8 * 2]
 15077 0000A9A6 6A01                    	push 1
 15078 0000A9A8 E9EBD50000              	jmp L_error_incorrect_arity_simple
 15079                                  .L_lambda_simple_arity_check_ok_004a:
 15080 0000A9AD C8000000                	enter 0, 0
 15081                                  	; preparing a tail-call
 15082 0000A9B1 488B4520                	mov rax, PARAM(0)	; param b
 15083 0000A9B5 50                      	push rax
 15084 0000A9B6 488B4510                	mov rax, ENV
 15085 0000A9BA 488B00                  	mov rax, qword [rax + 8 * 0]
 15086 0000A9BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 15087 0000A9C0 50                      	push rax
 15088 0000A9C1 6A02                    	push 2	; arg count
 15089 0000A9C3 488B4510                	mov rax, ENV
 15090 0000A9C7 488B4008                	mov rax, qword [rax + 8 * 1]
 15091 0000A9CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 15092 0000A9CE 803804                  	cmp byte [rax], T_closure
 15093 0000A9D1 0F855FD50000            	jne L_error_non_closure
 15094 0000A9D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15095 0000A9DA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15096 0000A9DD FF7500                  	push qword[rbp]
 15097 0000A9E0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15098 0000A9E3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15099 0000A9E7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15100 0000A9EB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15101 0000A9EF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15102 0000A9F2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15103 0000A9F5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15104 0000A9FA 4983C103                	add r9, 3 	 ;for getting to the params
 15105 0000A9FE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15106 0000AA02 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15107                                  .L_tc_recycle_frame_loop_0087:
 15108 0000AA05 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15109 0000AA08 7410                    	je .L_tc_recycle_frame_done_0087
 15110 0000AA0A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15111 0000AA0D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15112 0000AA10 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15113 0000AA14 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15114 0000AA18 EBEB                    	jmp .L_tc_recycle_frame_loop_0087
 15115                                  .L_tc_recycle_frame_done_0087:
 15116 0000AA1A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15117 0000AA1B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15118 0000AA1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15119 0000AA22 C9                      	leave
 15120 0000AA23 C21800                  	ret AND_KILL_FRAME(1)
 15121                                  .L_lambda_simple_end_004a:	; new closure is in rax
 15122 0000AA26 803804                  	cmp byte [rax], T_closure
 15123 0000AA29 0F8507D50000            	jne L_error_non_closure
 15124 0000AA2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15125 0000AA32 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15126 0000AA35 FF7500                  	push qword[rbp]
 15127 0000AA38 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15128 0000AA3B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15129 0000AA3F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15130 0000AA43 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15131 0000AA47 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15132 0000AA4A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15133 0000AA4D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15134 0000AA52 4983C103                	add r9, 3 	 ;for getting to the params
 15135 0000AA56 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15136 0000AA5A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15137                                  .L_tc_recycle_frame_loop_0088:
 15138 0000AA5D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15139 0000AA60 7410                    	je .L_tc_recycle_frame_done_0088
 15140 0000AA62 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15141 0000AA65 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15142 0000AA68 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15143 0000AA6C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15144 0000AA70 EBEB                    	jmp .L_tc_recycle_frame_loop_0088
 15145                                  .L_tc_recycle_frame_done_0088:
 15146 0000AA72 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15147 0000AA73 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15148 0000AA77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15149                                  .L_if_end_0049:
 15150 0000AA7A C9                      	leave
 15151 0000AA7B C22000                  	ret AND_KILL_FRAME(2)
 15152                                  .L_lambda_opt_end_000d:	; new closure is in rax
 15153 0000AA7E C9                      	leave
 15154 0000AA7F C21800                  	ret AND_KILL_FRAME(1)
 15155                                  .L_lambda_simple_end_0049:	; new closure is in rax
 15156 0000AA82 803804                  	cmp byte [rax], T_closure
 15157 0000AA85 0F85ABD40000            	jne L_error_non_closure
 15158 0000AA8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15159 0000AA8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15160 0000AA91 FF7500                  	push qword[rbp]
 15161 0000AA94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15162 0000AA97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15163 0000AA9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15164 0000AA9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15165 0000AAA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15166 0000AAA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15167 0000AAA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15168 0000AAAE 4983C103                	add r9, 3 	 ;for getting to the params
 15169 0000AAB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15170 0000AAB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15171                                  .L_tc_recycle_frame_loop_008c:
 15172 0000AAB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15173 0000AABC 7410                    	je .L_tc_recycle_frame_done_008c
 15174 0000AABE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15175 0000AAC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15176 0000AAC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15177 0000AAC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15178 0000AACC EBEB                    	jmp .L_tc_recycle_frame_loop_008c
 15179                                  .L_tc_recycle_frame_done_008c:
 15180 0000AACE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15181 0000AACF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15182 0000AAD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15183 0000AAD6 C9                      	leave
 15184 0000AAD7 C21800                  	ret AND_KILL_FRAME(1)
 15185                                  .L_lambda_simple_end_0047:	; new closure is in rax
 15186 0000AADA 803804                  	cmp byte [rax], T_closure
 15187 0000AADD 0F8553D40000            	jne L_error_non_closure
 15188 0000AAE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15189 0000AAE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15190 0000AAE9 48890425[F80D0000]      	mov qword [free_var_3], rax
 15191 0000AAF1 48B8-                   	mov rax, sob_void
 15191 0000AAF3 [0000000000000000] 
 15192                                  
 15193 0000AAFB 4889C7                  	mov rdi, rax
 15194 0000AAFE E831D70000              	call print_sexpr_if_not_void
 15195 0000AB03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15196 0000AB08 E8D2D40000              	call malloc
 15197 0000AB0D 50                      	push rax
 15198 0000AB0E BF00000000              	mov rdi, 8 * 0	; new rib
 15199 0000AB13 E8C7D40000              	call malloc
 15200 0000AB18 50                      	push rax
 15201 0000AB19 BF08000000              	mov rdi, 8 * 1	; extended env
 15202 0000AB1E E8BCD40000              	call malloc
 15203 0000AB23 488B7D10                	mov rdi, ENV
 15204 0000AB27 BE00000000              	mov rsi, 0
 15205 0000AB2C BA01000000              	mov rdx, 1
 15206                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
 15207 0000AB31 4883FE00                	cmp rsi, 0
 15208 0000AB35 7410                    	je .L_lambda_simple_env_end_004c
 15209 0000AB37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15210 0000AB3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15211 0000AB3F 48FFC6                  	inc rsi
 15212 0000AB42 48FFC2                  	inc rdx
 15213 0000AB45 EBEA                    	jmp .L_lambda_simple_env_loop_004c
 15214                                  .L_lambda_simple_env_end_004c:
 15215 0000AB47 5B                      	pop rbx
 15216 0000AB48 BE00000000              	mov rsi, 0
 15217                                  .L_lambda_simple_params_loop_004c:	; copy params
 15218 0000AB4D 4883FE00                	cmp rsi, 0
 15219 0000AB51 740E                    	je .L_lambda_simple_params_end_004c
 15220 0000AB53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15221 0000AB58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15222 0000AB5C 48FFC6                  	inc rsi
 15223 0000AB5F EBEC                    	jmp .L_lambda_simple_params_loop_004c
 15224                                  .L_lambda_simple_params_end_004c:
 15225 0000AB61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15226 0000AB64 4889C3                  	mov rbx, rax
 15227 0000AB67 58                      	pop rax
 15228 0000AB68 C60004                  	mov byte [rax], T_closure
 15229 0000AB6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15230 0000AB6F 48C74009[7CAB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
 15231 0000AB77 E91B010000              	jmp .L_lambda_simple_end_004c
 15232                                  .L_lambda_simple_code_004c:	; lambda-simple body
 15233 0000AB7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15234 0000AB82 740B                    	je .L_lambda_simple_arity_check_ok_004c
 15235 0000AB84 FF742410                	push qword [rsp + 8 * 2]
 15236 0000AB88 6A01                    	push 1
 15237 0000AB8A E909D40000              	jmp L_error_incorrect_arity_simple
 15238                                  .L_lambda_simple_arity_check_ok_004c:
 15239 0000AB8F C8000000                	enter 0, 0
 15240                                  	; preparing a non-tail-call
 15241 0000AB93 488B4520                	mov rax, PARAM(0)	; param n
 15242 0000AB97 50                      	push rax
 15243 0000AB98 6A01                    	push 1	; arg count
 15244 0000AB9A 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 15245 0000ABA2 803805                  	cmp byte [rax], T_undefined
 15246 0000ABA5 0F8407D30000            	je L_error_fvar_undefined
 15247 0000ABAB 803804                  	cmp byte [rax], T_closure
 15248 0000ABAE 0F8582D30000            	jne L_error_non_closure
 15249 0000ABB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15250 0000ABB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15251 0000ABBA 483D[02000000]          	cmp rax, sob_boolean_false
 15252 0000ABC0 740F                    	je .L_if_else_004b
 15253 0000ABC2 48B8-                   	mov rax, L_constants + 2270
 15253 0000ABC4 [DE08000000000000] 
 15254 0000ABCC E9C2000000              	jmp .L_if_end_004b
 15255                                  .L_if_else_004b:
 15256                                  	; preparing a tail-call
 15257                                  	; preparing a non-tail-call
 15258                                  	; preparing a non-tail-call
 15259 0000ABD1 48B8-                   	mov rax, L_constants + 2270
 15259 0000ABD3 [DE08000000000000] 
 15260 0000ABDB 50                      	push rax
 15261 0000ABDC 488B4520                	mov rax, PARAM(0)	; param n
 15262 0000ABE0 50                      	push rax
 15263 0000ABE1 6A02                    	push 2	; arg count
 15264 0000ABE3 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 15265 0000ABEB 803805                  	cmp byte [rax], T_undefined
 15266 0000ABEE 0F84BED20000            	je L_error_fvar_undefined
 15267 0000ABF4 803804                  	cmp byte [rax], T_closure
 15268 0000ABF7 0F8539D30000            	jne L_error_non_closure
 15269 0000ABFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15270 0000AC00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15271 0000AC03 50                      	push rax
 15272 0000AC04 6A01                    	push 1	; arg count
 15273 0000AC06 488B0425[59130000]      	mov rax, qword [free_var_84]	; free var fact
 15274 0000AC0E 803805                  	cmp byte [rax], T_undefined
 15275 0000AC11 0F849BD20000            	je L_error_fvar_undefined
 15276 0000AC17 803804                  	cmp byte [rax], T_closure
 15277 0000AC1A 0F8516D30000            	jne L_error_non_closure
 15278 0000AC20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15279 0000AC23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15280 0000AC26 50                      	push rax
 15281 0000AC27 488B4520                	mov rax, PARAM(0)	; param n
 15282 0000AC2B 50                      	push rax
 15283 0000AC2C 6A02                    	push 2	; arg count
 15284 0000AC2E 488B0425[C50D0000]      	mov rax, qword [free_var_0]	; free var *
 15285 0000AC36 803805                  	cmp byte [rax], T_undefined
 15286 0000AC39 0F8473D20000            	je L_error_fvar_undefined
 15287 0000AC3F 803804                  	cmp byte [rax], T_closure
 15288 0000AC42 0F85EED20000            	jne L_error_non_closure
 15289 0000AC48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15290 0000AC4B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15291 0000AC4E FF7500                  	push qword[rbp]
 15292 0000AC51 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15293 0000AC54 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15294 0000AC58 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15295 0000AC5C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15296 0000AC60 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15297 0000AC63 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15298 0000AC66 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15299 0000AC6B 4983C103                	add r9, 3 	 ;for getting to the params
 15300 0000AC6F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15301 0000AC73 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15302                                  .L_tc_recycle_frame_loop_008d:
 15303 0000AC76 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15304 0000AC79 7410                    	je .L_tc_recycle_frame_done_008d
 15305 0000AC7B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15306 0000AC7E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15307 0000AC81 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15308 0000AC85 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15309 0000AC89 EBEB                    	jmp .L_tc_recycle_frame_loop_008d
 15310                                  .L_tc_recycle_frame_done_008d:
 15311 0000AC8B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15312 0000AC8C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15313 0000AC90 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15314                                  .L_if_end_004b:
 15315 0000AC93 C9                      	leave
 15316 0000AC94 C21800                  	ret AND_KILL_FRAME(1)
 15317                                  .L_lambda_simple_end_004c:	; new closure is in rax
 15318 0000AC97 48890425[59130000]      	mov qword [free_var_84], rax
 15319 0000AC9F 48B8-                   	mov rax, sob_void
 15319 0000ACA1 [0000000000000000] 
 15320                                  
 15321 0000ACA9 4889C7                  	mov rdi, rax
 15322 0000ACAC E883D50000              	call print_sexpr_if_not_void
 15323 0000ACB1 48B8-                   	mov rax, L_constants + 0
 15323 0000ACB3 [0000000000000000] 
 15324 0000ACBB 48890425[090E0000]      	mov qword [free_var_4], rax
 15325 0000ACC3 48B8-                   	mov rax, sob_void
 15325 0000ACC5 [0000000000000000] 
 15326                                  
 15327 0000ACCD 4889C7                  	mov rdi, rax
 15328 0000ACD0 E85FD50000              	call print_sexpr_if_not_void
 15329 0000ACD5 48B8-                   	mov rax, L_constants + 0
 15329 0000ACD7 [0000000000000000] 
 15330 0000ACDF 48890425[1A0E0000]      	mov qword [free_var_5], rax
 15331 0000ACE7 48B8-                   	mov rax, sob_void
 15331 0000ACE9 [0000000000000000] 
 15332                                  
 15333 0000ACF1 4889C7                  	mov rdi, rax
 15334 0000ACF4 E83BD50000              	call print_sexpr_if_not_void
 15335 0000ACF9 48B8-                   	mov rax, L_constants + 0
 15335 0000ACFB [0000000000000000] 
 15336 0000AD03 48890425[3C0E0000]      	mov qword [free_var_7], rax
 15337 0000AD0B 48B8-                   	mov rax, sob_void
 15337 0000AD0D [0000000000000000] 
 15338                                  
 15339 0000AD15 4889C7                  	mov rdi, rax
 15340 0000AD18 E817D50000              	call print_sexpr_if_not_void
 15341 0000AD1D 48B8-                   	mov rax, L_constants + 0
 15341 0000AD1F [0000000000000000] 
 15342 0000AD27 48890425[4D0E0000]      	mov qword [free_var_8], rax
 15343 0000AD2F 48B8-                   	mov rax, sob_void
 15343 0000AD31 [0000000000000000] 
 15344                                  
 15345 0000AD39 4889C7                  	mov rdi, rax
 15346 0000AD3C E8F3D40000              	call print_sexpr_if_not_void
 15347 0000AD41 48B8-                   	mov rax, L_constants + 0
 15347 0000AD43 [0000000000000000] 
 15348 0000AD4B 48890425[2B0E0000]      	mov qword [free_var_6], rax
 15349 0000AD53 48B8-                   	mov rax, sob_void
 15349 0000AD55 [0000000000000000] 
 15350                                  
 15351 0000AD5D 4889C7                  	mov rdi, rax
 15352 0000AD60 E8CFD40000              	call print_sexpr_if_not_void
 15353                                  	; preparing a non-tail-call
 15354 0000AD65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15355 0000AD6A E870D20000              	call malloc
 15356 0000AD6F 50                      	push rax
 15357 0000AD70 BF00000000              	mov rdi, 8 * 0	; new rib
 15358 0000AD75 E865D20000              	call malloc
 15359 0000AD7A 50                      	push rax
 15360 0000AD7B BF08000000              	mov rdi, 8 * 1	; extended env
 15361 0000AD80 E85AD20000              	call malloc
 15362 0000AD85 488B7D10                	mov rdi, ENV
 15363 0000AD89 BE00000000              	mov rsi, 0
 15364 0000AD8E BA01000000              	mov rdx, 1
 15365                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
 15366 0000AD93 4883FE00                	cmp rsi, 0
 15367 0000AD97 7410                    	je .L_lambda_simple_env_end_004d
 15368 0000AD99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15369 0000AD9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15370 0000ADA1 48FFC6                  	inc rsi
 15371 0000ADA4 48FFC2                  	inc rdx
 15372 0000ADA7 EBEA                    	jmp .L_lambda_simple_env_loop_004d
 15373                                  .L_lambda_simple_env_end_004d:
 15374 0000ADA9 5B                      	pop rbx
 15375 0000ADAA BE00000000              	mov rsi, 0
 15376                                  .L_lambda_simple_params_loop_004d:	; copy params
 15377 0000ADAF 4883FE00                	cmp rsi, 0
 15378 0000ADB3 740E                    	je .L_lambda_simple_params_end_004d
 15379 0000ADB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15380 0000ADBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15381 0000ADBE 48FFC6                  	inc rsi
 15382 0000ADC1 EBEC                    	jmp .L_lambda_simple_params_loop_004d
 15383                                  .L_lambda_simple_params_end_004d:
 15384 0000ADC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15385 0000ADC6 4889C3                  	mov rbx, rax
 15386 0000ADC9 58                      	pop rax
 15387 0000ADCA C60004                  	mov byte [rax], T_closure
 15388 0000ADCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15389 0000ADD1 48C74009[DEAD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
 15390 0000ADD9 E998000000              	jmp .L_lambda_simple_end_004d
 15391                                  .L_lambda_simple_code_004d:	; lambda-simple body
 15392 0000ADDE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 15393 0000ADE4 740B                    	je .L_lambda_simple_arity_check_ok_004d
 15394 0000ADE6 FF742410                	push qword [rsp + 8 * 2]
 15395 0000ADEA 6A00                    	push 0
 15396 0000ADEC E9A7D10000              	jmp L_error_incorrect_arity_simple
 15397                                  .L_lambda_simple_arity_check_ok_004d:
 15398 0000ADF1 C8000000                	enter 0, 0
 15399                                  	; preparing a tail-call
 15400 0000ADF5 48B8-                   	mov rax, L_constants + 2408
 15400 0000ADF7 [6809000000000000] 
 15401 0000ADFF 50                      	push rax
 15402 0000AE00 48B8-                   	mov rax, L_constants + 2399
 15402 0000AE02 [5F09000000000000] 
 15403 0000AE0A 50                      	push rax
 15404 0000AE0B 6A02                    	push 2	; arg count
 15405 0000AE0D 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 15406 0000AE15 803805                  	cmp byte [rax], T_undefined
 15407 0000AE18 0F8494D00000            	je L_error_fvar_undefined
 15408 0000AE1E 803804                  	cmp byte [rax], T_closure
 15409 0000AE21 0F850FD10000            	jne L_error_non_closure
 15410 0000AE27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15411 0000AE2A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15412 0000AE2D FF7500                  	push qword[rbp]
 15413 0000AE30 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15414 0000AE33 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15415 0000AE37 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15416 0000AE3B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15417 0000AE3F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15418 0000AE42 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15419 0000AE45 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15420 0000AE4A 4983C103                	add r9, 3 	 ;for getting to the params
 15421 0000AE4E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15422 0000AE52 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15423                                  .L_tc_recycle_frame_loop_008e:
 15424 0000AE55 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15425 0000AE58 7410                    	je .L_tc_recycle_frame_done_008e
 15426 0000AE5A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15427 0000AE5D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15428 0000AE60 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15429 0000AE64 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15430 0000AE68 EBEB                    	jmp .L_tc_recycle_frame_loop_008e
 15431                                  .L_tc_recycle_frame_done_008e:
 15432 0000AE6A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15433 0000AE6B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15434 0000AE6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15435 0000AE72 C9                      	leave
 15436 0000AE73 C21000                  	ret AND_KILL_FRAME(0)
 15437                                  .L_lambda_simple_end_004d:	; new closure is in rax
 15438 0000AE76 50                      	push rax
 15439 0000AE77 6A01                    	push 1	; arg count
 15440 0000AE79 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15441 0000AE7E E85CD10000              	call malloc
 15442 0000AE83 50                      	push rax
 15443 0000AE84 BF00000000              	mov rdi, 8 * 0	; new rib
 15444 0000AE89 E851D10000              	call malloc
 15445 0000AE8E 50                      	push rax
 15446 0000AE8F BF08000000              	mov rdi, 8 * 1	; extended env
 15447 0000AE94 E846D10000              	call malloc
 15448 0000AE99 488B7D10                	mov rdi, ENV
 15449 0000AE9D BE00000000              	mov rsi, 0
 15450 0000AEA2 BA01000000              	mov rdx, 1
 15451                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
 15452 0000AEA7 4883FE00                	cmp rsi, 0
 15453 0000AEAB 7410                    	je .L_lambda_simple_env_end_004e
 15454 0000AEAD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15455 0000AEB1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15456 0000AEB5 48FFC6                  	inc rsi
 15457 0000AEB8 48FFC2                  	inc rdx
 15458 0000AEBB EBEA                    	jmp .L_lambda_simple_env_loop_004e
 15459                                  .L_lambda_simple_env_end_004e:
 15460 0000AEBD 5B                      	pop rbx
 15461 0000AEBE BE00000000              	mov rsi, 0
 15462                                  .L_lambda_simple_params_loop_004e:	; copy params
 15463 0000AEC3 4883FE00                	cmp rsi, 0
 15464 0000AEC7 740E                    	je .L_lambda_simple_params_end_004e
 15465 0000AEC9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15466 0000AECE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15467 0000AED2 48FFC6                  	inc rsi
 15468 0000AED5 EBEC                    	jmp .L_lambda_simple_params_loop_004e
 15469                                  .L_lambda_simple_params_end_004e:
 15470 0000AED7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15471 0000AEDA 4889C3                  	mov rbx, rax
 15472 0000AEDD 58                      	pop rax
 15473 0000AEDE C60004                  	mov byte [rax], T_closure
 15474 0000AEE1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15475 0000AEE5 48C74009[F2AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
 15476 0000AEED E9401B0000              	jmp .L_lambda_simple_end_004e
 15477                                  .L_lambda_simple_code_004e:	; lambda-simple body
 15478 0000AEF2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15479 0000AEF8 740B                    	je .L_lambda_simple_arity_check_ok_004e
 15480 0000AEFA FF742410                	push qword [rsp + 8 * 2]
 15481 0000AEFE 6A01                    	push 1
 15482 0000AF00 E993D00000              	jmp L_error_incorrect_arity_simple
 15483                                  .L_lambda_simple_arity_check_ok_004e:
 15484 0000AF05 C8000000                	enter 0, 0
 15485                                  	; preparing a tail-call
 15486 0000AF09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15487 0000AF0E E8CCD00000              	call malloc
 15488 0000AF13 50                      	push rax
 15489 0000AF14 BF08000000              	mov rdi, 8 * 1	; new rib
 15490 0000AF19 E8C1D00000              	call malloc
 15491 0000AF1E 50                      	push rax
 15492 0000AF1F BF10000000              	mov rdi, 8 * 2	; extended env
 15493 0000AF24 E8B6D00000              	call malloc
 15494 0000AF29 488B7D10                	mov rdi, ENV
 15495 0000AF2D BE00000000              	mov rsi, 0
 15496 0000AF32 BA01000000              	mov rdx, 1
 15497                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
 15498 0000AF37 4883FE01                	cmp rsi, 1
 15499 0000AF3B 7410                    	je .L_lambda_simple_env_end_004f
 15500 0000AF3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15501 0000AF41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15502 0000AF45 48FFC6                  	inc rsi
 15503 0000AF48 48FFC2                  	inc rdx
 15504 0000AF4B EBEA                    	jmp .L_lambda_simple_env_loop_004f
 15505                                  .L_lambda_simple_env_end_004f:
 15506 0000AF4D 5B                      	pop rbx
 15507 0000AF4E BE00000000              	mov rsi, 0
 15508                                  .L_lambda_simple_params_loop_004f:	; copy params
 15509 0000AF53 4883FE01                	cmp rsi, 1
 15510 0000AF57 740E                    	je .L_lambda_simple_params_end_004f
 15511 0000AF59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15512 0000AF5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15513 0000AF62 48FFC6                  	inc rsi
 15514 0000AF65 EBEC                    	jmp .L_lambda_simple_params_loop_004f
 15515                                  .L_lambda_simple_params_end_004f:
 15516 0000AF67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15517 0000AF6A 4889C3                  	mov rbx, rax
 15518 0000AF6D 58                      	pop rax
 15519 0000AF6E C60004                  	mov byte [rax], T_closure
 15520 0000AF71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15521 0000AF75 48C74009[82AF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
 15522 0000AF7D E94F090000              	jmp .L_lambda_simple_end_004f
 15523                                  .L_lambda_simple_code_004f:	; lambda-simple body
 15524 0000AF82 48837C241003            	cmp qword [rsp + 8 * 2], 3
 15525 0000AF88 740B                    	je .L_lambda_simple_arity_check_ok_004f
 15526 0000AF8A FF742410                	push qword [rsp + 8 * 2]
 15527 0000AF8E 6A03                    	push 3
 15528 0000AF90 E903D00000              	jmp L_error_incorrect_arity_simple
 15529                                  .L_lambda_simple_arity_check_ok_004f:
 15530 0000AF95 C8000000                	enter 0, 0
 15531 0000AF99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15532 0000AF9E E83CD00000              	call malloc
 15533 0000AFA3 50                      	push rax
 15534 0000AFA4 BF18000000              	mov rdi, 8 * 3	; new rib
 15535 0000AFA9 E831D00000              	call malloc
 15536 0000AFAE 50                      	push rax
 15537 0000AFAF BF18000000              	mov rdi, 8 * 3	; extended env
 15538 0000AFB4 E826D00000              	call malloc
 15539 0000AFB9 488B7D10                	mov rdi, ENV
 15540 0000AFBD BE00000000              	mov rsi, 0
 15541 0000AFC2 BA01000000              	mov rdx, 1
 15542                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
 15543 0000AFC7 4883FE02                	cmp rsi, 2
 15544 0000AFCB 7410                    	je .L_lambda_simple_env_end_0050
 15545 0000AFCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15546 0000AFD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15547 0000AFD5 48FFC6                  	inc rsi
 15548 0000AFD8 48FFC2                  	inc rdx
 15549 0000AFDB EBEA                    	jmp .L_lambda_simple_env_loop_0050
 15550                                  .L_lambda_simple_env_end_0050:
 15551 0000AFDD 5B                      	pop rbx
 15552 0000AFDE BE00000000              	mov rsi, 0
 15553                                  .L_lambda_simple_params_loop_0050:	; copy params
 15554 0000AFE3 4883FE03                	cmp rsi, 3
 15555 0000AFE7 740E                    	je .L_lambda_simple_params_end_0050
 15556 0000AFE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15557 0000AFEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15558 0000AFF2 48FFC6                  	inc rsi
 15559 0000AFF5 EBEC                    	jmp .L_lambda_simple_params_loop_0050
 15560                                  .L_lambda_simple_params_end_0050:
 15561 0000AFF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15562 0000AFFA 4889C3                  	mov rbx, rax
 15563 0000AFFD 58                      	pop rax
 15564 0000AFFE C60004                  	mov byte [rax], T_closure
 15565 0000B001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15566 0000B005 48C74009[12B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
 15567 0000B00D E9BB080000              	jmp .L_lambda_simple_end_0050
 15568                                  .L_lambda_simple_code_0050:	; lambda-simple body
 15569 0000B012 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15570 0000B018 740B                    	je .L_lambda_simple_arity_check_ok_0050
 15571 0000B01A FF742410                	push qword [rsp + 8 * 2]
 15572 0000B01E 6A02                    	push 2
 15573 0000B020 E973CF0000              	jmp L_error_incorrect_arity_simple
 15574                                  .L_lambda_simple_arity_check_ok_0050:
 15575 0000B025 C8000000                	enter 0, 0
 15576                                  	; preparing a non-tail-call
 15577 0000B029 488B4520                	mov rax, PARAM(0)	; param a
 15578 0000B02D 50                      	push rax
 15579 0000B02E 6A01                    	push 1	; arg count
 15580 0000B030 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15581 0000B038 803805                  	cmp byte [rax], T_undefined
 15582 0000B03B 0F8471CE0000            	je L_error_fvar_undefined
 15583 0000B041 803804                  	cmp byte [rax], T_closure
 15584 0000B044 0F85ECCE0000            	jne L_error_non_closure
 15585 0000B04A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15586 0000B04D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15587 0000B050 483D[02000000]          	cmp rax, sob_boolean_false
 15588 0000B056 0F848D020000            	je .L_if_else_0057
 15589                                  	; preparing a non-tail-call
 15590 0000B05C 488B4528                	mov rax, PARAM(1)	; param b
 15591 0000B060 50                      	push rax
 15592 0000B061 6A01                    	push 1	; arg count
 15593 0000B063 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15594 0000B06B 803805                  	cmp byte [rax], T_undefined
 15595 0000B06E 0F843ECE0000            	je L_error_fvar_undefined
 15596 0000B074 803804                  	cmp byte [rax], T_closure
 15597 0000B077 0F85B9CE0000            	jne L_error_non_closure
 15598 0000B07D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15599 0000B080 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15600 0000B083 483D[02000000]          	cmp rax, sob_boolean_false
 15601 0000B089 746F                    	je .L_if_else_004e
 15602                                  	; preparing a tail-call
 15603 0000B08B 488B4528                	mov rax, PARAM(1)	; param b
 15604 0000B08F 50                      	push rax
 15605 0000B090 488B4520                	mov rax, PARAM(0)	; param a
 15606 0000B094 50                      	push rax
 15607 0000B095 6A02                    	push 2	; arg count
 15608 0000B097 488B4510                	mov rax, ENV
 15609 0000B09B 488B00                  	mov rax, qword [rax + 8 * 0]
 15610 0000B09E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 15611 0000B0A1 803804                  	cmp byte [rax], T_closure
 15612 0000B0A4 0F858CCE0000            	jne L_error_non_closure
 15613 0000B0AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15614 0000B0AD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15615 0000B0B0 FF7500                  	push qword[rbp]
 15616 0000B0B3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15617 0000B0B6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15618 0000B0BA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15619 0000B0BE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15620 0000B0C2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15621 0000B0C5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15622 0000B0C8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15623 0000B0CD 4983C103                	add r9, 3 	 ;for getting to the params
 15624 0000B0D1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15625 0000B0D5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15626                                  .L_tc_recycle_frame_loop_008f:
 15627 0000B0D8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15628 0000B0DB 7410                    	je .L_tc_recycle_frame_done_008f
 15629 0000B0DD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15630 0000B0E0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15631 0000B0E3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15632 0000B0E7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15633 0000B0EB EBEB                    	jmp .L_tc_recycle_frame_loop_008f
 15634                                  .L_tc_recycle_frame_done_008f:
 15635 0000B0ED 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15636 0000B0EE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15637 0000B0F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15638 0000B0F5 E9EA010000              	jmp .L_if_end_004e
 15639                                  .L_if_else_004e:
 15640                                  	; preparing a non-tail-call
 15641 0000B0FA 488B4528                	mov rax, PARAM(1)	; param b
 15642 0000B0FE 50                      	push rax
 15643 0000B0FF 6A01                    	push 1	; arg count
 15644 0000B101 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15645 0000B109 803805                  	cmp byte [rax], T_undefined
 15646 0000B10C 0F84A0CD0000            	je L_error_fvar_undefined
 15647 0000B112 803804                  	cmp byte [rax], T_closure
 15648 0000B115 0F851BCE0000            	jne L_error_non_closure
 15649 0000B11B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15650 0000B11E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15651 0000B121 483D[02000000]          	cmp rax, sob_boolean_false
 15652 0000B127 0F8493000000            	je .L_if_else_004d
 15653                                  	; preparing a tail-call
 15654 0000B12D 488B4528                	mov rax, PARAM(1)	; param b
 15655 0000B131 50                      	push rax
 15656                                  	; preparing a non-tail-call
 15657 0000B132 488B4520                	mov rax, PARAM(0)	; param a
 15658 0000B136 50                      	push rax
 15659 0000B137 6A01                    	push 1	; arg count
 15660 0000B139 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15661 0000B141 803805                  	cmp byte [rax], T_undefined
 15662 0000B144 0F8468CD0000            	je L_error_fvar_undefined
 15663 0000B14A 803804                  	cmp byte [rax], T_closure
 15664 0000B14D 0F85E3CD0000            	jne L_error_non_closure
 15665 0000B153 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15666 0000B156 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15667 0000B159 50                      	push rax
 15668 0000B15A 6A02                    	push 2	; arg count
 15669 0000B15C 488B4510                	mov rax, ENV
 15670 0000B160 488B00                  	mov rax, qword [rax + 8 * 0]
 15671 0000B163 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15672 0000B167 803804                  	cmp byte [rax], T_closure
 15673 0000B16A 0F85C6CD0000            	jne L_error_non_closure
 15674 0000B170 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15675 0000B173 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15676 0000B176 FF7500                  	push qword[rbp]
 15677 0000B179 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15678 0000B17C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15679 0000B180 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15680 0000B184 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15681 0000B188 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15682 0000B18B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15683 0000B18E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15684 0000B193 4983C103                	add r9, 3 	 ;for getting to the params
 15685 0000B197 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15686 0000B19B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15687                                  .L_tc_recycle_frame_loop_0090:
 15688 0000B19E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15689 0000B1A1 7410                    	je .L_tc_recycle_frame_done_0090
 15690 0000B1A3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15691 0000B1A6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15692 0000B1A9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15693 0000B1AD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15694 0000B1B1 EBEB                    	jmp .L_tc_recycle_frame_loop_0090
 15695                                  .L_tc_recycle_frame_done_0090:
 15696 0000B1B3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15697 0000B1B4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15698 0000B1B8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15699 0000B1BB E924010000              	jmp .L_if_end_004d
 15700                                  .L_if_else_004d:
 15701                                  	; preparing a non-tail-call
 15702 0000B1C0 488B4528                	mov rax, PARAM(1)	; param b
 15703 0000B1C4 50                      	push rax
 15704 0000B1C5 6A01                    	push 1	; arg count
 15705 0000B1C7 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 15706 0000B1CF 803805                  	cmp byte [rax], T_undefined
 15707 0000B1D2 0F84DACC0000            	je L_error_fvar_undefined
 15708 0000B1D8 803804                  	cmp byte [rax], T_closure
 15709 0000B1DB 0F8555CD0000            	jne L_error_non_closure
 15710 0000B1E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15711 0000B1E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15712 0000B1E7 483D[02000000]          	cmp rax, sob_boolean_false
 15713 0000B1ED 0F8490000000            	je .L_if_else_004c
 15714                                  	; preparing a tail-call
 15715 0000B1F3 488B4528                	mov rax, PARAM(1)	; param b
 15716 0000B1F7 50                      	push rax
 15717                                  	; preparing a non-tail-call
 15718 0000B1F8 488B4520                	mov rax, PARAM(0)	; param a
 15719 0000B1FC 50                      	push rax
 15720 0000B1FD 6A01                    	push 1	; arg count
 15721 0000B1FF 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 15722 0000B207 803805                  	cmp byte [rax], T_undefined
 15723 0000B20A 0F84A2CC0000            	je L_error_fvar_undefined
 15724 0000B210 803804                  	cmp byte [rax], T_closure
 15725 0000B213 0F851DCD0000            	jne L_error_non_closure
 15726 0000B219 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15727 0000B21C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15728 0000B21F 50                      	push rax
 15729 0000B220 6A02                    	push 2	; arg count
 15730 0000B222 488B4510                	mov rax, ENV
 15731 0000B226 488B00                  	mov rax, qword [rax + 8 * 0]
 15732 0000B229 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15733 0000B22D 803804                  	cmp byte [rax], T_closure
 15734 0000B230 0F8500CD0000            	jne L_error_non_closure
 15735 0000B236 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15736 0000B239 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15737 0000B23C FF7500                  	push qword[rbp]
 15738 0000B23F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15739 0000B242 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15740 0000B246 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15741 0000B24A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15742 0000B24E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15743 0000B251 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15744 0000B254 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15745 0000B259 4983C103                	add r9, 3 	 ;for getting to the params
 15746 0000B25D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15747 0000B261 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15748                                  .L_tc_recycle_frame_loop_0091:
 15749 0000B264 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15750 0000B267 7410                    	je .L_tc_recycle_frame_done_0091
 15751 0000B269 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15752 0000B26C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15753 0000B26F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15754 0000B273 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15755 0000B277 EBEB                    	jmp .L_tc_recycle_frame_loop_0091
 15756                                  .L_tc_recycle_frame_done_0091:
 15757 0000B279 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15758 0000B27A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15759 0000B27E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15760 0000B281 EB61                    	jmp .L_if_end_004c
 15761                                  .L_if_else_004c:
 15762                                  	; preparing a tail-call
 15763 0000B283 6A00                    	push 0	; arg count
 15764 0000B285 488B4510                	mov rax, ENV
 15765 0000B289 488B4008                	mov rax, qword [rax + 8 * 1]
 15766 0000B28D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15767 0000B290 803804                  	cmp byte [rax], T_closure
 15768 0000B293 0F859DCC0000            	jne L_error_non_closure
 15769 0000B299 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15770 0000B29C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15771 0000B29F FF7500                  	push qword[rbp]
 15772 0000B2A2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15773 0000B2A5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15774 0000B2A9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15775 0000B2AD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15776 0000B2B1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15777 0000B2B4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15778 0000B2B7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15779 0000B2BC 4983C103                	add r9, 3 	 ;for getting to the params
 15780 0000B2C0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15781 0000B2C4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15782                                  .L_tc_recycle_frame_loop_0092:
 15783 0000B2C7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15784 0000B2CA 7410                    	je .L_tc_recycle_frame_done_0092
 15785 0000B2CC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15786 0000B2CF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15787 0000B2D2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15788 0000B2D6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15789 0000B2DA EBEB                    	jmp .L_tc_recycle_frame_loop_0092
 15790                                  .L_tc_recycle_frame_done_0092:
 15791 0000B2DC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15792 0000B2DD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15793 0000B2E1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15794                                  .L_if_end_004c:
 15795                                  .L_if_end_004d:
 15796                                  .L_if_end_004e:
 15797 0000B2E4 E9E0050000              	jmp .L_if_end_0057
 15798                                  .L_if_else_0057:
 15799                                  	; preparing a non-tail-call
 15800 0000B2E9 488B4520                	mov rax, PARAM(0)	; param a
 15801 0000B2ED 50                      	push rax
 15802 0000B2EE 6A01                    	push 1	; arg count
 15803 0000B2F0 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15804 0000B2F8 803805                  	cmp byte [rax], T_undefined
 15805 0000B2FB 0F84B1CB0000            	je L_error_fvar_undefined
 15806 0000B301 803804                  	cmp byte [rax], T_closure
 15807 0000B304 0F852CCC0000            	jne L_error_non_closure
 15808 0000B30A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15809 0000B30D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15810 0000B310 483D[02000000]          	cmp rax, sob_boolean_false
 15811 0000B316 0F848E020000            	je .L_if_else_0056
 15812                                  	; preparing a non-tail-call
 15813 0000B31C 488B4528                	mov rax, PARAM(1)	; param b
 15814 0000B320 50                      	push rax
 15815 0000B321 6A01                    	push 1	; arg count
 15816 0000B323 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 15817 0000B32B 803805                  	cmp byte [rax], T_undefined
 15818 0000B32E 0F847ECB0000            	je L_error_fvar_undefined
 15819 0000B334 803804                  	cmp byte [rax], T_closure
 15820 0000B337 0F85F9CB0000            	jne L_error_non_closure
 15821 0000B33D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15822 0000B340 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15823 0000B343 483D[02000000]          	cmp rax, sob_boolean_false
 15824 0000B349 0F8493000000            	je .L_if_else_0051
 15825                                  	; preparing a tail-call
 15826                                  	; preparing a non-tail-call
 15827 0000B34F 488B4528                	mov rax, PARAM(1)	; param b
 15828 0000B353 50                      	push rax
 15829 0000B354 6A01                    	push 1	; arg count
 15830 0000B356 488B0425[B20F0000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15831 0000B35E 803805                  	cmp byte [rax], T_undefined
 15832 0000B361 0F844BCB0000            	je L_error_fvar_undefined
 15833 0000B367 803804                  	cmp byte [rax], T_closure
 15834 0000B36A 0F85C6CB0000            	jne L_error_non_closure
 15835 0000B370 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15836 0000B373 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15837 0000B376 50                      	push rax
 15838 0000B377 488B4520                	mov rax, PARAM(0)	; param a
 15839 0000B37B 50                      	push rax
 15840 0000B37C 6A02                    	push 2	; arg count
 15841 0000B37E 488B4510                	mov rax, ENV
 15842 0000B382 488B00                  	mov rax, qword [rax + 8 * 0]
 15843 0000B385 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15844 0000B389 803804                  	cmp byte [rax], T_closure
 15845 0000B38C 0F85A4CB0000            	jne L_error_non_closure
 15846 0000B392 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15847 0000B395 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15848 0000B398 FF7500                  	push qword[rbp]
 15849 0000B39B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15850 0000B39E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15851 0000B3A2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15852 0000B3A6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15853 0000B3AA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15854 0000B3AD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15855 0000B3B0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15856 0000B3B5 4983C103                	add r9, 3 	 ;for getting to the params
 15857 0000B3B9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15858 0000B3BD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15859                                  .L_tc_recycle_frame_loop_0093:
 15860 0000B3C0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15861 0000B3C3 7410                    	je .L_tc_recycle_frame_done_0093
 15862 0000B3C5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15863 0000B3C8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15864 0000B3CB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15865 0000B3CF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15866 0000B3D3 EBEB                    	jmp .L_tc_recycle_frame_loop_0093
 15867                                  .L_tc_recycle_frame_done_0093:
 15868 0000B3D5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15869 0000B3D6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15870 0000B3DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15871 0000B3DD E9C3010000              	jmp .L_if_end_0051
 15872                                  .L_if_else_0051:
 15873                                  	; preparing a non-tail-call
 15874 0000B3E2 488B4528                	mov rax, PARAM(1)	; param b
 15875 0000B3E6 50                      	push rax
 15876 0000B3E7 6A01                    	push 1	; arg count
 15877 0000B3E9 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 15878 0000B3F1 803805                  	cmp byte [rax], T_undefined
 15879 0000B3F4 0F84B8CA0000            	je L_error_fvar_undefined
 15880 0000B3FA 803804                  	cmp byte [rax], T_closure
 15881 0000B3FD 0F8533CB0000            	jne L_error_non_closure
 15882 0000B403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15883 0000B406 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15884 0000B409 483D[02000000]          	cmp rax, sob_boolean_false
 15885 0000B40F 7470                    	je .L_if_else_0050
 15886                                  	; preparing a tail-call
 15887 0000B411 488B4528                	mov rax, PARAM(1)	; param b
 15888 0000B415 50                      	push rax
 15889 0000B416 488B4520                	mov rax, PARAM(0)	; param a
 15890 0000B41A 50                      	push rax
 15891 0000B41B 6A02                    	push 2	; arg count
 15892 0000B41D 488B4510                	mov rax, ENV
 15893 0000B421 488B00                  	mov rax, qword [rax + 8 * 0]
 15894 0000B424 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15895 0000B428 803804                  	cmp byte [rax], T_closure
 15896 0000B42B 0F8505CB0000            	jne L_error_non_closure
 15897 0000B431 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15898 0000B434 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15899 0000B437 FF7500                  	push qword[rbp]
 15900 0000B43A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15901 0000B43D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15902 0000B441 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15903 0000B445 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15904 0000B449 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15905 0000B44C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15906 0000B44F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15907 0000B454 4983C103                	add r9, 3 	 ;for getting to the params
 15908 0000B458 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15909 0000B45C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15910                                  .L_tc_recycle_frame_loop_0094:
 15911 0000B45F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15912 0000B462 7410                    	je .L_tc_recycle_frame_done_0094
 15913 0000B464 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15914 0000B467 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15915 0000B46A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15916 0000B46E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15917 0000B472 EBEB                    	jmp .L_tc_recycle_frame_loop_0094
 15918                                  .L_tc_recycle_frame_done_0094:
 15919 0000B474 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15920 0000B475 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15921 0000B479 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15922 0000B47C E924010000              	jmp .L_if_end_0050
 15923                                  .L_if_else_0050:
 15924                                  	; preparing a non-tail-call
 15925 0000B481 488B4528                	mov rax, PARAM(1)	; param b
 15926 0000B485 50                      	push rax
 15927 0000B486 6A01                    	push 1	; arg count
 15928 0000B488 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 15929 0000B490 803805                  	cmp byte [rax], T_undefined
 15930 0000B493 0F8419CA0000            	je L_error_fvar_undefined
 15931 0000B499 803804                  	cmp byte [rax], T_closure
 15932 0000B49C 0F8594CA0000            	jne L_error_non_closure
 15933 0000B4A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15934 0000B4A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15935 0000B4A8 483D[02000000]          	cmp rax, sob_boolean_false
 15936 0000B4AE 0F8490000000            	je .L_if_else_004f
 15937                                  	; preparing a tail-call
 15938 0000B4B4 488B4528                	mov rax, PARAM(1)	; param b
 15939 0000B4B8 50                      	push rax
 15940                                  	; preparing a non-tail-call
 15941 0000B4B9 488B4520                	mov rax, PARAM(0)	; param a
 15942 0000B4BD 50                      	push rax
 15943 0000B4BE 6A01                    	push 1	; arg count
 15944 0000B4C0 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 15945 0000B4C8 803805                  	cmp byte [rax], T_undefined
 15946 0000B4CB 0F84E1C90000            	je L_error_fvar_undefined
 15947 0000B4D1 803804                  	cmp byte [rax], T_closure
 15948 0000B4D4 0F855CCA0000            	jne L_error_non_closure
 15949 0000B4DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15950 0000B4DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 15951 0000B4E0 50                      	push rax
 15952 0000B4E1 6A02                    	push 2	; arg count
 15953 0000B4E3 488B4510                	mov rax, ENV
 15954 0000B4E7 488B00                  	mov rax, qword [rax + 8 * 0]
 15955 0000B4EA 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15956 0000B4EE 803804                  	cmp byte [rax], T_closure
 15957 0000B4F1 0F853FCA0000            	jne L_error_non_closure
 15958 0000B4F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15959 0000B4FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15960 0000B4FD FF7500                  	push qword[rbp]
 15961 0000B500 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15962 0000B503 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15963 0000B507 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15964 0000B50B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15965 0000B50F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15966 0000B512 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15967 0000B515 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15968 0000B51A 4983C103                	add r9, 3 	 ;for getting to the params
 15969 0000B51E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15970 0000B522 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15971                                  .L_tc_recycle_frame_loop_0095:
 15972 0000B525 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15973 0000B528 7410                    	je .L_tc_recycle_frame_done_0095
 15974 0000B52A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15975 0000B52D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15976 0000B530 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15977 0000B534 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15978 0000B538 EBEB                    	jmp .L_tc_recycle_frame_loop_0095
 15979                                  .L_tc_recycle_frame_done_0095:
 15980 0000B53A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15981 0000B53B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15982 0000B53F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15983 0000B542 EB61                    	jmp .L_if_end_004f
 15984                                  .L_if_else_004f:
 15985                                  	; preparing a tail-call
 15986 0000B544 6A00                    	push 0	; arg count
 15987 0000B546 488B4510                	mov rax, ENV
 15988 0000B54A 488B4008                	mov rax, qword [rax + 8 * 1]
 15989 0000B54E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15990 0000B551 803804                  	cmp byte [rax], T_closure
 15991 0000B554 0F85DCC90000            	jne L_error_non_closure
 15992 0000B55A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15993 0000B55D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15994 0000B560 FF7500                  	push qword[rbp]
 15995 0000B563 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15996 0000B566 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15997 0000B56A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15998 0000B56E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15999 0000B572 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16000 0000B575 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16001 0000B578 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16002 0000B57D 4983C103                	add r9, 3 	 ;for getting to the params
 16003 0000B581 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16004 0000B585 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16005                                  .L_tc_recycle_frame_loop_0096:
 16006 0000B588 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16007 0000B58B 7410                    	je .L_tc_recycle_frame_done_0096
 16008 0000B58D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16009 0000B590 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16010 0000B593 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16011 0000B597 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16012 0000B59B EBEB                    	jmp .L_tc_recycle_frame_loop_0096
 16013                                  .L_tc_recycle_frame_done_0096:
 16014 0000B59D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16015 0000B59E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16016 0000B5A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16017                                  .L_if_end_004f:
 16018                                  .L_if_end_0050:
 16019                                  .L_if_end_0051:
 16020 0000B5A5 E91F030000              	jmp .L_if_end_0056
 16021                                  .L_if_else_0056:
 16022                                  	; preparing a non-tail-call
 16023 0000B5AA 488B4520                	mov rax, PARAM(0)	; param a
 16024 0000B5AE 50                      	push rax
 16025 0000B5AF 6A01                    	push 1	; arg count
 16026 0000B5B1 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 16027 0000B5B9 803805                  	cmp byte [rax], T_undefined
 16028 0000B5BC 0F84F0C80000            	je L_error_fvar_undefined
 16029 0000B5C2 803804                  	cmp byte [rax], T_closure
 16030 0000B5C5 0F856BC90000            	jne L_error_non_closure
 16031 0000B5CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16032 0000B5CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16033 0000B5D1 483D[02000000]          	cmp rax, sob_boolean_false
 16034 0000B5D7 0F848B020000            	je .L_if_else_0055
 16035                                  	; preparing a non-tail-call
 16036 0000B5DD 488B4528                	mov rax, PARAM(1)	; param b
 16037 0000B5E1 50                      	push rax
 16038 0000B5E2 6A01                    	push 1	; arg count
 16039 0000B5E4 488B0425[D0130000]      	mov rax, qword [free_var_91]	; free var integer?
 16040 0000B5EC 803805                  	cmp byte [rax], T_undefined
 16041 0000B5EF 0F84BDC80000            	je L_error_fvar_undefined
 16042 0000B5F5 803804                  	cmp byte [rax], T_closure
 16043 0000B5F8 0F8538C90000            	jne L_error_non_closure
 16044 0000B5FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16045 0000B601 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16046 0000B604 483D[02000000]          	cmp rax, sob_boolean_false
 16047 0000B60A 0F8493000000            	je .L_if_else_0054
 16048                                  	; preparing a tail-call
 16049                                  	; preparing a non-tail-call
 16050 0000B610 488B4528                	mov rax, PARAM(1)	; param b
 16051 0000B614 50                      	push rax
 16052 0000B615 6A01                    	push 1	; arg count
 16053 0000B617 488B0425[BF130000]      	mov rax, qword [free_var_90]	; free var integer->real
 16054 0000B61F 803805                  	cmp byte [rax], T_undefined
 16055 0000B622 0F848AC80000            	je L_error_fvar_undefined
 16056 0000B628 803804                  	cmp byte [rax], T_closure
 16057 0000B62B 0F8505C90000            	jne L_error_non_closure
 16058 0000B631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16059 0000B634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16060 0000B637 50                      	push rax
 16061 0000B638 488B4520                	mov rax, PARAM(0)	; param a
 16062 0000B63C 50                      	push rax
 16063 0000B63D 6A02                    	push 2	; arg count
 16064 0000B63F 488B4510                	mov rax, ENV
 16065 0000B643 488B00                  	mov rax, qword [rax + 8 * 0]
 16066 0000B646 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16067 0000B64A 803804                  	cmp byte [rax], T_closure
 16068 0000B64D 0F85E3C80000            	jne L_error_non_closure
 16069 0000B653 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16070 0000B656 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16071 0000B659 FF7500                  	push qword[rbp]
 16072 0000B65C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16073 0000B65F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16074 0000B663 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16075 0000B667 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16076 0000B66B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16077 0000B66E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16078 0000B671 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16079 0000B676 4983C103                	add r9, 3 	 ;for getting to the params
 16080 0000B67A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16081 0000B67E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16082                                  .L_tc_recycle_frame_loop_0097:
 16083 0000B681 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16084 0000B684 7410                    	je .L_tc_recycle_frame_done_0097
 16085 0000B686 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16086 0000B689 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16087 0000B68C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16088 0000B690 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16089 0000B694 EBEB                    	jmp .L_tc_recycle_frame_loop_0097
 16090                                  .L_tc_recycle_frame_done_0097:
 16091 0000B696 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16092 0000B697 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16093 0000B69B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16094 0000B69E E9C3010000              	jmp .L_if_end_0054
 16095                                  .L_if_else_0054:
 16096                                  	; preparing a non-tail-call
 16097 0000B6A3 488B4528                	mov rax, PARAM(1)	; param b
 16098 0000B6A7 50                      	push rax
 16099 0000B6A8 6A01                    	push 1	; arg count
 16100 0000B6AA 488B0425[9D130000]      	mov rax, qword [free_var_88]	; free var fraction?
 16101 0000B6B2 803805                  	cmp byte [rax], T_undefined
 16102 0000B6B5 0F84F7C70000            	je L_error_fvar_undefined
 16103 0000B6BB 803804                  	cmp byte [rax], T_closure
 16104 0000B6BE 0F8572C80000            	jne L_error_non_closure
 16105 0000B6C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16106 0000B6C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16107 0000B6CA 483D[02000000]          	cmp rax, sob_boolean_false
 16108 0000B6D0 0F8493000000            	je .L_if_else_0053
 16109                                  	; preparing a tail-call
 16110                                  	; preparing a non-tail-call
 16111 0000B6D6 488B4528                	mov rax, PARAM(1)	; param b
 16112 0000B6DA 50                      	push rax
 16113 0000B6DB 6A01                    	push 1	; arg count
 16114 0000B6DD 488B0425[8C130000]      	mov rax, qword [free_var_87]	; free var fraction->real
 16115 0000B6E5 803805                  	cmp byte [rax], T_undefined
 16116 0000B6E8 0F84C4C70000            	je L_error_fvar_undefined
 16117 0000B6EE 803804                  	cmp byte [rax], T_closure
 16118 0000B6F1 0F853FC80000            	jne L_error_non_closure
 16119 0000B6F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16120 0000B6FA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16121 0000B6FD 50                      	push rax
 16122 0000B6FE 488B4520                	mov rax, PARAM(0)	; param a
 16123 0000B702 50                      	push rax
 16124 0000B703 6A02                    	push 2	; arg count
 16125 0000B705 488B4510                	mov rax, ENV
 16126 0000B709 488B00                  	mov rax, qword [rax + 8 * 0]
 16127 0000B70C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16128 0000B710 803804                  	cmp byte [rax], T_closure
 16129 0000B713 0F851DC80000            	jne L_error_non_closure
 16130 0000B719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16131 0000B71C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16132 0000B71F FF7500                  	push qword[rbp]
 16133 0000B722 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16134 0000B725 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16135 0000B729 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16136 0000B72D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16137 0000B731 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16138 0000B734 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16139 0000B737 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16140 0000B73C 4983C103                	add r9, 3 	 ;for getting to the params
 16141 0000B740 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16142 0000B744 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16143                                  .L_tc_recycle_frame_loop_0098:
 16144 0000B747 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16145 0000B74A 7410                    	je .L_tc_recycle_frame_done_0098
 16146 0000B74C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16147 0000B74F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16148 0000B752 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16149 0000B756 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16150 0000B75A EBEB                    	jmp .L_tc_recycle_frame_loop_0098
 16151                                  .L_tc_recycle_frame_done_0098:
 16152 0000B75C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16153 0000B75D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16154 0000B761 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16155 0000B764 E9FD000000              	jmp .L_if_end_0053
 16156                                  .L_if_else_0053:
 16157                                  	; preparing a non-tail-call
 16158 0000B769 488B4528                	mov rax, PARAM(1)	; param b
 16159 0000B76D 50                      	push rax
 16160 0000B76E 6A01                    	push 1	; arg count
 16161 0000B770 488B0425[79150000]      	mov rax, qword [free_var_116]	; free var real?
 16162 0000B778 803805                  	cmp byte [rax], T_undefined
 16163 0000B77B 0F8431C70000            	je L_error_fvar_undefined
 16164 0000B781 803804                  	cmp byte [rax], T_closure
 16165 0000B784 0F85ACC70000            	jne L_error_non_closure
 16166 0000B78A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16167 0000B78D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16168 0000B790 483D[02000000]          	cmp rax, sob_boolean_false
 16169 0000B796 746D                    	je .L_if_else_0052
 16170                                  	; preparing a tail-call
 16171 0000B798 488B4528                	mov rax, PARAM(1)	; param b
 16172 0000B79C 50                      	push rax
 16173 0000B79D 488B4520                	mov rax, PARAM(0)	; param a
 16174 0000B7A1 50                      	push rax
 16175 0000B7A2 6A02                    	push 2	; arg count
 16176 0000B7A4 488B4510                	mov rax, ENV
 16177 0000B7A8 488B00                  	mov rax, qword [rax + 8 * 0]
 16178 0000B7AB 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16179 0000B7AF 803804                  	cmp byte [rax], T_closure
 16180 0000B7B2 0F857EC70000            	jne L_error_non_closure
 16181 0000B7B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16182 0000B7BB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16183 0000B7BE FF7500                  	push qword[rbp]
 16184 0000B7C1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16185 0000B7C4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16186 0000B7C8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16187 0000B7CC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16188 0000B7D0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16189 0000B7D3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16190 0000B7D6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16191 0000B7DB 4983C103                	add r9, 3 	 ;for getting to the params
 16192 0000B7DF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16193 0000B7E3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16194                                  .L_tc_recycle_frame_loop_0099:
 16195 0000B7E6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16196 0000B7E9 7410                    	je .L_tc_recycle_frame_done_0099
 16197 0000B7EB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16198 0000B7EE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16199 0000B7F1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16200 0000B7F5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16201 0000B7F9 EBEB                    	jmp .L_tc_recycle_frame_loop_0099
 16202                                  .L_tc_recycle_frame_done_0099:
 16203 0000B7FB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16204 0000B7FC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16205 0000B800 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16206 0000B803 EB61                    	jmp .L_if_end_0052
 16207                                  .L_if_else_0052:
 16208                                  	; preparing a tail-call
 16209 0000B805 6A00                    	push 0	; arg count
 16210 0000B807 488B4510                	mov rax, ENV
 16211 0000B80B 488B4008                	mov rax, qword [rax + 8 * 1]
 16212 0000B80F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16213 0000B812 803804                  	cmp byte [rax], T_closure
 16214 0000B815 0F851BC70000            	jne L_error_non_closure
 16215 0000B81B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16216 0000B81E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16217 0000B821 FF7500                  	push qword[rbp]
 16218 0000B824 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16219 0000B827 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16220 0000B82B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16221 0000B82F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16222 0000B833 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16223 0000B836 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16224 0000B839 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16225 0000B83E 4983C103                	add r9, 3 	 ;for getting to the params
 16226 0000B842 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16227 0000B846 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16228                                  .L_tc_recycle_frame_loop_009a:
 16229 0000B849 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16230 0000B84C 7410                    	je .L_tc_recycle_frame_done_009a
 16231 0000B84E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16232 0000B851 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16233 0000B854 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16234 0000B858 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16235 0000B85C EBEB                    	jmp .L_tc_recycle_frame_loop_009a
 16236                                  .L_tc_recycle_frame_done_009a:
 16237 0000B85E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16238 0000B85F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16239 0000B863 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16240                                  .L_if_end_0052:
 16241                                  .L_if_end_0053:
 16242                                  .L_if_end_0054:
 16243 0000B866 EB61                    	jmp .L_if_end_0055
 16244                                  .L_if_else_0055:
 16245                                  	; preparing a tail-call
 16246 0000B868 6A00                    	push 0	; arg count
 16247 0000B86A 488B4510                	mov rax, ENV
 16248 0000B86E 488B4008                	mov rax, qword [rax + 8 * 1]
 16249 0000B872 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16250 0000B875 803804                  	cmp byte [rax], T_closure
 16251 0000B878 0F85B8C60000            	jne L_error_non_closure
 16252 0000B87E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16253 0000B881 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16254 0000B884 FF7500                  	push qword[rbp]
 16255 0000B887 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16256 0000B88A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16257 0000B88E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16258 0000B892 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16259 0000B896 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16260 0000B899 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16261 0000B89C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16262 0000B8A1 4983C103                	add r9, 3 	 ;for getting to the params
 16263 0000B8A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16264 0000B8A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16265                                  .L_tc_recycle_frame_loop_009b:
 16266 0000B8AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16267 0000B8AF 7410                    	je .L_tc_recycle_frame_done_009b
 16268 0000B8B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16269 0000B8B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16270 0000B8B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16271 0000B8BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16272 0000B8BF EBEB                    	jmp .L_tc_recycle_frame_loop_009b
 16273                                  .L_tc_recycle_frame_done_009b:
 16274 0000B8C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16275 0000B8C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16276 0000B8C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16277                                  .L_if_end_0055:
 16278                                  .L_if_end_0056:
 16279                                  .L_if_end_0057:
 16280 0000B8C9 C9                      	leave
 16281 0000B8CA C22000                  	ret AND_KILL_FRAME(2)
 16282                                  .L_lambda_simple_end_0050:	; new closure is in rax
 16283 0000B8CD C9                      	leave
 16284 0000B8CE C22800                  	ret AND_KILL_FRAME(3)
 16285                                  .L_lambda_simple_end_004f:	; new closure is in rax
 16286 0000B8D1 50                      	push rax
 16287 0000B8D2 6A01                    	push 1	; arg count
 16288 0000B8D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16289 0000B8D9 E801C70000              	call malloc
 16290 0000B8DE 50                      	push rax
 16291 0000B8DF BF08000000              	mov rdi, 8 * 1	; new rib
 16292 0000B8E4 E8F6C60000              	call malloc
 16293 0000B8E9 50                      	push rax
 16294 0000B8EA BF10000000              	mov rdi, 8 * 2	; extended env
 16295 0000B8EF E8EBC60000              	call malloc
 16296 0000B8F4 488B7D10                	mov rdi, ENV
 16297 0000B8F8 BE00000000              	mov rsi, 0
 16298 0000B8FD BA01000000              	mov rdx, 1
 16299                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
 16300 0000B902 4883FE01                	cmp rsi, 1
 16301 0000B906 7410                    	je .L_lambda_simple_env_end_0051
 16302 0000B908 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16303 0000B90C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16304 0000B910 48FFC6                  	inc rsi
 16305 0000B913 48FFC2                  	inc rdx
 16306 0000B916 EBEA                    	jmp .L_lambda_simple_env_loop_0051
 16307                                  .L_lambda_simple_env_end_0051:
 16308 0000B918 5B                      	pop rbx
 16309 0000B919 BE00000000              	mov rsi, 0
 16310                                  .L_lambda_simple_params_loop_0051:	; copy params
 16311 0000B91E 4883FE01                	cmp rsi, 1
 16312 0000B922 740E                    	je .L_lambda_simple_params_end_0051
 16313 0000B924 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16314 0000B929 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16315 0000B92D 48FFC6                  	inc rsi
 16316 0000B930 EBEC                    	jmp .L_lambda_simple_params_loop_0051
 16317                                  .L_lambda_simple_params_end_0051:
 16318 0000B932 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16319 0000B935 4889C3                  	mov rbx, rax
 16320 0000B938 58                      	pop rax
 16321 0000B939 C60004                  	mov byte [rax], T_closure
 16322 0000B93C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16323 0000B940 48C74009[4DB90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
 16324 0000B948 E98D100000              	jmp .L_lambda_simple_end_0051
 16325                                  .L_lambda_simple_code_0051:	; lambda-simple body
 16326 0000B94D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16327 0000B953 740B                    	je .L_lambda_simple_arity_check_ok_0051
 16328 0000B955 FF742410                	push qword [rsp + 8 * 2]
 16329 0000B959 6A01                    	push 1
 16330 0000B95B E938C60000              	jmp L_error_incorrect_arity_simple
 16331                                  .L_lambda_simple_arity_check_ok_0051:
 16332 0000B960 C8000000                	enter 0, 0
 16333                                  	; preparing a tail-call
 16334                                  	; preparing a non-tail-call
 16335 0000B964 488B0425[190F0000]      	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
 16336 0000B96C 803805                  	cmp byte [rax], T_undefined
 16337 0000B96F 0F843DC50000            	je L_error_fvar_undefined
 16338 0000B975 50                      	push rax
 16339 0000B976 488B0425[080F0000]      	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
 16340 0000B97E 803805                  	cmp byte [rax], T_undefined
 16341 0000B981 0F842BC50000            	je L_error_fvar_undefined
 16342 0000B987 50                      	push rax
 16343 0000B988 488B0425[2A0F0000]      	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
 16344 0000B990 803805                  	cmp byte [rax], T_undefined
 16345 0000B993 0F8419C50000            	je L_error_fvar_undefined
 16346 0000B999 50                      	push rax
 16347 0000B99A 6A03                    	push 3	; arg count
 16348 0000B99C 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 16349 0000B9A0 803804                  	cmp byte [rax], T_closure
 16350 0000B9A3 0F858DC50000            	jne L_error_non_closure
 16351 0000B9A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16352 0000B9AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16353 0000B9AF 50                      	push rax
 16354 0000B9B0 6A01                    	push 1	; arg count
 16355 0000B9B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16356 0000B9B7 E823C60000              	call malloc
 16357 0000B9BC 50                      	push rax
 16358 0000B9BD BF08000000              	mov rdi, 8 * 1	; new rib
 16359 0000B9C2 E818C60000              	call malloc
 16360 0000B9C7 50                      	push rax
 16361 0000B9C8 BF18000000              	mov rdi, 8 * 3	; extended env
 16362 0000B9CD E80DC60000              	call malloc
 16363 0000B9D2 488B7D10                	mov rdi, ENV
 16364 0000B9D6 BE00000000              	mov rsi, 0
 16365 0000B9DB BA01000000              	mov rdx, 1
 16366                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
 16367 0000B9E0 4883FE02                	cmp rsi, 2
 16368 0000B9E4 7410                    	je .L_lambda_simple_env_end_0052
 16369 0000B9E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16370 0000B9EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16371 0000B9EE 48FFC6                  	inc rsi
 16372 0000B9F1 48FFC2                  	inc rdx
 16373 0000B9F4 EBEA                    	jmp .L_lambda_simple_env_loop_0052
 16374                                  .L_lambda_simple_env_end_0052:
 16375 0000B9F6 5B                      	pop rbx
 16376 0000B9F7 BE00000000              	mov rsi, 0
 16377                                  .L_lambda_simple_params_loop_0052:	; copy params
 16378 0000B9FC 4883FE01                	cmp rsi, 1
 16379 0000BA00 740E                    	je .L_lambda_simple_params_end_0052
 16380 0000BA02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16381 0000BA07 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16382 0000BA0B 48FFC6                  	inc rsi
 16383 0000BA0E EBEC                    	jmp .L_lambda_simple_params_loop_0052
 16384                                  .L_lambda_simple_params_end_0052:
 16385 0000BA10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16386 0000BA13 4889C3                  	mov rbx, rax
 16387 0000BA16 58                      	pop rax
 16388 0000BA17 C60004                  	mov byte [rax], T_closure
 16389 0000BA1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16390 0000BA1E 48C74009[2BBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
 16391 0000BA26 E9570F0000              	jmp .L_lambda_simple_end_0052
 16392                                  .L_lambda_simple_code_0052:	; lambda-simple body
 16393 0000BA2B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16394 0000BA31 740B                    	je .L_lambda_simple_arity_check_ok_0052
 16395 0000BA33 FF742410                	push qword [rsp + 8 * 2]
 16396 0000BA37 6A01                    	push 1
 16397 0000BA39 E95AC50000              	jmp L_error_incorrect_arity_simple
 16398                                  .L_lambda_simple_arity_check_ok_0052:
 16399 0000BA3E C8000000                	enter 0, 0
 16400                                  	; preparing a tail-call
 16401                                  	; preparing a non-tail-call
 16402 0000BA42 488B0425[E60E0000]      	mov rax, qword [free_var_17]	; free var __bin-equal-rr
 16403 0000BA4A 803805                  	cmp byte [rax], T_undefined
 16404 0000BA4D 0F845FC40000            	je L_error_fvar_undefined
 16405 0000BA53 50                      	push rax
 16406 0000BA54 488B0425[D50E0000]      	mov rax, qword [free_var_16]	; free var __bin-equal-qq
 16407 0000BA5C 803805                  	cmp byte [rax], T_undefined
 16408 0000BA5F 0F844DC40000            	je L_error_fvar_undefined
 16409 0000BA65 50                      	push rax
 16410 0000BA66 488B0425[F70E0000]      	mov rax, qword [free_var_18]	; free var __bin-equal-zz
 16411 0000BA6E 803805                  	cmp byte [rax], T_undefined
 16412 0000BA71 0F843BC40000            	je L_error_fvar_undefined
 16413 0000BA77 50                      	push rax
 16414 0000BA78 6A03                    	push 3	; arg count
 16415 0000BA7A 488B4510                	mov rax, ENV
 16416 0000BA7E 488B00                  	mov rax, qword [rax + 8 * 0]
 16417 0000BA81 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 16418 0000BA84 803804                  	cmp byte [rax], T_closure
 16419 0000BA87 0F85A9C40000            	jne L_error_non_closure
 16420 0000BA8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16421 0000BA90 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16422 0000BA93 50                      	push rax
 16423 0000BA94 6A01                    	push 1	; arg count
 16424 0000BA96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16425 0000BA9B E83FC50000              	call malloc
 16426 0000BAA0 50                      	push rax
 16427 0000BAA1 BF08000000              	mov rdi, 8 * 1	; new rib
 16428 0000BAA6 E834C50000              	call malloc
 16429 0000BAAB 50                      	push rax
 16430 0000BAAC BF20000000              	mov rdi, 8 * 4	; extended env
 16431 0000BAB1 E829C50000              	call malloc
 16432 0000BAB6 488B7D10                	mov rdi, ENV
 16433 0000BABA BE00000000              	mov rsi, 0
 16434 0000BABF BA01000000              	mov rdx, 1
 16435                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
 16436 0000BAC4 4883FE03                	cmp rsi, 3
 16437 0000BAC8 7410                    	je .L_lambda_simple_env_end_0053
 16438 0000BACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16439 0000BACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16440 0000BAD2 48FFC6                  	inc rsi
 16441 0000BAD5 48FFC2                  	inc rdx
 16442 0000BAD8 EBEA                    	jmp .L_lambda_simple_env_loop_0053
 16443                                  .L_lambda_simple_env_end_0053:
 16444 0000BADA 5B                      	pop rbx
 16445 0000BADB BE00000000              	mov rsi, 0
 16446                                  .L_lambda_simple_params_loop_0053:	; copy params
 16447 0000BAE0 4883FE01                	cmp rsi, 1
 16448 0000BAE4 740E                    	je .L_lambda_simple_params_end_0053
 16449 0000BAE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16450 0000BAEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16451 0000BAEF 48FFC6                  	inc rsi
 16452 0000BAF2 EBEC                    	jmp .L_lambda_simple_params_loop_0053
 16453                                  .L_lambda_simple_params_end_0053:
 16454 0000BAF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16455 0000BAF7 4889C3                  	mov rbx, rax
 16456 0000BAFA 58                      	pop rax
 16457 0000BAFB C60004                  	mov byte [rax], T_closure
 16458 0000BAFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16459 0000BB02 48C74009[0FBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
 16460 0000BB0A E91B0E0000              	jmp .L_lambda_simple_end_0053
 16461                                  .L_lambda_simple_code_0053:	; lambda-simple body
 16462 0000BB0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16463 0000BB15 740B                    	je .L_lambda_simple_arity_check_ok_0053
 16464 0000BB17 FF742410                	push qword [rsp + 8 * 2]
 16465 0000BB1B 6A01                    	push 1
 16466 0000BB1D E976C40000              	jmp L_error_incorrect_arity_simple
 16467                                  .L_lambda_simple_arity_check_ok_0053:
 16468 0000BB22 C8000000                	enter 0, 0
 16469                                  	; preparing a tail-call
 16470 0000BB26 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16471 0000BB2B E8AFC40000              	call malloc
 16472 0000BB30 50                      	push rax
 16473 0000BB31 BF08000000              	mov rdi, 8 * 1	; new rib
 16474 0000BB36 E8A4C40000              	call malloc
 16475 0000BB3B 50                      	push rax
 16476 0000BB3C BF28000000              	mov rdi, 8 * 5	; extended env
 16477 0000BB41 E899C40000              	call malloc
 16478 0000BB46 488B7D10                	mov rdi, ENV
 16479 0000BB4A BE00000000              	mov rsi, 0
 16480 0000BB4F BA01000000              	mov rdx, 1
 16481                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
 16482 0000BB54 4883FE04                	cmp rsi, 4
 16483 0000BB58 7410                    	je .L_lambda_simple_env_end_0054
 16484 0000BB5A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16485 0000BB5E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16486 0000BB62 48FFC6                  	inc rsi
 16487 0000BB65 48FFC2                  	inc rdx
 16488 0000BB68 EBEA                    	jmp .L_lambda_simple_env_loop_0054
 16489                                  .L_lambda_simple_env_end_0054:
 16490 0000BB6A 5B                      	pop rbx
 16491 0000BB6B BE00000000              	mov rsi, 0
 16492                                  .L_lambda_simple_params_loop_0054:	; copy params
 16493 0000BB70 4883FE01                	cmp rsi, 1
 16494 0000BB74 740E                    	je .L_lambda_simple_params_end_0054
 16495 0000BB76 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16496 0000BB7B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16497 0000BB7F 48FFC6                  	inc rsi
 16498 0000BB82 EBEC                    	jmp .L_lambda_simple_params_loop_0054
 16499                                  .L_lambda_simple_params_end_0054:
 16500 0000BB84 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16501 0000BB87 4889C3                  	mov rbx, rax
 16502 0000BB8A 58                      	pop rax
 16503 0000BB8B C60004                  	mov byte [rax], T_closure
 16504 0000BB8E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16505 0000BB92 48C74009[9FBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
 16506 0000BB9A E9A9000000              	jmp .L_lambda_simple_end_0054
 16507                                  .L_lambda_simple_code_0054:	; lambda-simple body
 16508 0000BB9F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16509 0000BBA5 740B                    	je .L_lambda_simple_arity_check_ok_0054
 16510 0000BBA7 FF742410                	push qword [rsp + 8 * 2]
 16511 0000BBAB 6A02                    	push 2
 16512 0000BBAD E9E6C30000              	jmp L_error_incorrect_arity_simple
 16513                                  .L_lambda_simple_arity_check_ok_0054:
 16514 0000BBB2 C8000000                	enter 0, 0
 16515                                  	; preparing a tail-call
 16516                                  	; preparing a non-tail-call
 16517 0000BBB6 488B4528                	mov rax, PARAM(1)	; param b
 16518 0000BBBA 50                      	push rax
 16519 0000BBBB 488B4520                	mov rax, PARAM(0)	; param a
 16520 0000BBBF 50                      	push rax
 16521 0000BBC0 6A02                    	push 2	; arg count
 16522 0000BBC2 488B4510                	mov rax, ENV
 16523 0000BBC6 488B4008                	mov rax, qword [rax + 8 * 1]
 16524 0000BBCA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16525 0000BBCD 803804                  	cmp byte [rax], T_closure
 16526 0000BBD0 0F8560C30000            	jne L_error_non_closure
 16527 0000BBD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16528 0000BBD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16529 0000BBDC 50                      	push rax
 16530 0000BBDD 6A01                    	push 1	; arg count
 16531 0000BBDF 488B0425[CF140000]      	mov rax, qword [free_var_106]	; free var not
 16532 0000BBE7 803805                  	cmp byte [rax], T_undefined
 16533 0000BBEA 0F84C2C20000            	je L_error_fvar_undefined
 16534 0000BBF0 803804                  	cmp byte [rax], T_closure
 16535 0000BBF3 0F853DC30000            	jne L_error_non_closure
 16536 0000BBF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16537 0000BBFC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16538 0000BBFF FF7500                  	push qword[rbp]
 16539 0000BC02 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16540 0000BC05 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16541 0000BC09 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16542 0000BC0D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16543 0000BC11 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16544 0000BC14 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16545 0000BC17 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16546 0000BC1C 4983C103                	add r9, 3 	 ;for getting to the params
 16547 0000BC20 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16548 0000BC24 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16549                                  .L_tc_recycle_frame_loop_009c:
 16550 0000BC27 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16551 0000BC2A 7410                    	je .L_tc_recycle_frame_done_009c
 16552 0000BC2C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16553 0000BC2F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16554 0000BC32 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16555 0000BC36 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16556 0000BC3A EBEB                    	jmp .L_tc_recycle_frame_loop_009c
 16557                                  .L_tc_recycle_frame_done_009c:
 16558 0000BC3C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16559 0000BC3D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16560 0000BC41 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16561 0000BC44 C9                      	leave
 16562 0000BC45 C22000                  	ret AND_KILL_FRAME(2)
 16563                                  .L_lambda_simple_end_0054:	; new closure is in rax
 16564 0000BC48 50                      	push rax
 16565 0000BC49 6A01                    	push 1	; arg count
 16566 0000BC4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16567 0000BC50 E88AC30000              	call malloc
 16568 0000BC55 50                      	push rax
 16569 0000BC56 BF08000000              	mov rdi, 8 * 1	; new rib
 16570 0000BC5B E87FC30000              	call malloc
 16571 0000BC60 50                      	push rax
 16572 0000BC61 BF28000000              	mov rdi, 8 * 5	; extended env
 16573 0000BC66 E874C30000              	call malloc
 16574 0000BC6B 488B7D10                	mov rdi, ENV
 16575 0000BC6F BE00000000              	mov rsi, 0
 16576 0000BC74 BA01000000              	mov rdx, 1
 16577                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
 16578 0000BC79 4883FE04                	cmp rsi, 4
 16579 0000BC7D 7410                    	je .L_lambda_simple_env_end_0055
 16580 0000BC7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16581 0000BC83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16582 0000BC87 48FFC6                  	inc rsi
 16583 0000BC8A 48FFC2                  	inc rdx
 16584 0000BC8D EBEA                    	jmp .L_lambda_simple_env_loop_0055
 16585                                  .L_lambda_simple_env_end_0055:
 16586 0000BC8F 5B                      	pop rbx
 16587 0000BC90 BE00000000              	mov rsi, 0
 16588                                  .L_lambda_simple_params_loop_0055:	; copy params
 16589 0000BC95 4883FE01                	cmp rsi, 1
 16590 0000BC99 740E                    	je .L_lambda_simple_params_end_0055
 16591 0000BC9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16592 0000BCA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16593 0000BCA4 48FFC6                  	inc rsi
 16594 0000BCA7 EBEC                    	jmp .L_lambda_simple_params_loop_0055
 16595                                  .L_lambda_simple_params_end_0055:
 16596 0000BCA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16597 0000BCAC 4889C3                  	mov rbx, rax
 16598 0000BCAF 58                      	pop rax
 16599 0000BCB0 C60004                  	mov byte [rax], T_closure
 16600 0000BCB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16601 0000BCB7 48C74009[C4BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
 16602 0000BCBF E90E0C0000              	jmp .L_lambda_simple_end_0055
 16603                                  .L_lambda_simple_code_0055:	; lambda-simple body
 16604 0000BCC4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16605 0000BCCA 740B                    	je .L_lambda_simple_arity_check_ok_0055
 16606 0000BCCC FF742410                	push qword [rsp + 8 * 2]
 16607 0000BCD0 6A01                    	push 1
 16608 0000BCD2 E9C1C20000              	jmp L_error_incorrect_arity_simple
 16609                                  .L_lambda_simple_arity_check_ok_0055:
 16610 0000BCD7 C8000000                	enter 0, 0
 16611                                  	; preparing a tail-call
 16612 0000BCDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16613 0000BCE0 E8FAC20000              	call malloc
 16614 0000BCE5 50                      	push rax
 16615 0000BCE6 BF08000000              	mov rdi, 8 * 1	; new rib
 16616 0000BCEB E8EFC20000              	call malloc
 16617 0000BCF0 50                      	push rax
 16618 0000BCF1 BF30000000              	mov rdi, 8 * 6	; extended env
 16619 0000BCF6 E8E4C20000              	call malloc
 16620 0000BCFB 488B7D10                	mov rdi, ENV
 16621 0000BCFF BE00000000              	mov rsi, 0
 16622 0000BD04 BA01000000              	mov rdx, 1
 16623                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
 16624 0000BD09 4883FE05                	cmp rsi, 5
 16625 0000BD0D 7410                    	je .L_lambda_simple_env_end_0056
 16626 0000BD0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16627 0000BD13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16628 0000BD17 48FFC6                  	inc rsi
 16629 0000BD1A 48FFC2                  	inc rdx
 16630 0000BD1D EBEA                    	jmp .L_lambda_simple_env_loop_0056
 16631                                  .L_lambda_simple_env_end_0056:
 16632 0000BD1F 5B                      	pop rbx
 16633 0000BD20 BE00000000              	mov rsi, 0
 16634                                  .L_lambda_simple_params_loop_0056:	; copy params
 16635 0000BD25 4883FE01                	cmp rsi, 1
 16636 0000BD29 740E                    	je .L_lambda_simple_params_end_0056
 16637 0000BD2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16638 0000BD30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16639 0000BD34 48FFC6                  	inc rsi
 16640 0000BD37 EBEC                    	jmp .L_lambda_simple_params_loop_0056
 16641                                  .L_lambda_simple_params_end_0056:
 16642 0000BD39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16643 0000BD3C 4889C3                  	mov rbx, rax
 16644 0000BD3F 58                      	pop rax
 16645 0000BD40 C60004                  	mov byte [rax], T_closure
 16646 0000BD43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16647 0000BD47 48C74009[54BD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
 16648 0000BD4F E986000000              	jmp .L_lambda_simple_end_0056
 16649                                  .L_lambda_simple_code_0056:	; lambda-simple body
 16650 0000BD54 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16651 0000BD5A 740B                    	je .L_lambda_simple_arity_check_ok_0056
 16652 0000BD5C FF742410                	push qword [rsp + 8 * 2]
 16653 0000BD60 6A02                    	push 2
 16654 0000BD62 E931C20000              	jmp L_error_incorrect_arity_simple
 16655                                  .L_lambda_simple_arity_check_ok_0056:
 16656 0000BD67 C8000000                	enter 0, 0
 16657                                  	; preparing a tail-call
 16658 0000BD6B 488B4520                	mov rax, PARAM(0)	; param a
 16659 0000BD6F 50                      	push rax
 16660 0000BD70 488B4528                	mov rax, PARAM(1)	; param b
 16661 0000BD74 50                      	push rax
 16662 0000BD75 6A02                    	push 2	; arg count
 16663 0000BD77 488B4510                	mov rax, ENV
 16664 0000BD7B 488B4010                	mov rax, qword [rax + 8 * 2]
 16665 0000BD7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16666 0000BD82 803804                  	cmp byte [rax], T_closure
 16667 0000BD85 0F85ABC10000            	jne L_error_non_closure
 16668 0000BD8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16669 0000BD8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16670 0000BD91 FF7500                  	push qword[rbp]
 16671 0000BD94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16672 0000BD97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16673 0000BD9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16674 0000BD9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16675 0000BDA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16676 0000BDA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16677 0000BDA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16678 0000BDAE 4983C103                	add r9, 3 	 ;for getting to the params
 16679 0000BDB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16680 0000BDB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16681                                  .L_tc_recycle_frame_loop_009d:
 16682 0000BDB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16683 0000BDBC 7410                    	je .L_tc_recycle_frame_done_009d
 16684 0000BDBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16685 0000BDC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16686 0000BDC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16687 0000BDC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16688 0000BDCC EBEB                    	jmp .L_tc_recycle_frame_loop_009d
 16689                                  .L_tc_recycle_frame_done_009d:
 16690 0000BDCE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16691 0000BDCF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16692 0000BDD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16693 0000BDD6 C9                      	leave
 16694 0000BDD7 C22000                  	ret AND_KILL_FRAME(2)
 16695                                  .L_lambda_simple_end_0056:	; new closure is in rax
 16696 0000BDDA 50                      	push rax
 16697 0000BDDB 6A01                    	push 1	; arg count
 16698 0000BDDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16699 0000BDE2 E8F8C10000              	call malloc
 16700 0000BDE7 50                      	push rax
 16701 0000BDE8 BF08000000              	mov rdi, 8 * 1	; new rib
 16702 0000BDED E8EDC10000              	call malloc
 16703 0000BDF2 50                      	push rax
 16704 0000BDF3 BF30000000              	mov rdi, 8 * 6	; extended env
 16705 0000BDF8 E8E2C10000              	call malloc
 16706 0000BDFD 488B7D10                	mov rdi, ENV
 16707 0000BE01 BE00000000              	mov rsi, 0
 16708 0000BE06 BA01000000              	mov rdx, 1
 16709                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
 16710 0000BE0B 4883FE05                	cmp rsi, 5
 16711 0000BE0F 7410                    	je .L_lambda_simple_env_end_0057
 16712 0000BE11 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16713 0000BE15 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16714 0000BE19 48FFC6                  	inc rsi
 16715 0000BE1C 48FFC2                  	inc rdx
 16716 0000BE1F EBEA                    	jmp .L_lambda_simple_env_loop_0057
 16717                                  .L_lambda_simple_env_end_0057:
 16718 0000BE21 5B                      	pop rbx
 16719 0000BE22 BE00000000              	mov rsi, 0
 16720                                  .L_lambda_simple_params_loop_0057:	; copy params
 16721 0000BE27 4883FE01                	cmp rsi, 1
 16722 0000BE2B 740E                    	je .L_lambda_simple_params_end_0057
 16723 0000BE2D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16724 0000BE32 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16725 0000BE36 48FFC6                  	inc rsi
 16726 0000BE39 EBEC                    	jmp .L_lambda_simple_params_loop_0057
 16727                                  .L_lambda_simple_params_end_0057:
 16728 0000BE3B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16729 0000BE3E 4889C3                  	mov rbx, rax
 16730 0000BE41 58                      	pop rax
 16731 0000BE42 C60004                  	mov byte [rax], T_closure
 16732 0000BE45 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16733 0000BE49 48C74009[56BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
 16734 0000BE51 E9240A0000              	jmp .L_lambda_simple_end_0057
 16735                                  .L_lambda_simple_code_0057:	; lambda-simple body
 16736 0000BE56 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16737 0000BE5C 740B                    	je .L_lambda_simple_arity_check_ok_0057
 16738 0000BE5E FF742410                	push qword [rsp + 8 * 2]
 16739 0000BE62 6A01                    	push 1
 16740 0000BE64 E92FC10000              	jmp L_error_incorrect_arity_simple
 16741                                  .L_lambda_simple_arity_check_ok_0057:
 16742 0000BE69 C8000000                	enter 0, 0
 16743                                  	; preparing a tail-call
 16744 0000BE6D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16745 0000BE72 E868C10000              	call malloc
 16746 0000BE77 50                      	push rax
 16747 0000BE78 BF08000000              	mov rdi, 8 * 1	; new rib
 16748 0000BE7D E85DC10000              	call malloc
 16749 0000BE82 50                      	push rax
 16750 0000BE83 BF38000000              	mov rdi, 8 * 7	; extended env
 16751 0000BE88 E852C10000              	call malloc
 16752 0000BE8D 488B7D10                	mov rdi, ENV
 16753 0000BE91 BE00000000              	mov rsi, 0
 16754 0000BE96 BA01000000              	mov rdx, 1
 16755                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
 16756 0000BE9B 4883FE06                	cmp rsi, 6
 16757 0000BE9F 7410                    	je .L_lambda_simple_env_end_0058
 16758 0000BEA1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16759 0000BEA5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16760 0000BEA9 48FFC6                  	inc rsi
 16761 0000BEAC 48FFC2                  	inc rdx
 16762 0000BEAF EBEA                    	jmp .L_lambda_simple_env_loop_0058
 16763                                  .L_lambda_simple_env_end_0058:
 16764 0000BEB1 5B                      	pop rbx
 16765 0000BEB2 BE00000000              	mov rsi, 0
 16766                                  .L_lambda_simple_params_loop_0058:	; copy params
 16767 0000BEB7 4883FE01                	cmp rsi, 1
 16768 0000BEBB 740E                    	je .L_lambda_simple_params_end_0058
 16769 0000BEBD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16770 0000BEC2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16771 0000BEC6 48FFC6                  	inc rsi
 16772 0000BEC9 EBEC                    	jmp .L_lambda_simple_params_loop_0058
 16773                                  .L_lambda_simple_params_end_0058:
 16774 0000BECB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16775 0000BECE 4889C3                  	mov rbx, rax
 16776 0000BED1 58                      	pop rax
 16777 0000BED2 C60004                  	mov byte [rax], T_closure
 16778 0000BED5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16779 0000BED9 48C74009[E6BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
 16780 0000BEE1 E9A8000000              	jmp .L_lambda_simple_end_0058
 16781                                  .L_lambda_simple_code_0058:	; lambda-simple body
 16782 0000BEE6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16783 0000BEEC 740B                    	je .L_lambda_simple_arity_check_ok_0058
 16784 0000BEEE FF742410                	push qword [rsp + 8 * 2]
 16785 0000BEF2 6A02                    	push 2
 16786 0000BEF4 E99FC00000              	jmp L_error_incorrect_arity_simple
 16787                                  .L_lambda_simple_arity_check_ok_0058:
 16788 0000BEF9 C8000000                	enter 0, 0
 16789                                  	; preparing a tail-call
 16790                                  	; preparing a non-tail-call
 16791 0000BEFD 488B4528                	mov rax, PARAM(1)	; param b
 16792 0000BF01 50                      	push rax
 16793 0000BF02 488B4520                	mov rax, PARAM(0)	; param a
 16794 0000BF06 50                      	push rax
 16795 0000BF07 6A02                    	push 2	; arg count
 16796 0000BF09 488B4510                	mov rax, ENV
 16797 0000BF0D 488B00                  	mov rax, qword [rax + 8 * 0]
 16798 0000BF10 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 16799 0000BF13 803804                  	cmp byte [rax], T_closure
 16800 0000BF16 0F851AC00000            	jne L_error_non_closure
 16801 0000BF1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16802 0000BF1F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16803 0000BF22 50                      	push rax
 16804 0000BF23 6A01                    	push 1	; arg count
 16805 0000BF25 488B0425[CF140000]      	mov rax, qword [free_var_106]	; free var not
 16806 0000BF2D 803805                  	cmp byte [rax], T_undefined
 16807 0000BF30 0F847CBF0000            	je L_error_fvar_undefined
 16808 0000BF36 803804                  	cmp byte [rax], T_closure
 16809 0000BF39 0F85F7BF0000            	jne L_error_non_closure
 16810 0000BF3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16811 0000BF42 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16812 0000BF45 FF7500                  	push qword[rbp]
 16813 0000BF48 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16814 0000BF4B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16815 0000BF4F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16816 0000BF53 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16817 0000BF57 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16818 0000BF5A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16819 0000BF5D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16820 0000BF62 4983C103                	add r9, 3 	 ;for getting to the params
 16821 0000BF66 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16822 0000BF6A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16823                                  .L_tc_recycle_frame_loop_009e:
 16824 0000BF6D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16825 0000BF70 7410                    	je .L_tc_recycle_frame_done_009e
 16826 0000BF72 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16827 0000BF75 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16828 0000BF78 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16829 0000BF7C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16830 0000BF80 EBEB                    	jmp .L_tc_recycle_frame_loop_009e
 16831                                  .L_tc_recycle_frame_done_009e:
 16832 0000BF82 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16833 0000BF83 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16834 0000BF87 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16835 0000BF8A C9                      	leave
 16836 0000BF8B C22000                  	ret AND_KILL_FRAME(2)
 16837                                  .L_lambda_simple_end_0058:	; new closure is in rax
 16838 0000BF8E 50                      	push rax
 16839 0000BF8F 6A01                    	push 1	; arg count
 16840 0000BF91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16841 0000BF96 E844C00000              	call malloc
 16842 0000BF9B 50                      	push rax
 16843 0000BF9C BF08000000              	mov rdi, 8 * 1	; new rib
 16844 0000BFA1 E839C00000              	call malloc
 16845 0000BFA6 50                      	push rax
 16846 0000BFA7 BF38000000              	mov rdi, 8 * 7	; extended env
 16847 0000BFAC E82EC00000              	call malloc
 16848 0000BFB1 488B7D10                	mov rdi, ENV
 16849 0000BFB5 BE00000000              	mov rsi, 0
 16850 0000BFBA BA01000000              	mov rdx, 1
 16851                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
 16852 0000BFBF 4883FE06                	cmp rsi, 6
 16853 0000BFC3 7410                    	je .L_lambda_simple_env_end_0059
 16854 0000BFC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16855 0000BFC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16856 0000BFCD 48FFC6                  	inc rsi
 16857 0000BFD0 48FFC2                  	inc rdx
 16858 0000BFD3 EBEA                    	jmp .L_lambda_simple_env_loop_0059
 16859                                  .L_lambda_simple_env_end_0059:
 16860 0000BFD5 5B                      	pop rbx
 16861 0000BFD6 BE00000000              	mov rsi, 0
 16862                                  .L_lambda_simple_params_loop_0059:	; copy params
 16863 0000BFDB 4883FE01                	cmp rsi, 1
 16864 0000BFDF 740E                    	je .L_lambda_simple_params_end_0059
 16865 0000BFE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16866 0000BFE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16867 0000BFEA 48FFC6                  	inc rsi
 16868 0000BFED EBEC                    	jmp .L_lambda_simple_params_loop_0059
 16869                                  .L_lambda_simple_params_end_0059:
 16870 0000BFEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16871 0000BFF2 4889C3                  	mov rbx, rax
 16872 0000BFF5 58                      	pop rax
 16873 0000BFF6 C60004                  	mov byte [rax], T_closure
 16874 0000BFF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16875 0000BFFD 48C74009[0AC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
 16876 0000C005 E918080000              	jmp .L_lambda_simple_end_0059
 16877                                  .L_lambda_simple_code_0059:	; lambda-simple body
 16878 0000C00A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16879 0000C010 740B                    	je .L_lambda_simple_arity_check_ok_0059
 16880 0000C012 FF742410                	push qword [rsp + 8 * 2]
 16881 0000C016 6A01                    	push 1
 16882 0000C018 E97BBF0000              	jmp L_error_incorrect_arity_simple
 16883                                  .L_lambda_simple_arity_check_ok_0059:
 16884 0000C01D C8000000                	enter 0, 0
 16885                                  	; preparing a tail-call
 16886 0000C021 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16887 0000C026 E8B4BF0000              	call malloc
 16888 0000C02B 50                      	push rax
 16889 0000C02C BF08000000              	mov rdi, 8 * 1	; new rib
 16890 0000C031 E8A9BF0000              	call malloc
 16891 0000C036 50                      	push rax
 16892 0000C037 BF40000000              	mov rdi, 8 * 8	; extended env
 16893 0000C03C E89EBF0000              	call malloc
 16894 0000C041 488B7D10                	mov rdi, ENV
 16895 0000C045 BE00000000              	mov rsi, 0
 16896 0000C04A BA01000000              	mov rdx, 1
 16897                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
 16898 0000C04F 4883FE07                	cmp rsi, 7
 16899 0000C053 7410                    	je .L_lambda_simple_env_end_005a
 16900 0000C055 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16901 0000C059 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16902 0000C05D 48FFC6                  	inc rsi
 16903 0000C060 48FFC2                  	inc rdx
 16904 0000C063 EBEA                    	jmp .L_lambda_simple_env_loop_005a
 16905                                  .L_lambda_simple_env_end_005a:
 16906 0000C065 5B                      	pop rbx
 16907 0000C066 BE00000000              	mov rsi, 0
 16908                                  .L_lambda_simple_params_loop_005a:	; copy params
 16909 0000C06B 4883FE01                	cmp rsi, 1
 16910 0000C06F 740E                    	je .L_lambda_simple_params_end_005a
 16911 0000C071 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16912 0000C076 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16913 0000C07A 48FFC6                  	inc rsi
 16914 0000C07D EBEC                    	jmp .L_lambda_simple_params_loop_005a
 16915                                  .L_lambda_simple_params_end_005a:
 16916 0000C07F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16917 0000C082 4889C3                  	mov rbx, rax
 16918 0000C085 58                      	pop rax
 16919 0000C086 C60004                  	mov byte [rax], T_closure
 16920 0000C089 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16921 0000C08D 48C74009[9AC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
 16922 0000C095 E99B050000              	jmp .L_lambda_simple_end_005a
 16923                                  .L_lambda_simple_code_005a:	; lambda-simple body
 16924 0000C09A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16925 0000C0A0 740B                    	je .L_lambda_simple_arity_check_ok_005a
 16926 0000C0A2 FF742410                	push qword [rsp + 8 * 2]
 16927 0000C0A6 6A01                    	push 1
 16928 0000C0A8 E9EBBE0000              	jmp L_error_incorrect_arity_simple
 16929                                  .L_lambda_simple_arity_check_ok_005a:
 16930 0000C0AD C8000000                	enter 0, 0
 16931                                  	; preparing a tail-call
 16932 0000C0B1 48B8-                   	mov rax, L_constants + 1993
 16932 0000C0B3 [C907000000000000] 
 16933 0000C0BB 50                      	push rax
 16934 0000C0BC 6A01                    	push 1	; arg count
 16935 0000C0BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16936 0000C0C3 E817BF0000              	call malloc
 16937 0000C0C8 50                      	push rax
 16938 0000C0C9 BF08000000              	mov rdi, 8 * 1	; new rib
 16939 0000C0CE E80CBF0000              	call malloc
 16940 0000C0D3 50                      	push rax
 16941 0000C0D4 BF48000000              	mov rdi, 8 * 9	; extended env
 16942 0000C0D9 E801BF0000              	call malloc
 16943 0000C0DE 488B7D10                	mov rdi, ENV
 16944 0000C0E2 BE00000000              	mov rsi, 0
 16945 0000C0E7 BA01000000              	mov rdx, 1
 16946                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
 16947 0000C0EC 4883FE08                	cmp rsi, 8
 16948 0000C0F0 7410                    	je .L_lambda_simple_env_end_005b
 16949 0000C0F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16950 0000C0F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16951 0000C0FA 48FFC6                  	inc rsi
 16952 0000C0FD 48FFC2                  	inc rdx
 16953 0000C100 EBEA                    	jmp .L_lambda_simple_env_loop_005b
 16954                                  .L_lambda_simple_env_end_005b:
 16955 0000C102 5B                      	pop rbx
 16956 0000C103 BE00000000              	mov rsi, 0
 16957                                  .L_lambda_simple_params_loop_005b:	; copy params
 16958 0000C108 4883FE01                	cmp rsi, 1
 16959 0000C10C 740E                    	je .L_lambda_simple_params_end_005b
 16960 0000C10E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16961 0000C113 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16962 0000C117 48FFC6                  	inc rsi
 16963 0000C11A EBEC                    	jmp .L_lambda_simple_params_loop_005b
 16964                                  .L_lambda_simple_params_end_005b:
 16965 0000C11C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16966 0000C11F 4889C3                  	mov rbx, rax
 16967 0000C122 58                      	pop rax
 16968 0000C123 C60004                  	mov byte [rax], T_closure
 16969 0000C126 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16970 0000C12A 48C74009[37C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
 16971 0000C132 E9A6040000              	jmp .L_lambda_simple_end_005b
 16972                                  .L_lambda_simple_code_005b:	; lambda-simple body
 16973 0000C137 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16974 0000C13D 740B                    	je .L_lambda_simple_arity_check_ok_005b
 16975 0000C13F FF742410                	push qword [rsp + 8 * 2]
 16976 0000C143 6A01                    	push 1
 16977 0000C145 E94EBE0000              	jmp L_error_incorrect_arity_simple
 16978                                  .L_lambda_simple_arity_check_ok_005b:
 16979 0000C14A C8000000                	enter 0, 0
 16980 0000C14E BF08000000              	mov rdi, 8*1
 16981 0000C153 E887BE0000              	call malloc
 16982 0000C158 488B5D20                	mov rbx, PARAM(0)
 16983 0000C15C 488918                  	mov qword[rax], rbx
 16984 0000C15F 48894520                	mov PARAM(0), rax
 16985 0000C163 48B8-                   	mov rax, sob_void
 16985 0000C165 [0000000000000000] 
 16986                                  
 16987 0000C16D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16988 0000C172 E868BE0000              	call malloc
 16989 0000C177 50                      	push rax
 16990 0000C178 BF08000000              	mov rdi, 8 * 1	; new rib
 16991 0000C17D E85DBE0000              	call malloc
 16992 0000C182 50                      	push rax
 16993 0000C183 BF50000000              	mov rdi, 8 * 10	; extended env
 16994 0000C188 E852BE0000              	call malloc
 16995 0000C18D 488B7D10                	mov rdi, ENV
 16996 0000C191 BE00000000              	mov rsi, 0
 16997 0000C196 BA01000000              	mov rdx, 1
 16998                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
 16999 0000C19B 4883FE09                	cmp rsi, 9
 17000 0000C19F 7410                    	je .L_lambda_simple_env_end_005c
 17001 0000C1A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17002 0000C1A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17003 0000C1A9 48FFC6                  	inc rsi
 17004 0000C1AC 48FFC2                  	inc rdx
 17005 0000C1AF EBEA                    	jmp .L_lambda_simple_env_loop_005c
 17006                                  .L_lambda_simple_env_end_005c:
 17007 0000C1B1 5B                      	pop rbx
 17008 0000C1B2 BE00000000              	mov rsi, 0
 17009                                  .L_lambda_simple_params_loop_005c:	; copy params
 17010 0000C1B7 4883FE01                	cmp rsi, 1
 17011 0000C1BB 740E                    	je .L_lambda_simple_params_end_005c
 17012 0000C1BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17013 0000C1C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17014 0000C1C6 48FFC6                  	inc rsi
 17015 0000C1C9 EBEC                    	jmp .L_lambda_simple_params_loop_005c
 17016                                  .L_lambda_simple_params_end_005c:
 17017 0000C1CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17018 0000C1CE 4889C3                  	mov rbx, rax
 17019 0000C1D1 58                      	pop rax
 17020 0000C1D2 C60004                  	mov byte [rax], T_closure
 17021 0000C1D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17022 0000C1D9 48C74009[E6C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
 17023 0000C1E1 E962010000              	jmp .L_lambda_simple_end_005c
 17024                                  .L_lambda_simple_code_005c:	; lambda-simple body
 17025 0000C1E6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17026 0000C1EC 740B                    	je .L_lambda_simple_arity_check_ok_005c
 17027 0000C1EE FF742410                	push qword [rsp + 8 * 2]
 17028 0000C1F2 6A02                    	push 2
 17029 0000C1F4 E99FBD0000              	jmp L_error_incorrect_arity_simple
 17030                                  .L_lambda_simple_arity_check_ok_005c:
 17031 0000C1F9 C8000000                	enter 0, 0
 17032                                  	; preparing a non-tail-call
 17033 0000C1FD 488B4528                	mov rax, PARAM(1)	; param s
 17034 0000C201 50                      	push rax
 17035 0000C202 6A01                    	push 1	; arg count
 17036 0000C204 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 17037 0000C20C 803805                  	cmp byte [rax], T_undefined
 17038 0000C20F 0F849DBC0000            	je L_error_fvar_undefined
 17039 0000C215 803804                  	cmp byte [rax], T_closure
 17040 0000C218 0F8518BD0000            	jne L_error_non_closure
 17041 0000C21E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17042 0000C221 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17043 0000C224 483D[02000000]          	cmp rax, sob_boolean_false
 17044 0000C22A 0F8514010000            	jne .L_or_end_0009
 17045                                  	; preparing a non-tail-call
 17046                                  	; preparing a non-tail-call
 17047 0000C230 488B4528                	mov rax, PARAM(1)	; param s
 17048 0000C234 50                      	push rax
 17049 0000C235 6A01                    	push 1	; arg count
 17050 0000C237 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 17051 0000C23F 803805                  	cmp byte [rax], T_undefined
 17052 0000C242 0F846ABC0000            	je L_error_fvar_undefined
 17053 0000C248 803804                  	cmp byte [rax], T_closure
 17054 0000C24B 0F85E5BC0000            	jne L_error_non_closure
 17055 0000C251 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17056 0000C254 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17057 0000C257 50                      	push rax
 17058 0000C258 488B4520                	mov rax, PARAM(0)	; param a
 17059 0000C25C 50                      	push rax
 17060 0000C25D 6A02                    	push 2	; arg count
 17061 0000C25F 488B4510                	mov rax, ENV
 17062 0000C263 488B4008                	mov rax, qword [rax + 8 * 1]
 17063 0000C267 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 17064 0000C26A 803804                  	cmp byte [rax], T_closure
 17065 0000C26D 0F85C3BC0000            	jne L_error_non_closure
 17066 0000C273 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17067 0000C276 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17068 0000C279 483D[02000000]          	cmp rax, sob_boolean_false
 17069 0000C27F 0F84B5000000            	je .L_if_else_0058
 17070                                  	; preparing a tail-call
 17071                                  	; preparing a non-tail-call
 17072 0000C285 488B4528                	mov rax, PARAM(1)	; param s
 17073 0000C289 50                      	push rax
 17074 0000C28A 6A01                    	push 1	; arg count
 17075 0000C28C 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 17076 0000C294 803805                  	cmp byte [rax], T_undefined
 17077 0000C297 0F8415BC0000            	je L_error_fvar_undefined
 17078 0000C29D 803804                  	cmp byte [rax], T_closure
 17079 0000C2A0 0F8590BC0000            	jne L_error_non_closure
 17080 0000C2A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17081 0000C2A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17082 0000C2AC 50                      	push rax
 17083                                  	; preparing a non-tail-call
 17084 0000C2AD 488B4528                	mov rax, PARAM(1)	; param s
 17085 0000C2B1 50                      	push rax
 17086 0000C2B2 6A01                    	push 1	; arg count
 17087 0000C2B4 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 17088 0000C2BC 803805                  	cmp byte [rax], T_undefined
 17089 0000C2BF 0F84EDBB0000            	je L_error_fvar_undefined
 17090 0000C2C5 803804                  	cmp byte [rax], T_closure
 17091 0000C2C8 0F8568BC0000            	jne L_error_non_closure
 17092 0000C2CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17093 0000C2D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17094 0000C2D4 50                      	push rax
 17095 0000C2D5 6A02                    	push 2	; arg count
 17096 0000C2D7 488B4510                	mov rax, ENV
 17097 0000C2DB 488B00                  	mov rax, qword [rax + 8 * 0]
 17098 0000C2DE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17099 0000C2E1 488B00                  	mov rax, qword [rax]
 17100 0000C2E4 803804                  	cmp byte [rax], T_closure
 17101 0000C2E7 0F8549BC0000            	jne L_error_non_closure
 17102 0000C2ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 17103 0000C2F0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17104 0000C2F3 FF7500                  	push qword[rbp]
 17105 0000C2F6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17106 0000C2F9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17107 0000C2FD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17108 0000C301 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17109 0000C305 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17110 0000C308 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17111 0000C30B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17112 0000C310 4983C103                	add r9, 3 	 ;for getting to the params
 17113 0000C314 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17114 0000C318 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17115                                  .L_tc_recycle_frame_loop_009f:
 17116 0000C31B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17117 0000C31E 7410                    	je .L_tc_recycle_frame_done_009f
 17118 0000C320 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17119 0000C323 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17120 0000C326 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17121 0000C32A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17122 0000C32E EBEB                    	jmp .L_tc_recycle_frame_loop_009f
 17123                                  .L_tc_recycle_frame_done_009f:
 17124 0000C330 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17125 0000C331 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17126 0000C335 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17127 0000C338 EB0A                    	jmp .L_if_end_0058
 17128                                  .L_if_else_0058:
 17129 0000C33A 48B8-                   	mov rax, L_constants + 2
 17129 0000C33C [0200000000000000] 
 17130                                  .L_if_end_0058:
 17131                                  .L_or_end_0009:
 17132 0000C344 C9                      	leave
 17133 0000C345 C22000                  	ret AND_KILL_FRAME(2)
 17134                                  .L_lambda_simple_end_005c:	; new closure is in rax
 17135 0000C348 50                      	push rax
 17136 0000C349 488B4520                	mov rax, PARAM(0)	; param run
 17137 0000C34D 8F00                    	pop qword [rax]
 17138 0000C34F 48B8-                   	mov rax, sob_void
 17138 0000C351 [0000000000000000] 
 17139                                  
 17140 0000C359 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17141 0000C35E E87CBC0000              	call malloc
 17142 0000C363 50                      	push rax
 17143 0000C364 BF08000000              	mov rdi, 8 * 1	; new rib
 17144 0000C369 E871BC0000              	call malloc
 17145 0000C36E 50                      	push rax
 17146 0000C36F BF50000000              	mov rdi, 8 * 10	; extended env
 17147 0000C374 E866BC0000              	call malloc
 17148 0000C379 488B7D10                	mov rdi, ENV
 17149 0000C37D BE00000000              	mov rsi, 0
 17150 0000C382 BA01000000              	mov rdx, 1
 17151                                  .L_lambda_opt_env_loop_000e:	; ext_env[i + 1] <-- env[i]
 17152 0000C387 4883FE09                	cmp rsi, 9
 17153 0000C38B 7410                    	je .L_lambda_opt_env_end_000e
 17154 0000C38D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17155 0000C391 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17156 0000C395 48FFC6                  	inc rsi
 17157 0000C398 48FFC2                  	inc rdx
 17158 0000C39B EBEA                    	jmp .L_lambda_opt_env_loop_000e
 17159                                  .L_lambda_opt_env_end_000e:
 17160 0000C39D 5B                      	pop rbx
 17161 0000C39E BE00000000              	mov rsi, 0
 17162                                  .L_lambda_opt_params_loop_000e:	; copy params
 17163 0000C3A3 4883FE01                	cmp rsi, 1
 17164 0000C3A7 740E                    	je .L_lambda_opt_params_end_000e
 17165 0000C3A9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17166 0000C3AE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17167 0000C3B2 48FFC6                  	inc rsi
 17168 0000C3B5 EBEC                    	jmp .L_lambda_opt_params_loop_000e
 17169                                  .L_lambda_opt_params_end_000e:
 17170 0000C3B7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17171 0000C3BA 4889C3                  	mov rbx, rax
 17172 0000C3BD 58                      	pop rax
 17173 0000C3BE C60004                  	mov byte [rax], T_closure
 17174 0000C3C1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17175 0000C3C5 48C74009[D2C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000e
 17176 0000C3CD E907020000              	jmp .L_lambda_opt_end_000e
 17177                                  .L_lambda_opt_code_000e:	; lambda-opt body
 17178 0000C3D2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17179 0000C3D8 7411                    	je .L_lambda_opt_arity_check_exact_000e
 17180 0000C3DA 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_000e
 17181 0000C3E0 FF742410                	push qword [rsp + 8 * 2]
 17182 0000C3E4 6A01                    	push 1
 17183 0000C3E6 E9C1BB0000              	jmp L_error_incorrect_arity_opt
 17184                                  .L_lambda_opt_arity_check_exact_000e:
 17185 0000C3EB 4883EC08                	sub rsp, 8
 17186 0000C3EF 488B442408              	mov rax, qword[rsp + 8 *1]
 17187 0000C3F4 48890424                	mov qword[rsp], rax  
 17188 0000C3F8 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17189 0000C3FD 4889442408              	mov qword[rsp + 8 * 1], rax
 17190 0000C402 B802000000              	mov rax, 2
 17191 0000C407 4889442410              	mov qword[rsp + 8 *2], rax
 17192 0000C40C 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 17193 0000C411 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17194 0000C416 48B8-                   	mov rax, sob_nil
 17194 0000C418 [0100000000000000] 
 17195 0000C420 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 17196 0000C425 C8000000                	enter 0, 0
 17197                                  	; preparing a tail-call
 17198 0000C429 488B4528                	mov rax, PARAM(1)	; param s
 17199 0000C42D 50                      	push rax
 17200 0000C42E 488B4520                	mov rax, PARAM(0)	; param a
 17201 0000C432 50                      	push rax
 17202 0000C433 6A02                    	push 2	; arg count
 17203 0000C435 488B4510                	mov rax, ENV
 17204 0000C439 488B00                  	mov rax, qword [rax + 8 * 0]
 17205 0000C43C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17206 0000C43F 488B00                  	mov rax, qword [rax]
 17207 0000C442 803804                  	cmp byte [rax], T_closure
 17208 0000C445 0F85EBBA0000            	jne L_error_non_closure
 17209 0000C44B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17210 0000C44E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17211 0000C451 FF7500                  	push qword[rbp]
 17212 0000C454 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17213 0000C457 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17214 0000C45B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17215 0000C45F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17216 0000C463 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17217 0000C466 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17218 0000C469 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17219 0000C46E 4983C103                	add r9, 3 	 ;for getting to the params
 17220 0000C472 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17221 0000C476 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17222                                  .L_tc_recycle_frame_loop_00a1:
 17223 0000C479 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17224 0000C47C 7410                    	je .L_tc_recycle_frame_done_00a1
 17225 0000C47E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17226 0000C481 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17227 0000C484 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17228 0000C488 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17229 0000C48C EBEB                    	jmp .L_tc_recycle_frame_loop_00a1
 17230                                  .L_tc_recycle_frame_done_00a1:
 17231 0000C48E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17232 0000C48F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17233 0000C493 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17234 0000C496 C9                      	leave
 17235 0000C497 C22000                  	ret AND_KILL_FRAME(2)
 17236 0000C49A E93A010000              	jmp .L_lambda_opt_end_000e	; new closure is in rax
 17237                                  .L_lambda_opt_arity_check_more_000e:
 17238 0000C49F 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 17239 0000C4A4 49B9-                   	mov r9, sob_nil
 17239 0000C4A6 [0100000000000000] 
 17240 0000C4AE 4889E3                  	mov rbx, rsp 
 17241 0000C4B1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 17242 0000C4B5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 17243 0000C4B8 49C1E003                	shl r8, 3
 17244 0000C4BC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 17245 0000C4BF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 17246                                  .L_lambda_opt_stack_shrink_loop_000e:
 17247 0000C4C4 4983F801                	cmp r8, 1
 17248 0000C4C8 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000e
 17249 0000C4CA BF11000000              	mov rdi, 1+8+8	;for pair
 17250 0000C4CF E80BBB0000              	call malloc	 ;to create the pair in the stack
 17251 0000C4D4 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 17252 0000C4D7 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 17253 0000C4DA 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 17254 0000C4DE 4C894809                 	mov qword[rax+1+8],r9
 17255 0000C4E2 4989C1                  	mov r9, rax	 ; for the recursion 
 17256 0000C4E5 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 17257 0000C4E8 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 17258 0000C4EC EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000e
 17259                                  .L_lambda_opt_stack_shrink_loop_exit_000e:
 17260 0000C4EE 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 17261 0000C4F3 4883E902                	sub rcx, 2
 17262 0000C4F7 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 17263 0000C4FB 4801CC                  	add rsp, rcx	 ;shrinking the stack
 17264 0000C4FE 4889E0                  	mov rax, rsp
 17265 0000C501 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 17266 0000C504 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 17267 0000C508 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 17268 0000C50B 4883C018                	add rax, 3 * 8 	;now rax is param 0
 17269 0000C50F 49C1E003                	shl r8, 3 	; convert to byte
 17270 0000C513 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 17271 0000C516 4C8908                  	mov qword[rax], r9	;puting the list at the top
 17272 0000C519 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 17273 0000C51D 4889E3                  	mov rbx, rsp 
 17274 0000C520 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 17275 0000C523 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 17276 0000C529 49FFCA                  	dec r10 
 17277 0000C52C 49C1E203                	shl r10, 3	;to get bytes
 17278 0000C530 4883C318                	add rbx, 3*8 	;rbx is the first param
 17279 0000C534 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 17280 0000C537 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 17281                                  
 17282 0000C53A 4C8900                              	mov qword[rax], r8
 17283 0000C53D 4883E808                            	sub rax, 8
 17284 0000C541 4883EB08                	sub rbx, 8
 17285 0000C545 4889E0                  	mov rax, rsp
 17286 0000C548 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 17287 0000C54B 48C744241002000000      	mov qword [rsp+2*8], 2
 17288 0000C554 488B5808                	mov rbx, qword[rax + 8 *1]
 17289 0000C558 48895C2408              	mov qword [rsp + 1*8] ,rbx
 17290 0000C55D 488B18                  	mov rbx, qword[rax]
 17291 0000C560 48891C24                	mov qword [rsp], rbx
 17292 0000C564 C8000000                	enter 0, 0
 17293                                  	; preparing a tail-call
 17294 0000C568 488B4528                	mov rax, PARAM(1)	; param s
 17295 0000C56C 50                      	push rax
 17296 0000C56D 488B4520                	mov rax, PARAM(0)	; param a
 17297 0000C571 50                      	push rax
 17298 0000C572 6A02                    	push 2	; arg count
 17299 0000C574 488B4510                	mov rax, ENV
 17300 0000C578 488B00                  	mov rax, qword [rax + 8 * 0]
 17301 0000C57B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17302 0000C57E 488B00                  	mov rax, qword [rax]
 17303 0000C581 803804                  	cmp byte [rax], T_closure
 17304 0000C584 0F85ACB90000            	jne L_error_non_closure
 17305 0000C58A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17306 0000C58D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17307 0000C590 FF7500                  	push qword[rbp]
 17308 0000C593 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17309 0000C596 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17310 0000C59A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17311 0000C59E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17312 0000C5A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17313 0000C5A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17314 0000C5A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17315 0000C5AD 4983C103                	add r9, 3 	 ;for getting to the params
 17316 0000C5B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17317 0000C5B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17318                                  .L_tc_recycle_frame_loop_00a0:
 17319 0000C5B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17320 0000C5BB 7410                    	je .L_tc_recycle_frame_done_00a0
 17321 0000C5BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17322 0000C5C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17323 0000C5C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17324 0000C5C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17325 0000C5CB EBEB                    	jmp .L_tc_recycle_frame_loop_00a0
 17326                                  .L_tc_recycle_frame_done_00a0:
 17327 0000C5CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17328 0000C5CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17329 0000C5D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17330 0000C5D5 C9                      	leave
 17331 0000C5D6 C22000                  	ret AND_KILL_FRAME(2)
 17332                                  .L_lambda_opt_end_000e:	; new closure is in rax
 17333 0000C5D9 C9                      	leave
 17334 0000C5DA C21800                  	ret AND_KILL_FRAME(1)
 17335                                  .L_lambda_simple_end_005b:	; new closure is in rax
 17336 0000C5DD 803804                  	cmp byte [rax], T_closure
 17337 0000C5E0 0F8550B90000            	jne L_error_non_closure
 17338 0000C5E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17339 0000C5E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17340 0000C5EC FF7500                  	push qword[rbp]
 17341 0000C5EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17342 0000C5F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17343 0000C5F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17344 0000C5FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17345 0000C5FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17346 0000C601 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17347 0000C604 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17348 0000C609 4983C103                	add r9, 3 	 ;for getting to the params
 17349 0000C60D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17350 0000C611 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17351                                  .L_tc_recycle_frame_loop_00a2:
 17352 0000C614 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17353 0000C617 7410                    	je .L_tc_recycle_frame_done_00a2
 17354 0000C619 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17355 0000C61C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17356 0000C61F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17357 0000C623 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17358 0000C627 EBEB                    	jmp .L_tc_recycle_frame_loop_00a2
 17359                                  .L_tc_recycle_frame_done_00a2:
 17360 0000C629 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17361 0000C62A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17362 0000C62E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17363 0000C631 C9                      	leave
 17364 0000C632 C21800                  	ret AND_KILL_FRAME(1)
 17365                                  .L_lambda_simple_end_005a:	; new closure is in rax
 17366 0000C635 50                      	push rax
 17367 0000C636 6A01                    	push 1	; arg count
 17368 0000C638 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17369 0000C63D E89DB90000              	call malloc
 17370 0000C642 50                      	push rax
 17371 0000C643 BF08000000              	mov rdi, 8 * 1	; new rib
 17372 0000C648 E892B90000              	call malloc
 17373 0000C64D 50                      	push rax
 17374 0000C64E BF40000000              	mov rdi, 8 * 8	; extended env
 17375 0000C653 E887B90000              	call malloc
 17376 0000C658 488B7D10                	mov rdi, ENV
 17377 0000C65C BE00000000              	mov rsi, 0
 17378 0000C661 BA01000000              	mov rdx, 1
 17379                                  .L_lambda_simple_env_loop_005d:	; ext_env[i + 1] <-- env[i]
 17380 0000C666 4883FE07                	cmp rsi, 7
 17381 0000C66A 7410                    	je .L_lambda_simple_env_end_005d
 17382 0000C66C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17383 0000C670 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17384 0000C674 48FFC6                  	inc rsi
 17385 0000C677 48FFC2                  	inc rdx
 17386 0000C67A EBEA                    	jmp .L_lambda_simple_env_loop_005d
 17387                                  .L_lambda_simple_env_end_005d:
 17388 0000C67C 5B                      	pop rbx
 17389 0000C67D BE00000000              	mov rsi, 0
 17390                                  .L_lambda_simple_params_loop_005d:	; copy params
 17391 0000C682 4883FE01                	cmp rsi, 1
 17392 0000C686 740E                    	je .L_lambda_simple_params_end_005d
 17393 0000C688 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17394 0000C68D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17395 0000C691 48FFC6                  	inc rsi
 17396 0000C694 EBEC                    	jmp .L_lambda_simple_params_loop_005d
 17397                                  .L_lambda_simple_params_end_005d:
 17398 0000C696 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17399 0000C699 4889C3                  	mov rbx, rax
 17400 0000C69C 58                      	pop rax
 17401 0000C69D C60004                  	mov byte [rax], T_closure
 17402 0000C6A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17403 0000C6A4 48C74009[B1C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005d
 17404 0000C6AC E919010000              	jmp .L_lambda_simple_end_005d
 17405                                  .L_lambda_simple_code_005d:	; lambda-simple body
 17406 0000C6B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17407 0000C6B7 740B                    	je .L_lambda_simple_arity_check_ok_005d
 17408 0000C6B9 FF742410                	push qword [rsp + 8 * 2]
 17409 0000C6BD 6A01                    	push 1
 17410 0000C6BF E9D4B80000              	jmp L_error_incorrect_arity_simple
 17411                                  .L_lambda_simple_arity_check_ok_005d:
 17412 0000C6C4 C8000000                	enter 0, 0
 17413                                  	; preparing a non-tail-call
 17414 0000C6C8 488B4510                	mov rax, ENV
 17415 0000C6CC 488B4020                	mov rax, qword [rax + 8 * 4]
 17416 0000C6D0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 17417 0000C6D3 50                      	push rax
 17418 0000C6D4 6A01                    	push 1	; arg count
 17419 0000C6D6 488B4520                	mov rax, PARAM(0)	; param make-run
 17420 0000C6DA 803804                  	cmp byte [rax], T_closure
 17421 0000C6DD 0F8553B80000            	jne L_error_non_closure
 17422 0000C6E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17423 0000C6E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17424 0000C6E9 48890425[090E0000]      	mov qword [free_var_4], rax
 17425 0000C6F1 48B8-                   	mov rax, sob_void
 17425 0000C6F3 [0000000000000000] 
 17426                                  
 17427                                  	; preparing a non-tail-call
 17428 0000C6FB 488B4510                	mov rax, ENV
 17429 0000C6FF 488B00                  	mov rax, qword [rax + 8 * 0]
 17430 0000C702 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 17431 0000C705 50                      	push rax
 17432 0000C706 6A01                    	push 1	; arg count
 17433 0000C708 488B4520                	mov rax, PARAM(0)	; param make-run
 17434 0000C70C 803804                  	cmp byte [rax], T_closure
 17435 0000C70F 0F8521B80000            	jne L_error_non_closure
 17436 0000C715 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17437 0000C718 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17438 0000C71B 48890425[1A0E0000]      	mov qword [free_var_5], rax
 17439 0000C723 48B8-                   	mov rax, sob_void
 17439 0000C725 [0000000000000000] 
 17440                                  
 17441                                  	; preparing a non-tail-call
 17442 0000C72D 488B4510                	mov rax, ENV
 17443 0000C731 488B4008                	mov rax, qword [rax + 8 * 1]
 17444 0000C735 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 17445 0000C738 50                      	push rax
 17446 0000C739 6A01                    	push 1	; arg count
 17447 0000C73B 488B4520                	mov rax, PARAM(0)	; param make-run
 17448 0000C73F 803804                  	cmp byte [rax], T_closure
 17449 0000C742 0F85EEB70000            	jne L_error_non_closure
 17450 0000C748 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17451 0000C74B FF5009                  	call SOB_CLOSURE_CODE(rax)
 17452 0000C74E 48890425[3C0E0000]      	mov qword [free_var_7], rax
 17453 0000C756 48B8-                   	mov rax, sob_void
 17453 0000C758 [0000000000000000] 
 17454                                  
 17455                                  	; preparing a non-tail-call
 17456 0000C760 488B4510                	mov rax, ENV
 17457 0000C764 488B4010                	mov rax, qword [rax + 8 * 2]
 17458 0000C768 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 17459 0000C76B 50                      	push rax
 17460 0000C76C 6A01                    	push 1	; arg count
 17461 0000C76E 488B4520                	mov rax, PARAM(0)	; param make-run
 17462 0000C772 803804                  	cmp byte [rax], T_closure
 17463 0000C775 0F85BBB70000            	jne L_error_non_closure
 17464 0000C77B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17465 0000C77E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17466 0000C781 48890425[4D0E0000]      	mov qword [free_var_8], rax
 17467 0000C789 48B8-                   	mov rax, sob_void
 17467 0000C78B [0000000000000000] 
 17468                                  
 17469                                  	; preparing a non-tail-call
 17470 0000C793 488B4510                	mov rax, ENV
 17471 0000C797 488B4018                	mov rax, qword [rax + 8 * 3]
 17472 0000C79B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 17473 0000C79E 50                      	push rax
 17474 0000C79F 6A01                    	push 1	; arg count
 17475 0000C7A1 488B4520                	mov rax, PARAM(0)	; param make-run
 17476 0000C7A5 803804                  	cmp byte [rax], T_closure
 17477 0000C7A8 0F8588B70000            	jne L_error_non_closure
 17478 0000C7AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17479 0000C7B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17480 0000C7B4 48890425[2B0E0000]      	mov qword [free_var_6], rax
 17481 0000C7BC 48B8-                   	mov rax, sob_void
 17481 0000C7BE [0000000000000000] 
 17482 0000C7C6 C9                      	leave
 17483 0000C7C7 C21800                  	ret AND_KILL_FRAME(1)
 17484                                  .L_lambda_simple_end_005d:	; new closure is in rax
 17485 0000C7CA 803804                  	cmp byte [rax], T_closure
 17486 0000C7CD 0F8563B70000            	jne L_error_non_closure
 17487 0000C7D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17488 0000C7D6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17489 0000C7D9 FF7500                  	push qword[rbp]
 17490 0000C7DC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17491 0000C7DF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17492 0000C7E3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17493 0000C7E7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17494 0000C7EB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17495 0000C7EE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17496 0000C7F1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17497 0000C7F6 4983C103                	add r9, 3 	 ;for getting to the params
 17498 0000C7FA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17499 0000C7FE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17500                                  .L_tc_recycle_frame_loop_00a3:
 17501 0000C801 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17502 0000C804 7410                    	je .L_tc_recycle_frame_done_00a3
 17503 0000C806 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17504 0000C809 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17505 0000C80C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17506 0000C810 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17507 0000C814 EBEB                    	jmp .L_tc_recycle_frame_loop_00a3
 17508                                  .L_tc_recycle_frame_done_00a3:
 17509 0000C816 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17510 0000C817 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17511 0000C81B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17512 0000C81E C9                      	leave
 17513 0000C81F C21800                  	ret AND_KILL_FRAME(1)
 17514                                  .L_lambda_simple_end_0059:	; new closure is in rax
 17515 0000C822 803804                  	cmp byte [rax], T_closure
 17516 0000C825 0F850BB70000            	jne L_error_non_closure
 17517 0000C82B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17518 0000C82E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17519 0000C831 FF7500                  	push qword[rbp]
 17520 0000C834 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17521 0000C837 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17522 0000C83B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17523 0000C83F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17524 0000C843 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17525 0000C846 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17526 0000C849 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17527 0000C84E 4983C103                	add r9, 3 	 ;for getting to the params
 17528 0000C852 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17529 0000C856 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17530                                  .L_tc_recycle_frame_loop_00a4:
 17531 0000C859 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17532 0000C85C 7410                    	je .L_tc_recycle_frame_done_00a4
 17533 0000C85E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17534 0000C861 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17535 0000C864 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17536 0000C868 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17537 0000C86C EBEB                    	jmp .L_tc_recycle_frame_loop_00a4
 17538                                  .L_tc_recycle_frame_done_00a4:
 17539 0000C86E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17540 0000C86F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17541 0000C873 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17542 0000C876 C9                      	leave
 17543 0000C877 C21800                  	ret AND_KILL_FRAME(1)
 17544                                  .L_lambda_simple_end_0057:	; new closure is in rax
 17545 0000C87A 803804                  	cmp byte [rax], T_closure
 17546 0000C87D 0F85B3B60000            	jne L_error_non_closure
 17547 0000C883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17548 0000C886 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17549 0000C889 FF7500                  	push qword[rbp]
 17550 0000C88C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17551 0000C88F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17552 0000C893 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17553 0000C897 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17554 0000C89B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17555 0000C89E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17556 0000C8A1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17557 0000C8A6 4983C103                	add r9, 3 	 ;for getting to the params
 17558 0000C8AA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17559 0000C8AE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17560                                  .L_tc_recycle_frame_loop_00a5:
 17561 0000C8B1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17562 0000C8B4 7410                    	je .L_tc_recycle_frame_done_00a5
 17563 0000C8B6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17564 0000C8B9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17565 0000C8BC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17566 0000C8C0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17567 0000C8C4 EBEB                    	jmp .L_tc_recycle_frame_loop_00a5
 17568                                  .L_tc_recycle_frame_done_00a5:
 17569 0000C8C6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17570 0000C8C7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17571 0000C8CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17572 0000C8CE C9                      	leave
 17573 0000C8CF C21800                  	ret AND_KILL_FRAME(1)
 17574                                  .L_lambda_simple_end_0055:	; new closure is in rax
 17575 0000C8D2 803804                  	cmp byte [rax], T_closure
 17576 0000C8D5 0F855BB60000            	jne L_error_non_closure
 17577 0000C8DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17578 0000C8DE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17579 0000C8E1 FF7500                  	push qword[rbp]
 17580 0000C8E4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17581 0000C8E7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17582 0000C8EB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17583 0000C8EF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17584 0000C8F3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17585 0000C8F6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17586 0000C8F9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17587 0000C8FE 4983C103                	add r9, 3 	 ;for getting to the params
 17588 0000C902 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17589 0000C906 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17590                                  .L_tc_recycle_frame_loop_00a6:
 17591 0000C909 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17592 0000C90C 7410                    	je .L_tc_recycle_frame_done_00a6
 17593 0000C90E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17594 0000C911 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17595 0000C914 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17596 0000C918 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17597 0000C91C EBEB                    	jmp .L_tc_recycle_frame_loop_00a6
 17598                                  .L_tc_recycle_frame_done_00a6:
 17599 0000C91E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17600 0000C91F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17601 0000C923 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17602 0000C926 C9                      	leave
 17603 0000C927 C21800                  	ret AND_KILL_FRAME(1)
 17604                                  .L_lambda_simple_end_0053:	; new closure is in rax
 17605 0000C92A 803804                  	cmp byte [rax], T_closure
 17606 0000C92D 0F8503B60000            	jne L_error_non_closure
 17607 0000C933 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17608 0000C936 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17609 0000C939 FF7500                  	push qword[rbp]
 17610 0000C93C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17611 0000C93F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17612 0000C943 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17613 0000C947 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17614 0000C94B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17615 0000C94E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17616 0000C951 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17617 0000C956 4983C103                	add r9, 3 	 ;for getting to the params
 17618 0000C95A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17619 0000C95E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17620                                  .L_tc_recycle_frame_loop_00a7:
 17621 0000C961 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17622 0000C964 7410                    	je .L_tc_recycle_frame_done_00a7
 17623 0000C966 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17624 0000C969 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17625 0000C96C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17626 0000C970 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17627 0000C974 EBEB                    	jmp .L_tc_recycle_frame_loop_00a7
 17628                                  .L_tc_recycle_frame_done_00a7:
 17629 0000C976 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17630 0000C977 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17631 0000C97B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17632 0000C97E C9                      	leave
 17633 0000C97F C21800                  	ret AND_KILL_FRAME(1)
 17634                                  .L_lambda_simple_end_0052:	; new closure is in rax
 17635 0000C982 803804                  	cmp byte [rax], T_closure
 17636 0000C985 0F85ABB50000            	jne L_error_non_closure
 17637 0000C98B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17638 0000C98E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17639 0000C991 FF7500                  	push qword[rbp]
 17640 0000C994 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17641 0000C997 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17642 0000C99B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17643 0000C99F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17644 0000C9A3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17645 0000C9A6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17646 0000C9A9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17647 0000C9AE 4983C103                	add r9, 3 	 ;for getting to the params
 17648 0000C9B2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17649 0000C9B6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17650                                  .L_tc_recycle_frame_loop_00a8:
 17651 0000C9B9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17652 0000C9BC 7410                    	je .L_tc_recycle_frame_done_00a8
 17653 0000C9BE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17654 0000C9C1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17655 0000C9C4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17656 0000C9C8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17657 0000C9CC EBEB                    	jmp .L_tc_recycle_frame_loop_00a8
 17658                                  .L_tc_recycle_frame_done_00a8:
 17659 0000C9CE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17660 0000C9CF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17661 0000C9D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17662 0000C9D6 C9                      	leave
 17663 0000C9D7 C21800                  	ret AND_KILL_FRAME(1)
 17664                                  .L_lambda_simple_end_0051:	; new closure is in rax
 17665 0000C9DA 803804                  	cmp byte [rax], T_closure
 17666 0000C9DD 0F8553B50000            	jne L_error_non_closure
 17667 0000C9E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17668 0000C9E6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17669 0000C9E9 FF7500                  	push qword[rbp]
 17670 0000C9EC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17671 0000C9EF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17672 0000C9F3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17673 0000C9F7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17674 0000C9FB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17675 0000C9FE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17676 0000CA01 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17677 0000CA06 4983C103                	add r9, 3 	 ;for getting to the params
 17678 0000CA0A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17679 0000CA0E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17680                                  .L_tc_recycle_frame_loop_00a9:
 17681 0000CA11 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17682 0000CA14 7410                    	je .L_tc_recycle_frame_done_00a9
 17683 0000CA16 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17684 0000CA19 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17685 0000CA1C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17686 0000CA20 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17687 0000CA24 EBEB                    	jmp .L_tc_recycle_frame_loop_00a9
 17688                                  .L_tc_recycle_frame_done_00a9:
 17689 0000CA26 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17690 0000CA27 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17691 0000CA2B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17692 0000CA2E C9                      	leave
 17693 0000CA2F C21800                  	ret AND_KILL_FRAME(1)
 17694                                  .L_lambda_simple_end_004e:	; new closure is in rax
 17695 0000CA32 803804                  	cmp byte [rax], T_closure
 17696 0000CA35 0F85FBB40000            	jne L_error_non_closure
 17697 0000CA3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17698 0000CA3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17699                                  
 17700 0000CA41 4889C7                  	mov rdi, rax
 17701 0000CA44 E8EBB70000              	call print_sexpr_if_not_void
 17702 0000CA49 48B8-                   	mov rax, L_constants + 0
 17702 0000CA4B [0000000000000000] 
 17703 0000CA53 48890425[AF120000]      	mov qword [free_var_74], rax
 17704 0000CA5B 48B8-                   	mov rax, sob_void
 17704 0000CA5D [0000000000000000] 
 17705                                  
 17706 0000CA65 4889C7                  	mov rdi, rax
 17707 0000CA68 E8C7B70000              	call print_sexpr_if_not_void
 17708 0000CA6D 48B8-                   	mov rax, L_constants + 0
 17708 0000CA6F [0000000000000000] 
 17709 0000CA77 48890425[9E120000]      	mov qword [free_var_73], rax
 17710 0000CA7F 48B8-                   	mov rax, sob_void
 17710 0000CA81 [0000000000000000] 
 17711                                  
 17712 0000CA89 4889C7                  	mov rdi, rax
 17713 0000CA8C E8A3B70000              	call print_sexpr_if_not_void
 17714 0000CA91 48B8-                   	mov rax, L_constants + 0
 17714 0000CA93 [0000000000000000] 
 17715 0000CA9B 48890425[C0120000]      	mov qword [free_var_75], rax
 17716 0000CAA3 48B8-                   	mov rax, sob_void
 17716 0000CAA5 [0000000000000000] 
 17717                                  
 17718 0000CAAD 4889C7                  	mov rdi, rax
 17719 0000CAB0 E87FB70000              	call print_sexpr_if_not_void
 17720 0000CAB5 48B8-                   	mov rax, L_constants + 0
 17720 0000CAB7 [0000000000000000] 
 17721 0000CABF 48890425[E2120000]      	mov qword [free_var_77], rax
 17722 0000CAC7 48B8-                   	mov rax, sob_void
 17722 0000CAC9 [0000000000000000] 
 17723                                  
 17724 0000CAD1 4889C7                  	mov rdi, rax
 17725 0000CAD4 E85BB70000              	call print_sexpr_if_not_void
 17726 0000CAD9 48B8-                   	mov rax, L_constants + 0
 17726 0000CADB [0000000000000000] 
 17727 0000CAE3 48890425[D1120000]      	mov qword [free_var_76], rax
 17728 0000CAEB 48B8-                   	mov rax, sob_void
 17728 0000CAED [0000000000000000] 
 17729                                  
 17730 0000CAF5 4889C7                  	mov rdi, rax
 17731 0000CAF8 E837B70000              	call print_sexpr_if_not_void
 17732                                  	; preparing a non-tail-call
 17733 0000CAFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17734 0000CB02 E8D8B40000              	call malloc
 17735 0000CB07 50                      	push rax
 17736 0000CB08 BF00000000              	mov rdi, 8 * 0	; new rib
 17737 0000CB0D E8CDB40000              	call malloc
 17738 0000CB12 50                      	push rax
 17739 0000CB13 BF08000000              	mov rdi, 8 * 1	; extended env
 17740 0000CB18 E8C2B40000              	call malloc
 17741 0000CB1D 488B7D10                	mov rdi, ENV
 17742 0000CB21 BE00000000              	mov rsi, 0
 17743 0000CB26 BA01000000              	mov rdx, 1
 17744                                  .L_lambda_simple_env_loop_005e:	; ext_env[i + 1] <-- env[i]
 17745 0000CB2B 4883FE00                	cmp rsi, 0
 17746 0000CB2F 7410                    	je .L_lambda_simple_env_end_005e
 17747 0000CB31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17748 0000CB35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17749 0000CB39 48FFC6                  	inc rsi
 17750 0000CB3C 48FFC2                  	inc rdx
 17751 0000CB3F EBEA                    	jmp .L_lambda_simple_env_loop_005e
 17752                                  .L_lambda_simple_env_end_005e:
 17753 0000CB41 5B                      	pop rbx
 17754 0000CB42 BE00000000              	mov rsi, 0
 17755                                  .L_lambda_simple_params_loop_005e:	; copy params
 17756 0000CB47 4883FE00                	cmp rsi, 0
 17757 0000CB4B 740E                    	je .L_lambda_simple_params_end_005e
 17758 0000CB4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17759 0000CB52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17760 0000CB56 48FFC6                  	inc rsi
 17761 0000CB59 EBEC                    	jmp .L_lambda_simple_params_loop_005e
 17762                                  .L_lambda_simple_params_end_005e:
 17763 0000CB5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17764 0000CB5E 4889C3                  	mov rbx, rax
 17765 0000CB61 58                      	pop rax
 17766 0000CB62 C60004                  	mov byte [rax], T_closure
 17767 0000CB65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17768 0000CB69 48C74009[76CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005e
 17769 0000CB71 E901030000              	jmp .L_lambda_simple_end_005e
 17770                                  .L_lambda_simple_code_005e:	; lambda-simple body
 17771 0000CB76 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17772 0000CB7C 740B                    	je .L_lambda_simple_arity_check_ok_005e
 17773 0000CB7E FF742410                	push qword [rsp + 8 * 2]
 17774 0000CB82 6A01                    	push 1
 17775 0000CB84 E90FB40000              	jmp L_error_incorrect_arity_simple
 17776                                  .L_lambda_simple_arity_check_ok_005e:
 17777 0000CB89 C8000000                	enter 0, 0
 17778 0000CB8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17779 0000CB92 E848B40000              	call malloc
 17780 0000CB97 50                      	push rax
 17781 0000CB98 BF08000000              	mov rdi, 8 * 1	; new rib
 17782 0000CB9D E83DB40000              	call malloc
 17783 0000CBA2 50                      	push rax
 17784 0000CBA3 BF10000000              	mov rdi, 8 * 2	; extended env
 17785 0000CBA8 E832B40000              	call malloc
 17786 0000CBAD 488B7D10                	mov rdi, ENV
 17787 0000CBB1 BE00000000              	mov rsi, 0
 17788 0000CBB6 BA01000000              	mov rdx, 1
 17789                                  .L_lambda_opt_env_loop_000f:	; ext_env[i + 1] <-- env[i]
 17790 0000CBBB 4883FE01                	cmp rsi, 1
 17791 0000CBBF 7410                    	je .L_lambda_opt_env_end_000f
 17792 0000CBC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17793 0000CBC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17794 0000CBC9 48FFC6                  	inc rsi
 17795 0000CBCC 48FFC2                  	inc rdx
 17796 0000CBCF EBEA                    	jmp .L_lambda_opt_env_loop_000f
 17797                                  .L_lambda_opt_env_end_000f:
 17798 0000CBD1 5B                      	pop rbx
 17799 0000CBD2 BE00000000              	mov rsi, 0
 17800                                  .L_lambda_opt_params_loop_000f:	; copy params
 17801 0000CBD7 4883FE01                	cmp rsi, 1
 17802 0000CBDB 740E                    	je .L_lambda_opt_params_end_000f
 17803 0000CBDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17804 0000CBE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17805 0000CBE6 48FFC6                  	inc rsi
 17806 0000CBE9 EBEC                    	jmp .L_lambda_opt_params_loop_000f
 17807                                  .L_lambda_opt_params_end_000f:
 17808 0000CBEB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17809 0000CBEE 4889C3                  	mov rbx, rax
 17810 0000CBF1 58                      	pop rax
 17811 0000CBF2 C60004                  	mov byte [rax], T_closure
 17812 0000CBF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17813 0000CBF9 48C74009[06CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000f
 17814 0000CC01 E96D020000              	jmp .L_lambda_opt_end_000f
 17815                                  .L_lambda_opt_code_000f:	; lambda-opt body
 17816 0000CC06 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17817 0000CC0C 7411                    	je .L_lambda_opt_arity_check_exact_000f
 17818 0000CC0E 0F8FF4000000            	jg .L_lambda_opt_arity_check_more_000f
 17819 0000CC14 FF742410                	push qword [rsp + 8 * 2]
 17820 0000CC18 6A00                    	push 0
 17821 0000CC1A E98DB30000              	jmp L_error_incorrect_arity_opt
 17822                                  .L_lambda_opt_arity_check_exact_000f:
 17823 0000CC1F 4883EC08                	sub rsp, 8
 17824 0000CC23 488B442408              	mov rax, qword[rsp + 8 *1]
 17825 0000CC28 48890424                	mov qword[rsp], rax  
 17826 0000CC2C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17827 0000CC31 4889442408              	mov qword[rsp + 8 * 1], rax
 17828 0000CC36 B801000000              	mov rax, 1
 17829 0000CC3B 4889442410              	mov qword[rsp + 8 *2], rax
 17830 0000CC40 48B8-                   	mov rax, sob_nil
 17830 0000CC42 [0100000000000000] 
 17831 0000CC4A 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17832 0000CC4F C8000000                	enter 0, 0
 17833                                  	; preparing a tail-call
 17834                                  	; preparing a non-tail-call
 17835 0000CC53 488B4520                	mov rax, PARAM(0)	; param s
 17836 0000CC57 50                      	push rax
 17837 0000CC58 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17838 0000CC60 803805                  	cmp byte [rax], T_undefined
 17839 0000CC63 0F8449B20000            	je L_error_fvar_undefined
 17840 0000CC69 50                      	push rax
 17841 0000CC6A 6A02                    	push 2	; arg count
 17842 0000CC6C 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 17843 0000CC74 803805                  	cmp byte [rax], T_undefined
 17844 0000CC77 0F8435B20000            	je L_error_fvar_undefined
 17845 0000CC7D 803804                  	cmp byte [rax], T_closure
 17846 0000CC80 0F85B0B20000            	jne L_error_non_closure
 17847 0000CC86 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17848 0000CC89 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17849 0000CC8C 50                      	push rax
 17850 0000CC8D 488B4510                	mov rax, ENV
 17851 0000CC91 488B00                  	mov rax, qword [rax + 8 * 0]
 17852 0000CC94 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17853 0000CC97 50                      	push rax
 17854 0000CC98 6A02                    	push 2	; arg count
 17855 0000CC9A 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 17856 0000CCA2 803805                  	cmp byte [rax], T_undefined
 17857 0000CCA5 0F8407B20000            	je L_error_fvar_undefined
 17858 0000CCAB 803804                  	cmp byte [rax], T_closure
 17859 0000CCAE 0F8582B20000            	jne L_error_non_closure
 17860 0000CCB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17861 0000CCB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17862 0000CCBA FF7500                  	push qword[rbp]
 17863 0000CCBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17864 0000CCC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17865 0000CCC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17866 0000CCC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17867 0000CCCC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17868 0000CCCF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17869 0000CCD2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17870 0000CCD7 4983C103                	add r9, 3 	 ;for getting to the params
 17871 0000CCDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17872 0000CCDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17873                                  .L_tc_recycle_frame_loop_00ab:
 17874 0000CCE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17875 0000CCE5 7410                    	je .L_tc_recycle_frame_done_00ab
 17876 0000CCE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17877 0000CCEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17878 0000CCED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17879 0000CCF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17880 0000CCF5 EBEB                    	jmp .L_tc_recycle_frame_loop_00ab
 17881                                  .L_tc_recycle_frame_done_00ab:
 17882 0000CCF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17883 0000CCF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17884 0000CCFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17885 0000CCFF C9                      	leave
 17886 0000CD00 C21800                  	ret AND_KILL_FRAME(1)
 17887 0000CD03 E96B010000              	jmp .L_lambda_opt_end_000f	; new closure is in rax
 17888                                  .L_lambda_opt_arity_check_more_000f:
 17889 0000CD08 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 17890 0000CD0D 49B9-                   	mov r9, sob_nil
 17890 0000CD0F [0100000000000000] 
 17891 0000CD17 4889E3                  	mov rbx, rsp 
 17892 0000CD1A 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 17893 0000CD1E 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 17894 0000CD21 49C1E003                	shl r8, 3
 17895 0000CD25 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 17896 0000CD28 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 17897                                  .L_lambda_opt_stack_shrink_loop_000f:
 17898 0000CD2D 4983F800                	cmp r8, 0
 17899 0000CD31 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000f
 17900 0000CD33 BF11000000              	mov rdi, 1+8+8	;for pair
 17901 0000CD38 E8A2B20000              	call malloc	 ;to create the pair in the stack
 17902 0000CD3D C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 17903 0000CD40 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 17904 0000CD43 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 17905 0000CD47 4C894809                 	mov qword[rax+1+8],r9
 17906 0000CD4B 4989C1                  	mov r9, rax	 ; for the recursion 
 17907 0000CD4E 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 17908 0000CD51 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 17909 0000CD55 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000f
 17910                                  .L_lambda_opt_stack_shrink_loop_exit_000f:
 17911 0000CD57 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 17912 0000CD5C 4883E901                	sub rcx, 1
 17913 0000CD60 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 17914 0000CD64 4801CC                  	add rsp, rcx	 ;shrinking the stack
 17915 0000CD67 4889E0                  	mov rax, rsp
 17916 0000CD6A 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 17917 0000CD6D 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 17918 0000CD71 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 17919 0000CD74 4883C018                	add rax, 3 * 8 	;now rax is param 0
 17920 0000CD78 49C1E003                	shl r8, 3 	; convert to byte
 17921 0000CD7C 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 17922 0000CD7F 4C8908                  	mov qword[rax], r9	;puting the list at the top
 17923 0000CD82 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 17924 0000CD86 4889E3                  	mov rbx, rsp 
 17925 0000CD89 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 17926 0000CD8C 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 17927 0000CD92 49FFCA                  	dec r10 
 17928 0000CD95 49C1E203                	shl r10, 3	;to get bytes
 17929 0000CD99 4883C318                	add rbx, 3*8 	;rbx is the first param
 17930 0000CD9D 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 17931 0000CDA0 4889E0                  	mov rax, rsp
 17932 0000CDA3 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 17933 0000CDA6 48C744241001000000      	mov qword [rsp+2*8], 1
 17934 0000CDAF 488B5808                	mov rbx, qword[rax + 8 *1]
 17935 0000CDB3 48895C2408              	mov qword [rsp + 1*8] ,rbx
 17936 0000CDB8 488B18                  	mov rbx, qword[rax]
 17937 0000CDBB 48891C24                	mov qword [rsp], rbx
 17938 0000CDBF C8000000                	enter 0, 0
 17939                                  	; preparing a tail-call
 17940                                  	; preparing a non-tail-call
 17941 0000CDC3 488B4520                	mov rax, PARAM(0)	; param s
 17942 0000CDC7 50                      	push rax
 17943 0000CDC8 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 17944 0000CDD0 803805                  	cmp byte [rax], T_undefined
 17945 0000CDD3 0F84D9B00000            	je L_error_fvar_undefined
 17946 0000CDD9 50                      	push rax
 17947 0000CDDA 6A02                    	push 2	; arg count
 17948 0000CDDC 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 17949 0000CDE4 803805                  	cmp byte [rax], T_undefined
 17950 0000CDE7 0F84C5B00000            	je L_error_fvar_undefined
 17951 0000CDED 803804                  	cmp byte [rax], T_closure
 17952 0000CDF0 0F8540B10000            	jne L_error_non_closure
 17953 0000CDF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17954 0000CDF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17955 0000CDFC 50                      	push rax
 17956 0000CDFD 488B4510                	mov rax, ENV
 17957 0000CE01 488B00                  	mov rax, qword [rax + 8 * 0]
 17958 0000CE04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17959 0000CE07 50                      	push rax
 17960 0000CE08 6A02                    	push 2	; arg count
 17961 0000CE0A 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 17962 0000CE12 803805                  	cmp byte [rax], T_undefined
 17963 0000CE15 0F8497B00000            	je L_error_fvar_undefined
 17964 0000CE1B 803804                  	cmp byte [rax], T_closure
 17965 0000CE1E 0F8512B10000            	jne L_error_non_closure
 17966 0000CE24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17967 0000CE27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17968 0000CE2A FF7500                  	push qword[rbp]
 17969 0000CE2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17970 0000CE30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17971 0000CE34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17972 0000CE38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17973 0000CE3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17974 0000CE3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17975 0000CE42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17976 0000CE47 4983C103                	add r9, 3 	 ;for getting to the params
 17977 0000CE4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17978 0000CE4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17979                                  .L_tc_recycle_frame_loop_00aa:
 17980 0000CE52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17981 0000CE55 7410                    	je .L_tc_recycle_frame_done_00aa
 17982 0000CE57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17983 0000CE5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17984 0000CE5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17985 0000CE61 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17986 0000CE65 EBEB                    	jmp .L_tc_recycle_frame_loop_00aa
 17987                                  .L_tc_recycle_frame_done_00aa:
 17988 0000CE67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17989 0000CE68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17990 0000CE6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17991 0000CE6F C9                      	leave
 17992 0000CE70 C21800                  	ret AND_KILL_FRAME(1)
 17993                                  .L_lambda_opt_end_000f:	; new closure is in rax
 17994 0000CE73 C9                      	leave
 17995 0000CE74 C21800                  	ret AND_KILL_FRAME(1)
 17996                                  .L_lambda_simple_end_005e:	; new closure is in rax
 17997 0000CE77 50                      	push rax
 17998 0000CE78 6A01                    	push 1	; arg count
 17999 0000CE7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18000 0000CE7F E85BB10000              	call malloc
 18001 0000CE84 50                      	push rax
 18002 0000CE85 BF00000000              	mov rdi, 8 * 0	; new rib
 18003 0000CE8A E850B10000              	call malloc
 18004 0000CE8F 50                      	push rax
 18005 0000CE90 BF08000000              	mov rdi, 8 * 1	; extended env
 18006 0000CE95 E845B10000              	call malloc
 18007 0000CE9A 488B7D10                	mov rdi, ENV
 18008 0000CE9E BE00000000              	mov rsi, 0
 18009 0000CEA3 BA01000000              	mov rdx, 1
 18010                                  .L_lambda_simple_env_loop_005f:	; ext_env[i + 1] <-- env[i]
 18011 0000CEA8 4883FE00                	cmp rsi, 0
 18012 0000CEAC 7410                    	je .L_lambda_simple_env_end_005f
 18013 0000CEAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18014 0000CEB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18015 0000CEB6 48FFC6                  	inc rsi
 18016 0000CEB9 48FFC2                  	inc rdx
 18017 0000CEBC EBEA                    	jmp .L_lambda_simple_env_loop_005f
 18018                                  .L_lambda_simple_env_end_005f:
 18019 0000CEBE 5B                      	pop rbx
 18020 0000CEBF BE00000000              	mov rsi, 0
 18021                                  .L_lambda_simple_params_loop_005f:	; copy params
 18022 0000CEC4 4883FE00                	cmp rsi, 0
 18023 0000CEC8 740E                    	je .L_lambda_simple_params_end_005f
 18024 0000CECA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18025 0000CECF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18026 0000CED3 48FFC6                  	inc rsi
 18027 0000CED6 EBEC                    	jmp .L_lambda_simple_params_loop_005f
 18028                                  .L_lambda_simple_params_end_005f:
 18029 0000CED8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18030 0000CEDB 4889C3                  	mov rbx, rax
 18031 0000CEDE 58                      	pop rax
 18032 0000CEDF C60004                  	mov byte [rax], T_closure
 18033 0000CEE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18034 0000CEE6 48C74009[F3CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005f
 18035 0000CEEE E938010000              	jmp .L_lambda_simple_end_005f
 18036                                  .L_lambda_simple_code_005f:	; lambda-simple body
 18037 0000CEF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18038 0000CEF9 740B                    	je .L_lambda_simple_arity_check_ok_005f
 18039 0000CEFB FF742410                	push qword [rsp + 8 * 2]
 18040 0000CEFF 6A01                    	push 1
 18041 0000CF01 E992B00000              	jmp L_error_incorrect_arity_simple
 18042                                  .L_lambda_simple_arity_check_ok_005f:
 18043 0000CF06 C8000000                	enter 0, 0
 18044                                  	; preparing a non-tail-call
 18045 0000CF0A 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 18046 0000CF12 803805                  	cmp byte [rax], T_undefined
 18047 0000CF15 0F8497AF0000            	je L_error_fvar_undefined
 18048 0000CF1B 50                      	push rax
 18049 0000CF1C 6A01                    	push 1	; arg count
 18050 0000CF1E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18051 0000CF22 803804                  	cmp byte [rax], T_closure
 18052 0000CF25 0F850BB00000            	jne L_error_non_closure
 18053 0000CF2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18054 0000CF2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18055 0000CF31 48890425[AF120000]      	mov qword [free_var_74], rax
 18056 0000CF39 48B8-                   	mov rax, sob_void
 18056 0000CF3B [0000000000000000] 
 18057                                  
 18058                                  	; preparing a non-tail-call
 18059 0000CF43 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 18060 0000CF4B 803805                  	cmp byte [rax], T_undefined
 18061 0000CF4E 0F845EAF0000            	je L_error_fvar_undefined
 18062 0000CF54 50                      	push rax
 18063 0000CF55 6A01                    	push 1	; arg count
 18064 0000CF57 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18065 0000CF5B 803804                  	cmp byte [rax], T_closure
 18066 0000CF5E 0F85D2AF0000            	jne L_error_non_closure
 18067 0000CF64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18068 0000CF67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18069 0000CF6A 48890425[9E120000]      	mov qword [free_var_73], rax
 18070 0000CF72 48B8-                   	mov rax, sob_void
 18070 0000CF74 [0000000000000000] 
 18071                                  
 18072                                  	; preparing a non-tail-call
 18073 0000CF7C 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 18074 0000CF84 803805                  	cmp byte [rax], T_undefined
 18075 0000CF87 0F8425AF0000            	je L_error_fvar_undefined
 18076 0000CF8D 50                      	push rax
 18077 0000CF8E 6A01                    	push 1	; arg count
 18078 0000CF90 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18079 0000CF94 803804                  	cmp byte [rax], T_closure
 18080 0000CF97 0F8599AF0000            	jne L_error_non_closure
 18081 0000CF9D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18082 0000CFA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18083 0000CFA3 48890425[C0120000]      	mov qword [free_var_75], rax
 18084 0000CFAB 48B8-                   	mov rax, sob_void
 18084 0000CFAD [0000000000000000] 
 18085                                  
 18086                                  	; preparing a non-tail-call
 18087 0000CFB5 488B0425[3C0E0000]      	mov rax, qword [free_var_7]	; free var >
 18088 0000CFBD 803805                  	cmp byte [rax], T_undefined
 18089 0000CFC0 0F84ECAE0000            	je L_error_fvar_undefined
 18090 0000CFC6 50                      	push rax
 18091 0000CFC7 6A01                    	push 1	; arg count
 18092 0000CFC9 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18093 0000CFCD 803804                  	cmp byte [rax], T_closure
 18094 0000CFD0 0F8560AF0000            	jne L_error_non_closure
 18095 0000CFD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18096 0000CFD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18097 0000CFDC 48890425[E2120000]      	mov qword [free_var_77], rax
 18098 0000CFE4 48B8-                   	mov rax, sob_void
 18098 0000CFE6 [0000000000000000] 
 18099                                  
 18100                                  	; preparing a non-tail-call
 18101 0000CFEE 488B0425[4D0E0000]      	mov rax, qword [free_var_8]	; free var >=
 18102 0000CFF6 803805                  	cmp byte [rax], T_undefined
 18103 0000CFF9 0F84B3AE0000            	je L_error_fvar_undefined
 18104 0000CFFF 50                      	push rax
 18105 0000D000 6A01                    	push 1	; arg count
 18106 0000D002 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18107 0000D006 803804                  	cmp byte [rax], T_closure
 18108 0000D009 0F8527AF0000            	jne L_error_non_closure
 18109 0000D00F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18110 0000D012 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18111 0000D015 48890425[D1120000]      	mov qword [free_var_76], rax
 18112 0000D01D 48B8-                   	mov rax, sob_void
 18112 0000D01F [0000000000000000] 
 18113 0000D027 C9                      	leave
 18114 0000D028 C21800                  	ret AND_KILL_FRAME(1)
 18115                                  .L_lambda_simple_end_005f:	; new closure is in rax
 18116 0000D02B 803804                  	cmp byte [rax], T_closure
 18117 0000D02E 0F8502AF0000            	jne L_error_non_closure
 18118 0000D034 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18119 0000D037 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18120                                  
 18121 0000D03A 4889C7                  	mov rdi, rax
 18122 0000D03D E8F2B10000              	call print_sexpr_if_not_void
 18123 0000D042 48B8-                   	mov rax, L_constants + 0
 18123 0000D044 [0000000000000000] 
 18124 0000D04C 48890425[7C120000]      	mov qword [free_var_71], rax
 18125 0000D054 48B8-                   	mov rax, sob_void
 18125 0000D056 [0000000000000000] 
 18126                                  
 18127 0000D05E 4889C7                  	mov rdi, rax
 18128 0000D061 E8CEB10000              	call print_sexpr_if_not_void
 18129 0000D066 48B8-                   	mov rax, L_constants + 0
 18129 0000D068 [0000000000000000] 
 18130 0000D070 48890425[8D120000]      	mov qword [free_var_72], rax
 18131 0000D078 48B8-                   	mov rax, sob_void
 18131 0000D07A [0000000000000000] 
 18132                                  
 18133 0000D082 4889C7                  	mov rdi, rax
 18134 0000D085 E8AAB10000              	call print_sexpr_if_not_void
 18135                                  	; preparing a non-tail-call
 18136                                  	; preparing a non-tail-call
 18137                                  	; preparing a non-tail-call
 18138 0000D08A 48B8-                   	mov rax, L_constants + 2569
 18138 0000D08C [090A000000000000] 
 18139 0000D094 50                      	push rax
 18140 0000D095 6A01                    	push 1	; arg count
 18141 0000D097 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18142 0000D09F 803805                  	cmp byte [rax], T_undefined
 18143 0000D0A2 0F840AAE0000            	je L_error_fvar_undefined
 18144 0000D0A8 803804                  	cmp byte [rax], T_closure
 18145 0000D0AB 0F8585AE0000            	jne L_error_non_closure
 18146 0000D0B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18147 0000D0B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18148 0000D0B7 50                      	push rax
 18149                                  	; preparing a non-tail-call
 18150 0000D0B8 48B8-                   	mov rax, L_constants + 2573
 18150 0000D0BA [0D0A000000000000] 
 18151 0000D0C2 50                      	push rax
 18152 0000D0C3 6A01                    	push 1	; arg count
 18153 0000D0C5 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18154 0000D0CD 803805                  	cmp byte [rax], T_undefined
 18155 0000D0D0 0F84DCAD0000            	je L_error_fvar_undefined
 18156 0000D0D6 803804                  	cmp byte [rax], T_closure
 18157 0000D0D9 0F8557AE0000            	jne L_error_non_closure
 18158 0000D0DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 18159 0000D0E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18160 0000D0E5 50                      	push rax
 18161 0000D0E6 6A02                    	push 2	; arg count
 18162 0000D0E8 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 18163 0000D0F0 803805                  	cmp byte [rax], T_undefined
 18164 0000D0F3 0F84B9AD0000            	je L_error_fvar_undefined
 18165 0000D0F9 803804                  	cmp byte [rax], T_closure
 18166 0000D0FC 0F8534AE0000            	jne L_error_non_closure
 18167 0000D102 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18168 0000D105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18169 0000D108 50                      	push rax
 18170 0000D109 6A01                    	push 1	; arg count
 18171 0000D10B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18172 0000D110 E8CAAE0000              	call malloc
 18173 0000D115 50                      	push rax
 18174 0000D116 BF00000000              	mov rdi, 8 * 0	; new rib
 18175 0000D11B E8BFAE0000              	call malloc
 18176 0000D120 50                      	push rax
 18177 0000D121 BF08000000              	mov rdi, 8 * 1	; extended env
 18178 0000D126 E8B4AE0000              	call malloc
 18179 0000D12B 488B7D10                	mov rdi, ENV
 18180 0000D12F BE00000000              	mov rsi, 0
 18181 0000D134 BA01000000              	mov rdx, 1
 18182                                  .L_lambda_simple_env_loop_0060:	; ext_env[i + 1] <-- env[i]
 18183 0000D139 4883FE00                	cmp rsi, 0
 18184 0000D13D 7410                    	je .L_lambda_simple_env_end_0060
 18185 0000D13F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18186 0000D143 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18187 0000D147 48FFC6                  	inc rsi
 18188 0000D14A 48FFC2                  	inc rdx
 18189 0000D14D EBEA                    	jmp .L_lambda_simple_env_loop_0060
 18190                                  .L_lambda_simple_env_end_0060:
 18191 0000D14F 5B                      	pop rbx
 18192 0000D150 BE00000000              	mov rsi, 0
 18193                                  .L_lambda_simple_params_loop_0060:	; copy params
 18194 0000D155 4883FE00                	cmp rsi, 0
 18195 0000D159 740E                    	je .L_lambda_simple_params_end_0060
 18196 0000D15B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18197 0000D160 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18198 0000D164 48FFC6                  	inc rsi
 18199 0000D167 EBEC                    	jmp .L_lambda_simple_params_loop_0060
 18200                                  .L_lambda_simple_params_end_0060:
 18201 0000D169 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18202 0000D16C 4889C3                  	mov rbx, rax
 18203 0000D16F 58                      	pop rax
 18204 0000D170 C60004                  	mov byte [rax], T_closure
 18205 0000D173 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18206 0000D177 48C74009[84D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0060
 18207 0000D17F E97F030000              	jmp .L_lambda_simple_end_0060
 18208                                  .L_lambda_simple_code_0060:	; lambda-simple body
 18209 0000D184 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18210 0000D18A 740B                    	je .L_lambda_simple_arity_check_ok_0060
 18211 0000D18C FF742410                	push qword [rsp + 8 * 2]
 18212 0000D190 6A01                    	push 1
 18213 0000D192 E901AE0000              	jmp L_error_incorrect_arity_simple
 18214                                  .L_lambda_simple_arity_check_ok_0060:
 18215 0000D197 C8000000                	enter 0, 0
 18216 0000D19B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18217 0000D1A0 E83AAE0000              	call malloc
 18218 0000D1A5 50                      	push rax
 18219 0000D1A6 BF08000000              	mov rdi, 8 * 1	; new rib
 18220 0000D1AB E82FAE0000              	call malloc
 18221 0000D1B0 50                      	push rax
 18222 0000D1B1 BF10000000              	mov rdi, 8 * 2	; extended env
 18223 0000D1B6 E824AE0000              	call malloc
 18224 0000D1BB 488B7D10                	mov rdi, ENV
 18225 0000D1BF BE00000000              	mov rsi, 0
 18226 0000D1C4 BA01000000              	mov rdx, 1
 18227                                  .L_lambda_simple_env_loop_0061:	; ext_env[i + 1] <-- env[i]
 18228 0000D1C9 4883FE01                	cmp rsi, 1
 18229 0000D1CD 7410                    	je .L_lambda_simple_env_end_0061
 18230 0000D1CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18231 0000D1D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18232 0000D1D7 48FFC6                  	inc rsi
 18233 0000D1DA 48FFC2                  	inc rdx
 18234 0000D1DD EBEA                    	jmp .L_lambda_simple_env_loop_0061
 18235                                  .L_lambda_simple_env_end_0061:
 18236 0000D1DF 5B                      	pop rbx
 18237 0000D1E0 BE00000000              	mov rsi, 0
 18238                                  .L_lambda_simple_params_loop_0061:	; copy params
 18239 0000D1E5 4883FE01                	cmp rsi, 1
 18240 0000D1E9 740E                    	je .L_lambda_simple_params_end_0061
 18241 0000D1EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18242 0000D1F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18243 0000D1F4 48FFC6                  	inc rsi
 18244 0000D1F7 EBEC                    	jmp .L_lambda_simple_params_loop_0061
 18245                                  .L_lambda_simple_params_end_0061:
 18246 0000D1F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18247 0000D1FC 4889C3                  	mov rbx, rax
 18248 0000D1FF 58                      	pop rax
 18249 0000D200 C60004                  	mov byte [rax], T_closure
 18250 0000D203 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18251 0000D207 48C74009[14D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0061
 18252 0000D20F E927010000              	jmp .L_lambda_simple_end_0061
 18253                                  .L_lambda_simple_code_0061:	; lambda-simple body
 18254 0000D214 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18255 0000D21A 740B                    	je .L_lambda_simple_arity_check_ok_0061
 18256 0000D21C FF742410                	push qword [rsp + 8 * 2]
 18257 0000D220 6A01                    	push 1
 18258 0000D222 E971AD0000              	jmp L_error_incorrect_arity_simple
 18259                                  .L_lambda_simple_arity_check_ok_0061:
 18260 0000D227 C8000000                	enter 0, 0
 18261                                  	; preparing a non-tail-call
 18262 0000D22B 48B8-                   	mov rax, L_constants + 2571
 18262 0000D22D [0B0A000000000000] 
 18263 0000D235 50                      	push rax
 18264 0000D236 488B4520                	mov rax, PARAM(0)	; param ch
 18265 0000D23A 50                      	push rax
 18266 0000D23B 48B8-                   	mov rax, L_constants + 2569
 18266 0000D23D [090A000000000000] 
 18267 0000D245 50                      	push rax
 18268 0000D246 6A03                    	push 3	; arg count
 18269 0000D248 488B0425[9E120000]      	mov rax, qword [free_var_73]	; free var char<=?
 18270 0000D250 803805                  	cmp byte [rax], T_undefined
 18271 0000D253 0F8459AC0000            	je L_error_fvar_undefined
 18272 0000D259 803804                  	cmp byte [rax], T_closure
 18273 0000D25C 0F85D4AC0000            	jne L_error_non_closure
 18274 0000D262 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18275 0000D265 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18276 0000D268 483D[02000000]          	cmp rax, sob_boolean_false
 18277 0000D26E 0F84BF000000            	je .L_if_else_0059
 18278                                  	; preparing a tail-call
 18279                                  	; preparing a non-tail-call
 18280 0000D274 488B4510                	mov rax, ENV
 18281 0000D278 488B00                  	mov rax, qword [rax + 8 * 0]
 18282 0000D27B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18283 0000D27E 50                      	push rax
 18284                                  	; preparing a non-tail-call
 18285 0000D27F 488B4520                	mov rax, PARAM(0)	; param ch
 18286 0000D283 50                      	push rax
 18287 0000D284 6A01                    	push 1	; arg count
 18288 0000D286 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18289 0000D28E 803805                  	cmp byte [rax], T_undefined
 18290 0000D291 0F841BAC0000            	je L_error_fvar_undefined
 18291 0000D297 803804                  	cmp byte [rax], T_closure
 18292 0000D29A 0F8596AC0000            	jne L_error_non_closure
 18293 0000D2A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18294 0000D2A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18295 0000D2A6 50                      	push rax
 18296 0000D2A7 6A02                    	push 2	; arg count
 18297 0000D2A9 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 18298 0000D2B1 803805                  	cmp byte [rax], T_undefined
 18299 0000D2B4 0F84F8AB0000            	je L_error_fvar_undefined
 18300 0000D2BA 803804                  	cmp byte [rax], T_closure
 18301 0000D2BD 0F8573AC0000            	jne L_error_non_closure
 18302 0000D2C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18303 0000D2C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18304 0000D2C9 50                      	push rax
 18305 0000D2CA 6A01                    	push 1	; arg count
 18306 0000D2CC 488B0425[AE130000]      	mov rax, qword [free_var_89]	; free var integer->char
 18307 0000D2D4 803805                  	cmp byte [rax], T_undefined
 18308 0000D2D7 0F84D5AB0000            	je L_error_fvar_undefined
 18309 0000D2DD 803804                  	cmp byte [rax], T_closure
 18310 0000D2E0 0F8550AC0000            	jne L_error_non_closure
 18311 0000D2E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18312 0000D2E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18313 0000D2EC FF7500                  	push qword[rbp]
 18314 0000D2EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18315 0000D2F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18316 0000D2F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18317 0000D2FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18318 0000D2FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18319 0000D301 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18320 0000D304 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18321 0000D309 4983C103                	add r9, 3 	 ;for getting to the params
 18322 0000D30D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18323 0000D311 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18324                                  .L_tc_recycle_frame_loop_00ac:
 18325 0000D314 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18326 0000D317 7410                    	je .L_tc_recycle_frame_done_00ac
 18327 0000D319 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18328 0000D31C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18329 0000D31F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18330 0000D323 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18331 0000D327 EBEB                    	jmp .L_tc_recycle_frame_loop_00ac
 18332                                  .L_tc_recycle_frame_done_00ac:
 18333 0000D329 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18334 0000D32A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18335 0000D32E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18336 0000D331 EB04                    	jmp .L_if_end_0059
 18337                                  .L_if_else_0059:
 18338 0000D333 488B4520                	mov rax, PARAM(0)	; param ch
 18339                                  .L_if_end_0059:
 18340 0000D337 C9                      	leave
 18341 0000D338 C21800                  	ret AND_KILL_FRAME(1)
 18342                                  .L_lambda_simple_end_0061:	; new closure is in rax
 18343 0000D33B 48890425[7C120000]      	mov qword [free_var_71], rax
 18344 0000D343 48B8-                   	mov rax, sob_void
 18344 0000D345 [0000000000000000] 
 18345                                  
 18346 0000D34D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18347 0000D352 E888AC0000              	call malloc
 18348 0000D357 50                      	push rax
 18349 0000D358 BF08000000              	mov rdi, 8 * 1	; new rib
 18350 0000D35D E87DAC0000              	call malloc
 18351 0000D362 50                      	push rax
 18352 0000D363 BF10000000              	mov rdi, 8 * 2	; extended env
 18353 0000D368 E872AC0000              	call malloc
 18354 0000D36D 488B7D10                	mov rdi, ENV
 18355 0000D371 BE00000000              	mov rsi, 0
 18356 0000D376 BA01000000              	mov rdx, 1
 18357                                  .L_lambda_simple_env_loop_0062:	; ext_env[i + 1] <-- env[i]
 18358 0000D37B 4883FE01                	cmp rsi, 1
 18359 0000D37F 7410                    	je .L_lambda_simple_env_end_0062
 18360 0000D381 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18361 0000D385 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18362 0000D389 48FFC6                  	inc rsi
 18363 0000D38C 48FFC2                  	inc rdx
 18364 0000D38F EBEA                    	jmp .L_lambda_simple_env_loop_0062
 18365                                  .L_lambda_simple_env_end_0062:
 18366 0000D391 5B                      	pop rbx
 18367 0000D392 BE00000000              	mov rsi, 0
 18368                                  .L_lambda_simple_params_loop_0062:	; copy params
 18369 0000D397 4883FE01                	cmp rsi, 1
 18370 0000D39B 740E                    	je .L_lambda_simple_params_end_0062
 18371 0000D39D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18372 0000D3A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18373 0000D3A6 48FFC6                  	inc rsi
 18374 0000D3A9 EBEC                    	jmp .L_lambda_simple_params_loop_0062
 18375                                  .L_lambda_simple_params_end_0062:
 18376 0000D3AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18377 0000D3AE 4889C3                  	mov rbx, rax
 18378 0000D3B1 58                      	pop rax
 18379 0000D3B2 C60004                  	mov byte [rax], T_closure
 18380 0000D3B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18381 0000D3B9 48C74009[C6D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0062
 18382 0000D3C1 E927010000              	jmp .L_lambda_simple_end_0062
 18383                                  .L_lambda_simple_code_0062:	; lambda-simple body
 18384 0000D3C6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18385 0000D3CC 740B                    	je .L_lambda_simple_arity_check_ok_0062
 18386 0000D3CE FF742410                	push qword [rsp + 8 * 2]
 18387 0000D3D2 6A01                    	push 1
 18388 0000D3D4 E9BFAB0000              	jmp L_error_incorrect_arity_simple
 18389                                  .L_lambda_simple_arity_check_ok_0062:
 18390 0000D3D9 C8000000                	enter 0, 0
 18391                                  	; preparing a non-tail-call
 18392 0000D3DD 48B8-                   	mov rax, L_constants + 2575
 18392 0000D3DF [0F0A000000000000] 
 18393 0000D3E7 50                      	push rax
 18394 0000D3E8 488B4520                	mov rax, PARAM(0)	; param ch
 18395 0000D3EC 50                      	push rax
 18396 0000D3ED 48B8-                   	mov rax, L_constants + 2573
 18396 0000D3EF [0D0A000000000000] 
 18397 0000D3F7 50                      	push rax
 18398 0000D3F8 6A03                    	push 3	; arg count
 18399 0000D3FA 488B0425[9E120000]      	mov rax, qword [free_var_73]	; free var char<=?
 18400 0000D402 803805                  	cmp byte [rax], T_undefined
 18401 0000D405 0F84A7AA0000            	je L_error_fvar_undefined
 18402 0000D40B 803804                  	cmp byte [rax], T_closure
 18403 0000D40E 0F8522AB0000            	jne L_error_non_closure
 18404 0000D414 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18405 0000D417 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18406 0000D41A 483D[02000000]          	cmp rax, sob_boolean_false
 18407 0000D420 0F84BF000000            	je .L_if_else_005a
 18408                                  	; preparing a tail-call
 18409                                  	; preparing a non-tail-call
 18410 0000D426 488B4510                	mov rax, ENV
 18411 0000D42A 488B00                  	mov rax, qword [rax + 8 * 0]
 18412 0000D42D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18413 0000D430 50                      	push rax
 18414                                  	; preparing a non-tail-call
 18415 0000D431 488B4520                	mov rax, PARAM(0)	; param ch
 18416 0000D435 50                      	push rax
 18417 0000D436 6A01                    	push 1	; arg count
 18418 0000D438 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18419 0000D440 803805                  	cmp byte [rax], T_undefined
 18420 0000D443 0F8469AA0000            	je L_error_fvar_undefined
 18421 0000D449 803804                  	cmp byte [rax], T_closure
 18422 0000D44C 0F85E4AA0000            	jne L_error_non_closure
 18423 0000D452 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18424 0000D455 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18425 0000D458 50                      	push rax
 18426 0000D459 6A02                    	push 2	; arg count
 18427 0000D45B 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 18428 0000D463 803805                  	cmp byte [rax], T_undefined
 18429 0000D466 0F8446AA0000            	je L_error_fvar_undefined
 18430 0000D46C 803804                  	cmp byte [rax], T_closure
 18431 0000D46F 0F85C1AA0000            	jne L_error_non_closure
 18432 0000D475 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18433 0000D478 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18434 0000D47B 50                      	push rax
 18435 0000D47C 6A01                    	push 1	; arg count
 18436 0000D47E 488B0425[AE130000]      	mov rax, qword [free_var_89]	; free var integer->char
 18437 0000D486 803805                  	cmp byte [rax], T_undefined
 18438 0000D489 0F8423AA0000            	je L_error_fvar_undefined
 18439 0000D48F 803804                  	cmp byte [rax], T_closure
 18440 0000D492 0F859EAA0000            	jne L_error_non_closure
 18441 0000D498 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18442 0000D49B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18443 0000D49E FF7500                  	push qword[rbp]
 18444 0000D4A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18445 0000D4A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18446 0000D4A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18447 0000D4AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18448 0000D4B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18449 0000D4B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18450 0000D4B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18451 0000D4BB 4983C103                	add r9, 3 	 ;for getting to the params
 18452 0000D4BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18453 0000D4C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18454                                  .L_tc_recycle_frame_loop_00ad:
 18455 0000D4C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18456 0000D4C9 7410                    	je .L_tc_recycle_frame_done_00ad
 18457 0000D4CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18458 0000D4CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18459 0000D4D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18460 0000D4D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18461 0000D4D9 EBEB                    	jmp .L_tc_recycle_frame_loop_00ad
 18462                                  .L_tc_recycle_frame_done_00ad:
 18463 0000D4DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18464 0000D4DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18465 0000D4E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18466 0000D4E3 EB04                    	jmp .L_if_end_005a
 18467                                  .L_if_else_005a:
 18468 0000D4E5 488B4520                	mov rax, PARAM(0)	; param ch
 18469                                  .L_if_end_005a:
 18470 0000D4E9 C9                      	leave
 18471 0000D4EA C21800                  	ret AND_KILL_FRAME(1)
 18472                                  .L_lambda_simple_end_0062:	; new closure is in rax
 18473 0000D4ED 48890425[8D120000]      	mov qword [free_var_72], rax
 18474 0000D4F5 48B8-                   	mov rax, sob_void
 18474 0000D4F7 [0000000000000000] 
 18475 0000D4FF C9                      	leave
 18476 0000D500 C21800                  	ret AND_KILL_FRAME(1)
 18477                                  .L_lambda_simple_end_0060:	; new closure is in rax
 18478 0000D503 803804                  	cmp byte [rax], T_closure
 18479 0000D506 0F852AAA0000            	jne L_error_non_closure
 18480 0000D50C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18481 0000D50F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18482                                  
 18483 0000D512 4889C7                  	mov rdi, rax
 18484 0000D515 E81AAD0000              	call print_sexpr_if_not_void
 18485 0000D51A 48B8-                   	mov rax, L_constants + 0
 18485 0000D51C [0000000000000000] 
 18486 0000D524 48890425[38120000]      	mov qword [free_var_67], rax
 18487 0000D52C 48B8-                   	mov rax, sob_void
 18487 0000D52E [0000000000000000] 
 18488                                  
 18489 0000D536 4889C7                  	mov rdi, rax
 18490 0000D539 E8F6AC0000              	call print_sexpr_if_not_void
 18491 0000D53E 48B8-                   	mov rax, L_constants + 0
 18491 0000D540 [0000000000000000] 
 18492 0000D548 48890425[27120000]      	mov qword [free_var_66], rax
 18493 0000D550 48B8-                   	mov rax, sob_void
 18493 0000D552 [0000000000000000] 
 18494                                  
 18495 0000D55A 4889C7                  	mov rdi, rax
 18496 0000D55D E8D2AC0000              	call print_sexpr_if_not_void
 18497 0000D562 48B8-                   	mov rax, L_constants + 0
 18497 0000D564 [0000000000000000] 
 18498 0000D56C 48890425[49120000]      	mov qword [free_var_68], rax
 18499 0000D574 48B8-                   	mov rax, sob_void
 18499 0000D576 [0000000000000000] 
 18500                                  
 18501 0000D57E 4889C7                  	mov rdi, rax
 18502 0000D581 E8AEAC0000              	call print_sexpr_if_not_void
 18503 0000D586 48B8-                   	mov rax, L_constants + 0
 18503 0000D588 [0000000000000000] 
 18504 0000D590 48890425[6B120000]      	mov qword [free_var_70], rax
 18505 0000D598 48B8-                   	mov rax, sob_void
 18505 0000D59A [0000000000000000] 
 18506                                  
 18507 0000D5A2 4889C7                  	mov rdi, rax
 18508 0000D5A5 E88AAC0000              	call print_sexpr_if_not_void
 18509 0000D5AA 48B8-                   	mov rax, L_constants + 0
 18509 0000D5AC [0000000000000000] 
 18510 0000D5B4 48890425[5A120000]      	mov qword [free_var_69], rax
 18511 0000D5BC 48B8-                   	mov rax, sob_void
 18511 0000D5BE [0000000000000000] 
 18512                                  
 18513 0000D5C6 4889C7                  	mov rdi, rax
 18514 0000D5C9 E866AC0000              	call print_sexpr_if_not_void
 18515                                  	; preparing a non-tail-call
 18516 0000D5CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18517 0000D5D3 E807AA0000              	call malloc
 18518 0000D5D8 50                      	push rax
 18519 0000D5D9 BF00000000              	mov rdi, 8 * 0	; new rib
 18520 0000D5DE E8FCA90000              	call malloc
 18521 0000D5E3 50                      	push rax
 18522 0000D5E4 BF08000000              	mov rdi, 8 * 1	; extended env
 18523 0000D5E9 E8F1A90000              	call malloc
 18524 0000D5EE 488B7D10                	mov rdi, ENV
 18525 0000D5F2 BE00000000              	mov rsi, 0
 18526 0000D5F7 BA01000000              	mov rdx, 1
 18527                                  .L_lambda_simple_env_loop_0063:	; ext_env[i + 1] <-- env[i]
 18528 0000D5FC 4883FE00                	cmp rsi, 0
 18529 0000D600 7410                    	je .L_lambda_simple_env_end_0063
 18530 0000D602 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18531 0000D606 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18532 0000D60A 48FFC6                  	inc rsi
 18533 0000D60D 48FFC2                  	inc rdx
 18534 0000D610 EBEA                    	jmp .L_lambda_simple_env_loop_0063
 18535                                  .L_lambda_simple_env_end_0063:
 18536 0000D612 5B                      	pop rbx
 18537 0000D613 BE00000000              	mov rsi, 0
 18538                                  .L_lambda_simple_params_loop_0063:	; copy params
 18539 0000D618 4883FE00                	cmp rsi, 0
 18540 0000D61C 740E                    	je .L_lambda_simple_params_end_0063
 18541 0000D61E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18542 0000D623 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18543 0000D627 48FFC6                  	inc rsi
 18544 0000D62A EBEC                    	jmp .L_lambda_simple_params_loop_0063
 18545                                  .L_lambda_simple_params_end_0063:
 18546 0000D62C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18547 0000D62F 4889C3                  	mov rbx, rax
 18548 0000D632 58                      	pop rax
 18549 0000D633 C60004                  	mov byte [rax], T_closure
 18550 0000D636 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18551 0000D63A 48C74009[47D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0063
 18552 0000D642 E925050000              	jmp .L_lambda_simple_end_0063
 18553                                  .L_lambda_simple_code_0063:	; lambda-simple body
 18554 0000D647 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18555 0000D64D 740B                    	je .L_lambda_simple_arity_check_ok_0063
 18556 0000D64F FF742410                	push qword [rsp + 8 * 2]
 18557 0000D653 6A01                    	push 1
 18558 0000D655 E93EA90000              	jmp L_error_incorrect_arity_simple
 18559                                  .L_lambda_simple_arity_check_ok_0063:
 18560 0000D65A C8000000                	enter 0, 0
 18561 0000D65E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18562 0000D663 E877A90000              	call malloc
 18563 0000D668 50                      	push rax
 18564 0000D669 BF08000000              	mov rdi, 8 * 1	; new rib
 18565 0000D66E E86CA90000              	call malloc
 18566 0000D673 50                      	push rax
 18567 0000D674 BF10000000              	mov rdi, 8 * 2	; extended env
 18568 0000D679 E861A90000              	call malloc
 18569 0000D67E 488B7D10                	mov rdi, ENV
 18570 0000D682 BE00000000              	mov rsi, 0
 18571 0000D687 BA01000000              	mov rdx, 1
 18572                                  .L_lambda_opt_env_loop_0010:	; ext_env[i + 1] <-- env[i]
 18573 0000D68C 4883FE01                	cmp rsi, 1
 18574 0000D690 7410                    	je .L_lambda_opt_env_end_0010
 18575 0000D692 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18576 0000D696 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18577 0000D69A 48FFC6                  	inc rsi
 18578 0000D69D 48FFC2                  	inc rdx
 18579 0000D6A0 EBEA                    	jmp .L_lambda_opt_env_loop_0010
 18580                                  .L_lambda_opt_env_end_0010:
 18581 0000D6A2 5B                      	pop rbx
 18582 0000D6A3 BE00000000              	mov rsi, 0
 18583                                  .L_lambda_opt_params_loop_0010:	; copy params
 18584 0000D6A8 4883FE01                	cmp rsi, 1
 18585 0000D6AC 740E                    	je .L_lambda_opt_params_end_0010
 18586 0000D6AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18587 0000D6B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18588 0000D6B7 48FFC6                  	inc rsi
 18589 0000D6BA EBEC                    	jmp .L_lambda_opt_params_loop_0010
 18590                                  .L_lambda_opt_params_end_0010:
 18591 0000D6BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18592 0000D6BF 4889C3                  	mov rbx, rax
 18593 0000D6C2 58                      	pop rax
 18594 0000D6C3 C60004                  	mov byte [rax], T_closure
 18595 0000D6C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18596 0000D6CA 48C74009[D7D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0010
 18597 0000D6D2 E991040000              	jmp .L_lambda_opt_end_0010
 18598                                  .L_lambda_opt_code_0010:	; lambda-opt body
 18599 0000D6D7 48837C241000            	cmp qword [rsp + 8 * 2], 0
 18600 0000D6DD 7411                    	je .L_lambda_opt_arity_check_exact_0010
 18601 0000D6DF 0F8F06020000            	jg .L_lambda_opt_arity_check_more_0010
 18602 0000D6E5 FF742410                	push qword [rsp + 8 * 2]
 18603 0000D6E9 6A00                    	push 0
 18604 0000D6EB E9BCA80000              	jmp L_error_incorrect_arity_opt
 18605                                  .L_lambda_opt_arity_check_exact_0010:
 18606 0000D6F0 4883EC08                	sub rsp, 8
 18607 0000D6F4 488B442408              	mov rax, qword[rsp + 8 *1]
 18608 0000D6F9 48890424                	mov qword[rsp], rax  
 18609 0000D6FD 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 18610 0000D702 4889442408              	mov qword[rsp + 8 * 1], rax
 18611 0000D707 B801000000              	mov rax, 1
 18612 0000D70C 4889442410              	mov qword[rsp + 8 *2], rax
 18613 0000D711 48B8-                   	mov rax, sob_nil
 18613 0000D713 [0100000000000000] 
 18614 0000D71B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 18615 0000D720 C8000000                	enter 0, 0
 18616                                  	; preparing a tail-call
 18617                                  	; preparing a non-tail-call
 18618 0000D724 488B4520                	mov rax, PARAM(0)	; param s
 18619 0000D728 50                      	push rax
 18620 0000D729 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18621 0000D72E E8ACA80000              	call malloc
 18622 0000D733 50                      	push rax
 18623 0000D734 BF08000000              	mov rdi, 8 * 1	; new rib
 18624 0000D739 E8A1A80000              	call malloc
 18625 0000D73E 50                      	push rax
 18626 0000D73F BF18000000              	mov rdi, 8 * 3	; extended env
 18627 0000D744 E896A80000              	call malloc
 18628 0000D749 488B7D10                	mov rdi, ENV
 18629 0000D74D BE00000000              	mov rsi, 0
 18630 0000D752 BA01000000              	mov rdx, 1
 18631                                  .L_lambda_simple_env_loop_0065:	; ext_env[i + 1] <-- env[i]
 18632 0000D757 4883FE02                	cmp rsi, 2
 18633 0000D75B 7410                    	je .L_lambda_simple_env_end_0065
 18634 0000D75D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18635 0000D761 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18636 0000D765 48FFC6                  	inc rsi
 18637 0000D768 48FFC2                  	inc rdx
 18638 0000D76B EBEA                    	jmp .L_lambda_simple_env_loop_0065
 18639                                  .L_lambda_simple_env_end_0065:
 18640 0000D76D 5B                      	pop rbx
 18641 0000D76E BE00000000              	mov rsi, 0
 18642                                  .L_lambda_simple_params_loop_0065:	; copy params
 18643 0000D773 4883FE01                	cmp rsi, 1
 18644 0000D777 740E                    	je .L_lambda_simple_params_end_0065
 18645 0000D779 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18646 0000D77E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18647 0000D782 48FFC6                  	inc rsi
 18648 0000D785 EBEC                    	jmp .L_lambda_simple_params_loop_0065
 18649                                  .L_lambda_simple_params_end_0065:
 18650 0000D787 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18651 0000D78A 4889C3                  	mov rbx, rax
 18652 0000D78D 58                      	pop rax
 18653 0000D78E C60004                  	mov byte [rax], T_closure
 18654 0000D791 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18655 0000D795 48C74009[A2D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0065
 18656 0000D79D E9AA000000              	jmp .L_lambda_simple_end_0065
 18657                                  .L_lambda_simple_code_0065:	; lambda-simple body
 18658 0000D7A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18659 0000D7A8 740B                    	je .L_lambda_simple_arity_check_ok_0065
 18660 0000D7AA FF742410                	push qword [rsp + 8 * 2]
 18661 0000D7AE 6A01                    	push 1
 18662 0000D7B0 E9E3A70000              	jmp L_error_incorrect_arity_simple
 18663                                  .L_lambda_simple_arity_check_ok_0065:
 18664 0000D7B5 C8000000                	enter 0, 0
 18665                                  	; preparing a tail-call
 18666                                  	; preparing a non-tail-call
 18667 0000D7B9 488B4520                	mov rax, PARAM(0)	; param ch
 18668 0000D7BD 50                      	push rax
 18669 0000D7BE 6A01                    	push 1	; arg count
 18670 0000D7C0 488B0425[7C120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18671 0000D7C8 803805                  	cmp byte [rax], T_undefined
 18672 0000D7CB 0F84E1A60000            	je L_error_fvar_undefined
 18673 0000D7D1 803804                  	cmp byte [rax], T_closure
 18674 0000D7D4 0F855CA70000            	jne L_error_non_closure
 18675 0000D7DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 18676 0000D7DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18677 0000D7E0 50                      	push rax
 18678 0000D7E1 6A01                    	push 1	; arg count
 18679 0000D7E3 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18680 0000D7EB 803805                  	cmp byte [rax], T_undefined
 18681 0000D7EE 0F84BEA60000            	je L_error_fvar_undefined
 18682 0000D7F4 803804                  	cmp byte [rax], T_closure
 18683 0000D7F7 0F8539A70000            	jne L_error_non_closure
 18684 0000D7FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18685 0000D800 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18686 0000D803 FF7500                  	push qword[rbp]
 18687 0000D806 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18688 0000D809 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18689 0000D80D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18690 0000D811 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18691 0000D815 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18692 0000D818 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18693 0000D81B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18694 0000D820 4983C103                	add r9, 3 	 ;for getting to the params
 18695 0000D824 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18696 0000D828 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18697                                  .L_tc_recycle_frame_loop_00b0:
 18698 0000D82B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18699 0000D82E 7410                    	je .L_tc_recycle_frame_done_00b0
 18700 0000D830 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18701 0000D833 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18702 0000D836 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18703 0000D83A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18704 0000D83E EBEB                    	jmp .L_tc_recycle_frame_loop_00b0
 18705                                  .L_tc_recycle_frame_done_00b0:
 18706 0000D840 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18707 0000D841 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18708 0000D845 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18709 0000D848 C9                      	leave
 18710 0000D849 C21800                  	ret AND_KILL_FRAME(1)
 18711                                  .L_lambda_simple_end_0065:	; new closure is in rax
 18712 0000D84C 50                      	push rax
 18713 0000D84D 6A02                    	push 2	; arg count
 18714 0000D84F 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 18715 0000D857 803805                  	cmp byte [rax], T_undefined
 18716 0000D85A 0F8452A60000            	je L_error_fvar_undefined
 18717 0000D860 803804                  	cmp byte [rax], T_closure
 18718 0000D863 0F85CDA60000            	jne L_error_non_closure
 18719 0000D869 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18720 0000D86C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18721 0000D86F 50                      	push rax
 18722 0000D870 488B4510                	mov rax, ENV
 18723 0000D874 488B00                  	mov rax, qword [rax + 8 * 0]
 18724 0000D877 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18725 0000D87A 50                      	push rax
 18726 0000D87B 6A02                    	push 2	; arg count
 18727 0000D87D 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 18728 0000D885 803805                  	cmp byte [rax], T_undefined
 18729 0000D888 0F8424A60000            	je L_error_fvar_undefined
 18730 0000D88E 803804                  	cmp byte [rax], T_closure
 18731 0000D891 0F859FA60000            	jne L_error_non_closure
 18732 0000D897 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18733 0000D89A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18734 0000D89D FF7500                  	push qword[rbp]
 18735 0000D8A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18736 0000D8A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18737 0000D8A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18738 0000D8AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18739 0000D8AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18740 0000D8B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18741 0000D8B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18742 0000D8BA 4983C103                	add r9, 3 	 ;for getting to the params
 18743 0000D8BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18744 0000D8C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18745                                  .L_tc_recycle_frame_loop_00b1:
 18746 0000D8C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18747 0000D8C8 7410                    	je .L_tc_recycle_frame_done_00b1
 18748 0000D8CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18749 0000D8CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18750 0000D8D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18751 0000D8D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18752 0000D8D8 EBEB                    	jmp .L_tc_recycle_frame_loop_00b1
 18753                                  .L_tc_recycle_frame_done_00b1:
 18754 0000D8DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18755 0000D8DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18756 0000D8DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18757 0000D8E2 C9                      	leave
 18758 0000D8E3 C21800                  	ret AND_KILL_FRAME(1)
 18759 0000D8E6 E97D020000              	jmp .L_lambda_opt_end_0010	; new closure is in rax
 18760                                  .L_lambda_opt_arity_check_more_0010:
 18761 0000D8EB 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 18762 0000D8F0 49B9-                   	mov r9, sob_nil
 18762 0000D8F2 [0100000000000000] 
 18763 0000D8FA 4889E3                  	mov rbx, rsp 
 18764 0000D8FD 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 18765 0000D901 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 18766 0000D904 49C1E003                	shl r8, 3
 18767 0000D908 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 18768 0000D90B 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 18769                                  .L_lambda_opt_stack_shrink_loop_0010:
 18770 0000D910 4983F800                	cmp r8, 0
 18771 0000D914 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0010
 18772 0000D916 BF11000000              	mov rdi, 1+8+8	;for pair
 18773 0000D91B E8BFA60000              	call malloc	 ;to create the pair in the stack
 18774 0000D920 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 18775 0000D923 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 18776 0000D926 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 18777 0000D92A 4C894809                 	mov qword[rax+1+8],r9
 18778 0000D92E 4989C1                  	mov r9, rax	 ; for the recursion 
 18779 0000D931 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 18780 0000D934 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 18781 0000D938 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0010
 18782                                  .L_lambda_opt_stack_shrink_loop_exit_0010:
 18783 0000D93A 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 18784 0000D93F 4883E901                	sub rcx, 1
 18785 0000D943 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 18786 0000D947 4801CC                  	add rsp, rcx	 ;shrinking the stack
 18787 0000D94A 4889E0                  	mov rax, rsp
 18788 0000D94D 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 18789 0000D950 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 18790 0000D954 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 18791 0000D957 4883C018                	add rax, 3 * 8 	;now rax is param 0
 18792 0000D95B 49C1E003                	shl r8, 3 	; convert to byte
 18793 0000D95F 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 18794 0000D962 4C8908                  	mov qword[rax], r9	;puting the list at the top
 18795 0000D965 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 18796 0000D969 4889E3                  	mov rbx, rsp 
 18797 0000D96C 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 18798 0000D96F 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 18799 0000D975 49FFCA                  	dec r10 
 18800 0000D978 49C1E203                	shl r10, 3	;to get bytes
 18801 0000D97C 4883C318                	add rbx, 3*8 	;rbx is the first param
 18802 0000D980 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 18803 0000D983 4889E0                  	mov rax, rsp
 18804 0000D986 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 18805 0000D989 48C744241001000000      	mov qword [rsp+2*8], 1
 18806 0000D992 488B5808                	mov rbx, qword[rax + 8 *1]
 18807 0000D996 48895C2408              	mov qword [rsp + 1*8] ,rbx
 18808 0000D99B 488B18                  	mov rbx, qword[rax]
 18809 0000D99E 48891C24                	mov qword [rsp], rbx
 18810 0000D9A2 C8000000                	enter 0, 0
 18811                                  	; preparing a tail-call
 18812                                  	; preparing a non-tail-call
 18813 0000D9A6 488B4520                	mov rax, PARAM(0)	; param s
 18814 0000D9AA 50                      	push rax
 18815 0000D9AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18816 0000D9B0 E82AA60000              	call malloc
 18817 0000D9B5 50                      	push rax
 18818 0000D9B6 BF08000000              	mov rdi, 8 * 1	; new rib
 18819 0000D9BB E81FA60000              	call malloc
 18820 0000D9C0 50                      	push rax
 18821 0000D9C1 BF18000000              	mov rdi, 8 * 3	; extended env
 18822 0000D9C6 E814A60000              	call malloc
 18823 0000D9CB 488B7D10                	mov rdi, ENV
 18824 0000D9CF BE00000000              	mov rsi, 0
 18825 0000D9D4 BA01000000              	mov rdx, 1
 18826                                  .L_lambda_simple_env_loop_0064:	; ext_env[i + 1] <-- env[i]
 18827 0000D9D9 4883FE02                	cmp rsi, 2
 18828 0000D9DD 7410                    	je .L_lambda_simple_env_end_0064
 18829 0000D9DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18830 0000D9E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18831 0000D9E7 48FFC6                  	inc rsi
 18832 0000D9EA 48FFC2                  	inc rdx
 18833 0000D9ED EBEA                    	jmp .L_lambda_simple_env_loop_0064
 18834                                  .L_lambda_simple_env_end_0064:
 18835 0000D9EF 5B                      	pop rbx
 18836 0000D9F0 BE00000000              	mov rsi, 0
 18837                                  .L_lambda_simple_params_loop_0064:	; copy params
 18838 0000D9F5 4883FE01                	cmp rsi, 1
 18839 0000D9F9 740E                    	je .L_lambda_simple_params_end_0064
 18840 0000D9FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18841 0000DA00 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18842 0000DA04 48FFC6                  	inc rsi
 18843 0000DA07 EBEC                    	jmp .L_lambda_simple_params_loop_0064
 18844                                  .L_lambda_simple_params_end_0064:
 18845 0000DA09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18846 0000DA0C 4889C3                  	mov rbx, rax
 18847 0000DA0F 58                      	pop rax
 18848 0000DA10 C60004                  	mov byte [rax], T_closure
 18849 0000DA13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18850 0000DA17 48C74009[24DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0064
 18851 0000DA1F E9AA000000              	jmp .L_lambda_simple_end_0064
 18852                                  .L_lambda_simple_code_0064:	; lambda-simple body
 18853 0000DA24 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18854 0000DA2A 740B                    	je .L_lambda_simple_arity_check_ok_0064
 18855 0000DA2C FF742410                	push qword [rsp + 8 * 2]
 18856 0000DA30 6A01                    	push 1
 18857 0000DA32 E961A50000              	jmp L_error_incorrect_arity_simple
 18858                                  .L_lambda_simple_arity_check_ok_0064:
 18859 0000DA37 C8000000                	enter 0, 0
 18860                                  	; preparing a tail-call
 18861                                  	; preparing a non-tail-call
 18862 0000DA3B 488B4520                	mov rax, PARAM(0)	; param ch
 18863 0000DA3F 50                      	push rax
 18864 0000DA40 6A01                    	push 1	; arg count
 18865 0000DA42 488B0425[7C120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18866 0000DA4A 803805                  	cmp byte [rax], T_undefined
 18867 0000DA4D 0F845FA40000            	je L_error_fvar_undefined
 18868 0000DA53 803804                  	cmp byte [rax], T_closure
 18869 0000DA56 0F85DAA40000            	jne L_error_non_closure
 18870 0000DA5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18871 0000DA5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18872 0000DA62 50                      	push rax
 18873 0000DA63 6A01                    	push 1	; arg count
 18874 0000DA65 488B0425[16120000]      	mov rax, qword [free_var_65]	; free var char->integer
 18875 0000DA6D 803805                  	cmp byte [rax], T_undefined
 18876 0000DA70 0F843CA40000            	je L_error_fvar_undefined
 18877 0000DA76 803804                  	cmp byte [rax], T_closure
 18878 0000DA79 0F85B7A40000            	jne L_error_non_closure
 18879 0000DA7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18880 0000DA82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18881 0000DA85 FF7500                  	push qword[rbp]
 18882 0000DA88 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18883 0000DA8B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18884 0000DA8F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18885 0000DA93 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18886 0000DA97 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18887 0000DA9A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18888 0000DA9D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18889 0000DAA2 4983C103                	add r9, 3 	 ;for getting to the params
 18890 0000DAA6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18891 0000DAAA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18892                                  .L_tc_recycle_frame_loop_00ae:
 18893 0000DAAD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18894 0000DAB0 7410                    	je .L_tc_recycle_frame_done_00ae
 18895 0000DAB2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18896 0000DAB5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18897 0000DAB8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18898 0000DABC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18899 0000DAC0 EBEB                    	jmp .L_tc_recycle_frame_loop_00ae
 18900                                  .L_tc_recycle_frame_done_00ae:
 18901 0000DAC2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18902 0000DAC3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18903 0000DAC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18904 0000DACA C9                      	leave
 18905 0000DACB C21800                  	ret AND_KILL_FRAME(1)
 18906                                  .L_lambda_simple_end_0064:	; new closure is in rax
 18907 0000DACE 50                      	push rax
 18908 0000DACF 6A02                    	push 2	; arg count
 18909 0000DAD1 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 18910 0000DAD9 803805                  	cmp byte [rax], T_undefined
 18911 0000DADC 0F84D0A30000            	je L_error_fvar_undefined
 18912 0000DAE2 803804                  	cmp byte [rax], T_closure
 18913 0000DAE5 0F854BA40000            	jne L_error_non_closure
 18914 0000DAEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18915 0000DAEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 18916 0000DAF1 50                      	push rax
 18917 0000DAF2 488B4510                	mov rax, ENV
 18918 0000DAF6 488B00                  	mov rax, qword [rax + 8 * 0]
 18919 0000DAF9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18920 0000DAFC 50                      	push rax
 18921 0000DAFD 6A02                    	push 2	; arg count
 18922 0000DAFF 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 18923 0000DB07 803805                  	cmp byte [rax], T_undefined
 18924 0000DB0A 0F84A2A30000            	je L_error_fvar_undefined
 18925 0000DB10 803804                  	cmp byte [rax], T_closure
 18926 0000DB13 0F851DA40000            	jne L_error_non_closure
 18927 0000DB19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18928 0000DB1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18929 0000DB1F FF7500                  	push qword[rbp]
 18930 0000DB22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18931 0000DB25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18932 0000DB29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18933 0000DB2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18934 0000DB31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18935 0000DB34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18936 0000DB37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18937 0000DB3C 4983C103                	add r9, 3 	 ;for getting to the params
 18938 0000DB40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18939 0000DB44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18940                                  .L_tc_recycle_frame_loop_00af:
 18941 0000DB47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18942 0000DB4A 7410                    	je .L_tc_recycle_frame_done_00af
 18943 0000DB4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18944 0000DB4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18945 0000DB52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18946 0000DB56 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18947 0000DB5A EBEB                    	jmp .L_tc_recycle_frame_loop_00af
 18948                                  .L_tc_recycle_frame_done_00af:
 18949 0000DB5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18950 0000DB5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18951 0000DB61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18952 0000DB64 C9                      	leave
 18953 0000DB65 C21800                  	ret AND_KILL_FRAME(1)
 18954                                  .L_lambda_opt_end_0010:	; new closure is in rax
 18955 0000DB68 C9                      	leave
 18956 0000DB69 C21800                  	ret AND_KILL_FRAME(1)
 18957                                  .L_lambda_simple_end_0063:	; new closure is in rax
 18958 0000DB6C 50                      	push rax
 18959 0000DB6D 6A01                    	push 1	; arg count
 18960 0000DB6F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18961 0000DB74 E866A40000              	call malloc
 18962 0000DB79 50                      	push rax
 18963 0000DB7A BF00000000              	mov rdi, 8 * 0	; new rib
 18964 0000DB7F E85BA40000              	call malloc
 18965 0000DB84 50                      	push rax
 18966 0000DB85 BF08000000              	mov rdi, 8 * 1	; extended env
 18967 0000DB8A E850A40000              	call malloc
 18968 0000DB8F 488B7D10                	mov rdi, ENV
 18969 0000DB93 BE00000000              	mov rsi, 0
 18970 0000DB98 BA01000000              	mov rdx, 1
 18971                                  .L_lambda_simple_env_loop_0066:	; ext_env[i + 1] <-- env[i]
 18972 0000DB9D 4883FE00                	cmp rsi, 0
 18973 0000DBA1 7410                    	je .L_lambda_simple_env_end_0066
 18974 0000DBA3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18975 0000DBA7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18976 0000DBAB 48FFC6                  	inc rsi
 18977 0000DBAE 48FFC2                  	inc rdx
 18978 0000DBB1 EBEA                    	jmp .L_lambda_simple_env_loop_0066
 18979                                  .L_lambda_simple_env_end_0066:
 18980 0000DBB3 5B                      	pop rbx
 18981 0000DBB4 BE00000000              	mov rsi, 0
 18982                                  .L_lambda_simple_params_loop_0066:	; copy params
 18983 0000DBB9 4883FE00                	cmp rsi, 0
 18984 0000DBBD 740E                    	je .L_lambda_simple_params_end_0066
 18985 0000DBBF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18986 0000DBC4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18987 0000DBC8 48FFC6                  	inc rsi
 18988 0000DBCB EBEC                    	jmp .L_lambda_simple_params_loop_0066
 18989                                  .L_lambda_simple_params_end_0066:
 18990 0000DBCD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18991 0000DBD0 4889C3                  	mov rbx, rax
 18992 0000DBD3 58                      	pop rax
 18993 0000DBD4 C60004                  	mov byte [rax], T_closure
 18994 0000DBD7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18995 0000DBDB 48C74009[E8DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0066
 18996 0000DBE3 E938010000              	jmp .L_lambda_simple_end_0066
 18997                                  .L_lambda_simple_code_0066:	; lambda-simple body
 18998 0000DBE8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18999 0000DBEE 740B                    	je .L_lambda_simple_arity_check_ok_0066
 19000 0000DBF0 FF742410                	push qword [rsp + 8 * 2]
 19001 0000DBF4 6A01                    	push 1
 19002 0000DBF6 E99DA30000              	jmp L_error_incorrect_arity_simple
 19003                                  .L_lambda_simple_arity_check_ok_0066:
 19004 0000DBFB C8000000                	enter 0, 0
 19005                                  	; preparing a non-tail-call
 19006 0000DBFF 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 19007 0000DC07 803805                  	cmp byte [rax], T_undefined
 19008 0000DC0A 0F84A2A20000            	je L_error_fvar_undefined
 19009 0000DC10 50                      	push rax
 19010 0000DC11 6A01                    	push 1	; arg count
 19011 0000DC13 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19012 0000DC17 803804                  	cmp byte [rax], T_closure
 19013 0000DC1A 0F8516A30000            	jne L_error_non_closure
 19014 0000DC20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19015 0000DC23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19016 0000DC26 48890425[38120000]      	mov qword [free_var_67], rax
 19017 0000DC2E 48B8-                   	mov rax, sob_void
 19017 0000DC30 [0000000000000000] 
 19018                                  
 19019                                  	; preparing a non-tail-call
 19020 0000DC38 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 19021 0000DC40 803805                  	cmp byte [rax], T_undefined
 19022 0000DC43 0F8469A20000            	je L_error_fvar_undefined
 19023 0000DC49 50                      	push rax
 19024 0000DC4A 6A01                    	push 1	; arg count
 19025 0000DC4C 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19026 0000DC50 803804                  	cmp byte [rax], T_closure
 19027 0000DC53 0F85DDA20000            	jne L_error_non_closure
 19028 0000DC59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19029 0000DC5C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19030 0000DC5F 48890425[27120000]      	mov qword [free_var_66], rax
 19031 0000DC67 48B8-                   	mov rax, sob_void
 19031 0000DC69 [0000000000000000] 
 19032                                  
 19033                                  	; preparing a non-tail-call
 19034 0000DC71 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 19035 0000DC79 803805                  	cmp byte [rax], T_undefined
 19036 0000DC7C 0F8430A20000            	je L_error_fvar_undefined
 19037 0000DC82 50                      	push rax
 19038 0000DC83 6A01                    	push 1	; arg count
 19039 0000DC85 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19040 0000DC89 803804                  	cmp byte [rax], T_closure
 19041 0000DC8C 0F85A4A20000            	jne L_error_non_closure
 19042 0000DC92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19043 0000DC95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19044 0000DC98 48890425[49120000]      	mov qword [free_var_68], rax
 19045 0000DCA0 48B8-                   	mov rax, sob_void
 19045 0000DCA2 [0000000000000000] 
 19046                                  
 19047                                  	; preparing a non-tail-call
 19048 0000DCAA 488B0425[3C0E0000]      	mov rax, qword [free_var_7]	; free var >
 19049 0000DCB2 803805                  	cmp byte [rax], T_undefined
 19050 0000DCB5 0F84F7A10000            	je L_error_fvar_undefined
 19051 0000DCBB 50                      	push rax
 19052 0000DCBC 6A01                    	push 1	; arg count
 19053 0000DCBE 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19054 0000DCC2 803804                  	cmp byte [rax], T_closure
 19055 0000DCC5 0F856BA20000            	jne L_error_non_closure
 19056 0000DCCB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19057 0000DCCE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19058 0000DCD1 48890425[6B120000]      	mov qword [free_var_70], rax
 19059 0000DCD9 48B8-                   	mov rax, sob_void
 19059 0000DCDB [0000000000000000] 
 19060                                  
 19061                                  	; preparing a non-tail-call
 19062 0000DCE3 488B0425[4D0E0000]      	mov rax, qword [free_var_8]	; free var >=
 19063 0000DCEB 803805                  	cmp byte [rax], T_undefined
 19064 0000DCEE 0F84BEA10000            	je L_error_fvar_undefined
 19065 0000DCF4 50                      	push rax
 19066 0000DCF5 6A01                    	push 1	; arg count
 19067 0000DCF7 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19068 0000DCFB 803804                  	cmp byte [rax], T_closure
 19069 0000DCFE 0F8532A20000            	jne L_error_non_closure
 19070 0000DD04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19071 0000DD07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19072 0000DD0A 48890425[5A120000]      	mov qword [free_var_69], rax
 19073 0000DD12 48B8-                   	mov rax, sob_void
 19073 0000DD14 [0000000000000000] 
 19074 0000DD1C C9                      	leave
 19075 0000DD1D C21800                  	ret AND_KILL_FRAME(1)
 19076                                  .L_lambda_simple_end_0066:	; new closure is in rax
 19077 0000DD20 803804                  	cmp byte [rax], T_closure
 19078 0000DD23 0F850DA20000            	jne L_error_non_closure
 19079 0000DD29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19080 0000DD2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19081                                  
 19082 0000DD2F 4889C7                  	mov rdi, rax
 19083 0000DD32 E8FDA40000              	call print_sexpr_if_not_void
 19084 0000DD37 48B8-                   	mov rax, L_constants + 0
 19084 0000DD39 [0000000000000000] 
 19085 0000DD41 48890425[23160000]      	mov qword [free_var_126], rax
 19086 0000DD49 48B8-                   	mov rax, sob_void
 19086 0000DD4B [0000000000000000] 
 19087                                  
 19088 0000DD53 4889C7                  	mov rdi, rax
 19089 0000DD56 E8D9A40000              	call print_sexpr_if_not_void
 19090 0000DD5B 48B8-                   	mov rax, L_constants + 0
 19090 0000DD5D [0000000000000000] 
 19091 0000DD65 48890425[89160000]      	mov qword [free_var_132], rax
 19092 0000DD6D 48B8-                   	mov rax, sob_void
 19092 0000DD6F [0000000000000000] 
 19093                                  
 19094 0000DD77 4889C7                  	mov rdi, rax
 19095 0000DD7A E8B5A40000              	call print_sexpr_if_not_void
 19096                                  	; preparing a non-tail-call
 19097 0000DD7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19098 0000DD84 E856A20000              	call malloc
 19099 0000DD89 50                      	push rax
 19100 0000DD8A BF00000000              	mov rdi, 8 * 0	; new rib
 19101 0000DD8F E84BA20000              	call malloc
 19102 0000DD94 50                      	push rax
 19103 0000DD95 BF08000000              	mov rdi, 8 * 1	; extended env
 19104 0000DD9A E840A20000              	call malloc
 19105 0000DD9F 488B7D10                	mov rdi, ENV
 19106 0000DDA3 BE00000000              	mov rsi, 0
 19107 0000DDA8 BA01000000              	mov rdx, 1
 19108                                  .L_lambda_simple_env_loop_0067:	; ext_env[i + 1] <-- env[i]
 19109 0000DDAD 4883FE00                	cmp rsi, 0
 19110 0000DDB1 7410                    	je .L_lambda_simple_env_end_0067
 19111 0000DDB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19112 0000DDB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19113 0000DDBB 48FFC6                  	inc rsi
 19114 0000DDBE 48FFC2                  	inc rdx
 19115 0000DDC1 EBEA                    	jmp .L_lambda_simple_env_loop_0067
 19116                                  .L_lambda_simple_env_end_0067:
 19117 0000DDC3 5B                      	pop rbx
 19118 0000DDC4 BE00000000              	mov rsi, 0
 19119                                  .L_lambda_simple_params_loop_0067:	; copy params
 19120 0000DDC9 4883FE00                	cmp rsi, 0
 19121 0000DDCD 740E                    	je .L_lambda_simple_params_end_0067
 19122 0000DDCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19123 0000DDD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19124 0000DDD8 48FFC6                  	inc rsi
 19125 0000DDDB EBEC                    	jmp .L_lambda_simple_params_loop_0067
 19126                                  .L_lambda_simple_params_end_0067:
 19127 0000DDDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19128 0000DDE0 4889C3                  	mov rbx, rax
 19129 0000DDE3 58                      	pop rax
 19130 0000DDE4 C60004                  	mov byte [rax], T_closure
 19131 0000DDE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19132 0000DDEB 48C74009[F8DD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0067
 19133 0000DDF3 E96C010000              	jmp .L_lambda_simple_end_0067
 19134                                  .L_lambda_simple_code_0067:	; lambda-simple body
 19135 0000DDF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19136 0000DDFE 740B                    	je .L_lambda_simple_arity_check_ok_0067
 19137 0000DE00 FF742410                	push qword [rsp + 8 * 2]
 19138 0000DE04 6A01                    	push 1
 19139 0000DE06 E98DA10000              	jmp L_error_incorrect_arity_simple
 19140                                  .L_lambda_simple_arity_check_ok_0067:
 19141 0000DE0B C8000000                	enter 0, 0
 19142 0000DE0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19143 0000DE14 E8C6A10000              	call malloc
 19144 0000DE19 50                      	push rax
 19145 0000DE1A BF08000000              	mov rdi, 8 * 1	; new rib
 19146 0000DE1F E8BBA10000              	call malloc
 19147 0000DE24 50                      	push rax
 19148 0000DE25 BF10000000              	mov rdi, 8 * 2	; extended env
 19149 0000DE2A E8B0A10000              	call malloc
 19150 0000DE2F 488B7D10                	mov rdi, ENV
 19151 0000DE33 BE00000000              	mov rsi, 0
 19152 0000DE38 BA01000000              	mov rdx, 1
 19153                                  .L_lambda_simple_env_loop_0068:	; ext_env[i + 1] <-- env[i]
 19154 0000DE3D 4883FE01                	cmp rsi, 1
 19155 0000DE41 7410                    	je .L_lambda_simple_env_end_0068
 19156 0000DE43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19157 0000DE47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19158 0000DE4B 48FFC6                  	inc rsi
 19159 0000DE4E 48FFC2                  	inc rdx
 19160 0000DE51 EBEA                    	jmp .L_lambda_simple_env_loop_0068
 19161                                  .L_lambda_simple_env_end_0068:
 19162 0000DE53 5B                      	pop rbx
 19163 0000DE54 BE00000000              	mov rsi, 0
 19164                                  .L_lambda_simple_params_loop_0068:	; copy params
 19165 0000DE59 4883FE01                	cmp rsi, 1
 19166 0000DE5D 740E                    	je .L_lambda_simple_params_end_0068
 19167 0000DE5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19168 0000DE64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19169 0000DE68 48FFC6                  	inc rsi
 19170 0000DE6B EBEC                    	jmp .L_lambda_simple_params_loop_0068
 19171                                  .L_lambda_simple_params_end_0068:
 19172 0000DE6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19173 0000DE70 4889C3                  	mov rbx, rax
 19174 0000DE73 58                      	pop rax
 19175 0000DE74 C60004                  	mov byte [rax], T_closure
 19176 0000DE77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19177 0000DE7B 48C74009[88DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0068
 19178 0000DE83 E9D8000000              	jmp .L_lambda_simple_end_0068
 19179                                  .L_lambda_simple_code_0068:	; lambda-simple body
 19180 0000DE88 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19181 0000DE8E 740B                    	je .L_lambda_simple_arity_check_ok_0068
 19182 0000DE90 FF742410                	push qword [rsp + 8 * 2]
 19183 0000DE94 6A01                    	push 1
 19184 0000DE96 E9FDA00000              	jmp L_error_incorrect_arity_simple
 19185                                  .L_lambda_simple_arity_check_ok_0068:
 19186 0000DE9B C8000000                	enter 0, 0
 19187                                  	; preparing a tail-call
 19188                                  	; preparing a non-tail-call
 19189                                  	; preparing a non-tail-call
 19190 0000DE9F 488B4520                	mov rax, PARAM(0)	; param str
 19191 0000DEA3 50                      	push rax
 19192 0000DEA4 6A01                    	push 1	; arg count
 19193 0000DEA6 488B0425[AC150000]      	mov rax, qword [free_var_119]	; free var string->list
 19194 0000DEAE 803805                  	cmp byte [rax], T_undefined
 19195 0000DEB1 0F84FB9F0000            	je L_error_fvar_undefined
 19196 0000DEB7 803804                  	cmp byte [rax], T_closure
 19197 0000DEBA 0F8576A00000            	jne L_error_non_closure
 19198 0000DEC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19199 0000DEC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19200 0000DEC6 50                      	push rax
 19201 0000DEC7 488B4510                	mov rax, ENV
 19202 0000DECB 488B00                  	mov rax, qword [rax + 8 * 0]
 19203 0000DECE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 19204 0000DED1 50                      	push rax
 19205 0000DED2 6A02                    	push 2	; arg count
 19206 0000DED4 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 19207 0000DEDC 803805                  	cmp byte [rax], T_undefined
 19208 0000DEDF 0F84CD9F0000            	je L_error_fvar_undefined
 19209 0000DEE5 803804                  	cmp byte [rax], T_closure
 19210 0000DEE8 0F8548A00000            	jne L_error_non_closure
 19211 0000DEEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19212 0000DEF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19213 0000DEF4 50                      	push rax
 19214 0000DEF5 6A01                    	push 1	; arg count
 19215 0000DEF7 488B0425[03140000]      	mov rax, qword [free_var_94]	; free var list->string
 19216 0000DEFF 803805                  	cmp byte [rax], T_undefined
 19217 0000DF02 0F84AA9F0000            	je L_error_fvar_undefined
 19218 0000DF08 803804                  	cmp byte [rax], T_closure
 19219 0000DF0B 0F8525A00000            	jne L_error_non_closure
 19220 0000DF11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19221 0000DF14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19222 0000DF17 FF7500                  	push qword[rbp]
 19223 0000DF1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19224 0000DF1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19225 0000DF21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19226 0000DF25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19227 0000DF29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19228 0000DF2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19229 0000DF2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19230 0000DF34 4983C103                	add r9, 3 	 ;for getting to the params
 19231 0000DF38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19232 0000DF3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19233                                  .L_tc_recycle_frame_loop_00b2:
 19234 0000DF3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19235 0000DF42 7410                    	je .L_tc_recycle_frame_done_00b2
 19236 0000DF44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19237 0000DF47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19238 0000DF4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19239 0000DF4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19240 0000DF52 EBEB                    	jmp .L_tc_recycle_frame_loop_00b2
 19241                                  .L_tc_recycle_frame_done_00b2:
 19242 0000DF54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19243 0000DF55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19244 0000DF59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19245 0000DF5C C9                      	leave
 19246 0000DF5D C21800                  	ret AND_KILL_FRAME(1)
 19247                                  .L_lambda_simple_end_0068:	; new closure is in rax
 19248 0000DF60 C9                      	leave
 19249 0000DF61 C21800                  	ret AND_KILL_FRAME(1)
 19250                                  .L_lambda_simple_end_0067:	; new closure is in rax
 19251 0000DF64 50                      	push rax
 19252 0000DF65 6A01                    	push 1	; arg count
 19253 0000DF67 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19254 0000DF6C E86EA00000              	call malloc
 19255 0000DF71 50                      	push rax
 19256 0000DF72 BF00000000              	mov rdi, 8 * 0	; new rib
 19257 0000DF77 E863A00000              	call malloc
 19258 0000DF7C 50                      	push rax
 19259 0000DF7D BF08000000              	mov rdi, 8 * 1	; extended env
 19260 0000DF82 E858A00000              	call malloc
 19261 0000DF87 488B7D10                	mov rdi, ENV
 19262 0000DF8B BE00000000              	mov rsi, 0
 19263 0000DF90 BA01000000              	mov rdx, 1
 19264                                  .L_lambda_simple_env_loop_0069:	; ext_env[i + 1] <-- env[i]
 19265 0000DF95 4883FE00                	cmp rsi, 0
 19266 0000DF99 7410                    	je .L_lambda_simple_env_end_0069
 19267 0000DF9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19268 0000DF9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19269 0000DFA3 48FFC6                  	inc rsi
 19270 0000DFA6 48FFC2                  	inc rdx
 19271 0000DFA9 EBEA                    	jmp .L_lambda_simple_env_loop_0069
 19272                                  .L_lambda_simple_env_end_0069:
 19273 0000DFAB 5B                      	pop rbx
 19274 0000DFAC BE00000000              	mov rsi, 0
 19275                                  .L_lambda_simple_params_loop_0069:	; copy params
 19276 0000DFB1 4883FE00                	cmp rsi, 0
 19277 0000DFB5 740E                    	je .L_lambda_simple_params_end_0069
 19278 0000DFB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19279 0000DFBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19280 0000DFC0 48FFC6                  	inc rsi
 19281 0000DFC3 EBEC                    	jmp .L_lambda_simple_params_loop_0069
 19282                                  .L_lambda_simple_params_end_0069:
 19283 0000DFC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19284 0000DFC8 4889C3                  	mov rbx, rax
 19285 0000DFCB 58                      	pop rax
 19286 0000DFCC C60004                  	mov byte [rax], T_closure
 19287 0000DFCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19288 0000DFD3 48C74009[E0DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0069
 19289 0000DFDB E98D000000              	jmp .L_lambda_simple_end_0069
 19290                                  .L_lambda_simple_code_0069:	; lambda-simple body
 19291 0000DFE0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19292 0000DFE6 740B                    	je .L_lambda_simple_arity_check_ok_0069
 19293 0000DFE8 FF742410                	push qword [rsp + 8 * 2]
 19294 0000DFEC 6A01                    	push 1
 19295 0000DFEE E9A59F0000              	jmp L_error_incorrect_arity_simple
 19296                                  .L_lambda_simple_arity_check_ok_0069:
 19297 0000DFF3 C8000000                	enter 0, 0
 19298                                  	; preparing a non-tail-call
 19299 0000DFF7 488B0425[7C120000]      	mov rax, qword [free_var_71]	; free var char-downcase
 19300 0000DFFF 803805                  	cmp byte [rax], T_undefined
 19301 0000E002 0F84AA9E0000            	je L_error_fvar_undefined
 19302 0000E008 50                      	push rax
 19303 0000E009 6A01                    	push 1	; arg count
 19304 0000E00B 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19305 0000E00F 803804                  	cmp byte [rax], T_closure
 19306 0000E012 0F851E9F0000            	jne L_error_non_closure
 19307 0000E018 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19308 0000E01B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19309 0000E01E 48890425[23160000]      	mov qword [free_var_126], rax
 19310 0000E026 48B8-                   	mov rax, sob_void
 19310 0000E028 [0000000000000000] 
 19311                                  
 19312                                  	; preparing a non-tail-call
 19313 0000E030 488B0425[8D120000]      	mov rax, qword [free_var_72]	; free var char-upcase
 19314 0000E038 803805                  	cmp byte [rax], T_undefined
 19315 0000E03B 0F84719E0000            	je L_error_fvar_undefined
 19316 0000E041 50                      	push rax
 19317 0000E042 6A01                    	push 1	; arg count
 19318 0000E044 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19319 0000E048 803804                  	cmp byte [rax], T_closure
 19320 0000E04B 0F85E59E0000            	jne L_error_non_closure
 19321 0000E051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19322 0000E054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19323 0000E057 48890425[89160000]      	mov qword [free_var_132], rax
 19324 0000E05F 48B8-                   	mov rax, sob_void
 19324 0000E061 [0000000000000000] 
 19325 0000E069 C9                      	leave
 19326 0000E06A C21800                  	ret AND_KILL_FRAME(1)
 19327                                  .L_lambda_simple_end_0069:	; new closure is in rax
 19328 0000E06D 803804                  	cmp byte [rax], T_closure
 19329 0000E070 0F85C09E0000            	jne L_error_non_closure
 19330 0000E076 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19331 0000E079 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19332                                  
 19333 0000E07C 4889C7                  	mov rdi, rax
 19334 0000E07F E8B0A10000              	call print_sexpr_if_not_void
 19335 0000E084 48B8-                   	mov rax, L_constants + 0
 19335 0000E086 [0000000000000000] 
 19336 0000E08E 48890425[AB160000]      	mov qword [free_var_134], rax
 19337 0000E096 48B8-                   	mov rax, sob_void
 19337 0000E098 [0000000000000000] 
 19338                                  
 19339 0000E0A0 4889C7                  	mov rdi, rax
 19340 0000E0A3 E88CA10000              	call print_sexpr_if_not_void
 19341 0000E0A8 48B8-                   	mov rax, L_constants + 0
 19341 0000E0AA [0000000000000000] 
 19342 0000E0B2 48890425[9A160000]      	mov qword [free_var_133], rax
 19343 0000E0BA 48B8-                   	mov rax, sob_void
 19343 0000E0BC [0000000000000000] 
 19344                                  
 19345 0000E0C4 4889C7                  	mov rdi, rax
 19346 0000E0C7 E868A10000              	call print_sexpr_if_not_void
 19347 0000E0CC 48B8-                   	mov rax, L_constants + 0
 19347 0000E0CE [0000000000000000] 
 19348 0000E0D6 48890425[BC160000]      	mov qword [free_var_135], rax
 19349 0000E0DE 48B8-                   	mov rax, sob_void
 19349 0000E0E0 [0000000000000000] 
 19350                                  
 19351 0000E0E8 4889C7                  	mov rdi, rax
 19352 0000E0EB E844A10000              	call print_sexpr_if_not_void
 19353 0000E0F0 48B8-                   	mov rax, L_constants + 0
 19353 0000E0F2 [0000000000000000] 
 19354 0000E0FA 48890425[CD160000]      	mov qword [free_var_136], rax
 19355 0000E102 48B8-                   	mov rax, sob_void
 19355 0000E104 [0000000000000000] 
 19356                                  
 19357 0000E10C 4889C7                  	mov rdi, rax
 19358 0000E10F E820A10000              	call print_sexpr_if_not_void
 19359 0000E114 48B8-                   	mov rax, L_constants + 0
 19359 0000E116 [0000000000000000] 
 19360 0000E11E 48890425[DE160000]      	mov qword [free_var_137], rax
 19361 0000E126 48B8-                   	mov rax, sob_void
 19361 0000E128 [0000000000000000] 
 19362                                  
 19363 0000E130 4889C7                  	mov rdi, rax
 19364 0000E133 E8FCA00000              	call print_sexpr_if_not_void
 19365 0000E138 48B8-                   	mov rax, L_constants + 0
 19365 0000E13A [0000000000000000] 
 19366 0000E142 48890425[DF150000]      	mov qword [free_var_122], rax
 19367 0000E14A 48B8-                   	mov rax, sob_void
 19367 0000E14C [0000000000000000] 
 19368                                  
 19369 0000E154 4889C7                  	mov rdi, rax
 19370 0000E157 E8D8A00000              	call print_sexpr_if_not_void
 19371 0000E15C 48B8-                   	mov rax, L_constants + 0
 19371 0000E15E [0000000000000000] 
 19372 0000E166 48890425[CE150000]      	mov qword [free_var_121], rax
 19373 0000E16E 48B8-                   	mov rax, sob_void
 19373 0000E170 [0000000000000000] 
 19374                                  
 19375 0000E178 4889C7                  	mov rdi, rax
 19376 0000E17B E8B4A00000              	call print_sexpr_if_not_void
 19377 0000E180 48B8-                   	mov rax, L_constants + 0
 19377 0000E182 [0000000000000000] 
 19378 0000E18A 48890425[F0150000]      	mov qword [free_var_123], rax
 19379 0000E192 48B8-                   	mov rax, sob_void
 19379 0000E194 [0000000000000000] 
 19380                                  
 19381 0000E19C 4889C7                  	mov rdi, rax
 19382 0000E19F E890A00000              	call print_sexpr_if_not_void
 19383 0000E1A4 48B8-                   	mov rax, L_constants + 0
 19383 0000E1A6 [0000000000000000] 
 19384 0000E1AE 48890425[01160000]      	mov qword [free_var_124], rax
 19385 0000E1B6 48B8-                   	mov rax, sob_void
 19385 0000E1B8 [0000000000000000] 
 19386                                  
 19387 0000E1C0 4889C7                  	mov rdi, rax
 19388 0000E1C3 E86CA00000              	call print_sexpr_if_not_void
 19389 0000E1C8 48B8-                   	mov rax, L_constants + 0
 19389 0000E1CA [0000000000000000] 
 19390 0000E1D2 48890425[12160000]      	mov qword [free_var_125], rax
 19391 0000E1DA 48B8-                   	mov rax, sob_void
 19391 0000E1DC [0000000000000000] 
 19392                                  
 19393 0000E1E4 4889C7                  	mov rdi, rax
 19394 0000E1E7 E848A00000              	call print_sexpr_if_not_void
 19395                                  	; preparing a non-tail-call
 19396 0000E1EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19397 0000E1F1 E8E99D0000              	call malloc
 19398 0000E1F6 50                      	push rax
 19399 0000E1F7 BF00000000              	mov rdi, 8 * 0	; new rib
 19400 0000E1FC E8DE9D0000              	call malloc
 19401 0000E201 50                      	push rax
 19402 0000E202 BF08000000              	mov rdi, 8 * 1	; extended env
 19403 0000E207 E8D39D0000              	call malloc
 19404 0000E20C 488B7D10                	mov rdi, ENV
 19405 0000E210 BE00000000              	mov rsi, 0
 19406 0000E215 BA01000000              	mov rdx, 1
 19407                                  .L_lambda_simple_env_loop_006a:	; ext_env[i + 1] <-- env[i]
 19408 0000E21A 4883FE00                	cmp rsi, 0
 19409 0000E21E 7410                    	je .L_lambda_simple_env_end_006a
 19410 0000E220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19411 0000E224 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19412 0000E228 48FFC6                  	inc rsi
 19413 0000E22B 48FFC2                  	inc rdx
 19414 0000E22E EBEA                    	jmp .L_lambda_simple_env_loop_006a
 19415                                  .L_lambda_simple_env_end_006a:
 19416 0000E230 5B                      	pop rbx
 19417 0000E231 BE00000000              	mov rsi, 0
 19418                                  .L_lambda_simple_params_loop_006a:	; copy params
 19419 0000E236 4883FE00                	cmp rsi, 0
 19420 0000E23A 740E                    	je .L_lambda_simple_params_end_006a
 19421 0000E23C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19422 0000E241 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19423 0000E245 48FFC6                  	inc rsi
 19424 0000E248 EBEC                    	jmp .L_lambda_simple_params_loop_006a
 19425                                  .L_lambda_simple_params_end_006a:
 19426 0000E24A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19427 0000E24D 4889C3                  	mov rbx, rax
 19428 0000E250 58                      	pop rax
 19429 0000E251 C60004                  	mov byte [rax], T_closure
 19430 0000E254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19431 0000E258 48C74009[65E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006a
 19432 0000E260 E9E10D0000              	jmp .L_lambda_simple_end_006a
 19433                                  .L_lambda_simple_code_006a:	; lambda-simple body
 19434 0000E265 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19435 0000E26B 740B                    	je .L_lambda_simple_arity_check_ok_006a
 19436 0000E26D FF742410                	push qword [rsp + 8 * 2]
 19437 0000E271 6A02                    	push 2
 19438 0000E273 E9209D0000              	jmp L_error_incorrect_arity_simple
 19439                                  .L_lambda_simple_arity_check_ok_006a:
 19440 0000E278 C8000000                	enter 0, 0
 19441                                  	; preparing a tail-call
 19442 0000E27C 48B8-                   	mov rax, L_constants + 1993
 19442 0000E27E [C907000000000000] 
 19443 0000E286 50                      	push rax
 19444 0000E287 6A01                    	push 1	; arg count
 19445 0000E289 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19446 0000E28E E84C9D0000              	call malloc
 19447 0000E293 50                      	push rax
 19448 0000E294 BF10000000              	mov rdi, 8 * 2	; new rib
 19449 0000E299 E8419D0000              	call malloc
 19450 0000E29E 50                      	push rax
 19451 0000E29F BF10000000              	mov rdi, 8 * 2	; extended env
 19452 0000E2A4 E8369D0000              	call malloc
 19453 0000E2A9 488B7D10                	mov rdi, ENV
 19454 0000E2AD BE00000000              	mov rsi, 0
 19455 0000E2B2 BA01000000              	mov rdx, 1
 19456                                  .L_lambda_simple_env_loop_006b:	; ext_env[i + 1] <-- env[i]
 19457 0000E2B7 4883FE01                	cmp rsi, 1
 19458 0000E2BB 7410                    	je .L_lambda_simple_env_end_006b
 19459 0000E2BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19460 0000E2C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19461 0000E2C5 48FFC6                  	inc rsi
 19462 0000E2C8 48FFC2                  	inc rdx
 19463 0000E2CB EBEA                    	jmp .L_lambda_simple_env_loop_006b
 19464                                  .L_lambda_simple_env_end_006b:
 19465 0000E2CD 5B                      	pop rbx
 19466 0000E2CE BE00000000              	mov rsi, 0
 19467                                  .L_lambda_simple_params_loop_006b:	; copy params
 19468 0000E2D3 4883FE02                	cmp rsi, 2
 19469 0000E2D7 740E                    	je .L_lambda_simple_params_end_006b
 19470 0000E2D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19471 0000E2DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19472 0000E2E2 48FFC6                  	inc rsi
 19473 0000E2E5 EBEC                    	jmp .L_lambda_simple_params_loop_006b
 19474                                  .L_lambda_simple_params_end_006b:
 19475 0000E2E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19476 0000E2EA 4889C3                  	mov rbx, rax
 19477 0000E2ED 58                      	pop rax
 19478 0000E2EE C60004                  	mov byte [rax], T_closure
 19479 0000E2F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19480 0000E2F5 48C74009[02E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006b
 19481 0000E2FD E9EC0C0000              	jmp .L_lambda_simple_end_006b
 19482                                  .L_lambda_simple_code_006b:	; lambda-simple body
 19483 0000E302 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19484 0000E308 740B                    	je .L_lambda_simple_arity_check_ok_006b
 19485 0000E30A FF742410                	push qword [rsp + 8 * 2]
 19486 0000E30E 6A01                    	push 1
 19487 0000E310 E9839C0000              	jmp L_error_incorrect_arity_simple
 19488                                  .L_lambda_simple_arity_check_ok_006b:
 19489 0000E315 C8000000                	enter 0, 0
 19490 0000E319 BF08000000              	mov rdi, 8*1
 19491 0000E31E E8BC9C0000              	call malloc
 19492 0000E323 488B5D20                	mov rbx, PARAM(0)
 19493 0000E327 488918                  	mov qword[rax], rbx
 19494 0000E32A 48894520                	mov PARAM(0), rax
 19495 0000E32E 48B8-                   	mov rax, sob_void
 19495 0000E330 [0000000000000000] 
 19496                                  
 19497 0000E338 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19498 0000E33D E89D9C0000              	call malloc
 19499 0000E342 50                      	push rax
 19500 0000E343 BF08000000              	mov rdi, 8 * 1	; new rib
 19501 0000E348 E8929C0000              	call malloc
 19502 0000E34D 50                      	push rax
 19503 0000E34E BF18000000              	mov rdi, 8 * 3	; extended env
 19504 0000E353 E8879C0000              	call malloc
 19505 0000E358 488B7D10                	mov rdi, ENV
 19506 0000E35C BE00000000              	mov rsi, 0
 19507 0000E361 BA01000000              	mov rdx, 1
 19508                                  .L_lambda_simple_env_loop_006c:	; ext_env[i + 1] <-- env[i]
 19509 0000E366 4883FE02                	cmp rsi, 2
 19510 0000E36A 7410                    	je .L_lambda_simple_env_end_006c
 19511 0000E36C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19512 0000E370 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19513 0000E374 48FFC6                  	inc rsi
 19514 0000E377 48FFC2                  	inc rdx
 19515 0000E37A EBEA                    	jmp .L_lambda_simple_env_loop_006c
 19516                                  .L_lambda_simple_env_end_006c:
 19517 0000E37C 5B                      	pop rbx
 19518 0000E37D BE00000000              	mov rsi, 0
 19519                                  .L_lambda_simple_params_loop_006c:	; copy params
 19520 0000E382 4883FE01                	cmp rsi, 1
 19521 0000E386 740E                    	je .L_lambda_simple_params_end_006c
 19522 0000E388 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19523 0000E38D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19524 0000E391 48FFC6                  	inc rsi
 19525 0000E394 EBEC                    	jmp .L_lambda_simple_params_loop_006c
 19526                                  .L_lambda_simple_params_end_006c:
 19527 0000E396 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19528 0000E399 4889C3                  	mov rbx, rax
 19529 0000E39C 58                      	pop rax
 19530 0000E39D C60004                  	mov byte [rax], T_closure
 19531 0000E3A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19532 0000E3A4 48C74009[B1E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006c
 19533 0000E3AC E992020000              	jmp .L_lambda_simple_end_006c
 19534                                  .L_lambda_simple_code_006c:	; lambda-simple body
 19535 0000E3B1 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19536 0000E3B7 740B                    	je .L_lambda_simple_arity_check_ok_006c
 19537 0000E3B9 FF742410                	push qword [rsp + 8 * 2]
 19538 0000E3BD 6A05                    	push 5
 19539 0000E3BF E9D49B0000              	jmp L_error_incorrect_arity_simple
 19540                                  .L_lambda_simple_arity_check_ok_006c:
 19541 0000E3C4 C8000000                	enter 0, 0
 19542                                  	; preparing a non-tail-call
 19543 0000E3C8 488B4530                	mov rax, PARAM(2)	; param len1
 19544 0000E3CC 50                      	push rax
 19545 0000E3CD 488B4520                	mov rax, PARAM(0)	; param i
 19546 0000E3D1 50                      	push rax
 19547 0000E3D2 6A02                    	push 2	; arg count
 19548 0000E3D4 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 19549 0000E3DC 803805                  	cmp byte [rax], T_undefined
 19550 0000E3DF 0F84CD9A0000            	je L_error_fvar_undefined
 19551 0000E3E5 803804                  	cmp byte [rax], T_closure
 19552 0000E3E8 0F85489B0000            	jne L_error_non_closure
 19553 0000E3EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19554 0000E3F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19555 0000E3F4 483D[02000000]          	cmp rax, sob_boolean_false
 19556 0000E3FA 742E                    	je .L_if_else_005b
 19557                                  	; preparing a non-tail-call
 19558 0000E3FC 488B4540                	mov rax, PARAM(4)	; param len2
 19559 0000E400 50                      	push rax
 19560 0000E401 488B4530                	mov rax, PARAM(2)	; param len1
 19561 0000E405 50                      	push rax
 19562 0000E406 6A02                    	push 2	; arg count
 19563 0000E408 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 19564 0000E410 803805                  	cmp byte [rax], T_undefined
 19565 0000E413 0F84999A0000            	je L_error_fvar_undefined
 19566 0000E419 803804                  	cmp byte [rax], T_closure
 19567 0000E41C 0F85149B0000            	jne L_error_non_closure
 19568 0000E422 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19569 0000E425 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19570 0000E428 EB0A                    	jmp .L_if_end_005b
 19571                                  .L_if_else_005b:
 19572 0000E42A 48B8-                   	mov rax, L_constants + 2
 19572 0000E42C [0200000000000000] 
 19573                                  .L_if_end_005b:
 19574 0000E434 483D[02000000]          	cmp rax, sob_boolean_false
 19575 0000E43A 0F85FF010000            	jne .L_or_end_000a
 19576                                  	; preparing a non-tail-call
 19577 0000E440 488B4530                	mov rax, PARAM(2)	; param len1
 19578 0000E444 50                      	push rax
 19579 0000E445 488B4520                	mov rax, PARAM(0)	; param i
 19580 0000E449 50                      	push rax
 19581 0000E44A 6A02                    	push 2	; arg count
 19582 0000E44C 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 19583 0000E454 803805                  	cmp byte [rax], T_undefined
 19584 0000E457 0F84559A0000            	je L_error_fvar_undefined
 19585 0000E45D 803804                  	cmp byte [rax], T_closure
 19586 0000E460 0F85D09A0000            	jne L_error_non_closure
 19587 0000E466 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19588 0000E469 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19589 0000E46C 483D[02000000]          	cmp rax, sob_boolean_false
 19590 0000E472 0F84BD010000            	je .L_if_else_005d
 19591                                  	; preparing a non-tail-call
 19592                                  	; preparing a non-tail-call
 19593 0000E478 488B4520                	mov rax, PARAM(0)	; param i
 19594 0000E47C 50                      	push rax
 19595 0000E47D 488B4538                	mov rax, PARAM(3)	; param str2
 19596 0000E481 50                      	push rax
 19597 0000E482 6A02                    	push 2	; arg count
 19598 0000E484 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19599 0000E48C 803805                  	cmp byte [rax], T_undefined
 19600 0000E48F 0F841D9A0000            	je L_error_fvar_undefined
 19601 0000E495 803804                  	cmp byte [rax], T_closure
 19602 0000E498 0F85989A0000            	jne L_error_non_closure
 19603 0000E49E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19604 0000E4A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19605 0000E4A4 50                      	push rax
 19606                                  	; preparing a non-tail-call
 19607 0000E4A5 488B4520                	mov rax, PARAM(0)	; param i
 19608 0000E4A9 50                      	push rax
 19609 0000E4AA 488B4528                	mov rax, PARAM(1)	; param str1
 19610 0000E4AE 50                      	push rax
 19611 0000E4AF 6A02                    	push 2	; arg count
 19612 0000E4B1 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19613 0000E4B9 803805                  	cmp byte [rax], T_undefined
 19614 0000E4BC 0F84F0990000            	je L_error_fvar_undefined
 19615 0000E4C2 803804                  	cmp byte [rax], T_closure
 19616 0000E4C5 0F856B9A0000            	jne L_error_non_closure
 19617 0000E4CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19618 0000E4CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19619 0000E4D1 50                      	push rax
 19620 0000E4D2 6A02                    	push 2	; arg count
 19621 0000E4D4 488B4510                	mov rax, ENV
 19622 0000E4D8 488B4008                	mov rax, qword [rax + 8 * 1]
 19623 0000E4DC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19624 0000E4DF 803804                  	cmp byte [rax], T_closure
 19625 0000E4E2 0F854E9A0000            	jne L_error_non_closure
 19626 0000E4E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19627 0000E4EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19628 0000E4EE 483D[02000000]          	cmp rax, sob_boolean_false
 19629 0000E4F4 0F8539010000            	jne .L_or_end_000b
 19630                                  	; preparing a non-tail-call
 19631                                  	; preparing a non-tail-call
 19632 0000E4FA 488B4520                	mov rax, PARAM(0)	; param i
 19633 0000E4FE 50                      	push rax
 19634 0000E4FF 488B4538                	mov rax, PARAM(3)	; param str2
 19635 0000E503 50                      	push rax
 19636 0000E504 6A02                    	push 2	; arg count
 19637 0000E506 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19638 0000E50E 803805                  	cmp byte [rax], T_undefined
 19639 0000E511 0F849B990000            	je L_error_fvar_undefined
 19640 0000E517 803804                  	cmp byte [rax], T_closure
 19641 0000E51A 0F85169A0000            	jne L_error_non_closure
 19642 0000E520 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19643 0000E523 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19644 0000E526 50                      	push rax
 19645                                  	; preparing a non-tail-call
 19646 0000E527 488B4520                	mov rax, PARAM(0)	; param i
 19647 0000E52B 50                      	push rax
 19648 0000E52C 488B4528                	mov rax, PARAM(1)	; param str1
 19649 0000E530 50                      	push rax
 19650 0000E531 6A02                    	push 2	; arg count
 19651 0000E533 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 19652 0000E53B 803805                  	cmp byte [rax], T_undefined
 19653 0000E53E 0F846E990000            	je L_error_fvar_undefined
 19654 0000E544 803804                  	cmp byte [rax], T_closure
 19655 0000E547 0F85E9990000            	jne L_error_non_closure
 19656 0000E54D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19657 0000E550 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19658 0000E553 50                      	push rax
 19659 0000E554 6A02                    	push 2	; arg count
 19660 0000E556 488B4510                	mov rax, ENV
 19661 0000E55A 488B4008                	mov rax, qword [rax + 8 * 1]
 19662 0000E55E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19663 0000E562 803804                  	cmp byte [rax], T_closure
 19664 0000E565 0F85CB990000            	jne L_error_non_closure
 19665 0000E56B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19666 0000E56E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19667 0000E571 483D[02000000]          	cmp rax, sob_boolean_false
 19668 0000E577 0F84AC000000            	je .L_if_else_005c
 19669                                  	; preparing a tail-call
 19670 0000E57D 488B4540                	mov rax, PARAM(4)	; param len2
 19671 0000E581 50                      	push rax
 19672 0000E582 488B4538                	mov rax, PARAM(3)	; param str2
 19673 0000E586 50                      	push rax
 19674 0000E587 488B4530                	mov rax, PARAM(2)	; param len1
 19675 0000E58B 50                      	push rax
 19676 0000E58C 488B4528                	mov rax, PARAM(1)	; param str1
 19677 0000E590 50                      	push rax
 19678                                  	; preparing a non-tail-call
 19679 0000E591 48B8-                   	mov rax, L_constants + 2270
 19679 0000E593 [DE08000000000000] 
 19680 0000E59B 50                      	push rax
 19681 0000E59C 488B4520                	mov rax, PARAM(0)	; param i
 19682 0000E5A0 50                      	push rax
 19683 0000E5A1 6A02                    	push 2	; arg count
 19684 0000E5A3 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 19685 0000E5AB 803805                  	cmp byte [rax], T_undefined
 19686 0000E5AE 0F84FE980000            	je L_error_fvar_undefined
 19687 0000E5B4 803804                  	cmp byte [rax], T_closure
 19688 0000E5B7 0F8579990000            	jne L_error_non_closure
 19689 0000E5BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19690 0000E5C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19691 0000E5C3 50                      	push rax
 19692 0000E5C4 6A05                    	push 5	; arg count
 19693 0000E5C6 488B4510                	mov rax, ENV
 19694 0000E5CA 488B00                  	mov rax, qword [rax + 8 * 0]
 19695 0000E5CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19696 0000E5D0 488B00                  	mov rax, qword [rax]
 19697 0000E5D3 803804                  	cmp byte [rax], T_closure
 19698 0000E5D6 0F855A990000            	jne L_error_non_closure
 19699 0000E5DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19700 0000E5DF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19701 0000E5E2 FF7500                  	push qword[rbp]
 19702 0000E5E5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19703 0000E5E8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19704 0000E5EC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19705 0000E5F0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19706 0000E5F4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19707 0000E5F7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19708 0000E5FA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19709 0000E5FF 4983C103                	add r9, 3 	 ;for getting to the params
 19710 0000E603 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19711 0000E607 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19712                                  .L_tc_recycle_frame_loop_00b3:
 19713 0000E60A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19714 0000E60D 7410                    	je .L_tc_recycle_frame_done_00b3
 19715 0000E60F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19716 0000E612 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19717 0000E615 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19718 0000E619 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19719 0000E61D EBEB                    	jmp .L_tc_recycle_frame_loop_00b3
 19720                                  .L_tc_recycle_frame_done_00b3:
 19721 0000E61F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19722 0000E620 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19723 0000E624 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19724 0000E627 EB0A                    	jmp .L_if_end_005c
 19725                                  .L_if_else_005c:
 19726 0000E629 48B8-                   	mov rax, L_constants + 2
 19726 0000E62B [0200000000000000] 
 19727                                  .L_if_end_005c:
 19728                                  .L_or_end_000b:
 19729 0000E633 EB0A                    	jmp .L_if_end_005d
 19730                                  .L_if_else_005d:
 19731 0000E635 48B8-                   	mov rax, L_constants + 2
 19731 0000E637 [0200000000000000] 
 19732                                  .L_if_end_005d:
 19733                                  .L_or_end_000a:
 19734 0000E63F C9                      	leave
 19735 0000E640 C23800                  	ret AND_KILL_FRAME(5)
 19736                                  .L_lambda_simple_end_006c:	; new closure is in rax
 19737 0000E643 50                      	push rax
 19738 0000E644 488B4520                	mov rax, PARAM(0)	; param run
 19739 0000E648 8F00                    	pop qword [rax]
 19740 0000E64A 48B8-                   	mov rax, sob_void
 19740 0000E64C [0000000000000000] 
 19741                                  
 19742                                  	; preparing a tail-call
 19743 0000E654 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19744 0000E659 E881990000              	call malloc
 19745 0000E65E 50                      	push rax
 19746 0000E65F BF08000000              	mov rdi, 8 * 1	; new rib
 19747 0000E664 E876990000              	call malloc
 19748 0000E669 50                      	push rax
 19749 0000E66A BF18000000              	mov rdi, 8 * 3	; extended env
 19750 0000E66F E86B990000              	call malloc
 19751 0000E674 488B7D10                	mov rdi, ENV
 19752 0000E678 BE00000000              	mov rsi, 0
 19753 0000E67D BA01000000              	mov rdx, 1
 19754                                  .L_lambda_simple_env_loop_006d:	; ext_env[i + 1] <-- env[i]
 19755 0000E682 4883FE02                	cmp rsi, 2
 19756 0000E686 7410                    	je .L_lambda_simple_env_end_006d
 19757 0000E688 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19758 0000E68C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19759 0000E690 48FFC6                  	inc rsi
 19760 0000E693 48FFC2                  	inc rdx
 19761 0000E696 EBEA                    	jmp .L_lambda_simple_env_loop_006d
 19762                                  .L_lambda_simple_env_end_006d:
 19763 0000E698 5B                      	pop rbx
 19764 0000E699 BE00000000              	mov rsi, 0
 19765                                  .L_lambda_simple_params_loop_006d:	; copy params
 19766 0000E69E 4883FE01                	cmp rsi, 1
 19767 0000E6A2 740E                    	je .L_lambda_simple_params_end_006d
 19768 0000E6A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19769 0000E6A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19770 0000E6AD 48FFC6                  	inc rsi
 19771 0000E6B0 EBEC                    	jmp .L_lambda_simple_params_loop_006d
 19772                                  .L_lambda_simple_params_end_006d:
 19773 0000E6B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19774 0000E6B5 4889C3                  	mov rbx, rax
 19775 0000E6B8 58                      	pop rax
 19776 0000E6B9 C60004                  	mov byte [rax], T_closure
 19777 0000E6BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19778 0000E6C0 48C74009[CDE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006d
 19779 0000E6C8 E9B2020000              	jmp .L_lambda_simple_end_006d
 19780                                  .L_lambda_simple_code_006d:	; lambda-simple body
 19781 0000E6CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19782 0000E6D3 740B                    	je .L_lambda_simple_arity_check_ok_006d
 19783 0000E6D5 FF742410                	push qword [rsp + 8 * 2]
 19784 0000E6D9 6A02                    	push 2
 19785 0000E6DB E9B8980000              	jmp L_error_incorrect_arity_simple
 19786                                  .L_lambda_simple_arity_check_ok_006d:
 19787 0000E6E0 C8000000                	enter 0, 0
 19788                                  	; preparing a tail-call
 19789                                  	; preparing a non-tail-call
 19790 0000E6E4 488B4528                	mov rax, PARAM(1)	; param str2
 19791 0000E6E8 50                      	push rax
 19792 0000E6E9 6A01                    	push 1	; arg count
 19793 0000E6EB 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 19794 0000E6F3 803805                  	cmp byte [rax], T_undefined
 19795 0000E6F6 0F84B6970000            	je L_error_fvar_undefined
 19796 0000E6FC 803804                  	cmp byte [rax], T_closure
 19797 0000E6FF 0F8531980000            	jne L_error_non_closure
 19798 0000E705 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19799 0000E708 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19800 0000E70B 50                      	push rax
 19801                                  	; preparing a non-tail-call
 19802 0000E70C 488B4520                	mov rax, PARAM(0)	; param str1
 19803 0000E710 50                      	push rax
 19804 0000E711 6A01                    	push 1	; arg count
 19805 0000E713 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 19806 0000E71B 803805                  	cmp byte [rax], T_undefined
 19807 0000E71E 0F848E970000            	je L_error_fvar_undefined
 19808 0000E724 803804                  	cmp byte [rax], T_closure
 19809 0000E727 0F8509980000            	jne L_error_non_closure
 19810 0000E72D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19811 0000E730 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19812 0000E733 50                      	push rax
 19813 0000E734 6A02                    	push 2	; arg count
 19814 0000E736 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19815 0000E73B E89F980000              	call malloc
 19816 0000E740 50                      	push rax
 19817 0000E741 BF10000000              	mov rdi, 8 * 2	; new rib
 19818 0000E746 E894980000              	call malloc
 19819 0000E74B 50                      	push rax
 19820 0000E74C BF20000000              	mov rdi, 8 * 4	; extended env
 19821 0000E751 E889980000              	call malloc
 19822 0000E756 488B7D10                	mov rdi, ENV
 19823 0000E75A BE00000000              	mov rsi, 0
 19824 0000E75F BA01000000              	mov rdx, 1
 19825                                  .L_lambda_simple_env_loop_006e:	; ext_env[i + 1] <-- env[i]
 19826 0000E764 4883FE03                	cmp rsi, 3
 19827 0000E768 7410                    	je .L_lambda_simple_env_end_006e
 19828 0000E76A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19829 0000E76E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19830 0000E772 48FFC6                  	inc rsi
 19831 0000E775 48FFC2                  	inc rdx
 19832 0000E778 EBEA                    	jmp .L_lambda_simple_env_loop_006e
 19833                                  .L_lambda_simple_env_end_006e:
 19834 0000E77A 5B                      	pop rbx
 19835 0000E77B BE00000000              	mov rsi, 0
 19836                                  .L_lambda_simple_params_loop_006e:	; copy params
 19837 0000E780 4883FE02                	cmp rsi, 2
 19838 0000E784 740E                    	je .L_lambda_simple_params_end_006e
 19839 0000E786 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19840 0000E78B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19841 0000E78F 48FFC6                  	inc rsi
 19842 0000E792 EBEC                    	jmp .L_lambda_simple_params_loop_006e
 19843                                  .L_lambda_simple_params_end_006e:
 19844 0000E794 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19845 0000E797 4889C3                  	mov rbx, rax
 19846 0000E79A 58                      	pop rax
 19847 0000E79B C60004                  	mov byte [rax], T_closure
 19848 0000E79E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19849 0000E7A2 48C74009[AFE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006e
 19850 0000E7AA E978010000              	jmp .L_lambda_simple_end_006e
 19851                                  .L_lambda_simple_code_006e:	; lambda-simple body
 19852 0000E7AF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19853 0000E7B5 740B                    	je .L_lambda_simple_arity_check_ok_006e
 19854 0000E7B7 FF742410                	push qword [rsp + 8 * 2]
 19855 0000E7BB 6A02                    	push 2
 19856 0000E7BD E9D6970000              	jmp L_error_incorrect_arity_simple
 19857                                  .L_lambda_simple_arity_check_ok_006e:
 19858 0000E7C2 C8000000                	enter 0, 0
 19859                                  	; preparing a non-tail-call
 19860 0000E7C6 488B4528                	mov rax, PARAM(1)	; param len2
 19861 0000E7CA 50                      	push rax
 19862 0000E7CB 488B4520                	mov rax, PARAM(0)	; param len1
 19863 0000E7CF 50                      	push rax
 19864 0000E7D0 6A02                    	push 2	; arg count
 19865 0000E7D2 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 19866 0000E7DA 803805                  	cmp byte [rax], T_undefined
 19867 0000E7DD 0F84CF960000            	je L_error_fvar_undefined
 19868 0000E7E3 803804                  	cmp byte [rax], T_closure
 19869 0000E7E6 0F854A970000            	jne L_error_non_closure
 19870 0000E7EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19871 0000E7EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19872 0000E7F2 483D[02000000]          	cmp rax, sob_boolean_false
 19873 0000E7F8 0F8495000000            	je .L_if_else_005e
 19874                                  	; preparing a tail-call
 19875 0000E7FE 488B4528                	mov rax, PARAM(1)	; param len2
 19876 0000E802 50                      	push rax
 19877 0000E803 488B4510                	mov rax, ENV
 19878 0000E807 488B00                  	mov rax, qword [rax + 8 * 0]
 19879 0000E80A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19880 0000E80E 50                      	push rax
 19881 0000E80F 488B4520                	mov rax, PARAM(0)	; param len1
 19882 0000E813 50                      	push rax
 19883 0000E814 488B4510                	mov rax, ENV
 19884 0000E818 488B00                  	mov rax, qword [rax + 8 * 0]
 19885 0000E81B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19886 0000E81E 50                      	push rax
 19887 0000E81F 48B8-                   	mov rax, L_constants + 2135
 19887 0000E821 [5708000000000000] 
 19888 0000E829 50                      	push rax
 19889 0000E82A 6A05                    	push 5	; arg count
 19890 0000E82C 488B4510                	mov rax, ENV
 19891 0000E830 488B4008                	mov rax, qword [rax + 8 * 1]
 19892 0000E834 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19893 0000E837 488B00                  	mov rax, qword [rax]
 19894 0000E83A 803804                  	cmp byte [rax], T_closure
 19895 0000E83D 0F85F3960000            	jne L_error_non_closure
 19896 0000E843 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19897 0000E846 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19898 0000E849 FF7500                  	push qword[rbp]
 19899 0000E84C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19900 0000E84F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19901 0000E853 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19902 0000E857 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19903 0000E85B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19904 0000E85E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19905 0000E861 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19906 0000E866 4983C103                	add r9, 3 	 ;for getting to the params
 19907 0000E86A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19908 0000E86E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19909                                  .L_tc_recycle_frame_loop_00b4:
 19910 0000E871 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19911 0000E874 7410                    	je .L_tc_recycle_frame_done_00b4
 19912 0000E876 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19913 0000E879 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19914 0000E87C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19915 0000E880 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19916 0000E884 EBEB                    	jmp .L_tc_recycle_frame_loop_00b4
 19917                                  .L_tc_recycle_frame_done_00b4:
 19918 0000E886 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19919 0000E887 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19920 0000E88B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19921 0000E88E E990000000              	jmp .L_if_end_005e
 19922                                  .L_if_else_005e:
 19923                                  	; preparing a tail-call
 19924 0000E893 488B4520                	mov rax, PARAM(0)	; param len1
 19925 0000E897 50                      	push rax
 19926 0000E898 488B4510                	mov rax, ENV
 19927 0000E89C 488B00                  	mov rax, qword [rax + 8 * 0]
 19928 0000E89F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19929 0000E8A2 50                      	push rax
 19930 0000E8A3 488B4528                	mov rax, PARAM(1)	; param len2
 19931 0000E8A7 50                      	push rax
 19932 0000E8A8 488B4510                	mov rax, ENV
 19933 0000E8AC 488B00                  	mov rax, qword [rax + 8 * 0]
 19934 0000E8AF 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19935 0000E8B3 50                      	push rax
 19936 0000E8B4 48B8-                   	mov rax, L_constants + 2135
 19936 0000E8B6 [5708000000000000] 
 19937 0000E8BE 50                      	push rax
 19938 0000E8BF 6A05                    	push 5	; arg count
 19939 0000E8C1 488B4510                	mov rax, ENV
 19940 0000E8C5 488B4008                	mov rax, qword [rax + 8 * 1]
 19941 0000E8C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19942 0000E8CC 488B00                  	mov rax, qword [rax]
 19943 0000E8CF 803804                  	cmp byte [rax], T_closure
 19944 0000E8D2 0F855E960000            	jne L_error_non_closure
 19945 0000E8D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19946 0000E8DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19947 0000E8DE FF7500                  	push qword[rbp]
 19948 0000E8E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19949 0000E8E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19950 0000E8E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19951 0000E8EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19952 0000E8F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19953 0000E8F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19954 0000E8F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19955 0000E8FB 4983C103                	add r9, 3 	 ;for getting to the params
 19956 0000E8FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19957 0000E903 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19958                                  .L_tc_recycle_frame_loop_00b5:
 19959 0000E906 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19960 0000E909 7410                    	je .L_tc_recycle_frame_done_00b5
 19961 0000E90B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19962 0000E90E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19963 0000E911 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19964 0000E915 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19965 0000E919 EBEB                    	jmp .L_tc_recycle_frame_loop_00b5
 19966                                  .L_tc_recycle_frame_done_00b5:
 19967 0000E91B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19968 0000E91C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19969 0000E920 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19970                                  .L_if_end_005e:
 19971 0000E923 C9                      	leave
 19972 0000E924 C22000                  	ret AND_KILL_FRAME(2)
 19973                                  .L_lambda_simple_end_006e:	; new closure is in rax
 19974 0000E927 803804                  	cmp byte [rax], T_closure
 19975 0000E92A 0F8506960000            	jne L_error_non_closure
 19976 0000E930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19977 0000E933 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19978 0000E936 FF7500                  	push qword[rbp]
 19979 0000E939 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19980 0000E93C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19981 0000E940 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19982 0000E944 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19983 0000E948 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19984 0000E94B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19985 0000E94E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19986 0000E953 4983C103                	add r9, 3 	 ;for getting to the params
 19987 0000E957 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19988 0000E95B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19989                                  .L_tc_recycle_frame_loop_00b6:
 19990 0000E95E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19991 0000E961 7410                    	je .L_tc_recycle_frame_done_00b6
 19992 0000E963 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19993 0000E966 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19994 0000E969 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19995 0000E96D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19996 0000E971 EBEB                    	jmp .L_tc_recycle_frame_loop_00b6
 19997                                  .L_tc_recycle_frame_done_00b6:
 19998 0000E973 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19999 0000E974 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20000 0000E978 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20001 0000E97B C9                      	leave
 20002 0000E97C C22000                  	ret AND_KILL_FRAME(2)
 20003                                  .L_lambda_simple_end_006d:	; new closure is in rax
 20004 0000E97F 50                      	push rax
 20005 0000E980 6A01                    	push 1	; arg count
 20006 0000E982 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20007 0000E987 E853960000              	call malloc
 20008 0000E98C 50                      	push rax
 20009 0000E98D BF08000000              	mov rdi, 8 * 1	; new rib
 20010 0000E992 E848960000              	call malloc
 20011 0000E997 50                      	push rax
 20012 0000E998 BF18000000              	mov rdi, 8 * 3	; extended env
 20013 0000E99D E83D960000              	call malloc
 20014 0000E9A2 488B7D10                	mov rdi, ENV
 20015 0000E9A6 BE00000000              	mov rsi, 0
 20016 0000E9AB BA01000000              	mov rdx, 1
 20017                                  .L_lambda_simple_env_loop_006f:	; ext_env[i + 1] <-- env[i]
 20018 0000E9B0 4883FE02                	cmp rsi, 2
 20019 0000E9B4 7410                    	je .L_lambda_simple_env_end_006f
 20020 0000E9B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20021 0000E9BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20022 0000E9BE 48FFC6                  	inc rsi
 20023 0000E9C1 48FFC2                  	inc rdx
 20024 0000E9C4 EBEA                    	jmp .L_lambda_simple_env_loop_006f
 20025                                  .L_lambda_simple_env_end_006f:
 20026 0000E9C6 5B                      	pop rbx
 20027 0000E9C7 BE00000000              	mov rsi, 0
 20028                                  .L_lambda_simple_params_loop_006f:	; copy params
 20029 0000E9CC 4883FE01                	cmp rsi, 1
 20030 0000E9D0 740E                    	je .L_lambda_simple_params_end_006f
 20031 0000E9D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20032 0000E9D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20033 0000E9DB 48FFC6                  	inc rsi
 20034 0000E9DE EBEC                    	jmp .L_lambda_simple_params_loop_006f
 20035                                  .L_lambda_simple_params_end_006f:
 20036 0000E9E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20037 0000E9E3 4889C3                  	mov rbx, rax
 20038 0000E9E6 58                      	pop rax
 20039 0000E9E7 C60004                  	mov byte [rax], T_closure
 20040 0000E9EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20041 0000E9EE 48C74009[FBE90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006f
 20042 0000E9F6 E99B050000              	jmp .L_lambda_simple_end_006f
 20043                                  .L_lambda_simple_code_006f:	; lambda-simple body
 20044 0000E9FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20045 0000EA01 740B                    	je .L_lambda_simple_arity_check_ok_006f
 20046 0000EA03 FF742410                	push qword [rsp + 8 * 2]
 20047 0000EA07 6A01                    	push 1
 20048 0000EA09 E98A950000              	jmp L_error_incorrect_arity_simple
 20049                                  .L_lambda_simple_arity_check_ok_006f:
 20050 0000EA0E C8000000                	enter 0, 0
 20051                                  	; preparing a tail-call
 20052 0000EA12 48B8-                   	mov rax, L_constants + 1993
 20052 0000EA14 [C907000000000000] 
 20053 0000EA1C 50                      	push rax
 20054 0000EA1D 6A01                    	push 1	; arg count
 20055 0000EA1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20056 0000EA24 E8B6950000              	call malloc
 20057 0000EA29 50                      	push rax
 20058 0000EA2A BF08000000              	mov rdi, 8 * 1	; new rib
 20059 0000EA2F E8AB950000              	call malloc
 20060 0000EA34 50                      	push rax
 20061 0000EA35 BF20000000              	mov rdi, 8 * 4	; extended env
 20062 0000EA3A E8A0950000              	call malloc
 20063 0000EA3F 488B7D10                	mov rdi, ENV
 20064 0000EA43 BE00000000              	mov rsi, 0
 20065 0000EA48 BA01000000              	mov rdx, 1
 20066                                  .L_lambda_simple_env_loop_0070:	; ext_env[i + 1] <-- env[i]
 20067 0000EA4D 4883FE03                	cmp rsi, 3
 20068 0000EA51 7410                    	je .L_lambda_simple_env_end_0070
 20069 0000EA53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20070 0000EA57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20071 0000EA5B 48FFC6                  	inc rsi
 20072 0000EA5E 48FFC2                  	inc rdx
 20073 0000EA61 EBEA                    	jmp .L_lambda_simple_env_loop_0070
 20074                                  .L_lambda_simple_env_end_0070:
 20075 0000EA63 5B                      	pop rbx
 20076 0000EA64 BE00000000              	mov rsi, 0
 20077                                  .L_lambda_simple_params_loop_0070:	; copy params
 20078 0000EA69 4883FE01                	cmp rsi, 1
 20079 0000EA6D 740E                    	je .L_lambda_simple_params_end_0070
 20080 0000EA6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20081 0000EA74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20082 0000EA78 48FFC6                  	inc rsi
 20083 0000EA7B EBEC                    	jmp .L_lambda_simple_params_loop_0070
 20084                                  .L_lambda_simple_params_end_0070:
 20085 0000EA7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20086 0000EA80 4889C3                  	mov rbx, rax
 20087 0000EA83 58                      	pop rax
 20088 0000EA84 C60004                  	mov byte [rax], T_closure
 20089 0000EA87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20090 0000EA8B 48C74009[98EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0070
 20091 0000EA93 E9A6040000              	jmp .L_lambda_simple_end_0070
 20092                                  .L_lambda_simple_code_0070:	; lambda-simple body
 20093 0000EA98 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20094 0000EA9E 740B                    	je .L_lambda_simple_arity_check_ok_0070
 20095 0000EAA0 FF742410                	push qword [rsp + 8 * 2]
 20096 0000EAA4 6A01                    	push 1
 20097 0000EAA6 E9ED940000              	jmp L_error_incorrect_arity_simple
 20098                                  .L_lambda_simple_arity_check_ok_0070:
 20099 0000EAAB C8000000                	enter 0, 0
 20100 0000EAAF BF08000000              	mov rdi, 8*1
 20101 0000EAB4 E826950000              	call malloc
 20102 0000EAB9 488B5D20                	mov rbx, PARAM(0)
 20103 0000EABD 488918                  	mov qword[rax], rbx
 20104 0000EAC0 48894520                	mov PARAM(0), rax
 20105 0000EAC4 48B8-                   	mov rax, sob_void
 20105 0000EAC6 [0000000000000000] 
 20106                                  
 20107 0000EACE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20108 0000EAD3 E807950000              	call malloc
 20109 0000EAD8 50                      	push rax
 20110 0000EAD9 BF08000000              	mov rdi, 8 * 1	; new rib
 20111 0000EADE E8FC940000              	call malloc
 20112 0000EAE3 50                      	push rax
 20113 0000EAE4 BF28000000              	mov rdi, 8 * 5	; extended env
 20114 0000EAE9 E8F1940000              	call malloc
 20115 0000EAEE 488B7D10                	mov rdi, ENV
 20116 0000EAF2 BE00000000              	mov rsi, 0
 20117 0000EAF7 BA01000000              	mov rdx, 1
 20118                                  .L_lambda_simple_env_loop_0071:	; ext_env[i + 1] <-- env[i]
 20119 0000EAFC 4883FE04                	cmp rsi, 4
 20120 0000EB00 7410                    	je .L_lambda_simple_env_end_0071
 20121 0000EB02 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20122 0000EB06 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20123 0000EB0A 48FFC6                  	inc rsi
 20124 0000EB0D 48FFC2                  	inc rdx
 20125 0000EB10 EBEA                    	jmp .L_lambda_simple_env_loop_0071
 20126                                  .L_lambda_simple_env_end_0071:
 20127 0000EB12 5B                      	pop rbx
 20128 0000EB13 BE00000000              	mov rsi, 0
 20129                                  .L_lambda_simple_params_loop_0071:	; copy params
 20130 0000EB18 4883FE01                	cmp rsi, 1
 20131 0000EB1C 740E                    	je .L_lambda_simple_params_end_0071
 20132 0000EB1E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20133 0000EB23 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20134 0000EB27 48FFC6                  	inc rsi
 20135 0000EB2A EBEC                    	jmp .L_lambda_simple_params_loop_0071
 20136                                  .L_lambda_simple_params_end_0071:
 20137 0000EB2C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20138 0000EB2F 4889C3                  	mov rbx, rax
 20139 0000EB32 58                      	pop rax
 20140 0000EB33 C60004                  	mov byte [rax], T_closure
 20141 0000EB36 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20142 0000EB3A 48C74009[47EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0071
 20143 0000EB42 E962010000              	jmp .L_lambda_simple_end_0071
 20144                                  .L_lambda_simple_code_0071:	; lambda-simple body
 20145 0000EB47 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20146 0000EB4D 740B                    	je .L_lambda_simple_arity_check_ok_0071
 20147 0000EB4F FF742410                	push qword [rsp + 8 * 2]
 20148 0000EB53 6A02                    	push 2
 20149 0000EB55 E93E940000              	jmp L_error_incorrect_arity_simple
 20150                                  .L_lambda_simple_arity_check_ok_0071:
 20151 0000EB5A C8000000                	enter 0, 0
 20152                                  	; preparing a non-tail-call
 20153 0000EB5E 488B4528                	mov rax, PARAM(1)	; param strs
 20154 0000EB62 50                      	push rax
 20155 0000EB63 6A01                    	push 1	; arg count
 20156 0000EB65 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 20157 0000EB6D 803805                  	cmp byte [rax], T_undefined
 20158 0000EB70 0F843C930000            	je L_error_fvar_undefined
 20159 0000EB76 803804                  	cmp byte [rax], T_closure
 20160 0000EB79 0F85B7930000            	jne L_error_non_closure
 20161 0000EB7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20162 0000EB82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20163 0000EB85 483D[02000000]          	cmp rax, sob_boolean_false
 20164 0000EB8B 0F8514010000            	jne .L_or_end_000c
 20165                                  	; preparing a non-tail-call
 20166                                  	; preparing a non-tail-call
 20167 0000EB91 488B4528                	mov rax, PARAM(1)	; param strs
 20168 0000EB95 50                      	push rax
 20169 0000EB96 6A01                    	push 1	; arg count
 20170 0000EB98 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 20171 0000EBA0 803805                  	cmp byte [rax], T_undefined
 20172 0000EBA3 0F8409930000            	je L_error_fvar_undefined
 20173 0000EBA9 803804                  	cmp byte [rax], T_closure
 20174 0000EBAC 0F8584930000            	jne L_error_non_closure
 20175 0000EBB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20176 0000EBB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20177 0000EBB8 50                      	push rax
 20178 0000EBB9 488B4520                	mov rax, PARAM(0)	; param str
 20179 0000EBBD 50                      	push rax
 20180 0000EBBE 6A02                    	push 2	; arg count
 20181 0000EBC0 488B4510                	mov rax, ENV
 20182 0000EBC4 488B4008                	mov rax, qword [rax + 8 * 1]
 20183 0000EBC8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 20184 0000EBCB 803804                  	cmp byte [rax], T_closure
 20185 0000EBCE 0F8562930000            	jne L_error_non_closure
 20186 0000EBD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20187 0000EBD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20188 0000EBDA 483D[02000000]          	cmp rax, sob_boolean_false
 20189 0000EBE0 0F84B5000000            	je .L_if_else_005f
 20190                                  	; preparing a tail-call
 20191                                  	; preparing a non-tail-call
 20192 0000EBE6 488B4528                	mov rax, PARAM(1)	; param strs
 20193 0000EBEA 50                      	push rax
 20194 0000EBEB 6A01                    	push 1	; arg count
 20195 0000EBED 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 20196 0000EBF5 803805                  	cmp byte [rax], T_undefined
 20197 0000EBF8 0F84B4920000            	je L_error_fvar_undefined
 20198 0000EBFE 803804                  	cmp byte [rax], T_closure
 20199 0000EC01 0F852F930000            	jne L_error_non_closure
 20200 0000EC07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20201 0000EC0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20202 0000EC0D 50                      	push rax
 20203                                  	; preparing a non-tail-call
 20204 0000EC0E 488B4528                	mov rax, PARAM(1)	; param strs
 20205 0000EC12 50                      	push rax
 20206 0000EC13 6A01                    	push 1	; arg count
 20207 0000EC15 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 20208 0000EC1D 803805                  	cmp byte [rax], T_undefined
 20209 0000EC20 0F848C920000            	je L_error_fvar_undefined
 20210 0000EC26 803804                  	cmp byte [rax], T_closure
 20211 0000EC29 0F8507930000            	jne L_error_non_closure
 20212 0000EC2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20213 0000EC32 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20214 0000EC35 50                      	push rax
 20215 0000EC36 6A02                    	push 2	; arg count
 20216 0000EC38 488B4510                	mov rax, ENV
 20217 0000EC3C 488B00                  	mov rax, qword [rax + 8 * 0]
 20218 0000EC3F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20219 0000EC42 488B00                  	mov rax, qword [rax]
 20220 0000EC45 803804                  	cmp byte [rax], T_closure
 20221 0000EC48 0F85E8920000            	jne L_error_non_closure
 20222 0000EC4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20223 0000EC51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20224 0000EC54 FF7500                  	push qword[rbp]
 20225 0000EC57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20226 0000EC5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20227 0000EC5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20228 0000EC62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20229 0000EC66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20230 0000EC69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20231 0000EC6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20232 0000EC71 4983C103                	add r9, 3 	 ;for getting to the params
 20233 0000EC75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20234 0000EC79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20235                                  .L_tc_recycle_frame_loop_00b7:
 20236 0000EC7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20237 0000EC7F 7410                    	je .L_tc_recycle_frame_done_00b7
 20238 0000EC81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20239 0000EC84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20240 0000EC87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20241 0000EC8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20242 0000EC8F EBEB                    	jmp .L_tc_recycle_frame_loop_00b7
 20243                                  .L_tc_recycle_frame_done_00b7:
 20244 0000EC91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20245 0000EC92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20246 0000EC96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20247 0000EC99 EB0A                    	jmp .L_if_end_005f
 20248                                  .L_if_else_005f:
 20249 0000EC9B 48B8-                   	mov rax, L_constants + 2
 20249 0000EC9D [0200000000000000] 
 20250                                  .L_if_end_005f:
 20251                                  .L_or_end_000c:
 20252 0000ECA5 C9                      	leave
 20253 0000ECA6 C22000                  	ret AND_KILL_FRAME(2)
 20254                                  .L_lambda_simple_end_0071:	; new closure is in rax
 20255 0000ECA9 50                      	push rax
 20256 0000ECAA 488B4520                	mov rax, PARAM(0)	; param run
 20257 0000ECAE 8F00                    	pop qword [rax]
 20258 0000ECB0 48B8-                   	mov rax, sob_void
 20258 0000ECB2 [0000000000000000] 
 20259                                  
 20260 0000ECBA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20261 0000ECBF E81B930000              	call malloc
 20262 0000ECC4 50                      	push rax
 20263 0000ECC5 BF08000000              	mov rdi, 8 * 1	; new rib
 20264 0000ECCA E810930000              	call malloc
 20265 0000ECCF 50                      	push rax
 20266 0000ECD0 BF28000000              	mov rdi, 8 * 5	; extended env
 20267 0000ECD5 E805930000              	call malloc
 20268 0000ECDA 488B7D10                	mov rdi, ENV
 20269 0000ECDE BE00000000              	mov rsi, 0
 20270 0000ECE3 BA01000000              	mov rdx, 1
 20271                                  .L_lambda_opt_env_loop_0011:	; ext_env[i + 1] <-- env[i]
 20272 0000ECE8 4883FE04                	cmp rsi, 4
 20273 0000ECEC 7410                    	je .L_lambda_opt_env_end_0011
 20274 0000ECEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20275 0000ECF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20276 0000ECF6 48FFC6                  	inc rsi
 20277 0000ECF9 48FFC2                  	inc rdx
 20278 0000ECFC EBEA                    	jmp .L_lambda_opt_env_loop_0011
 20279                                  .L_lambda_opt_env_end_0011:
 20280 0000ECFE 5B                      	pop rbx
 20281 0000ECFF BE00000000              	mov rsi, 0
 20282                                  .L_lambda_opt_params_loop_0011:	; copy params
 20283 0000ED04 4883FE01                	cmp rsi, 1
 20284 0000ED08 740E                    	je .L_lambda_opt_params_end_0011
 20285 0000ED0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20286 0000ED0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20287 0000ED13 48FFC6                  	inc rsi
 20288 0000ED16 EBEC                    	jmp .L_lambda_opt_params_loop_0011
 20289                                  .L_lambda_opt_params_end_0011:
 20290 0000ED18 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20291 0000ED1B 4889C3                  	mov rbx, rax
 20292 0000ED1E 58                      	pop rax
 20293 0000ED1F C60004                  	mov byte [rax], T_closure
 20294 0000ED22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20295 0000ED26 48C74009[33ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0011
 20296 0000ED2E E907020000              	jmp .L_lambda_opt_end_0011
 20297                                  .L_lambda_opt_code_0011:	; lambda-opt body
 20298 0000ED33 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20299 0000ED39 7411                    	je .L_lambda_opt_arity_check_exact_0011
 20300 0000ED3B 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0011
 20301 0000ED41 FF742410                	push qword [rsp + 8 * 2]
 20302 0000ED45 6A01                    	push 1
 20303 0000ED47 E960920000              	jmp L_error_incorrect_arity_opt
 20304                                  .L_lambda_opt_arity_check_exact_0011:
 20305 0000ED4C 4883EC08                	sub rsp, 8
 20306 0000ED50 488B442408              	mov rax, qword[rsp + 8 *1]
 20307 0000ED55 48890424                	mov qword[rsp], rax  
 20308 0000ED59 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 20309 0000ED5E 4889442408              	mov qword[rsp + 8 * 1], rax
 20310 0000ED63 B802000000              	mov rax, 2
 20311 0000ED68 4889442410              	mov qword[rsp + 8 *2], rax
 20312 0000ED6D 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 20313 0000ED72 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 20314 0000ED77 48B8-                   	mov rax, sob_nil
 20314 0000ED79 [0100000000000000] 
 20315 0000ED81 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 20316 0000ED86 C8000000                	enter 0, 0
 20317                                  	; preparing a tail-call
 20318 0000ED8A 488B4528                	mov rax, PARAM(1)	; param strs
 20319 0000ED8E 50                      	push rax
 20320 0000ED8F 488B4520                	mov rax, PARAM(0)	; param str
 20321 0000ED93 50                      	push rax
 20322 0000ED94 6A02                    	push 2	; arg count
 20323 0000ED96 488B4510                	mov rax, ENV
 20324 0000ED9A 488B00                  	mov rax, qword [rax + 8 * 0]
 20325 0000ED9D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20326 0000EDA0 488B00                  	mov rax, qword [rax]
 20327 0000EDA3 803804                  	cmp byte [rax], T_closure
 20328 0000EDA6 0F858A910000            	jne L_error_non_closure
 20329 0000EDAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20330 0000EDAF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20331 0000EDB2 FF7500                  	push qword[rbp]
 20332 0000EDB5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20333 0000EDB8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20334 0000EDBC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20335 0000EDC0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20336 0000EDC4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20337 0000EDC7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20338 0000EDCA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20339 0000EDCF 4983C103                	add r9, 3 	 ;for getting to the params
 20340 0000EDD3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20341 0000EDD7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20342                                  .L_tc_recycle_frame_loop_00b9:
 20343 0000EDDA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20344 0000EDDD 7410                    	je .L_tc_recycle_frame_done_00b9
 20345 0000EDDF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20346 0000EDE2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20347 0000EDE5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20348 0000EDE9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20349 0000EDED EBEB                    	jmp .L_tc_recycle_frame_loop_00b9
 20350                                  .L_tc_recycle_frame_done_00b9:
 20351 0000EDEF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20352 0000EDF0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20353 0000EDF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20354 0000EDF7 C9                      	leave
 20355 0000EDF8 C22000                  	ret AND_KILL_FRAME(2)
 20356 0000EDFB E93A010000              	jmp .L_lambda_opt_end_0011	; new closure is in rax
 20357                                  .L_lambda_opt_arity_check_more_0011:
 20358 0000EE00 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 20359 0000EE05 49B9-                   	mov r9, sob_nil
 20359 0000EE07 [0100000000000000] 
 20360 0000EE0F 4889E3                  	mov rbx, rsp 
 20361 0000EE12 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 20362 0000EE16 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 20363 0000EE19 49C1E003                	shl r8, 3
 20364 0000EE1D 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 20365 0000EE20 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 20366                                  .L_lambda_opt_stack_shrink_loop_0011:
 20367 0000EE25 4983F801                	cmp r8, 1
 20368 0000EE29 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0011
 20369 0000EE2B BF11000000              	mov rdi, 1+8+8	;for pair
 20370 0000EE30 E8AA910000              	call malloc	 ;to create the pair in the stack
 20371 0000EE35 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 20372 0000EE38 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 20373 0000EE3B 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 20374 0000EE3F 4C894809                 	mov qword[rax+1+8],r9
 20375 0000EE43 4989C1                  	mov r9, rax	 ; for the recursion 
 20376 0000EE46 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 20377 0000EE49 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 20378 0000EE4D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0011
 20379                                  .L_lambda_opt_stack_shrink_loop_exit_0011:
 20380 0000EE4F 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 20381 0000EE54 4883E902                	sub rcx, 2
 20382 0000EE58 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 20383 0000EE5C 4801CC                  	add rsp, rcx	 ;shrinking the stack
 20384 0000EE5F 4889E0                  	mov rax, rsp
 20385 0000EE62 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 20386 0000EE65 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 20387 0000EE69 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 20388 0000EE6C 4883C018                	add rax, 3 * 8 	;now rax is param 0
 20389 0000EE70 49C1E003                	shl r8, 3 	; convert to byte
 20390 0000EE74 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 20391 0000EE77 4C8908                  	mov qword[rax], r9	;puting the list at the top
 20392 0000EE7A 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 20393 0000EE7E 4889E3                  	mov rbx, rsp 
 20394 0000EE81 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 20395 0000EE84 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 20396 0000EE8A 49FFCA                  	dec r10 
 20397 0000EE8D 49C1E203                	shl r10, 3	;to get bytes
 20398 0000EE91 4883C318                	add rbx, 3*8 	;rbx is the first param
 20399 0000EE95 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 20400 0000EE98 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 20401                                  
 20402 0000EE9B 4C8900                              	mov qword[rax], r8
 20403 0000EE9E 4883E808                            	sub rax, 8
 20404 0000EEA2 4883EB08                	sub rbx, 8
 20405 0000EEA6 4889E0                  	mov rax, rsp
 20406 0000EEA9 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 20407 0000EEAC 48C744241002000000      	mov qword [rsp+2*8], 2
 20408 0000EEB5 488B5808                	mov rbx, qword[rax + 8 *1]
 20409 0000EEB9 48895C2408              	mov qword [rsp + 1*8] ,rbx
 20410 0000EEBE 488B18                  	mov rbx, qword[rax]
 20411 0000EEC1 48891C24                	mov qword [rsp], rbx
 20412 0000EEC5 C8000000                	enter 0, 0
 20413                                  	; preparing a tail-call
 20414 0000EEC9 488B4528                	mov rax, PARAM(1)	; param strs
 20415 0000EECD 50                      	push rax
 20416 0000EECE 488B4520                	mov rax, PARAM(0)	; param str
 20417 0000EED2 50                      	push rax
 20418 0000EED3 6A02                    	push 2	; arg count
 20419 0000EED5 488B4510                	mov rax, ENV
 20420 0000EED9 488B00                  	mov rax, qword [rax + 8 * 0]
 20421 0000EEDC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20422 0000EEDF 488B00                  	mov rax, qword [rax]
 20423 0000EEE2 803804                  	cmp byte [rax], T_closure
 20424 0000EEE5 0F854B900000            	jne L_error_non_closure
 20425 0000EEEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 20426 0000EEEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20427 0000EEF1 FF7500                  	push qword[rbp]
 20428 0000EEF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20429 0000EEF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20430 0000EEFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20431 0000EEFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20432 0000EF03 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20433 0000EF06 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20434 0000EF09 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20435 0000EF0E 4983C103                	add r9, 3 	 ;for getting to the params
 20436 0000EF12 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20437 0000EF16 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20438                                  .L_tc_recycle_frame_loop_00b8:
 20439 0000EF19 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20440 0000EF1C 7410                    	je .L_tc_recycle_frame_done_00b8
 20441 0000EF1E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20442 0000EF21 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20443 0000EF24 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20444 0000EF28 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20445 0000EF2C EBEB                    	jmp .L_tc_recycle_frame_loop_00b8
 20446                                  .L_tc_recycle_frame_done_00b8:
 20447 0000EF2E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20448 0000EF2F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20449 0000EF33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20450 0000EF36 C9                      	leave
 20451 0000EF37 C22000                  	ret AND_KILL_FRAME(2)
 20452                                  .L_lambda_opt_end_0011:	; new closure is in rax
 20453 0000EF3A C9                      	leave
 20454 0000EF3B C21800                  	ret AND_KILL_FRAME(1)
 20455                                  .L_lambda_simple_end_0070:	; new closure is in rax
 20456 0000EF3E 803804                  	cmp byte [rax], T_closure
 20457 0000EF41 0F85EF8F0000            	jne L_error_non_closure
 20458 0000EF47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20459 0000EF4A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20460 0000EF4D FF7500                  	push qword[rbp]
 20461 0000EF50 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20462 0000EF53 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20463 0000EF57 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20464 0000EF5B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20465 0000EF5F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20466 0000EF62 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20467 0000EF65 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20468 0000EF6A 4983C103                	add r9, 3 	 ;for getting to the params
 20469 0000EF6E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20470 0000EF72 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20471                                  .L_tc_recycle_frame_loop_00ba:
 20472 0000EF75 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20473 0000EF78 7410                    	je .L_tc_recycle_frame_done_00ba
 20474 0000EF7A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20475 0000EF7D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20476 0000EF80 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20477 0000EF84 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20478 0000EF88 EBEB                    	jmp .L_tc_recycle_frame_loop_00ba
 20479                                  .L_tc_recycle_frame_done_00ba:
 20480 0000EF8A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20481 0000EF8B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20482 0000EF8F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20483 0000EF92 C9                      	leave
 20484 0000EF93 C21800                  	ret AND_KILL_FRAME(1)
 20485                                  .L_lambda_simple_end_006f:	; new closure is in rax
 20486 0000EF96 803804                  	cmp byte [rax], T_closure
 20487 0000EF99 0F85978F0000            	jne L_error_non_closure
 20488 0000EF9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20489 0000EFA2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20490 0000EFA5 FF7500                  	push qword[rbp]
 20491 0000EFA8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20492 0000EFAB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20493 0000EFAF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20494 0000EFB3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20495 0000EFB7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20496 0000EFBA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20497 0000EFBD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20498 0000EFC2 4983C103                	add r9, 3 	 ;for getting to the params
 20499 0000EFC6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20500 0000EFCA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20501                                  .L_tc_recycle_frame_loop_00bb:
 20502 0000EFCD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20503 0000EFD0 7410                    	je .L_tc_recycle_frame_done_00bb
 20504 0000EFD2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20505 0000EFD5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20506 0000EFD8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20507 0000EFDC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20508 0000EFE0 EBEB                    	jmp .L_tc_recycle_frame_loop_00bb
 20509                                  .L_tc_recycle_frame_done_00bb:
 20510 0000EFE2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20511 0000EFE3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20512 0000EFE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20513 0000EFEA C9                      	leave
 20514 0000EFEB C21800                  	ret AND_KILL_FRAME(1)
 20515                                  .L_lambda_simple_end_006b:	; new closure is in rax
 20516 0000EFEE 803804                  	cmp byte [rax], T_closure
 20517 0000EFF1 0F853F8F0000            	jne L_error_non_closure
 20518 0000EFF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20519 0000EFFA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20520 0000EFFD FF7500                  	push qword[rbp]
 20521 0000F000 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20522 0000F003 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20523 0000F007 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20524 0000F00B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20525 0000F00F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20526 0000F012 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20527 0000F015 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20528 0000F01A 4983C103                	add r9, 3 	 ;for getting to the params
 20529 0000F01E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20530 0000F022 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20531                                  .L_tc_recycle_frame_loop_00bc:
 20532 0000F025 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20533 0000F028 7410                    	je .L_tc_recycle_frame_done_00bc
 20534 0000F02A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20535 0000F02D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20536 0000F030 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20537 0000F034 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20538 0000F038 EBEB                    	jmp .L_tc_recycle_frame_loop_00bc
 20539                                  .L_tc_recycle_frame_done_00bc:
 20540 0000F03A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20541 0000F03B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20542 0000F03F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20543 0000F042 C9                      	leave
 20544 0000F043 C22000                  	ret AND_KILL_FRAME(2)
 20545                                  .L_lambda_simple_end_006a:	; new closure is in rax
 20546 0000F046 50                      	push rax
 20547 0000F047 6A01                    	push 1	; arg count
 20548 0000F049 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20549 0000F04E E88C8F0000              	call malloc
 20550 0000F053 50                      	push rax
 20551 0000F054 BF00000000              	mov rdi, 8 * 0	; new rib
 20552 0000F059 E8818F0000              	call malloc
 20553 0000F05E 50                      	push rax
 20554 0000F05F BF08000000              	mov rdi, 8 * 1	; extended env
 20555 0000F064 E8768F0000              	call malloc
 20556 0000F069 488B7D10                	mov rdi, ENV
 20557 0000F06D BE00000000              	mov rsi, 0
 20558 0000F072 BA01000000              	mov rdx, 1
 20559                                  .L_lambda_simple_env_loop_0072:	; ext_env[i + 1] <-- env[i]
 20560 0000F077 4883FE00                	cmp rsi, 0
 20561 0000F07B 7410                    	je .L_lambda_simple_env_end_0072
 20562 0000F07D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20563 0000F081 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20564 0000F085 48FFC6                  	inc rsi
 20565 0000F088 48FFC2                  	inc rdx
 20566 0000F08B EBEA                    	jmp .L_lambda_simple_env_loop_0072
 20567                                  .L_lambda_simple_env_end_0072:
 20568 0000F08D 5B                      	pop rbx
 20569 0000F08E BE00000000              	mov rsi, 0
 20570                                  .L_lambda_simple_params_loop_0072:	; copy params
 20571 0000F093 4883FE00                	cmp rsi, 0
 20572 0000F097 740E                    	je .L_lambda_simple_params_end_0072
 20573 0000F099 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20574 0000F09E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20575 0000F0A2 48FFC6                  	inc rsi
 20576 0000F0A5 EBEC                    	jmp .L_lambda_simple_params_loop_0072
 20577                                  .L_lambda_simple_params_end_0072:
 20578 0000F0A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20579 0000F0AA 4889C3                  	mov rbx, rax
 20580 0000F0AD 58                      	pop rax
 20581 0000F0AE C60004                  	mov byte [rax], T_closure
 20582 0000F0B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20583 0000F0B5 48C74009[C2F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0072
 20584 0000F0BD E947010000              	jmp .L_lambda_simple_end_0072
 20585                                  .L_lambda_simple_code_0072:	; lambda-simple body
 20586 0000F0C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20587 0000F0C8 740B                    	je .L_lambda_simple_arity_check_ok_0072
 20588 0000F0CA FF742410                	push qword [rsp + 8 * 2]
 20589 0000F0CE 6A01                    	push 1
 20590 0000F0D0 E9C38E0000              	jmp L_error_incorrect_arity_simple
 20591                                  .L_lambda_simple_arity_check_ok_0072:
 20592 0000F0D5 C8000000                	enter 0, 0
 20593                                  	; preparing a non-tail-call
 20594 0000F0D9 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 20595 0000F0E1 803805                  	cmp byte [rax], T_undefined
 20596 0000F0E4 0F84C88D0000            	je L_error_fvar_undefined
 20597 0000F0EA 50                      	push rax
 20598 0000F0EB 488B0425[AF120000]      	mov rax, qword [free_var_74]	; free var char<?
 20599 0000F0F3 803805                  	cmp byte [rax], T_undefined
 20600 0000F0F6 0F84B68D0000            	je L_error_fvar_undefined
 20601 0000F0FC 50                      	push rax
 20602 0000F0FD 6A02                    	push 2	; arg count
 20603 0000F0FF 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20604 0000F103 803804                  	cmp byte [rax], T_closure
 20605 0000F106 0F852A8E0000            	jne L_error_non_closure
 20606 0000F10C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20607 0000F10F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20608 0000F112 48890425[AB160000]      	mov qword [free_var_134], rax
 20609 0000F11A 48B8-                   	mov rax, sob_void
 20609 0000F11C [0000000000000000] 
 20610                                  
 20611                                  	; preparing a non-tail-call
 20612 0000F124 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20613 0000F12C 803805                  	cmp byte [rax], T_undefined
 20614 0000F12F 0F847D8D0000            	je L_error_fvar_undefined
 20615 0000F135 50                      	push rax
 20616 0000F136 488B0425[38120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 20617 0000F13E 803805                  	cmp byte [rax], T_undefined
 20618 0000F141 0F846B8D0000            	je L_error_fvar_undefined
 20619 0000F147 50                      	push rax
 20620 0000F148 6A02                    	push 2	; arg count
 20621 0000F14A 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20622 0000F14E 803804                  	cmp byte [rax], T_closure
 20623 0000F151 0F85DF8D0000            	jne L_error_non_closure
 20624 0000F157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20625 0000F15A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20626 0000F15D 48890425[DF150000]      	mov qword [free_var_122], rax
 20627 0000F165 48B8-                   	mov rax, sob_void
 20627 0000F167 [0000000000000000] 
 20628                                  
 20629                                  	; preparing a non-tail-call
 20630 0000F16F 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 20631 0000F177 803805                  	cmp byte [rax], T_undefined
 20632 0000F17A 0F84328D0000            	je L_error_fvar_undefined
 20633 0000F180 50                      	push rax
 20634 0000F181 488B0425[E2120000]      	mov rax, qword [free_var_77]	; free var char>?
 20635 0000F189 803805                  	cmp byte [rax], T_undefined
 20636 0000F18C 0F84208D0000            	je L_error_fvar_undefined
 20637 0000F192 50                      	push rax
 20638 0000F193 6A02                    	push 2	; arg count
 20639 0000F195 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20640 0000F199 803804                  	cmp byte [rax], T_closure
 20641 0000F19C 0F85948D0000            	jne L_error_non_closure
 20642 0000F1A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20643 0000F1A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20644 0000F1A8 48890425[DE160000]      	mov qword [free_var_137], rax
 20645 0000F1B0 48B8-                   	mov rax, sob_void
 20645 0000F1B2 [0000000000000000] 
 20646                                  
 20647                                  	; preparing a non-tail-call
 20648 0000F1BA 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20649 0000F1C2 803805                  	cmp byte [rax], T_undefined
 20650 0000F1C5 0F84E78C0000            	je L_error_fvar_undefined
 20651 0000F1CB 50                      	push rax
 20652 0000F1CC 488B0425[6B120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 20653 0000F1D4 803805                  	cmp byte [rax], T_undefined
 20654 0000F1D7 0F84D58C0000            	je L_error_fvar_undefined
 20655 0000F1DD 50                      	push rax
 20656 0000F1DE 6A02                    	push 2	; arg count
 20657 0000F1E0 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20658 0000F1E4 803804                  	cmp byte [rax], T_closure
 20659 0000F1E7 0F85498D0000            	jne L_error_non_closure
 20660 0000F1ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 20661 0000F1F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20662 0000F1F3 48890425[12160000]      	mov qword [free_var_125], rax
 20663 0000F1FB 48B8-                   	mov rax, sob_void
 20663 0000F1FD [0000000000000000] 
 20664 0000F205 C9                      	leave
 20665 0000F206 C21800                  	ret AND_KILL_FRAME(1)
 20666                                  .L_lambda_simple_end_0072:	; new closure is in rax
 20667 0000F209 803804                  	cmp byte [rax], T_closure
 20668 0000F20C 0F85248D0000            	jne L_error_non_closure
 20669 0000F212 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20670 0000F215 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20671                                  
 20672 0000F218 4889C7                  	mov rdi, rax
 20673 0000F21B E814900000              	call print_sexpr_if_not_void
 20674                                  	; preparing a non-tail-call
 20675 0000F220 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20676 0000F225 E8B58D0000              	call malloc
 20677 0000F22A 50                      	push rax
 20678 0000F22B BF00000000              	mov rdi, 8 * 0	; new rib
 20679 0000F230 E8AA8D0000              	call malloc
 20680 0000F235 50                      	push rax
 20681 0000F236 BF08000000              	mov rdi, 8 * 1	; extended env
 20682 0000F23B E89F8D0000              	call malloc
 20683 0000F240 488B7D10                	mov rdi, ENV
 20684 0000F244 BE00000000              	mov rsi, 0
 20685 0000F249 BA01000000              	mov rdx, 1
 20686                                  .L_lambda_simple_env_loop_0073:	; ext_env[i + 1] <-- env[i]
 20687 0000F24E 4883FE00                	cmp rsi, 0
 20688 0000F252 7410                    	je .L_lambda_simple_env_end_0073
 20689 0000F254 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20690 0000F258 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20691 0000F25C 48FFC6                  	inc rsi
 20692 0000F25F 48FFC2                  	inc rdx
 20693 0000F262 EBEA                    	jmp .L_lambda_simple_env_loop_0073
 20694                                  .L_lambda_simple_env_end_0073:
 20695 0000F264 5B                      	pop rbx
 20696 0000F265 BE00000000              	mov rsi, 0
 20697                                  .L_lambda_simple_params_loop_0073:	; copy params
 20698 0000F26A 4883FE00                	cmp rsi, 0
 20699 0000F26E 740E                    	je .L_lambda_simple_params_end_0073
 20700 0000F270 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20701 0000F275 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20702 0000F279 48FFC6                  	inc rsi
 20703 0000F27C EBEC                    	jmp .L_lambda_simple_params_loop_0073
 20704                                  .L_lambda_simple_params_end_0073:
 20705 0000F27E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20706 0000F281 4889C3                  	mov rbx, rax
 20707 0000F284 58                      	pop rax
 20708 0000F285 C60004                  	mov byte [rax], T_closure
 20709 0000F288 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20710 0000F28C 48C74009[99F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0073
 20711 0000F294 E9A10D0000              	jmp .L_lambda_simple_end_0073
 20712                                  .L_lambda_simple_code_0073:	; lambda-simple body
 20713 0000F299 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20714 0000F29F 740B                    	je .L_lambda_simple_arity_check_ok_0073
 20715 0000F2A1 FF742410                	push qword [rsp + 8 * 2]
 20716 0000F2A5 6A02                    	push 2
 20717 0000F2A7 E9EC8C0000              	jmp L_error_incorrect_arity_simple
 20718                                  .L_lambda_simple_arity_check_ok_0073:
 20719 0000F2AC C8000000                	enter 0, 0
 20720                                  	; preparing a tail-call
 20721 0000F2B0 48B8-                   	mov rax, L_constants + 1993
 20721 0000F2B2 [C907000000000000] 
 20722 0000F2BA 50                      	push rax
 20723 0000F2BB 6A01                    	push 1	; arg count
 20724 0000F2BD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20725 0000F2C2 E8188D0000              	call malloc
 20726 0000F2C7 50                      	push rax
 20727 0000F2C8 BF10000000              	mov rdi, 8 * 2	; new rib
 20728 0000F2CD E80D8D0000              	call malloc
 20729 0000F2D2 50                      	push rax
 20730 0000F2D3 BF10000000              	mov rdi, 8 * 2	; extended env
 20731 0000F2D8 E8028D0000              	call malloc
 20732 0000F2DD 488B7D10                	mov rdi, ENV
 20733 0000F2E1 BE00000000              	mov rsi, 0
 20734 0000F2E6 BA01000000              	mov rdx, 1
 20735                                  .L_lambda_simple_env_loop_0074:	; ext_env[i + 1] <-- env[i]
 20736 0000F2EB 4883FE01                	cmp rsi, 1
 20737 0000F2EF 7410                    	je .L_lambda_simple_env_end_0074
 20738 0000F2F1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20739 0000F2F5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20740 0000F2F9 48FFC6                  	inc rsi
 20741 0000F2FC 48FFC2                  	inc rdx
 20742 0000F2FF EBEA                    	jmp .L_lambda_simple_env_loop_0074
 20743                                  .L_lambda_simple_env_end_0074:
 20744 0000F301 5B                      	pop rbx
 20745 0000F302 BE00000000              	mov rsi, 0
 20746                                  .L_lambda_simple_params_loop_0074:	; copy params
 20747 0000F307 4883FE02                	cmp rsi, 2
 20748 0000F30B 740E                    	je .L_lambda_simple_params_end_0074
 20749 0000F30D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20750 0000F312 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20751 0000F316 48FFC6                  	inc rsi
 20752 0000F319 EBEC                    	jmp .L_lambda_simple_params_loop_0074
 20753                                  .L_lambda_simple_params_end_0074:
 20754 0000F31B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20755 0000F31E 4889C3                  	mov rbx, rax
 20756 0000F321 58                      	pop rax
 20757 0000F322 C60004                  	mov byte [rax], T_closure
 20758 0000F325 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20759 0000F329 48C74009[36F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0074
 20760 0000F331 E9AC0C0000              	jmp .L_lambda_simple_end_0074
 20761                                  .L_lambda_simple_code_0074:	; lambda-simple body
 20762 0000F336 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20763 0000F33C 740B                    	je .L_lambda_simple_arity_check_ok_0074
 20764 0000F33E FF742410                	push qword [rsp + 8 * 2]
 20765 0000F342 6A01                    	push 1
 20766 0000F344 E94F8C0000              	jmp L_error_incorrect_arity_simple
 20767                                  .L_lambda_simple_arity_check_ok_0074:
 20768 0000F349 C8000000                	enter 0, 0
 20769 0000F34D BF08000000              	mov rdi, 8*1
 20770 0000F352 E8888C0000              	call malloc
 20771 0000F357 488B5D20                	mov rbx, PARAM(0)
 20772 0000F35B 488918                  	mov qword[rax], rbx
 20773 0000F35E 48894520                	mov PARAM(0), rax
 20774 0000F362 48B8-                   	mov rax, sob_void
 20774 0000F364 [0000000000000000] 
 20775                                  
 20776 0000F36C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20777 0000F371 E8698C0000              	call malloc
 20778 0000F376 50                      	push rax
 20779 0000F377 BF08000000              	mov rdi, 8 * 1	; new rib
 20780 0000F37C E85E8C0000              	call malloc
 20781 0000F381 50                      	push rax
 20782 0000F382 BF18000000              	mov rdi, 8 * 3	; extended env
 20783 0000F387 E8538C0000              	call malloc
 20784 0000F38C 488B7D10                	mov rdi, ENV
 20785 0000F390 BE00000000              	mov rsi, 0
 20786 0000F395 BA01000000              	mov rdx, 1
 20787                                  .L_lambda_simple_env_loop_0075:	; ext_env[i + 1] <-- env[i]
 20788 0000F39A 4883FE02                	cmp rsi, 2
 20789 0000F39E 7410                    	je .L_lambda_simple_env_end_0075
 20790 0000F3A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20791 0000F3A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20792 0000F3A8 48FFC6                  	inc rsi
 20793 0000F3AB 48FFC2                  	inc rdx
 20794 0000F3AE EBEA                    	jmp .L_lambda_simple_env_loop_0075
 20795                                  .L_lambda_simple_env_end_0075:
 20796 0000F3B0 5B                      	pop rbx
 20797 0000F3B1 BE00000000              	mov rsi, 0
 20798                                  .L_lambda_simple_params_loop_0075:	; copy params
 20799 0000F3B6 4883FE01                	cmp rsi, 1
 20800 0000F3BA 740E                    	je .L_lambda_simple_params_end_0075
 20801 0000F3BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20802 0000F3C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20803 0000F3C5 48FFC6                  	inc rsi
 20804 0000F3C8 EBEC                    	jmp .L_lambda_simple_params_loop_0075
 20805                                  .L_lambda_simple_params_end_0075:
 20806 0000F3CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20807 0000F3CD 4889C3                  	mov rbx, rax
 20808 0000F3D0 58                      	pop rax
 20809 0000F3D1 C60004                  	mov byte [rax], T_closure
 20810 0000F3D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20811 0000F3D8 48C74009[E5F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0075
 20812 0000F3E0 E952020000              	jmp .L_lambda_simple_end_0075
 20813                                  .L_lambda_simple_code_0075:	; lambda-simple body
 20814 0000F3E5 48837C241005            	cmp qword [rsp + 8 * 2], 5
 20815 0000F3EB 740B                    	je .L_lambda_simple_arity_check_ok_0075
 20816 0000F3ED FF742410                	push qword [rsp + 8 * 2]
 20817 0000F3F1 6A05                    	push 5
 20818 0000F3F3 E9A08B0000              	jmp L_error_incorrect_arity_simple
 20819                                  .L_lambda_simple_arity_check_ok_0075:
 20820 0000F3F8 C8000000                	enter 0, 0
 20821                                  	; preparing a non-tail-call
 20822 0000F3FC 488B4530                	mov rax, PARAM(2)	; param len1
 20823 0000F400 50                      	push rax
 20824 0000F401 488B4520                	mov rax, PARAM(0)	; param i
 20825 0000F405 50                      	push rax
 20826 0000F406 6A02                    	push 2	; arg count
 20827 0000F408 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 20828 0000F410 803805                  	cmp byte [rax], T_undefined
 20829 0000F413 0F84998A0000            	je L_error_fvar_undefined
 20830 0000F419 803804                  	cmp byte [rax], T_closure
 20831 0000F41C 0F85148B0000            	jne L_error_non_closure
 20832 0000F422 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20833 0000F425 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20834 0000F428 483D[02000000]          	cmp rax, sob_boolean_false
 20835 0000F42E 0F85FF010000            	jne .L_or_end_000d
 20836                                  	; preparing a non-tail-call
 20837                                  	; preparing a non-tail-call
 20838 0000F434 488B4520                	mov rax, PARAM(0)	; param i
 20839 0000F438 50                      	push rax
 20840 0000F439 488B4538                	mov rax, PARAM(3)	; param str2
 20841 0000F43D 50                      	push rax
 20842 0000F43E 6A02                    	push 2	; arg count
 20843 0000F440 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20844 0000F448 803805                  	cmp byte [rax], T_undefined
 20845 0000F44B 0F84618A0000            	je L_error_fvar_undefined
 20846 0000F451 803804                  	cmp byte [rax], T_closure
 20847 0000F454 0F85DC8A0000            	jne L_error_non_closure
 20848 0000F45A FF7001                  	push SOB_CLOSURE_ENV(rax)
 20849 0000F45D FF5009                  	call SOB_CLOSURE_CODE(rax)
 20850 0000F460 50                      	push rax
 20851                                  	; preparing a non-tail-call
 20852 0000F461 488B4520                	mov rax, PARAM(0)	; param i
 20853 0000F465 50                      	push rax
 20854 0000F466 488B4528                	mov rax, PARAM(1)	; param str1
 20855 0000F46A 50                      	push rax
 20856 0000F46B 6A02                    	push 2	; arg count
 20857 0000F46D 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20858 0000F475 803805                  	cmp byte [rax], T_undefined
 20859 0000F478 0F84348A0000            	je L_error_fvar_undefined
 20860 0000F47E 803804                  	cmp byte [rax], T_closure
 20861 0000F481 0F85AF8A0000            	jne L_error_non_closure
 20862 0000F487 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20863 0000F48A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20864 0000F48D 50                      	push rax
 20865 0000F48E 6A02                    	push 2	; arg count
 20866 0000F490 488B4510                	mov rax, ENV
 20867 0000F494 488B4008                	mov rax, qword [rax + 8 * 1]
 20868 0000F498 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 20869 0000F49B 803804                  	cmp byte [rax], T_closure
 20870 0000F49E 0F85928A0000            	jne L_error_non_closure
 20871 0000F4A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20872 0000F4A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20873 0000F4AA 483D[02000000]          	cmp rax, sob_boolean_false
 20874 0000F4B0 0F857D010000            	jne .L_or_end_000d
 20875                                  	; preparing a non-tail-call
 20876 0000F4B6 488B4530                	mov rax, PARAM(2)	; param len1
 20877 0000F4BA 50                      	push rax
 20878 0000F4BB 488B4520                	mov rax, PARAM(0)	; param i
 20879 0000F4BF 50                      	push rax
 20880 0000F4C0 6A02                    	push 2	; arg count
 20881 0000F4C2 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 20882 0000F4CA 803805                  	cmp byte [rax], T_undefined
 20883 0000F4CD 0F84DF890000            	je L_error_fvar_undefined
 20884 0000F4D3 803804                  	cmp byte [rax], T_closure
 20885 0000F4D6 0F855A8A0000            	jne L_error_non_closure
 20886 0000F4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20887 0000F4DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 20888 0000F4E2 483D[02000000]          	cmp rax, sob_boolean_false
 20889 0000F4E8 0F843B010000            	je .L_if_else_0061
 20890                                  	; preparing a non-tail-call
 20891                                  	; preparing a non-tail-call
 20892 0000F4EE 488B4520                	mov rax, PARAM(0)	; param i
 20893 0000F4F2 50                      	push rax
 20894 0000F4F3 488B4538                	mov rax, PARAM(3)	; param str2
 20895 0000F4F7 50                      	push rax
 20896 0000F4F8 6A02                    	push 2	; arg count
 20897 0000F4FA 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20898 0000F502 803805                  	cmp byte [rax], T_undefined
 20899 0000F505 0F84A7890000            	je L_error_fvar_undefined
 20900 0000F50B 803804                  	cmp byte [rax], T_closure
 20901 0000F50E 0F85228A0000            	jne L_error_non_closure
 20902 0000F514 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20903 0000F517 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20904 0000F51A 50                      	push rax
 20905                                  	; preparing a non-tail-call
 20906 0000F51B 488B4520                	mov rax, PARAM(0)	; param i
 20907 0000F51F 50                      	push rax
 20908 0000F520 488B4528                	mov rax, PARAM(1)	; param str1
 20909 0000F524 50                      	push rax
 20910 0000F525 6A02                    	push 2	; arg count
 20911 0000F527 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 20912 0000F52F 803805                  	cmp byte [rax], T_undefined
 20913 0000F532 0F847A890000            	je L_error_fvar_undefined
 20914 0000F538 803804                  	cmp byte [rax], T_closure
 20915 0000F53B 0F85F5890000            	jne L_error_non_closure
 20916 0000F541 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20917 0000F544 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20918 0000F547 50                      	push rax
 20919 0000F548 6A02                    	push 2	; arg count
 20920 0000F54A 488B4510                	mov rax, ENV
 20921 0000F54E 488B4008                	mov rax, qword [rax + 8 * 1]
 20922 0000F552 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 20923 0000F556 803804                  	cmp byte [rax], T_closure
 20924 0000F559 0F85D7890000            	jne L_error_non_closure
 20925 0000F55F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20926 0000F562 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20927 0000F565 483D[02000000]          	cmp rax, sob_boolean_false
 20928 0000F56B 0F84AC000000            	je .L_if_else_0060
 20929                                  	; preparing a tail-call
 20930 0000F571 488B4540                	mov rax, PARAM(4)	; param len2
 20931 0000F575 50                      	push rax
 20932 0000F576 488B4538                	mov rax, PARAM(3)	; param str2
 20933 0000F57A 50                      	push rax
 20934 0000F57B 488B4530                	mov rax, PARAM(2)	; param len1
 20935 0000F57F 50                      	push rax
 20936 0000F580 488B4528                	mov rax, PARAM(1)	; param str1
 20937 0000F584 50                      	push rax
 20938                                  	; preparing a non-tail-call
 20939 0000F585 48B8-                   	mov rax, L_constants + 2270
 20939 0000F587 [DE08000000000000] 
 20940 0000F58F 50                      	push rax
 20941 0000F590 488B4520                	mov rax, PARAM(0)	; param i
 20942 0000F594 50                      	push rax
 20943 0000F595 6A02                    	push 2	; arg count
 20944 0000F597 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 20945 0000F59F 803805                  	cmp byte [rax], T_undefined
 20946 0000F5A2 0F840A890000            	je L_error_fvar_undefined
 20947 0000F5A8 803804                  	cmp byte [rax], T_closure
 20948 0000F5AB 0F8585890000            	jne L_error_non_closure
 20949 0000F5B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20950 0000F5B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20951 0000F5B7 50                      	push rax
 20952 0000F5B8 6A05                    	push 5	; arg count
 20953 0000F5BA 488B4510                	mov rax, ENV
 20954 0000F5BE 488B00                  	mov rax, qword [rax + 8 * 0]
 20955 0000F5C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20956 0000F5C4 488B00                  	mov rax, qword [rax]
 20957 0000F5C7 803804                  	cmp byte [rax], T_closure
 20958 0000F5CA 0F8566890000            	jne L_error_non_closure
 20959 0000F5D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20960 0000F5D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20961 0000F5D6 FF7500                  	push qword[rbp]
 20962 0000F5D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20963 0000F5DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20964 0000F5E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20965 0000F5E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20966 0000F5E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20967 0000F5EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20968 0000F5EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20969 0000F5F3 4983C103                	add r9, 3 	 ;for getting to the params
 20970 0000F5F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20971 0000F5FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20972                                  .L_tc_recycle_frame_loop_00bd:
 20973 0000F5FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20974 0000F601 7410                    	je .L_tc_recycle_frame_done_00bd
 20975 0000F603 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20976 0000F606 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20977 0000F609 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20978 0000F60D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20979 0000F611 EBEB                    	jmp .L_tc_recycle_frame_loop_00bd
 20980                                  .L_tc_recycle_frame_done_00bd:
 20981 0000F613 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20982 0000F614 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20983 0000F618 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20984 0000F61B EB0A                    	jmp .L_if_end_0060
 20985                                  .L_if_else_0060:
 20986 0000F61D 48B8-                   	mov rax, L_constants + 2
 20986 0000F61F [0200000000000000] 
 20987                                  .L_if_end_0060:
 20988 0000F627 EB0A                    	jmp .L_if_end_0061
 20989                                  .L_if_else_0061:
 20990 0000F629 48B8-                   	mov rax, L_constants + 2
 20990 0000F62B [0200000000000000] 
 20991                                  .L_if_end_0061:
 20992                                  .L_or_end_000d:
 20993 0000F633 C9                      	leave
 20994 0000F634 C23800                  	ret AND_KILL_FRAME(5)
 20995                                  .L_lambda_simple_end_0075:	; new closure is in rax
 20996 0000F637 50                      	push rax
 20997 0000F638 488B4520                	mov rax, PARAM(0)	; param run
 20998 0000F63C 8F00                    	pop qword [rax]
 20999 0000F63E 48B8-                   	mov rax, sob_void
 20999 0000F640 [0000000000000000] 
 21000                                  
 21001                                  	; preparing a tail-call
 21002 0000F648 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21003 0000F64D E88D890000              	call malloc
 21004 0000F652 50                      	push rax
 21005 0000F653 BF08000000              	mov rdi, 8 * 1	; new rib
 21006 0000F658 E882890000              	call malloc
 21007 0000F65D 50                      	push rax
 21008 0000F65E BF18000000              	mov rdi, 8 * 3	; extended env
 21009 0000F663 E877890000              	call malloc
 21010 0000F668 488B7D10                	mov rdi, ENV
 21011 0000F66C BE00000000              	mov rsi, 0
 21012 0000F671 BA01000000              	mov rdx, 1
 21013                                  .L_lambda_simple_env_loop_0076:	; ext_env[i + 1] <-- env[i]
 21014 0000F676 4883FE02                	cmp rsi, 2
 21015 0000F67A 7410                    	je .L_lambda_simple_env_end_0076
 21016 0000F67C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21017 0000F680 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21018 0000F684 48FFC6                  	inc rsi
 21019 0000F687 48FFC2                  	inc rdx
 21020 0000F68A EBEA                    	jmp .L_lambda_simple_env_loop_0076
 21021                                  .L_lambda_simple_env_end_0076:
 21022 0000F68C 5B                      	pop rbx
 21023 0000F68D BE00000000              	mov rsi, 0
 21024                                  .L_lambda_simple_params_loop_0076:	; copy params
 21025 0000F692 4883FE01                	cmp rsi, 1
 21026 0000F696 740E                    	je .L_lambda_simple_params_end_0076
 21027 0000F698 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21028 0000F69D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21029 0000F6A1 48FFC6                  	inc rsi
 21030 0000F6A4 EBEC                    	jmp .L_lambda_simple_params_loop_0076
 21031                                  .L_lambda_simple_params_end_0076:
 21032 0000F6A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21033 0000F6A9 4889C3                  	mov rbx, rax
 21034 0000F6AC 58                      	pop rax
 21035 0000F6AD C60004                  	mov byte [rax], T_closure
 21036 0000F6B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21037 0000F6B4 48C74009[C1F60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0076
 21038 0000F6BC E9B2020000              	jmp .L_lambda_simple_end_0076
 21039                                  .L_lambda_simple_code_0076:	; lambda-simple body
 21040 0000F6C1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21041 0000F6C7 740B                    	je .L_lambda_simple_arity_check_ok_0076
 21042 0000F6C9 FF742410                	push qword [rsp + 8 * 2]
 21043 0000F6CD 6A02                    	push 2
 21044 0000F6CF E9C4880000              	jmp L_error_incorrect_arity_simple
 21045                                  .L_lambda_simple_arity_check_ok_0076:
 21046 0000F6D4 C8000000                	enter 0, 0
 21047                                  	; preparing a tail-call
 21048                                  	; preparing a non-tail-call
 21049 0000F6D8 488B4528                	mov rax, PARAM(1)	; param str2
 21050 0000F6DC 50                      	push rax
 21051 0000F6DD 6A01                    	push 1	; arg count
 21052 0000F6DF 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 21053 0000F6E7 803805                  	cmp byte [rax], T_undefined
 21054 0000F6EA 0F84C2870000            	je L_error_fvar_undefined
 21055 0000F6F0 803804                  	cmp byte [rax], T_closure
 21056 0000F6F3 0F853D880000            	jne L_error_non_closure
 21057 0000F6F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21058 0000F6FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 21059 0000F6FF 50                      	push rax
 21060                                  	; preparing a non-tail-call
 21061 0000F700 488B4520                	mov rax, PARAM(0)	; param str1
 21062 0000F704 50                      	push rax
 21063 0000F705 6A01                    	push 1	; arg count
 21064 0000F707 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 21065 0000F70F 803805                  	cmp byte [rax], T_undefined
 21066 0000F712 0F849A870000            	je L_error_fvar_undefined
 21067 0000F718 803804                  	cmp byte [rax], T_closure
 21068 0000F71B 0F8515880000            	jne L_error_non_closure
 21069 0000F721 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21070 0000F724 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21071 0000F727 50                      	push rax
 21072 0000F728 6A02                    	push 2	; arg count
 21073 0000F72A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21074 0000F72F E8AB880000              	call malloc
 21075 0000F734 50                      	push rax
 21076 0000F735 BF10000000              	mov rdi, 8 * 2	; new rib
 21077 0000F73A E8A0880000              	call malloc
 21078 0000F73F 50                      	push rax
 21079 0000F740 BF20000000              	mov rdi, 8 * 4	; extended env
 21080 0000F745 E895880000              	call malloc
 21081 0000F74A 488B7D10                	mov rdi, ENV
 21082 0000F74E BE00000000              	mov rsi, 0
 21083 0000F753 BA01000000              	mov rdx, 1
 21084                                  .L_lambda_simple_env_loop_0077:	; ext_env[i + 1] <-- env[i]
 21085 0000F758 4883FE03                	cmp rsi, 3
 21086 0000F75C 7410                    	je .L_lambda_simple_env_end_0077
 21087 0000F75E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21088 0000F762 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21089 0000F766 48FFC6                  	inc rsi
 21090 0000F769 48FFC2                  	inc rdx
 21091 0000F76C EBEA                    	jmp .L_lambda_simple_env_loop_0077
 21092                                  .L_lambda_simple_env_end_0077:
 21093 0000F76E 5B                      	pop rbx
 21094 0000F76F BE00000000              	mov rsi, 0
 21095                                  .L_lambda_simple_params_loop_0077:	; copy params
 21096 0000F774 4883FE02                	cmp rsi, 2
 21097 0000F778 740E                    	je .L_lambda_simple_params_end_0077
 21098 0000F77A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21099 0000F77F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21100 0000F783 48FFC6                  	inc rsi
 21101 0000F786 EBEC                    	jmp .L_lambda_simple_params_loop_0077
 21102                                  .L_lambda_simple_params_end_0077:
 21103 0000F788 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21104 0000F78B 4889C3                  	mov rbx, rax
 21105 0000F78E 58                      	pop rax
 21106 0000F78F C60004                  	mov byte [rax], T_closure
 21107 0000F792 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21108 0000F796 48C74009[A3F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0077
 21109 0000F79E E978010000              	jmp .L_lambda_simple_end_0077
 21110                                  .L_lambda_simple_code_0077:	; lambda-simple body
 21111 0000F7A3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21112 0000F7A9 740B                    	je .L_lambda_simple_arity_check_ok_0077
 21113 0000F7AB FF742410                	push qword [rsp + 8 * 2]
 21114 0000F7AF 6A02                    	push 2
 21115 0000F7B1 E9E2870000              	jmp L_error_incorrect_arity_simple
 21116                                  .L_lambda_simple_arity_check_ok_0077:
 21117 0000F7B6 C8000000                	enter 0, 0
 21118                                  	; preparing a non-tail-call
 21119 0000F7BA 488B4528                	mov rax, PARAM(1)	; param len2
 21120 0000F7BE 50                      	push rax
 21121 0000F7BF 488B4520                	mov rax, PARAM(0)	; param len1
 21122 0000F7C3 50                      	push rax
 21123 0000F7C4 6A02                    	push 2	; arg count
 21124 0000F7C6 488B0425[1A0E0000]      	mov rax, qword [free_var_5]	; free var <=
 21125 0000F7CE 803805                  	cmp byte [rax], T_undefined
 21126 0000F7D1 0F84DB860000            	je L_error_fvar_undefined
 21127 0000F7D7 803804                  	cmp byte [rax], T_closure
 21128 0000F7DA 0F8556870000            	jne L_error_non_closure
 21129 0000F7E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21130 0000F7E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21131 0000F7E6 483D[02000000]          	cmp rax, sob_boolean_false
 21132 0000F7EC 0F8495000000            	je .L_if_else_0062
 21133                                  	; preparing a tail-call
 21134 0000F7F2 488B4528                	mov rax, PARAM(1)	; param len2
 21135 0000F7F6 50                      	push rax
 21136 0000F7F7 488B4510                	mov rax, ENV
 21137 0000F7FB 488B00                  	mov rax, qword [rax + 8 * 0]
 21138 0000F7FE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21139 0000F802 50                      	push rax
 21140 0000F803 488B4520                	mov rax, PARAM(0)	; param len1
 21141 0000F807 50                      	push rax
 21142 0000F808 488B4510                	mov rax, ENV
 21143 0000F80C 488B00                  	mov rax, qword [rax + 8 * 0]
 21144 0000F80F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21145 0000F812 50                      	push rax
 21146 0000F813 48B8-                   	mov rax, L_constants + 2135
 21146 0000F815 [5708000000000000] 
 21147 0000F81D 50                      	push rax
 21148 0000F81E 6A05                    	push 5	; arg count
 21149 0000F820 488B4510                	mov rax, ENV
 21150 0000F824 488B4008                	mov rax, qword [rax + 8 * 1]
 21151 0000F828 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21152 0000F82B 488B00                  	mov rax, qword [rax]
 21153 0000F82E 803804                  	cmp byte [rax], T_closure
 21154 0000F831 0F85FF860000            	jne L_error_non_closure
 21155 0000F837 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21156 0000F83A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21157 0000F83D FF7500                  	push qword[rbp]
 21158 0000F840 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21159 0000F843 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21160 0000F847 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21161 0000F84B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21162 0000F84F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21163 0000F852 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21164 0000F855 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21165 0000F85A 4983C103                	add r9, 3 	 ;for getting to the params
 21166 0000F85E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21167 0000F862 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21168                                  .L_tc_recycle_frame_loop_00be:
 21169 0000F865 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21170 0000F868 7410                    	je .L_tc_recycle_frame_done_00be
 21171 0000F86A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21172 0000F86D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21173 0000F870 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21174 0000F874 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21175 0000F878 EBEB                    	jmp .L_tc_recycle_frame_loop_00be
 21176                                  .L_tc_recycle_frame_done_00be:
 21177 0000F87A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21178 0000F87B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21179 0000F87F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21180 0000F882 E990000000              	jmp .L_if_end_0062
 21181                                  .L_if_else_0062:
 21182                                  	; preparing a tail-call
 21183 0000F887 488B4520                	mov rax, PARAM(0)	; param len1
 21184 0000F88B 50                      	push rax
 21185 0000F88C 488B4510                	mov rax, ENV
 21186 0000F890 488B00                  	mov rax, qword [rax + 8 * 0]
 21187 0000F893 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21188 0000F896 50                      	push rax
 21189 0000F897 488B4528                	mov rax, PARAM(1)	; param len2
 21190 0000F89B 50                      	push rax
 21191 0000F89C 488B4510                	mov rax, ENV
 21192 0000F8A0 488B00                  	mov rax, qword [rax + 8 * 0]
 21193 0000F8A3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21194 0000F8A7 50                      	push rax
 21195 0000F8A8 48B8-                   	mov rax, L_constants + 2135
 21195 0000F8AA [5708000000000000] 
 21196 0000F8B2 50                      	push rax
 21197 0000F8B3 6A05                    	push 5	; arg count
 21198 0000F8B5 488B4510                	mov rax, ENV
 21199 0000F8B9 488B4008                	mov rax, qword [rax + 8 * 1]
 21200 0000F8BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21201 0000F8C0 488B00                  	mov rax, qword [rax]
 21202 0000F8C3 803804                  	cmp byte [rax], T_closure
 21203 0000F8C6 0F856A860000            	jne L_error_non_closure
 21204 0000F8CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 21205 0000F8CF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21206 0000F8D2 FF7500                  	push qword[rbp]
 21207 0000F8D5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21208 0000F8D8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21209 0000F8DC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21210 0000F8E0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21211 0000F8E4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21212 0000F8E7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21213 0000F8EA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21214 0000F8EF 4983C103                	add r9, 3 	 ;for getting to the params
 21215 0000F8F3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21216 0000F8F7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21217                                  .L_tc_recycle_frame_loop_00bf:
 21218 0000F8FA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21219 0000F8FD 7410                    	je .L_tc_recycle_frame_done_00bf
 21220 0000F8FF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21221 0000F902 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21222 0000F905 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21223 0000F909 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21224 0000F90D EBEB                    	jmp .L_tc_recycle_frame_loop_00bf
 21225                                  .L_tc_recycle_frame_done_00bf:
 21226 0000F90F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21227 0000F910 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21228 0000F914 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21229                                  .L_if_end_0062:
 21230 0000F917 C9                      	leave
 21231 0000F918 C22000                  	ret AND_KILL_FRAME(2)
 21232                                  .L_lambda_simple_end_0077:	; new closure is in rax
 21233 0000F91B 803804                  	cmp byte [rax], T_closure
 21234 0000F91E 0F8512860000            	jne L_error_non_closure
 21235 0000F924 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21236 0000F927 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21237 0000F92A FF7500                  	push qword[rbp]
 21238 0000F92D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21239 0000F930 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21240 0000F934 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21241 0000F938 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21242 0000F93C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21243 0000F93F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21244 0000F942 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21245 0000F947 4983C103                	add r9, 3 	 ;for getting to the params
 21246 0000F94B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21247 0000F94F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21248                                  .L_tc_recycle_frame_loop_00c0:
 21249 0000F952 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21250 0000F955 7410                    	je .L_tc_recycle_frame_done_00c0
 21251 0000F957 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21252 0000F95A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21253 0000F95D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21254 0000F961 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21255 0000F965 EBEB                    	jmp .L_tc_recycle_frame_loop_00c0
 21256                                  .L_tc_recycle_frame_done_00c0:
 21257 0000F967 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21258 0000F968 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21259 0000F96C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21260 0000F96F C9                      	leave
 21261 0000F970 C22000                  	ret AND_KILL_FRAME(2)
 21262                                  .L_lambda_simple_end_0076:	; new closure is in rax
 21263 0000F973 50                      	push rax
 21264 0000F974 6A01                    	push 1	; arg count
 21265 0000F976 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21266 0000F97B E85F860000              	call malloc
 21267 0000F980 50                      	push rax
 21268 0000F981 BF08000000              	mov rdi, 8 * 1	; new rib
 21269 0000F986 E854860000              	call malloc
 21270 0000F98B 50                      	push rax
 21271 0000F98C BF18000000              	mov rdi, 8 * 3	; extended env
 21272 0000F991 E849860000              	call malloc
 21273 0000F996 488B7D10                	mov rdi, ENV
 21274 0000F99A BE00000000              	mov rsi, 0
 21275 0000F99F BA01000000              	mov rdx, 1
 21276                                  .L_lambda_simple_env_loop_0078:	; ext_env[i + 1] <-- env[i]
 21277 0000F9A4 4883FE02                	cmp rsi, 2
 21278 0000F9A8 7410                    	je .L_lambda_simple_env_end_0078
 21279 0000F9AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21280 0000F9AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21281 0000F9B2 48FFC6                  	inc rsi
 21282 0000F9B5 48FFC2                  	inc rdx
 21283 0000F9B8 EBEA                    	jmp .L_lambda_simple_env_loop_0078
 21284                                  .L_lambda_simple_env_end_0078:
 21285 0000F9BA 5B                      	pop rbx
 21286 0000F9BB BE00000000              	mov rsi, 0
 21287                                  .L_lambda_simple_params_loop_0078:	; copy params
 21288 0000F9C0 4883FE01                	cmp rsi, 1
 21289 0000F9C4 740E                    	je .L_lambda_simple_params_end_0078
 21290 0000F9C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21291 0000F9CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21292 0000F9CF 48FFC6                  	inc rsi
 21293 0000F9D2 EBEC                    	jmp .L_lambda_simple_params_loop_0078
 21294                                  .L_lambda_simple_params_end_0078:
 21295 0000F9D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21296 0000F9D7 4889C3                  	mov rbx, rax
 21297 0000F9DA 58                      	pop rax
 21298 0000F9DB C60004                  	mov byte [rax], T_closure
 21299 0000F9DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21300 0000F9E2 48C74009[EFF90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0078
 21301 0000F9EA E99B050000              	jmp .L_lambda_simple_end_0078
 21302                                  .L_lambda_simple_code_0078:	; lambda-simple body
 21303 0000F9EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21304 0000F9F5 740B                    	je .L_lambda_simple_arity_check_ok_0078
 21305 0000F9F7 FF742410                	push qword [rsp + 8 * 2]
 21306 0000F9FB 6A01                    	push 1
 21307 0000F9FD E996850000              	jmp L_error_incorrect_arity_simple
 21308                                  .L_lambda_simple_arity_check_ok_0078:
 21309 0000FA02 C8000000                	enter 0, 0
 21310                                  	; preparing a tail-call
 21311 0000FA06 48B8-                   	mov rax, L_constants + 1993
 21311 0000FA08 [C907000000000000] 
 21312 0000FA10 50                      	push rax
 21313 0000FA11 6A01                    	push 1	; arg count
 21314 0000FA13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21315 0000FA18 E8C2850000              	call malloc
 21316 0000FA1D 50                      	push rax
 21317 0000FA1E BF08000000              	mov rdi, 8 * 1	; new rib
 21318 0000FA23 E8B7850000              	call malloc
 21319 0000FA28 50                      	push rax
 21320 0000FA29 BF20000000              	mov rdi, 8 * 4	; extended env
 21321 0000FA2E E8AC850000              	call malloc
 21322 0000FA33 488B7D10                	mov rdi, ENV
 21323 0000FA37 BE00000000              	mov rsi, 0
 21324 0000FA3C BA01000000              	mov rdx, 1
 21325                                  .L_lambda_simple_env_loop_0079:	; ext_env[i + 1] <-- env[i]
 21326 0000FA41 4883FE03                	cmp rsi, 3
 21327 0000FA45 7410                    	je .L_lambda_simple_env_end_0079
 21328 0000FA47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21329 0000FA4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21330 0000FA4F 48FFC6                  	inc rsi
 21331 0000FA52 48FFC2                  	inc rdx
 21332 0000FA55 EBEA                    	jmp .L_lambda_simple_env_loop_0079
 21333                                  .L_lambda_simple_env_end_0079:
 21334 0000FA57 5B                      	pop rbx
 21335 0000FA58 BE00000000              	mov rsi, 0
 21336                                  .L_lambda_simple_params_loop_0079:	; copy params
 21337 0000FA5D 4883FE01                	cmp rsi, 1
 21338 0000FA61 740E                    	je .L_lambda_simple_params_end_0079
 21339 0000FA63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21340 0000FA68 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21341 0000FA6C 48FFC6                  	inc rsi
 21342 0000FA6F EBEC                    	jmp .L_lambda_simple_params_loop_0079
 21343                                  .L_lambda_simple_params_end_0079:
 21344 0000FA71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21345 0000FA74 4889C3                  	mov rbx, rax
 21346 0000FA77 58                      	pop rax
 21347 0000FA78 C60004                  	mov byte [rax], T_closure
 21348 0000FA7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21349 0000FA7F 48C74009[8CFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0079
 21350 0000FA87 E9A6040000              	jmp .L_lambda_simple_end_0079
 21351                                  .L_lambda_simple_code_0079:	; lambda-simple body
 21352 0000FA8C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21353 0000FA92 740B                    	je .L_lambda_simple_arity_check_ok_0079
 21354 0000FA94 FF742410                	push qword [rsp + 8 * 2]
 21355 0000FA98 6A01                    	push 1
 21356 0000FA9A E9F9840000              	jmp L_error_incorrect_arity_simple
 21357                                  .L_lambda_simple_arity_check_ok_0079:
 21358 0000FA9F C8000000                	enter 0, 0
 21359 0000FAA3 BF08000000              	mov rdi, 8*1
 21360 0000FAA8 E832850000              	call malloc
 21361 0000FAAD 488B5D20                	mov rbx, PARAM(0)
 21362 0000FAB1 488918                  	mov qword[rax], rbx
 21363 0000FAB4 48894520                	mov PARAM(0), rax
 21364 0000FAB8 48B8-                   	mov rax, sob_void
 21364 0000FABA [0000000000000000] 
 21365                                  
 21366 0000FAC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21367 0000FAC7 E813850000              	call malloc
 21368 0000FACC 50                      	push rax
 21369 0000FACD BF08000000              	mov rdi, 8 * 1	; new rib
 21370 0000FAD2 E808850000              	call malloc
 21371 0000FAD7 50                      	push rax
 21372 0000FAD8 BF28000000              	mov rdi, 8 * 5	; extended env
 21373 0000FADD E8FD840000              	call malloc
 21374 0000FAE2 488B7D10                	mov rdi, ENV
 21375 0000FAE6 BE00000000              	mov rsi, 0
 21376 0000FAEB BA01000000              	mov rdx, 1
 21377                                  .L_lambda_simple_env_loop_007a:	; ext_env[i + 1] <-- env[i]
 21378 0000FAF0 4883FE04                	cmp rsi, 4
 21379 0000FAF4 7410                    	je .L_lambda_simple_env_end_007a
 21380 0000FAF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21381 0000FAFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21382 0000FAFE 48FFC6                  	inc rsi
 21383 0000FB01 48FFC2                  	inc rdx
 21384 0000FB04 EBEA                    	jmp .L_lambda_simple_env_loop_007a
 21385                                  .L_lambda_simple_env_end_007a:
 21386 0000FB06 5B                      	pop rbx
 21387 0000FB07 BE00000000              	mov rsi, 0
 21388                                  .L_lambda_simple_params_loop_007a:	; copy params
 21389 0000FB0C 4883FE01                	cmp rsi, 1
 21390 0000FB10 740E                    	je .L_lambda_simple_params_end_007a
 21391 0000FB12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21392 0000FB17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21393 0000FB1B 48FFC6                  	inc rsi
 21394 0000FB1E EBEC                    	jmp .L_lambda_simple_params_loop_007a
 21395                                  .L_lambda_simple_params_end_007a:
 21396 0000FB20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21397 0000FB23 4889C3                  	mov rbx, rax
 21398 0000FB26 58                      	pop rax
 21399 0000FB27 C60004                  	mov byte [rax], T_closure
 21400 0000FB2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21401 0000FB2E 48C74009[3BFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007a
 21402 0000FB36 E962010000              	jmp .L_lambda_simple_end_007a
 21403                                  .L_lambda_simple_code_007a:	; lambda-simple body
 21404 0000FB3B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21405 0000FB41 740B                    	je .L_lambda_simple_arity_check_ok_007a
 21406 0000FB43 FF742410                	push qword [rsp + 8 * 2]
 21407 0000FB47 6A02                    	push 2
 21408 0000FB49 E94A840000              	jmp L_error_incorrect_arity_simple
 21409                                  .L_lambda_simple_arity_check_ok_007a:
 21410 0000FB4E C8000000                	enter 0, 0
 21411                                  	; preparing a non-tail-call
 21412 0000FB52 488B4528                	mov rax, PARAM(1)	; param strs
 21413 0000FB56 50                      	push rax
 21414 0000FB57 6A01                    	push 1	; arg count
 21415 0000FB59 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 21416 0000FB61 803805                  	cmp byte [rax], T_undefined
 21417 0000FB64 0F8448830000            	je L_error_fvar_undefined
 21418 0000FB6A 803804                  	cmp byte [rax], T_closure
 21419 0000FB6D 0F85C3830000            	jne L_error_non_closure
 21420 0000FB73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21421 0000FB76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21422 0000FB79 483D[02000000]          	cmp rax, sob_boolean_false
 21423 0000FB7F 0F8514010000            	jne .L_or_end_000e
 21424                                  	; preparing a non-tail-call
 21425                                  	; preparing a non-tail-call
 21426 0000FB85 488B4528                	mov rax, PARAM(1)	; param strs
 21427 0000FB89 50                      	push rax
 21428 0000FB8A 6A01                    	push 1	; arg count
 21429 0000FB8C 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 21430 0000FB94 803805                  	cmp byte [rax], T_undefined
 21431 0000FB97 0F8415830000            	je L_error_fvar_undefined
 21432 0000FB9D 803804                  	cmp byte [rax], T_closure
 21433 0000FBA0 0F8590830000            	jne L_error_non_closure
 21434 0000FBA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21435 0000FBA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21436 0000FBAC 50                      	push rax
 21437 0000FBAD 488B4520                	mov rax, PARAM(0)	; param str
 21438 0000FBB1 50                      	push rax
 21439 0000FBB2 6A02                    	push 2	; arg count
 21440 0000FBB4 488B4510                	mov rax, ENV
 21441 0000FBB8 488B4008                	mov rax, qword [rax + 8 * 1]
 21442 0000FBBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 21443 0000FBBF 803804                  	cmp byte [rax], T_closure
 21444 0000FBC2 0F856E830000            	jne L_error_non_closure
 21445 0000FBC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21446 0000FBCB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21447 0000FBCE 483D[02000000]          	cmp rax, sob_boolean_false
 21448 0000FBD4 0F84B5000000            	je .L_if_else_0063
 21449                                  	; preparing a tail-call
 21450                                  	; preparing a non-tail-call
 21451 0000FBDA 488B4528                	mov rax, PARAM(1)	; param strs
 21452 0000FBDE 50                      	push rax
 21453 0000FBDF 6A01                    	push 1	; arg count
 21454 0000FBE1 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 21455 0000FBE9 803805                  	cmp byte [rax], T_undefined
 21456 0000FBEC 0F84C0820000            	je L_error_fvar_undefined
 21457 0000FBF2 803804                  	cmp byte [rax], T_closure
 21458 0000FBF5 0F853B830000            	jne L_error_non_closure
 21459 0000FBFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21460 0000FBFE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21461 0000FC01 50                      	push rax
 21462                                  	; preparing a non-tail-call
 21463 0000FC02 488B4528                	mov rax, PARAM(1)	; param strs
 21464 0000FC06 50                      	push rax
 21465 0000FC07 6A01                    	push 1	; arg count
 21466 0000FC09 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 21467 0000FC11 803805                  	cmp byte [rax], T_undefined
 21468 0000FC14 0F8498820000            	je L_error_fvar_undefined
 21469 0000FC1A 803804                  	cmp byte [rax], T_closure
 21470 0000FC1D 0F8513830000            	jne L_error_non_closure
 21471 0000FC23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21472 0000FC26 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21473 0000FC29 50                      	push rax
 21474 0000FC2A 6A02                    	push 2	; arg count
 21475 0000FC2C 488B4510                	mov rax, ENV
 21476 0000FC30 488B00                  	mov rax, qword [rax + 8 * 0]
 21477 0000FC33 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21478 0000FC36 488B00                  	mov rax, qword [rax]
 21479 0000FC39 803804                  	cmp byte [rax], T_closure
 21480 0000FC3C 0F85F4820000            	jne L_error_non_closure
 21481 0000FC42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21482 0000FC45 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21483 0000FC48 FF7500                  	push qword[rbp]
 21484 0000FC4B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21485 0000FC4E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21486 0000FC52 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21487 0000FC56 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21488 0000FC5A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21489 0000FC5D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21490 0000FC60 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21491 0000FC65 4983C103                	add r9, 3 	 ;for getting to the params
 21492 0000FC69 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21493 0000FC6D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21494                                  .L_tc_recycle_frame_loop_00c1:
 21495 0000FC70 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21496 0000FC73 7410                    	je .L_tc_recycle_frame_done_00c1
 21497 0000FC75 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21498 0000FC78 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21499 0000FC7B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21500 0000FC7F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21501 0000FC83 EBEB                    	jmp .L_tc_recycle_frame_loop_00c1
 21502                                  .L_tc_recycle_frame_done_00c1:
 21503 0000FC85 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21504 0000FC86 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21505 0000FC8A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21506 0000FC8D EB0A                    	jmp .L_if_end_0063
 21507                                  .L_if_else_0063:
 21508 0000FC8F 48B8-                   	mov rax, L_constants + 2
 21508 0000FC91 [0200000000000000] 
 21509                                  .L_if_end_0063:
 21510                                  .L_or_end_000e:
 21511 0000FC99 C9                      	leave
 21512 0000FC9A C22000                  	ret AND_KILL_FRAME(2)
 21513                                  .L_lambda_simple_end_007a:	; new closure is in rax
 21514 0000FC9D 50                      	push rax
 21515 0000FC9E 488B4520                	mov rax, PARAM(0)	; param run
 21516 0000FCA2 8F00                    	pop qword [rax]
 21517 0000FCA4 48B8-                   	mov rax, sob_void
 21517 0000FCA6 [0000000000000000] 
 21518                                  
 21519 0000FCAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21520 0000FCB3 E827830000              	call malloc
 21521 0000FCB8 50                      	push rax
 21522 0000FCB9 BF08000000              	mov rdi, 8 * 1	; new rib
 21523 0000FCBE E81C830000              	call malloc
 21524 0000FCC3 50                      	push rax
 21525 0000FCC4 BF28000000              	mov rdi, 8 * 5	; extended env
 21526 0000FCC9 E811830000              	call malloc
 21527 0000FCCE 488B7D10                	mov rdi, ENV
 21528 0000FCD2 BE00000000              	mov rsi, 0
 21529 0000FCD7 BA01000000              	mov rdx, 1
 21530                                  .L_lambda_opt_env_loop_0012:	; ext_env[i + 1] <-- env[i]
 21531 0000FCDC 4883FE04                	cmp rsi, 4
 21532 0000FCE0 7410                    	je .L_lambda_opt_env_end_0012
 21533 0000FCE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21534 0000FCE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21535 0000FCEA 48FFC6                  	inc rsi
 21536 0000FCED 48FFC2                  	inc rdx
 21537 0000FCF0 EBEA                    	jmp .L_lambda_opt_env_loop_0012
 21538                                  .L_lambda_opt_env_end_0012:
 21539 0000FCF2 5B                      	pop rbx
 21540 0000FCF3 BE00000000              	mov rsi, 0
 21541                                  .L_lambda_opt_params_loop_0012:	; copy params
 21542 0000FCF8 4883FE01                	cmp rsi, 1
 21543 0000FCFC 740E                    	je .L_lambda_opt_params_end_0012
 21544 0000FCFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21545 0000FD03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21546 0000FD07 48FFC6                  	inc rsi
 21547 0000FD0A EBEC                    	jmp .L_lambda_opt_params_loop_0012
 21548                                  .L_lambda_opt_params_end_0012:
 21549 0000FD0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21550 0000FD0F 4889C3                  	mov rbx, rax
 21551 0000FD12 58                      	pop rax
 21552 0000FD13 C60004                  	mov byte [rax], T_closure
 21553 0000FD16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21554 0000FD1A 48C74009[27FD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0012
 21555 0000FD22 E907020000              	jmp .L_lambda_opt_end_0012
 21556                                  .L_lambda_opt_code_0012:	; lambda-opt body
 21557 0000FD27 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21558 0000FD2D 7411                    	je .L_lambda_opt_arity_check_exact_0012
 21559 0000FD2F 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0012
 21560 0000FD35 FF742410                	push qword [rsp + 8 * 2]
 21561 0000FD39 6A01                    	push 1
 21562 0000FD3B E96C820000              	jmp L_error_incorrect_arity_opt
 21563                                  .L_lambda_opt_arity_check_exact_0012:
 21564 0000FD40 4883EC08                	sub rsp, 8
 21565 0000FD44 488B442408              	mov rax, qword[rsp + 8 *1]
 21566 0000FD49 48890424                	mov qword[rsp], rax  
 21567 0000FD4D 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 21568 0000FD52 4889442408              	mov qword[rsp + 8 * 1], rax
 21569 0000FD57 B802000000              	mov rax, 2
 21570 0000FD5C 4889442410              	mov qword[rsp + 8 *2], rax
 21571 0000FD61 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 21572 0000FD66 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 21573 0000FD6B 48B8-                   	mov rax, sob_nil
 21573 0000FD6D [0100000000000000] 
 21574 0000FD75 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 21575 0000FD7A C8000000                	enter 0, 0
 21576                                  	; preparing a tail-call
 21577 0000FD7E 488B4528                	mov rax, PARAM(1)	; param strs
 21578 0000FD82 50                      	push rax
 21579 0000FD83 488B4520                	mov rax, PARAM(0)	; param str
 21580 0000FD87 50                      	push rax
 21581 0000FD88 6A02                    	push 2	; arg count
 21582 0000FD8A 488B4510                	mov rax, ENV
 21583 0000FD8E 488B00                  	mov rax, qword [rax + 8 * 0]
 21584 0000FD91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21585 0000FD94 488B00                  	mov rax, qword [rax]
 21586 0000FD97 803804                  	cmp byte [rax], T_closure
 21587 0000FD9A 0F8596810000            	jne L_error_non_closure
 21588 0000FDA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21589 0000FDA3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21590 0000FDA6 FF7500                  	push qword[rbp]
 21591 0000FDA9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21592 0000FDAC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21593 0000FDB0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21594 0000FDB4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21595 0000FDB8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21596 0000FDBB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21597 0000FDBE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21598 0000FDC3 4983C103                	add r9, 3 	 ;for getting to the params
 21599 0000FDC7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21600 0000FDCB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21601                                  .L_tc_recycle_frame_loop_00c3:
 21602 0000FDCE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21603 0000FDD1 7410                    	je .L_tc_recycle_frame_done_00c3
 21604 0000FDD3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21605 0000FDD6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21606 0000FDD9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21607 0000FDDD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21608 0000FDE1 EBEB                    	jmp .L_tc_recycle_frame_loop_00c3
 21609                                  .L_tc_recycle_frame_done_00c3:
 21610 0000FDE3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21611 0000FDE4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21612 0000FDE8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21613 0000FDEB C9                      	leave
 21614 0000FDEC C22000                  	ret AND_KILL_FRAME(2)
 21615 0000FDEF E93A010000              	jmp .L_lambda_opt_end_0012	; new closure is in rax
 21616                                  .L_lambda_opt_arity_check_more_0012:
 21617 0000FDF4 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 21618 0000FDF9 49B9-                   	mov r9, sob_nil
 21618 0000FDFB [0100000000000000] 
 21619 0000FE03 4889E3                  	mov rbx, rsp 
 21620 0000FE06 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 21621 0000FE0A 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 21622 0000FE0D 49C1E003                	shl r8, 3
 21623 0000FE11 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 21624 0000FE14 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 21625                                  .L_lambda_opt_stack_shrink_loop_0012:
 21626 0000FE19 4983F801                	cmp r8, 1
 21627 0000FE1D 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0012
 21628 0000FE1F BF11000000              	mov rdi, 1+8+8	;for pair
 21629 0000FE24 E8B6810000              	call malloc	 ;to create the pair in the stack
 21630 0000FE29 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 21631 0000FE2C 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 21632 0000FE2F 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 21633 0000FE33 4C894809                 	mov qword[rax+1+8],r9
 21634 0000FE37 4989C1                  	mov r9, rax	 ; for the recursion 
 21635 0000FE3A 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 21636 0000FE3D 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 21637 0000FE41 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0012
 21638                                  .L_lambda_opt_stack_shrink_loop_exit_0012:
 21639 0000FE43 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 21640 0000FE48 4883E902                	sub rcx, 2
 21641 0000FE4C 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 21642 0000FE50 4801CC                  	add rsp, rcx	 ;shrinking the stack
 21643 0000FE53 4889E0                  	mov rax, rsp
 21644 0000FE56 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 21645 0000FE59 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 21646 0000FE5D 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 21647 0000FE60 4883C018                	add rax, 3 * 8 	;now rax is param 0
 21648 0000FE64 49C1E003                	shl r8, 3 	; convert to byte
 21649 0000FE68 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 21650 0000FE6B 4C8908                  	mov qword[rax], r9	;puting the list at the top
 21651 0000FE6E 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 21652 0000FE72 4889E3                  	mov rbx, rsp 
 21653 0000FE75 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 21654 0000FE78 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 21655 0000FE7E 49FFCA                  	dec r10 
 21656 0000FE81 49C1E203                	shl r10, 3	;to get bytes
 21657 0000FE85 4883C318                	add rbx, 3*8 	;rbx is the first param
 21658 0000FE89 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 21659 0000FE8C 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 21660                                  
 21661 0000FE8F 4C8900                              	mov qword[rax], r8
 21662 0000FE92 4883E808                            	sub rax, 8
 21663 0000FE96 4883EB08                	sub rbx, 8
 21664 0000FE9A 4889E0                  	mov rax, rsp
 21665 0000FE9D 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 21666 0000FEA0 48C744241002000000      	mov qword [rsp+2*8], 2
 21667 0000FEA9 488B5808                	mov rbx, qword[rax + 8 *1]
 21668 0000FEAD 48895C2408              	mov qword [rsp + 1*8] ,rbx
 21669 0000FEB2 488B18                  	mov rbx, qword[rax]
 21670 0000FEB5 48891C24                	mov qword [rsp], rbx
 21671 0000FEB9 C8000000                	enter 0, 0
 21672                                  	; preparing a tail-call
 21673 0000FEBD 488B4528                	mov rax, PARAM(1)	; param strs
 21674 0000FEC1 50                      	push rax
 21675 0000FEC2 488B4520                	mov rax, PARAM(0)	; param str
 21676 0000FEC6 50                      	push rax
 21677 0000FEC7 6A02                    	push 2	; arg count
 21678 0000FEC9 488B4510                	mov rax, ENV
 21679 0000FECD 488B00                  	mov rax, qword [rax + 8 * 0]
 21680 0000FED0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21681 0000FED3 488B00                  	mov rax, qword [rax]
 21682 0000FED6 803804                  	cmp byte [rax], T_closure
 21683 0000FED9 0F8557800000            	jne L_error_non_closure
 21684 0000FEDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 21685 0000FEE2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21686 0000FEE5 FF7500                  	push qword[rbp]
 21687 0000FEE8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21688 0000FEEB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21689 0000FEEF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21690 0000FEF3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21691 0000FEF7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21692 0000FEFA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21693 0000FEFD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21694 0000FF02 4983C103                	add r9, 3 	 ;for getting to the params
 21695 0000FF06 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21696 0000FF0A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21697                                  .L_tc_recycle_frame_loop_00c2:
 21698 0000FF0D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21699 0000FF10 7410                    	je .L_tc_recycle_frame_done_00c2
 21700 0000FF12 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21701 0000FF15 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21702 0000FF18 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21703 0000FF1C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21704 0000FF20 EBEB                    	jmp .L_tc_recycle_frame_loop_00c2
 21705                                  .L_tc_recycle_frame_done_00c2:
 21706 0000FF22 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21707 0000FF23 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21708 0000FF27 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21709 0000FF2A C9                      	leave
 21710 0000FF2B C22000                  	ret AND_KILL_FRAME(2)
 21711                                  .L_lambda_opt_end_0012:	; new closure is in rax
 21712 0000FF2E C9                      	leave
 21713 0000FF2F C21800                  	ret AND_KILL_FRAME(1)
 21714                                  .L_lambda_simple_end_0079:	; new closure is in rax
 21715 0000FF32 803804                  	cmp byte [rax], T_closure
 21716 0000FF35 0F85FB7F0000            	jne L_error_non_closure
 21717 0000FF3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21718 0000FF3E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21719 0000FF41 FF7500                  	push qword[rbp]
 21720 0000FF44 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21721 0000FF47 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21722 0000FF4B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21723 0000FF4F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21724 0000FF53 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21725 0000FF56 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21726 0000FF59 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21727 0000FF5E 4983C103                	add r9, 3 	 ;for getting to the params
 21728 0000FF62 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21729 0000FF66 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21730                                  .L_tc_recycle_frame_loop_00c4:
 21731 0000FF69 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21732 0000FF6C 7410                    	je .L_tc_recycle_frame_done_00c4
 21733 0000FF6E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21734 0000FF71 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21735 0000FF74 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21736 0000FF78 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21737 0000FF7C EBEB                    	jmp .L_tc_recycle_frame_loop_00c4
 21738                                  .L_tc_recycle_frame_done_00c4:
 21739 0000FF7E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21740 0000FF7F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21741 0000FF83 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21742 0000FF86 C9                      	leave
 21743 0000FF87 C21800                  	ret AND_KILL_FRAME(1)
 21744                                  .L_lambda_simple_end_0078:	; new closure is in rax
 21745 0000FF8A 803804                  	cmp byte [rax], T_closure
 21746 0000FF8D 0F85A37F0000            	jne L_error_non_closure
 21747 0000FF93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21748 0000FF96 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21749 0000FF99 FF7500                  	push qword[rbp]
 21750 0000FF9C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21751 0000FF9F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21752 0000FFA3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21753 0000FFA7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21754 0000FFAB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21755 0000FFAE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21756 0000FFB1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21757 0000FFB6 4983C103                	add r9, 3 	 ;for getting to the params
 21758 0000FFBA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21759 0000FFBE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21760                                  .L_tc_recycle_frame_loop_00c5:
 21761 0000FFC1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21762 0000FFC4 7410                    	je .L_tc_recycle_frame_done_00c5
 21763 0000FFC6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21764 0000FFC9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21765 0000FFCC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21766 0000FFD0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21767 0000FFD4 EBEB                    	jmp .L_tc_recycle_frame_loop_00c5
 21768                                  .L_tc_recycle_frame_done_00c5:
 21769 0000FFD6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21770 0000FFD7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21771 0000FFDB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21772 0000FFDE C9                      	leave
 21773 0000FFDF C21800                  	ret AND_KILL_FRAME(1)
 21774                                  .L_lambda_simple_end_0074:	; new closure is in rax
 21775 0000FFE2 803804                  	cmp byte [rax], T_closure
 21776 0000FFE5 0F854B7F0000            	jne L_error_non_closure
 21777 0000FFEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21778 0000FFEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21779 0000FFF1 FF7500                  	push qword[rbp]
 21780 0000FFF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21781 0000FFF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21782 0000FFFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21783 0000FFFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21784 00010003 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21785 00010006 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21786 00010009 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21787 0001000E 4983C103                	add r9, 3 	 ;for getting to the params
 21788 00010012 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21789 00010016 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21790                                  .L_tc_recycle_frame_loop_00c6:
 21791 00010019 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21792 0001001C 7410                    	je .L_tc_recycle_frame_done_00c6
 21793 0001001E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21794 00010021 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21795 00010024 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21796 00010028 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21797 0001002C EBEB                    	jmp .L_tc_recycle_frame_loop_00c6
 21798                                  .L_tc_recycle_frame_done_00c6:
 21799 0001002E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21800 0001002F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21801 00010033 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21802 00010036 C9                      	leave
 21803 00010037 C22000                  	ret AND_KILL_FRAME(2)
 21804                                  .L_lambda_simple_end_0073:	; new closure is in rax
 21805 0001003A 50                      	push rax
 21806 0001003B 6A01                    	push 1	; arg count
 21807 0001003D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21808 00010042 E8987F0000              	call malloc
 21809 00010047 50                      	push rax
 21810 00010048 BF00000000              	mov rdi, 8 * 0	; new rib
 21811 0001004D E88D7F0000              	call malloc
 21812 00010052 50                      	push rax
 21813 00010053 BF08000000              	mov rdi, 8 * 1	; extended env
 21814 00010058 E8827F0000              	call malloc
 21815 0001005D 488B7D10                	mov rdi, ENV
 21816 00010061 BE00000000              	mov rsi, 0
 21817 00010066 BA01000000              	mov rdx, 1
 21818                                  .L_lambda_simple_env_loop_007b:	; ext_env[i + 1] <-- env[i]
 21819 0001006B 4883FE00                	cmp rsi, 0
 21820 0001006F 7410                    	je .L_lambda_simple_env_end_007b
 21821 00010071 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21822 00010075 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21823 00010079 48FFC6                  	inc rsi
 21824 0001007C 48FFC2                  	inc rdx
 21825 0001007F EBEA                    	jmp .L_lambda_simple_env_loop_007b
 21826                                  .L_lambda_simple_env_end_007b:
 21827 00010081 5B                      	pop rbx
 21828 00010082 BE00000000              	mov rsi, 0
 21829                                  .L_lambda_simple_params_loop_007b:	; copy params
 21830 00010087 4883FE00                	cmp rsi, 0
 21831 0001008B 740E                    	je .L_lambda_simple_params_end_007b
 21832 0001008D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21833 00010092 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21834 00010096 48FFC6                  	inc rsi
 21835 00010099 EBEC                    	jmp .L_lambda_simple_params_loop_007b
 21836                                  .L_lambda_simple_params_end_007b:
 21837 0001009B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21838 0001009E 4889C3                  	mov rbx, rax
 21839 000100A1 58                      	pop rax
 21840 000100A2 C60004                  	mov byte [rax], T_closure
 21841 000100A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21842 000100A9 48C74009[B6000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007b
 21843 000100B1 E947010000              	jmp .L_lambda_simple_end_007b
 21844                                  .L_lambda_simple_code_007b:	; lambda-simple body
 21845 000100B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21846 000100BC 740B                    	je .L_lambda_simple_arity_check_ok_007b
 21847 000100BE FF742410                	push qword [rsp + 8 * 2]
 21848 000100C2 6A01                    	push 1
 21849 000100C4 E9CF7E0000              	jmp L_error_incorrect_arity_simple
 21850                                  .L_lambda_simple_arity_check_ok_007b:
 21851 000100C9 C8000000                	enter 0, 0
 21852                                  	; preparing a non-tail-call
 21853 000100CD 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 21854 000100D5 803805                  	cmp byte [rax], T_undefined
 21855 000100D8 0F84D47D0000            	je L_error_fvar_undefined
 21856 000100DE 50                      	push rax
 21857 000100DF 488B0425[AF120000]      	mov rax, qword [free_var_74]	; free var char<?
 21858 000100E7 803805                  	cmp byte [rax], T_undefined
 21859 000100EA 0F84C27D0000            	je L_error_fvar_undefined
 21860 000100F0 50                      	push rax
 21861 000100F1 6A02                    	push 2	; arg count
 21862 000100F3 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21863 000100F7 803804                  	cmp byte [rax], T_closure
 21864 000100FA 0F85367E0000            	jne L_error_non_closure
 21865 00010100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21866 00010103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21867 00010106 48890425[9A160000]      	mov qword [free_var_133], rax
 21868 0001010E 48B8-                   	mov rax, sob_void
 21868 00010110 [0000000000000000] 
 21869                                  
 21870                                  	; preparing a non-tail-call
 21871 00010118 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21872 00010120 803805                  	cmp byte [rax], T_undefined
 21873 00010123 0F84897D0000            	je L_error_fvar_undefined
 21874 00010129 50                      	push rax
 21875 0001012A 488B0425[38120000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 21876 00010132 803805                  	cmp byte [rax], T_undefined
 21877 00010135 0F84777D0000            	je L_error_fvar_undefined
 21878 0001013B 50                      	push rax
 21879 0001013C 6A02                    	push 2	; arg count
 21880 0001013E 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21881 00010142 803804                  	cmp byte [rax], T_closure
 21882 00010145 0F85EB7D0000            	jne L_error_non_closure
 21883 0001014B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21884 0001014E FF5009                  	call SOB_CLOSURE_CODE(rax)
 21885 00010151 48890425[CE150000]      	mov qword [free_var_121], rax
 21886 00010159 48B8-                   	mov rax, sob_void
 21886 0001015B [0000000000000000] 
 21887                                  
 21888                                  	; preparing a non-tail-call
 21889 00010163 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 21890 0001016B 803805                  	cmp byte [rax], T_undefined
 21891 0001016E 0F843E7D0000            	je L_error_fvar_undefined
 21892 00010174 50                      	push rax
 21893 00010175 488B0425[E2120000]      	mov rax, qword [free_var_77]	; free var char>?
 21894 0001017D 803805                  	cmp byte [rax], T_undefined
 21895 00010180 0F842C7D0000            	je L_error_fvar_undefined
 21896 00010186 50                      	push rax
 21897 00010187 6A02                    	push 2	; arg count
 21898 00010189 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21899 0001018D 803804                  	cmp byte [rax], T_closure
 21900 00010190 0F85A07D0000            	jne L_error_non_closure
 21901 00010196 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21902 00010199 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21903 0001019C 48890425[CD160000]      	mov qword [free_var_136], rax
 21904 000101A4 48B8-                   	mov rax, sob_void
 21904 000101A6 [0000000000000000] 
 21905                                  
 21906                                  	; preparing a non-tail-call
 21907 000101AE 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21908 000101B6 803805                  	cmp byte [rax], T_undefined
 21909 000101B9 0F84F37C0000            	je L_error_fvar_undefined
 21910 000101BF 50                      	push rax
 21911 000101C0 488B0425[6B120000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 21912 000101C8 803805                  	cmp byte [rax], T_undefined
 21913 000101CB 0F84E17C0000            	je L_error_fvar_undefined
 21914 000101D1 50                      	push rax
 21915 000101D2 6A02                    	push 2	; arg count
 21916 000101D4 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21917 000101D8 803804                  	cmp byte [rax], T_closure
 21918 000101DB 0F85557D0000            	jne L_error_non_closure
 21919 000101E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21920 000101E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21921 000101E7 48890425[01160000]      	mov qword [free_var_124], rax
 21922 000101EF 48B8-                   	mov rax, sob_void
 21922 000101F1 [0000000000000000] 
 21923 000101F9 C9                      	leave
 21924 000101FA C21800                  	ret AND_KILL_FRAME(1)
 21925                                  .L_lambda_simple_end_007b:	; new closure is in rax
 21926 000101FD 803804                  	cmp byte [rax], T_closure
 21927 00010200 0F85307D0000            	jne L_error_non_closure
 21928 00010206 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21929 00010209 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21930                                  
 21931 0001020C 4889C7                  	mov rdi, rax
 21932 0001020F E820800000              	call print_sexpr_if_not_void
 21933                                  	; preparing a non-tail-call
 21934 00010214 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21935 00010219 E8C17D0000              	call malloc
 21936 0001021E 50                      	push rax
 21937 0001021F BF00000000              	mov rdi, 8 * 0	; new rib
 21938 00010224 E8B67D0000              	call malloc
 21939 00010229 50                      	push rax
 21940 0001022A BF08000000              	mov rdi, 8 * 1	; extended env
 21941 0001022F E8AB7D0000              	call malloc
 21942 00010234 488B7D10                	mov rdi, ENV
 21943 00010238 BE00000000              	mov rsi, 0
 21944 0001023D BA01000000              	mov rdx, 1
 21945                                  .L_lambda_simple_env_loop_007c:	; ext_env[i + 1] <-- env[i]
 21946 00010242 4883FE00                	cmp rsi, 0
 21947 00010246 7410                    	je .L_lambda_simple_env_end_007c
 21948 00010248 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21949 0001024C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21950 00010250 48FFC6                  	inc rsi
 21951 00010253 48FFC2                  	inc rdx
 21952 00010256 EBEA                    	jmp .L_lambda_simple_env_loop_007c
 21953                                  .L_lambda_simple_env_end_007c:
 21954 00010258 5B                      	pop rbx
 21955 00010259 BE00000000              	mov rsi, 0
 21956                                  .L_lambda_simple_params_loop_007c:	; copy params
 21957 0001025E 4883FE00                	cmp rsi, 0
 21958 00010262 740E                    	je .L_lambda_simple_params_end_007c
 21959 00010264 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21960 00010269 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21961 0001026D 48FFC6                  	inc rsi
 21962 00010270 EBEC                    	jmp .L_lambda_simple_params_loop_007c
 21963                                  .L_lambda_simple_params_end_007c:
 21964 00010272 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21965 00010275 4889C3                  	mov rbx, rax
 21966 00010278 58                      	pop rax
 21967 00010279 C60004                  	mov byte [rax], T_closure
 21968 0001027C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21969 00010280 48C74009[8D020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007c
 21970 00010288 E98B0C0000              	jmp .L_lambda_simple_end_007c
 21971                                  .L_lambda_simple_code_007c:	; lambda-simple body
 21972 0001028D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21973 00010293 740B                    	je .L_lambda_simple_arity_check_ok_007c
 21974 00010295 FF742410                	push qword [rsp + 8 * 2]
 21975 00010299 6A01                    	push 1
 21976 0001029B E9F87C0000              	jmp L_error_incorrect_arity_simple
 21977                                  .L_lambda_simple_arity_check_ok_007c:
 21978 000102A0 C8000000                	enter 0, 0
 21979                                  	; preparing a tail-call
 21980 000102A4 48B8-                   	mov rax, L_constants + 1993
 21980 000102A6 [C907000000000000] 
 21981 000102AE 50                      	push rax
 21982 000102AF 6A01                    	push 1	; arg count
 21983 000102B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21984 000102B6 E8247D0000              	call malloc
 21985 000102BB 50                      	push rax
 21986 000102BC BF08000000              	mov rdi, 8 * 1	; new rib
 21987 000102C1 E8197D0000              	call malloc
 21988 000102C6 50                      	push rax
 21989 000102C7 BF10000000              	mov rdi, 8 * 2	; extended env
 21990 000102CC E80E7D0000              	call malloc
 21991 000102D1 488B7D10                	mov rdi, ENV
 21992 000102D5 BE00000000              	mov rsi, 0
 21993 000102DA BA01000000              	mov rdx, 1
 21994                                  .L_lambda_simple_env_loop_007d:	; ext_env[i + 1] <-- env[i]
 21995 000102DF 4883FE01                	cmp rsi, 1
 21996 000102E3 7410                    	je .L_lambda_simple_env_end_007d
 21997 000102E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21998 000102E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21999 000102ED 48FFC6                  	inc rsi
 22000 000102F0 48FFC2                  	inc rdx
 22001 000102F3 EBEA                    	jmp .L_lambda_simple_env_loop_007d
 22002                                  .L_lambda_simple_env_end_007d:
 22003 000102F5 5B                      	pop rbx
 22004 000102F6 BE00000000              	mov rsi, 0
 22005                                  .L_lambda_simple_params_loop_007d:	; copy params
 22006 000102FB 4883FE01                	cmp rsi, 1
 22007 000102FF 740E                    	je .L_lambda_simple_params_end_007d
 22008 00010301 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22009 00010306 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22010 0001030A 48FFC6                  	inc rsi
 22011 0001030D EBEC                    	jmp .L_lambda_simple_params_loop_007d
 22012                                  .L_lambda_simple_params_end_007d:
 22013 0001030F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22014 00010312 4889C3                  	mov rbx, rax
 22015 00010315 58                      	pop rax
 22016 00010316 C60004                  	mov byte [rax], T_closure
 22017 00010319 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22018 0001031D 48C74009[2A030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007d
 22019 00010325 E9960B0000              	jmp .L_lambda_simple_end_007d
 22020                                  .L_lambda_simple_code_007d:	; lambda-simple body
 22021 0001032A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22022 00010330 740B                    	je .L_lambda_simple_arity_check_ok_007d
 22023 00010332 FF742410                	push qword [rsp + 8 * 2]
 22024 00010336 6A01                    	push 1
 22025 00010338 E95B7C0000              	jmp L_error_incorrect_arity_simple
 22026                                  .L_lambda_simple_arity_check_ok_007d:
 22027 0001033D C8000000                	enter 0, 0
 22028 00010341 BF08000000              	mov rdi, 8*1
 22029 00010346 E8947C0000              	call malloc
 22030 0001034B 488B5D20                	mov rbx, PARAM(0)
 22031 0001034F 488918                  	mov qword[rax], rbx
 22032 00010352 48894520                	mov PARAM(0), rax
 22033 00010356 48B8-                   	mov rax, sob_void
 22033 00010358 [0000000000000000] 
 22034                                  
 22035 00010360 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22036 00010365 E8757C0000              	call malloc
 22037 0001036A 50                      	push rax
 22038 0001036B BF08000000              	mov rdi, 8 * 1	; new rib
 22039 00010370 E86A7C0000              	call malloc
 22040 00010375 50                      	push rax
 22041 00010376 BF18000000              	mov rdi, 8 * 3	; extended env
 22042 0001037B E85F7C0000              	call malloc
 22043 00010380 488B7D10                	mov rdi, ENV
 22044 00010384 BE00000000              	mov rsi, 0
 22045 00010389 BA01000000              	mov rdx, 1
 22046                                  .L_lambda_simple_env_loop_007e:	; ext_env[i + 1] <-- env[i]
 22047 0001038E 4883FE02                	cmp rsi, 2
 22048 00010392 7410                    	je .L_lambda_simple_env_end_007e
 22049 00010394 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22050 00010398 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22051 0001039C 48FFC6                  	inc rsi
 22052 0001039F 48FFC2                  	inc rdx
 22053 000103A2 EBEA                    	jmp .L_lambda_simple_env_loop_007e
 22054                                  .L_lambda_simple_env_end_007e:
 22055 000103A4 5B                      	pop rbx
 22056 000103A5 BE00000000              	mov rsi, 0
 22057                                  .L_lambda_simple_params_loop_007e:	; copy params
 22058 000103AA 4883FE01                	cmp rsi, 1
 22059 000103AE 740E                    	je .L_lambda_simple_params_end_007e
 22060 000103B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22061 000103B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22062 000103B9 48FFC6                  	inc rsi
 22063 000103BC EBEC                    	jmp .L_lambda_simple_params_loop_007e
 22064                                  .L_lambda_simple_params_end_007e:
 22065 000103BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22066 000103C1 4889C3                  	mov rbx, rax
 22067 000103C4 58                      	pop rax
 22068 000103C5 C60004                  	mov byte [rax], T_closure
 22069 000103C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22070 000103CC 48C74009[D9030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007e
 22071 000103D4 E9CA010000              	jmp .L_lambda_simple_end_007e
 22072                                  .L_lambda_simple_code_007e:	; lambda-simple body
 22073 000103D9 48837C241004            	cmp qword [rsp + 8 * 2], 4
 22074 000103DF 740B                    	je .L_lambda_simple_arity_check_ok_007e
 22075 000103E1 FF742410                	push qword [rsp + 8 * 2]
 22076 000103E5 6A04                    	push 4
 22077 000103E7 E9AC7B0000              	jmp L_error_incorrect_arity_simple
 22078                                  .L_lambda_simple_arity_check_ok_007e:
 22079 000103EC C8000000                	enter 0, 0
 22080                                  	; preparing a non-tail-call
 22081 000103F0 488B4538                	mov rax, PARAM(3)	; param len
 22082 000103F4 50                      	push rax
 22083 000103F5 488B4520                	mov rax, PARAM(0)	; param i
 22084 000103F9 50                      	push rax
 22085 000103FA 6A02                    	push 2	; arg count
 22086 000103FC 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 22087 00010404 803805                  	cmp byte [rax], T_undefined
 22088 00010407 0F84A57A0000            	je L_error_fvar_undefined
 22089 0001040D 803804                  	cmp byte [rax], T_closure
 22090 00010410 0F85207B0000            	jne L_error_non_closure
 22091 00010416 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22092 00010419 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22093 0001041C 483D[02000000]          	cmp rax, sob_boolean_false
 22094 00010422 0F8577010000            	jne .L_or_end_000f
 22095                                  	; preparing a non-tail-call
 22096 00010428 488B4538                	mov rax, PARAM(3)	; param len
 22097 0001042C 50                      	push rax
 22098 0001042D 488B4520                	mov rax, PARAM(0)	; param i
 22099 00010431 50                      	push rax
 22100 00010432 6A02                    	push 2	; arg count
 22101 00010434 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 22102 0001043C 803805                  	cmp byte [rax], T_undefined
 22103 0001043F 0F846D7A0000            	je L_error_fvar_undefined
 22104 00010445 803804                  	cmp byte [rax], T_closure
 22105 00010448 0F85E87A0000            	jne L_error_non_closure
 22106 0001044E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22107 00010451 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22108 00010454 483D[02000000]          	cmp rax, sob_boolean_false
 22109 0001045A 0F8435010000            	je .L_if_else_0065
 22110                                  	; preparing a non-tail-call
 22111                                  	; preparing a non-tail-call
 22112 00010460 488B4520                	mov rax, PARAM(0)	; param i
 22113 00010464 50                      	push rax
 22114 00010465 488B4530                	mov rax, PARAM(2)	; param str2
 22115 00010469 50                      	push rax
 22116 0001046A 6A02                    	push 2	; arg count
 22117 0001046C 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 22118 00010474 803805                  	cmp byte [rax], T_undefined
 22119 00010477 0F84357A0000            	je L_error_fvar_undefined
 22120 0001047D 803804                  	cmp byte [rax], T_closure
 22121 00010480 0F85B07A0000            	jne L_error_non_closure
 22122 00010486 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22123 00010489 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22124 0001048C 50                      	push rax
 22125                                  	; preparing a non-tail-call
 22126 0001048D 488B4520                	mov rax, PARAM(0)	; param i
 22127 00010491 50                      	push rax
 22128 00010492 488B4528                	mov rax, PARAM(1)	; param str1
 22129 00010496 50                      	push rax
 22130 00010497 6A02                    	push 2	; arg count
 22131 00010499 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 22132 000104A1 803805                  	cmp byte [rax], T_undefined
 22133 000104A4 0F84087A0000            	je L_error_fvar_undefined
 22134 000104AA 803804                  	cmp byte [rax], T_closure
 22135 000104AD 0F85837A0000            	jne L_error_non_closure
 22136 000104B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22137 000104B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22138 000104B9 50                      	push rax
 22139 000104BA 6A02                    	push 2	; arg count
 22140 000104BC 488B4510                	mov rax, ENV
 22141 000104C0 488B4008                	mov rax, qword [rax + 8 * 1]
 22142 000104C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 22143 000104C7 803804                  	cmp byte [rax], T_closure
 22144 000104CA 0F85667A0000            	jne L_error_non_closure
 22145 000104D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22146 000104D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22147 000104D6 483D[02000000]          	cmp rax, sob_boolean_false
 22148 000104DC 0F84A7000000            	je .L_if_else_0064
 22149                                  	; preparing a tail-call
 22150 000104E2 488B4538                	mov rax, PARAM(3)	; param len
 22151 000104E6 50                      	push rax
 22152 000104E7 488B4530                	mov rax, PARAM(2)	; param str2
 22153 000104EB 50                      	push rax
 22154 000104EC 488B4528                	mov rax, PARAM(1)	; param str1
 22155 000104F0 50                      	push rax
 22156                                  	; preparing a non-tail-call
 22157 000104F1 48B8-                   	mov rax, L_constants + 2270
 22157 000104F3 [DE08000000000000] 
 22158 000104FB 50                      	push rax
 22159 000104FC 488B4520                	mov rax, PARAM(0)	; param i
 22160 00010500 50                      	push rax
 22161 00010501 6A02                    	push 2	; arg count
 22162 00010503 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 22163 0001050B 803805                  	cmp byte [rax], T_undefined
 22164 0001050E 0F849E790000            	je L_error_fvar_undefined
 22165 00010514 803804                  	cmp byte [rax], T_closure
 22166 00010517 0F85197A0000            	jne L_error_non_closure
 22167 0001051D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22168 00010520 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22169 00010523 50                      	push rax
 22170 00010524 6A04                    	push 4	; arg count
 22171 00010526 488B4510                	mov rax, ENV
 22172 0001052A 488B00                  	mov rax, qword [rax + 8 * 0]
 22173 0001052D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22174 00010530 488B00                  	mov rax, qword [rax]
 22175 00010533 803804                  	cmp byte [rax], T_closure
 22176 00010536 0F85FA790000            	jne L_error_non_closure
 22177 0001053C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22178 0001053F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22179 00010542 FF7500                  	push qword[rbp]
 22180 00010545 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22181 00010548 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22182 0001054C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22183 00010550 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22184 00010554 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22185 00010557 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22186 0001055A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22187 0001055F 4983C103                	add r9, 3 	 ;for getting to the params
 22188 00010563 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22189 00010567 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22190                                  .L_tc_recycle_frame_loop_00c7:
 22191 0001056A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22192 0001056D 7410                    	je .L_tc_recycle_frame_done_00c7
 22193 0001056F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22194 00010572 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22195 00010575 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22196 00010579 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22197 0001057D EBEB                    	jmp .L_tc_recycle_frame_loop_00c7
 22198                                  .L_tc_recycle_frame_done_00c7:
 22199 0001057F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22200 00010580 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22201 00010584 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22202 00010587 EB0A                    	jmp .L_if_end_0064
 22203                                  .L_if_else_0064:
 22204 00010589 48B8-                   	mov rax, L_constants + 2
 22204 0001058B [0200000000000000] 
 22205                                  .L_if_end_0064:
 22206 00010593 EB0A                    	jmp .L_if_end_0065
 22207                                  .L_if_else_0065:
 22208 00010595 48B8-                   	mov rax, L_constants + 2
 22208 00010597 [0200000000000000] 
 22209                                  .L_if_end_0065:
 22210                                  .L_or_end_000f:
 22211 0001059F C9                      	leave
 22212 000105A0 C23000                  	ret AND_KILL_FRAME(4)
 22213                                  .L_lambda_simple_end_007e:	; new closure is in rax
 22214 000105A3 50                      	push rax
 22215 000105A4 488B4520                	mov rax, PARAM(0)	; param run
 22216 000105A8 8F00                    	pop qword [rax]
 22217 000105AA 48B8-                   	mov rax, sob_void
 22217 000105AC [0000000000000000] 
 22218                                  
 22219                                  	; preparing a tail-call
 22220 000105B4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22221 000105B9 E8217A0000              	call malloc
 22222 000105BE 50                      	push rax
 22223 000105BF BF08000000              	mov rdi, 8 * 1	; new rib
 22224 000105C4 E8167A0000              	call malloc
 22225 000105C9 50                      	push rax
 22226 000105CA BF18000000              	mov rdi, 8 * 3	; extended env
 22227 000105CF E80B7A0000              	call malloc
 22228 000105D4 488B7D10                	mov rdi, ENV
 22229 000105D8 BE00000000              	mov rsi, 0
 22230 000105DD BA01000000              	mov rdx, 1
 22231                                  .L_lambda_simple_env_loop_007f:	; ext_env[i + 1] <-- env[i]
 22232 000105E2 4883FE02                	cmp rsi, 2
 22233 000105E6 7410                    	je .L_lambda_simple_env_end_007f
 22234 000105E8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22235 000105EC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22236 000105F0 48FFC6                  	inc rsi
 22237 000105F3 48FFC2                  	inc rdx
 22238 000105F6 EBEA                    	jmp .L_lambda_simple_env_loop_007f
 22239                                  .L_lambda_simple_env_end_007f:
 22240 000105F8 5B                      	pop rbx
 22241 000105F9 BE00000000              	mov rsi, 0
 22242                                  .L_lambda_simple_params_loop_007f:	; copy params
 22243 000105FE 4883FE01                	cmp rsi, 1
 22244 00010602 740E                    	je .L_lambda_simple_params_end_007f
 22245 00010604 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22246 00010609 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22247 0001060D 48FFC6                  	inc rsi
 22248 00010610 EBEC                    	jmp .L_lambda_simple_params_loop_007f
 22249                                  .L_lambda_simple_params_end_007f:
 22250 00010612 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22251 00010615 4889C3                  	mov rbx, rax
 22252 00010618 58                      	pop rax
 22253 00010619 C60004                  	mov byte [rax], T_closure
 22254 0001061C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22255 00010620 48C74009[2D060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007f
 22256 00010628 E924020000              	jmp .L_lambda_simple_end_007f
 22257                                  .L_lambda_simple_code_007f:	; lambda-simple body
 22258 0001062D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22259 00010633 740B                    	je .L_lambda_simple_arity_check_ok_007f
 22260 00010635 FF742410                	push qword [rsp + 8 * 2]
 22261 00010639 6A02                    	push 2
 22262 0001063B E958790000              	jmp L_error_incorrect_arity_simple
 22263                                  .L_lambda_simple_arity_check_ok_007f:
 22264 00010640 C8000000                	enter 0, 0
 22265                                  	; preparing a tail-call
 22266                                  	; preparing a non-tail-call
 22267 00010644 488B4528                	mov rax, PARAM(1)	; param str2
 22268 00010648 50                      	push rax
 22269 00010649 6A01                    	push 1	; arg count
 22270 0001064B 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 22271 00010653 803805                  	cmp byte [rax], T_undefined
 22272 00010656 0F8456780000            	je L_error_fvar_undefined
 22273 0001065C 803804                  	cmp byte [rax], T_closure
 22274 0001065F 0F85D1780000            	jne L_error_non_closure
 22275 00010665 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22276 00010668 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22277 0001066B 50                      	push rax
 22278                                  	; preparing a non-tail-call
 22279 0001066C 488B4520                	mov rax, PARAM(0)	; param str1
 22280 00010670 50                      	push rax
 22281 00010671 6A01                    	push 1	; arg count
 22282 00010673 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 22283 0001067B 803805                  	cmp byte [rax], T_undefined
 22284 0001067E 0F842E780000            	je L_error_fvar_undefined
 22285 00010684 803804                  	cmp byte [rax], T_closure
 22286 00010687 0F85A9780000            	jne L_error_non_closure
 22287 0001068D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22288 00010690 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22289 00010693 50                      	push rax
 22290 00010694 6A02                    	push 2	; arg count
 22291 00010696 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22292 0001069B E83F790000              	call malloc
 22293 000106A0 50                      	push rax
 22294 000106A1 BF10000000              	mov rdi, 8 * 2	; new rib
 22295 000106A6 E834790000              	call malloc
 22296 000106AB 50                      	push rax
 22297 000106AC BF20000000              	mov rdi, 8 * 4	; extended env
 22298 000106B1 E829790000              	call malloc
 22299 000106B6 488B7D10                	mov rdi, ENV
 22300 000106BA BE00000000              	mov rsi, 0
 22301 000106BF BA01000000              	mov rdx, 1
 22302                                  .L_lambda_simple_env_loop_0080:	; ext_env[i + 1] <-- env[i]
 22303 000106C4 4883FE03                	cmp rsi, 3
 22304 000106C8 7410                    	je .L_lambda_simple_env_end_0080
 22305 000106CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22306 000106CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22307 000106D2 48FFC6                  	inc rsi
 22308 000106D5 48FFC2                  	inc rdx
 22309 000106D8 EBEA                    	jmp .L_lambda_simple_env_loop_0080
 22310                                  .L_lambda_simple_env_end_0080:
 22311 000106DA 5B                      	pop rbx
 22312 000106DB BE00000000              	mov rsi, 0
 22313                                  .L_lambda_simple_params_loop_0080:	; copy params
 22314 000106E0 4883FE02                	cmp rsi, 2
 22315 000106E4 740E                    	je .L_lambda_simple_params_end_0080
 22316 000106E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22317 000106EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22318 000106EF 48FFC6                  	inc rsi
 22319 000106F2 EBEC                    	jmp .L_lambda_simple_params_loop_0080
 22320                                  .L_lambda_simple_params_end_0080:
 22321 000106F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22322 000106F7 4889C3                  	mov rbx, rax
 22323 000106FA 58                      	pop rax
 22324 000106FB C60004                  	mov byte [rax], T_closure
 22325 000106FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22326 00010702 48C74009[0F070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0080
 22327 0001070A E9EA000000              	jmp .L_lambda_simple_end_0080
 22328                                  .L_lambda_simple_code_0080:	; lambda-simple body
 22329 0001070F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22330 00010715 740B                    	je .L_lambda_simple_arity_check_ok_0080
 22331 00010717 FF742410                	push qword [rsp + 8 * 2]
 22332 0001071B 6A02                    	push 2
 22333 0001071D E976780000              	jmp L_error_incorrect_arity_simple
 22334                                  .L_lambda_simple_arity_check_ok_0080:
 22335 00010722 C8000000                	enter 0, 0
 22336                                  	; preparing a non-tail-call
 22337 00010726 488B4528                	mov rax, PARAM(1)	; param len2
 22338 0001072A 50                      	push rax
 22339 0001072B 488B4520                	mov rax, PARAM(0)	; param len1
 22340 0001072F 50                      	push rax
 22341 00010730 6A02                    	push 2	; arg count
 22342 00010732 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 22343 0001073A 803805                  	cmp byte [rax], T_undefined
 22344 0001073D 0F846F770000            	je L_error_fvar_undefined
 22345 00010743 803804                  	cmp byte [rax], T_closure
 22346 00010746 0F85EA770000            	jne L_error_non_closure
 22347 0001074C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22348 0001074F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22349 00010752 483D[02000000]          	cmp rax, sob_boolean_false
 22350 00010758 0F848D000000            	je .L_if_else_0066
 22351                                  	; preparing a tail-call
 22352 0001075E 488B4520                	mov rax, PARAM(0)	; param len1
 22353 00010762 50                      	push rax
 22354 00010763 488B4510                	mov rax, ENV
 22355 00010767 488B00                  	mov rax, qword [rax + 8 * 0]
 22356 0001076A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 22357 0001076E 50                      	push rax
 22358 0001076F 488B4510                	mov rax, ENV
 22359 00010773 488B00                  	mov rax, qword [rax + 8 * 0]
 22360 00010776 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 22361 00010779 50                      	push rax
 22362 0001077A 48B8-                   	mov rax, L_constants + 2135
 22362 0001077C [5708000000000000] 
 22363 00010784 50                      	push rax
 22364 00010785 6A04                    	push 4	; arg count
 22365 00010787 488B4510                	mov rax, ENV
 22366 0001078B 488B4008                	mov rax, qword [rax + 8 * 1]
 22367 0001078F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22368 00010792 488B00                  	mov rax, qword [rax]
 22369 00010795 803804                  	cmp byte [rax], T_closure
 22370 00010798 0F8598770000            	jne L_error_non_closure
 22371 0001079E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22372 000107A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22373 000107A4 FF7500                  	push qword[rbp]
 22374 000107A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22375 000107AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22376 000107AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22377 000107B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22378 000107B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22379 000107B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22380 000107BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22381 000107C1 4983C103                	add r9, 3 	 ;for getting to the params
 22382 000107C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22383 000107C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22384                                  .L_tc_recycle_frame_loop_00c8:
 22385 000107CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22386 000107CF 7410                    	je .L_tc_recycle_frame_done_00c8
 22387 000107D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22388 000107D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22389 000107D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22390 000107DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22391 000107DF EBEB                    	jmp .L_tc_recycle_frame_loop_00c8
 22392                                  .L_tc_recycle_frame_done_00c8:
 22393 000107E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22394 000107E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22395 000107E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22396 000107E9 EB0A                    	jmp .L_if_end_0066
 22397                                  .L_if_else_0066:
 22398 000107EB 48B8-                   	mov rax, L_constants + 2
 22398 000107ED [0200000000000000] 
 22399                                  .L_if_end_0066:
 22400 000107F5 C9                      	leave
 22401 000107F6 C22000                  	ret AND_KILL_FRAME(2)
 22402                                  .L_lambda_simple_end_0080:	; new closure is in rax
 22403 000107F9 803804                  	cmp byte [rax], T_closure
 22404 000107FC 0F8534770000            	jne L_error_non_closure
 22405 00010802 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22406 00010805 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22407 00010808 FF7500                  	push qword[rbp]
 22408 0001080B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22409 0001080E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22410 00010812 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22411 00010816 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22412 0001081A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22413 0001081D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22414 00010820 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22415 00010825 4983C103                	add r9, 3 	 ;for getting to the params
 22416 00010829 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22417 0001082D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22418                                  .L_tc_recycle_frame_loop_00c9:
 22419 00010830 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22420 00010833 7410                    	je .L_tc_recycle_frame_done_00c9
 22421 00010835 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22422 00010838 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22423 0001083B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22424 0001083F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22425 00010843 EBEB                    	jmp .L_tc_recycle_frame_loop_00c9
 22426                                  .L_tc_recycle_frame_done_00c9:
 22427 00010845 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22428 00010846 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22429 0001084A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22430 0001084D C9                      	leave
 22431 0001084E C22000                  	ret AND_KILL_FRAME(2)
 22432                                  .L_lambda_simple_end_007f:	; new closure is in rax
 22433 00010851 50                      	push rax
 22434 00010852 6A01                    	push 1	; arg count
 22435 00010854 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22436 00010859 E881770000              	call malloc
 22437 0001085E 50                      	push rax
 22438 0001085F BF08000000              	mov rdi, 8 * 1	; new rib
 22439 00010864 E876770000              	call malloc
 22440 00010869 50                      	push rax
 22441 0001086A BF18000000              	mov rdi, 8 * 3	; extended env
 22442 0001086F E86B770000              	call malloc
 22443 00010874 488B7D10                	mov rdi, ENV
 22444 00010878 BE00000000              	mov rsi, 0
 22445 0001087D BA01000000              	mov rdx, 1
 22446                                  .L_lambda_simple_env_loop_0081:	; ext_env[i + 1] <-- env[i]
 22447 00010882 4883FE02                	cmp rsi, 2
 22448 00010886 7410                    	je .L_lambda_simple_env_end_0081
 22449 00010888 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22450 0001088C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22451 00010890 48FFC6                  	inc rsi
 22452 00010893 48FFC2                  	inc rdx
 22453 00010896 EBEA                    	jmp .L_lambda_simple_env_loop_0081
 22454                                  .L_lambda_simple_env_end_0081:
 22455 00010898 5B                      	pop rbx
 22456 00010899 BE00000000              	mov rsi, 0
 22457                                  .L_lambda_simple_params_loop_0081:	; copy params
 22458 0001089E 4883FE01                	cmp rsi, 1
 22459 000108A2 740E                    	je .L_lambda_simple_params_end_0081
 22460 000108A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22461 000108A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22462 000108AD 48FFC6                  	inc rsi
 22463 000108B0 EBEC                    	jmp .L_lambda_simple_params_loop_0081
 22464                                  .L_lambda_simple_params_end_0081:
 22465 000108B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22466 000108B5 4889C3                  	mov rbx, rax
 22467 000108B8 58                      	pop rax
 22468 000108B9 C60004                  	mov byte [rax], T_closure
 22469 000108BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22470 000108C0 48C74009[CD080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0081
 22471 000108C8 E99B050000              	jmp .L_lambda_simple_end_0081
 22472                                  .L_lambda_simple_code_0081:	; lambda-simple body
 22473 000108CD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22474 000108D3 740B                    	je .L_lambda_simple_arity_check_ok_0081
 22475 000108D5 FF742410                	push qword [rsp + 8 * 2]
 22476 000108D9 6A01                    	push 1
 22477 000108DB E9B8760000              	jmp L_error_incorrect_arity_simple
 22478                                  .L_lambda_simple_arity_check_ok_0081:
 22479 000108E0 C8000000                	enter 0, 0
 22480                                  	; preparing a tail-call
 22481 000108E4 48B8-                   	mov rax, L_constants + 1993
 22481 000108E6 [C907000000000000] 
 22482 000108EE 50                      	push rax
 22483 000108EF 6A01                    	push 1	; arg count
 22484 000108F1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22485 000108F6 E8E4760000              	call malloc
 22486 000108FB 50                      	push rax
 22487 000108FC BF08000000              	mov rdi, 8 * 1	; new rib
 22488 00010901 E8D9760000              	call malloc
 22489 00010906 50                      	push rax
 22490 00010907 BF20000000              	mov rdi, 8 * 4	; extended env
 22491 0001090C E8CE760000              	call malloc
 22492 00010911 488B7D10                	mov rdi, ENV
 22493 00010915 BE00000000              	mov rsi, 0
 22494 0001091A BA01000000              	mov rdx, 1
 22495                                  .L_lambda_simple_env_loop_0082:	; ext_env[i + 1] <-- env[i]
 22496 0001091F 4883FE03                	cmp rsi, 3
 22497 00010923 7410                    	je .L_lambda_simple_env_end_0082
 22498 00010925 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22499 00010929 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22500 0001092D 48FFC6                  	inc rsi
 22501 00010930 48FFC2                  	inc rdx
 22502 00010933 EBEA                    	jmp .L_lambda_simple_env_loop_0082
 22503                                  .L_lambda_simple_env_end_0082:
 22504 00010935 5B                      	pop rbx
 22505 00010936 BE00000000              	mov rsi, 0
 22506                                  .L_lambda_simple_params_loop_0082:	; copy params
 22507 0001093B 4883FE01                	cmp rsi, 1
 22508 0001093F 740E                    	je .L_lambda_simple_params_end_0082
 22509 00010941 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22510 00010946 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22511 0001094A 48FFC6                  	inc rsi
 22512 0001094D EBEC                    	jmp .L_lambda_simple_params_loop_0082
 22513                                  .L_lambda_simple_params_end_0082:
 22514 0001094F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22515 00010952 4889C3                  	mov rbx, rax
 22516 00010955 58                      	pop rax
 22517 00010956 C60004                  	mov byte [rax], T_closure
 22518 00010959 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22519 0001095D 48C74009[6A090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0082
 22520 00010965 E9A6040000              	jmp .L_lambda_simple_end_0082
 22521                                  .L_lambda_simple_code_0082:	; lambda-simple body
 22522 0001096A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22523 00010970 740B                    	je .L_lambda_simple_arity_check_ok_0082
 22524 00010972 FF742410                	push qword [rsp + 8 * 2]
 22525 00010976 6A01                    	push 1
 22526 00010978 E91B760000              	jmp L_error_incorrect_arity_simple
 22527                                  .L_lambda_simple_arity_check_ok_0082:
 22528 0001097D C8000000                	enter 0, 0
 22529 00010981 BF08000000              	mov rdi, 8*1
 22530 00010986 E854760000              	call malloc
 22531 0001098B 488B5D20                	mov rbx, PARAM(0)
 22532 0001098F 488918                  	mov qword[rax], rbx
 22533 00010992 48894520                	mov PARAM(0), rax
 22534 00010996 48B8-                   	mov rax, sob_void
 22534 00010998 [0000000000000000] 
 22535                                  
 22536 000109A0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22537 000109A5 E835760000              	call malloc
 22538 000109AA 50                      	push rax
 22539 000109AB BF08000000              	mov rdi, 8 * 1	; new rib
 22540 000109B0 E82A760000              	call malloc
 22541 000109B5 50                      	push rax
 22542 000109B6 BF28000000              	mov rdi, 8 * 5	; extended env
 22543 000109BB E81F760000              	call malloc
 22544 000109C0 488B7D10                	mov rdi, ENV
 22545 000109C4 BE00000000              	mov rsi, 0
 22546 000109C9 BA01000000              	mov rdx, 1
 22547                                  .L_lambda_simple_env_loop_0083:	; ext_env[i + 1] <-- env[i]
 22548 000109CE 4883FE04                	cmp rsi, 4
 22549 000109D2 7410                    	je .L_lambda_simple_env_end_0083
 22550 000109D4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22551 000109D8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22552 000109DC 48FFC6                  	inc rsi
 22553 000109DF 48FFC2                  	inc rdx
 22554 000109E2 EBEA                    	jmp .L_lambda_simple_env_loop_0083
 22555                                  .L_lambda_simple_env_end_0083:
 22556 000109E4 5B                      	pop rbx
 22557 000109E5 BE00000000              	mov rsi, 0
 22558                                  .L_lambda_simple_params_loop_0083:	; copy params
 22559 000109EA 4883FE01                	cmp rsi, 1
 22560 000109EE 740E                    	je .L_lambda_simple_params_end_0083
 22561 000109F0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22562 000109F5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22563 000109F9 48FFC6                  	inc rsi
 22564 000109FC EBEC                    	jmp .L_lambda_simple_params_loop_0083
 22565                                  .L_lambda_simple_params_end_0083:
 22566 000109FE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22567 00010A01 4889C3                  	mov rbx, rax
 22568 00010A04 58                      	pop rax
 22569 00010A05 C60004                  	mov byte [rax], T_closure
 22570 00010A08 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22571 00010A0C 48C74009[190A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0083
 22572 00010A14 E962010000              	jmp .L_lambda_simple_end_0083
 22573                                  .L_lambda_simple_code_0083:	; lambda-simple body
 22574 00010A19 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22575 00010A1F 740B                    	je .L_lambda_simple_arity_check_ok_0083
 22576 00010A21 FF742410                	push qword [rsp + 8 * 2]
 22577 00010A25 6A02                    	push 2
 22578 00010A27 E96C750000              	jmp L_error_incorrect_arity_simple
 22579                                  .L_lambda_simple_arity_check_ok_0083:
 22580 00010A2C C8000000                	enter 0, 0
 22581                                  	; preparing a non-tail-call
 22582 00010A30 488B4528                	mov rax, PARAM(1)	; param strs
 22583 00010A34 50                      	push rax
 22584 00010A35 6A01                    	push 1	; arg count
 22585 00010A37 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 22586 00010A3F 803805                  	cmp byte [rax], T_undefined
 22587 00010A42 0F846A740000            	je L_error_fvar_undefined
 22588 00010A48 803804                  	cmp byte [rax], T_closure
 22589 00010A4B 0F85E5740000            	jne L_error_non_closure
 22590 00010A51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22591 00010A54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22592 00010A57 483D[02000000]          	cmp rax, sob_boolean_false
 22593 00010A5D 0F8514010000            	jne .L_or_end_0010
 22594                                  	; preparing a non-tail-call
 22595                                  	; preparing a non-tail-call
 22596 00010A63 488B4528                	mov rax, PARAM(1)	; param strs
 22597 00010A67 50                      	push rax
 22598 00010A68 6A01                    	push 1	; arg count
 22599 00010A6A 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 22600 00010A72 803805                  	cmp byte [rax], T_undefined
 22601 00010A75 0F8437740000            	je L_error_fvar_undefined
 22602 00010A7B 803804                  	cmp byte [rax], T_closure
 22603 00010A7E 0F85B2740000            	jne L_error_non_closure
 22604 00010A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22605 00010A87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22606 00010A8A 50                      	push rax
 22607 00010A8B 488B4520                	mov rax, PARAM(0)	; param str
 22608 00010A8F 50                      	push rax
 22609 00010A90 6A02                    	push 2	; arg count
 22610 00010A92 488B4510                	mov rax, ENV
 22611 00010A96 488B4008                	mov rax, qword [rax + 8 * 1]
 22612 00010A9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 22613 00010A9D 803804                  	cmp byte [rax], T_closure
 22614 00010AA0 0F8590740000            	jne L_error_non_closure
 22615 00010AA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22616 00010AA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22617 00010AAC 483D[02000000]          	cmp rax, sob_boolean_false
 22618 00010AB2 0F84B5000000            	je .L_if_else_0067
 22619                                  	; preparing a tail-call
 22620                                  	; preparing a non-tail-call
 22621 00010AB8 488B4528                	mov rax, PARAM(1)	; param strs
 22622 00010ABC 50                      	push rax
 22623 00010ABD 6A01                    	push 1	; arg count
 22624 00010ABF 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 22625 00010AC7 803805                  	cmp byte [rax], T_undefined
 22626 00010ACA 0F84E2730000            	je L_error_fvar_undefined
 22627 00010AD0 803804                  	cmp byte [rax], T_closure
 22628 00010AD3 0F855D740000            	jne L_error_non_closure
 22629 00010AD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22630 00010ADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22631 00010ADF 50                      	push rax
 22632                                  	; preparing a non-tail-call
 22633 00010AE0 488B4528                	mov rax, PARAM(1)	; param strs
 22634 00010AE4 50                      	push rax
 22635 00010AE5 6A01                    	push 1	; arg count
 22636 00010AE7 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 22637 00010AEF 803805                  	cmp byte [rax], T_undefined
 22638 00010AF2 0F84BA730000            	je L_error_fvar_undefined
 22639 00010AF8 803804                  	cmp byte [rax], T_closure
 22640 00010AFB 0F8535740000            	jne L_error_non_closure
 22641 00010B01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22642 00010B04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22643 00010B07 50                      	push rax
 22644 00010B08 6A02                    	push 2	; arg count
 22645 00010B0A 488B4510                	mov rax, ENV
 22646 00010B0E 488B00                  	mov rax, qword [rax + 8 * 0]
 22647 00010B11 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22648 00010B14 488B00                  	mov rax, qword [rax]
 22649 00010B17 803804                  	cmp byte [rax], T_closure
 22650 00010B1A 0F8516740000            	jne L_error_non_closure
 22651 00010B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22652 00010B23 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22653 00010B26 FF7500                  	push qword[rbp]
 22654 00010B29 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22655 00010B2C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22656 00010B30 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22657 00010B34 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22658 00010B38 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22659 00010B3B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22660 00010B3E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22661 00010B43 4983C103                	add r9, 3 	 ;for getting to the params
 22662 00010B47 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22663 00010B4B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22664                                  .L_tc_recycle_frame_loop_00ca:
 22665 00010B4E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22666 00010B51 7410                    	je .L_tc_recycle_frame_done_00ca
 22667 00010B53 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22668 00010B56 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22669 00010B59 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22670 00010B5D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22671 00010B61 EBEB                    	jmp .L_tc_recycle_frame_loop_00ca
 22672                                  .L_tc_recycle_frame_done_00ca:
 22673 00010B63 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22674 00010B64 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22675 00010B68 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22676 00010B6B EB0A                    	jmp .L_if_end_0067
 22677                                  .L_if_else_0067:
 22678 00010B6D 48B8-                   	mov rax, L_constants + 2
 22678 00010B6F [0200000000000000] 
 22679                                  .L_if_end_0067:
 22680                                  .L_or_end_0010:
 22681 00010B77 C9                      	leave
 22682 00010B78 C22000                  	ret AND_KILL_FRAME(2)
 22683                                  .L_lambda_simple_end_0083:	; new closure is in rax
 22684 00010B7B 50                      	push rax
 22685 00010B7C 488B4520                	mov rax, PARAM(0)	; param run
 22686 00010B80 8F00                    	pop qword [rax]
 22687 00010B82 48B8-                   	mov rax, sob_void
 22687 00010B84 [0000000000000000] 
 22688                                  
 22689 00010B8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22690 00010B91 E849740000              	call malloc
 22691 00010B96 50                      	push rax
 22692 00010B97 BF08000000              	mov rdi, 8 * 1	; new rib
 22693 00010B9C E83E740000              	call malloc
 22694 00010BA1 50                      	push rax
 22695 00010BA2 BF28000000              	mov rdi, 8 * 5	; extended env
 22696 00010BA7 E833740000              	call malloc
 22697 00010BAC 488B7D10                	mov rdi, ENV
 22698 00010BB0 BE00000000              	mov rsi, 0
 22699 00010BB5 BA01000000              	mov rdx, 1
 22700                                  .L_lambda_opt_env_loop_0013:	; ext_env[i + 1] <-- env[i]
 22701 00010BBA 4883FE04                	cmp rsi, 4
 22702 00010BBE 7410                    	je .L_lambda_opt_env_end_0013
 22703 00010BC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22704 00010BC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22705 00010BC8 48FFC6                  	inc rsi
 22706 00010BCB 48FFC2                  	inc rdx
 22707 00010BCE EBEA                    	jmp .L_lambda_opt_env_loop_0013
 22708                                  .L_lambda_opt_env_end_0013:
 22709 00010BD0 5B                      	pop rbx
 22710 00010BD1 BE00000000              	mov rsi, 0
 22711                                  .L_lambda_opt_params_loop_0013:	; copy params
 22712 00010BD6 4883FE01                	cmp rsi, 1
 22713 00010BDA 740E                    	je .L_lambda_opt_params_end_0013
 22714 00010BDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22715 00010BE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22716 00010BE5 48FFC6                  	inc rsi
 22717 00010BE8 EBEC                    	jmp .L_lambda_opt_params_loop_0013
 22718                                  .L_lambda_opt_params_end_0013:
 22719 00010BEA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22720 00010BED 4889C3                  	mov rbx, rax
 22721 00010BF0 58                      	pop rax
 22722 00010BF1 C60004                  	mov byte [rax], T_closure
 22723 00010BF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22724 00010BF8 48C74009[050C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0013
 22725 00010C00 E907020000              	jmp .L_lambda_opt_end_0013
 22726                                  .L_lambda_opt_code_0013:	; lambda-opt body
 22727 00010C05 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22728 00010C0B 7411                    	je .L_lambda_opt_arity_check_exact_0013
 22729 00010C0D 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0013
 22730 00010C13 FF742410                	push qword [rsp + 8 * 2]
 22731 00010C17 6A01                    	push 1
 22732 00010C19 E98E730000              	jmp L_error_incorrect_arity_opt
 22733                                  .L_lambda_opt_arity_check_exact_0013:
 22734 00010C1E 4883EC08                	sub rsp, 8
 22735 00010C22 488B442408              	mov rax, qword[rsp + 8 *1]
 22736 00010C27 48890424                	mov qword[rsp], rax  
 22737 00010C2B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 22738 00010C30 4889442408              	mov qword[rsp + 8 * 1], rax
 22739 00010C35 B802000000              	mov rax, 2
 22740 00010C3A 4889442410              	mov qword[rsp + 8 *2], rax
 22741 00010C3F 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 22742 00010C44 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 22743 00010C49 48B8-                   	mov rax, sob_nil
 22743 00010C4B [0100000000000000] 
 22744 00010C53 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 22745 00010C58 C8000000                	enter 0, 0
 22746                                  	; preparing a tail-call
 22747 00010C5C 488B4528                	mov rax, PARAM(1)	; param strs
 22748 00010C60 50                      	push rax
 22749 00010C61 488B4520                	mov rax, PARAM(0)	; param str
 22750 00010C65 50                      	push rax
 22751 00010C66 6A02                    	push 2	; arg count
 22752 00010C68 488B4510                	mov rax, ENV
 22753 00010C6C 488B00                  	mov rax, qword [rax + 8 * 0]
 22754 00010C6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22755 00010C72 488B00                  	mov rax, qword [rax]
 22756 00010C75 803804                  	cmp byte [rax], T_closure
 22757 00010C78 0F85B8720000            	jne L_error_non_closure
 22758 00010C7E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22759 00010C81 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22760 00010C84 FF7500                  	push qword[rbp]
 22761 00010C87 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22762 00010C8A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22763 00010C8E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22764 00010C92 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22765 00010C96 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22766 00010C99 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22767 00010C9C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22768 00010CA1 4983C103                	add r9, 3 	 ;for getting to the params
 22769 00010CA5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22770 00010CA9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22771                                  .L_tc_recycle_frame_loop_00cc:
 22772 00010CAC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22773 00010CAF 7410                    	je .L_tc_recycle_frame_done_00cc
 22774 00010CB1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22775 00010CB4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22776 00010CB7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22777 00010CBB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22778 00010CBF EBEB                    	jmp .L_tc_recycle_frame_loop_00cc
 22779                                  .L_tc_recycle_frame_done_00cc:
 22780 00010CC1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22781 00010CC2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22782 00010CC6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22783 00010CC9 C9                      	leave
 22784 00010CCA C22000                  	ret AND_KILL_FRAME(2)
 22785 00010CCD E93A010000              	jmp .L_lambda_opt_end_0013	; new closure is in rax
 22786                                  .L_lambda_opt_arity_check_more_0013:
 22787 00010CD2 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 22788 00010CD7 49B9-                   	mov r9, sob_nil
 22788 00010CD9 [0100000000000000] 
 22789 00010CE1 4889E3                  	mov rbx, rsp 
 22790 00010CE4 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 22791 00010CE8 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 22792 00010CEB 49C1E003                	shl r8, 3
 22793 00010CEF 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 22794 00010CF2 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 22795                                  .L_lambda_opt_stack_shrink_loop_0013:
 22796 00010CF7 4983F801                	cmp r8, 1
 22797 00010CFB 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0013
 22798 00010CFD BF11000000              	mov rdi, 1+8+8	;for pair
 22799 00010D02 E8D8720000              	call malloc	 ;to create the pair in the stack
 22800 00010D07 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 22801 00010D0A 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 22802 00010D0D 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 22803 00010D11 4C894809                 	mov qword[rax+1+8],r9
 22804 00010D15 4989C1                  	mov r9, rax	 ; for the recursion 
 22805 00010D18 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 22806 00010D1B 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 22807 00010D1F EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0013
 22808                                  .L_lambda_opt_stack_shrink_loop_exit_0013:
 22809 00010D21 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 22810 00010D26 4883E902                	sub rcx, 2
 22811 00010D2A 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 22812 00010D2E 4801CC                  	add rsp, rcx	 ;shrinking the stack
 22813 00010D31 4889E0                  	mov rax, rsp
 22814 00010D34 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 22815 00010D37 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 22816 00010D3B 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 22817 00010D3E 4883C018                	add rax, 3 * 8 	;now rax is param 0
 22818 00010D42 49C1E003                	shl r8, 3 	; convert to byte
 22819 00010D46 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 22820 00010D49 4C8908                  	mov qword[rax], r9	;puting the list at the top
 22821 00010D4C 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 22822 00010D50 4889E3                  	mov rbx, rsp 
 22823 00010D53 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 22824 00010D56 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 22825 00010D5C 49FFCA                  	dec r10 
 22826 00010D5F 49C1E203                	shl r10, 3	;to get bytes
 22827 00010D63 4883C318                	add rbx, 3*8 	;rbx is the first param
 22828 00010D67 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 22829 00010D6A 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 22830                                  
 22831 00010D6D 4C8900                              	mov qword[rax], r8
 22832 00010D70 4883E808                            	sub rax, 8
 22833 00010D74 4883EB08                	sub rbx, 8
 22834 00010D78 4889E0                  	mov rax, rsp
 22835 00010D7B 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 22836 00010D7E 48C744241002000000      	mov qword [rsp+2*8], 2
 22837 00010D87 488B5808                	mov rbx, qword[rax + 8 *1]
 22838 00010D8B 48895C2408              	mov qword [rsp + 1*8] ,rbx
 22839 00010D90 488B18                  	mov rbx, qword[rax]
 22840 00010D93 48891C24                	mov qword [rsp], rbx
 22841 00010D97 C8000000                	enter 0, 0
 22842                                  	; preparing a tail-call
 22843 00010D9B 488B4528                	mov rax, PARAM(1)	; param strs
 22844 00010D9F 50                      	push rax
 22845 00010DA0 488B4520                	mov rax, PARAM(0)	; param str
 22846 00010DA4 50                      	push rax
 22847 00010DA5 6A02                    	push 2	; arg count
 22848 00010DA7 488B4510                	mov rax, ENV
 22849 00010DAB 488B00                  	mov rax, qword [rax + 8 * 0]
 22850 00010DAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22851 00010DB1 488B00                  	mov rax, qword [rax]
 22852 00010DB4 803804                  	cmp byte [rax], T_closure
 22853 00010DB7 0F8579710000            	jne L_error_non_closure
 22854 00010DBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22855 00010DC0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22856 00010DC3 FF7500                  	push qword[rbp]
 22857 00010DC6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22858 00010DC9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22859 00010DCD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22860 00010DD1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22861 00010DD5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22862 00010DD8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22863 00010DDB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22864 00010DE0 4983C103                	add r9, 3 	 ;for getting to the params
 22865 00010DE4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22866 00010DE8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22867                                  .L_tc_recycle_frame_loop_00cb:
 22868 00010DEB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22869 00010DEE 7410                    	je .L_tc_recycle_frame_done_00cb
 22870 00010DF0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22871 00010DF3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22872 00010DF6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22873 00010DFA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22874 00010DFE EBEB                    	jmp .L_tc_recycle_frame_loop_00cb
 22875                                  .L_tc_recycle_frame_done_00cb:
 22876 00010E00 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22877 00010E01 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22878 00010E05 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22879 00010E08 C9                      	leave
 22880 00010E09 C22000                  	ret AND_KILL_FRAME(2)
 22881                                  .L_lambda_opt_end_0013:	; new closure is in rax
 22882 00010E0C C9                      	leave
 22883 00010E0D C21800                  	ret AND_KILL_FRAME(1)
 22884                                  .L_lambda_simple_end_0082:	; new closure is in rax
 22885 00010E10 803804                  	cmp byte [rax], T_closure
 22886 00010E13 0F851D710000            	jne L_error_non_closure
 22887 00010E19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22888 00010E1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22889 00010E1F FF7500                  	push qword[rbp]
 22890 00010E22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22891 00010E25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22892 00010E29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22893 00010E2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22894 00010E31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22895 00010E34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22896 00010E37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22897 00010E3C 4983C103                	add r9, 3 	 ;for getting to the params
 22898 00010E40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22899 00010E44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22900                                  .L_tc_recycle_frame_loop_00cd:
 22901 00010E47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22902 00010E4A 7410                    	je .L_tc_recycle_frame_done_00cd
 22903 00010E4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22904 00010E4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22905 00010E52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22906 00010E56 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22907 00010E5A EBEB                    	jmp .L_tc_recycle_frame_loop_00cd
 22908                                  .L_tc_recycle_frame_done_00cd:
 22909 00010E5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22910 00010E5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22911 00010E61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22912 00010E64 C9                      	leave
 22913 00010E65 C21800                  	ret AND_KILL_FRAME(1)
 22914                                  .L_lambda_simple_end_0081:	; new closure is in rax
 22915 00010E68 803804                  	cmp byte [rax], T_closure
 22916 00010E6B 0F85C5700000            	jne L_error_non_closure
 22917 00010E71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22918 00010E74 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22919 00010E77 FF7500                  	push qword[rbp]
 22920 00010E7A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22921 00010E7D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22922 00010E81 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22923 00010E85 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22924 00010E89 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22925 00010E8C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22926 00010E8F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22927 00010E94 4983C103                	add r9, 3 	 ;for getting to the params
 22928 00010E98 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22929 00010E9C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22930                                  .L_tc_recycle_frame_loop_00ce:
 22931 00010E9F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22932 00010EA2 7410                    	je .L_tc_recycle_frame_done_00ce
 22933 00010EA4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22934 00010EA7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22935 00010EAA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22936 00010EAE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22937 00010EB2 EBEB                    	jmp .L_tc_recycle_frame_loop_00ce
 22938                                  .L_tc_recycle_frame_done_00ce:
 22939 00010EB4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22940 00010EB5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22941 00010EB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22942 00010EBC C9                      	leave
 22943 00010EBD C21800                  	ret AND_KILL_FRAME(1)
 22944                                  .L_lambda_simple_end_007d:	; new closure is in rax
 22945 00010EC0 803804                  	cmp byte [rax], T_closure
 22946 00010EC3 0F856D700000            	jne L_error_non_closure
 22947 00010EC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22948 00010ECC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22949 00010ECF FF7500                  	push qword[rbp]
 22950 00010ED2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22951 00010ED5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22952 00010ED9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22953 00010EDD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22954 00010EE1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22955 00010EE4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22956 00010EE7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22957 00010EEC 4983C103                	add r9, 3 	 ;for getting to the params
 22958 00010EF0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22959 00010EF4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22960                                  .L_tc_recycle_frame_loop_00cf:
 22961 00010EF7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22962 00010EFA 7410                    	je .L_tc_recycle_frame_done_00cf
 22963 00010EFC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22964 00010EFF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22965 00010F02 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22966 00010F06 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22967 00010F0A EBEB                    	jmp .L_tc_recycle_frame_loop_00cf
 22968                                  .L_tc_recycle_frame_done_00cf:
 22969 00010F0C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22970 00010F0D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22971 00010F11 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22972 00010F14 C9                      	leave
 22973 00010F15 C21800                  	ret AND_KILL_FRAME(1)
 22974                                  .L_lambda_simple_end_007c:	; new closure is in rax
 22975 00010F18 50                      	push rax
 22976 00010F19 6A01                    	push 1	; arg count
 22977 00010F1B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22978 00010F20 E8BA700000              	call malloc
 22979 00010F25 50                      	push rax
 22980 00010F26 BF00000000              	mov rdi, 8 * 0	; new rib
 22981 00010F2B E8AF700000              	call malloc
 22982 00010F30 50                      	push rax
 22983 00010F31 BF08000000              	mov rdi, 8 * 1	; extended env
 22984 00010F36 E8A4700000              	call malloc
 22985 00010F3B 488B7D10                	mov rdi, ENV
 22986 00010F3F BE00000000              	mov rsi, 0
 22987 00010F44 BA01000000              	mov rdx, 1
 22988                                  .L_lambda_simple_env_loop_0084:	; ext_env[i + 1] <-- env[i]
 22989 00010F49 4883FE00                	cmp rsi, 0
 22990 00010F4D 7410                    	je .L_lambda_simple_env_end_0084
 22991 00010F4F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22992 00010F53 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22993 00010F57 48FFC6                  	inc rsi
 22994 00010F5A 48FFC2                  	inc rdx
 22995 00010F5D EBEA                    	jmp .L_lambda_simple_env_loop_0084
 22996                                  .L_lambda_simple_env_end_0084:
 22997 00010F5F 5B                      	pop rbx
 22998 00010F60 BE00000000              	mov rsi, 0
 22999                                  .L_lambda_simple_params_loop_0084:	; copy params
 23000 00010F65 4883FE00                	cmp rsi, 0
 23001 00010F69 740E                    	je .L_lambda_simple_params_end_0084
 23002 00010F6B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23003 00010F70 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23004 00010F74 48FFC6                  	inc rsi
 23005 00010F77 EBEC                    	jmp .L_lambda_simple_params_loop_0084
 23006                                  .L_lambda_simple_params_end_0084:
 23007 00010F79 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23008 00010F7C 4889C3                  	mov rbx, rax
 23009 00010F7F 58                      	pop rax
 23010 00010F80 C60004                  	mov byte [rax], T_closure
 23011 00010F83 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23012 00010F87 48C74009[940F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0084
 23013 00010F8F E98D000000              	jmp .L_lambda_simple_end_0084
 23014                                  .L_lambda_simple_code_0084:	; lambda-simple body
 23015 00010F94 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23016 00010F9A 740B                    	je .L_lambda_simple_arity_check_ok_0084
 23017 00010F9C FF742410                	push qword [rsp + 8 * 2]
 23018 00010FA0 6A01                    	push 1
 23019 00010FA2 E9F16F0000              	jmp L_error_incorrect_arity_simple
 23020                                  .L_lambda_simple_arity_check_ok_0084:
 23021 00010FA7 C8000000                	enter 0, 0
 23022                                  	; preparing a non-tail-call
 23023 00010FAB 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 23024 00010FB3 803805                  	cmp byte [rax], T_undefined
 23025 00010FB6 0F84F66E0000            	je L_error_fvar_undefined
 23026 00010FBC 50                      	push rax
 23027 00010FBD 6A01                    	push 1	; arg count
 23028 00010FBF 488B4520                	mov rax, PARAM(0)	; param make-string=?
 23029 00010FC3 803804                  	cmp byte [rax], T_closure
 23030 00010FC6 0F856A6F0000            	jne L_error_non_closure
 23031 00010FCC FF7001                  	push SOB_CLOSURE_ENV(rax)
 23032 00010FCF FF5009                  	call SOB_CLOSURE_CODE(rax)
 23033 00010FD2 48890425[BC160000]      	mov qword [free_var_135], rax
 23034 00010FDA 48B8-                   	mov rax, sob_void
 23034 00010FDC [0000000000000000] 
 23035                                  
 23036                                  	; preparing a non-tail-call
 23037 00010FE4 488B0425[49120000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 23038 00010FEC 803805                  	cmp byte [rax], T_undefined
 23039 00010FEF 0F84BD6E0000            	je L_error_fvar_undefined
 23040 00010FF5 50                      	push rax
 23041 00010FF6 6A01                    	push 1	; arg count
 23042 00010FF8 488B4520                	mov rax, PARAM(0)	; param make-string=?
 23043 00010FFC 803804                  	cmp byte [rax], T_closure
 23044 00010FFF 0F85316F0000            	jne L_error_non_closure
 23045 00011005 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23046 00011008 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23047 0001100B 48890425[F0150000]      	mov qword [free_var_123], rax
 23048 00011013 48B8-                   	mov rax, sob_void
 23048 00011015 [0000000000000000] 
 23049 0001101D C9                      	leave
 23050 0001101E C21800                  	ret AND_KILL_FRAME(1)
 23051                                  .L_lambda_simple_end_0084:	; new closure is in rax
 23052 00011021 803804                  	cmp byte [rax], T_closure
 23053 00011024 0F850C6F0000            	jne L_error_non_closure
 23054 0001102A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23055 0001102D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23056                                  
 23057 00011030 4889C7                  	mov rdi, rax
 23058 00011033 E8FC710000              	call print_sexpr_if_not_void
 23059 00011038 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23060 0001103D E89D6F0000              	call malloc
 23061 00011042 50                      	push rax
 23062 00011043 BF00000000              	mov rdi, 8 * 0	; new rib
 23063 00011048 E8926F0000              	call malloc
 23064 0001104D 50                      	push rax
 23065 0001104E BF08000000              	mov rdi, 8 * 1	; extended env
 23066 00011053 E8876F0000              	call malloc
 23067 00011058 488B7D10                	mov rdi, ENV
 23068 0001105C BE00000000              	mov rsi, 0
 23069 00011061 BA01000000              	mov rdx, 1
 23070                                  .L_lambda_simple_env_loop_0085:	; ext_env[i + 1] <-- env[i]
 23071 00011066 4883FE00                	cmp rsi, 0
 23072 0001106A 7410                    	je .L_lambda_simple_env_end_0085
 23073 0001106C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23074 00011070 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23075 00011074 48FFC6                  	inc rsi
 23076 00011077 48FFC2                  	inc rdx
 23077 0001107A EBEA                    	jmp .L_lambda_simple_env_loop_0085
 23078                                  .L_lambda_simple_env_end_0085:
 23079 0001107C 5B                      	pop rbx
 23080 0001107D BE00000000              	mov rsi, 0
 23081                                  .L_lambda_simple_params_loop_0085:	; copy params
 23082 00011082 4883FE00                	cmp rsi, 0
 23083 00011086 740E                    	je .L_lambda_simple_params_end_0085
 23084 00011088 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23085 0001108D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23086 00011091 48FFC6                  	inc rsi
 23087 00011094 EBEC                    	jmp .L_lambda_simple_params_loop_0085
 23088                                  .L_lambda_simple_params_end_0085:
 23089 00011096 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23090 00011099 4889C3                  	mov rbx, rax
 23091 0001109C 58                      	pop rax
 23092 0001109D C60004                  	mov byte [rax], T_closure
 23093 000110A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23094 000110A4 48C74009[B1100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0085
 23095 000110AC E91C010000              	jmp .L_lambda_simple_end_0085
 23096                                  .L_lambda_simple_code_0085:	; lambda-simple body
 23097 000110B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23098 000110B7 740B                    	je .L_lambda_simple_arity_check_ok_0085
 23099 000110B9 FF742410                	push qword [rsp + 8 * 2]
 23100 000110BD 6A01                    	push 1
 23101 000110BF E9D46E0000              	jmp L_error_incorrect_arity_simple
 23102                                  .L_lambda_simple_arity_check_ok_0085:
 23103 000110C4 C8000000                	enter 0, 0
 23104                                  	; preparing a non-tail-call
 23105 000110C8 488B4520                	mov rax, PARAM(0)	; param e
 23106 000110CC 50                      	push rax
 23107 000110CD 6A01                    	push 1	; arg count
 23108 000110CF 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23109 000110D7 803805                  	cmp byte [rax], T_undefined
 23110 000110DA 0F84D26D0000            	je L_error_fvar_undefined
 23111 000110E0 803804                  	cmp byte [rax], T_closure
 23112 000110E3 0F854D6E0000            	jne L_error_non_closure
 23113 000110E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23114 000110EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23115 000110EF 483D[02000000]          	cmp rax, sob_boolean_false
 23116 000110F5 0F85CE000000            	jne .L_or_end_0011
 23117                                  	; preparing a non-tail-call
 23118 000110FB 488B4520                	mov rax, PARAM(0)	; param e
 23119 000110FF 50                      	push rax
 23120 00011100 6A01                    	push 1	; arg count
 23121 00011102 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23122 0001110A 803805                  	cmp byte [rax], T_undefined
 23123 0001110D 0F849F6D0000            	je L_error_fvar_undefined
 23124 00011113 803804                  	cmp byte [rax], T_closure
 23125 00011116 0F851A6E0000            	jne L_error_non_closure
 23126 0001111C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23127 0001111F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23128 00011122 483D[02000000]          	cmp rax, sob_boolean_false
 23129 00011128 0F8491000000            	je .L_if_else_0068
 23130                                  	; preparing a tail-call
 23131                                  	; preparing a non-tail-call
 23132 0001112E 488B4520                	mov rax, PARAM(0)	; param e
 23133 00011132 50                      	push rax
 23134 00011133 6A01                    	push 1	; arg count
 23135 00011135 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23136 0001113D 803805                  	cmp byte [rax], T_undefined
 23137 00011140 0F846C6D0000            	je L_error_fvar_undefined
 23138 00011146 803804                  	cmp byte [rax], T_closure
 23139 00011149 0F85E76D0000            	jne L_error_non_closure
 23140 0001114F FF7001                  	push SOB_CLOSURE_ENV(rax)
 23141 00011152 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23142 00011155 50                      	push rax
 23143 00011156 6A01                    	push 1	; arg count
 23144 00011158 488B0425[25140000]      	mov rax, qword [free_var_96]	; free var list?
 23145 00011160 803805                  	cmp byte [rax], T_undefined
 23146 00011163 0F84496D0000            	je L_error_fvar_undefined
 23147 00011169 803804                  	cmp byte [rax], T_closure
 23148 0001116C 0F85C46D0000            	jne L_error_non_closure
 23149 00011172 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23150 00011175 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23151 00011178 FF7500                  	push qword[rbp]
 23152 0001117B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23153 0001117E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23154 00011182 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23155 00011186 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23156 0001118A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23157 0001118D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23158 00011190 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23159 00011195 4983C103                	add r9, 3 	 ;for getting to the params
 23160 00011199 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23161 0001119D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23162                                  .L_tc_recycle_frame_loop_00d0:
 23163 000111A0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23164 000111A3 7410                    	je .L_tc_recycle_frame_done_00d0
 23165 000111A5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23166 000111A8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23167 000111AB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23168 000111AF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23169 000111B3 EBEB                    	jmp .L_tc_recycle_frame_loop_00d0
 23170                                  .L_tc_recycle_frame_done_00d0:
 23171 000111B5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23172 000111B6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23173 000111BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23174 000111BD EB0A                    	jmp .L_if_end_0068
 23175                                  .L_if_else_0068:
 23176 000111BF 48B8-                   	mov rax, L_constants + 2
 23176 000111C1 [0200000000000000] 
 23177                                  .L_if_end_0068:
 23178                                  .L_or_end_0011:
 23179 000111C9 C9                      	leave
 23180 000111CA C21800                  	ret AND_KILL_FRAME(1)
 23181                                  .L_lambda_simple_end_0085:	; new closure is in rax
 23182 000111CD 48890425[25140000]      	mov qword [free_var_96], rax
 23183 000111D5 48B8-                   	mov rax, sob_void
 23183 000111D7 [0000000000000000] 
 23184                                  
 23185 000111DF 4889C7                  	mov rdi, rax
 23186 000111E2 E84D700000              	call print_sexpr_if_not_void
 23187                                  	; preparing a non-tail-call
 23188 000111E7 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 23189 000111EF 803805                  	cmp byte [rax], T_undefined
 23190 000111F2 0F84BA6C0000            	je L_error_fvar_undefined
 23191 000111F8 50                      	push rax
 23192 000111F9 6A01                    	push 1	; arg count
 23193 000111FB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23194 00011200 E8DA6D0000              	call malloc
 23195 00011205 50                      	push rax
 23196 00011206 BF00000000              	mov rdi, 8 * 0	; new rib
 23197 0001120B E8CF6D0000              	call malloc
 23198 00011210 50                      	push rax
 23199 00011211 BF08000000              	mov rdi, 8 * 1	; extended env
 23200 00011216 E8C46D0000              	call malloc
 23201 0001121B 488B7D10                	mov rdi, ENV
 23202 0001121F BE00000000              	mov rsi, 0
 23203 00011224 BA01000000              	mov rdx, 1
 23204                                  .L_lambda_simple_env_loop_0086:	; ext_env[i + 1] <-- env[i]
 23205 00011229 4883FE00                	cmp rsi, 0
 23206 0001122D 7410                    	je .L_lambda_simple_env_end_0086
 23207 0001122F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23208 00011233 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23209 00011237 48FFC6                  	inc rsi
 23210 0001123A 48FFC2                  	inc rdx
 23211 0001123D EBEA                    	jmp .L_lambda_simple_env_loop_0086
 23212                                  .L_lambda_simple_env_end_0086:
 23213 0001123F 5B                      	pop rbx
 23214 00011240 BE00000000              	mov rsi, 0
 23215                                  .L_lambda_simple_params_loop_0086:	; copy params
 23216 00011245 4883FE00                	cmp rsi, 0
 23217 00011249 740E                    	je .L_lambda_simple_params_end_0086
 23218 0001124B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23219 00011250 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23220 00011254 48FFC6                  	inc rsi
 23221 00011257 EBEC                    	jmp .L_lambda_simple_params_loop_0086
 23222                                  .L_lambda_simple_params_end_0086:
 23223 00011259 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23224 0001125C 4889C3                  	mov rbx, rax
 23225 0001125F 58                      	pop rax
 23226 00011260 C60004                  	mov byte [rax], T_closure
 23227 00011263 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23228 00011267 48C74009[74120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0086
 23229 0001126F E9D1060000              	jmp .L_lambda_simple_end_0086
 23230                                  .L_lambda_simple_code_0086:	; lambda-simple body
 23231 00011274 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23232 0001127A 740B                    	je .L_lambda_simple_arity_check_ok_0086
 23233 0001127C FF742410                	push qword [rsp + 8 * 2]
 23234 00011280 6A01                    	push 1
 23235 00011282 E9116D0000              	jmp L_error_incorrect_arity_simple
 23236                                  .L_lambda_simple_arity_check_ok_0086:
 23237 00011287 C8000000                	enter 0, 0
 23238 0001128B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23239 00011290 E84A6D0000              	call malloc
 23240 00011295 50                      	push rax
 23241 00011296 BF08000000              	mov rdi, 8 * 1	; new rib
 23242 0001129B E83F6D0000              	call malloc
 23243 000112A0 50                      	push rax
 23244 000112A1 BF10000000              	mov rdi, 8 * 2	; extended env
 23245 000112A6 E8346D0000              	call malloc
 23246 000112AB 488B7D10                	mov rdi, ENV
 23247 000112AF BE00000000              	mov rsi, 0
 23248 000112B4 BA01000000              	mov rdx, 1
 23249                                  .L_lambda_opt_env_loop_0014:	; ext_env[i + 1] <-- env[i]
 23250 000112B9 4883FE01                	cmp rsi, 1
 23251 000112BD 7410                    	je .L_lambda_opt_env_end_0014
 23252 000112BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23253 000112C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23254 000112C7 48FFC6                  	inc rsi
 23255 000112CA 48FFC2                  	inc rdx
 23256 000112CD EBEA                    	jmp .L_lambda_opt_env_loop_0014
 23257                                  .L_lambda_opt_env_end_0014:
 23258 000112CF 5B                      	pop rbx
 23259 000112D0 BE00000000              	mov rsi, 0
 23260                                  .L_lambda_opt_params_loop_0014:	; copy params
 23261 000112D5 4883FE01                	cmp rsi, 1
 23262 000112D9 740E                    	je .L_lambda_opt_params_end_0014
 23263 000112DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23264 000112E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23265 000112E4 48FFC6                  	inc rsi
 23266 000112E7 EBEC                    	jmp .L_lambda_opt_params_loop_0014
 23267                                  .L_lambda_opt_params_end_0014:
 23268 000112E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23269 000112EC 4889C3                  	mov rbx, rax
 23270 000112EF 58                      	pop rax
 23271 000112F0 C60004                  	mov byte [rax], T_closure
 23272 000112F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23273 000112F7 48C74009[04130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0014
 23274 000112FF E93D060000              	jmp .L_lambda_opt_end_0014
 23275                                  .L_lambda_opt_code_0014:	; lambda-opt body
 23276 00011304 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23277 0001130A 7411                    	je .L_lambda_opt_arity_check_exact_0014
 23278 0001130C 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_0014
 23279 00011312 FF742410                	push qword [rsp + 8 * 2]
 23280 00011316 6A01                    	push 1
 23281 00011318 E98F6C0000              	jmp L_error_incorrect_arity_opt
 23282                                  .L_lambda_opt_arity_check_exact_0014:
 23283 0001131D 4883EC08                	sub rsp, 8
 23284 00011321 488B442408              	mov rax, qword[rsp + 8 *1]
 23285 00011326 48890424                	mov qword[rsp], rax  
 23286 0001132A 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23287 0001132F 4889442408              	mov qword[rsp + 8 * 1], rax
 23288 00011334 B802000000              	mov rax, 2
 23289 00011339 4889442410              	mov qword[rsp + 8 *2], rax
 23290 0001133E 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23291 00011343 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23292 00011348 48B8-                   	mov rax, sob_nil
 23292 0001134A [0100000000000000] 
 23293 00011352 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23294 00011357 C8000000                	enter 0, 0
 23295                                  	; preparing a tail-call
 23296                                  	; preparing a non-tail-call
 23297 0001135B 488B4528                	mov rax, PARAM(1)	; param xs
 23298 0001135F 50                      	push rax
 23299 00011360 6A01                    	push 1	; arg count
 23300 00011362 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23301 0001136A 803805                  	cmp byte [rax], T_undefined
 23302 0001136D 0F843F6B0000            	je L_error_fvar_undefined
 23303 00011373 803804                  	cmp byte [rax], T_closure
 23304 00011376 0F85BA6B0000            	jne L_error_non_closure
 23305 0001137C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23306 0001137F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23307 00011382 483D[02000000]          	cmp rax, sob_boolean_false
 23308 00011388 740F                    	je .L_if_else_006e
 23309 0001138A 48B8-                   	mov rax, L_constants + 0
 23309 0001138C [0000000000000000] 
 23310 00011394 E9EE000000              	jmp .L_if_end_006e
 23311                                  .L_if_else_006e:
 23312                                  	; preparing a non-tail-call
 23313 00011399 488B4528                	mov rax, PARAM(1)	; param xs
 23314 0001139D 50                      	push rax
 23315 0001139E 6A01                    	push 1	; arg count
 23316 000113A0 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23317 000113A8 803805                  	cmp byte [rax], T_undefined
 23318 000113AB 0F84016B0000            	je L_error_fvar_undefined
 23319 000113B1 803804                  	cmp byte [rax], T_closure
 23320 000113B4 0F857C6B0000            	jne L_error_non_closure
 23321 000113BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 23322 000113BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 23323 000113C0 483D[02000000]          	cmp rax, sob_boolean_false
 23324 000113C6 744C                    	je .L_if_else_006c
 23325                                  	; preparing a non-tail-call
 23326                                  	; preparing a non-tail-call
 23327 000113C8 488B4528                	mov rax, PARAM(1)	; param xs
 23328 000113CC 50                      	push rax
 23329 000113CD 6A01                    	push 1	; arg count
 23330 000113CF 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23331 000113D7 803805                  	cmp byte [rax], T_undefined
 23332 000113DA 0F84D26A0000            	je L_error_fvar_undefined
 23333 000113E0 803804                  	cmp byte [rax], T_closure
 23334 000113E3 0F854D6B0000            	jne L_error_non_closure
 23335 000113E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23336 000113EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23337 000113EF 50                      	push rax
 23338 000113F0 6A01                    	push 1	; arg count
 23339 000113F2 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23340 000113FA 803805                  	cmp byte [rax], T_undefined
 23341 000113FD 0F84AF6A0000            	je L_error_fvar_undefined
 23342 00011403 803804                  	cmp byte [rax], T_closure
 23343 00011406 0F852A6B0000            	jne L_error_non_closure
 23344 0001140C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23345 0001140F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23346 00011412 EB0A                    	jmp .L_if_end_006c
 23347                                  .L_if_else_006c:
 23348 00011414 48B8-                   	mov rax, L_constants + 2
 23348 00011416 [0200000000000000] 
 23349                                  .L_if_end_006c:
 23350 0001141E 483D[02000000]          	cmp rax, sob_boolean_false
 23351 00011424 7429                    	je .L_if_else_006d
 23352                                  	; preparing a non-tail-call
 23353 00011426 488B4528                	mov rax, PARAM(1)	; param xs
 23354 0001142A 50                      	push rax
 23355 0001142B 6A01                    	push 1	; arg count
 23356 0001142D 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23357 00011435 803805                  	cmp byte [rax], T_undefined
 23358 00011438 0F84746A0000            	je L_error_fvar_undefined
 23359 0001143E 803804                  	cmp byte [rax], T_closure
 23360 00011441 0F85EF6A0000            	jne L_error_non_closure
 23361 00011447 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23362 0001144A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23363 0001144D EB38                    	jmp .L_if_end_006d
 23364                                  .L_if_else_006d:
 23365                                  	; preparing a non-tail-call
 23366 0001144F 48B8-                   	mov rax, L_constants + 2955
 23366 00011451 [8B0B000000000000] 
 23367 00011459 50                      	push rax
 23368 0001145A 48B8-                   	mov rax, L_constants + 2946
 23368 0001145C [820B000000000000] 
 23369 00011464 50                      	push rax
 23370 00011465 6A02                    	push 2	; arg count
 23371 00011467 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 23372 0001146F 803805                  	cmp byte [rax], T_undefined
 23373 00011472 0F843A6A0000            	je L_error_fvar_undefined
 23374 00011478 803804                  	cmp byte [rax], T_closure
 23375 0001147B 0F85B56A0000            	jne L_error_non_closure
 23376 00011481 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23377 00011484 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23378                                  .L_if_end_006d:
 23379                                  .L_if_end_006e:
 23380 00011487 50                      	push rax
 23381 00011488 6A01                    	push 1	; arg count
 23382 0001148A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23383 0001148F E84B6B0000              	call malloc
 23384 00011494 50                      	push rax
 23385 00011495 BF10000000              	mov rdi, 8 * 2	; new rib
 23386 0001149A E8406B0000              	call malloc
 23387 0001149F 50                      	push rax
 23388 000114A0 BF18000000              	mov rdi, 8 * 3	; extended env
 23389 000114A5 E8356B0000              	call malloc
 23390 000114AA 488B7D10                	mov rdi, ENV
 23391 000114AE BE00000000              	mov rsi, 0
 23392 000114B3 BA01000000              	mov rdx, 1
 23393                                  .L_lambda_simple_env_loop_0088:	; ext_env[i + 1] <-- env[i]
 23394 000114B8 4883FE02                	cmp rsi, 2
 23395 000114BC 7410                    	je .L_lambda_simple_env_end_0088
 23396 000114BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23397 000114C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23398 000114C6 48FFC6                  	inc rsi
 23399 000114C9 48FFC2                  	inc rdx
 23400 000114CC EBEA                    	jmp .L_lambda_simple_env_loop_0088
 23401                                  .L_lambda_simple_env_end_0088:
 23402 000114CE 5B                      	pop rbx
 23403 000114CF BE00000000              	mov rsi, 0
 23404                                  .L_lambda_simple_params_loop_0088:	; copy params
 23405 000114D4 4883FE02                	cmp rsi, 2
 23406 000114D8 740E                    	je .L_lambda_simple_params_end_0088
 23407 000114DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23408 000114DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23409 000114E3 48FFC6                  	inc rsi
 23410 000114E6 EBEC                    	jmp .L_lambda_simple_params_loop_0088
 23411                                  .L_lambda_simple_params_end_0088:
 23412 000114E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23413 000114EB 4889C3                  	mov rbx, rax
 23414 000114EE 58                      	pop rax
 23415 000114EF C60004                  	mov byte [rax], T_closure
 23416 000114F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23417 000114F6 48C74009[03150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0088
 23418 000114FE E98C000000              	jmp .L_lambda_simple_end_0088
 23419                                  .L_lambda_simple_code_0088:	; lambda-simple body
 23420 00011503 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23421 00011509 740B                    	je .L_lambda_simple_arity_check_ok_0088
 23422 0001150B FF742410                	push qword [rsp + 8 * 2]
 23423 0001150F 6A01                    	push 1
 23424 00011511 E9826A0000              	jmp L_error_incorrect_arity_simple
 23425                                  .L_lambda_simple_arity_check_ok_0088:
 23426 00011516 C8000000                	enter 0, 0
 23427                                  	; preparing a tail-call
 23428 0001151A 488B4520                	mov rax, PARAM(0)	; param x
 23429 0001151E 50                      	push rax
 23430 0001151F 488B4510                	mov rax, ENV
 23431 00011523 488B00                  	mov rax, qword [rax + 8 * 0]
 23432 00011526 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23433 00011529 50                      	push rax
 23434 0001152A 6A02                    	push 2	; arg count
 23435 0001152C 488B4510                	mov rax, ENV
 23436 00011530 488B4008                	mov rax, qword [rax + 8 * 1]
 23437 00011534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23438 00011537 803804                  	cmp byte [rax], T_closure
 23439 0001153A 0F85F6690000            	jne L_error_non_closure
 23440 00011540 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23441 00011543 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23442 00011546 FF7500                  	push qword[rbp]
 23443 00011549 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23444 0001154C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23445 00011550 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23446 00011554 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23447 00011558 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23448 0001155B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23449 0001155E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23450 00011563 4983C103                	add r9, 3 	 ;for getting to the params
 23451 00011567 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23452 0001156B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23453                                  .L_tc_recycle_frame_loop_00d3:
 23454 0001156E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23455 00011571 7410                    	je .L_tc_recycle_frame_done_00d3
 23456 00011573 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23457 00011576 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23458 00011579 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23459 0001157D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23460 00011581 EBEB                    	jmp .L_tc_recycle_frame_loop_00d3
 23461                                  .L_tc_recycle_frame_done_00d3:
 23462 00011583 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23463 00011584 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23464 00011588 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23465 0001158B C9                      	leave
 23466 0001158C C21800                  	ret AND_KILL_FRAME(1)
 23467                                  .L_lambda_simple_end_0088:	; new closure is in rax
 23468 0001158F 803804                  	cmp byte [rax], T_closure
 23469 00011592 0F859E690000            	jne L_error_non_closure
 23470 00011598 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23471 0001159B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23472 0001159E FF7500                  	push qword[rbp]
 23473 000115A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23474 000115A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23475 000115A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23476 000115AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23477 000115B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23478 000115B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23479 000115B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23480 000115BB 4983C103                	add r9, 3 	 ;for getting to the params
 23481 000115BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23482 000115C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23483                                  .L_tc_recycle_frame_loop_00d4:
 23484 000115C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23485 000115C9 7410                    	je .L_tc_recycle_frame_done_00d4
 23486 000115CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23487 000115CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23488 000115D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23489 000115D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23490 000115D9 EBEB                    	jmp .L_tc_recycle_frame_loop_00d4
 23491                                  .L_tc_recycle_frame_done_00d4:
 23492 000115DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23493 000115DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23494 000115E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23495 000115E3 C9                      	leave
 23496 000115E4 C22000                  	ret AND_KILL_FRAME(2)
 23497 000115E7 E955030000              	jmp .L_lambda_opt_end_0014	; new closure is in rax
 23498                                  .L_lambda_opt_arity_check_more_0014:
 23499 000115EC 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 23500 000115F1 49B9-                   	mov r9, sob_nil
 23500 000115F3 [0100000000000000] 
 23501 000115FB 4889E3                  	mov rbx, rsp 
 23502 000115FE 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 23503 00011602 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 23504 00011605 49C1E003                	shl r8, 3
 23505 00011609 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 23506 0001160C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 23507                                  .L_lambda_opt_stack_shrink_loop_0014:
 23508 00011611 4983F801                	cmp r8, 1
 23509 00011615 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0014
 23510 00011617 BF11000000              	mov rdi, 1+8+8	;for pair
 23511 0001161C E8BE690000              	call malloc	 ;to create the pair in the stack
 23512 00011621 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 23513 00011624 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 23514 00011627 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 23515 0001162B 4C894809                 	mov qword[rax+1+8],r9
 23516 0001162F 4989C1                  	mov r9, rax	 ; for the recursion 
 23517 00011632 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 23518 00011635 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 23519 00011639 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0014
 23520                                  .L_lambda_opt_stack_shrink_loop_exit_0014:
 23521 0001163B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 23522 00011640 4883E902                	sub rcx, 2
 23523 00011644 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 23524 00011648 4801CC                  	add rsp, rcx	 ;shrinking the stack
 23525 0001164B 4889E0                  	mov rax, rsp
 23526 0001164E 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 23527 00011651 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 23528 00011655 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 23529 00011658 4883C018                	add rax, 3 * 8 	;now rax is param 0
 23530 0001165C 49C1E003                	shl r8, 3 	; convert to byte
 23531 00011660 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 23532 00011663 4C8908                  	mov qword[rax], r9	;puting the list at the top
 23533 00011666 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 23534 0001166A 4889E3                  	mov rbx, rsp 
 23535 0001166D 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 23536 00011670 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 23537 00011676 49FFCA                  	dec r10 
 23538 00011679 49C1E203                	shl r10, 3	;to get bytes
 23539 0001167D 4883C318                	add rbx, 3*8 	;rbx is the first param
 23540 00011681 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 23541 00011684 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 23542                                  
 23543 00011687 4C8900                              	mov qword[rax], r8
 23544 0001168A 4883E808                            	sub rax, 8
 23545 0001168E 4883EB08                	sub rbx, 8
 23546 00011692 4889E0                  	mov rax, rsp
 23547 00011695 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 23548 00011698 48C744241002000000      	mov qword [rsp+2*8], 2
 23549 000116A1 488B5808                	mov rbx, qword[rax + 8 *1]
 23550 000116A5 48895C2408              	mov qword [rsp + 1*8] ,rbx
 23551 000116AA 488B18                  	mov rbx, qword[rax]
 23552 000116AD 48891C24                	mov qword [rsp], rbx
 23553 000116B1 C8000000                	enter 0, 0
 23554                                  	; preparing a tail-call
 23555                                  	; preparing a non-tail-call
 23556 000116B5 488B4528                	mov rax, PARAM(1)	; param xs
 23557 000116B9 50                      	push rax
 23558 000116BA 6A01                    	push 1	; arg count
 23559 000116BC 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23560 000116C4 803805                  	cmp byte [rax], T_undefined
 23561 000116C7 0F84E5670000            	je L_error_fvar_undefined
 23562 000116CD 803804                  	cmp byte [rax], T_closure
 23563 000116D0 0F8560680000            	jne L_error_non_closure
 23564 000116D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23565 000116D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23566 000116DC 483D[02000000]          	cmp rax, sob_boolean_false
 23567 000116E2 740F                    	je .L_if_else_006b
 23568 000116E4 48B8-                   	mov rax, L_constants + 0
 23568 000116E6 [0000000000000000] 
 23569 000116EE E9EE000000              	jmp .L_if_end_006b
 23570                                  .L_if_else_006b:
 23571                                  	; preparing a non-tail-call
 23572 000116F3 488B4528                	mov rax, PARAM(1)	; param xs
 23573 000116F7 50                      	push rax
 23574 000116F8 6A01                    	push 1	; arg count
 23575 000116FA 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23576 00011702 803805                  	cmp byte [rax], T_undefined
 23577 00011705 0F84A7670000            	je L_error_fvar_undefined
 23578 0001170B 803804                  	cmp byte [rax], T_closure
 23579 0001170E 0F8522680000            	jne L_error_non_closure
 23580 00011714 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23581 00011717 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23582 0001171A 483D[02000000]          	cmp rax, sob_boolean_false
 23583 00011720 744C                    	je .L_if_else_0069
 23584                                  	; preparing a non-tail-call
 23585                                  	; preparing a non-tail-call
 23586 00011722 488B4528                	mov rax, PARAM(1)	; param xs
 23587 00011726 50                      	push rax
 23588 00011727 6A01                    	push 1	; arg count
 23589 00011729 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23590 00011731 803805                  	cmp byte [rax], T_undefined
 23591 00011734 0F8478670000            	je L_error_fvar_undefined
 23592 0001173A 803804                  	cmp byte [rax], T_closure
 23593 0001173D 0F85F3670000            	jne L_error_non_closure
 23594 00011743 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23595 00011746 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23596 00011749 50                      	push rax
 23597 0001174A 6A01                    	push 1	; arg count
 23598 0001174C 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23599 00011754 803805                  	cmp byte [rax], T_undefined
 23600 00011757 0F8455670000            	je L_error_fvar_undefined
 23601 0001175D 803804                  	cmp byte [rax], T_closure
 23602 00011760 0F85D0670000            	jne L_error_non_closure
 23603 00011766 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23604 00011769 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23605 0001176C EB0A                    	jmp .L_if_end_0069
 23606                                  .L_if_else_0069:
 23607 0001176E 48B8-                   	mov rax, L_constants + 2
 23607 00011770 [0200000000000000] 
 23608                                  .L_if_end_0069:
 23609 00011778 483D[02000000]          	cmp rax, sob_boolean_false
 23610 0001177E 7429                    	je .L_if_else_006a
 23611                                  	; preparing a non-tail-call
 23612 00011780 488B4528                	mov rax, PARAM(1)	; param xs
 23613 00011784 50                      	push rax
 23614 00011785 6A01                    	push 1	; arg count
 23615 00011787 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23616 0001178F 803805                  	cmp byte [rax], T_undefined
 23617 00011792 0F841A670000            	je L_error_fvar_undefined
 23618 00011798 803804                  	cmp byte [rax], T_closure
 23619 0001179B 0F8595670000            	jne L_error_non_closure
 23620 000117A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23621 000117A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23622 000117A7 EB38                    	jmp .L_if_end_006a
 23623                                  .L_if_else_006a:
 23624                                  	; preparing a non-tail-call
 23625 000117A9 48B8-                   	mov rax, L_constants + 2955
 23625 000117AB [8B0B000000000000] 
 23626 000117B3 50                      	push rax
 23627 000117B4 48B8-                   	mov rax, L_constants + 2946
 23627 000117B6 [820B000000000000] 
 23628 000117BE 50                      	push rax
 23629 000117BF 6A02                    	push 2	; arg count
 23630 000117C1 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 23631 000117C9 803805                  	cmp byte [rax], T_undefined
 23632 000117CC 0F84E0660000            	je L_error_fvar_undefined
 23633 000117D2 803804                  	cmp byte [rax], T_closure
 23634 000117D5 0F855B670000            	jne L_error_non_closure
 23635 000117DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 23636 000117DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23637                                  .L_if_end_006a:
 23638                                  .L_if_end_006b:
 23639 000117E1 50                      	push rax
 23640 000117E2 6A01                    	push 1	; arg count
 23641 000117E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23642 000117E9 E8F1670000              	call malloc
 23643 000117EE 50                      	push rax
 23644 000117EF BF10000000              	mov rdi, 8 * 2	; new rib
 23645 000117F4 E8E6670000              	call malloc
 23646 000117F9 50                      	push rax
 23647 000117FA BF18000000              	mov rdi, 8 * 3	; extended env
 23648 000117FF E8DB670000              	call malloc
 23649 00011804 488B7D10                	mov rdi, ENV
 23650 00011808 BE00000000              	mov rsi, 0
 23651 0001180D BA01000000              	mov rdx, 1
 23652                                  .L_lambda_simple_env_loop_0087:	; ext_env[i + 1] <-- env[i]
 23653 00011812 4883FE02                	cmp rsi, 2
 23654 00011816 7410                    	je .L_lambda_simple_env_end_0087
 23655 00011818 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23656 0001181C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23657 00011820 48FFC6                  	inc rsi
 23658 00011823 48FFC2                  	inc rdx
 23659 00011826 EBEA                    	jmp .L_lambda_simple_env_loop_0087
 23660                                  .L_lambda_simple_env_end_0087:
 23661 00011828 5B                      	pop rbx
 23662 00011829 BE00000000              	mov rsi, 0
 23663                                  .L_lambda_simple_params_loop_0087:	; copy params
 23664 0001182E 4883FE02                	cmp rsi, 2
 23665 00011832 740E                    	je .L_lambda_simple_params_end_0087
 23666 00011834 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23667 00011839 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23668 0001183D 48FFC6                  	inc rsi
 23669 00011840 EBEC                    	jmp .L_lambda_simple_params_loop_0087
 23670                                  .L_lambda_simple_params_end_0087:
 23671 00011842 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23672 00011845 4889C3                  	mov rbx, rax
 23673 00011848 58                      	pop rax
 23674 00011849 C60004                  	mov byte [rax], T_closure
 23675 0001184C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23676 00011850 48C74009[5D180100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0087
 23677 00011858 E98C000000              	jmp .L_lambda_simple_end_0087
 23678                                  .L_lambda_simple_code_0087:	; lambda-simple body
 23679 0001185D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23680 00011863 740B                    	je .L_lambda_simple_arity_check_ok_0087
 23681 00011865 FF742410                	push qword [rsp + 8 * 2]
 23682 00011869 6A01                    	push 1
 23683 0001186B E928670000              	jmp L_error_incorrect_arity_simple
 23684                                  .L_lambda_simple_arity_check_ok_0087:
 23685 00011870 C8000000                	enter 0, 0
 23686                                  	; preparing a tail-call
 23687 00011874 488B4520                	mov rax, PARAM(0)	; param x
 23688 00011878 50                      	push rax
 23689 00011879 488B4510                	mov rax, ENV
 23690 0001187D 488B00                  	mov rax, qword [rax + 8 * 0]
 23691 00011880 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23692 00011883 50                      	push rax
 23693 00011884 6A02                    	push 2	; arg count
 23694 00011886 488B4510                	mov rax, ENV
 23695 0001188A 488B4008                	mov rax, qword [rax + 8 * 1]
 23696 0001188E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23697 00011891 803804                  	cmp byte [rax], T_closure
 23698 00011894 0F859C660000            	jne L_error_non_closure
 23699 0001189A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23700 0001189D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23701 000118A0 FF7500                  	push qword[rbp]
 23702 000118A3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23703 000118A6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23704 000118AA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23705 000118AE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23706 000118B2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23707 000118B5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23708 000118B8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23709 000118BD 4983C103                	add r9, 3 	 ;for getting to the params
 23710 000118C1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23711 000118C5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23712                                  .L_tc_recycle_frame_loop_00d1:
 23713 000118C8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23714 000118CB 7410                    	je .L_tc_recycle_frame_done_00d1
 23715 000118CD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23716 000118D0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23717 000118D3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23718 000118D7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23719 000118DB EBEB                    	jmp .L_tc_recycle_frame_loop_00d1
 23720                                  .L_tc_recycle_frame_done_00d1:
 23721 000118DD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23722 000118DE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23723 000118E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23724 000118E5 C9                      	leave
 23725 000118E6 C21800                  	ret AND_KILL_FRAME(1)
 23726                                  .L_lambda_simple_end_0087:	; new closure is in rax
 23727 000118E9 803804                  	cmp byte [rax], T_closure
 23728 000118EC 0F8544660000            	jne L_error_non_closure
 23729 000118F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23730 000118F5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23731 000118F8 FF7500                  	push qword[rbp]
 23732 000118FB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23733 000118FE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23734 00011902 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23735 00011906 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23736 0001190A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23737 0001190D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23738 00011910 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23739 00011915 4983C103                	add r9, 3 	 ;for getting to the params
 23740 00011919 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23741 0001191D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23742                                  .L_tc_recycle_frame_loop_00d2:
 23743 00011920 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23744 00011923 7410                    	je .L_tc_recycle_frame_done_00d2
 23745 00011925 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23746 00011928 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23747 0001192B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23748 0001192F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23749 00011933 EBEB                    	jmp .L_tc_recycle_frame_loop_00d2
 23750                                  .L_tc_recycle_frame_done_00d2:
 23751 00011935 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23752 00011936 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23753 0001193A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23754 0001193D C9                      	leave
 23755 0001193E C22000                  	ret AND_KILL_FRAME(2)
 23756                                  .L_lambda_opt_end_0014:	; new closure is in rax
 23757 00011941 C9                      	leave
 23758 00011942 C21800                  	ret AND_KILL_FRAME(1)
 23759                                  .L_lambda_simple_end_0086:	; new closure is in rax
 23760 00011945 803804                  	cmp byte [rax], T_closure
 23761 00011948 0F85E8650000            	jne L_error_non_closure
 23762 0001194E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23763 00011951 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23764 00011954 48890425[7A140000]      	mov qword [free_var_101], rax
 23765 0001195C 48B8-                   	mov rax, sob_void
 23765 0001195E [0000000000000000] 
 23766                                  
 23767 00011966 4889C7                  	mov rdi, rax
 23768 00011969 E8C6680000              	call print_sexpr_if_not_void
 23769                                  	; preparing a non-tail-call
 23770 0001196E 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 23771 00011976 803805                  	cmp byte [rax], T_undefined
 23772 00011979 0F8433650000            	je L_error_fvar_undefined
 23773 0001197F 50                      	push rax
 23774 00011980 6A01                    	push 1	; arg count
 23775 00011982 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23776 00011987 E853660000              	call malloc
 23777 0001198C 50                      	push rax
 23778 0001198D BF00000000              	mov rdi, 8 * 0	; new rib
 23779 00011992 E848660000              	call malloc
 23780 00011997 50                      	push rax
 23781 00011998 BF08000000              	mov rdi, 8 * 1	; extended env
 23782 0001199D E83D660000              	call malloc
 23783 000119A2 488B7D10                	mov rdi, ENV
 23784 000119A6 BE00000000              	mov rsi, 0
 23785 000119AB BA01000000              	mov rdx, 1
 23786                                  .L_lambda_simple_env_loop_0089:	; ext_env[i + 1] <-- env[i]
 23787 000119B0 4883FE00                	cmp rsi, 0
 23788 000119B4 7410                    	je .L_lambda_simple_env_end_0089
 23789 000119B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23790 000119BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23791 000119BE 48FFC6                  	inc rsi
 23792 000119C1 48FFC2                  	inc rdx
 23793 000119C4 EBEA                    	jmp .L_lambda_simple_env_loop_0089
 23794                                  .L_lambda_simple_env_end_0089:
 23795 000119C6 5B                      	pop rbx
 23796 000119C7 BE00000000              	mov rsi, 0
 23797                                  .L_lambda_simple_params_loop_0089:	; copy params
 23798 000119CC 4883FE00                	cmp rsi, 0
 23799 000119D0 740E                    	je .L_lambda_simple_params_end_0089
 23800 000119D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23801 000119D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23802 000119DB 48FFC6                  	inc rsi
 23803 000119DE EBEC                    	jmp .L_lambda_simple_params_loop_0089
 23804                                  .L_lambda_simple_params_end_0089:
 23805 000119E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23806 000119E3 4889C3                  	mov rbx, rax
 23807 000119E6 58                      	pop rax
 23808 000119E7 C60004                  	mov byte [rax], T_closure
 23809 000119EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23810 000119EE 48C74009[FB190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0089
 23811 000119F6 E9D1060000              	jmp .L_lambda_simple_end_0089
 23812                                  .L_lambda_simple_code_0089:	; lambda-simple body
 23813 000119FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23814 00011A01 740B                    	je .L_lambda_simple_arity_check_ok_0089
 23815 00011A03 FF742410                	push qword [rsp + 8 * 2]
 23816 00011A07 6A01                    	push 1
 23817 00011A09 E98A650000              	jmp L_error_incorrect_arity_simple
 23818                                  .L_lambda_simple_arity_check_ok_0089:
 23819 00011A0E C8000000                	enter 0, 0
 23820 00011A12 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23821 00011A17 E8C3650000              	call malloc
 23822 00011A1C 50                      	push rax
 23823 00011A1D BF08000000              	mov rdi, 8 * 1	; new rib
 23824 00011A22 E8B8650000              	call malloc
 23825 00011A27 50                      	push rax
 23826 00011A28 BF10000000              	mov rdi, 8 * 2	; extended env
 23827 00011A2D E8AD650000              	call malloc
 23828 00011A32 488B7D10                	mov rdi, ENV
 23829 00011A36 BE00000000              	mov rsi, 0
 23830 00011A3B BA01000000              	mov rdx, 1
 23831                                  .L_lambda_opt_env_loop_0015:	; ext_env[i + 1] <-- env[i]
 23832 00011A40 4883FE01                	cmp rsi, 1
 23833 00011A44 7410                    	je .L_lambda_opt_env_end_0015
 23834 00011A46 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23835 00011A4A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23836 00011A4E 48FFC6                  	inc rsi
 23837 00011A51 48FFC2                  	inc rdx
 23838 00011A54 EBEA                    	jmp .L_lambda_opt_env_loop_0015
 23839                                  .L_lambda_opt_env_end_0015:
 23840 00011A56 5B                      	pop rbx
 23841 00011A57 BE00000000              	mov rsi, 0
 23842                                  .L_lambda_opt_params_loop_0015:	; copy params
 23843 00011A5C 4883FE01                	cmp rsi, 1
 23844 00011A60 740E                    	je .L_lambda_opt_params_end_0015
 23845 00011A62 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23846 00011A67 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23847 00011A6B 48FFC6                  	inc rsi
 23848 00011A6E EBEC                    	jmp .L_lambda_opt_params_loop_0015
 23849                                  .L_lambda_opt_params_end_0015:
 23850 00011A70 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23851 00011A73 4889C3                  	mov rbx, rax
 23852 00011A76 58                      	pop rax
 23853 00011A77 C60004                  	mov byte [rax], T_closure
 23854 00011A7A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23855 00011A7E 48C74009[8B1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0015
 23856 00011A86 E93D060000              	jmp .L_lambda_opt_end_0015
 23857                                  .L_lambda_opt_code_0015:	; lambda-opt body
 23858 00011A8B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23859 00011A91 7411                    	je .L_lambda_opt_arity_check_exact_0015
 23860 00011A93 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_0015
 23861 00011A99 FF742410                	push qword [rsp + 8 * 2]
 23862 00011A9D 6A01                    	push 1
 23863 00011A9F E908650000              	jmp L_error_incorrect_arity_opt
 23864                                  .L_lambda_opt_arity_check_exact_0015:
 23865 00011AA4 4883EC08                	sub rsp, 8
 23866 00011AA8 488B442408              	mov rax, qword[rsp + 8 *1]
 23867 00011AAD 48890424                	mov qword[rsp], rax  
 23868 00011AB1 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23869 00011AB6 4889442408              	mov qword[rsp + 8 * 1], rax
 23870 00011ABB B802000000              	mov rax, 2
 23871 00011AC0 4889442410              	mov qword[rsp + 8 *2], rax
 23872 00011AC5 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23873 00011ACA 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23874 00011ACF 48B8-                   	mov rax, sob_nil
 23874 00011AD1 [0100000000000000] 
 23875 00011AD9 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23876 00011ADE C8000000                	enter 0, 0
 23877                                  	; preparing a tail-call
 23878                                  	; preparing a non-tail-call
 23879 00011AE2 488B4528                	mov rax, PARAM(1)	; param chs
 23880 00011AE6 50                      	push rax
 23881 00011AE7 6A01                    	push 1	; arg count
 23882 00011AE9 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23883 00011AF1 803805                  	cmp byte [rax], T_undefined
 23884 00011AF4 0F84B8630000            	je L_error_fvar_undefined
 23885 00011AFA 803804                  	cmp byte [rax], T_closure
 23886 00011AFD 0F8533640000            	jne L_error_non_closure
 23887 00011B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23888 00011B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23889 00011B09 483D[02000000]          	cmp rax, sob_boolean_false
 23890 00011B0F 740F                    	je .L_if_else_0074
 23891 00011B11 48B8-                   	mov rax, L_constants + 4
 23891 00011B13 [0400000000000000] 
 23892 00011B1B E9EE000000              	jmp .L_if_end_0074
 23893                                  .L_if_else_0074:
 23894                                  	; preparing a non-tail-call
 23895 00011B20 488B4528                	mov rax, PARAM(1)	; param chs
 23896 00011B24 50                      	push rax
 23897 00011B25 6A01                    	push 1	; arg count
 23898 00011B27 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 23899 00011B2F 803805                  	cmp byte [rax], T_undefined
 23900 00011B32 0F847A630000            	je L_error_fvar_undefined
 23901 00011B38 803804                  	cmp byte [rax], T_closure
 23902 00011B3B 0F85F5630000            	jne L_error_non_closure
 23903 00011B41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23904 00011B44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23905 00011B47 483D[02000000]          	cmp rax, sob_boolean_false
 23906 00011B4D 744C                    	je .L_if_else_0072
 23907                                  	; preparing a non-tail-call
 23908                                  	; preparing a non-tail-call
 23909 00011B4F 488B4528                	mov rax, PARAM(1)	; param chs
 23910 00011B53 50                      	push rax
 23911 00011B54 6A01                    	push 1	; arg count
 23912 00011B56 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 23913 00011B5E 803805                  	cmp byte [rax], T_undefined
 23914 00011B61 0F844B630000            	je L_error_fvar_undefined
 23915 00011B67 803804                  	cmp byte [rax], T_closure
 23916 00011B6A 0F85C6630000            	jne L_error_non_closure
 23917 00011B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23918 00011B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23919 00011B76 50                      	push rax
 23920 00011B77 6A01                    	push 1	; arg count
 23921 00011B79 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 23922 00011B81 803805                  	cmp byte [rax], T_undefined
 23923 00011B84 0F8428630000            	je L_error_fvar_undefined
 23924 00011B8A 803804                  	cmp byte [rax], T_closure
 23925 00011B8D 0F85A3630000            	jne L_error_non_closure
 23926 00011B93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23927 00011B96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23928 00011B99 EB0A                    	jmp .L_if_end_0072
 23929                                  .L_if_else_0072:
 23930 00011B9B 48B8-                   	mov rax, L_constants + 2
 23930 00011B9D [0200000000000000] 
 23931                                  .L_if_end_0072:
 23932 00011BA5 483D[02000000]          	cmp rax, sob_boolean_false
 23933 00011BAB 7429                    	je .L_if_else_0073
 23934                                  	; preparing a non-tail-call
 23935 00011BAD 488B4528                	mov rax, PARAM(1)	; param chs
 23936 00011BB1 50                      	push rax
 23937 00011BB2 6A01                    	push 1	; arg count
 23938 00011BB4 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 23939 00011BBC 803805                  	cmp byte [rax], T_undefined
 23940 00011BBF 0F84ED620000            	je L_error_fvar_undefined
 23941 00011BC5 803804                  	cmp byte [rax], T_closure
 23942 00011BC8 0F8568630000            	jne L_error_non_closure
 23943 00011BCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 23944 00011BD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23945 00011BD4 EB38                    	jmp .L_if_end_0073
 23946                                  .L_if_else_0073:
 23947                                  	; preparing a non-tail-call
 23948 00011BD6 48B8-                   	mov rax, L_constants + 3016
 23948 00011BD8 [C80B000000000000] 
 23949 00011BE0 50                      	push rax
 23950 00011BE1 48B8-                   	mov rax, L_constants + 3007
 23950 00011BE3 [BF0B000000000000] 
 23951 00011BEB 50                      	push rax
 23952 00011BEC 6A02                    	push 2	; arg count
 23953 00011BEE 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 23954 00011BF6 803805                  	cmp byte [rax], T_undefined
 23955 00011BF9 0F84B3620000            	je L_error_fvar_undefined
 23956 00011BFF 803804                  	cmp byte [rax], T_closure
 23957 00011C02 0F852E630000            	jne L_error_non_closure
 23958 00011C08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23959 00011C0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 23960                                  .L_if_end_0073:
 23961                                  .L_if_end_0074:
 23962 00011C0E 50                      	push rax
 23963 00011C0F 6A01                    	push 1	; arg count
 23964 00011C11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23965 00011C16 E8C4630000              	call malloc
 23966 00011C1B 50                      	push rax
 23967 00011C1C BF10000000              	mov rdi, 8 * 2	; new rib
 23968 00011C21 E8B9630000              	call malloc
 23969 00011C26 50                      	push rax
 23970 00011C27 BF18000000              	mov rdi, 8 * 3	; extended env
 23971 00011C2C E8AE630000              	call malloc
 23972 00011C31 488B7D10                	mov rdi, ENV
 23973 00011C35 BE00000000              	mov rsi, 0
 23974 00011C3A BA01000000              	mov rdx, 1
 23975                                  .L_lambda_simple_env_loop_008b:	; ext_env[i + 1] <-- env[i]
 23976 00011C3F 4883FE02                	cmp rsi, 2
 23977 00011C43 7410                    	je .L_lambda_simple_env_end_008b
 23978 00011C45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23979 00011C49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23980 00011C4D 48FFC6                  	inc rsi
 23981 00011C50 48FFC2                  	inc rdx
 23982 00011C53 EBEA                    	jmp .L_lambda_simple_env_loop_008b
 23983                                  .L_lambda_simple_env_end_008b:
 23984 00011C55 5B                      	pop rbx
 23985 00011C56 BE00000000              	mov rsi, 0
 23986                                  .L_lambda_simple_params_loop_008b:	; copy params
 23987 00011C5B 4883FE02                	cmp rsi, 2
 23988 00011C5F 740E                    	je .L_lambda_simple_params_end_008b
 23989 00011C61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23990 00011C66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23991 00011C6A 48FFC6                  	inc rsi
 23992 00011C6D EBEC                    	jmp .L_lambda_simple_params_loop_008b
 23993                                  .L_lambda_simple_params_end_008b:
 23994 00011C6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23995 00011C72 4889C3                  	mov rbx, rax
 23996 00011C75 58                      	pop rax
 23997 00011C76 C60004                  	mov byte [rax], T_closure
 23998 00011C79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23999 00011C7D 48C74009[8A1C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008b
 24000 00011C85 E98C000000              	jmp .L_lambda_simple_end_008b
 24001                                  .L_lambda_simple_code_008b:	; lambda-simple body
 24002 00011C8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24003 00011C90 740B                    	je .L_lambda_simple_arity_check_ok_008b
 24004 00011C92 FF742410                	push qword [rsp + 8 * 2]
 24005 00011C96 6A01                    	push 1
 24006 00011C98 E9FB620000              	jmp L_error_incorrect_arity_simple
 24007                                  .L_lambda_simple_arity_check_ok_008b:
 24008 00011C9D C8000000                	enter 0, 0
 24009                                  	; preparing a tail-call
 24010 00011CA1 488B4520                	mov rax, PARAM(0)	; param ch
 24011 00011CA5 50                      	push rax
 24012 00011CA6 488B4510                	mov rax, ENV
 24013 00011CAA 488B00                  	mov rax, qword [rax + 8 * 0]
 24014 00011CAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24015 00011CB0 50                      	push rax
 24016 00011CB1 6A02                    	push 2	; arg count
 24017 00011CB3 488B4510                	mov rax, ENV
 24018 00011CB7 488B4008                	mov rax, qword [rax + 8 * 1]
 24019 00011CBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24020 00011CBE 803804                  	cmp byte [rax], T_closure
 24021 00011CC1 0F856F620000            	jne L_error_non_closure
 24022 00011CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24023 00011CCA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24024 00011CCD FF7500                  	push qword[rbp]
 24025 00011CD0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24026 00011CD3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24027 00011CD7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24028 00011CDB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24029 00011CDF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24030 00011CE2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24031 00011CE5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24032 00011CEA 4983C103                	add r9, 3 	 ;for getting to the params
 24033 00011CEE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24034 00011CF2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24035                                  .L_tc_recycle_frame_loop_00d7:
 24036 00011CF5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24037 00011CF8 7410                    	je .L_tc_recycle_frame_done_00d7
 24038 00011CFA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24039 00011CFD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24040 00011D00 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24041 00011D04 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24042 00011D08 EBEB                    	jmp .L_tc_recycle_frame_loop_00d7
 24043                                  .L_tc_recycle_frame_done_00d7:
 24044 00011D0A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24045 00011D0B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24046 00011D0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24047 00011D12 C9                      	leave
 24048 00011D13 C21800                  	ret AND_KILL_FRAME(1)
 24049                                  .L_lambda_simple_end_008b:	; new closure is in rax
 24050 00011D16 803804                  	cmp byte [rax], T_closure
 24051 00011D19 0F8517620000            	jne L_error_non_closure
 24052 00011D1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24053 00011D22 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24054 00011D25 FF7500                  	push qword[rbp]
 24055 00011D28 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24056 00011D2B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24057 00011D2F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24058 00011D33 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24059 00011D37 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24060 00011D3A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24061 00011D3D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24062 00011D42 4983C103                	add r9, 3 	 ;for getting to the params
 24063 00011D46 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24064 00011D4A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24065                                  .L_tc_recycle_frame_loop_00d8:
 24066 00011D4D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24067 00011D50 7410                    	je .L_tc_recycle_frame_done_00d8
 24068 00011D52 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24069 00011D55 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24070 00011D58 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24071 00011D5C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24072 00011D60 EBEB                    	jmp .L_tc_recycle_frame_loop_00d8
 24073                                  .L_tc_recycle_frame_done_00d8:
 24074 00011D62 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24075 00011D63 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24076 00011D67 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24077 00011D6A C9                      	leave
 24078 00011D6B C22000                  	ret AND_KILL_FRAME(2)
 24079 00011D6E E955030000              	jmp .L_lambda_opt_end_0015	; new closure is in rax
 24080                                  .L_lambda_opt_arity_check_more_0015:
 24081 00011D73 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 24082 00011D78 49B9-                   	mov r9, sob_nil
 24082 00011D7A [0100000000000000] 
 24083 00011D82 4889E3                  	mov rbx, rsp 
 24084 00011D85 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 24085 00011D89 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 24086 00011D8C 49C1E003                	shl r8, 3
 24087 00011D90 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 24088 00011D93 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 24089                                  .L_lambda_opt_stack_shrink_loop_0015:
 24090 00011D98 4983F801                	cmp r8, 1
 24091 00011D9C 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0015
 24092 00011D9E BF11000000              	mov rdi, 1+8+8	;for pair
 24093 00011DA3 E837620000              	call malloc	 ;to create the pair in the stack
 24094 00011DA8 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 24095 00011DAB 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 24096 00011DAE 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 24097 00011DB2 4C894809                 	mov qword[rax+1+8],r9
 24098 00011DB6 4989C1                  	mov r9, rax	 ; for the recursion 
 24099 00011DB9 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 24100 00011DBC 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 24101 00011DC0 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0015
 24102                                  .L_lambda_opt_stack_shrink_loop_exit_0015:
 24103 00011DC2 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 24104 00011DC7 4883E902                	sub rcx, 2
 24105 00011DCB 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 24106 00011DCF 4801CC                  	add rsp, rcx	 ;shrinking the stack
 24107 00011DD2 4889E0                  	mov rax, rsp
 24108 00011DD5 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 24109 00011DD8 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 24110 00011DDC 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 24111 00011DDF 4883C018                	add rax, 3 * 8 	;now rax is param 0
 24112 00011DE3 49C1E003                	shl r8, 3 	; convert to byte
 24113 00011DE7 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 24114 00011DEA 4C8908                  	mov qword[rax], r9	;puting the list at the top
 24115 00011DED 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 24116 00011DF1 4889E3                  	mov rbx, rsp 
 24117 00011DF4 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 24118 00011DF7 41BA01000000            	mov r10, 1 	 ;r10 is the not opt params length
 24119 00011DFD 49FFCA                  	dec r10 
 24120 00011E00 49C1E203                	shl r10, 3	;to get bytes
 24121 00011E04 4883C318                	add rbx, 3*8 	;rbx is the first param
 24122 00011E08 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 24123 00011E0B 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 24124                                  
 24125 00011E0E 4C8900                              	mov qword[rax], r8
 24126 00011E11 4883E808                            	sub rax, 8
 24127 00011E15 4883EB08                	sub rbx, 8
 24128 00011E19 4889E0                  	mov rax, rsp
 24129 00011E1C 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 24130 00011E1F 48C744241002000000      	mov qword [rsp+2*8], 2
 24131 00011E28 488B5808                	mov rbx, qword[rax + 8 *1]
 24132 00011E2C 48895C2408              	mov qword [rsp + 1*8] ,rbx
 24133 00011E31 488B18                  	mov rbx, qword[rax]
 24134 00011E34 48891C24                	mov qword [rsp], rbx
 24135 00011E38 C8000000                	enter 0, 0
 24136                                  	; preparing a tail-call
 24137                                  	; preparing a non-tail-call
 24138 00011E3C 488B4528                	mov rax, PARAM(1)	; param chs
 24139 00011E40 50                      	push rax
 24140 00011E41 6A01                    	push 1	; arg count
 24141 00011E43 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 24142 00011E4B 803805                  	cmp byte [rax], T_undefined
 24143 00011E4E 0F845E600000            	je L_error_fvar_undefined
 24144 00011E54 803804                  	cmp byte [rax], T_closure
 24145 00011E57 0F85D9600000            	jne L_error_non_closure
 24146 00011E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 24147 00011E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24148 00011E63 483D[02000000]          	cmp rax, sob_boolean_false
 24149 00011E69 740F                    	je .L_if_else_0071
 24150 00011E6B 48B8-                   	mov rax, L_constants + 4
 24150 00011E6D [0400000000000000] 
 24151 00011E75 E9EE000000              	jmp .L_if_end_0071
 24152                                  .L_if_else_0071:
 24153                                  	; preparing a non-tail-call
 24154 00011E7A 488B4528                	mov rax, PARAM(1)	; param chs
 24155 00011E7E 50                      	push rax
 24156 00011E7F 6A01                    	push 1	; arg count
 24157 00011E81 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 24158 00011E89 803805                  	cmp byte [rax], T_undefined
 24159 00011E8C 0F8420600000            	je L_error_fvar_undefined
 24160 00011E92 803804                  	cmp byte [rax], T_closure
 24161 00011E95 0F859B600000            	jne L_error_non_closure
 24162 00011E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24163 00011E9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24164 00011EA1 483D[02000000]          	cmp rax, sob_boolean_false
 24165 00011EA7 744C                    	je .L_if_else_006f
 24166                                  	; preparing a non-tail-call
 24167                                  	; preparing a non-tail-call
 24168 00011EA9 488B4528                	mov rax, PARAM(1)	; param chs
 24169 00011EAD 50                      	push rax
 24170 00011EAE 6A01                    	push 1	; arg count
 24171 00011EB0 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 24172 00011EB8 803805                  	cmp byte [rax], T_undefined
 24173 00011EBB 0F84F15F0000            	je L_error_fvar_undefined
 24174 00011EC1 803804                  	cmp byte [rax], T_closure
 24175 00011EC4 0F856C600000            	jne L_error_non_closure
 24176 00011ECA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24177 00011ECD FF5009                  	call SOB_CLOSURE_CODE(rax)
 24178 00011ED0 50                      	push rax
 24179 00011ED1 6A01                    	push 1	; arg count
 24180 00011ED3 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 24181 00011EDB 803805                  	cmp byte [rax], T_undefined
 24182 00011EDE 0F84CE5F0000            	je L_error_fvar_undefined
 24183 00011EE4 803804                  	cmp byte [rax], T_closure
 24184 00011EE7 0F8549600000            	jne L_error_non_closure
 24185 00011EED FF7001                  	push SOB_CLOSURE_ENV(rax)
 24186 00011EF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24187 00011EF3 EB0A                    	jmp .L_if_end_006f
 24188                                  .L_if_else_006f:
 24189 00011EF5 48B8-                   	mov rax, L_constants + 2
 24189 00011EF7 [0200000000000000] 
 24190                                  .L_if_end_006f:
 24191 00011EFF 483D[02000000]          	cmp rax, sob_boolean_false
 24192 00011F05 7429                    	je .L_if_else_0070
 24193                                  	; preparing a non-tail-call
 24194 00011F07 488B4528                	mov rax, PARAM(1)	; param chs
 24195 00011F0B 50                      	push rax
 24196 00011F0C 6A01                    	push 1	; arg count
 24197 00011F0E 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 24198 00011F16 803805                  	cmp byte [rax], T_undefined
 24199 00011F19 0F84935F0000            	je L_error_fvar_undefined
 24200 00011F1F 803804                  	cmp byte [rax], T_closure
 24201 00011F22 0F850E600000            	jne L_error_non_closure
 24202 00011F28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24203 00011F2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 24204 00011F2E EB38                    	jmp .L_if_end_0070
 24205                                  .L_if_else_0070:
 24206                                  	; preparing a non-tail-call
 24207 00011F30 48B8-                   	mov rax, L_constants + 3016
 24207 00011F32 [C80B000000000000] 
 24208 00011F3A 50                      	push rax
 24209 00011F3B 48B8-                   	mov rax, L_constants + 3007
 24209 00011F3D [BF0B000000000000] 
 24210 00011F45 50                      	push rax
 24211 00011F46 6A02                    	push 2	; arg count
 24212 00011F48 488B0425[37130000]      	mov rax, qword [free_var_82]	; free var error
 24213 00011F50 803805                  	cmp byte [rax], T_undefined
 24214 00011F53 0F84595F0000            	je L_error_fvar_undefined
 24215 00011F59 803804                  	cmp byte [rax], T_closure
 24216 00011F5C 0F85D45F0000            	jne L_error_non_closure
 24217 00011F62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24218 00011F65 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24219                                  .L_if_end_0070:
 24220                                  .L_if_end_0071:
 24221 00011F68 50                      	push rax
 24222 00011F69 6A01                    	push 1	; arg count
 24223 00011F6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24224 00011F70 E86A600000              	call malloc
 24225 00011F75 50                      	push rax
 24226 00011F76 BF10000000              	mov rdi, 8 * 2	; new rib
 24227 00011F7B E85F600000              	call malloc
 24228 00011F80 50                      	push rax
 24229 00011F81 BF18000000              	mov rdi, 8 * 3	; extended env
 24230 00011F86 E854600000              	call malloc
 24231 00011F8B 488B7D10                	mov rdi, ENV
 24232 00011F8F BE00000000              	mov rsi, 0
 24233 00011F94 BA01000000              	mov rdx, 1
 24234                                  .L_lambda_simple_env_loop_008a:	; ext_env[i + 1] <-- env[i]
 24235 00011F99 4883FE02                	cmp rsi, 2
 24236 00011F9D 7410                    	je .L_lambda_simple_env_end_008a
 24237 00011F9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24238 00011FA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24239 00011FA7 48FFC6                  	inc rsi
 24240 00011FAA 48FFC2                  	inc rdx
 24241 00011FAD EBEA                    	jmp .L_lambda_simple_env_loop_008a
 24242                                  .L_lambda_simple_env_end_008a:
 24243 00011FAF 5B                      	pop rbx
 24244 00011FB0 BE00000000              	mov rsi, 0
 24245                                  .L_lambda_simple_params_loop_008a:	; copy params
 24246 00011FB5 4883FE02                	cmp rsi, 2
 24247 00011FB9 740E                    	je .L_lambda_simple_params_end_008a
 24248 00011FBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24249 00011FC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24250 00011FC4 48FFC6                  	inc rsi
 24251 00011FC7 EBEC                    	jmp .L_lambda_simple_params_loop_008a
 24252                                  .L_lambda_simple_params_end_008a:
 24253 00011FC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24254 00011FCC 4889C3                  	mov rbx, rax
 24255 00011FCF 58                      	pop rax
 24256 00011FD0 C60004                  	mov byte [rax], T_closure
 24257 00011FD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24258 00011FD7 48C74009[E41F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008a
 24259 00011FDF E98C000000              	jmp .L_lambda_simple_end_008a
 24260                                  .L_lambda_simple_code_008a:	; lambda-simple body
 24261 00011FE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24262 00011FEA 740B                    	je .L_lambda_simple_arity_check_ok_008a
 24263 00011FEC FF742410                	push qword [rsp + 8 * 2]
 24264 00011FF0 6A01                    	push 1
 24265 00011FF2 E9A15F0000              	jmp L_error_incorrect_arity_simple
 24266                                  .L_lambda_simple_arity_check_ok_008a:
 24267 00011FF7 C8000000                	enter 0, 0
 24268                                  	; preparing a tail-call
 24269 00011FFB 488B4520                	mov rax, PARAM(0)	; param ch
 24270 00011FFF 50                      	push rax
 24271 00012000 488B4510                	mov rax, ENV
 24272 00012004 488B00                  	mov rax, qword [rax + 8 * 0]
 24273 00012007 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24274 0001200A 50                      	push rax
 24275 0001200B 6A02                    	push 2	; arg count
 24276 0001200D 488B4510                	mov rax, ENV
 24277 00012011 488B4008                	mov rax, qword [rax + 8 * 1]
 24278 00012015 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24279 00012018 803804                  	cmp byte [rax], T_closure
 24280 0001201B 0F85155F0000            	jne L_error_non_closure
 24281 00012021 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24282 00012024 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24283 00012027 FF7500                  	push qword[rbp]
 24284 0001202A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24285 0001202D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24286 00012031 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24287 00012035 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24288 00012039 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24289 0001203C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24290 0001203F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24291 00012044 4983C103                	add r9, 3 	 ;for getting to the params
 24292 00012048 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24293 0001204C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24294                                  .L_tc_recycle_frame_loop_00d5:
 24295 0001204F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24296 00012052 7410                    	je .L_tc_recycle_frame_done_00d5
 24297 00012054 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24298 00012057 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24299 0001205A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24300 0001205E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24301 00012062 EBEB                    	jmp .L_tc_recycle_frame_loop_00d5
 24302                                  .L_tc_recycle_frame_done_00d5:
 24303 00012064 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24304 00012065 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24305 00012069 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24306 0001206C C9                      	leave
 24307 0001206D C21800                  	ret AND_KILL_FRAME(1)
 24308                                  .L_lambda_simple_end_008a:	; new closure is in rax
 24309 00012070 803804                  	cmp byte [rax], T_closure
 24310 00012073 0F85BD5E0000            	jne L_error_non_closure
 24311 00012079 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24312 0001207C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24313 0001207F FF7500                  	push qword[rbp]
 24314 00012082 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24315 00012085 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24316 00012089 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24317 0001208D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24318 00012091 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24319 00012094 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24320 00012097 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24321 0001209C 4983C103                	add r9, 3 	 ;for getting to the params
 24322 000120A0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24323 000120A4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24324                                  .L_tc_recycle_frame_loop_00d6:
 24325 000120A7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24326 000120AA 7410                    	je .L_tc_recycle_frame_done_00d6
 24327 000120AC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24328 000120AF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24329 000120B2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24330 000120B6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24331 000120BA EBEB                    	jmp .L_tc_recycle_frame_loop_00d6
 24332                                  .L_tc_recycle_frame_done_00d6:
 24333 000120BC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24334 000120BD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24335 000120C1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24336 000120C4 C9                      	leave
 24337 000120C5 C22000                  	ret AND_KILL_FRAME(2)
 24338                                  .L_lambda_opt_end_0015:	; new closure is in rax
 24339 000120C8 C9                      	leave
 24340 000120C9 C21800                  	ret AND_KILL_FRAME(1)
 24341                                  .L_lambda_simple_end_0089:	; new closure is in rax
 24342 000120CC 803804                  	cmp byte [rax], T_closure
 24343 000120CF 0F85615E0000            	jne L_error_non_closure
 24344 000120D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24345 000120D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24346 000120DB 48890425[58140000]      	mov qword [free_var_99], rax
 24347 000120E3 48B8-                   	mov rax, sob_void
 24347 000120E5 [0000000000000000] 
 24348                                  
 24349 000120ED 4889C7                  	mov rdi, rax
 24350 000120F0 E83F610000              	call print_sexpr_if_not_void
 24351                                  	; preparing a non-tail-call
 24352 000120F5 48B8-                   	mov rax, L_constants + 1993
 24352 000120F7 [C907000000000000] 
 24353 000120FF 50                      	push rax
 24354 00012100 6A01                    	push 1	; arg count
 24355 00012102 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24356 00012107 E8D35E0000              	call malloc
 24357 0001210C 50                      	push rax
 24358 0001210D BF00000000              	mov rdi, 8 * 0	; new rib
 24359 00012112 E8C85E0000              	call malloc
 24360 00012117 50                      	push rax
 24361 00012118 BF08000000              	mov rdi, 8 * 1	; extended env
 24362 0001211D E8BD5E0000              	call malloc
 24363 00012122 488B7D10                	mov rdi, ENV
 24364 00012126 BE00000000              	mov rsi, 0
 24365 0001212B BA01000000              	mov rdx, 1
 24366                                  .L_lambda_simple_env_loop_008c:	; ext_env[i + 1] <-- env[i]
 24367 00012130 4883FE00                	cmp rsi, 0
 24368 00012134 7410                    	je .L_lambda_simple_env_end_008c
 24369 00012136 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24370 0001213A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24371 0001213E 48FFC6                  	inc rsi
 24372 00012141 48FFC2                  	inc rdx
 24373 00012144 EBEA                    	jmp .L_lambda_simple_env_loop_008c
 24374                                  .L_lambda_simple_env_end_008c:
 24375 00012146 5B                      	pop rbx
 24376 00012147 BE00000000              	mov rsi, 0
 24377                                  .L_lambda_simple_params_loop_008c:	; copy params
 24378 0001214C 4883FE00                	cmp rsi, 0
 24379 00012150 740E                    	je .L_lambda_simple_params_end_008c
 24380 00012152 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24381 00012157 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24382 0001215B 48FFC6                  	inc rsi
 24383 0001215E EBEC                    	jmp .L_lambda_simple_params_loop_008c
 24384                                  .L_lambda_simple_params_end_008c:
 24385 00012160 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24386 00012163 4889C3                  	mov rbx, rax
 24387 00012166 58                      	pop rax
 24388 00012167 C60004                  	mov byte [rax], T_closure
 24389 0001216A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24390 0001216E 48C74009[7B210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008c
 24391 00012176 E95E040000              	jmp .L_lambda_simple_end_008c
 24392                                  .L_lambda_simple_code_008c:	; lambda-simple body
 24393 0001217B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24394 00012181 740B                    	je .L_lambda_simple_arity_check_ok_008c
 24395 00012183 FF742410                	push qword [rsp + 8 * 2]
 24396 00012187 6A01                    	push 1
 24397 00012189 E90A5E0000              	jmp L_error_incorrect_arity_simple
 24398                                  .L_lambda_simple_arity_check_ok_008c:
 24399 0001218E C8000000                	enter 0, 0
 24400 00012192 BF08000000              	mov rdi, 8*1
 24401 00012197 E8435E0000              	call malloc
 24402 0001219C 488B5D20                	mov rbx, PARAM(0)
 24403 000121A0 488918                  	mov qword[rax], rbx
 24404 000121A3 48894520                	mov PARAM(0), rax
 24405 000121A7 48B8-                   	mov rax, sob_void
 24405 000121A9 [0000000000000000] 
 24406                                  
 24407 000121B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24408 000121B6 E8245E0000              	call malloc
 24409 000121BB 50                      	push rax
 24410 000121BC BF08000000              	mov rdi, 8 * 1	; new rib
 24411 000121C1 E8195E0000              	call malloc
 24412 000121C6 50                      	push rax
 24413 000121C7 BF10000000              	mov rdi, 8 * 2	; extended env
 24414 000121CC E80E5E0000              	call malloc
 24415 000121D1 488B7D10                	mov rdi, ENV
 24416 000121D5 BE00000000              	mov rsi, 0
 24417 000121DA BA01000000              	mov rdx, 1
 24418                                  .L_lambda_simple_env_loop_008d:	; ext_env[i + 1] <-- env[i]
 24419 000121DF 4883FE01                	cmp rsi, 1
 24420 000121E3 7410                    	je .L_lambda_simple_env_end_008d
 24421 000121E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24422 000121E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24423 000121ED 48FFC6                  	inc rsi
 24424 000121F0 48FFC2                  	inc rdx
 24425 000121F3 EBEA                    	jmp .L_lambda_simple_env_loop_008d
 24426                                  .L_lambda_simple_env_end_008d:
 24427 000121F5 5B                      	pop rbx
 24428 000121F6 BE00000000              	mov rsi, 0
 24429                                  .L_lambda_simple_params_loop_008d:	; copy params
 24430 000121FB 4883FE01                	cmp rsi, 1
 24431 000121FF 740E                    	je .L_lambda_simple_params_end_008d
 24432 00012201 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24433 00012206 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24434 0001220A 48FFC6                  	inc rsi
 24435 0001220D EBEC                    	jmp .L_lambda_simple_params_loop_008d
 24436                                  .L_lambda_simple_params_end_008d:
 24437 0001220F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24438 00012212 4889C3                  	mov rbx, rax
 24439 00012215 58                      	pop rax
 24440 00012216 C60004                  	mov byte [rax], T_closure
 24441 00012219 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24442 0001221D 48C74009[2A220100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008d
 24443 00012225 E993020000              	jmp .L_lambda_simple_end_008d
 24444                                  .L_lambda_simple_code_008d:	; lambda-simple body
 24445 0001222A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24446 00012230 740B                    	je .L_lambda_simple_arity_check_ok_008d
 24447 00012232 FF742410                	push qword [rsp + 8 * 2]
 24448 00012236 6A02                    	push 2
 24449 00012238 E95B5D0000              	jmp L_error_incorrect_arity_simple
 24450                                  .L_lambda_simple_arity_check_ok_008d:
 24451 0001223D C8000000                	enter 0, 0
 24452                                  	; preparing a non-tail-call
 24453 00012241 488B4520                	mov rax, PARAM(0)	; param s
 24454 00012245 50                      	push rax
 24455 00012246 6A01                    	push 1	; arg count
 24456 00012248 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 24457 00012250 803805                  	cmp byte [rax], T_undefined
 24458 00012253 0F84595C0000            	je L_error_fvar_undefined
 24459 00012259 803804                  	cmp byte [rax], T_closure
 24460 0001225C 0F85D45C0000            	jne L_error_non_closure
 24461 00012262 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24462 00012265 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24463 00012268 483D[02000000]          	cmp rax, sob_boolean_false
 24464 0001226E 0F847C000000            	je .L_if_else_0075
 24465                                  	; preparing a tail-call
 24466 00012274 48B8-                   	mov rax, L_constants + 0
 24466 00012276 [0000000000000000] 
 24467 0001227E 50                      	push rax
 24468 0001227F 488B4528                	mov rax, PARAM(1)	; param i
 24469 00012283 50                      	push rax
 24470 00012284 6A02                    	push 2	; arg count
 24471 00012286 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 24472 0001228E 803805                  	cmp byte [rax], T_undefined
 24473 00012291 0F841B5C0000            	je L_error_fvar_undefined
 24474 00012297 803804                  	cmp byte [rax], T_closure
 24475 0001229A 0F85965C0000            	jne L_error_non_closure
 24476 000122A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24477 000122A3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24478 000122A6 FF7500                  	push qword[rbp]
 24479 000122A9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24480 000122AC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24481 000122B0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24482 000122B4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24483 000122B8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24484 000122BB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24485 000122BE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24486 000122C3 4983C103                	add r9, 3 	 ;for getting to the params
 24487 000122C7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24488 000122CB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24489                                  .L_tc_recycle_frame_loop_00d9:
 24490 000122CE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24491 000122D1 7410                    	je .L_tc_recycle_frame_done_00d9
 24492 000122D3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24493 000122D6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24494 000122D9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24495 000122DD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24496 000122E1 EBEB                    	jmp .L_tc_recycle_frame_loop_00d9
 24497                                  .L_tc_recycle_frame_done_00d9:
 24498 000122E3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24499 000122E4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24500 000122E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24501 000122EB E9C9010000              	jmp .L_if_end_0075
 24502                                  .L_if_else_0075:
 24503                                  	; preparing a tail-call
 24504                                  	; preparing a non-tail-call
 24505                                  	; preparing a non-tail-call
 24506 000122F0 48B8-                   	mov rax, L_constants + 2270
 24506 000122F2 [DE08000000000000] 
 24507 000122FA 50                      	push rax
 24508 000122FB 488B4528                	mov rax, PARAM(1)	; param i
 24509 000122FF 50                      	push rax
 24510 00012300 6A02                    	push 2	; arg count
 24511 00012302 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 24512 0001230A 803805                  	cmp byte [rax], T_undefined
 24513 0001230D 0F849F5B0000            	je L_error_fvar_undefined
 24514 00012313 803804                  	cmp byte [rax], T_closure
 24515 00012316 0F851A5C0000            	jne L_error_non_closure
 24516 0001231C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24517 0001231F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24518 00012322 50                      	push rax
 24519                                  	; preparing a non-tail-call
 24520 00012323 488B4520                	mov rax, PARAM(0)	; param s
 24521 00012327 50                      	push rax
 24522 00012328 6A01                    	push 1	; arg count
 24523 0001232A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 24524 00012332 803805                  	cmp byte [rax], T_undefined
 24525 00012335 0F84775B0000            	je L_error_fvar_undefined
 24526 0001233B 803804                  	cmp byte [rax], T_closure
 24527 0001233E 0F85F25B0000            	jne L_error_non_closure
 24528 00012344 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24529 00012347 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24530 0001234A 50                      	push rax
 24531 0001234B 6A02                    	push 2	; arg count
 24532 0001234D 488B4510                	mov rax, ENV
 24533 00012351 488B00                  	mov rax, qword [rax + 8 * 0]
 24534 00012354 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24535 00012357 488B00                  	mov rax, qword [rax]
 24536 0001235A 803804                  	cmp byte [rax], T_closure
 24537 0001235D 0F85D35B0000            	jne L_error_non_closure
 24538 00012363 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24539 00012366 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24540 00012369 50                      	push rax
 24541 0001236A 6A01                    	push 1	; arg count
 24542 0001236C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24543 00012371 E8695C0000              	call malloc
 24544 00012376 50                      	push rax
 24545 00012377 BF10000000              	mov rdi, 8 * 2	; new rib
 24546 0001237C E85E5C0000              	call malloc
 24547 00012381 50                      	push rax
 24548 00012382 BF18000000              	mov rdi, 8 * 3	; extended env
 24549 00012387 E8535C0000              	call malloc
 24550 0001238C 488B7D10                	mov rdi, ENV
 24551 00012390 BE00000000              	mov rsi, 0
 24552 00012395 BA01000000              	mov rdx, 1
 24553                                  .L_lambda_simple_env_loop_008e:	; ext_env[i + 1] <-- env[i]
 24554 0001239A 4883FE02                	cmp rsi, 2
 24555 0001239E 7410                    	je .L_lambda_simple_env_end_008e
 24556 000123A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24557 000123A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24558 000123A8 48FFC6                  	inc rsi
 24559 000123AB 48FFC2                  	inc rdx
 24560 000123AE EBEA                    	jmp .L_lambda_simple_env_loop_008e
 24561                                  .L_lambda_simple_env_end_008e:
 24562 000123B0 5B                      	pop rbx
 24563 000123B1 BE00000000              	mov rsi, 0
 24564                                  .L_lambda_simple_params_loop_008e:	; copy params
 24565 000123B6 4883FE02                	cmp rsi, 2
 24566 000123BA 740E                    	je .L_lambda_simple_params_end_008e
 24567 000123BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24568 000123C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24569 000123C5 48FFC6                  	inc rsi
 24570 000123C8 EBEC                    	jmp .L_lambda_simple_params_loop_008e
 24571                                  .L_lambda_simple_params_end_008e:
 24572 000123CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24573 000123CD 4889C3                  	mov rbx, rax
 24574 000123D0 58                      	pop rax
 24575 000123D1 C60004                  	mov byte [rax], T_closure
 24576 000123D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24577 000123D8 48C74009[E5230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008e
 24578 000123E0 E980000000              	jmp .L_lambda_simple_end_008e
 24579                                  .L_lambda_simple_code_008e:	; lambda-simple body
 24580 000123E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24581 000123EB 740B                    	je .L_lambda_simple_arity_check_ok_008e
 24582 000123ED FF742410                	push qword [rsp + 8 * 2]
 24583 000123F1 6A01                    	push 1
 24584 000123F3 E9A05B0000              	jmp L_error_incorrect_arity_simple
 24585                                  .L_lambda_simple_arity_check_ok_008e:
 24586 000123F8 C8000000                	enter 0, 0
 24587                                  	; preparing a non-tail-call
 24588                                  	; preparing a non-tail-call
 24589 000123FC 488B4510                	mov rax, ENV
 24590 00012400 488B00                  	mov rax, qword [rax + 8 * 0]
 24591 00012403 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24592 00012406 50                      	push rax
 24593 00012407 6A01                    	push 1	; arg count
 24594 00012409 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 24595 00012411 803805                  	cmp byte [rax], T_undefined
 24596 00012414 0F84985A0000            	je L_error_fvar_undefined
 24597 0001241A 803804                  	cmp byte [rax], T_closure
 24598 0001241D 0F85135B0000            	jne L_error_non_closure
 24599 00012423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24600 00012426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24601 00012429 50                      	push rax
 24602 0001242A 488B4510                	mov rax, ENV
 24603 0001242E 488B00                  	mov rax, qword [rax + 8 * 0]
 24604 00012431 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24605 00012435 50                      	push rax
 24606 00012436 488B4520                	mov rax, PARAM(0)	; param v
 24607 0001243A 50                      	push rax
 24608 0001243B 6A03                    	push 3	; arg count
 24609 0001243D 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 24610 00012445 803805                  	cmp byte [rax], T_undefined
 24611 00012448 0F84645A0000            	je L_error_fvar_undefined
 24612 0001244E 803804                  	cmp byte [rax], T_closure
 24613 00012451 0F85DF5A0000            	jne L_error_non_closure
 24614 00012457 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24615 0001245A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24616                                  
 24617 0001245D 488B4520                	mov rax, PARAM(0)	; param v
 24618 00012461 C9                      	leave
 24619 00012462 C21800                  	ret AND_KILL_FRAME(1)
 24620                                  .L_lambda_simple_end_008e:	; new closure is in rax
 24621 00012465 803804                  	cmp byte [rax], T_closure
 24622 00012468 0F85C85A0000            	jne L_error_non_closure
 24623 0001246E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24624 00012471 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24625 00012474 FF7500                  	push qword[rbp]
 24626 00012477 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24627 0001247A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24628 0001247E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24629 00012482 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24630 00012486 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24631 00012489 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24632 0001248C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24633 00012491 4983C103                	add r9, 3 	 ;for getting to the params
 24634 00012495 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24635 00012499 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24636                                  .L_tc_recycle_frame_loop_00da:
 24637 0001249C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24638 0001249F 7410                    	je .L_tc_recycle_frame_done_00da
 24639 000124A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24640 000124A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24641 000124A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24642 000124AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24643 000124AF EBEB                    	jmp .L_tc_recycle_frame_loop_00da
 24644                                  .L_tc_recycle_frame_done_00da:
 24645 000124B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24646 000124B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24647 000124B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24648                                  .L_if_end_0075:
 24649 000124B9 C9                      	leave
 24650 000124BA C22000                  	ret AND_KILL_FRAME(2)
 24651                                  .L_lambda_simple_end_008d:	; new closure is in rax
 24652 000124BD 50                      	push rax
 24653 000124BE 488B4520                	mov rax, PARAM(0)	; param run
 24654 000124C2 8F00                    	pop qword [rax]
 24655 000124C4 48B8-                   	mov rax, sob_void
 24655 000124C6 [0000000000000000] 
 24656                                  
 24657 000124CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24658 000124D3 E8075B0000              	call malloc
 24659 000124D8 50                      	push rax
 24660 000124D9 BF08000000              	mov rdi, 8 * 1	; new rib
 24661 000124DE E8FC5A0000              	call malloc
 24662 000124E3 50                      	push rax
 24663 000124E4 BF10000000              	mov rdi, 8 * 2	; extended env
 24664 000124E9 E8F15A0000              	call malloc
 24665 000124EE 488B7D10                	mov rdi, ENV
 24666 000124F2 BE00000000              	mov rsi, 0
 24667 000124F7 BA01000000              	mov rdx, 1
 24668                                  .L_lambda_simple_env_loop_008f:	; ext_env[i + 1] <-- env[i]
 24669 000124FC 4883FE01                	cmp rsi, 1
 24670 00012500 7410                    	je .L_lambda_simple_env_end_008f
 24671 00012502 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24672 00012506 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24673 0001250A 48FFC6                  	inc rsi
 24674 0001250D 48FFC2                  	inc rdx
 24675 00012510 EBEA                    	jmp .L_lambda_simple_env_loop_008f
 24676                                  .L_lambda_simple_env_end_008f:
 24677 00012512 5B                      	pop rbx
 24678 00012513 BE00000000              	mov rsi, 0
 24679                                  .L_lambda_simple_params_loop_008f:	; copy params
 24680 00012518 4883FE01                	cmp rsi, 1
 24681 0001251C 740E                    	je .L_lambda_simple_params_end_008f
 24682 0001251E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24683 00012523 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24684 00012527 48FFC6                  	inc rsi
 24685 0001252A EBEC                    	jmp .L_lambda_simple_params_loop_008f
 24686                                  .L_lambda_simple_params_end_008f:
 24687 0001252C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24688 0001252F 4889C3                  	mov rbx, rax
 24689 00012532 58                      	pop rax
 24690 00012533 C60004                  	mov byte [rax], T_closure
 24691 00012536 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24692 0001253A 48C74009[47250100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008f
 24693 00012542 E98E000000              	jmp .L_lambda_simple_end_008f
 24694                                  .L_lambda_simple_code_008f:	; lambda-simple body
 24695 00012547 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24696 0001254D 740B                    	je .L_lambda_simple_arity_check_ok_008f
 24697 0001254F FF742410                	push qword [rsp + 8 * 2]
 24698 00012553 6A01                    	push 1
 24699 00012555 E93E5A0000              	jmp L_error_incorrect_arity_simple
 24700                                  .L_lambda_simple_arity_check_ok_008f:
 24701 0001255A C8000000                	enter 0, 0
 24702                                  	; preparing a tail-call
 24703 0001255E 48B8-                   	mov rax, L_constants + 2135
 24703 00012560 [5708000000000000] 
 24704 00012568 50                      	push rax
 24705 00012569 488B4520                	mov rax, PARAM(0)	; param s
 24706 0001256D 50                      	push rax
 24707 0001256E 6A02                    	push 2	; arg count
 24708 00012570 488B4510                	mov rax, ENV
 24709 00012574 488B00                  	mov rax, qword [rax + 8 * 0]
 24710 00012577 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24711 0001257A 488B00                  	mov rax, qword [rax]
 24712 0001257D 803804                  	cmp byte [rax], T_closure
 24713 00012580 0F85B0590000            	jne L_error_non_closure
 24714 00012586 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24715 00012589 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24716 0001258C FF7500                  	push qword[rbp]
 24717 0001258F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24718 00012592 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24719 00012596 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24720 0001259A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24721 0001259E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24722 000125A1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24723 000125A4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24724 000125A9 4983C103                	add r9, 3 	 ;for getting to the params
 24725 000125AD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24726 000125B1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24727                                  .L_tc_recycle_frame_loop_00db:
 24728 000125B4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24729 000125B7 7410                    	je .L_tc_recycle_frame_done_00db
 24730 000125B9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24731 000125BC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24732 000125BF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24733 000125C3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24734 000125C7 EBEB                    	jmp .L_tc_recycle_frame_loop_00db
 24735                                  .L_tc_recycle_frame_done_00db:
 24736 000125C9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24737 000125CA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24738 000125CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24739 000125D1 C9                      	leave
 24740 000125D2 C21800                  	ret AND_KILL_FRAME(1)
 24741                                  .L_lambda_simple_end_008f:	; new closure is in rax
 24742 000125D5 C9                      	leave
 24743 000125D6 C21800                  	ret AND_KILL_FRAME(1)
 24744                                  .L_lambda_simple_end_008c:	; new closure is in rax
 24745 000125D9 803804                  	cmp byte [rax], T_closure
 24746 000125DC 0F8554590000            	jne L_error_non_closure
 24747 000125E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24748 000125E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24749 000125E8 48890425[14140000]      	mov qword [free_var_95], rax
 24750 000125F0 48B8-                   	mov rax, sob_void
 24750 000125F2 [0000000000000000] 
 24751                                  
 24752 000125FA 4889C7                  	mov rdi, rax
 24753 000125FD E8325C0000              	call print_sexpr_if_not_void
 24754                                  	; preparing a non-tail-call
 24755 00012602 48B8-                   	mov rax, L_constants + 1993
 24755 00012604 [C907000000000000] 
 24756 0001260C 50                      	push rax
 24757 0001260D 6A01                    	push 1	; arg count
 24758 0001260F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24759 00012614 E8C6590000              	call malloc
 24760 00012619 50                      	push rax
 24761 0001261A BF00000000              	mov rdi, 8 * 0	; new rib
 24762 0001261F E8BB590000              	call malloc
 24763 00012624 50                      	push rax
 24764 00012625 BF08000000              	mov rdi, 8 * 1	; extended env
 24765 0001262A E8B0590000              	call malloc
 24766 0001262F 488B7D10                	mov rdi, ENV
 24767 00012633 BE00000000              	mov rsi, 0
 24768 00012638 BA01000000              	mov rdx, 1
 24769                                  .L_lambda_simple_env_loop_0090:	; ext_env[i + 1] <-- env[i]
 24770 0001263D 4883FE00                	cmp rsi, 0
 24771 00012641 7410                    	je .L_lambda_simple_env_end_0090
 24772 00012643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24773 00012647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24774 0001264B 48FFC6                  	inc rsi
 24775 0001264E 48FFC2                  	inc rdx
 24776 00012651 EBEA                    	jmp .L_lambda_simple_env_loop_0090
 24777                                  .L_lambda_simple_env_end_0090:
 24778 00012653 5B                      	pop rbx
 24779 00012654 BE00000000              	mov rsi, 0
 24780                                  .L_lambda_simple_params_loop_0090:	; copy params
 24781 00012659 4883FE00                	cmp rsi, 0
 24782 0001265D 740E                    	je .L_lambda_simple_params_end_0090
 24783 0001265F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24784 00012664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24785 00012668 48FFC6                  	inc rsi
 24786 0001266B EBEC                    	jmp .L_lambda_simple_params_loop_0090
 24787                                  .L_lambda_simple_params_end_0090:
 24788 0001266D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24789 00012670 4889C3                  	mov rbx, rax
 24790 00012673 58                      	pop rax
 24791 00012674 C60004                  	mov byte [rax], T_closure
 24792 00012677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24793 0001267B 48C74009[88260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0090
 24794 00012683 E95E040000              	jmp .L_lambda_simple_end_0090
 24795                                  .L_lambda_simple_code_0090:	; lambda-simple body
 24796 00012688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24797 0001268E 740B                    	je .L_lambda_simple_arity_check_ok_0090
 24798 00012690 FF742410                	push qword [rsp + 8 * 2]
 24799 00012694 6A01                    	push 1
 24800 00012696 E9FD580000              	jmp L_error_incorrect_arity_simple
 24801                                  .L_lambda_simple_arity_check_ok_0090:
 24802 0001269B C8000000                	enter 0, 0
 24803 0001269F BF08000000              	mov rdi, 8*1
 24804 000126A4 E836590000              	call malloc
 24805 000126A9 488B5D20                	mov rbx, PARAM(0)
 24806 000126AD 488918                  	mov qword[rax], rbx
 24807 000126B0 48894520                	mov PARAM(0), rax
 24808 000126B4 48B8-                   	mov rax, sob_void
 24808 000126B6 [0000000000000000] 
 24809                                  
 24810 000126BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24811 000126C3 E817590000              	call malloc
 24812 000126C8 50                      	push rax
 24813 000126C9 BF08000000              	mov rdi, 8 * 1	; new rib
 24814 000126CE E80C590000              	call malloc
 24815 000126D3 50                      	push rax
 24816 000126D4 BF10000000              	mov rdi, 8 * 2	; extended env
 24817 000126D9 E801590000              	call malloc
 24818 000126DE 488B7D10                	mov rdi, ENV
 24819 000126E2 BE00000000              	mov rsi, 0
 24820 000126E7 BA01000000              	mov rdx, 1
 24821                                  .L_lambda_simple_env_loop_0091:	; ext_env[i + 1] <-- env[i]
 24822 000126EC 4883FE01                	cmp rsi, 1
 24823 000126F0 7410                    	je .L_lambda_simple_env_end_0091
 24824 000126F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24825 000126F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24826 000126FA 48FFC6                  	inc rsi
 24827 000126FD 48FFC2                  	inc rdx
 24828 00012700 EBEA                    	jmp .L_lambda_simple_env_loop_0091
 24829                                  .L_lambda_simple_env_end_0091:
 24830 00012702 5B                      	pop rbx
 24831 00012703 BE00000000              	mov rsi, 0
 24832                                  .L_lambda_simple_params_loop_0091:	; copy params
 24833 00012708 4883FE01                	cmp rsi, 1
 24834 0001270C 740E                    	je .L_lambda_simple_params_end_0091
 24835 0001270E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24836 00012713 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24837 00012717 48FFC6                  	inc rsi
 24838 0001271A EBEC                    	jmp .L_lambda_simple_params_loop_0091
 24839                                  .L_lambda_simple_params_end_0091:
 24840 0001271C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24841 0001271F 4889C3                  	mov rbx, rax
 24842 00012722 58                      	pop rax
 24843 00012723 C60004                  	mov byte [rax], T_closure
 24844 00012726 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24845 0001272A 48C74009[37270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0091
 24846 00012732 E993020000              	jmp .L_lambda_simple_end_0091
 24847                                  .L_lambda_simple_code_0091:	; lambda-simple body
 24848 00012737 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24849 0001273D 740B                    	je .L_lambda_simple_arity_check_ok_0091
 24850 0001273F FF742410                	push qword [rsp + 8 * 2]
 24851 00012743 6A02                    	push 2
 24852 00012745 E94E580000              	jmp L_error_incorrect_arity_simple
 24853                                  .L_lambda_simple_arity_check_ok_0091:
 24854 0001274A C8000000                	enter 0, 0
 24855                                  	; preparing a non-tail-call
 24856 0001274E 488B4520                	mov rax, PARAM(0)	; param s
 24857 00012752 50                      	push rax
 24858 00012753 6A01                    	push 1	; arg count
 24859 00012755 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 24860 0001275D 803805                  	cmp byte [rax], T_undefined
 24861 00012760 0F844C570000            	je L_error_fvar_undefined
 24862 00012766 803804                  	cmp byte [rax], T_closure
 24863 00012769 0F85C7570000            	jne L_error_non_closure
 24864 0001276F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24865 00012772 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24866 00012775 483D[02000000]          	cmp rax, sob_boolean_false
 24867 0001277B 0F847C000000            	je .L_if_else_0076
 24868                                  	; preparing a tail-call
 24869 00012781 48B8-                   	mov rax, L_constants + 4
 24869 00012783 [0400000000000000] 
 24870 0001278B 50                      	push rax
 24871 0001278C 488B4528                	mov rax, PARAM(1)	; param i
 24872 00012790 50                      	push rax
 24873 00012791 6A02                    	push 2	; arg count
 24874 00012793 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 24875 0001279B 803805                  	cmp byte [rax], T_undefined
 24876 0001279E 0F840E570000            	je L_error_fvar_undefined
 24877 000127A4 803804                  	cmp byte [rax], T_closure
 24878 000127A7 0F8589570000            	jne L_error_non_closure
 24879 000127AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24880 000127B0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24881 000127B3 FF7500                  	push qword[rbp]
 24882 000127B6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24883 000127B9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24884 000127BD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24885 000127C1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24886 000127C5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24887 000127C8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24888 000127CB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24889 000127D0 4983C103                	add r9, 3 	 ;for getting to the params
 24890 000127D4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24891 000127D8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24892                                  .L_tc_recycle_frame_loop_00dc:
 24893 000127DB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24894 000127DE 7410                    	je .L_tc_recycle_frame_done_00dc
 24895 000127E0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24896 000127E3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24897 000127E6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24898 000127EA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24899 000127EE EBEB                    	jmp .L_tc_recycle_frame_loop_00dc
 24900                                  .L_tc_recycle_frame_done_00dc:
 24901 000127F0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24902 000127F1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24903 000127F5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24904 000127F8 E9C9010000              	jmp .L_if_end_0076
 24905                                  .L_if_else_0076:
 24906                                  	; preparing a tail-call
 24907                                  	; preparing a non-tail-call
 24908                                  	; preparing a non-tail-call
 24909 000127FD 48B8-                   	mov rax, L_constants + 2270
 24909 000127FF [DE08000000000000] 
 24910 00012807 50                      	push rax
 24911 00012808 488B4528                	mov rax, PARAM(1)	; param i
 24912 0001280C 50                      	push rax
 24913 0001280D 6A02                    	push 2	; arg count
 24914 0001280F 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 24915 00012817 803805                  	cmp byte [rax], T_undefined
 24916 0001281A 0F8492560000            	je L_error_fvar_undefined
 24917 00012820 803804                  	cmp byte [rax], T_closure
 24918 00012823 0F850D570000            	jne L_error_non_closure
 24919 00012829 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24920 0001282C FF5009                  	call SOB_CLOSURE_CODE(rax)
 24921 0001282F 50                      	push rax
 24922                                  	; preparing a non-tail-call
 24923 00012830 488B4520                	mov rax, PARAM(0)	; param s
 24924 00012834 50                      	push rax
 24925 00012835 6A01                    	push 1	; arg count
 24926 00012837 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 24927 0001283F 803805                  	cmp byte [rax], T_undefined
 24928 00012842 0F846A560000            	je L_error_fvar_undefined
 24929 00012848 803804                  	cmp byte [rax], T_closure
 24930 0001284B 0F85E5560000            	jne L_error_non_closure
 24931 00012851 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24932 00012854 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24933 00012857 50                      	push rax
 24934 00012858 6A02                    	push 2	; arg count
 24935 0001285A 488B4510                	mov rax, ENV
 24936 0001285E 488B00                  	mov rax, qword [rax + 8 * 0]
 24937 00012861 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24938 00012864 488B00                  	mov rax, qword [rax]
 24939 00012867 803804                  	cmp byte [rax], T_closure
 24940 0001286A 0F85C6560000            	jne L_error_non_closure
 24941 00012870 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24942 00012873 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24943 00012876 50                      	push rax
 24944 00012877 6A01                    	push 1	; arg count
 24945 00012879 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24946 0001287E E85C570000              	call malloc
 24947 00012883 50                      	push rax
 24948 00012884 BF10000000              	mov rdi, 8 * 2	; new rib
 24949 00012889 E851570000              	call malloc
 24950 0001288E 50                      	push rax
 24951 0001288F BF18000000              	mov rdi, 8 * 3	; extended env
 24952 00012894 E846570000              	call malloc
 24953 00012899 488B7D10                	mov rdi, ENV
 24954 0001289D BE00000000              	mov rsi, 0
 24955 000128A2 BA01000000              	mov rdx, 1
 24956                                  .L_lambda_simple_env_loop_0092:	; ext_env[i + 1] <-- env[i]
 24957 000128A7 4883FE02                	cmp rsi, 2
 24958 000128AB 7410                    	je .L_lambda_simple_env_end_0092
 24959 000128AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24960 000128B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24961 000128B5 48FFC6                  	inc rsi
 24962 000128B8 48FFC2                  	inc rdx
 24963 000128BB EBEA                    	jmp .L_lambda_simple_env_loop_0092
 24964                                  .L_lambda_simple_env_end_0092:
 24965 000128BD 5B                      	pop rbx
 24966 000128BE BE00000000              	mov rsi, 0
 24967                                  .L_lambda_simple_params_loop_0092:	; copy params
 24968 000128C3 4883FE02                	cmp rsi, 2
 24969 000128C7 740E                    	je .L_lambda_simple_params_end_0092
 24970 000128C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24971 000128CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24972 000128D2 48FFC6                  	inc rsi
 24973 000128D5 EBEC                    	jmp .L_lambda_simple_params_loop_0092
 24974                                  .L_lambda_simple_params_end_0092:
 24975 000128D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24976 000128DA 4889C3                  	mov rbx, rax
 24977 000128DD 58                      	pop rax
 24978 000128DE C60004                  	mov byte [rax], T_closure
 24979 000128E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24980 000128E5 48C74009[F2280100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0092
 24981 000128ED E980000000              	jmp .L_lambda_simple_end_0092
 24982                                  .L_lambda_simple_code_0092:	; lambda-simple body
 24983 000128F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24984 000128F8 740B                    	je .L_lambda_simple_arity_check_ok_0092
 24985 000128FA FF742410                	push qword [rsp + 8 * 2]
 24986 000128FE 6A01                    	push 1
 24987 00012900 E993560000              	jmp L_error_incorrect_arity_simple
 24988                                  .L_lambda_simple_arity_check_ok_0092:
 24989 00012905 C8000000                	enter 0, 0
 24990                                  	; preparing a non-tail-call
 24991                                  	; preparing a non-tail-call
 24992 00012909 488B4510                	mov rax, ENV
 24993 0001290D 488B00                  	mov rax, qword [rax + 8 * 0]
 24994 00012910 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24995 00012913 50                      	push rax
 24996 00012914 6A01                    	push 1	; arg count
 24997 00012916 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 24998 0001291E 803805                  	cmp byte [rax], T_undefined
 24999 00012921 0F848B550000            	je L_error_fvar_undefined
 25000 00012927 803804                  	cmp byte [rax], T_closure
 25001 0001292A 0F8506560000            	jne L_error_non_closure
 25002 00012930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25003 00012933 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25004 00012936 50                      	push rax
 25005 00012937 488B4510                	mov rax, ENV
 25006 0001293B 488B00                  	mov rax, qword [rax + 8 * 0]
 25007 0001293E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 25008 00012942 50                      	push rax
 25009 00012943 488B4520                	mov rax, PARAM(0)	; param str
 25010 00012947 50                      	push rax
 25011 00012948 6A03                    	push 3	; arg count
 25012 0001294A 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 25013 00012952 803805                  	cmp byte [rax], T_undefined
 25014 00012955 0F8457550000            	je L_error_fvar_undefined
 25015 0001295B 803804                  	cmp byte [rax], T_closure
 25016 0001295E 0F85D2550000            	jne L_error_non_closure
 25017 00012964 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25018 00012967 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25019                                  
 25020 0001296A 488B4520                	mov rax, PARAM(0)	; param str
 25021 0001296E C9                      	leave
 25022 0001296F C21800                  	ret AND_KILL_FRAME(1)
 25023                                  .L_lambda_simple_end_0092:	; new closure is in rax
 25024 00012972 803804                  	cmp byte [rax], T_closure
 25025 00012975 0F85BB550000            	jne L_error_non_closure
 25026 0001297B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25027 0001297E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25028 00012981 FF7500                  	push qword[rbp]
 25029 00012984 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25030 00012987 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25031 0001298B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25032 0001298F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25033 00012993 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25034 00012996 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25035 00012999 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25036 0001299E 4983C103                	add r9, 3 	 ;for getting to the params
 25037 000129A2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25038 000129A6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25039                                  .L_tc_recycle_frame_loop_00dd:
 25040 000129A9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25041 000129AC 7410                    	je .L_tc_recycle_frame_done_00dd
 25042 000129AE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25043 000129B1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25044 000129B4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25045 000129B8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25046 000129BC EBEB                    	jmp .L_tc_recycle_frame_loop_00dd
 25047                                  .L_tc_recycle_frame_done_00dd:
 25048 000129BE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25049 000129BF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25050 000129C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25051                                  .L_if_end_0076:
 25052 000129C6 C9                      	leave
 25053 000129C7 C22000                  	ret AND_KILL_FRAME(2)
 25054                                  .L_lambda_simple_end_0091:	; new closure is in rax
 25055 000129CA 50                      	push rax
 25056 000129CB 488B4520                	mov rax, PARAM(0)	; param run
 25057 000129CF 8F00                    	pop qword [rax]
 25058 000129D1 48B8-                   	mov rax, sob_void
 25058 000129D3 [0000000000000000] 
 25059                                  
 25060 000129DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25061 000129E0 E8FA550000              	call malloc
 25062 000129E5 50                      	push rax
 25063 000129E6 BF08000000              	mov rdi, 8 * 1	; new rib
 25064 000129EB E8EF550000              	call malloc
 25065 000129F0 50                      	push rax
 25066 000129F1 BF10000000              	mov rdi, 8 * 2	; extended env
 25067 000129F6 E8E4550000              	call malloc
 25068 000129FB 488B7D10                	mov rdi, ENV
 25069 000129FF BE00000000              	mov rsi, 0
 25070 00012A04 BA01000000              	mov rdx, 1
 25071                                  .L_lambda_simple_env_loop_0093:	; ext_env[i + 1] <-- env[i]
 25072 00012A09 4883FE01                	cmp rsi, 1
 25073 00012A0D 7410                    	je .L_lambda_simple_env_end_0093
 25074 00012A0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25075 00012A13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25076 00012A17 48FFC6                  	inc rsi
 25077 00012A1A 48FFC2                  	inc rdx
 25078 00012A1D EBEA                    	jmp .L_lambda_simple_env_loop_0093
 25079                                  .L_lambda_simple_env_end_0093:
 25080 00012A1F 5B                      	pop rbx
 25081 00012A20 BE00000000              	mov rsi, 0
 25082                                  .L_lambda_simple_params_loop_0093:	; copy params
 25083 00012A25 4883FE01                	cmp rsi, 1
 25084 00012A29 740E                    	je .L_lambda_simple_params_end_0093
 25085 00012A2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25086 00012A30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25087 00012A34 48FFC6                  	inc rsi
 25088 00012A37 EBEC                    	jmp .L_lambda_simple_params_loop_0093
 25089                                  .L_lambda_simple_params_end_0093:
 25090 00012A39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25091 00012A3C 4889C3                  	mov rbx, rax
 25092 00012A3F 58                      	pop rax
 25093 00012A40 C60004                  	mov byte [rax], T_closure
 25094 00012A43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25095 00012A47 48C74009[542A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0093
 25096 00012A4F E98E000000              	jmp .L_lambda_simple_end_0093
 25097                                  .L_lambda_simple_code_0093:	; lambda-simple body
 25098 00012A54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25099 00012A5A 740B                    	je .L_lambda_simple_arity_check_ok_0093
 25100 00012A5C FF742410                	push qword [rsp + 8 * 2]
 25101 00012A60 6A01                    	push 1
 25102 00012A62 E931550000              	jmp L_error_incorrect_arity_simple
 25103                                  .L_lambda_simple_arity_check_ok_0093:
 25104 00012A67 C8000000                	enter 0, 0
 25105                                  	; preparing a tail-call
 25106 00012A6B 48B8-                   	mov rax, L_constants + 2135
 25106 00012A6D [5708000000000000] 
 25107 00012A75 50                      	push rax
 25108 00012A76 488B4520                	mov rax, PARAM(0)	; param s
 25109 00012A7A 50                      	push rax
 25110 00012A7B 6A02                    	push 2	; arg count
 25111 00012A7D 488B4510                	mov rax, ENV
 25112 00012A81 488B00                  	mov rax, qword [rax + 8 * 0]
 25113 00012A84 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25114 00012A87 488B00                  	mov rax, qword [rax]
 25115 00012A8A 803804                  	cmp byte [rax], T_closure
 25116 00012A8D 0F85A3540000            	jne L_error_non_closure
 25117 00012A93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25118 00012A96 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25119 00012A99 FF7500                  	push qword[rbp]
 25120 00012A9C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25121 00012A9F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25122 00012AA3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25123 00012AA7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25124 00012AAB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25125 00012AAE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25126 00012AB1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25127 00012AB6 4983C103                	add r9, 3 	 ;for getting to the params
 25128 00012ABA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25129 00012ABE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25130                                  .L_tc_recycle_frame_loop_00de:
 25131 00012AC1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25132 00012AC4 7410                    	je .L_tc_recycle_frame_done_00de
 25133 00012AC6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25134 00012AC9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25135 00012ACC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25136 00012AD0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25137 00012AD4 EBEB                    	jmp .L_tc_recycle_frame_loop_00de
 25138                                  .L_tc_recycle_frame_done_00de:
 25139 00012AD6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25140 00012AD7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25141 00012ADB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25142 00012ADE C9                      	leave
 25143 00012ADF C21800                  	ret AND_KILL_FRAME(1)
 25144                                  .L_lambda_simple_end_0093:	; new closure is in rax
 25145 00012AE2 C9                      	leave
 25146 00012AE3 C21800                  	ret AND_KILL_FRAME(1)
 25147                                  .L_lambda_simple_end_0090:	; new closure is in rax
 25148 00012AE6 803804                  	cmp byte [rax], T_closure
 25149 00012AE9 0F8547540000            	jne L_error_non_closure
 25150 00012AEF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25151 00012AF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25152 00012AF5 48890425[03140000]      	mov qword [free_var_94], rax
 25153 00012AFD 48B8-                   	mov rax, sob_void
 25153 00012AFF [0000000000000000] 
 25154                                  
 25155 00012B07 4889C7                  	mov rdi, rax
 25156 00012B0A E825570000              	call print_sexpr_if_not_void
 25157 00012B0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25158 00012B14 E8C6540000              	call malloc
 25159 00012B19 50                      	push rax
 25160 00012B1A BF00000000              	mov rdi, 8 * 0	; new rib
 25161 00012B1F E8BB540000              	call malloc
 25162 00012B24 50                      	push rax
 25163 00012B25 BF08000000              	mov rdi, 8 * 1	; extended env
 25164 00012B2A E8B0540000              	call malloc
 25165 00012B2F 488B7D10                	mov rdi, ENV
 25166 00012B33 BE00000000              	mov rsi, 0
 25167 00012B38 BA01000000              	mov rdx, 1
 25168                                  .L_lambda_opt_env_loop_0016:	; ext_env[i + 1] <-- env[i]
 25169 00012B3D 4883FE00                	cmp rsi, 0
 25170 00012B41 7410                    	je .L_lambda_opt_env_end_0016
 25171 00012B43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25172 00012B47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25173 00012B4B 48FFC6                  	inc rsi
 25174 00012B4E 48FFC2                  	inc rdx
 25175 00012B51 EBEA                    	jmp .L_lambda_opt_env_loop_0016
 25176                                  .L_lambda_opt_env_end_0016:
 25177 00012B53 5B                      	pop rbx
 25178 00012B54 BE00000000              	mov rsi, 0
 25179                                  .L_lambda_opt_params_loop_0016:	; copy params
 25180 00012B59 4883FE00                	cmp rsi, 0
 25181 00012B5D 740E                    	je .L_lambda_opt_params_end_0016
 25182 00012B5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25183 00012B64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25184 00012B68 48FFC6                  	inc rsi
 25185 00012B6B EBEC                    	jmp .L_lambda_opt_params_loop_0016
 25186                                  .L_lambda_opt_params_end_0016:
 25187 00012B6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25188 00012B70 4889C3                  	mov rbx, rax
 25189 00012B73 58                      	pop rax
 25190 00012B74 C60004                  	mov byte [rax], T_closure
 25191 00012B77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25192 00012B7B 48C74009[882B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0016
 25193 00012B83 E9ED010000              	jmp .L_lambda_opt_end_0016
 25194                                  .L_lambda_opt_code_0016:	; lambda-opt body
 25195 00012B88 48837C241000            	cmp qword [rsp + 8 * 2], 0
 25196 00012B8E 7411                    	je .L_lambda_opt_arity_check_exact_0016
 25197 00012B90 0F8FB4000000            	jg .L_lambda_opt_arity_check_more_0016
 25198 00012B96 FF742410                	push qword [rsp + 8 * 2]
 25199 00012B9A 6A00                    	push 0
 25200 00012B9C E90B540000              	jmp L_error_incorrect_arity_opt
 25201                                  .L_lambda_opt_arity_check_exact_0016:
 25202 00012BA1 4883EC08                	sub rsp, 8
 25203 00012BA5 488B442408              	mov rax, qword[rsp + 8 *1]
 25204 00012BAA 48890424                	mov qword[rsp], rax  
 25205 00012BAE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 25206 00012BB3 4889442408              	mov qword[rsp + 8 * 1], rax
 25207 00012BB8 B801000000              	mov rax, 1
 25208 00012BBD 4889442410              	mov qword[rsp + 8 *2], rax
 25209 00012BC2 48B8-                   	mov rax, sob_nil
 25209 00012BC4 [0100000000000000] 
 25210 00012BCC 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 25211 00012BD1 C8000000                	enter 0, 0
 25212                                  	; preparing a tail-call
 25213 00012BD5 488B4520                	mov rax, PARAM(0)	; param s
 25214 00012BD9 50                      	push rax
 25215 00012BDA 6A01                    	push 1	; arg count
 25216 00012BDC 488B0425[14140000]      	mov rax, qword [free_var_95]	; free var list->vector
 25217 00012BE4 803805                  	cmp byte [rax], T_undefined
 25218 00012BE7 0F84C5520000            	je L_error_fvar_undefined
 25219 00012BED 803804                  	cmp byte [rax], T_closure
 25220 00012BF0 0F8540530000            	jne L_error_non_closure
 25221 00012BF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25222 00012BF9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25223 00012BFC FF7500                  	push qword[rbp]
 25224 00012BFF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25225 00012C02 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25226 00012C06 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25227 00012C0A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25228 00012C0E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25229 00012C11 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25230 00012C14 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25231 00012C19 4983C103                	add r9, 3 	 ;for getting to the params
 25232 00012C1D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25233 00012C21 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25234                                  .L_tc_recycle_frame_loop_00e0:
 25235 00012C24 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25236 00012C27 7410                    	je .L_tc_recycle_frame_done_00e0
 25237 00012C29 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25238 00012C2C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25239 00012C2F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25240 00012C33 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25241 00012C37 EBEB                    	jmp .L_tc_recycle_frame_loop_00e0
 25242                                  .L_tc_recycle_frame_done_00e0:
 25243 00012C39 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25244 00012C3A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25245 00012C3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25246 00012C41 C9                      	leave
 25247 00012C42 C21800                  	ret AND_KILL_FRAME(1)
 25248 00012C45 E92B010000              	jmp .L_lambda_opt_end_0016	; new closure is in rax
 25249                                  .L_lambda_opt_arity_check_more_0016:
 25250 00012C4A 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 25251 00012C4F 49B9-                   	mov r9, sob_nil
 25251 00012C51 [0100000000000000] 
 25252 00012C59 4889E3                  	mov rbx, rsp 
 25253 00012C5C 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 25254 00012C60 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 25255 00012C63 49C1E003                	shl r8, 3
 25256 00012C67 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 25257 00012C6A 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 25258                                  .L_lambda_opt_stack_shrink_loop_0016:
 25259 00012C6F 4983F800                	cmp r8, 0
 25260 00012C73 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0016
 25261 00012C75 BF11000000              	mov rdi, 1+8+8	;for pair
 25262 00012C7A E860530000              	call malloc	 ;to create the pair in the stack
 25263 00012C7F C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 25264 00012C82 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 25265 00012C85 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 25266 00012C89 4C894809                 	mov qword[rax+1+8],r9
 25267 00012C8D 4989C1                  	mov r9, rax	 ; for the recursion 
 25268 00012C90 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 25269 00012C93 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 25270 00012C97 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0016
 25271                                  .L_lambda_opt_stack_shrink_loop_exit_0016:
 25272 00012C99 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 25273 00012C9E 4883E901                	sub rcx, 1
 25274 00012CA2 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 25275 00012CA6 4801CC                  	add rsp, rcx	 ;shrinking the stack
 25276 00012CA9 4889E0                  	mov rax, rsp
 25277 00012CAC 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 25278 00012CAF 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 25279 00012CB3 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 25280 00012CB6 4883C018                	add rax, 3 * 8 	;now rax is param 0
 25281 00012CBA 49C1E003                	shl r8, 3 	; convert to byte
 25282 00012CBE 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 25283 00012CC1 4C8908                  	mov qword[rax], r9	;puting the list at the top
 25284 00012CC4 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 25285 00012CC8 4889E3                  	mov rbx, rsp 
 25286 00012CCB 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 25287 00012CCE 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 25288 00012CD4 49FFCA                  	dec r10 
 25289 00012CD7 49C1E203                	shl r10, 3	;to get bytes
 25290 00012CDB 4883C318                	add rbx, 3*8 	;rbx is the first param
 25291 00012CDF 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 25292 00012CE2 4889E0                  	mov rax, rsp
 25293 00012CE5 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 25294 00012CE8 48C744241001000000      	mov qword [rsp+2*8], 1
 25295 00012CF1 488B5808                	mov rbx, qword[rax + 8 *1]
 25296 00012CF5 48895C2408              	mov qword [rsp + 1*8] ,rbx
 25297 00012CFA 488B18                  	mov rbx, qword[rax]
 25298 00012CFD 48891C24                	mov qword [rsp], rbx
 25299 00012D01 C8000000                	enter 0, 0
 25300                                  	; preparing a tail-call
 25301 00012D05 488B4520                	mov rax, PARAM(0)	; param s
 25302 00012D09 50                      	push rax
 25303 00012D0A 6A01                    	push 1	; arg count
 25304 00012D0C 488B0425[14140000]      	mov rax, qword [free_var_95]	; free var list->vector
 25305 00012D14 803805                  	cmp byte [rax], T_undefined
 25306 00012D17 0F8495510000            	je L_error_fvar_undefined
 25307 00012D1D 803804                  	cmp byte [rax], T_closure
 25308 00012D20 0F8510520000            	jne L_error_non_closure
 25309 00012D26 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25310 00012D29 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25311 00012D2C FF7500                  	push qword[rbp]
 25312 00012D2F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25313 00012D32 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25314 00012D36 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25315 00012D3A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25316 00012D3E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25317 00012D41 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25318 00012D44 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25319 00012D49 4983C103                	add r9, 3 	 ;for getting to the params
 25320 00012D4D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25321 00012D51 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25322                                  .L_tc_recycle_frame_loop_00df:
 25323 00012D54 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25324 00012D57 7410                    	je .L_tc_recycle_frame_done_00df
 25325 00012D59 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25326 00012D5C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25327 00012D5F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25328 00012D63 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25329 00012D67 EBEB                    	jmp .L_tc_recycle_frame_loop_00df
 25330                                  .L_tc_recycle_frame_done_00df:
 25331 00012D69 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25332 00012D6A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25333 00012D6E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25334 00012D71 C9                      	leave
 25335 00012D72 C21800                  	ret AND_KILL_FRAME(1)
 25336                                  .L_lambda_opt_end_0016:	; new closure is in rax
 25337 00012D75 48890425[11170000]      	mov qword [free_var_140], rax
 25338 00012D7D 48B8-                   	mov rax, sob_void
 25338 00012D7F [0000000000000000] 
 25339                                  
 25340 00012D87 4889C7                  	mov rdi, rax
 25341 00012D8A E8A5540000              	call print_sexpr_if_not_void
 25342                                  	; preparing a non-tail-call
 25343 00012D8F 48B8-                   	mov rax, L_constants + 1993
 25343 00012D91 [C907000000000000] 
 25344 00012D99 50                      	push rax
 25345 00012D9A 6A01                    	push 1	; arg count
 25346 00012D9C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25347 00012DA1 E839520000              	call malloc
 25348 00012DA6 50                      	push rax
 25349 00012DA7 BF00000000              	mov rdi, 8 * 0	; new rib
 25350 00012DAC E82E520000              	call malloc
 25351 00012DB1 50                      	push rax
 25352 00012DB2 BF08000000              	mov rdi, 8 * 1	; extended env
 25353 00012DB7 E823520000              	call malloc
 25354 00012DBC 488B7D10                	mov rdi, ENV
 25355 00012DC0 BE00000000              	mov rsi, 0
 25356 00012DC5 BA01000000              	mov rdx, 1
 25357                                  .L_lambda_simple_env_loop_0094:	; ext_env[i + 1] <-- env[i]
 25358 00012DCA 4883FE00                	cmp rsi, 0
 25359 00012DCE 7410                    	je .L_lambda_simple_env_end_0094
 25360 00012DD0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25361 00012DD4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25362 00012DD8 48FFC6                  	inc rsi
 25363 00012DDB 48FFC2                  	inc rdx
 25364 00012DDE EBEA                    	jmp .L_lambda_simple_env_loop_0094
 25365                                  .L_lambda_simple_env_end_0094:
 25366 00012DE0 5B                      	pop rbx
 25367 00012DE1 BE00000000              	mov rsi, 0
 25368                                  .L_lambda_simple_params_loop_0094:	; copy params
 25369 00012DE6 4883FE00                	cmp rsi, 0
 25370 00012DEA 740E                    	je .L_lambda_simple_params_end_0094
 25371 00012DEC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25372 00012DF1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25373 00012DF5 48FFC6                  	inc rsi
 25374 00012DF8 EBEC                    	jmp .L_lambda_simple_params_loop_0094
 25375                                  .L_lambda_simple_params_end_0094:
 25376 00012DFA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25377 00012DFD 4889C3                  	mov rbx, rax
 25378 00012E00 58                      	pop rax
 25379 00012E01 C60004                  	mov byte [rax], T_closure
 25380 00012E04 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25381 00012E08 48C74009[152E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0094
 25382 00012E10 E942030000              	jmp .L_lambda_simple_end_0094
 25383                                  .L_lambda_simple_code_0094:	; lambda-simple body
 25384 00012E15 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25385 00012E1B 740B                    	je .L_lambda_simple_arity_check_ok_0094
 25386 00012E1D FF742410                	push qword [rsp + 8 * 2]
 25387 00012E21 6A01                    	push 1
 25388 00012E23 E970510000              	jmp L_error_incorrect_arity_simple
 25389                                  .L_lambda_simple_arity_check_ok_0094:
 25390 00012E28 C8000000                	enter 0, 0
 25391 00012E2C BF08000000              	mov rdi, 8*1
 25392 00012E31 E8A9510000              	call malloc
 25393 00012E36 488B5D20                	mov rbx, PARAM(0)
 25394 00012E3A 488918                  	mov qword[rax], rbx
 25395 00012E3D 48894520                	mov PARAM(0), rax
 25396 00012E41 48B8-                   	mov rax, sob_void
 25396 00012E43 [0000000000000000] 
 25397                                  
 25398 00012E4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25399 00012E50 E88A510000              	call malloc
 25400 00012E55 50                      	push rax
 25401 00012E56 BF08000000              	mov rdi, 8 * 1	; new rib
 25402 00012E5B E87F510000              	call malloc
 25403 00012E60 50                      	push rax
 25404 00012E61 BF10000000              	mov rdi, 8 * 2	; extended env
 25405 00012E66 E874510000              	call malloc
 25406 00012E6B 488B7D10                	mov rdi, ENV
 25407 00012E6F BE00000000              	mov rsi, 0
 25408 00012E74 BA01000000              	mov rdx, 1
 25409                                  .L_lambda_simple_env_loop_0095:	; ext_env[i + 1] <-- env[i]
 25410 00012E79 4883FE01                	cmp rsi, 1
 25411 00012E7D 7410                    	je .L_lambda_simple_env_end_0095
 25412 00012E7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25413 00012E83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25414 00012E87 48FFC6                  	inc rsi
 25415 00012E8A 48FFC2                  	inc rdx
 25416 00012E8D EBEA                    	jmp .L_lambda_simple_env_loop_0095
 25417                                  .L_lambda_simple_env_end_0095:
 25418 00012E8F 5B                      	pop rbx
 25419 00012E90 BE00000000              	mov rsi, 0
 25420                                  .L_lambda_simple_params_loop_0095:	; copy params
 25421 00012E95 4883FE01                	cmp rsi, 1
 25422 00012E99 740E                    	je .L_lambda_simple_params_end_0095
 25423 00012E9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25424 00012EA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25425 00012EA4 48FFC6                  	inc rsi
 25426 00012EA7 EBEC                    	jmp .L_lambda_simple_params_loop_0095
 25427                                  .L_lambda_simple_params_end_0095:
 25428 00012EA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25429 00012EAC 4889C3                  	mov rbx, rax
 25430 00012EAF 58                      	pop rax
 25431 00012EB0 C60004                  	mov byte [rax], T_closure
 25432 00012EB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25433 00012EB7 48C74009[C42E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0095
 25434 00012EBF E94F010000              	jmp .L_lambda_simple_end_0095
 25435                                  .L_lambda_simple_code_0095:	; lambda-simple body
 25436 00012EC4 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25437 00012ECA 740B                    	je .L_lambda_simple_arity_check_ok_0095
 25438 00012ECC FF742410                	push qword [rsp + 8 * 2]
 25439 00012ED0 6A03                    	push 3
 25440 00012ED2 E9C1500000              	jmp L_error_incorrect_arity_simple
 25441                                  .L_lambda_simple_arity_check_ok_0095:
 25442 00012ED7 C8000000                	enter 0, 0
 25443                                  	; preparing a non-tail-call
 25444 00012EDB 488B4530                	mov rax, PARAM(2)	; param n
 25445 00012EDF 50                      	push rax
 25446 00012EE0 488B4528                	mov rax, PARAM(1)	; param i
 25447 00012EE4 50                      	push rax
 25448 00012EE5 6A02                    	push 2	; arg count
 25449 00012EE7 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 25450 00012EEF 803805                  	cmp byte [rax], T_undefined
 25451 00012EF2 0F84BA4F0000            	je L_error_fvar_undefined
 25452 00012EF8 803804                  	cmp byte [rax], T_closure
 25453 00012EFB 0F8535500000            	jne L_error_non_closure
 25454 00012F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25455 00012F04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25456 00012F07 483D[02000000]          	cmp rax, sob_boolean_false
 25457 00012F0D 0F84F2000000            	je .L_if_else_0077
 25458                                  	; preparing a tail-call
 25459                                  	; preparing a non-tail-call
 25460 00012F13 488B4530                	mov rax, PARAM(2)	; param n
 25461 00012F17 50                      	push rax
 25462                                  	; preparing a non-tail-call
 25463 00012F18 48B8-                   	mov rax, L_constants + 2270
 25463 00012F1A [DE08000000000000] 
 25464 00012F22 50                      	push rax
 25465 00012F23 488B4528                	mov rax, PARAM(1)	; param i
 25466 00012F27 50                      	push rax
 25467 00012F28 6A02                    	push 2	; arg count
 25468 00012F2A 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 25469 00012F32 803805                  	cmp byte [rax], T_undefined
 25470 00012F35 0F84774F0000            	je L_error_fvar_undefined
 25471 00012F3B 803804                  	cmp byte [rax], T_closure
 25472 00012F3E 0F85F24F0000            	jne L_error_non_closure
 25473 00012F44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25474 00012F47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25475 00012F4A 50                      	push rax
 25476 00012F4B 488B4520                	mov rax, PARAM(0)	; param str
 25477 00012F4F 50                      	push rax
 25478 00012F50 6A03                    	push 3	; arg count
 25479 00012F52 488B4510                	mov rax, ENV
 25480 00012F56 488B00                  	mov rax, qword [rax + 8 * 0]
 25481 00012F59 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25482 00012F5C 488B00                  	mov rax, qword [rax]
 25483 00012F5F 803804                  	cmp byte [rax], T_closure
 25484 00012F62 0F85CE4F0000            	jne L_error_non_closure
 25485 00012F68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25486 00012F6B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25487 00012F6E 50                      	push rax
 25488                                  	; preparing a non-tail-call
 25489 00012F6F 488B4528                	mov rax, PARAM(1)	; param i
 25490 00012F73 50                      	push rax
 25491 00012F74 488B4520                	mov rax, PARAM(0)	; param str
 25492 00012F78 50                      	push rax
 25493 00012F79 6A02                    	push 2	; arg count
 25494 00012F7B 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 25495 00012F83 803805                  	cmp byte [rax], T_undefined
 25496 00012F86 0F84264F0000            	je L_error_fvar_undefined
 25497 00012F8C 803804                  	cmp byte [rax], T_closure
 25498 00012F8F 0F85A14F0000            	jne L_error_non_closure
 25499 00012F95 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25500 00012F98 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25501 00012F9B 50                      	push rax
 25502 00012F9C 6A02                    	push 2	; arg count
 25503 00012F9E 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
 25504 00012FA6 803805                  	cmp byte [rax], T_undefined
 25505 00012FA9 0F84034F0000            	je L_error_fvar_undefined
 25506 00012FAF 803804                  	cmp byte [rax], T_closure
 25507 00012FB2 0F857E4F0000            	jne L_error_non_closure
 25508 00012FB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25509 00012FBB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25510 00012FBE FF7500                  	push qword[rbp]
 25511 00012FC1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25512 00012FC4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25513 00012FC8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25514 00012FCC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25515 00012FD0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25516 00012FD3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25517 00012FD6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25518 00012FDB 4983C103                	add r9, 3 	 ;for getting to the params
 25519 00012FDF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25520 00012FE3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25521                                  .L_tc_recycle_frame_loop_00e1:
 25522 00012FE6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25523 00012FE9 7410                    	je .L_tc_recycle_frame_done_00e1
 25524 00012FEB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25525 00012FEE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25526 00012FF1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25527 00012FF5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25528 00012FF9 EBEB                    	jmp .L_tc_recycle_frame_loop_00e1
 25529                                  .L_tc_recycle_frame_done_00e1:
 25530 00012FFB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25531 00012FFC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25532 00013000 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25533 00013003 EB0A                    	jmp .L_if_end_0077
 25534                                  .L_if_else_0077:
 25535 00013005 48B8-                   	mov rax, L_constants + 1
 25535 00013007 [0100000000000000] 
 25536                                  .L_if_end_0077:
 25537 0001300F C9                      	leave
 25538 00013010 C22800                  	ret AND_KILL_FRAME(3)
 25539                                  .L_lambda_simple_end_0095:	; new closure is in rax
 25540 00013013 50                      	push rax
 25541 00013014 488B4520                	mov rax, PARAM(0)	; param run
 25542 00013018 8F00                    	pop qword [rax]
 25543 0001301A 48B8-                   	mov rax, sob_void
 25543 0001301C [0000000000000000] 
 25544                                  
 25545 00013024 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25546 00013029 E8B14F0000              	call malloc
 25547 0001302E 50                      	push rax
 25548 0001302F BF08000000              	mov rdi, 8 * 1	; new rib
 25549 00013034 E8A64F0000              	call malloc
 25550 00013039 50                      	push rax
 25551 0001303A BF10000000              	mov rdi, 8 * 2	; extended env
 25552 0001303F E89B4F0000              	call malloc
 25553 00013044 488B7D10                	mov rdi, ENV
 25554 00013048 BE00000000              	mov rsi, 0
 25555 0001304D BA01000000              	mov rdx, 1
 25556                                  .L_lambda_simple_env_loop_0096:	; ext_env[i + 1] <-- env[i]
 25557 00013052 4883FE01                	cmp rsi, 1
 25558 00013056 7410                    	je .L_lambda_simple_env_end_0096
 25559 00013058 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25560 0001305C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25561 00013060 48FFC6                  	inc rsi
 25562 00013063 48FFC2                  	inc rdx
 25563 00013066 EBEA                    	jmp .L_lambda_simple_env_loop_0096
 25564                                  .L_lambda_simple_env_end_0096:
 25565 00013068 5B                      	pop rbx
 25566 00013069 BE00000000              	mov rsi, 0
 25567                                  .L_lambda_simple_params_loop_0096:	; copy params
 25568 0001306E 4883FE01                	cmp rsi, 1
 25569 00013072 740E                    	je .L_lambda_simple_params_end_0096
 25570 00013074 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25571 00013079 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25572 0001307D 48FFC6                  	inc rsi
 25573 00013080 EBEC                    	jmp .L_lambda_simple_params_loop_0096
 25574                                  .L_lambda_simple_params_end_0096:
 25575 00013082 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25576 00013085 4889C3                  	mov rbx, rax
 25577 00013088 58                      	pop rax
 25578 00013089 C60004                  	mov byte [rax], T_closure
 25579 0001308C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25580 00013090 48C74009[9D300100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0096
 25581 00013098 E9B6000000              	jmp .L_lambda_simple_end_0096
 25582                                  .L_lambda_simple_code_0096:	; lambda-simple body
 25583 0001309D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25584 000130A3 740B                    	je .L_lambda_simple_arity_check_ok_0096
 25585 000130A5 FF742410                	push qword [rsp + 8 * 2]
 25586 000130A9 6A01                    	push 1
 25587 000130AB E9E84E0000              	jmp L_error_incorrect_arity_simple
 25588                                  .L_lambda_simple_arity_check_ok_0096:
 25589 000130B0 C8000000                	enter 0, 0
 25590                                  	; preparing a tail-call
 25591                                  	; preparing a non-tail-call
 25592 000130B4 488B4520                	mov rax, PARAM(0)	; param str
 25593 000130B8 50                      	push rax
 25594 000130B9 6A01                    	push 1	; arg count
 25595 000130BB 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 25596 000130C3 803805                  	cmp byte [rax], T_undefined
 25597 000130C6 0F84E64D0000            	je L_error_fvar_undefined
 25598 000130CC 803804                  	cmp byte [rax], T_closure
 25599 000130CF 0F85614E0000            	jne L_error_non_closure
 25600 000130D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25601 000130D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25602 000130DB 50                      	push rax
 25603 000130DC 48B8-                   	mov rax, L_constants + 2135
 25603 000130DE [5708000000000000] 
 25604 000130E6 50                      	push rax
 25605 000130E7 488B4520                	mov rax, PARAM(0)	; param str
 25606 000130EB 50                      	push rax
 25607 000130EC 6A03                    	push 3	; arg count
 25608 000130EE 488B4510                	mov rax, ENV
 25609 000130F2 488B00                  	mov rax, qword [rax + 8 * 0]
 25610 000130F5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25611 000130F8 488B00                  	mov rax, qword [rax]
 25612 000130FB 803804                  	cmp byte [rax], T_closure
 25613 000130FE 0F85324E0000            	jne L_error_non_closure
 25614 00013104 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25615 00013107 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25616 0001310A FF7500                  	push qword[rbp]
 25617 0001310D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25618 00013110 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25619 00013114 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25620 00013118 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25621 0001311C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25622 0001311F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25623 00013122 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25624 00013127 4983C103                	add r9, 3 	 ;for getting to the params
 25625 0001312B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25626 0001312F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25627                                  .L_tc_recycle_frame_loop_00e2:
 25628 00013132 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25629 00013135 7410                    	je .L_tc_recycle_frame_done_00e2
 25630 00013137 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25631 0001313A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25632 0001313D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25633 00013141 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25634 00013145 EBEB                    	jmp .L_tc_recycle_frame_loop_00e2
 25635                                  .L_tc_recycle_frame_done_00e2:
 25636 00013147 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25637 00013148 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25638 0001314C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25639 0001314F C9                      	leave
 25640 00013150 C21800                  	ret AND_KILL_FRAME(1)
 25641                                  .L_lambda_simple_end_0096:	; new closure is in rax
 25642 00013153 C9                      	leave
 25643 00013154 C21800                  	ret AND_KILL_FRAME(1)
 25644                                  .L_lambda_simple_end_0094:	; new closure is in rax
 25645 00013157 803804                  	cmp byte [rax], T_closure
 25646 0001315A 0F85D64D0000            	jne L_error_non_closure
 25647 00013160 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25648 00013163 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25649 00013166 48890425[AC150000]      	mov qword [free_var_119], rax
 25650 0001316E 48B8-                   	mov rax, sob_void
 25650 00013170 [0000000000000000] 
 25651                                  
 25652 00013178 4889C7                  	mov rdi, rax
 25653 0001317B E8B4500000              	call print_sexpr_if_not_void
 25654                                  	; preparing a non-tail-call
 25655 00013180 48B8-                   	mov rax, L_constants + 1993
 25655 00013182 [C907000000000000] 
 25656 0001318A 50                      	push rax
 25657 0001318B 6A01                    	push 1	; arg count
 25658 0001318D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25659 00013192 E8484E0000              	call malloc
 25660 00013197 50                      	push rax
 25661 00013198 BF00000000              	mov rdi, 8 * 0	; new rib
 25662 0001319D E83D4E0000              	call malloc
 25663 000131A2 50                      	push rax
 25664 000131A3 BF08000000              	mov rdi, 8 * 1	; extended env
 25665 000131A8 E8324E0000              	call malloc
 25666 000131AD 488B7D10                	mov rdi, ENV
 25667 000131B1 BE00000000              	mov rsi, 0
 25668 000131B6 BA01000000              	mov rdx, 1
 25669                                  .L_lambda_simple_env_loop_0097:	; ext_env[i + 1] <-- env[i]
 25670 000131BB 4883FE00                	cmp rsi, 0
 25671 000131BF 7410                    	je .L_lambda_simple_env_end_0097
 25672 000131C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25673 000131C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25674 000131C9 48FFC6                  	inc rsi
 25675 000131CC 48FFC2                  	inc rdx
 25676 000131CF EBEA                    	jmp .L_lambda_simple_env_loop_0097
 25677                                  .L_lambda_simple_env_end_0097:
 25678 000131D1 5B                      	pop rbx
 25679 000131D2 BE00000000              	mov rsi, 0
 25680                                  .L_lambda_simple_params_loop_0097:	; copy params
 25681 000131D7 4883FE00                	cmp rsi, 0
 25682 000131DB 740E                    	je .L_lambda_simple_params_end_0097
 25683 000131DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25684 000131E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25685 000131E6 48FFC6                  	inc rsi
 25686 000131E9 EBEC                    	jmp .L_lambda_simple_params_loop_0097
 25687                                  .L_lambda_simple_params_end_0097:
 25688 000131EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25689 000131EE 4889C3                  	mov rbx, rax
 25690 000131F1 58                      	pop rax
 25691 000131F2 C60004                  	mov byte [rax], T_closure
 25692 000131F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25693 000131F9 48C74009[06320100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0097
 25694 00013201 E942030000              	jmp .L_lambda_simple_end_0097
 25695                                  .L_lambda_simple_code_0097:	; lambda-simple body
 25696 00013206 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25697 0001320C 740B                    	je .L_lambda_simple_arity_check_ok_0097
 25698 0001320E FF742410                	push qword [rsp + 8 * 2]
 25699 00013212 6A01                    	push 1
 25700 00013214 E97F4D0000              	jmp L_error_incorrect_arity_simple
 25701                                  .L_lambda_simple_arity_check_ok_0097:
 25702 00013219 C8000000                	enter 0, 0
 25703 0001321D BF08000000              	mov rdi, 8*1
 25704 00013222 E8B84D0000              	call malloc
 25705 00013227 488B5D20                	mov rbx, PARAM(0)
 25706 0001322B 488918                  	mov qword[rax], rbx
 25707 0001322E 48894520                	mov PARAM(0), rax
 25708 00013232 48B8-                   	mov rax, sob_void
 25708 00013234 [0000000000000000] 
 25709                                  
 25710 0001323C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25711 00013241 E8994D0000              	call malloc
 25712 00013246 50                      	push rax
 25713 00013247 BF08000000              	mov rdi, 8 * 1	; new rib
 25714 0001324C E88E4D0000              	call malloc
 25715 00013251 50                      	push rax
 25716 00013252 BF10000000              	mov rdi, 8 * 2	; extended env
 25717 00013257 E8834D0000              	call malloc
 25718 0001325C 488B7D10                	mov rdi, ENV
 25719 00013260 BE00000000              	mov rsi, 0
 25720 00013265 BA01000000              	mov rdx, 1
 25721                                  .L_lambda_simple_env_loop_0098:	; ext_env[i + 1] <-- env[i]
 25722 0001326A 4883FE01                	cmp rsi, 1
 25723 0001326E 7410                    	je .L_lambda_simple_env_end_0098
 25724 00013270 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25725 00013274 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25726 00013278 48FFC6                  	inc rsi
 25727 0001327B 48FFC2                  	inc rdx
 25728 0001327E EBEA                    	jmp .L_lambda_simple_env_loop_0098
 25729                                  .L_lambda_simple_env_end_0098:
 25730 00013280 5B                      	pop rbx
 25731 00013281 BE00000000              	mov rsi, 0
 25732                                  .L_lambda_simple_params_loop_0098:	; copy params
 25733 00013286 4883FE01                	cmp rsi, 1
 25734 0001328A 740E                    	je .L_lambda_simple_params_end_0098
 25735 0001328C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25736 00013291 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25737 00013295 48FFC6                  	inc rsi
 25738 00013298 EBEC                    	jmp .L_lambda_simple_params_loop_0098
 25739                                  .L_lambda_simple_params_end_0098:
 25740 0001329A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25741 0001329D 4889C3                  	mov rbx, rax
 25742 000132A0 58                      	pop rax
 25743 000132A1 C60004                  	mov byte [rax], T_closure
 25744 000132A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25745 000132A8 48C74009[B5320100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0098
 25746 000132B0 E94F010000              	jmp .L_lambda_simple_end_0098
 25747                                  .L_lambda_simple_code_0098:	; lambda-simple body
 25748 000132B5 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25749 000132BB 740B                    	je .L_lambda_simple_arity_check_ok_0098
 25750 000132BD FF742410                	push qword [rsp + 8 * 2]
 25751 000132C1 6A03                    	push 3
 25752 000132C3 E9D04C0000              	jmp L_error_incorrect_arity_simple
 25753                                  .L_lambda_simple_arity_check_ok_0098:
 25754 000132C8 C8000000                	enter 0, 0
 25755                                  	; preparing a non-tail-call
 25756 000132CC 488B4530                	mov rax, PARAM(2)	; param n
 25757 000132D0 50                      	push rax
 25758 000132D1 488B4528                	mov rax, PARAM(1)	; param i
 25759 000132D5 50                      	push rax
 25760 000132D6 6A02                    	push 2	; arg count
 25761 000132D8 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 25762 000132E0 803805                  	cmp byte [rax], T_undefined
 25763 000132E3 0F84C94B0000            	je L_error_fvar_undefined
 25764 000132E9 803804                  	cmp byte [rax], T_closure
 25765 000132EC 0F85444C0000            	jne L_error_non_closure
 25766 000132F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25767 000132F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25768 000132F8 483D[02000000]          	cmp rax, sob_boolean_false
 25769 000132FE 0F84F2000000            	je .L_if_else_0078
 25770                                  	; preparing a tail-call
 25771                                  	; preparing a non-tail-call
 25772 00013304 488B4530                	mov rax, PARAM(2)	; param n
 25773 00013308 50                      	push rax
 25774                                  	; preparing a non-tail-call
 25775 00013309 48B8-                   	mov rax, L_constants + 2270
 25775 0001330B [DE08000000000000] 
 25776 00013313 50                      	push rax
 25777 00013314 488B4528                	mov rax, PARAM(1)	; param i
 25778 00013318 50                      	push rax
 25779 00013319 6A02                    	push 2	; arg count
 25780 0001331B 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 25781 00013323 803805                  	cmp byte [rax], T_undefined
 25782 00013326 0F84864B0000            	je L_error_fvar_undefined
 25783 0001332C 803804                  	cmp byte [rax], T_closure
 25784 0001332F 0F85014C0000            	jne L_error_non_closure
 25785 00013335 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25786 00013338 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25787 0001333B 50                      	push rax
 25788 0001333C 488B4520                	mov rax, PARAM(0)	; param v
 25789 00013340 50                      	push rax
 25790 00013341 6A03                    	push 3	; arg count
 25791 00013343 488B4510                	mov rax, ENV
 25792 00013347 488B00                  	mov rax, qword [rax + 8 * 0]
 25793 0001334A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25794 0001334D 488B00                  	mov rax, qword [rax]
 25795 00013350 803804                  	cmp byte [rax], T_closure
 25796 00013353 0F85DD4B0000            	jne L_error_non_closure
 25797 00013359 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25798 0001335C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25799 0001335F 50                      	push rax
 25800                                  	; preparing a non-tail-call
 25801 00013360 488B4528                	mov rax, PARAM(1)	; param i
 25802 00013364 50                      	push rax
 25803 00013365 488B4520                	mov rax, PARAM(0)	; param v
 25804 00013369 50                      	push rax
 25805 0001336A 6A02                    	push 2	; arg count
 25806 0001336C 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 25807 00013374 803805                  	cmp byte [rax], T_undefined
 25808 00013377 0F84354B0000            	je L_error_fvar_undefined
 25809 0001337D 803804                  	cmp byte [rax], T_closure
 25810 00013380 0F85B04B0000            	jne L_error_non_closure
 25811 00013386 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25812 00013389 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25813 0001338C 50                      	push rax
 25814 0001338D 6A02                    	push 2	; arg count
 25815 0001338F 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
 25816 00013397 803805                  	cmp byte [rax], T_undefined
 25817 0001339A 0F84124B0000            	je L_error_fvar_undefined
 25818 000133A0 803804                  	cmp byte [rax], T_closure
 25819 000133A3 0F858D4B0000            	jne L_error_non_closure
 25820 000133A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25821 000133AC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25822 000133AF FF7500                  	push qword[rbp]
 25823 000133B2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25824 000133B5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25825 000133B9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25826 000133BD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25827 000133C1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25828 000133C4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25829 000133C7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25830 000133CC 4983C103                	add r9, 3 	 ;for getting to the params
 25831 000133D0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25832 000133D4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25833                                  .L_tc_recycle_frame_loop_00e3:
 25834 000133D7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25835 000133DA 7410                    	je .L_tc_recycle_frame_done_00e3
 25836 000133DC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25837 000133DF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25838 000133E2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25839 000133E6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25840 000133EA EBEB                    	jmp .L_tc_recycle_frame_loop_00e3
 25841                                  .L_tc_recycle_frame_done_00e3:
 25842 000133EC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25843 000133ED 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25844 000133F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25845 000133F4 EB0A                    	jmp .L_if_end_0078
 25846                                  .L_if_else_0078:
 25847 000133F6 48B8-                   	mov rax, L_constants + 1
 25847 000133F8 [0100000000000000] 
 25848                                  .L_if_end_0078:
 25849 00013400 C9                      	leave
 25850 00013401 C22800                  	ret AND_KILL_FRAME(3)
 25851                                  .L_lambda_simple_end_0098:	; new closure is in rax
 25852 00013404 50                      	push rax
 25853 00013405 488B4520                	mov rax, PARAM(0)	; param run
 25854 00013409 8F00                    	pop qword [rax]
 25855 0001340B 48B8-                   	mov rax, sob_void
 25855 0001340D [0000000000000000] 
 25856                                  
 25857 00013415 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25858 0001341A E8C04B0000              	call malloc
 25859 0001341F 50                      	push rax
 25860 00013420 BF08000000              	mov rdi, 8 * 1	; new rib
 25861 00013425 E8B54B0000              	call malloc
 25862 0001342A 50                      	push rax
 25863 0001342B BF10000000              	mov rdi, 8 * 2	; extended env
 25864 00013430 E8AA4B0000              	call malloc
 25865 00013435 488B7D10                	mov rdi, ENV
 25866 00013439 BE00000000              	mov rsi, 0
 25867 0001343E BA01000000              	mov rdx, 1
 25868                                  .L_lambda_simple_env_loop_0099:	; ext_env[i + 1] <-- env[i]
 25869 00013443 4883FE01                	cmp rsi, 1
 25870 00013447 7410                    	je .L_lambda_simple_env_end_0099
 25871 00013449 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25872 0001344D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25873 00013451 48FFC6                  	inc rsi
 25874 00013454 48FFC2                  	inc rdx
 25875 00013457 EBEA                    	jmp .L_lambda_simple_env_loop_0099
 25876                                  .L_lambda_simple_env_end_0099:
 25877 00013459 5B                      	pop rbx
 25878 0001345A BE00000000              	mov rsi, 0
 25879                                  .L_lambda_simple_params_loop_0099:	; copy params
 25880 0001345F 4883FE01                	cmp rsi, 1
 25881 00013463 740E                    	je .L_lambda_simple_params_end_0099
 25882 00013465 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25883 0001346A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25884 0001346E 48FFC6                  	inc rsi
 25885 00013471 EBEC                    	jmp .L_lambda_simple_params_loop_0099
 25886                                  .L_lambda_simple_params_end_0099:
 25887 00013473 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25888 00013476 4889C3                  	mov rbx, rax
 25889 00013479 58                      	pop rax
 25890 0001347A C60004                  	mov byte [rax], T_closure
 25891 0001347D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25892 00013481 48C74009[8E340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0099
 25893 00013489 E9B6000000              	jmp .L_lambda_simple_end_0099
 25894                                  .L_lambda_simple_code_0099:	; lambda-simple body
 25895 0001348E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25896 00013494 740B                    	je .L_lambda_simple_arity_check_ok_0099
 25897 00013496 FF742410                	push qword [rsp + 8 * 2]
 25898 0001349A 6A01                    	push 1
 25899 0001349C E9F74A0000              	jmp L_error_incorrect_arity_simple
 25900                                  .L_lambda_simple_arity_check_ok_0099:
 25901 000134A1 C8000000                	enter 0, 0
 25902                                  	; preparing a tail-call
 25903                                  	; preparing a non-tail-call
 25904 000134A5 488B4520                	mov rax, PARAM(0)	; param v
 25905 000134A9 50                      	push rax
 25906 000134AA 6A01                    	push 1	; arg count
 25907 000134AC 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 25908 000134B4 803805                  	cmp byte [rax], T_undefined
 25909 000134B7 0F84F5490000            	je L_error_fvar_undefined
 25910 000134BD 803804                  	cmp byte [rax], T_closure
 25911 000134C0 0F85704A0000            	jne L_error_non_closure
 25912 000134C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25913 000134C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25914 000134CC 50                      	push rax
 25915 000134CD 48B8-                   	mov rax, L_constants + 2135
 25915 000134CF [5708000000000000] 
 25916 000134D7 50                      	push rax
 25917 000134D8 488B4520                	mov rax, PARAM(0)	; param v
 25918 000134DC 50                      	push rax
 25919 000134DD 6A03                    	push 3	; arg count
 25920 000134DF 488B4510                	mov rax, ENV
 25921 000134E3 488B00                  	mov rax, qword [rax + 8 * 0]
 25922 000134E6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25923 000134E9 488B00                  	mov rax, qword [rax]
 25924 000134EC 803804                  	cmp byte [rax], T_closure
 25925 000134EF 0F85414A0000            	jne L_error_non_closure
 25926 000134F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25927 000134F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25928 000134FB FF7500                  	push qword[rbp]
 25929 000134FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25930 00013501 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25931 00013505 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25932 00013509 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25933 0001350D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25934 00013510 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25935 00013513 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25936 00013518 4983C103                	add r9, 3 	 ;for getting to the params
 25937 0001351C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25938 00013520 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25939                                  .L_tc_recycle_frame_loop_00e4:
 25940 00013523 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25941 00013526 7410                    	je .L_tc_recycle_frame_done_00e4
 25942 00013528 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25943 0001352B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25944 0001352E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25945 00013532 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25946 00013536 EBEB                    	jmp .L_tc_recycle_frame_loop_00e4
 25947                                  .L_tc_recycle_frame_done_00e4:
 25948 00013538 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25949 00013539 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25950 0001353D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25951 00013540 C9                      	leave
 25952 00013541 C21800                  	ret AND_KILL_FRAME(1)
 25953                                  .L_lambda_simple_end_0099:	; new closure is in rax
 25954 00013544 C9                      	leave
 25955 00013545 C21800                  	ret AND_KILL_FRAME(1)
 25956                                  .L_lambda_simple_end_0097:	; new closure is in rax
 25957 00013548 803804                  	cmp byte [rax], T_closure
 25958 0001354B 0F85E5490000            	jne L_error_non_closure
 25959 00013551 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25960 00013554 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25961 00013557 48890425[22170000]      	mov qword [free_var_141], rax
 25962 0001355F 48B8-                   	mov rax, sob_void
 25962 00013561 [0000000000000000] 
 25963                                  
 25964 00013569 4889C7                  	mov rdi, rax
 25965 0001356C E8C34C0000              	call print_sexpr_if_not_void
 25966 00013571 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25967 00013576 E8644A0000              	call malloc
 25968 0001357B 50                      	push rax
 25969 0001357C BF00000000              	mov rdi, 8 * 0	; new rib
 25970 00013581 E8594A0000              	call malloc
 25971 00013586 50                      	push rax
 25972 00013587 BF08000000              	mov rdi, 8 * 1	; extended env
 25973 0001358C E84E4A0000              	call malloc
 25974 00013591 488B7D10                	mov rdi, ENV
 25975 00013595 BE00000000              	mov rsi, 0
 25976 0001359A BA01000000              	mov rdx, 1
 25977                                  .L_lambda_simple_env_loop_009a:	; ext_env[i + 1] <-- env[i]
 25978 0001359F 4883FE00                	cmp rsi, 0
 25979 000135A3 7410                    	je .L_lambda_simple_env_end_009a
 25980 000135A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25981 000135A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25982 000135AD 48FFC6                  	inc rsi
 25983 000135B0 48FFC2                  	inc rdx
 25984 000135B3 EBEA                    	jmp .L_lambda_simple_env_loop_009a
 25985                                  .L_lambda_simple_env_end_009a:
 25986 000135B5 5B                      	pop rbx
 25987 000135B6 BE00000000              	mov rsi, 0
 25988                                  .L_lambda_simple_params_loop_009a:	; copy params
 25989 000135BB 4883FE00                	cmp rsi, 0
 25990 000135BF 740E                    	je .L_lambda_simple_params_end_009a
 25991 000135C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25992 000135C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25993 000135CA 48FFC6                  	inc rsi
 25994 000135CD EBEC                    	jmp .L_lambda_simple_params_loop_009a
 25995                                  .L_lambda_simple_params_end_009a:
 25996 000135CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25997 000135D2 4889C3                  	mov rbx, rax
 25998 000135D5 58                      	pop rax
 25999 000135D6 C60004                  	mov byte [rax], T_closure
 26000 000135D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26001 000135DD 48C74009[EA350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009a
 26002 000135E5 E9AA000000              	jmp .L_lambda_simple_end_009a
 26003                                  .L_lambda_simple_code_009a:	; lambda-simple body
 26004 000135EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26005 000135F0 740B                    	je .L_lambda_simple_arity_check_ok_009a
 26006 000135F2 FF742410                	push qword [rsp + 8 * 2]
 26007 000135F6 6A01                    	push 1
 26008 000135F8 E99B490000              	jmp L_error_incorrect_arity_simple
 26009                                  .L_lambda_simple_arity_check_ok_009a:
 26010 000135FD C8000000                	enter 0, 0
 26011                                  	; preparing a tail-call
 26012 00013601 488B4520                	mov rax, PARAM(0)	; param n
 26013 00013605 50                      	push rax
 26014                                  	; preparing a non-tail-call
 26015 00013606 6A00                    	push 0	; arg count
 26016 00013608 488B0425[00170000]      	mov rax, qword [free_var_139]	; free var trng
 26017 00013610 803805                  	cmp byte [rax], T_undefined
 26018 00013613 0F8499480000            	je L_error_fvar_undefined
 26019 00013619 803804                  	cmp byte [rax], T_closure
 26020 0001361C 0F8514490000            	jne L_error_non_closure
 26021 00013622 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26022 00013625 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26023 00013628 50                      	push rax
 26024 00013629 6A02                    	push 2	; arg count
 26025 0001362B 488B0425[8A150000]      	mov rax, qword [free_var_117]	; free var remainder
 26026 00013633 803805                  	cmp byte [rax], T_undefined
 26027 00013636 0F8476480000            	je L_error_fvar_undefined
 26028 0001363C 803804                  	cmp byte [rax], T_closure
 26029 0001363F 0F85F1480000            	jne L_error_non_closure
 26030 00013645 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26031 00013648 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26032 0001364B FF7500                  	push qword[rbp]
 26033 0001364E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26034 00013651 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26035 00013655 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26036 00013659 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26037 0001365D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26038 00013660 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26039 00013663 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26040 00013668 4983C103                	add r9, 3 	 ;for getting to the params
 26041 0001366C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26042 00013670 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26043                                  .L_tc_recycle_frame_loop_00e5:
 26044 00013673 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26045 00013676 7410                    	je .L_tc_recycle_frame_done_00e5
 26046 00013678 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26047 0001367B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26048 0001367E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26049 00013682 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26050 00013686 EBEB                    	jmp .L_tc_recycle_frame_loop_00e5
 26051                                  .L_tc_recycle_frame_done_00e5:
 26052 00013688 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26053 00013689 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26054 0001368D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26055 00013690 C9                      	leave
 26056 00013691 C21800                  	ret AND_KILL_FRAME(1)
 26057                                  .L_lambda_simple_end_009a:	; new closure is in rax
 26058 00013694 48890425[46150000]      	mov qword [free_var_113], rax
 26059 0001369C 48B8-                   	mov rax, sob_void
 26059 0001369E [0000000000000000] 
 26060                                  
 26061 000136A6 4889C7                  	mov rdi, rax
 26062 000136A9 E8864B0000              	call print_sexpr_if_not_void
 26063 000136AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26064 000136B3 E827490000              	call malloc
 26065 000136B8 50                      	push rax
 26066 000136B9 BF00000000              	mov rdi, 8 * 0	; new rib
 26067 000136BE E81C490000              	call malloc
 26068 000136C3 50                      	push rax
 26069 000136C4 BF08000000              	mov rdi, 8 * 1	; extended env
 26070 000136C9 E811490000              	call malloc
 26071 000136CE 488B7D10                	mov rdi, ENV
 26072 000136D2 BE00000000              	mov rsi, 0
 26073 000136D7 BA01000000              	mov rdx, 1
 26074                                  .L_lambda_simple_env_loop_009b:	; ext_env[i + 1] <-- env[i]
 26075 000136DC 4883FE00                	cmp rsi, 0
 26076 000136E0 7410                    	je .L_lambda_simple_env_end_009b
 26077 000136E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26078 000136E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26079 000136EA 48FFC6                  	inc rsi
 26080 000136ED 48FFC2                  	inc rdx
 26081 000136F0 EBEA                    	jmp .L_lambda_simple_env_loop_009b
 26082                                  .L_lambda_simple_env_end_009b:
 26083 000136F2 5B                      	pop rbx
 26084 000136F3 BE00000000              	mov rsi, 0
 26085                                  .L_lambda_simple_params_loop_009b:	; copy params
 26086 000136F8 4883FE00                	cmp rsi, 0
 26087 000136FC 740E                    	je .L_lambda_simple_params_end_009b
 26088 000136FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26089 00013703 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26090 00013707 48FFC6                  	inc rsi
 26091 0001370A EBEC                    	jmp .L_lambda_simple_params_loop_009b
 26092                                  .L_lambda_simple_params_end_009b:
 26093 0001370C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26094 0001370F 4889C3                  	mov rbx, rax
 26095 00013712 58                      	pop rax
 26096 00013713 C60004                  	mov byte [rax], T_closure
 26097 00013716 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26098 0001371A 48C74009[27370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009b
 26099 00013722 E992000000              	jmp .L_lambda_simple_end_009b
 26100                                  .L_lambda_simple_code_009b:	; lambda-simple body
 26101 00013727 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26102 0001372D 740B                    	je .L_lambda_simple_arity_check_ok_009b
 26103 0001372F FF742410                	push qword [rsp + 8 * 2]
 26104 00013733 6A01                    	push 1
 26105 00013735 E95E480000              	jmp L_error_incorrect_arity_simple
 26106                                  .L_lambda_simple_arity_check_ok_009b:
 26107 0001373A C8000000                	enter 0, 0
 26108                                  	; preparing a tail-call
 26109 0001373E 488B4520                	mov rax, PARAM(0)	; param x
 26110 00013742 50                      	push rax
 26111 00013743 48B8-                   	mov rax, L_constants + 2135
 26111 00013745 [5708000000000000] 
 26112 0001374D 50                      	push rax
 26113 0001374E 6A02                    	push 2	; arg count
 26114 00013750 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 26115 00013758 803805                  	cmp byte [rax], T_undefined
 26116 0001375B 0F8451470000            	je L_error_fvar_undefined
 26117 00013761 803804                  	cmp byte [rax], T_closure
 26118 00013764 0F85CC470000            	jne L_error_non_closure
 26119 0001376A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26120 0001376D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26121 00013770 FF7500                  	push qword[rbp]
 26122 00013773 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26123 00013776 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26124 0001377A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26125 0001377E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26126 00013782 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26127 00013785 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26128 00013788 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26129 0001378D 4983C103                	add r9, 3 	 ;for getting to the params
 26130 00013791 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26131 00013795 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26132                                  .L_tc_recycle_frame_loop_00e6:
 26133 00013798 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26134 0001379B 7410                    	je .L_tc_recycle_frame_done_00e6
 26135 0001379D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26136 000137A0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26137 000137A3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26138 000137A7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26139 000137AB EBEB                    	jmp .L_tc_recycle_frame_loop_00e6
 26140                                  .L_tc_recycle_frame_done_00e6:
 26141 000137AD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26142 000137AE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26143 000137B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26144 000137B5 C9                      	leave
 26145 000137B6 C21800                  	ret AND_KILL_FRAME(1)
 26146                                  .L_lambda_simple_end_009b:	; new closure is in rax
 26147 000137B9 48890425[35150000]      	mov qword [free_var_112], rax
 26148 000137C1 48B8-                   	mov rax, sob_void
 26148 000137C3 [0000000000000000] 
 26149                                  
 26150 000137CB 4889C7                  	mov rdi, rax
 26151 000137CE E8614A0000              	call print_sexpr_if_not_void
 26152 000137D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26153 000137D8 E802480000              	call malloc
 26154 000137DD 50                      	push rax
 26155 000137DE BF00000000              	mov rdi, 8 * 0	; new rib
 26156 000137E3 E8F7470000              	call malloc
 26157 000137E8 50                      	push rax
 26158 000137E9 BF08000000              	mov rdi, 8 * 1	; extended env
 26159 000137EE E8EC470000              	call malloc
 26160 000137F3 488B7D10                	mov rdi, ENV
 26161 000137F7 BE00000000              	mov rsi, 0
 26162 000137FC BA01000000              	mov rdx, 1
 26163                                  .L_lambda_simple_env_loop_009c:	; ext_env[i + 1] <-- env[i]
 26164 00013801 4883FE00                	cmp rsi, 0
 26165 00013805 7410                    	je .L_lambda_simple_env_end_009c
 26166 00013807 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26167 0001380B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26168 0001380F 48FFC6                  	inc rsi
 26169 00013812 48FFC2                  	inc rdx
 26170 00013815 EBEA                    	jmp .L_lambda_simple_env_loop_009c
 26171                                  .L_lambda_simple_env_end_009c:
 26172 00013817 5B                      	pop rbx
 26173 00013818 BE00000000              	mov rsi, 0
 26174                                  .L_lambda_simple_params_loop_009c:	; copy params
 26175 0001381D 4883FE00                	cmp rsi, 0
 26176 00013821 740E                    	je .L_lambda_simple_params_end_009c
 26177 00013823 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26178 00013828 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26179 0001382C 48FFC6                  	inc rsi
 26180 0001382F EBEC                    	jmp .L_lambda_simple_params_loop_009c
 26181                                  .L_lambda_simple_params_end_009c:
 26182 00013831 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26183 00013834 4889C3                  	mov rbx, rax
 26184 00013837 58                      	pop rax
 26185 00013838 C60004                  	mov byte [rax], T_closure
 26186 0001383B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26187 0001383F 48C74009[4C380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009c
 26188 00013847 E992000000              	jmp .L_lambda_simple_end_009c
 26189                                  .L_lambda_simple_code_009c:	; lambda-simple body
 26190 0001384C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26191 00013852 740B                    	je .L_lambda_simple_arity_check_ok_009c
 26192 00013854 FF742410                	push qword [rsp + 8 * 2]
 26193 00013858 6A01                    	push 1
 26194 0001385A E939470000              	jmp L_error_incorrect_arity_simple
 26195                                  .L_lambda_simple_arity_check_ok_009c:
 26196 0001385F C8000000                	enter 0, 0
 26197                                  	; preparing a tail-call
 26198 00013863 48B8-                   	mov rax, L_constants + 2135
 26198 00013865 [5708000000000000] 
 26199 0001386D 50                      	push rax
 26200 0001386E 488B4520                	mov rax, PARAM(0)	; param x
 26201 00013872 50                      	push rax
 26202 00013873 6A02                    	push 2	; arg count
 26203 00013875 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 26204 0001387D 803805                  	cmp byte [rax], T_undefined
 26205 00013880 0F842C460000            	je L_error_fvar_undefined
 26206 00013886 803804                  	cmp byte [rax], T_closure
 26207 00013889 0F85A7460000            	jne L_error_non_closure
 26208 0001388F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26209 00013892 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26210 00013895 FF7500                  	push qword[rbp]
 26211 00013898 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26212 0001389B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26213 0001389F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26214 000138A3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26215 000138A7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26216 000138AA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26217 000138AD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26218 000138B2 4983C103                	add r9, 3 	 ;for getting to the params
 26219 000138B6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26220 000138BA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26221                                  .L_tc_recycle_frame_loop_00e7:
 26222 000138BD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26223 000138C0 7410                    	je .L_tc_recycle_frame_done_00e7
 26224 000138C2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26225 000138C5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26226 000138C8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26227 000138CC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26228 000138D0 EBEB                    	jmp .L_tc_recycle_frame_loop_00e7
 26229                                  .L_tc_recycle_frame_done_00e7:
 26230 000138D2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26231 000138D3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26232 000138D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26233 000138DA C9                      	leave
 26234 000138DB C21800                  	ret AND_KILL_FRAME(1)
 26235                                  .L_lambda_simple_end_009c:	; new closure is in rax
 26236 000138DE 48890425[AD140000]      	mov qword [free_var_104], rax
 26237 000138E6 48B8-                   	mov rax, sob_void
 26237 000138E8 [0000000000000000] 
 26238                                  
 26239 000138F0 4889C7                  	mov rdi, rax
 26240 000138F3 E83C490000              	call print_sexpr_if_not_void
 26241 000138F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26242 000138FD E8DD460000              	call malloc
 26243 00013902 50                      	push rax
 26244 00013903 BF00000000              	mov rdi, 8 * 0	; new rib
 26245 00013908 E8D2460000              	call malloc
 26246 0001390D 50                      	push rax
 26247 0001390E BF08000000              	mov rdi, 8 * 1	; extended env
 26248 00013913 E8C7460000              	call malloc
 26249 00013918 488B7D10                	mov rdi, ENV
 26250 0001391C BE00000000              	mov rsi, 0
 26251 00013921 BA01000000              	mov rdx, 1
 26252                                  .L_lambda_simple_env_loop_009d:	; ext_env[i + 1] <-- env[i]
 26253 00013926 4883FE00                	cmp rsi, 0
 26254 0001392A 7410                    	je .L_lambda_simple_env_end_009d
 26255 0001392C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26256 00013930 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26257 00013934 48FFC6                  	inc rsi
 26258 00013937 48FFC2                  	inc rdx
 26259 0001393A EBEA                    	jmp .L_lambda_simple_env_loop_009d
 26260                                  .L_lambda_simple_env_end_009d:
 26261 0001393C 5B                      	pop rbx
 26262 0001393D BE00000000              	mov rsi, 0
 26263                                  .L_lambda_simple_params_loop_009d:	; copy params
 26264 00013942 4883FE00                	cmp rsi, 0
 26265 00013946 740E                    	je .L_lambda_simple_params_end_009d
 26266 00013948 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26267 0001394D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26268 00013951 48FFC6                  	inc rsi
 26269 00013954 EBEC                    	jmp .L_lambda_simple_params_loop_009d
 26270                                  .L_lambda_simple_params_end_009d:
 26271 00013956 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26272 00013959 4889C3                  	mov rbx, rax
 26273 0001395C 58                      	pop rax
 26274 0001395D C60004                  	mov byte [rax], T_closure
 26275 00013960 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26276 00013964 48C74009[71390100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009d
 26277 0001396C E9B5000000              	jmp .L_lambda_simple_end_009d
 26278                                  .L_lambda_simple_code_009d:	; lambda-simple body
 26279 00013971 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26280 00013977 740B                    	je .L_lambda_simple_arity_check_ok_009d
 26281 00013979 FF742410                	push qword [rsp + 8 * 2]
 26282 0001397D 6A01                    	push 1
 26283 0001397F E914460000              	jmp L_error_incorrect_arity_simple
 26284                                  .L_lambda_simple_arity_check_ok_009d:
 26285 00013984 C8000000                	enter 0, 0
 26286                                  	; preparing a tail-call
 26287                                  	; preparing a non-tail-call
 26288 00013988 48B8-                   	mov rax, L_constants + 3190
 26288 0001398A [760C000000000000] 
 26289 00013992 50                      	push rax
 26290 00013993 488B4520                	mov rax, PARAM(0)	; param n
 26291 00013997 50                      	push rax
 26292 00013998 6A02                    	push 2	; arg count
 26293 0001399A 488B0425[8A150000]      	mov rax, qword [free_var_117]	; free var remainder
 26294 000139A2 803805                  	cmp byte [rax], T_undefined
 26295 000139A5 0F8407450000            	je L_error_fvar_undefined
 26296 000139AB 803804                  	cmp byte [rax], T_closure
 26297 000139AE 0F8582450000            	jne L_error_non_closure
 26298 000139B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26299 000139B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26300 000139BA 50                      	push rax
 26301 000139BB 6A01                    	push 1	; arg count
 26302 000139BD 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 26303 000139C5 803805                  	cmp byte [rax], T_undefined
 26304 000139C8 0F84E4440000            	je L_error_fvar_undefined
 26305 000139CE 803804                  	cmp byte [rax], T_closure
 26306 000139D1 0F855F450000            	jne L_error_non_closure
 26307 000139D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26308 000139DA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26309 000139DD FF7500                  	push qword[rbp]
 26310 000139E0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26311 000139E3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26312 000139E7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26313 000139EB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26314 000139EF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26315 000139F2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26316 000139F5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26317 000139FA 4983C103                	add r9, 3 	 ;for getting to the params
 26318 000139FE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26319 00013A02 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26320                                  .L_tc_recycle_frame_loop_00e8:
 26321 00013A05 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26322 00013A08 7410                    	je .L_tc_recycle_frame_done_00e8
 26323 00013A0A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26324 00013A0D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26325 00013A10 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26326 00013A14 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26327 00013A18 EBEB                    	jmp .L_tc_recycle_frame_loop_00e8
 26328                                  .L_tc_recycle_frame_done_00e8:
 26329 00013A1A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26330 00013A1B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26331 00013A1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26332 00013A22 C9                      	leave
 26333 00013A23 C21800                  	ret AND_KILL_FRAME(1)
 26334                                  .L_lambda_simple_end_009d:	; new closure is in rax
 26335 00013A26 48890425[48130000]      	mov qword [free_var_83], rax
 26336 00013A2E 48B8-                   	mov rax, sob_void
 26336 00013A30 [0000000000000000] 
 26337                                  
 26338 00013A38 4889C7                  	mov rdi, rax
 26339 00013A3B E8F4470000              	call print_sexpr_if_not_void
 26340 00013A40 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26341 00013A45 E895450000              	call malloc
 26342 00013A4A 50                      	push rax
 26343 00013A4B BF00000000              	mov rdi, 8 * 0	; new rib
 26344 00013A50 E88A450000              	call malloc
 26345 00013A55 50                      	push rax
 26346 00013A56 BF08000000              	mov rdi, 8 * 1	; extended env
 26347 00013A5B E87F450000              	call malloc
 26348 00013A60 488B7D10                	mov rdi, ENV
 26349 00013A64 BE00000000              	mov rsi, 0
 26350 00013A69 BA01000000              	mov rdx, 1
 26351                                  .L_lambda_simple_env_loop_009e:	; ext_env[i + 1] <-- env[i]
 26352 00013A6E 4883FE00                	cmp rsi, 0
 26353 00013A72 7410                    	je .L_lambda_simple_env_end_009e
 26354 00013A74 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26355 00013A78 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26356 00013A7C 48FFC6                  	inc rsi
 26357 00013A7F 48FFC2                  	inc rdx
 26358 00013A82 EBEA                    	jmp .L_lambda_simple_env_loop_009e
 26359                                  .L_lambda_simple_env_end_009e:
 26360 00013A84 5B                      	pop rbx
 26361 00013A85 BE00000000              	mov rsi, 0
 26362                                  .L_lambda_simple_params_loop_009e:	; copy params
 26363 00013A8A 4883FE00                	cmp rsi, 0
 26364 00013A8E 740E                    	je .L_lambda_simple_params_end_009e
 26365 00013A90 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26366 00013A95 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26367 00013A99 48FFC6                  	inc rsi
 26368 00013A9C EBEC                    	jmp .L_lambda_simple_params_loop_009e
 26369                                  .L_lambda_simple_params_end_009e:
 26370 00013A9E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26371 00013AA1 4889C3                  	mov rbx, rax
 26372 00013AA4 58                      	pop rax
 26373 00013AA5 C60004                  	mov byte [rax], T_closure
 26374 00013AA8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26375 00013AAC 48C74009[B93A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009e
 26376 00013AB4 E9AA000000              	jmp .L_lambda_simple_end_009e
 26377                                  .L_lambda_simple_code_009e:	; lambda-simple body
 26378 00013AB9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26379 00013ABF 740B                    	je .L_lambda_simple_arity_check_ok_009e
 26380 00013AC1 FF742410                	push qword [rsp + 8 * 2]
 26381 00013AC5 6A01                    	push 1
 26382 00013AC7 E9CC440000              	jmp L_error_incorrect_arity_simple
 26383                                  .L_lambda_simple_arity_check_ok_009e:
 26384 00013ACC C8000000                	enter 0, 0
 26385                                  	; preparing a tail-call
 26386                                  	; preparing a non-tail-call
 26387 00013AD0 488B4520                	mov rax, PARAM(0)	; param n
 26388 00013AD4 50                      	push rax
 26389 00013AD5 6A01                    	push 1	; arg count
 26390 00013AD7 488B0425[48130000]      	mov rax, qword [free_var_83]	; free var even?
 26391 00013ADF 803805                  	cmp byte [rax], T_undefined
 26392 00013AE2 0F84CA430000            	je L_error_fvar_undefined
 26393 00013AE8 803804                  	cmp byte [rax], T_closure
 26394 00013AEB 0F8545440000            	jne L_error_non_closure
 26395 00013AF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26396 00013AF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26397 00013AF7 50                      	push rax
 26398 00013AF8 6A01                    	push 1	; arg count
 26399 00013AFA 488B0425[CF140000]      	mov rax, qword [free_var_106]	; free var not
 26400 00013B02 803805                  	cmp byte [rax], T_undefined
 26401 00013B05 0F84A7430000            	je L_error_fvar_undefined
 26402 00013B0B 803804                  	cmp byte [rax], T_closure
 26403 00013B0E 0F8522440000            	jne L_error_non_closure
 26404 00013B14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26405 00013B17 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26406 00013B1A FF7500                  	push qword[rbp]
 26407 00013B1D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26408 00013B20 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26409 00013B24 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26410 00013B28 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26411 00013B2C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26412 00013B2F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26413 00013B32 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26414 00013B37 4983C103                	add r9, 3 	 ;for getting to the params
 26415 00013B3B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26416 00013B3F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26417                                  .L_tc_recycle_frame_loop_00e9:
 26418 00013B42 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26419 00013B45 7410                    	je .L_tc_recycle_frame_done_00e9
 26420 00013B47 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26421 00013B4A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26422 00013B4D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26423 00013B51 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26424 00013B55 EBEB                    	jmp .L_tc_recycle_frame_loop_00e9
 26425                                  .L_tc_recycle_frame_done_00e9:
 26426 00013B57 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26427 00013B58 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26428 00013B5C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26429 00013B5F C9                      	leave
 26430 00013B60 C21800                  	ret AND_KILL_FRAME(1)
 26431                                  .L_lambda_simple_end_009e:	; new closure is in rax
 26432 00013B63 48890425[02150000]      	mov qword [free_var_109], rax
 26433 00013B6B 48B8-                   	mov rax, sob_void
 26433 00013B6D [0000000000000000] 
 26434                                  
 26435 00013B75 4889C7                  	mov rdi, rax
 26436 00013B78 E8B7460000              	call print_sexpr_if_not_void
 26437 00013B7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26438 00013B82 E858440000              	call malloc
 26439 00013B87 50                      	push rax
 26440 00013B88 BF00000000              	mov rdi, 8 * 0	; new rib
 26441 00013B8D E84D440000              	call malloc
 26442 00013B92 50                      	push rax
 26443 00013B93 BF08000000              	mov rdi, 8 * 1	; extended env
 26444 00013B98 E842440000              	call malloc
 26445 00013B9D 488B7D10                	mov rdi, ENV
 26446 00013BA1 BE00000000              	mov rsi, 0
 26447 00013BA6 BA01000000              	mov rdx, 1
 26448                                  .L_lambda_simple_env_loop_009f:	; ext_env[i + 1] <-- env[i]
 26449 00013BAB 4883FE00                	cmp rsi, 0
 26450 00013BAF 7410                    	je .L_lambda_simple_env_end_009f
 26451 00013BB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26452 00013BB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26453 00013BB9 48FFC6                  	inc rsi
 26454 00013BBC 48FFC2                  	inc rdx
 26455 00013BBF EBEA                    	jmp .L_lambda_simple_env_loop_009f
 26456                                  .L_lambda_simple_env_end_009f:
 26457 00013BC1 5B                      	pop rbx
 26458 00013BC2 BE00000000              	mov rsi, 0
 26459                                  .L_lambda_simple_params_loop_009f:	; copy params
 26460 00013BC7 4883FE00                	cmp rsi, 0
 26461 00013BCB 740E                    	je .L_lambda_simple_params_end_009f
 26462 00013BCD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26463 00013BD2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26464 00013BD6 48FFC6                  	inc rsi
 26465 00013BD9 EBEC                    	jmp .L_lambda_simple_params_loop_009f
 26466                                  .L_lambda_simple_params_end_009f:
 26467 00013BDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26468 00013BDE 4889C3                  	mov rbx, rax
 26469 00013BE1 58                      	pop rax
 26470 00013BE2 C60004                  	mov byte [rax], T_closure
 26471 00013BE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26472 00013BE9 48C74009[F63B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009f
 26473 00013BF1 E9BC000000              	jmp .L_lambda_simple_end_009f
 26474                                  .L_lambda_simple_code_009f:	; lambda-simple body
 26475 00013BF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26476 00013BFC 740B                    	je .L_lambda_simple_arity_check_ok_009f
 26477 00013BFE FF742410                	push qword [rsp + 8 * 2]
 26478 00013C02 6A01                    	push 1
 26479 00013C04 E98F430000              	jmp L_error_incorrect_arity_simple
 26480                                  .L_lambda_simple_arity_check_ok_009f:
 26481 00013C09 C8000000                	enter 0, 0
 26482                                  	; preparing a non-tail-call
 26483 00013C0D 488B4520                	mov rax, PARAM(0)	; param x
 26484 00013C11 50                      	push rax
 26485 00013C12 6A01                    	push 1	; arg count
 26486 00013C14 488B0425[AD140000]      	mov rax, qword [free_var_104]	; free var negative?
 26487 00013C1C 803805                  	cmp byte [rax], T_undefined
 26488 00013C1F 0F848D420000            	je L_error_fvar_undefined
 26489 00013C25 803804                  	cmp byte [rax], T_closure
 26490 00013C28 0F8508430000            	jne L_error_non_closure
 26491 00013C2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26492 00013C31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26493 00013C34 483D[02000000]          	cmp rax, sob_boolean_false
 26494 00013C3A 746E                    	je .L_if_else_0079
 26495                                  	; preparing a tail-call
 26496 00013C3C 488B4520                	mov rax, PARAM(0)	; param x
 26497 00013C40 50                      	push rax
 26498 00013C41 6A01                    	push 1	; arg count
 26499 00013C43 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 26500 00013C4B 803805                  	cmp byte [rax], T_undefined
 26501 00013C4E 0F845E420000            	je L_error_fvar_undefined
 26502 00013C54 803804                  	cmp byte [rax], T_closure
 26503 00013C57 0F85D9420000            	jne L_error_non_closure
 26504 00013C5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26505 00013C60 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26506 00013C63 FF7500                  	push qword[rbp]
 26507 00013C66 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26508 00013C69 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26509 00013C6D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26510 00013C71 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26511 00013C75 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26512 00013C78 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26513 00013C7B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26514 00013C80 4983C103                	add r9, 3 	 ;for getting to the params
 26515 00013C84 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26516 00013C88 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26517                                  .L_tc_recycle_frame_loop_00ea:
 26518 00013C8B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26519 00013C8E 7410                    	je .L_tc_recycle_frame_done_00ea
 26520 00013C90 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26521 00013C93 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26522 00013C96 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26523 00013C9A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26524 00013C9E EBEB                    	jmp .L_tc_recycle_frame_loop_00ea
 26525                                  .L_tc_recycle_frame_done_00ea:
 26526 00013CA0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26527 00013CA1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26528 00013CA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26529 00013CA8 EB04                    	jmp .L_if_end_0079
 26530                                  .L_if_else_0079:
 26531 00013CAA 488B4520                	mov rax, PARAM(0)	; param x
 26532                                  .L_if_end_0079:
 26533 00013CAE C9                      	leave
 26534 00013CAF C21800                  	ret AND_KILL_FRAME(1)
 26535                                  .L_lambda_simple_end_009f:	; new closure is in rax
 26536 00013CB2 48890425[C30F0000]      	mov qword [free_var_30], rax
 26537 00013CBA 48B8-                   	mov rax, sob_void
 26537 00013CBC [0000000000000000] 
 26538                                  
 26539 00013CC4 4889C7                  	mov rdi, rax
 26540 00013CC7 E868450000              	call print_sexpr_if_not_void
 26541 00013CCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26542 00013CD1 E809430000              	call malloc
 26543 00013CD6 50                      	push rax
 26544 00013CD7 BF00000000              	mov rdi, 8 * 0	; new rib
 26545 00013CDC E8FE420000              	call malloc
 26546 00013CE1 50                      	push rax
 26547 00013CE2 BF08000000              	mov rdi, 8 * 1	; extended env
 26548 00013CE7 E8F3420000              	call malloc
 26549 00013CEC 488B7D10                	mov rdi, ENV
 26550 00013CF0 BE00000000              	mov rsi, 0
 26551 00013CF5 BA01000000              	mov rdx, 1
 26552                                  .L_lambda_simple_env_loop_00a0:	; ext_env[i + 1] <-- env[i]
 26553 00013CFA 4883FE00                	cmp rsi, 0
 26554 00013CFE 7410                    	je .L_lambda_simple_env_end_00a0
 26555 00013D00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26556 00013D04 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26557 00013D08 48FFC6                  	inc rsi
 26558 00013D0B 48FFC2                  	inc rdx
 26559 00013D0E EBEA                    	jmp .L_lambda_simple_env_loop_00a0
 26560                                  .L_lambda_simple_env_end_00a0:
 26561 00013D10 5B                      	pop rbx
 26562 00013D11 BE00000000              	mov rsi, 0
 26563                                  .L_lambda_simple_params_loop_00a0:	; copy params
 26564 00013D16 4883FE00                	cmp rsi, 0
 26565 00013D1A 740E                    	je .L_lambda_simple_params_end_00a0
 26566 00013D1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26567 00013D21 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26568 00013D25 48FFC6                  	inc rsi
 26569 00013D28 EBEC                    	jmp .L_lambda_simple_params_loop_00a0
 26570                                  .L_lambda_simple_params_end_00a0:
 26571 00013D2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26572 00013D2D 4889C3                  	mov rbx, rax
 26573 00013D30 58                      	pop rax
 26574 00013D31 C60004                  	mov byte [rax], T_closure
 26575 00013D34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26576 00013D38 48C74009[453D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a0
 26577 00013D40 E91B070000              	jmp .L_lambda_simple_end_00a0
 26578                                  .L_lambda_simple_code_00a0:	; lambda-simple body
 26579 00013D45 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26580 00013D4B 740B                    	je .L_lambda_simple_arity_check_ok_00a0
 26581 00013D4D FF742410                	push qword [rsp + 8 * 2]
 26582 00013D51 6A02                    	push 2
 26583 00013D53 E940420000              	jmp L_error_incorrect_arity_simple
 26584                                  .L_lambda_simple_arity_check_ok_00a0:
 26585 00013D58 C8000000                	enter 0, 0
 26586                                  	; preparing a non-tail-call
 26587 00013D5C 488B4520                	mov rax, PARAM(0)	; param e1
 26588 00013D60 50                      	push rax
 26589 00013D61 6A01                    	push 1	; arg count
 26590 00013D63 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 26591 00013D6B 803805                  	cmp byte [rax], T_undefined
 26592 00013D6E 0F843E410000            	je L_error_fvar_undefined
 26593 00013D74 803804                  	cmp byte [rax], T_closure
 26594 00013D77 0F85B9410000            	jne L_error_non_closure
 26595 00013D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26596 00013D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26597 00013D83 483D[02000000]          	cmp rax, sob_boolean_false
 26598 00013D89 7429                    	je .L_if_else_007a
 26599                                  	; preparing a non-tail-call
 26600 00013D8B 488B4528                	mov rax, PARAM(1)	; param e2
 26601 00013D8F 50                      	push rax
 26602 00013D90 6A01                    	push 1	; arg count
 26603 00013D92 488B0425[24150000]      	mov rax, qword [free_var_111]	; free var pair?
 26604 00013D9A 803805                  	cmp byte [rax], T_undefined
 26605 00013D9D 0F840F410000            	je L_error_fvar_undefined
 26606 00013DA3 803804                  	cmp byte [rax], T_closure
 26607 00013DA6 0F858A410000            	jne L_error_non_closure
 26608 00013DAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26609 00013DAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26610 00013DB2 EB0A                    	jmp .L_if_end_007a
 26611                                  .L_if_else_007a:
 26612 00013DB4 48B8-                   	mov rax, L_constants + 2
 26612 00013DB6 [0200000000000000] 
 26613                                  .L_if_end_007a:
 26614 00013DBE 483D[02000000]          	cmp rax, sob_boolean_false
 26615 00013DC4 0F8446010000            	je .L_if_else_0086
 26616                                  	; preparing a non-tail-call
 26617                                  	; preparing a non-tail-call
 26618 00013DCA 488B4528                	mov rax, PARAM(1)	; param e2
 26619 00013DCE 50                      	push rax
 26620 00013DCF 6A01                    	push 1	; arg count
 26621 00013DD1 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 26622 00013DD9 803805                  	cmp byte [rax], T_undefined
 26623 00013DDC 0F84D0400000            	je L_error_fvar_undefined
 26624 00013DE2 803804                  	cmp byte [rax], T_closure
 26625 00013DE5 0F854B410000            	jne L_error_non_closure
 26626 00013DEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26627 00013DEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26628 00013DF1 50                      	push rax
 26629                                  	; preparing a non-tail-call
 26630 00013DF2 488B4520                	mov rax, PARAM(0)	; param e1
 26631 00013DF6 50                      	push rax
 26632 00013DF7 6A01                    	push 1	; arg count
 26633 00013DF9 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 26634 00013E01 803805                  	cmp byte [rax], T_undefined
 26635 00013E04 0F84A8400000            	je L_error_fvar_undefined
 26636 00013E0A 803804                  	cmp byte [rax], T_closure
 26637 00013E0D 0F8523410000            	jne L_error_non_closure
 26638 00013E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26639 00013E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26640 00013E19 50                      	push rax
 26641 00013E1A 6A02                    	push 2	; arg count
 26642 00013E1C 488B0425[26130000]      	mov rax, qword [free_var_81]	; free var equal?
 26643 00013E24 803805                  	cmp byte [rax], T_undefined
 26644 00013E27 0F8485400000            	je L_error_fvar_undefined
 26645 00013E2D 803804                  	cmp byte [rax], T_closure
 26646 00013E30 0F8500410000            	jne L_error_non_closure
 26647 00013E36 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26648 00013E39 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26649 00013E3C 483D[02000000]          	cmp rax, sob_boolean_false
 26650 00013E42 0F84B9000000            	je .L_if_else_007b
 26651                                  	; preparing a tail-call
 26652                                  	; preparing a non-tail-call
 26653 00013E48 488B4528                	mov rax, PARAM(1)	; param e2
 26654 00013E4C 50                      	push rax
 26655 00013E4D 6A01                    	push 1	; arg count
 26656 00013E4F 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 26657 00013E57 803805                  	cmp byte [rax], T_undefined
 26658 00013E5A 0F8452400000            	je L_error_fvar_undefined
 26659 00013E60 803804                  	cmp byte [rax], T_closure
 26660 00013E63 0F85CD400000            	jne L_error_non_closure
 26661 00013E69 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26662 00013E6C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26663 00013E6F 50                      	push rax
 26664                                  	; preparing a non-tail-call
 26665 00013E70 488B4520                	mov rax, PARAM(0)	; param e1
 26666 00013E74 50                      	push rax
 26667 00013E75 6A01                    	push 1	; arg count
 26668 00013E77 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 26669 00013E7F 803805                  	cmp byte [rax], T_undefined
 26670 00013E82 0F842A400000            	je L_error_fvar_undefined
 26671 00013E88 803804                  	cmp byte [rax], T_closure
 26672 00013E8B 0F85A5400000            	jne L_error_non_closure
 26673 00013E91 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26674 00013E94 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26675 00013E97 50                      	push rax
 26676 00013E98 6A02                    	push 2	; arg count
 26677 00013E9A 488B0425[26130000]      	mov rax, qword [free_var_81]	; free var equal?
 26678 00013EA2 803805                  	cmp byte [rax], T_undefined
 26679 00013EA5 0F8407400000            	je L_error_fvar_undefined
 26680 00013EAB 803804                  	cmp byte [rax], T_closure
 26681 00013EAE 0F8582400000            	jne L_error_non_closure
 26682 00013EB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26683 00013EB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26684 00013EBA FF7500                  	push qword[rbp]
 26685 00013EBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26686 00013EC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26687 00013EC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26688 00013EC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26689 00013ECC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26690 00013ECF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26691 00013ED2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26692 00013ED7 4983C103                	add r9, 3 	 ;for getting to the params
 26693 00013EDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26694 00013EDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26695                                  .L_tc_recycle_frame_loop_00eb:
 26696 00013EE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26697 00013EE5 7410                    	je .L_tc_recycle_frame_done_00eb
 26698 00013EE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26699 00013EEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26700 00013EED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26701 00013EF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26702 00013EF5 EBEB                    	jmp .L_tc_recycle_frame_loop_00eb
 26703                                  .L_tc_recycle_frame_done_00eb:
 26704 00013EF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26705 00013EF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26706 00013EFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26707 00013EFF EB0A                    	jmp .L_if_end_007b
 26708                                  .L_if_else_007b:
 26709 00013F01 48B8-                   	mov rax, L_constants + 2
 26709 00013F03 [0200000000000000] 
 26710                                  .L_if_end_007b:
 26711 00013F0B E94C050000              	jmp .L_if_end_0086
 26712                                  .L_if_else_0086:
 26713                                  	; preparing a non-tail-call
 26714 00013F10 488B4520                	mov rax, PARAM(0)	; param e1
 26715 00013F14 50                      	push rax
 26716 00013F15 6A01                    	push 1	; arg count
 26717 00013F17 488B0425[99170000]      	mov rax, qword [free_var_148]	; free var vector?
 26718 00013F1F 803805                  	cmp byte [rax], T_undefined
 26719 00013F22 0F848A3F0000            	je L_error_fvar_undefined
 26720 00013F28 803804                  	cmp byte [rax], T_closure
 26721 00013F2B 0F8505400000            	jne L_error_non_closure
 26722 00013F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26723 00013F34 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26724 00013F37 483D[02000000]          	cmp rax, sob_boolean_false
 26725 00013F3D 0F84AF000000            	je .L_if_else_007d
 26726                                  	; preparing a non-tail-call
 26727 00013F43 488B4528                	mov rax, PARAM(1)	; param e2
 26728 00013F47 50                      	push rax
 26729 00013F48 6A01                    	push 1	; arg count
 26730 00013F4A 488B0425[99170000]      	mov rax, qword [free_var_148]	; free var vector?
 26731 00013F52 803805                  	cmp byte [rax], T_undefined
 26732 00013F55 0F84573F0000            	je L_error_fvar_undefined
 26733 00013F5B 803804                  	cmp byte [rax], T_closure
 26734 00013F5E 0F85D23F0000            	jne L_error_non_closure
 26735 00013F64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26736 00013F67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26737 00013F6A 483D[02000000]          	cmp rax, sob_boolean_false
 26738 00013F70 7474                    	je .L_if_else_007c
 26739                                  	; preparing a non-tail-call
 26740                                  	; preparing a non-tail-call
 26741 00013F72 488B4528                	mov rax, PARAM(1)	; param e2
 26742 00013F76 50                      	push rax
 26743 00013F77 6A01                    	push 1	; arg count
 26744 00013F79 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26745 00013F81 803805                  	cmp byte [rax], T_undefined
 26746 00013F84 0F84283F0000            	je L_error_fvar_undefined
 26747 00013F8A 803804                  	cmp byte [rax], T_closure
 26748 00013F8D 0F85A33F0000            	jne L_error_non_closure
 26749 00013F93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26750 00013F96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26751 00013F99 50                      	push rax
 26752                                  	; preparing a non-tail-call
 26753 00013F9A 488B4520                	mov rax, PARAM(0)	; param e1
 26754 00013F9E 50                      	push rax
 26755 00013F9F 6A01                    	push 1	; arg count
 26756 00013FA1 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 26757 00013FA9 803805                  	cmp byte [rax], T_undefined
 26758 00013FAC 0F84003F0000            	je L_error_fvar_undefined
 26759 00013FB2 803804                  	cmp byte [rax], T_closure
 26760 00013FB5 0F857B3F0000            	jne L_error_non_closure
 26761 00013FBB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26762 00013FBE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26763 00013FC1 50                      	push rax
 26764 00013FC2 6A02                    	push 2	; arg count
 26765 00013FC4 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 26766 00013FCC 803805                  	cmp byte [rax], T_undefined
 26767 00013FCF 0F84DD3E0000            	je L_error_fvar_undefined
 26768 00013FD5 803804                  	cmp byte [rax], T_closure
 26769 00013FD8 0F85583F0000            	jne L_error_non_closure
 26770 00013FDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26771 00013FE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26772 00013FE4 EB0A                    	jmp .L_if_end_007c
 26773                                  .L_if_else_007c:
 26774 00013FE6 48B8-                   	mov rax, L_constants + 2
 26774 00013FE8 [0200000000000000] 
 26775                                  .L_if_end_007c:
 26776 00013FF0 EB0A                    	jmp .L_if_end_007d
 26777                                  .L_if_else_007d:
 26778 00013FF2 48B8-                   	mov rax, L_constants + 2
 26778 00013FF4 [0200000000000000] 
 26779                                  .L_if_end_007d:
 26780 00013FFC 483D[02000000]          	cmp rax, sob_boolean_false
 26781 00014002 0F84BC000000            	je .L_if_else_0085
 26782                                  	; preparing a tail-call
 26783                                  	; preparing a non-tail-call
 26784 00014008 488B4528                	mov rax, PARAM(1)	; param e2
 26785 0001400C 50                      	push rax
 26786 0001400D 6A01                    	push 1	; arg count
 26787 0001400F 488B0425[22170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26788 00014017 803805                  	cmp byte [rax], T_undefined
 26789 0001401A 0F84923E0000            	je L_error_fvar_undefined
 26790 00014020 803804                  	cmp byte [rax], T_closure
 26791 00014023 0F850D3F0000            	jne L_error_non_closure
 26792 00014029 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26793 0001402C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26794 0001402F 50                      	push rax
 26795                                  	; preparing a non-tail-call
 26796 00014030 488B4520                	mov rax, PARAM(0)	; param e1
 26797 00014034 50                      	push rax
 26798 00014035 6A01                    	push 1	; arg count
 26799 00014037 488B0425[22170000]      	mov rax, qword [free_var_141]	; free var vector->list
 26800 0001403F 803805                  	cmp byte [rax], T_undefined
 26801 00014042 0F846A3E0000            	je L_error_fvar_undefined
 26802 00014048 803804                  	cmp byte [rax], T_closure
 26803 0001404B 0F85E53E0000            	jne L_error_non_closure
 26804 00014051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26805 00014054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26806 00014057 50                      	push rax
 26807 00014058 6A02                    	push 2	; arg count
 26808 0001405A 488B0425[26130000]      	mov rax, qword [free_var_81]	; free var equal?
 26809 00014062 803805                  	cmp byte [rax], T_undefined
 26810 00014065 0F84473E0000            	je L_error_fvar_undefined
 26811 0001406B 803804                  	cmp byte [rax], T_closure
 26812 0001406E 0F85C23E0000            	jne L_error_non_closure
 26813 00014074 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26814 00014077 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26815 0001407A FF7500                  	push qword[rbp]
 26816 0001407D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26817 00014080 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26818 00014084 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26819 00014088 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26820 0001408C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26821 0001408F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26822 00014092 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26823 00014097 4983C103                	add r9, 3 	 ;for getting to the params
 26824 0001409B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26825 0001409F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26826                                  .L_tc_recycle_frame_loop_00ec:
 26827 000140A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26828 000140A5 7410                    	je .L_tc_recycle_frame_done_00ec
 26829 000140A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26830 000140AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26831 000140AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26832 000140B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26833 000140B5 EBEB                    	jmp .L_tc_recycle_frame_loop_00ec
 26834                                  .L_tc_recycle_frame_done_00ec:
 26835 000140B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26836 000140B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26837 000140BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26838 000140BF E998030000              	jmp .L_if_end_0085
 26839                                  .L_if_else_0085:
 26840                                  	; preparing a non-tail-call
 26841 000140C4 488B4520                	mov rax, PARAM(0)	; param e1
 26842 000140C8 50                      	push rax
 26843 000140C9 6A01                    	push 1	; arg count
 26844 000140CB 488B0425[EF160000]      	mov rax, qword [free_var_138]	; free var string?
 26845 000140D3 803805                  	cmp byte [rax], T_undefined
 26846 000140D6 0F84D63D0000            	je L_error_fvar_undefined
 26847 000140DC 803804                  	cmp byte [rax], T_closure
 26848 000140DF 0F85513E0000            	jne L_error_non_closure
 26849 000140E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26850 000140E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26851 000140EB 483D[02000000]          	cmp rax, sob_boolean_false
 26852 000140F1 0F84AF000000            	je .L_if_else_007f
 26853                                  	; preparing a non-tail-call
 26854 000140F7 488B4528                	mov rax, PARAM(1)	; param e2
 26855 000140FB 50                      	push rax
 26856 000140FC 6A01                    	push 1	; arg count
 26857 000140FE 488B0425[EF160000]      	mov rax, qword [free_var_138]	; free var string?
 26858 00014106 803805                  	cmp byte [rax], T_undefined
 26859 00014109 0F84A33D0000            	je L_error_fvar_undefined
 26860 0001410F 803804                  	cmp byte [rax], T_closure
 26861 00014112 0F851E3E0000            	jne L_error_non_closure
 26862 00014118 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26863 0001411B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26864 0001411E 483D[02000000]          	cmp rax, sob_boolean_false
 26865 00014124 7474                    	je .L_if_else_007e
 26866                                  	; preparing a non-tail-call
 26867                                  	; preparing a non-tail-call
 26868 00014126 488B4528                	mov rax, PARAM(1)	; param e2
 26869 0001412A 50                      	push rax
 26870 0001412B 6A01                    	push 1	; arg count
 26871 0001412D 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 26872 00014135 803805                  	cmp byte [rax], T_undefined
 26873 00014138 0F84743D0000            	je L_error_fvar_undefined
 26874 0001413E 803804                  	cmp byte [rax], T_closure
 26875 00014141 0F85EF3D0000            	jne L_error_non_closure
 26876 00014147 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26877 0001414A FF5009                  	call SOB_CLOSURE_CODE(rax)
 26878 0001414D 50                      	push rax
 26879                                  	; preparing a non-tail-call
 26880 0001414E 488B4520                	mov rax, PARAM(0)	; param e1
 26881 00014152 50                      	push rax
 26882 00014153 6A01                    	push 1	; arg count
 26883 00014155 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 26884 0001415D 803805                  	cmp byte [rax], T_undefined
 26885 00014160 0F844C3D0000            	je L_error_fvar_undefined
 26886 00014166 803804                  	cmp byte [rax], T_closure
 26887 00014169 0F85C73D0000            	jne L_error_non_closure
 26888 0001416F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26889 00014172 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26890 00014175 50                      	push rax
 26891 00014176 6A02                    	push 2	; arg count
 26892 00014178 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 26893 00014180 803805                  	cmp byte [rax], T_undefined
 26894 00014183 0F84293D0000            	je L_error_fvar_undefined
 26895 00014189 803804                  	cmp byte [rax], T_closure
 26896 0001418C 0F85A43D0000            	jne L_error_non_closure
 26897 00014192 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26898 00014195 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26899 00014198 EB0A                    	jmp .L_if_end_007e
 26900                                  .L_if_else_007e:
 26901 0001419A 48B8-                   	mov rax, L_constants + 2
 26901 0001419C [0200000000000000] 
 26902                                  .L_if_end_007e:
 26903 000141A4 EB0A                    	jmp .L_if_end_007f
 26904                                  .L_if_else_007f:
 26905 000141A6 48B8-                   	mov rax, L_constants + 2
 26905 000141A8 [0200000000000000] 
 26906                                  .L_if_end_007f:
 26907 000141B0 483D[02000000]          	cmp rax, sob_boolean_false
 26908 000141B6 7476                    	je .L_if_else_0084
 26909                                  	; preparing a tail-call
 26910 000141B8 488B4528                	mov rax, PARAM(1)	; param e2
 26911 000141BC 50                      	push rax
 26912 000141BD 488B4520                	mov rax, PARAM(0)	; param e1
 26913 000141C1 50                      	push rax
 26914 000141C2 6A02                    	push 2	; arg count
 26915 000141C4 488B0425[BC160000]      	mov rax, qword [free_var_135]	; free var string=?
 26916 000141CC 803805                  	cmp byte [rax], T_undefined
 26917 000141CF 0F84DD3C0000            	je L_error_fvar_undefined
 26918 000141D5 803804                  	cmp byte [rax], T_closure
 26919 000141D8 0F85583D0000            	jne L_error_non_closure
 26920 000141DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26921 000141E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26922 000141E4 FF7500                  	push qword[rbp]
 26923 000141E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26924 000141EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26925 000141EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26926 000141F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26927 000141F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26928 000141F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26929 000141FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26930 00014201 4983C103                	add r9, 3 	 ;for getting to the params
 26931 00014205 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26932 00014209 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26933                                  .L_tc_recycle_frame_loop_00ed:
 26934 0001420C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26935 0001420F 7410                    	je .L_tc_recycle_frame_done_00ed
 26936 00014211 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26937 00014214 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26938 00014217 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26939 0001421B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26940 0001421F EBEB                    	jmp .L_tc_recycle_frame_loop_00ed
 26941                                  .L_tc_recycle_frame_done_00ed:
 26942 00014221 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26943 00014222 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26944 00014226 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26945 00014229 E92E020000              	jmp .L_if_end_0084
 26946                                  .L_if_else_0084:
 26947                                  	; preparing a non-tail-call
 26948 0001422E 488B4520                	mov rax, PARAM(0)	; param e1
 26949 00014232 50                      	push rax
 26950 00014233 6A01                    	push 1	; arg count
 26951 00014235 488B0425[F1140000]      	mov rax, qword [free_var_108]	; free var number?
 26952 0001423D 803805                  	cmp byte [rax], T_undefined
 26953 00014240 0F846C3C0000            	je L_error_fvar_undefined
 26954 00014246 803804                  	cmp byte [rax], T_closure
 26955 00014249 0F85E73C0000            	jne L_error_non_closure
 26956 0001424F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26957 00014252 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26958 00014255 483D[02000000]          	cmp rax, sob_boolean_false
 26959 0001425B 7429                    	je .L_if_else_0080
 26960                                  	; preparing a non-tail-call
 26961 0001425D 488B4528                	mov rax, PARAM(1)	; param e2
 26962 00014261 50                      	push rax
 26963 00014262 6A01                    	push 1	; arg count
 26964 00014264 488B0425[F1140000]      	mov rax, qword [free_var_108]	; free var number?
 26965 0001426C 803805                  	cmp byte [rax], T_undefined
 26966 0001426F 0F843D3C0000            	je L_error_fvar_undefined
 26967 00014275 803804                  	cmp byte [rax], T_closure
 26968 00014278 0F85B83C0000            	jne L_error_non_closure
 26969 0001427E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26970 00014281 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26971 00014284 EB0A                    	jmp .L_if_end_0080
 26972                                  .L_if_else_0080:
 26973 00014286 48B8-                   	mov rax, L_constants + 2
 26973 00014288 [0200000000000000] 
 26974                                  .L_if_end_0080:
 26975 00014290 483D[02000000]          	cmp rax, sob_boolean_false
 26976 00014296 7476                    	je .L_if_else_0083
 26977                                  	; preparing a tail-call
 26978 00014298 488B4528                	mov rax, PARAM(1)	; param e2
 26979 0001429C 50                      	push rax
 26980 0001429D 488B4520                	mov rax, PARAM(0)	; param e1
 26981 000142A1 50                      	push rax
 26982 000142A2 6A02                    	push 2	; arg count
 26983 000142A4 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 26984 000142AC 803805                  	cmp byte [rax], T_undefined
 26985 000142AF 0F84FD3B0000            	je L_error_fvar_undefined
 26986 000142B5 803804                  	cmp byte [rax], T_closure
 26987 000142B8 0F85783C0000            	jne L_error_non_closure
 26988 000142BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26989 000142C1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26990 000142C4 FF7500                  	push qword[rbp]
 26991 000142C7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26992 000142CA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26993 000142CE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26994 000142D2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26995 000142D6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26996 000142D9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26997 000142DC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26998 000142E1 4983C103                	add r9, 3 	 ;for getting to the params
 26999 000142E5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27000 000142E9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27001                                  .L_tc_recycle_frame_loop_00ee:
 27002 000142EC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27003 000142EF 7410                    	je .L_tc_recycle_frame_done_00ee
 27004 000142F1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27005 000142F4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27006 000142F7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27007 000142FB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27008 000142FF EBEB                    	jmp .L_tc_recycle_frame_loop_00ee
 27009                                  .L_tc_recycle_frame_done_00ee:
 27010 00014301 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27011 00014302 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27012 00014306 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27013 00014309 E94E010000              	jmp .L_if_end_0083
 27014                                  .L_if_else_0083:
 27015                                  	; preparing a non-tail-call
 27016 0001430E 488B4520                	mov rax, PARAM(0)	; param e1
 27017 00014312 50                      	push rax
 27018 00014313 6A01                    	push 1	; arg count
 27019 00014315 488B0425[F3120000]      	mov rax, qword [free_var_78]	; free var char?
 27020 0001431D 803805                  	cmp byte [rax], T_undefined
 27021 00014320 0F848C3B0000            	je L_error_fvar_undefined
 27022 00014326 803804                  	cmp byte [rax], T_closure
 27023 00014329 0F85073C0000            	jne L_error_non_closure
 27024 0001432F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27025 00014332 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27026 00014335 483D[02000000]          	cmp rax, sob_boolean_false
 27027 0001433B 7429                    	je .L_if_else_0081
 27028                                  	; preparing a non-tail-call
 27029 0001433D 488B4528                	mov rax, PARAM(1)	; param e2
 27030 00014341 50                      	push rax
 27031 00014342 6A01                    	push 1	; arg count
 27032 00014344 488B0425[F3120000]      	mov rax, qword [free_var_78]	; free var char?
 27033 0001434C 803805                  	cmp byte [rax], T_undefined
 27034 0001434F 0F845D3B0000            	je L_error_fvar_undefined
 27035 00014355 803804                  	cmp byte [rax], T_closure
 27036 00014358 0F85D83B0000            	jne L_error_non_closure
 27037 0001435E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27038 00014361 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27039 00014364 EB0A                    	jmp .L_if_end_0081
 27040                                  .L_if_else_0081:
 27041 00014366 48B8-                   	mov rax, L_constants + 2
 27041 00014368 [0200000000000000] 
 27042                                  .L_if_end_0081:
 27043 00014370 483D[02000000]          	cmp rax, sob_boolean_false
 27044 00014376 7473                    	je .L_if_else_0082
 27045                                  	; preparing a tail-call
 27046 00014378 488B4528                	mov rax, PARAM(1)	; param e2
 27047 0001437C 50                      	push rax
 27048 0001437D 488B4520                	mov rax, PARAM(0)	; param e1
 27049 00014381 50                      	push rax
 27050 00014382 6A02                    	push 2	; arg count
 27051 00014384 488B0425[C0120000]      	mov rax, qword [free_var_75]	; free var char=?
 27052 0001438C 803805                  	cmp byte [rax], T_undefined
 27053 0001438F 0F841D3B0000            	je L_error_fvar_undefined
 27054 00014395 803804                  	cmp byte [rax], T_closure
 27055 00014398 0F85983B0000            	jne L_error_non_closure
 27056 0001439E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27057 000143A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27058 000143A4 FF7500                  	push qword[rbp]
 27059 000143A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27060 000143AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27061 000143AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27062 000143B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27063 000143B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27064 000143B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27065 000143BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27066 000143C1 4983C103                	add r9, 3 	 ;for getting to the params
 27067 000143C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27068 000143C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27069                                  .L_tc_recycle_frame_loop_00ef:
 27070 000143CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27071 000143CF 7410                    	je .L_tc_recycle_frame_done_00ef
 27072 000143D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27073 000143D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27074 000143D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27075 000143DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27076 000143DF EBEB                    	jmp .L_tc_recycle_frame_loop_00ef
 27077                                  .L_tc_recycle_frame_done_00ef:
 27078 000143E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27079 000143E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27080 000143E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27081 000143E9 EB71                    	jmp .L_if_end_0082
 27082                                  .L_if_else_0082:
 27083                                  	; preparing a tail-call
 27084 000143EB 488B4528                	mov rax, PARAM(1)	; param e2
 27085 000143EF 50                      	push rax
 27086 000143F0 488B4520                	mov rax, PARAM(0)	; param e1
 27087 000143F4 50                      	push rax
 27088 000143F5 6A02                    	push 2	; arg count
 27089 000143F7 488B0425[15130000]      	mov rax, qword [free_var_80]	; free var eq?
 27090 000143FF 803805                  	cmp byte [rax], T_undefined
 27091 00014402 0F84AA3A0000            	je L_error_fvar_undefined
 27092 00014408 803804                  	cmp byte [rax], T_closure
 27093 0001440B 0F85253B0000            	jne L_error_non_closure
 27094 00014411 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27095 00014414 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27096 00014417 FF7500                  	push qword[rbp]
 27097 0001441A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27098 0001441D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27099 00014421 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27100 00014425 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27101 00014429 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27102 0001442C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27103 0001442F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27104 00014434 4983C103                	add r9, 3 	 ;for getting to the params
 27105 00014438 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27106 0001443C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27107                                  .L_tc_recycle_frame_loop_00f0:
 27108 0001443F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27109 00014442 7410                    	je .L_tc_recycle_frame_done_00f0
 27110 00014444 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27111 00014447 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27112 0001444A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27113 0001444E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27114 00014452 EBEB                    	jmp .L_tc_recycle_frame_loop_00f0
 27115                                  .L_tc_recycle_frame_done_00f0:
 27116 00014454 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27117 00014455 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27118 00014459 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27119                                  .L_if_end_0082:
 27120                                  .L_if_end_0083:
 27121                                  .L_if_end_0084:
 27122                                  .L_if_end_0085:
 27123                                  .L_if_end_0086:
 27124 0001445C C9                      	leave
 27125 0001445D C22000                  	ret AND_KILL_FRAME(2)
 27126                                  .L_lambda_simple_end_00a0:	; new closure is in rax
 27127 00014460 48890425[26130000]      	mov qword [free_var_81], rax
 27128 00014468 48B8-                   	mov rax, sob_void
 27128 0001446A [0000000000000000] 
 27129                                  
 27130 00014472 4889C7                  	mov rdi, rax
 27131 00014475 E8BA3D0000              	call print_sexpr_if_not_void
 27132 0001447A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27133 0001447F E85B3B0000              	call malloc
 27134 00014484 50                      	push rax
 27135 00014485 BF00000000              	mov rdi, 8 * 0	; new rib
 27136 0001448A E8503B0000              	call malloc
 27137 0001448F 50                      	push rax
 27138 00014490 BF08000000              	mov rdi, 8 * 1	; extended env
 27139 00014495 E8453B0000              	call malloc
 27140 0001449A 488B7D10                	mov rdi, ENV
 27141 0001449E BE00000000              	mov rsi, 0
 27142 000144A3 BA01000000              	mov rdx, 1
 27143                                  .L_lambda_simple_env_loop_00a1:	; ext_env[i + 1] <-- env[i]
 27144 000144A8 4883FE00                	cmp rsi, 0
 27145 000144AC 7410                    	je .L_lambda_simple_env_end_00a1
 27146 000144AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27147 000144B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27148 000144B6 48FFC6                  	inc rsi
 27149 000144B9 48FFC2                  	inc rdx
 27150 000144BC EBEA                    	jmp .L_lambda_simple_env_loop_00a1
 27151                                  .L_lambda_simple_env_end_00a1:
 27152 000144BE 5B                      	pop rbx
 27153 000144BF BE00000000              	mov rsi, 0
 27154                                  .L_lambda_simple_params_loop_00a1:	; copy params
 27155 000144C4 4883FE00                	cmp rsi, 0
 27156 000144C8 740E                    	je .L_lambda_simple_params_end_00a1
 27157 000144CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27158 000144CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27159 000144D3 48FFC6                  	inc rsi
 27160 000144D6 EBEC                    	jmp .L_lambda_simple_params_loop_00a1
 27161                                  .L_lambda_simple_params_end_00a1:
 27162 000144D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27163 000144DB 4889C3                  	mov rbx, rax
 27164 000144DE 58                      	pop rax
 27165 000144DF C60004                  	mov byte [rax], T_closure
 27166 000144E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27167 000144E6 48C74009[F3440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a1
 27168 000144EE E9B5010000              	jmp .L_lambda_simple_end_00a1
 27169                                  .L_lambda_simple_code_00a1:	; lambda-simple body
 27170 000144F3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27171 000144F9 740B                    	je .L_lambda_simple_arity_check_ok_00a1
 27172 000144FB FF742410                	push qword [rsp + 8 * 2]
 27173 000144FF 6A02                    	push 2
 27174 00014501 E9923A0000              	jmp L_error_incorrect_arity_simple
 27175                                  .L_lambda_simple_arity_check_ok_00a1:
 27176 00014506 C8000000                	enter 0, 0
 27177                                  	; preparing a non-tail-call
 27178 0001450A 488B4528                	mov rax, PARAM(1)	; param s
 27179 0001450E 50                      	push rax
 27180 0001450F 6A01                    	push 1	; arg count
 27181 00014511 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 27182 00014519 803805                  	cmp byte [rax], T_undefined
 27183 0001451C 0F8490390000            	je L_error_fvar_undefined
 27184 00014522 803804                  	cmp byte [rax], T_closure
 27185 00014525 0F850B3A0000            	jne L_error_non_closure
 27186 0001452B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27187 0001452E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27188 00014531 483D[02000000]          	cmp rax, sob_boolean_false
 27189 00014537 740F                    	je .L_if_else_0088
 27190 00014539 48B8-                   	mov rax, L_constants + 2
 27190 0001453B [0200000000000000] 
 27191 00014543 E95C010000              	jmp .L_if_end_0088
 27192                                  .L_if_else_0088:
 27193                                  	; preparing a non-tail-call
 27194 00014548 488B4520                	mov rax, PARAM(0)	; param a
 27195 0001454C 50                      	push rax
 27196                                  	; preparing a non-tail-call
 27197 0001454D 488B4528                	mov rax, PARAM(1)	; param s
 27198 00014551 50                      	push rax
 27199 00014552 6A01                    	push 1	; arg count
 27200 00014554 488B0425[7E100000]      	mov rax, qword [free_var_41]	; free var caar
 27201 0001455C 803805                  	cmp byte [rax], T_undefined
 27202 0001455F 0F844D390000            	je L_error_fvar_undefined
 27203 00014565 803804                  	cmp byte [rax], T_closure
 27204 00014568 0F85C8390000            	jne L_error_non_closure
 27205 0001456E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27206 00014571 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27207 00014574 50                      	push rax
 27208 00014575 6A02                    	push 2	; arg count
 27209 00014577 488B0425[15130000]      	mov rax, qword [free_var_80]	; free var eq?
 27210 0001457F 803805                  	cmp byte [rax], T_undefined
 27211 00014582 0F842A390000            	je L_error_fvar_undefined
 27212 00014588 803804                  	cmp byte [rax], T_closure
 27213 0001458B 0F85A5390000            	jne L_error_non_closure
 27214 00014591 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27215 00014594 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27216 00014597 483D[02000000]          	cmp rax, sob_boolean_false
 27217 0001459D 7471                    	je .L_if_else_0087
 27218                                  	; preparing a tail-call
 27219 0001459F 488B4528                	mov rax, PARAM(1)	; param s
 27220 000145A3 50                      	push rax
 27221 000145A4 6A01                    	push 1	; arg count
 27222 000145A6 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27223 000145AE 803805                  	cmp byte [rax], T_undefined
 27224 000145B1 0F84FB380000            	je L_error_fvar_undefined
 27225 000145B7 803804                  	cmp byte [rax], T_closure
 27226 000145BA 0F8576390000            	jne L_error_non_closure
 27227 000145C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27228 000145C3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27229 000145C6 FF7500                  	push qword[rbp]
 27230 000145C9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27231 000145CC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27232 000145D0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27233 000145D4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27234 000145D8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27235 000145DB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27236 000145DE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27237 000145E3 4983C103                	add r9, 3 	 ;for getting to the params
 27238 000145E7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27239 000145EB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27240                                  .L_tc_recycle_frame_loop_00f1:
 27241 000145EE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27242 000145F1 7410                    	je .L_tc_recycle_frame_done_00f1
 27243 000145F3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27244 000145F6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27245 000145F9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27246 000145FD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27247 00014601 EBEB                    	jmp .L_tc_recycle_frame_loop_00f1
 27248                                  .L_tc_recycle_frame_done_00f1:
 27249 00014603 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27250 00014604 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27251 00014608 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27252 0001460B E994000000              	jmp .L_if_end_0087
 27253                                  .L_if_else_0087:
 27254                                  	; preparing a tail-call
 27255                                  	; preparing a non-tail-call
 27256 00014610 488B4528                	mov rax, PARAM(1)	; param s
 27257 00014614 50                      	push rax
 27258 00014615 6A01                    	push 1	; arg count
 27259 00014617 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 27260 0001461F 803805                  	cmp byte [rax], T_undefined
 27261 00014622 0F848A380000            	je L_error_fvar_undefined
 27262 00014628 803804                  	cmp byte [rax], T_closure
 27263 0001462B 0F8505390000            	jne L_error_non_closure
 27264 00014631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27265 00014634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27266 00014637 50                      	push rax
 27267 00014638 488B4520                	mov rax, PARAM(0)	; param a
 27268 0001463C 50                      	push rax
 27269 0001463D 6A02                    	push 2	; arg count
 27270 0001463F 488B0425[07100000]      	mov rax, qword [free_var_34]	; free var assoc
 27271 00014647 803805                  	cmp byte [rax], T_undefined
 27272 0001464A 0F8462380000            	je L_error_fvar_undefined
 27273 00014650 803804                  	cmp byte [rax], T_closure
 27274 00014653 0F85DD380000            	jne L_error_non_closure
 27275 00014659 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27276 0001465C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27277 0001465F FF7500                  	push qword[rbp]
 27278 00014662 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27279 00014665 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27280 00014669 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27281 0001466D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27282 00014671 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27283 00014674 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27284 00014677 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27285 0001467C 4983C103                	add r9, 3 	 ;for getting to the params
 27286 00014680 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27287 00014684 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27288                                  .L_tc_recycle_frame_loop_00f2:
 27289 00014687 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27290 0001468A 7410                    	je .L_tc_recycle_frame_done_00f2
 27291 0001468C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27292 0001468F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27293 00014692 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27294 00014696 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27295 0001469A EBEB                    	jmp .L_tc_recycle_frame_loop_00f2
 27296                                  .L_tc_recycle_frame_done_00f2:
 27297 0001469C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27298 0001469D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27299 000146A1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27300                                  .L_if_end_0087:
 27301                                  .L_if_end_0088:
 27302 000146A4 C9                      	leave
 27303 000146A5 C22000                  	ret AND_KILL_FRAME(2)
 27304                                  .L_lambda_simple_end_00a1:	; new closure is in rax
 27305 000146A8 48890425[07100000]      	mov qword [free_var_34], rax
 27306 000146B0 48B8-                   	mov rax, sob_void
 27306 000146B2 [0000000000000000] 
 27307                                  
 27308 000146BA 4889C7                  	mov rdi, rax
 27309 000146BD E8723B0000              	call print_sexpr_if_not_void
 27310                                  	; preparing a non-tail-call
 27311 000146C2 48B8-                   	mov rax, L_constants + 1993
 27311 000146C4 [C907000000000000] 
 27312 000146CC 50                      	push rax
 27313 000146CD 48B8-                   	mov rax, L_constants + 1993
 27313 000146CF [C907000000000000] 
 27314 000146D7 50                      	push rax
 27315 000146D8 6A02                    	push 2	; arg count
 27316 000146DA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27317 000146DF E8FB380000              	call malloc
 27318 000146E4 50                      	push rax
 27319 000146E5 BF00000000              	mov rdi, 8 * 0	; new rib
 27320 000146EA E8F0380000              	call malloc
 27321 000146EF 50                      	push rax
 27322 000146F0 BF08000000              	mov rdi, 8 * 1	; extended env
 27323 000146F5 E8E5380000              	call malloc
 27324 000146FA 488B7D10                	mov rdi, ENV
 27325 000146FE BE00000000              	mov rsi, 0
 27326 00014703 BA01000000              	mov rdx, 1
 27327                                  .L_lambda_simple_env_loop_00a2:	; ext_env[i + 1] <-- env[i]
 27328 00014708 4883FE00                	cmp rsi, 0
 27329 0001470C 7410                    	je .L_lambda_simple_env_end_00a2
 27330 0001470E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27331 00014712 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27332 00014716 48FFC6                  	inc rsi
 27333 00014719 48FFC2                  	inc rdx
 27334 0001471C EBEA                    	jmp .L_lambda_simple_env_loop_00a2
 27335                                  .L_lambda_simple_env_end_00a2:
 27336 0001471E 5B                      	pop rbx
 27337 0001471F BE00000000              	mov rsi, 0
 27338                                  .L_lambda_simple_params_loop_00a2:	; copy params
 27339 00014724 4883FE00                	cmp rsi, 0
 27340 00014728 740E                    	je .L_lambda_simple_params_end_00a2
 27341 0001472A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27342 0001472F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27343 00014733 48FFC6                  	inc rsi
 27344 00014736 EBEC                    	jmp .L_lambda_simple_params_loop_00a2
 27345                                  .L_lambda_simple_params_end_00a2:
 27346 00014738 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27347 0001473B 4889C3                  	mov rbx, rax
 27348 0001473E 58                      	pop rax
 27349 0001473F C60004                  	mov byte [rax], T_closure
 27350 00014742 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27351 00014746 48C74009[53470100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a2
 27352 0001474E E918090000              	jmp .L_lambda_simple_end_00a2
 27353                                  .L_lambda_simple_code_00a2:	; lambda-simple body
 27354 00014753 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27355 00014759 740B                    	je .L_lambda_simple_arity_check_ok_00a2
 27356 0001475B FF742410                	push qword [rsp + 8 * 2]
 27357 0001475F 6A02                    	push 2
 27358 00014761 E932380000              	jmp L_error_incorrect_arity_simple
 27359                                  .L_lambda_simple_arity_check_ok_00a2:
 27360 00014766 C8000000                	enter 0, 0
 27361 0001476A BF08000000              	mov rdi, 8*1
 27362 0001476F E86B380000              	call malloc
 27363 00014774 488B5D20                	mov rbx, PARAM(0)
 27364 00014778 488918                  	mov qword[rax], rbx
 27365 0001477B 48894520                	mov PARAM(0), rax
 27366 0001477F 48B8-                   	mov rax, sob_void
 27366 00014781 [0000000000000000] 
 27367                                  
 27368 00014789 BF08000000              	mov rdi, 8*1
 27369 0001478E E84C380000              	call malloc
 27370 00014793 488B5D28                	mov rbx, PARAM(1)
 27371 00014797 488918                  	mov qword[rax], rbx
 27372 0001479A 48894528                	mov PARAM(1), rax
 27373 0001479E 48B8-                   	mov rax, sob_void
 27373 000147A0 [0000000000000000] 
 27374                                  
 27375 000147A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27376 000147AD E82D380000              	call malloc
 27377 000147B2 50                      	push rax
 27378 000147B3 BF10000000              	mov rdi, 8 * 2	; new rib
 27379 000147B8 E822380000              	call malloc
 27380 000147BD 50                      	push rax
 27381 000147BE BF10000000              	mov rdi, 8 * 2	; extended env
 27382 000147C3 E817380000              	call malloc
 27383 000147C8 488B7D10                	mov rdi, ENV
 27384 000147CC BE00000000              	mov rsi, 0
 27385 000147D1 BA01000000              	mov rdx, 1
 27386                                  .L_lambda_simple_env_loop_00a3:	; ext_env[i + 1] <-- env[i]
 27387 000147D6 4883FE01                	cmp rsi, 1
 27388 000147DA 7410                    	je .L_lambda_simple_env_end_00a3
 27389 000147DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27390 000147E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27391 000147E4 48FFC6                  	inc rsi
 27392 000147E7 48FFC2                  	inc rdx
 27393 000147EA EBEA                    	jmp .L_lambda_simple_env_loop_00a3
 27394                                  .L_lambda_simple_env_end_00a3:
 27395 000147EC 5B                      	pop rbx
 27396 000147ED BE00000000              	mov rsi, 0
 27397                                  .L_lambda_simple_params_loop_00a3:	; copy params
 27398 000147F2 4883FE02                	cmp rsi, 2
 27399 000147F6 740E                    	je .L_lambda_simple_params_end_00a3
 27400 000147F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27401 000147FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27402 00014801 48FFC6                  	inc rsi
 27403 00014804 EBEC                    	jmp .L_lambda_simple_params_loop_00a3
 27404                                  .L_lambda_simple_params_end_00a3:
 27405 00014806 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27406 00014809 4889C3                  	mov rbx, rax
 27407 0001480C 58                      	pop rax
 27408 0001480D C60004                  	mov byte [rax], T_closure
 27409 00014810 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27410 00014814 48C74009[21480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a3
 27411 0001481C E988020000              	jmp .L_lambda_simple_end_00a3
 27412                                  .L_lambda_simple_code_00a3:	; lambda-simple body
 27413 00014821 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27414 00014827 740B                    	je .L_lambda_simple_arity_check_ok_00a3
 27415 00014829 FF742410                	push qword [rsp + 8 * 2]
 27416 0001482D 6A03                    	push 3
 27417 0001482F E964370000              	jmp L_error_incorrect_arity_simple
 27418                                  .L_lambda_simple_arity_check_ok_00a3:
 27419 00014834 C8000000                	enter 0, 0
 27420                                  	; preparing a non-tail-call
 27421 00014838 488B4530                	mov rax, PARAM(2)	; param s
 27422 0001483C 50                      	push rax
 27423 0001483D 6A01                    	push 1	; arg count
 27424 0001483F 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 27425 00014847 803805                  	cmp byte [rax], T_undefined
 27426 0001484A 0F8462360000            	je L_error_fvar_undefined
 27427 00014850 803804                  	cmp byte [rax], T_closure
 27428 00014853 0F85DD360000            	jne L_error_non_closure
 27429 00014859 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27430 0001485C FF5009                  	call SOB_CLOSURE_CODE(rax)
 27431 0001485F 483D[02000000]          	cmp rax, sob_boolean_false
 27432 00014865 7409                    	je .L_if_else_0089
 27433 00014867 488B4520                	mov rax, PARAM(0)	; param target
 27434 0001486B E935020000              	jmp .L_if_end_0089
 27435                                  .L_if_else_0089:
 27436                                  	; preparing a tail-call
 27437                                  	; preparing a non-tail-call
 27438                                  	; preparing a non-tail-call
 27439                                  	; preparing a non-tail-call
 27440 00014870 488B4530                	mov rax, PARAM(2)	; param s
 27441 00014874 50                      	push rax
 27442 00014875 6A01                    	push 1	; arg count
 27443 00014877 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27444 0001487F 803805                  	cmp byte [rax], T_undefined
 27445 00014882 0F842A360000            	je L_error_fvar_undefined
 27446 00014888 803804                  	cmp byte [rax], T_closure
 27447 0001488B 0F85A5360000            	jne L_error_non_closure
 27448 00014891 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27449 00014894 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27450 00014897 50                      	push rax
 27451 00014898 6A01                    	push 1	; arg count
 27452 0001489A 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 27453 000148A2 803805                  	cmp byte [rax], T_undefined
 27454 000148A5 0F8407360000            	je L_error_fvar_undefined
 27455 000148AB 803804                  	cmp byte [rax], T_closure
 27456 000148AE 0F8582360000            	jne L_error_non_closure
 27457 000148B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27458 000148B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27459 000148BA 50                      	push rax
 27460 000148BB 48B8-                   	mov rax, L_constants + 2135
 27460 000148BD [5708000000000000] 
 27461 000148C5 50                      	push rax
 27462                                  	; preparing a non-tail-call
 27463 000148C6 488B4530                	mov rax, PARAM(2)	; param s
 27464 000148CA 50                      	push rax
 27465 000148CB 6A01                    	push 1	; arg count
 27466 000148CD 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 27467 000148D5 803805                  	cmp byte [rax], T_undefined
 27468 000148D8 0F84D4350000            	je L_error_fvar_undefined
 27469 000148DE 803804                  	cmp byte [rax], T_closure
 27470 000148E1 0F854F360000            	jne L_error_non_closure
 27471 000148E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27472 000148EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 27473 000148ED 50                      	push rax
 27474 000148EE 488B4528                	mov rax, PARAM(1)	; param i
 27475 000148F2 50                      	push rax
 27476 000148F3 488B4520                	mov rax, PARAM(0)	; param target
 27477 000148F7 50                      	push rax
 27478 000148F8 6A05                    	push 5	; arg count
 27479 000148FA 488B4510                	mov rax, ENV
 27480 000148FE 488B00                  	mov rax, qword [rax + 8 * 0]
 27481 00014901 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27482 00014905 488B00                  	mov rax, qword [rax]
 27483 00014908 803804                  	cmp byte [rax], T_closure
 27484 0001490B 0F8525360000            	jne L_error_non_closure
 27485 00014911 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27486 00014914 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27487 00014917 50                      	push rax
 27488 00014918 6A01                    	push 1	; arg count
 27489 0001491A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27490 0001491F E8BB360000              	call malloc
 27491 00014924 50                      	push rax
 27492 00014925 BF18000000              	mov rdi, 8 * 3	; new rib
 27493 0001492A E8B0360000              	call malloc
 27494 0001492F 50                      	push rax
 27495 00014930 BF18000000              	mov rdi, 8 * 3	; extended env
 27496 00014935 E8A5360000              	call malloc
 27497 0001493A 488B7D10                	mov rdi, ENV
 27498 0001493E BE00000000              	mov rsi, 0
 27499 00014943 BA01000000              	mov rdx, 1
 27500                                  .L_lambda_simple_env_loop_00a4:	; ext_env[i + 1] <-- env[i]
 27501 00014948 4883FE02                	cmp rsi, 2
 27502 0001494C 7410                    	je .L_lambda_simple_env_end_00a4
 27503 0001494E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27504 00014952 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27505 00014956 48FFC6                  	inc rsi
 27506 00014959 48FFC2                  	inc rdx
 27507 0001495C EBEA                    	jmp .L_lambda_simple_env_loop_00a4
 27508                                  .L_lambda_simple_env_end_00a4:
 27509 0001495E 5B                      	pop rbx
 27510 0001495F BE00000000              	mov rsi, 0
 27511                                  .L_lambda_simple_params_loop_00a4:	; copy params
 27512 00014964 4883FE03                	cmp rsi, 3
 27513 00014968 740E                    	je .L_lambda_simple_params_end_00a4
 27514 0001496A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27515 0001496F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27516 00014973 48FFC6                  	inc rsi
 27517 00014976 EBEC                    	jmp .L_lambda_simple_params_loop_00a4
 27518                                  .L_lambda_simple_params_end_00a4:
 27519 00014978 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27520 0001497B 4889C3                  	mov rbx, rax
 27521 0001497E 58                      	pop rax
 27522 0001497F C60004                  	mov byte [rax], T_closure
 27523 00014982 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27524 00014986 48C74009[93490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a4
 27525 0001498E E9BE000000              	jmp .L_lambda_simple_end_00a4
 27526                                  .L_lambda_simple_code_00a4:	; lambda-simple body
 27527 00014993 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27528 00014999 740B                    	je .L_lambda_simple_arity_check_ok_00a4
 27529 0001499B FF742410                	push qword [rsp + 8 * 2]
 27530 0001499F 6A01                    	push 1
 27531 000149A1 E9F2350000              	jmp L_error_incorrect_arity_simple
 27532                                  .L_lambda_simple_arity_check_ok_00a4:
 27533 000149A6 C8000000                	enter 0, 0
 27534                                  	; preparing a tail-call
 27535                                  	; preparing a non-tail-call
 27536 000149AA 488B4510                	mov rax, ENV
 27537 000149AE 488B00                  	mov rax, qword [rax + 8 * 0]
 27538 000149B1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 27539 000149B5 50                      	push rax
 27540 000149B6 6A01                    	push 1	; arg count
 27541 000149B8 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 27542 000149C0 803805                  	cmp byte [rax], T_undefined
 27543 000149C3 0F84E9340000            	je L_error_fvar_undefined
 27544 000149C9 803804                  	cmp byte [rax], T_closure
 27545 000149CC 0F8564350000            	jne L_error_non_closure
 27546 000149D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27547 000149D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27548 000149D8 50                      	push rax
 27549 000149D9 488B4520                	mov rax, PARAM(0)	; param i
 27550 000149DD 50                      	push rax
 27551 000149DE 488B4510                	mov rax, ENV
 27552 000149E2 488B00                  	mov rax, qword [rax + 8 * 0]
 27553 000149E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 27554 000149E8 50                      	push rax
 27555 000149E9 6A03                    	push 3	; arg count
 27556 000149EB 488B4510                	mov rax, ENV
 27557 000149EF 488B4008                	mov rax, qword [rax + 8 * 1]
 27558 000149F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27559 000149F6 488B00                  	mov rax, qword [rax]
 27560 000149F9 803804                  	cmp byte [rax], T_closure
 27561 000149FC 0F8534350000            	jne L_error_non_closure
 27562 00014A02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27563 00014A05 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27564 00014A08 FF7500                  	push qword[rbp]
 27565 00014A0B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27566 00014A0E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27567 00014A12 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27568 00014A16 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27569 00014A1A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27570 00014A1D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27571 00014A20 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27572 00014A25 4983C103                	add r9, 3 	 ;for getting to the params
 27573 00014A29 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27574 00014A2D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27575                                  .L_tc_recycle_frame_loop_00f3:
 27576 00014A30 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27577 00014A33 7410                    	je .L_tc_recycle_frame_done_00f3
 27578 00014A35 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27579 00014A38 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27580 00014A3B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27581 00014A3F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27582 00014A43 EBEB                    	jmp .L_tc_recycle_frame_loop_00f3
 27583                                  .L_tc_recycle_frame_done_00f3:
 27584 00014A45 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27585 00014A46 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27586 00014A4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27587 00014A4D C9                      	leave
 27588 00014A4E C21800                  	ret AND_KILL_FRAME(1)
 27589                                  .L_lambda_simple_end_00a4:	; new closure is in rax
 27590 00014A51 803804                  	cmp byte [rax], T_closure
 27591 00014A54 0F85DC340000            	jne L_error_non_closure
 27592 00014A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27593 00014A5D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27594 00014A60 FF7500                  	push qword[rbp]
 27595 00014A63 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27596 00014A66 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27597 00014A6A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27598 00014A6E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27599 00014A72 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27600 00014A75 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27601 00014A78 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27602 00014A7D 4983C103                	add r9, 3 	 ;for getting to the params
 27603 00014A81 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27604 00014A85 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27605                                  .L_tc_recycle_frame_loop_00f4:
 27606 00014A88 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27607 00014A8B 7410                    	je .L_tc_recycle_frame_done_00f4
 27608 00014A8D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27609 00014A90 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27610 00014A93 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27611 00014A97 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27612 00014A9B EBEB                    	jmp .L_tc_recycle_frame_loop_00f4
 27613                                  .L_tc_recycle_frame_done_00f4:
 27614 00014A9D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27615 00014A9E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27616 00014AA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27617                                  .L_if_end_0089:
 27618 00014AA5 C9                      	leave
 27619 00014AA6 C22800                  	ret AND_KILL_FRAME(3)
 27620                                  .L_lambda_simple_end_00a3:	; new closure is in rax
 27621 00014AA9 50                      	push rax
 27622 00014AAA 488B4520                	mov rax, PARAM(0)	; param run
 27623 00014AAE 8F00                    	pop qword [rax]
 27624 00014AB0 48B8-                   	mov rax, sob_void
 27624 00014AB2 [0000000000000000] 
 27625                                  
 27626 00014ABA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27627 00014ABF E81B350000              	call malloc
 27628 00014AC4 50                      	push rax
 27629 00014AC5 BF10000000              	mov rdi, 8 * 2	; new rib
 27630 00014ACA E810350000              	call malloc
 27631 00014ACF 50                      	push rax
 27632 00014AD0 BF10000000              	mov rdi, 8 * 2	; extended env
 27633 00014AD5 E805350000              	call malloc
 27634 00014ADA 488B7D10                	mov rdi, ENV
 27635 00014ADE BE00000000              	mov rsi, 0
 27636 00014AE3 BA01000000              	mov rdx, 1
 27637                                  .L_lambda_simple_env_loop_00a5:	; ext_env[i + 1] <-- env[i]
 27638 00014AE8 4883FE01                	cmp rsi, 1
 27639 00014AEC 7410                    	je .L_lambda_simple_env_end_00a5
 27640 00014AEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27641 00014AF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27642 00014AF6 48FFC6                  	inc rsi
 27643 00014AF9 48FFC2                  	inc rdx
 27644 00014AFC EBEA                    	jmp .L_lambda_simple_env_loop_00a5
 27645                                  .L_lambda_simple_env_end_00a5:
 27646 00014AFE 5B                      	pop rbx
 27647 00014AFF BE00000000              	mov rsi, 0
 27648                                  .L_lambda_simple_params_loop_00a5:	; copy params
 27649 00014B04 4883FE02                	cmp rsi, 2
 27650 00014B08 740E                    	je .L_lambda_simple_params_end_00a5
 27651 00014B0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27652 00014B0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27653 00014B13 48FFC6                  	inc rsi
 27654 00014B16 EBEC                    	jmp .L_lambda_simple_params_loop_00a5
 27655                                  .L_lambda_simple_params_end_00a5:
 27656 00014B18 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27657 00014B1B 4889C3                  	mov rbx, rax
 27658 00014B1E 58                      	pop rax
 27659 00014B1F C60004                  	mov byte [rax], T_closure
 27660 00014B22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27661 00014B26 48C74009[334B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a5
 27662 00014B2E E98B010000              	jmp .L_lambda_simple_end_00a5
 27663                                  .L_lambda_simple_code_00a5:	; lambda-simple body
 27664 00014B33 48837C241005            	cmp qword [rsp + 8 * 2], 5
 27665 00014B39 740B                    	je .L_lambda_simple_arity_check_ok_00a5
 27666 00014B3B FF742410                	push qword [rsp + 8 * 2]
 27667 00014B3F 6A05                    	push 5
 27668 00014B41 E952340000              	jmp L_error_incorrect_arity_simple
 27669                                  .L_lambda_simple_arity_check_ok_00a5:
 27670 00014B46 C8000000                	enter 0, 0
 27671                                  	; preparing a non-tail-call
 27672 00014B4A 488B4540                	mov rax, PARAM(4)	; param limit
 27673 00014B4E 50                      	push rax
 27674 00014B4F 488B4538                	mov rax, PARAM(3)	; param j
 27675 00014B53 50                      	push rax
 27676 00014B54 6A02                    	push 2	; arg count
 27677 00014B56 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 27678 00014B5E 803805                  	cmp byte [rax], T_undefined
 27679 00014B61 0F844B330000            	je L_error_fvar_undefined
 27680 00014B67 803804                  	cmp byte [rax], T_closure
 27681 00014B6A 0F85C6330000            	jne L_error_non_closure
 27682 00014B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27683 00014B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27684 00014B76 483D[02000000]          	cmp rax, sob_boolean_false
 27685 00014B7C 0F8434010000            	je .L_if_else_008a
 27686                                  	; preparing a non-tail-call
 27687                                  	; preparing a non-tail-call
 27688 00014B82 488B4538                	mov rax, PARAM(3)	; param j
 27689 00014B86 50                      	push rax
 27690 00014B87 488B4530                	mov rax, PARAM(2)	; param str
 27691 00014B8B 50                      	push rax
 27692 00014B8C 6A02                    	push 2	; arg count
 27693 00014B8E 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 27694 00014B96 803805                  	cmp byte [rax], T_undefined
 27695 00014B99 0F8413330000            	je L_error_fvar_undefined
 27696 00014B9F 803804                  	cmp byte [rax], T_closure
 27697 00014BA2 0F858E330000            	jne L_error_non_closure
 27698 00014BA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27699 00014BAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 27700 00014BAE 50                      	push rax
 27701 00014BAF 488B4528                	mov rax, PARAM(1)	; param i
 27702 00014BB3 50                      	push rax
 27703 00014BB4 488B4520                	mov rax, PARAM(0)	; param target
 27704 00014BB8 50                      	push rax
 27705 00014BB9 6A03                    	push 3	; arg count
 27706 00014BBB 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 27707 00014BC3 803805                  	cmp byte [rax], T_undefined
 27708 00014BC6 0F84E6320000            	je L_error_fvar_undefined
 27709 00014BCC 803804                  	cmp byte [rax], T_closure
 27710 00014BCF 0F8561330000            	jne L_error_non_closure
 27711 00014BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27712 00014BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27713                                  
 27714                                  	; preparing a tail-call
 27715 00014BDB 488B4540                	mov rax, PARAM(4)	; param limit
 27716 00014BDF 50                      	push rax
 27717                                  	; preparing a non-tail-call
 27718 00014BE0 48B8-                   	mov rax, L_constants + 2270
 27718 00014BE2 [DE08000000000000] 
 27719 00014BEA 50                      	push rax
 27720 00014BEB 488B4538                	mov rax, PARAM(3)	; param j
 27721 00014BEF 50                      	push rax
 27722 00014BF0 6A02                    	push 2	; arg count
 27723 00014BF2 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27724 00014BFA 803805                  	cmp byte [rax], T_undefined
 27725 00014BFD 0F84AF320000            	je L_error_fvar_undefined
 27726 00014C03 803804                  	cmp byte [rax], T_closure
 27727 00014C06 0F852A330000            	jne L_error_non_closure
 27728 00014C0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27729 00014C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27730 00014C12 50                      	push rax
 27731 00014C13 488B4530                	mov rax, PARAM(2)	; param str
 27732 00014C17 50                      	push rax
 27733                                  	; preparing a non-tail-call
 27734 00014C18 48B8-                   	mov rax, L_constants + 2270
 27734 00014C1A [DE08000000000000] 
 27735 00014C22 50                      	push rax
 27736 00014C23 488B4528                	mov rax, PARAM(1)	; param i
 27737 00014C27 50                      	push rax
 27738 00014C28 6A02                    	push 2	; arg count
 27739 00014C2A 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27740 00014C32 803805                  	cmp byte [rax], T_undefined
 27741 00014C35 0F8477320000            	je L_error_fvar_undefined
 27742 00014C3B 803804                  	cmp byte [rax], T_closure
 27743 00014C3E 0F85F2320000            	jne L_error_non_closure
 27744 00014C44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27745 00014C47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27746 00014C4A 50                      	push rax
 27747 00014C4B 488B4520                	mov rax, PARAM(0)	; param target
 27748 00014C4F 50                      	push rax
 27749 00014C50 6A05                    	push 5	; arg count
 27750 00014C52 488B4510                	mov rax, ENV
 27751 00014C56 488B00                  	mov rax, qword [rax + 8 * 0]
 27752 00014C59 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27753 00014C5D 488B00                  	mov rax, qword [rax]
 27754 00014C60 803804                  	cmp byte [rax], T_closure
 27755 00014C63 0F85CD320000            	jne L_error_non_closure
 27756 00014C69 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27757 00014C6C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27758 00014C6F FF7500                  	push qword[rbp]
 27759 00014C72 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27760 00014C75 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27761 00014C79 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27762 00014C7D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27763 00014C81 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27764 00014C84 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27765 00014C87 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27766 00014C8C 4983C103                	add r9, 3 	 ;for getting to the params
 27767 00014C90 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27768 00014C94 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27769                                  .L_tc_recycle_frame_loop_00f5:
 27770 00014C97 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27771 00014C9A 7410                    	je .L_tc_recycle_frame_done_00f5
 27772 00014C9C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27773 00014C9F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27774 00014CA2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27775 00014CA6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27776 00014CAA EBEB                    	jmp .L_tc_recycle_frame_loop_00f5
 27777                                  .L_tc_recycle_frame_done_00f5:
 27778 00014CAC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27779 00014CAD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27780 00014CB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27781 00014CB4 EB04                    	jmp .L_if_end_008a
 27782                                  .L_if_else_008a:
 27783 00014CB6 488B4528                	mov rax, PARAM(1)	; param i
 27784                                  .L_if_end_008a:
 27785 00014CBA C9                      	leave
 27786 00014CBB C23800                  	ret AND_KILL_FRAME(5)
 27787                                  .L_lambda_simple_end_00a5:	; new closure is in rax
 27788 00014CBE 50                      	push rax
 27789 00014CBF 488B4528                	mov rax, PARAM(1)	; param add
 27790 00014CC3 8F00                    	pop qword [rax]
 27791 00014CC5 48B8-                   	mov rax, sob_void
 27791 00014CC7 [0000000000000000] 
 27792                                  
 27793 00014CCF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27794 00014CD4 E806330000              	call malloc
 27795 00014CD9 50                      	push rax
 27796 00014CDA BF10000000              	mov rdi, 8 * 2	; new rib
 27797 00014CDF E8FB320000              	call malloc
 27798 00014CE4 50                      	push rax
 27799 00014CE5 BF10000000              	mov rdi, 8 * 2	; extended env
 27800 00014CEA E8F0320000              	call malloc
 27801 00014CEF 488B7D10                	mov rdi, ENV
 27802 00014CF3 BE00000000              	mov rsi, 0
 27803 00014CF8 BA01000000              	mov rdx, 1
 27804                                  .L_lambda_opt_env_loop_0017:	; ext_env[i + 1] <-- env[i]
 27805 00014CFD 4883FE01                	cmp rsi, 1
 27806 00014D01 7410                    	je .L_lambda_opt_env_end_0017
 27807 00014D03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27808 00014D07 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27809 00014D0B 48FFC6                  	inc rsi
 27810 00014D0E 48FFC2                  	inc rdx
 27811 00014D11 EBEA                    	jmp .L_lambda_opt_env_loop_0017
 27812                                  .L_lambda_opt_env_end_0017:
 27813 00014D13 5B                      	pop rbx
 27814 00014D14 BE00000000              	mov rsi, 0
 27815                                  .L_lambda_opt_params_loop_0017:	; copy params
 27816 00014D19 4883FE02                	cmp rsi, 2
 27817 00014D1D 740E                    	je .L_lambda_opt_params_end_0017
 27818 00014D1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27819 00014D24 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27820 00014D28 48FFC6                  	inc rsi
 27821 00014D2B EBEC                    	jmp .L_lambda_opt_params_loop_0017
 27822                                  .L_lambda_opt_params_end_0017:
 27823 00014D2D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27824 00014D30 4889C3                  	mov rbx, rax
 27825 00014D33 58                      	pop rax
 27826 00014D34 C60004                  	mov byte [rax], T_closure
 27827 00014D37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27828 00014D3B 48C74009[484D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0017
 27829 00014D43 E91F030000              	jmp .L_lambda_opt_end_0017
 27830                                  .L_lambda_opt_code_0017:	; lambda-opt body
 27831 00014D48 48837C241000            	cmp qword [rsp + 8 * 2], 0
 27832 00014D4E 7411                    	je .L_lambda_opt_arity_check_exact_0017
 27833 00014D50 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0017
 27834 00014D56 FF742410                	push qword [rsp + 8 * 2]
 27835 00014D5A 6A00                    	push 0
 27836 00014D5C E94B320000              	jmp L_error_incorrect_arity_opt
 27837                                  .L_lambda_opt_arity_check_exact_0017:
 27838 00014D61 4883EC08                	sub rsp, 8
 27839 00014D65 488B442408              	mov rax, qword[rsp + 8 *1]
 27840 00014D6A 48890424                	mov qword[rsp], rax  
 27841 00014D6E 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 27842 00014D73 4889442408              	mov qword[rsp + 8 * 1], rax
 27843 00014D78 B801000000              	mov rax, 1
 27844 00014D7D 4889442410              	mov qword[rsp + 8 *2], rax
 27845 00014D82 48B8-                   	mov rax, sob_nil
 27845 00014D84 [0100000000000000] 
 27846 00014D8C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 27847 00014D91 C8000000                	enter 0, 0
 27848                                  	; preparing a tail-call
 27849 00014D95 488B4520                	mov rax, PARAM(0)	; param strings
 27850 00014D99 50                      	push rax
 27851 00014D9A 48B8-                   	mov rax, L_constants + 2135
 27851 00014D9C [5708000000000000] 
 27852 00014DA4 50                      	push rax
 27853                                  	; preparing a non-tail-call
 27854                                  	; preparing a non-tail-call
 27855                                  	; preparing a non-tail-call
 27856 00014DA5 488B4520                	mov rax, PARAM(0)	; param strings
 27857 00014DA9 50                      	push rax
 27858 00014DAA 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 27859 00014DB2 803805                  	cmp byte [rax], T_undefined
 27860 00014DB5 0F84F7300000            	je L_error_fvar_undefined
 27861 00014DBB 50                      	push rax
 27862 00014DBC 6A02                    	push 2	; arg count
 27863 00014DBE 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 27864 00014DC6 803805                  	cmp byte [rax], T_undefined
 27865 00014DC9 0F84E3300000            	je L_error_fvar_undefined
 27866 00014DCF 803804                  	cmp byte [rax], T_closure
 27867 00014DD2 0F855E310000            	jne L_error_non_closure
 27868 00014DD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27869 00014DDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 27870 00014DDE 50                      	push rax
 27871 00014DDF 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 27872 00014DE7 803805                  	cmp byte [rax], T_undefined
 27873 00014DEA 0F84C2300000            	je L_error_fvar_undefined
 27874 00014DF0 50                      	push rax
 27875 00014DF1 6A02                    	push 2	; arg count
 27876 00014DF3 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 27877 00014DFB 803805                  	cmp byte [rax], T_undefined
 27878 00014DFE 0F84AE300000            	je L_error_fvar_undefined
 27879 00014E04 803804                  	cmp byte [rax], T_closure
 27880 00014E07 0F8529310000            	jne L_error_non_closure
 27881 00014E0D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27882 00014E10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27883 00014E13 50                      	push rax
 27884 00014E14 6A01                    	push 1	; arg count
 27885 00014E16 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 27886 00014E1E 803805                  	cmp byte [rax], T_undefined
 27887 00014E21 0F848B300000            	je L_error_fvar_undefined
 27888 00014E27 803804                  	cmp byte [rax], T_closure
 27889 00014E2A 0F8506310000            	jne L_error_non_closure
 27890 00014E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27891 00014E33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27892 00014E36 50                      	push rax
 27893 00014E37 6A03                    	push 3	; arg count
 27894 00014E39 488B4510                	mov rax, ENV
 27895 00014E3D 488B00                  	mov rax, qword [rax + 8 * 0]
 27896 00014E40 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27897 00014E43 488B00                  	mov rax, qword [rax]
 27898 00014E46 803804                  	cmp byte [rax], T_closure
 27899 00014E49 0F85E7300000            	jne L_error_non_closure
 27900 00014E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27901 00014E52 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27902 00014E55 FF7500                  	push qword[rbp]
 27903 00014E58 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27904 00014E5B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27905 00014E5F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27906 00014E63 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27907 00014E67 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27908 00014E6A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27909 00014E6D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27910 00014E72 4983C103                	add r9, 3 	 ;for getting to the params
 27911 00014E76 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27912 00014E7A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27913                                  .L_tc_recycle_frame_loop_00f7:
 27914 00014E7D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27915 00014E80 7410                    	je .L_tc_recycle_frame_done_00f7
 27916 00014E82 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27917 00014E85 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27918 00014E88 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27919 00014E8C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27920 00014E90 EBEB                    	jmp .L_tc_recycle_frame_loop_00f7
 27921                                  .L_tc_recycle_frame_done_00f7:
 27922 00014E92 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27923 00014E93 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27924 00014E97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27925 00014E9A C9                      	leave
 27926 00014E9B C21800                  	ret AND_KILL_FRAME(1)
 27927 00014E9E E9C4010000              	jmp .L_lambda_opt_end_0017	; new closure is in rax
 27928                                  .L_lambda_opt_arity_check_more_0017:
 27929 00014EA3 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 27930 00014EA8 49B9-                   	mov r9, sob_nil
 27930 00014EAA [0100000000000000] 
 27931 00014EB2 4889E3                  	mov rbx, rsp 
 27932 00014EB5 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 27933 00014EB9 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 27934 00014EBC 49C1E003                	shl r8, 3
 27935 00014EC0 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 27936 00014EC3 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 27937                                  .L_lambda_opt_stack_shrink_loop_0017:
 27938 00014EC8 4983F800                	cmp r8, 0
 27939 00014ECC 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0017
 27940 00014ECE BF11000000              	mov rdi, 1+8+8	;for pair
 27941 00014ED3 E807310000              	call malloc	 ;to create the pair in the stack
 27942 00014ED8 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 27943 00014EDB 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 27944 00014EDE 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 27945 00014EE2 4C894809                 	mov qword[rax+1+8],r9
 27946 00014EE6 4989C1                  	mov r9, rax	 ; for the recursion 
 27947 00014EE9 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 27948 00014EEC 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 27949 00014EF0 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0017
 27950                                  .L_lambda_opt_stack_shrink_loop_exit_0017:
 27951 00014EF2 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 27952 00014EF7 4883E901                	sub rcx, 1
 27953 00014EFB 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 27954 00014EFF 4801CC                  	add rsp, rcx	 ;shrinking the stack
 27955 00014F02 4889E0                  	mov rax, rsp
 27956 00014F05 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 27957 00014F08 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 27958 00014F0C 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 27959 00014F0F 4883C018                	add rax, 3 * 8 	;now rax is param 0
 27960 00014F13 49C1E003                	shl r8, 3 	; convert to byte
 27961 00014F17 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 27962 00014F1A 4C8908                  	mov qword[rax], r9	;puting the list at the top
 27963 00014F1D 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 27964 00014F21 4889E3                  	mov rbx, rsp 
 27965 00014F24 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 27966 00014F27 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 27967 00014F2D 49FFCA                  	dec r10 
 27968 00014F30 49C1E203                	shl r10, 3	;to get bytes
 27969 00014F34 4883C318                	add rbx, 3*8 	;rbx is the first param
 27970 00014F38 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 27971 00014F3B 4889E0                  	mov rax, rsp
 27972 00014F3E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 27973 00014F41 48C744241001000000      	mov qword [rsp+2*8], 1
 27974 00014F4A 488B5808                	mov rbx, qword[rax + 8 *1]
 27975 00014F4E 48895C2408              	mov qword [rsp + 1*8] ,rbx
 27976 00014F53 488B18                  	mov rbx, qword[rax]
 27977 00014F56 48891C24                	mov qword [rsp], rbx
 27978 00014F5A C8000000                	enter 0, 0
 27979                                  	; preparing a tail-call
 27980 00014F5E 488B4520                	mov rax, PARAM(0)	; param strings
 27981 00014F62 50                      	push rax
 27982 00014F63 48B8-                   	mov rax, L_constants + 2135
 27982 00014F65 [5708000000000000] 
 27983 00014F6D 50                      	push rax
 27984                                  	; preparing a non-tail-call
 27985                                  	; preparing a non-tail-call
 27986                                  	; preparing a non-tail-call
 27987 00014F6E 488B4520                	mov rax, PARAM(0)	; param strings
 27988 00014F72 50                      	push rax
 27989 00014F73 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 27990 00014F7B 803805                  	cmp byte [rax], T_undefined
 27991 00014F7E 0F842E2F0000            	je L_error_fvar_undefined
 27992 00014F84 50                      	push rax
 27993 00014F85 6A02                    	push 2	; arg count
 27994 00014F87 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 27995 00014F8F 803805                  	cmp byte [rax], T_undefined
 27996 00014F92 0F841A2F0000            	je L_error_fvar_undefined
 27997 00014F98 803804                  	cmp byte [rax], T_closure
 27998 00014F9B 0F85952F0000            	jne L_error_non_closure
 27999 00014FA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28000 00014FA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28001 00014FA7 50                      	push rax
 28002 00014FA8 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28003 00014FB0 803805                  	cmp byte [rax], T_undefined
 28004 00014FB3 0F84F92E0000            	je L_error_fvar_undefined
 28005 00014FB9 50                      	push rax
 28006 00014FBA 6A02                    	push 2	; arg count
 28007 00014FBC 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 28008 00014FC4 803805                  	cmp byte [rax], T_undefined
 28009 00014FC7 0F84E52E0000            	je L_error_fvar_undefined
 28010 00014FCD 803804                  	cmp byte [rax], T_closure
 28011 00014FD0 0F85602F0000            	jne L_error_non_closure
 28012 00014FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28013 00014FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28014 00014FDC 50                      	push rax
 28015 00014FDD 6A01                    	push 1	; arg count
 28016 00014FDF 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 28017 00014FE7 803805                  	cmp byte [rax], T_undefined
 28018 00014FEA 0F84C22E0000            	je L_error_fvar_undefined
 28019 00014FF0 803804                  	cmp byte [rax], T_closure
 28020 00014FF3 0F853D2F0000            	jne L_error_non_closure
 28021 00014FF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28022 00014FFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28023 00014FFF 50                      	push rax
 28024 00015000 6A03                    	push 3	; arg count
 28025 00015002 488B4510                	mov rax, ENV
 28026 00015006 488B00                  	mov rax, qword [rax + 8 * 0]
 28027 00015009 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28028 0001500C 488B00                  	mov rax, qword [rax]
 28029 0001500F 803804                  	cmp byte [rax], T_closure
 28030 00015012 0F851E2F0000            	jne L_error_non_closure
 28031 00015018 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28032 0001501B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28033 0001501E FF7500                  	push qword[rbp]
 28034 00015021 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28035 00015024 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28036 00015028 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28037 0001502C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28038 00015030 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28039 00015033 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28040 00015036 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28041 0001503B 4983C103                	add r9, 3 	 ;for getting to the params
 28042 0001503F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28043 00015043 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28044                                  .L_tc_recycle_frame_loop_00f6:
 28045 00015046 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28046 00015049 7410                    	je .L_tc_recycle_frame_done_00f6
 28047 0001504B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28048 0001504E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28049 00015051 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28050 00015055 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28051 00015059 EBEB                    	jmp .L_tc_recycle_frame_loop_00f6
 28052                                  .L_tc_recycle_frame_done_00f6:
 28053 0001505B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28054 0001505C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28055 00015060 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28056 00015063 C9                      	leave
 28057 00015064 C21800                  	ret AND_KILL_FRAME(1)
 28058                                  .L_lambda_opt_end_0017:	; new closure is in rax
 28059 00015067 C9                      	leave
 28060 00015068 C22000                  	ret AND_KILL_FRAME(2)
 28061                                  .L_lambda_simple_end_00a2:	; new closure is in rax
 28062 0001506B 803804                  	cmp byte [rax], T_closure
 28063 0001506E 0F85C22E0000            	jne L_error_non_closure
 28064 00015074 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28065 00015077 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28066 0001507A 48890425[BD150000]      	mov qword [free_var_120], rax
 28067 00015082 48B8-                   	mov rax, sob_void
 28067 00015084 [0000000000000000] 
 28068                                  
 28069 0001508C 4889C7                  	mov rdi, rax
 28070 0001508F E8A0310000              	call print_sexpr_if_not_void
 28071                                  	; preparing a non-tail-call
 28072 00015094 48B8-                   	mov rax, L_constants + 1993
 28072 00015096 [C907000000000000] 
 28073 0001509E 50                      	push rax
 28074 0001509F 48B8-                   	mov rax, L_constants + 1993
 28074 000150A1 [C907000000000000] 
 28075 000150A9 50                      	push rax
 28076 000150AA 6A02                    	push 2	; arg count
 28077 000150AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28078 000150B1 E8292F0000              	call malloc
 28079 000150B6 50                      	push rax
 28080 000150B7 BF00000000              	mov rdi, 8 * 0	; new rib
 28081 000150BC E81E2F0000              	call malloc
 28082 000150C1 50                      	push rax
 28083 000150C2 BF08000000              	mov rdi, 8 * 1	; extended env
 28084 000150C7 E8132F0000              	call malloc
 28085 000150CC 488B7D10                	mov rdi, ENV
 28086 000150D0 BE00000000              	mov rsi, 0
 28087 000150D5 BA01000000              	mov rdx, 1
 28088                                  .L_lambda_simple_env_loop_00a6:	; ext_env[i + 1] <-- env[i]
 28089 000150DA 4883FE00                	cmp rsi, 0
 28090 000150DE 7410                    	je .L_lambda_simple_env_end_00a6
 28091 000150E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28092 000150E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28093 000150E8 48FFC6                  	inc rsi
 28094 000150EB 48FFC2                  	inc rdx
 28095 000150EE EBEA                    	jmp .L_lambda_simple_env_loop_00a6
 28096                                  .L_lambda_simple_env_end_00a6:
 28097 000150F0 5B                      	pop rbx
 28098 000150F1 BE00000000              	mov rsi, 0
 28099                                  .L_lambda_simple_params_loop_00a6:	; copy params
 28100 000150F6 4883FE00                	cmp rsi, 0
 28101 000150FA 740E                    	je .L_lambda_simple_params_end_00a6
 28102 000150FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28103 00015101 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28104 00015105 48FFC6                  	inc rsi
 28105 00015108 EBEC                    	jmp .L_lambda_simple_params_loop_00a6
 28106                                  .L_lambda_simple_params_end_00a6:
 28107 0001510A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28108 0001510D 4889C3                  	mov rbx, rax
 28109 00015110 58                      	pop rax
 28110 00015111 C60004                  	mov byte [rax], T_closure
 28111 00015114 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28112 00015118 48C74009[25510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a6
 28113 00015120 E918090000              	jmp .L_lambda_simple_end_00a6
 28114                                  .L_lambda_simple_code_00a6:	; lambda-simple body
 28115 00015125 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28116 0001512B 740B                    	je .L_lambda_simple_arity_check_ok_00a6
 28117 0001512D FF742410                	push qword [rsp + 8 * 2]
 28118 00015131 6A02                    	push 2
 28119 00015133 E9602E0000              	jmp L_error_incorrect_arity_simple
 28120                                  .L_lambda_simple_arity_check_ok_00a6:
 28121 00015138 C8000000                	enter 0, 0
 28122 0001513C BF08000000              	mov rdi, 8*1
 28123 00015141 E8992E0000              	call malloc
 28124 00015146 488B5D20                	mov rbx, PARAM(0)
 28125 0001514A 488918                  	mov qword[rax], rbx
 28126 0001514D 48894520                	mov PARAM(0), rax
 28127 00015151 48B8-                   	mov rax, sob_void
 28127 00015153 [0000000000000000] 
 28128                                  
 28129 0001515B BF08000000              	mov rdi, 8*1
 28130 00015160 E87A2E0000              	call malloc
 28131 00015165 488B5D28                	mov rbx, PARAM(1)
 28132 00015169 488918                  	mov qword[rax], rbx
 28133 0001516C 48894528                	mov PARAM(1), rax
 28134 00015170 48B8-                   	mov rax, sob_void
 28134 00015172 [0000000000000000] 
 28135                                  
 28136 0001517A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28137 0001517F E85B2E0000              	call malloc
 28138 00015184 50                      	push rax
 28139 00015185 BF10000000              	mov rdi, 8 * 2	; new rib
 28140 0001518A E8502E0000              	call malloc
 28141 0001518F 50                      	push rax
 28142 00015190 BF10000000              	mov rdi, 8 * 2	; extended env
 28143 00015195 E8452E0000              	call malloc
 28144 0001519A 488B7D10                	mov rdi, ENV
 28145 0001519E BE00000000              	mov rsi, 0
 28146 000151A3 BA01000000              	mov rdx, 1
 28147                                  .L_lambda_simple_env_loop_00a7:	; ext_env[i + 1] <-- env[i]
 28148 000151A8 4883FE01                	cmp rsi, 1
 28149 000151AC 7410                    	je .L_lambda_simple_env_end_00a7
 28150 000151AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28151 000151B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28152 000151B6 48FFC6                  	inc rsi
 28153 000151B9 48FFC2                  	inc rdx
 28154 000151BC EBEA                    	jmp .L_lambda_simple_env_loop_00a7
 28155                                  .L_lambda_simple_env_end_00a7:
 28156 000151BE 5B                      	pop rbx
 28157 000151BF BE00000000              	mov rsi, 0
 28158                                  .L_lambda_simple_params_loop_00a7:	; copy params
 28159 000151C4 4883FE02                	cmp rsi, 2
 28160 000151C8 740E                    	je .L_lambda_simple_params_end_00a7
 28161 000151CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28162 000151CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28163 000151D3 48FFC6                  	inc rsi
 28164 000151D6 EBEC                    	jmp .L_lambda_simple_params_loop_00a7
 28165                                  .L_lambda_simple_params_end_00a7:
 28166 000151D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28167 000151DB 4889C3                  	mov rbx, rax
 28168 000151DE 58                      	pop rax
 28169 000151DF C60004                  	mov byte [rax], T_closure
 28170 000151E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28171 000151E6 48C74009[F3510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a7
 28172 000151EE E988020000              	jmp .L_lambda_simple_end_00a7
 28173                                  .L_lambda_simple_code_00a7:	; lambda-simple body
 28174 000151F3 48837C241003            	cmp qword [rsp + 8 * 2], 3
 28175 000151F9 740B                    	je .L_lambda_simple_arity_check_ok_00a7
 28176 000151FB FF742410                	push qword [rsp + 8 * 2]
 28177 000151FF 6A03                    	push 3
 28178 00015201 E9922D0000              	jmp L_error_incorrect_arity_simple
 28179                                  .L_lambda_simple_arity_check_ok_00a7:
 28180 00015206 C8000000                	enter 0, 0
 28181                                  	; preparing a non-tail-call
 28182 0001520A 488B4530                	mov rax, PARAM(2)	; param s
 28183 0001520E 50                      	push rax
 28184 0001520F 6A01                    	push 1	; arg count
 28185 00015211 488B0425[E0140000]      	mov rax, qword [free_var_107]	; free var null?
 28186 00015219 803805                  	cmp byte [rax], T_undefined
 28187 0001521C 0F84902C0000            	je L_error_fvar_undefined
 28188 00015222 803804                  	cmp byte [rax], T_closure
 28189 00015225 0F850B2D0000            	jne L_error_non_closure
 28190 0001522B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28191 0001522E FF5009                  	call SOB_CLOSURE_CODE(rax)
 28192 00015231 483D[02000000]          	cmp rax, sob_boolean_false
 28193 00015237 7409                    	je .L_if_else_008b
 28194 00015239 488B4520                	mov rax, PARAM(0)	; param target
 28195 0001523D E935020000              	jmp .L_if_end_008b
 28196                                  .L_if_else_008b:
 28197                                  	; preparing a tail-call
 28198                                  	; preparing a non-tail-call
 28199                                  	; preparing a non-tail-call
 28200                                  	; preparing a non-tail-call
 28201 00015242 488B4530                	mov rax, PARAM(2)	; param s
 28202 00015246 50                      	push rax
 28203 00015247 6A01                    	push 1	; arg count
 28204 00015249 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 28205 00015251 803805                  	cmp byte [rax], T_undefined
 28206 00015254 0F84582C0000            	je L_error_fvar_undefined
 28207 0001525A 803804                  	cmp byte [rax], T_closure
 28208 0001525D 0F85D32C0000            	jne L_error_non_closure
 28209 00015263 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28210 00015266 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28211 00015269 50                      	push rax
 28212 0001526A 6A01                    	push 1	; arg count
 28213 0001526C 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28214 00015274 803805                  	cmp byte [rax], T_undefined
 28215 00015277 0F84352C0000            	je L_error_fvar_undefined
 28216 0001527D 803804                  	cmp byte [rax], T_closure
 28217 00015280 0F85B02C0000            	jne L_error_non_closure
 28218 00015286 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28219 00015289 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28220 0001528C 50                      	push rax
 28221 0001528D 48B8-                   	mov rax, L_constants + 2135
 28221 0001528F [5708000000000000] 
 28222 00015297 50                      	push rax
 28223                                  	; preparing a non-tail-call
 28224 00015298 488B4530                	mov rax, PARAM(2)	; param s
 28225 0001529C 50                      	push rax
 28226 0001529D 6A01                    	push 1	; arg count
 28227 0001529F 488B0425[06110000]      	mov rax, qword [free_var_49]	; free var car
 28228 000152A7 803805                  	cmp byte [rax], T_undefined
 28229 000152AA 0F84022C0000            	je L_error_fvar_undefined
 28230 000152B0 803804                  	cmp byte [rax], T_closure
 28231 000152B3 0F857D2C0000            	jne L_error_non_closure
 28232 000152B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28233 000152BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28234 000152BF 50                      	push rax
 28235 000152C0 488B4528                	mov rax, PARAM(1)	; param i
 28236 000152C4 50                      	push rax
 28237 000152C5 488B4520                	mov rax, PARAM(0)	; param target
 28238 000152C9 50                      	push rax
 28239 000152CA 6A05                    	push 5	; arg count
 28240 000152CC 488B4510                	mov rax, ENV
 28241 000152D0 488B00                  	mov rax, qword [rax + 8 * 0]
 28242 000152D3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28243 000152D7 488B00                  	mov rax, qword [rax]
 28244 000152DA 803804                  	cmp byte [rax], T_closure
 28245 000152DD 0F85532C0000            	jne L_error_non_closure
 28246 000152E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28247 000152E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28248 000152E9 50                      	push rax
 28249 000152EA 6A01                    	push 1	; arg count
 28250 000152EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28251 000152F1 E8E92C0000              	call malloc
 28252 000152F6 50                      	push rax
 28253 000152F7 BF18000000              	mov rdi, 8 * 3	; new rib
 28254 000152FC E8DE2C0000              	call malloc
 28255 00015301 50                      	push rax
 28256 00015302 BF18000000              	mov rdi, 8 * 3	; extended env
 28257 00015307 E8D32C0000              	call malloc
 28258 0001530C 488B7D10                	mov rdi, ENV
 28259 00015310 BE00000000              	mov rsi, 0
 28260 00015315 BA01000000              	mov rdx, 1
 28261                                  .L_lambda_simple_env_loop_00a8:	; ext_env[i + 1] <-- env[i]
 28262 0001531A 4883FE02                	cmp rsi, 2
 28263 0001531E 7410                    	je .L_lambda_simple_env_end_00a8
 28264 00015320 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28265 00015324 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28266 00015328 48FFC6                  	inc rsi
 28267 0001532B 48FFC2                  	inc rdx
 28268 0001532E EBEA                    	jmp .L_lambda_simple_env_loop_00a8
 28269                                  .L_lambda_simple_env_end_00a8:
 28270 00015330 5B                      	pop rbx
 28271 00015331 BE00000000              	mov rsi, 0
 28272                                  .L_lambda_simple_params_loop_00a8:	; copy params
 28273 00015336 4883FE03                	cmp rsi, 3
 28274 0001533A 740E                    	je .L_lambda_simple_params_end_00a8
 28275 0001533C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28276 00015341 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28277 00015345 48FFC6                  	inc rsi
 28278 00015348 EBEC                    	jmp .L_lambda_simple_params_loop_00a8
 28279                                  .L_lambda_simple_params_end_00a8:
 28280 0001534A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28281 0001534D 4889C3                  	mov rbx, rax
 28282 00015350 58                      	pop rax
 28283 00015351 C60004                  	mov byte [rax], T_closure
 28284 00015354 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28285 00015358 48C74009[65530100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a8
 28286 00015360 E9BE000000              	jmp .L_lambda_simple_end_00a8
 28287                                  .L_lambda_simple_code_00a8:	; lambda-simple body
 28288 00015365 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28289 0001536B 740B                    	je .L_lambda_simple_arity_check_ok_00a8
 28290 0001536D FF742410                	push qword [rsp + 8 * 2]
 28291 00015371 6A01                    	push 1
 28292 00015373 E9202C0000              	jmp L_error_incorrect_arity_simple
 28293                                  .L_lambda_simple_arity_check_ok_00a8:
 28294 00015378 C8000000                	enter 0, 0
 28295                                  	; preparing a tail-call
 28296                                  	; preparing a non-tail-call
 28297 0001537C 488B4510                	mov rax, ENV
 28298 00015380 488B00                  	mov rax, qword [rax + 8 * 0]
 28299 00015383 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 28300 00015387 50                      	push rax
 28301 00015388 6A01                    	push 1	; arg count
 28302 0001538A 488B0425[05120000]      	mov rax, qword [free_var_64]	; free var cdr
 28303 00015392 803805                  	cmp byte [rax], T_undefined
 28304 00015395 0F84172B0000            	je L_error_fvar_undefined
 28305 0001539B 803804                  	cmp byte [rax], T_closure
 28306 0001539E 0F85922B0000            	jne L_error_non_closure
 28307 000153A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28308 000153A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28309 000153AA 50                      	push rax
 28310 000153AB 488B4520                	mov rax, PARAM(0)	; param i
 28311 000153AF 50                      	push rax
 28312 000153B0 488B4510                	mov rax, ENV
 28313 000153B4 488B00                  	mov rax, qword [rax + 8 * 0]
 28314 000153B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 28315 000153BA 50                      	push rax
 28316 000153BB 6A03                    	push 3	; arg count
 28317 000153BD 488B4510                	mov rax, ENV
 28318 000153C1 488B4008                	mov rax, qword [rax + 8 * 1]
 28319 000153C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28320 000153C8 488B00                  	mov rax, qword [rax]
 28321 000153CB 803804                  	cmp byte [rax], T_closure
 28322 000153CE 0F85622B0000            	jne L_error_non_closure
 28323 000153D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28324 000153D7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28325 000153DA FF7500                  	push qword[rbp]
 28326 000153DD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28327 000153E0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28328 000153E4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28329 000153E8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28330 000153EC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28331 000153EF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28332 000153F2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28333 000153F7 4983C103                	add r9, 3 	 ;for getting to the params
 28334 000153FB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28335 000153FF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28336                                  .L_tc_recycle_frame_loop_00f8:
 28337 00015402 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28338 00015405 7410                    	je .L_tc_recycle_frame_done_00f8
 28339 00015407 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28340 0001540A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28341 0001540D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28342 00015411 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28343 00015415 EBEB                    	jmp .L_tc_recycle_frame_loop_00f8
 28344                                  .L_tc_recycle_frame_done_00f8:
 28345 00015417 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28346 00015418 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28347 0001541C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28348 0001541F C9                      	leave
 28349 00015420 C21800                  	ret AND_KILL_FRAME(1)
 28350                                  .L_lambda_simple_end_00a8:	; new closure is in rax
 28351 00015423 803804                  	cmp byte [rax], T_closure
 28352 00015426 0F850A2B0000            	jne L_error_non_closure
 28353 0001542C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28354 0001542F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28355 00015432 FF7500                  	push qword[rbp]
 28356 00015435 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28357 00015438 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28358 0001543C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28359 00015440 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28360 00015444 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28361 00015447 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28362 0001544A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28363 0001544F 4983C103                	add r9, 3 	 ;for getting to the params
 28364 00015453 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28365 00015457 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28366                                  .L_tc_recycle_frame_loop_00f9:
 28367 0001545A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28368 0001545D 7410                    	je .L_tc_recycle_frame_done_00f9
 28369 0001545F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28370 00015462 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28371 00015465 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28372 00015469 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28373 0001546D EBEB                    	jmp .L_tc_recycle_frame_loop_00f9
 28374                                  .L_tc_recycle_frame_done_00f9:
 28375 0001546F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28376 00015470 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28377 00015474 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28378                                  .L_if_end_008b:
 28379 00015477 C9                      	leave
 28380 00015478 C22800                  	ret AND_KILL_FRAME(3)
 28381                                  .L_lambda_simple_end_00a7:	; new closure is in rax
 28382 0001547B 50                      	push rax
 28383 0001547C 488B4520                	mov rax, PARAM(0)	; param run
 28384 00015480 8F00                    	pop qword [rax]
 28385 00015482 48B8-                   	mov rax, sob_void
 28385 00015484 [0000000000000000] 
 28386                                  
 28387 0001548C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28388 00015491 E8492B0000              	call malloc
 28389 00015496 50                      	push rax
 28390 00015497 BF10000000              	mov rdi, 8 * 2	; new rib
 28391 0001549C E83E2B0000              	call malloc
 28392 000154A1 50                      	push rax
 28393 000154A2 BF10000000              	mov rdi, 8 * 2	; extended env
 28394 000154A7 E8332B0000              	call malloc
 28395 000154AC 488B7D10                	mov rdi, ENV
 28396 000154B0 BE00000000              	mov rsi, 0
 28397 000154B5 BA01000000              	mov rdx, 1
 28398                                  .L_lambda_simple_env_loop_00a9:	; ext_env[i + 1] <-- env[i]
 28399 000154BA 4883FE01                	cmp rsi, 1
 28400 000154BE 7410                    	je .L_lambda_simple_env_end_00a9
 28401 000154C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28402 000154C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28403 000154C8 48FFC6                  	inc rsi
 28404 000154CB 48FFC2                  	inc rdx
 28405 000154CE EBEA                    	jmp .L_lambda_simple_env_loop_00a9
 28406                                  .L_lambda_simple_env_end_00a9:
 28407 000154D0 5B                      	pop rbx
 28408 000154D1 BE00000000              	mov rsi, 0
 28409                                  .L_lambda_simple_params_loop_00a9:	; copy params
 28410 000154D6 4883FE02                	cmp rsi, 2
 28411 000154DA 740E                    	je .L_lambda_simple_params_end_00a9
 28412 000154DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28413 000154E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28414 000154E5 48FFC6                  	inc rsi
 28415 000154E8 EBEC                    	jmp .L_lambda_simple_params_loop_00a9
 28416                                  .L_lambda_simple_params_end_00a9:
 28417 000154EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28418 000154ED 4889C3                  	mov rbx, rax
 28419 000154F0 58                      	pop rax
 28420 000154F1 C60004                  	mov byte [rax], T_closure
 28421 000154F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28422 000154F8 48C74009[05550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a9
 28423 00015500 E98B010000              	jmp .L_lambda_simple_end_00a9
 28424                                  .L_lambda_simple_code_00a9:	; lambda-simple body
 28425 00015505 48837C241005            	cmp qword [rsp + 8 * 2], 5
 28426 0001550B 740B                    	je .L_lambda_simple_arity_check_ok_00a9
 28427 0001550D FF742410                	push qword [rsp + 8 * 2]
 28428 00015511 6A05                    	push 5
 28429 00015513 E9802A0000              	jmp L_error_incorrect_arity_simple
 28430                                  .L_lambda_simple_arity_check_ok_00a9:
 28431 00015518 C8000000                	enter 0, 0
 28432                                  	; preparing a non-tail-call
 28433 0001551C 488B4540                	mov rax, PARAM(4)	; param limit
 28434 00015520 50                      	push rax
 28435 00015521 488B4538                	mov rax, PARAM(3)	; param j
 28436 00015525 50                      	push rax
 28437 00015526 6A02                    	push 2	; arg count
 28438 00015528 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 28439 00015530 803805                  	cmp byte [rax], T_undefined
 28440 00015533 0F8479290000            	je L_error_fvar_undefined
 28441 00015539 803804                  	cmp byte [rax], T_closure
 28442 0001553C 0F85F4290000            	jne L_error_non_closure
 28443 00015542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28444 00015545 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28445 00015548 483D[02000000]          	cmp rax, sob_boolean_false
 28446 0001554E 0F8434010000            	je .L_if_else_008c
 28447                                  	; preparing a non-tail-call
 28448                                  	; preparing a non-tail-call
 28449 00015554 488B4538                	mov rax, PARAM(3)	; param j
 28450 00015558 50                      	push rax
 28451 00015559 488B4530                	mov rax, PARAM(2)	; param vec
 28452 0001555D 50                      	push rax
 28453 0001555E 6A02                    	push 2	; arg count
 28454 00015560 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 28455 00015568 803805                  	cmp byte [rax], T_undefined
 28456 0001556B 0F8441290000            	je L_error_fvar_undefined
 28457 00015571 803804                  	cmp byte [rax], T_closure
 28458 00015574 0F85BC290000            	jne L_error_non_closure
 28459 0001557A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28460 0001557D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28461 00015580 50                      	push rax
 28462 00015581 488B4528                	mov rax, PARAM(1)	; param i
 28463 00015585 50                      	push rax
 28464 00015586 488B4520                	mov rax, PARAM(0)	; param target
 28465 0001558A 50                      	push rax
 28466 0001558B 6A03                    	push 3	; arg count
 28467 0001558D 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 28468 00015595 803805                  	cmp byte [rax], T_undefined
 28469 00015598 0F8414290000            	je L_error_fvar_undefined
 28470 0001559E 803804                  	cmp byte [rax], T_closure
 28471 000155A1 0F858F290000            	jne L_error_non_closure
 28472 000155A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28473 000155AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28474                                  
 28475                                  	; preparing a tail-call
 28476 000155AD 488B4540                	mov rax, PARAM(4)	; param limit
 28477 000155B1 50                      	push rax
 28478                                  	; preparing a non-tail-call
 28479 000155B2 48B8-                   	mov rax, L_constants + 2270
 28479 000155B4 [DE08000000000000] 
 28480 000155BC 50                      	push rax
 28481 000155BD 488B4538                	mov rax, PARAM(3)	; param j
 28482 000155C1 50                      	push rax
 28483 000155C2 6A02                    	push 2	; arg count
 28484 000155C4 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28485 000155CC 803805                  	cmp byte [rax], T_undefined
 28486 000155CF 0F84DD280000            	je L_error_fvar_undefined
 28487 000155D5 803804                  	cmp byte [rax], T_closure
 28488 000155D8 0F8558290000            	jne L_error_non_closure
 28489 000155DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 28490 000155E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28491 000155E4 50                      	push rax
 28492 000155E5 488B4530                	mov rax, PARAM(2)	; param vec
 28493 000155E9 50                      	push rax
 28494                                  	; preparing a non-tail-call
 28495 000155EA 48B8-                   	mov rax, L_constants + 2270
 28495 000155EC [DE08000000000000] 
 28496 000155F4 50                      	push rax
 28497 000155F5 488B4528                	mov rax, PARAM(1)	; param i
 28498 000155F9 50                      	push rax
 28499 000155FA 6A02                    	push 2	; arg count
 28500 000155FC 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28501 00015604 803805                  	cmp byte [rax], T_undefined
 28502 00015607 0F84A5280000            	je L_error_fvar_undefined
 28503 0001560D 803804                  	cmp byte [rax], T_closure
 28504 00015610 0F8520290000            	jne L_error_non_closure
 28505 00015616 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28506 00015619 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28507 0001561C 50                      	push rax
 28508 0001561D 488B4520                	mov rax, PARAM(0)	; param target
 28509 00015621 50                      	push rax
 28510 00015622 6A05                    	push 5	; arg count
 28511 00015624 488B4510                	mov rax, ENV
 28512 00015628 488B00                  	mov rax, qword [rax + 8 * 0]
 28513 0001562B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28514 0001562F 488B00                  	mov rax, qword [rax]
 28515 00015632 803804                  	cmp byte [rax], T_closure
 28516 00015635 0F85FB280000            	jne L_error_non_closure
 28517 0001563B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28518 0001563E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28519 00015641 FF7500                  	push qword[rbp]
 28520 00015644 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28521 00015647 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28522 0001564B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28523 0001564F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28524 00015653 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28525 00015656 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28526 00015659 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28527 0001565E 4983C103                	add r9, 3 	 ;for getting to the params
 28528 00015662 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28529 00015666 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28530                                  .L_tc_recycle_frame_loop_00fa:
 28531 00015669 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28532 0001566C 7410                    	je .L_tc_recycle_frame_done_00fa
 28533 0001566E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28534 00015671 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28535 00015674 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28536 00015678 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28537 0001567C EBEB                    	jmp .L_tc_recycle_frame_loop_00fa
 28538                                  .L_tc_recycle_frame_done_00fa:
 28539 0001567E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28540 0001567F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28541 00015683 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28542 00015686 EB04                    	jmp .L_if_end_008c
 28543                                  .L_if_else_008c:
 28544 00015688 488B4528                	mov rax, PARAM(1)	; param i
 28545                                  .L_if_end_008c:
 28546 0001568C C9                      	leave
 28547 0001568D C23800                  	ret AND_KILL_FRAME(5)
 28548                                  .L_lambda_simple_end_00a9:	; new closure is in rax
 28549 00015690 50                      	push rax
 28550 00015691 488B4528                	mov rax, PARAM(1)	; param add
 28551 00015695 8F00                    	pop qword [rax]
 28552 00015697 48B8-                   	mov rax, sob_void
 28552 00015699 [0000000000000000] 
 28553                                  
 28554 000156A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28555 000156A6 E834290000              	call malloc
 28556 000156AB 50                      	push rax
 28557 000156AC BF10000000              	mov rdi, 8 * 2	; new rib
 28558 000156B1 E829290000              	call malloc
 28559 000156B6 50                      	push rax
 28560 000156B7 BF10000000              	mov rdi, 8 * 2	; extended env
 28561 000156BC E81E290000              	call malloc
 28562 000156C1 488B7D10                	mov rdi, ENV
 28563 000156C5 BE00000000              	mov rsi, 0
 28564 000156CA BA01000000              	mov rdx, 1
 28565                                  .L_lambda_opt_env_loop_0018:	; ext_env[i + 1] <-- env[i]
 28566 000156CF 4883FE01                	cmp rsi, 1
 28567 000156D3 7410                    	je .L_lambda_opt_env_end_0018
 28568 000156D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28569 000156D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28570 000156DD 48FFC6                  	inc rsi
 28571 000156E0 48FFC2                  	inc rdx
 28572 000156E3 EBEA                    	jmp .L_lambda_opt_env_loop_0018
 28573                                  .L_lambda_opt_env_end_0018:
 28574 000156E5 5B                      	pop rbx
 28575 000156E6 BE00000000              	mov rsi, 0
 28576                                  .L_lambda_opt_params_loop_0018:	; copy params
 28577 000156EB 4883FE02                	cmp rsi, 2
 28578 000156EF 740E                    	je .L_lambda_opt_params_end_0018
 28579 000156F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28580 000156F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28581 000156FA 48FFC6                  	inc rsi
 28582 000156FD EBEC                    	jmp .L_lambda_opt_params_loop_0018
 28583                                  .L_lambda_opt_params_end_0018:
 28584 000156FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28585 00015702 4889C3                  	mov rbx, rax
 28586 00015705 58                      	pop rax
 28587 00015706 C60004                  	mov byte [rax], T_closure
 28588 00015709 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28589 0001570D 48C74009[1A570100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0018
 28590 00015715 E91F030000              	jmp .L_lambda_opt_end_0018
 28591                                  .L_lambda_opt_code_0018:	; lambda-opt body
 28592 0001571A 48837C241000            	cmp qword [rsp + 8 * 2], 0
 28593 00015720 7411                    	je .L_lambda_opt_arity_check_exact_0018
 28594 00015722 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0018
 28595 00015728 FF742410                	push qword [rsp + 8 * 2]
 28596 0001572C 6A00                    	push 0
 28597 0001572E E979280000              	jmp L_error_incorrect_arity_opt
 28598                                  .L_lambda_opt_arity_check_exact_0018:
 28599 00015733 4883EC08                	sub rsp, 8
 28600 00015737 488B442408              	mov rax, qword[rsp + 8 *1]
 28601 0001573C 48890424                	mov qword[rsp], rax  
 28602 00015740 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 28603 00015745 4889442408              	mov qword[rsp + 8 * 1], rax
 28604 0001574A B801000000              	mov rax, 1
 28605 0001574F 4889442410              	mov qword[rsp + 8 *2], rax
 28606 00015754 48B8-                   	mov rax, sob_nil
 28606 00015756 [0100000000000000] 
 28607 0001575E 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 28608 00015763 C8000000                	enter 0, 0
 28609                                  	; preparing a tail-call
 28610 00015767 488B4520                	mov rax, PARAM(0)	; param vectors
 28611 0001576B 50                      	push rax
 28612 0001576C 48B8-                   	mov rax, L_constants + 2135
 28612 0001576E [5708000000000000] 
 28613 00015776 50                      	push rax
 28614                                  	; preparing a non-tail-call
 28615                                  	; preparing a non-tail-call
 28616                                  	; preparing a non-tail-call
 28617 00015777 488B4520                	mov rax, PARAM(0)	; param vectors
 28618 0001577B 50                      	push rax
 28619 0001577C 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28620 00015784 803805                  	cmp byte [rax], T_undefined
 28621 00015787 0F8425270000            	je L_error_fvar_undefined
 28622 0001578D 50                      	push rax
 28623 0001578E 6A02                    	push 2	; arg count
 28624 00015790 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 28625 00015798 803805                  	cmp byte [rax], T_undefined
 28626 0001579B 0F8411270000            	je L_error_fvar_undefined
 28627 000157A1 803804                  	cmp byte [rax], T_closure
 28628 000157A4 0F858C270000            	jne L_error_non_closure
 28629 000157AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28630 000157AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 28631 000157B0 50                      	push rax
 28632 000157B1 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28633 000157B9 803805                  	cmp byte [rax], T_undefined
 28634 000157BC 0F84F0260000            	je L_error_fvar_undefined
 28635 000157C2 50                      	push rax
 28636 000157C3 6A02                    	push 2	; arg count
 28637 000157C5 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 28638 000157CD 803805                  	cmp byte [rax], T_undefined
 28639 000157D0 0F84DC260000            	je L_error_fvar_undefined
 28640 000157D6 803804                  	cmp byte [rax], T_closure
 28641 000157D9 0F8557270000            	jne L_error_non_closure
 28642 000157DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 28643 000157E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28644 000157E5 50                      	push rax
 28645 000157E6 6A01                    	push 1	; arg count
 28646 000157E8 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28647 000157F0 803805                  	cmp byte [rax], T_undefined
 28648 000157F3 0F84B9260000            	je L_error_fvar_undefined
 28649 000157F9 803804                  	cmp byte [rax], T_closure
 28650 000157FC 0F8534270000            	jne L_error_non_closure
 28651 00015802 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28652 00015805 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28653 00015808 50                      	push rax
 28654 00015809 6A03                    	push 3	; arg count
 28655 0001580B 488B4510                	mov rax, ENV
 28656 0001580F 488B00                  	mov rax, qword [rax + 8 * 0]
 28657 00015812 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28658 00015815 488B00                  	mov rax, qword [rax]
 28659 00015818 803804                  	cmp byte [rax], T_closure
 28660 0001581B 0F8515270000            	jne L_error_non_closure
 28661 00015821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28662 00015824 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28663 00015827 FF7500                  	push qword[rbp]
 28664 0001582A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28665 0001582D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28666 00015831 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28667 00015835 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28668 00015839 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28669 0001583C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28670 0001583F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28671 00015844 4983C103                	add r9, 3 	 ;for getting to the params
 28672 00015848 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28673 0001584C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28674                                  .L_tc_recycle_frame_loop_00fc:
 28675 0001584F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28676 00015852 7410                    	je .L_tc_recycle_frame_done_00fc
 28677 00015854 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28678 00015857 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28679 0001585A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28680 0001585E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28681 00015862 EBEB                    	jmp .L_tc_recycle_frame_loop_00fc
 28682                                  .L_tc_recycle_frame_done_00fc:
 28683 00015864 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28684 00015865 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28685 00015869 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28686 0001586C C9                      	leave
 28687 0001586D C21800                  	ret AND_KILL_FRAME(1)
 28688 00015870 E9C4010000              	jmp .L_lambda_opt_end_0018	; new closure is in rax
 28689                                  .L_lambda_opt_arity_check_more_0018:
 28690 00015875 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 28691 0001587A 49B9-                   	mov r9, sob_nil
 28691 0001587C [0100000000000000] 
 28692 00015884 4889E3                  	mov rbx, rsp 
 28693 00015887 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 28694 0001588B 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 28695 0001588E 49C1E003                	shl r8, 3
 28696 00015892 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 28697 00015895 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 28698                                  .L_lambda_opt_stack_shrink_loop_0018:
 28699 0001589A 4983F800                	cmp r8, 0
 28700 0001589E 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0018
 28701 000158A0 BF11000000              	mov rdi, 1+8+8	;for pair
 28702 000158A5 E835270000              	call malloc	 ;to create the pair in the stack
 28703 000158AA C60021                  	mov byte [rax], T_pair	 ; to make it a pair
 28704 000158AD 488B0B                  	mov rcx, qword[rbx] 	 ;rcx is holding the param to copy
 28705 000158B0 48894801                	mov qword[rax+1], rcx	 ;put the car in the last (not inside of the list yet) in the pair
 28706 000158B4 4C894809                 	mov qword[rax+1+8],r9
 28707 000158B8 4989C1                  	mov r9, rax	 ; for the recursion 
 28708 000158BB 49FFC8                  	dec r8 	;we finished copy another opt param to the list
 28709 000158BE 4883EB08                	sub rbx, 8 	 ;to get the next param to copy
 28710 000158C2 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0018
 28711                                  .L_lambda_opt_stack_shrink_loop_exit_0018:
 28712 000158C4 488B4C2410              	mov rcx, qword[rsp + 2 * 8] 	 ;rcx is holding the total number of params including opt
 28713 000158C9 4883E901                	sub rcx, 1
 28714 000158CD 48C1E103                	shl rcx, 3 	;rcx is now holding in how much bytes e need to shrink the stack
 28715 000158D1 4801CC                  	add rsp, rcx	 ;shrinking the stack
 28716 000158D4 4889E0                  	mov rax, rsp
 28717 000158D7 4829C8                  	sub rax, rcx 	 ;now rax is pointing on the original ret
 28718 000158DA 4C8B4010                	mov r8, qword[rax + 2 * 8]	 ;r8 is holding the arg count including opt
 28719 000158DE 49FFC8                  	dec r8 	 ;we start with param 0, not 1 
 28720 000158E1 4883C018                	add rax, 3 * 8 	;now rax is param 0
 28721 000158E5 49C1E003                	shl r8, 3 	; convert to byte
 28722 000158E9 4C01C0                  	add rax, r8 	;now rax is the top of the stack
 28723 000158EC 4C8908                  	mov qword[rax], r9	;puting the list at the top
 28724 000158EF 4883E808                	sub rax, 8	 ;rax is the adress to copy to the not optional params
 28725 000158F3 4889E3                  	mov rbx, rsp 
 28726 000158F6 4829CB                  	sub rbx, rcx 	;rbx is the ret adress in the original
 28727 000158F9 41BA00000000            	mov r10, 0 	 ;r10 is the not opt params length
 28728 000158FF 49FFCA                  	dec r10 
 28729 00015902 49C1E203                	shl r10, 3	;to get bytes
 28730 00015906 4883C318                	add rbx, 3*8 	;rbx is the first param
 28731 0001590A 4C01D3                  	add rbx, r10 	; rbx is where the address to copy to
 28732 0001590D 4889E0                  	mov rax, rsp
 28733 00015910 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 28734 00015913 48C744241001000000      	mov qword [rsp+2*8], 1
 28735 0001591C 488B5808                	mov rbx, qword[rax + 8 *1]
 28736 00015920 48895C2408              	mov qword [rsp + 1*8] ,rbx
 28737 00015925 488B18                  	mov rbx, qword[rax]
 28738 00015928 48891C24                	mov qword [rsp], rbx
 28739 0001592C C8000000                	enter 0, 0
 28740                                  	; preparing a tail-call
 28741 00015930 488B4520                	mov rax, PARAM(0)	; param vectors
 28742 00015934 50                      	push rax
 28743 00015935 48B8-                   	mov rax, L_constants + 2135
 28743 00015937 [5708000000000000] 
 28744 0001593F 50                      	push rax
 28745                                  	; preparing a non-tail-call
 28746                                  	; preparing a non-tail-call
 28747                                  	; preparing a non-tail-call
 28748 00015940 488B4520                	mov rax, PARAM(0)	; param vectors
 28749 00015944 50                      	push rax
 28750 00015945 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 28751 0001594D 803805                  	cmp byte [rax], T_undefined
 28752 00015950 0F845C250000            	je L_error_fvar_undefined
 28753 00015956 50                      	push rax
 28754 00015957 6A02                    	push 2	; arg count
 28755 00015959 488B0425[9C140000]      	mov rax, qword [free_var_103]	; free var map
 28756 00015961 803805                  	cmp byte [rax], T_undefined
 28757 00015964 0F8448250000            	je L_error_fvar_undefined
 28758 0001596A 803804                  	cmp byte [rax], T_closure
 28759 0001596D 0F85C3250000            	jne L_error_non_closure
 28760 00015973 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28761 00015976 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28762 00015979 50                      	push rax
 28763 0001597A 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 28764 00015982 803805                  	cmp byte [rax], T_undefined
 28765 00015985 0F8427250000            	je L_error_fvar_undefined
 28766 0001598B 50                      	push rax
 28767 0001598C 6A02                    	push 2	; arg count
 28768 0001598E 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 28769 00015996 803805                  	cmp byte [rax], T_undefined
 28770 00015999 0F8413250000            	je L_error_fvar_undefined
 28771 0001599F 803804                  	cmp byte [rax], T_closure
 28772 000159A2 0F858E250000            	jne L_error_non_closure
 28773 000159A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28774 000159AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28775 000159AE 50                      	push rax
 28776 000159AF 6A01                    	push 1	; arg count
 28777 000159B1 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 28778 000159B9 803805                  	cmp byte [rax], T_undefined
 28779 000159BC 0F84F0240000            	je L_error_fvar_undefined
 28780 000159C2 803804                  	cmp byte [rax], T_closure
 28781 000159C5 0F856B250000            	jne L_error_non_closure
 28782 000159CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 28783 000159CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 28784 000159D1 50                      	push rax
 28785 000159D2 6A03                    	push 3	; arg count
 28786 000159D4 488B4510                	mov rax, ENV
 28787 000159D8 488B00                  	mov rax, qword [rax + 8 * 0]
 28788 000159DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28789 000159DE 488B00                  	mov rax, qword [rax]
 28790 000159E1 803804                  	cmp byte [rax], T_closure
 28791 000159E4 0F854C250000            	jne L_error_non_closure
 28792 000159EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28793 000159ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28794 000159F0 FF7500                  	push qword[rbp]
 28795 000159F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28796 000159F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28797 000159FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28798 000159FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28799 00015A02 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28800 00015A05 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28801 00015A08 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28802 00015A0D 4983C103                	add r9, 3 	 ;for getting to the params
 28803 00015A11 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28804 00015A15 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28805                                  .L_tc_recycle_frame_loop_00fb:
 28806 00015A18 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28807 00015A1B 7410                    	je .L_tc_recycle_frame_done_00fb
 28808 00015A1D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28809 00015A20 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28810 00015A23 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28811 00015A27 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28812 00015A2B EBEB                    	jmp .L_tc_recycle_frame_loop_00fb
 28813                                  .L_tc_recycle_frame_done_00fb:
 28814 00015A2D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28815 00015A2E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28816 00015A32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28817 00015A35 C9                      	leave
 28818 00015A36 C21800                  	ret AND_KILL_FRAME(1)
 28819                                  .L_lambda_opt_end_0018:	; new closure is in rax
 28820 00015A39 C9                      	leave
 28821 00015A3A C22000                  	ret AND_KILL_FRAME(2)
 28822                                  .L_lambda_simple_end_00a6:	; new closure is in rax
 28823 00015A3D 803804                  	cmp byte [rax], T_closure
 28824 00015A40 0F85F0240000            	jne L_error_non_closure
 28825 00015A46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28826 00015A49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28827 00015A4C 48890425[33170000]      	mov qword [free_var_142], rax
 28828 00015A54 48B8-                   	mov rax, sob_void
 28828 00015A56 [0000000000000000] 
 28829                                  
 28830 00015A5E 4889C7                  	mov rdi, rax
 28831 00015A61 E8CE270000              	call print_sexpr_if_not_void
 28832 00015A66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28833 00015A6B E86F250000              	call malloc
 28834 00015A70 50                      	push rax
 28835 00015A71 BF00000000              	mov rdi, 8 * 0	; new rib
 28836 00015A76 E864250000              	call malloc
 28837 00015A7B 50                      	push rax
 28838 00015A7C BF08000000              	mov rdi, 8 * 1	; extended env
 28839 00015A81 E859250000              	call malloc
 28840 00015A86 488B7D10                	mov rdi, ENV
 28841 00015A8A BE00000000              	mov rsi, 0
 28842 00015A8F BA01000000              	mov rdx, 1
 28843                                  .L_lambda_simple_env_loop_00aa:	; ext_env[i + 1] <-- env[i]
 28844 00015A94 4883FE00                	cmp rsi, 0
 28845 00015A98 7410                    	je .L_lambda_simple_env_end_00aa
 28846 00015A9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28847 00015A9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28848 00015AA2 48FFC6                  	inc rsi
 28849 00015AA5 48FFC2                  	inc rdx
 28850 00015AA8 EBEA                    	jmp .L_lambda_simple_env_loop_00aa
 28851                                  .L_lambda_simple_env_end_00aa:
 28852 00015AAA 5B                      	pop rbx
 28853 00015AAB BE00000000              	mov rsi, 0
 28854                                  .L_lambda_simple_params_loop_00aa:	; copy params
 28855 00015AB0 4883FE00                	cmp rsi, 0
 28856 00015AB4 740E                    	je .L_lambda_simple_params_end_00aa
 28857 00015AB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28858 00015ABB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28859 00015ABF 48FFC6                  	inc rsi
 28860 00015AC2 EBEC                    	jmp .L_lambda_simple_params_loop_00aa
 28861                                  .L_lambda_simple_params_end_00aa:
 28862 00015AC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28863 00015AC7 4889C3                  	mov rbx, rax
 28864 00015ACA 58                      	pop rax
 28865 00015ACB C60004                  	mov byte [rax], T_closure
 28866 00015ACE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28867 00015AD2 48C74009[DF5A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00aa
 28868 00015ADA E9CD000000              	jmp .L_lambda_simple_end_00aa
 28869                                  .L_lambda_simple_code_00aa:	; lambda-simple body
 28870 00015ADF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28871 00015AE5 740B                    	je .L_lambda_simple_arity_check_ok_00aa
 28872 00015AE7 FF742410                	push qword [rsp + 8 * 2]
 28873 00015AEB 6A01                    	push 1
 28874 00015AED E9A6240000              	jmp L_error_incorrect_arity_simple
 28875                                  .L_lambda_simple_arity_check_ok_00aa:
 28876 00015AF2 C8000000                	enter 0, 0
 28877                                  	; preparing a tail-call
 28878                                  	; preparing a non-tail-call
 28879                                  	; preparing a non-tail-call
 28880 00015AF6 488B4520                	mov rax, PARAM(0)	; param str
 28881 00015AFA 50                      	push rax
 28882 00015AFB 6A01                    	push 1	; arg count
 28883 00015AFD 488B0425[AC150000]      	mov rax, qword [free_var_119]	; free var string->list
 28884 00015B05 803805                  	cmp byte [rax], T_undefined
 28885 00015B08 0F84A4230000            	je L_error_fvar_undefined
 28886 00015B0E 803804                  	cmp byte [rax], T_closure
 28887 00015B11 0F851F240000            	jne L_error_non_closure
 28888 00015B17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28889 00015B1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 28890 00015B1D 50                      	push rax
 28891 00015B1E 6A01                    	push 1	; arg count
 28892 00015B20 488B0425[9B150000]      	mov rax, qword [free_var_118]	; free var reverse
 28893 00015B28 803805                  	cmp byte [rax], T_undefined
 28894 00015B2B 0F8481230000            	je L_error_fvar_undefined
 28895 00015B31 803804                  	cmp byte [rax], T_closure
 28896 00015B34 0F85FC230000            	jne L_error_non_closure
 28897 00015B3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28898 00015B3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28899 00015B40 50                      	push rax
 28900 00015B41 6A01                    	push 1	; arg count
 28901 00015B43 488B0425[03140000]      	mov rax, qword [free_var_94]	; free var list->string
 28902 00015B4B 803805                  	cmp byte [rax], T_undefined
 28903 00015B4E 0F845E230000            	je L_error_fvar_undefined
 28904 00015B54 803804                  	cmp byte [rax], T_closure
 28905 00015B57 0F85D9230000            	jne L_error_non_closure
 28906 00015B5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 28907 00015B60 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28908 00015B63 FF7500                  	push qword[rbp]
 28909 00015B66 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28910 00015B69 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28911 00015B6D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28912 00015B71 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28913 00015B75 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28914 00015B78 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28915 00015B7B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28916 00015B80 4983C103                	add r9, 3 	 ;for getting to the params
 28917 00015B84 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28918 00015B88 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28919                                  .L_tc_recycle_frame_loop_00fd:
 28920 00015B8B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28921 00015B8E 7410                    	je .L_tc_recycle_frame_done_00fd
 28922 00015B90 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28923 00015B93 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28924 00015B96 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28925 00015B9A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28926 00015B9E EBEB                    	jmp .L_tc_recycle_frame_loop_00fd
 28927                                  .L_tc_recycle_frame_done_00fd:
 28928 00015BA0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28929 00015BA1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28930 00015BA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28931 00015BA8 C9                      	leave
 28932 00015BA9 C21800                  	ret AND_KILL_FRAME(1)
 28933                                  .L_lambda_simple_end_00aa:	; new closure is in rax
 28934 00015BAC 48890425[56160000]      	mov qword [free_var_129], rax
 28935 00015BB4 48B8-                   	mov rax, sob_void
 28935 00015BB6 [0000000000000000] 
 28936                                  
 28937 00015BBE 4889C7                  	mov rdi, rax
 28938 00015BC1 E86E260000              	call print_sexpr_if_not_void
 28939 00015BC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28940 00015BCB E80F240000              	call malloc
 28941 00015BD0 50                      	push rax
 28942 00015BD1 BF00000000              	mov rdi, 8 * 0	; new rib
 28943 00015BD6 E804240000              	call malloc
 28944 00015BDB 50                      	push rax
 28945 00015BDC BF08000000              	mov rdi, 8 * 1	; extended env
 28946 00015BE1 E8F9230000              	call malloc
 28947 00015BE6 488B7D10                	mov rdi, ENV
 28948 00015BEA BE00000000              	mov rsi, 0
 28949 00015BEF BA01000000              	mov rdx, 1
 28950                                  .L_lambda_simple_env_loop_00ab:	; ext_env[i + 1] <-- env[i]
 28951 00015BF4 4883FE00                	cmp rsi, 0
 28952 00015BF8 7410                    	je .L_lambda_simple_env_end_00ab
 28953 00015BFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28954 00015BFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28955 00015C02 48FFC6                  	inc rsi
 28956 00015C05 48FFC2                  	inc rdx
 28957 00015C08 EBEA                    	jmp .L_lambda_simple_env_loop_00ab
 28958                                  .L_lambda_simple_env_end_00ab:
 28959 00015C0A 5B                      	pop rbx
 28960 00015C0B BE00000000              	mov rsi, 0
 28961                                  .L_lambda_simple_params_loop_00ab:	; copy params
 28962 00015C10 4883FE00                	cmp rsi, 0
 28963 00015C14 740E                    	je .L_lambda_simple_params_end_00ab
 28964 00015C16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28965 00015C1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28966 00015C1F 48FFC6                  	inc rsi
 28967 00015C22 EBEC                    	jmp .L_lambda_simple_params_loop_00ab
 28968                                  .L_lambda_simple_params_end_00ab:
 28969 00015C24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28970 00015C27 4889C3                  	mov rbx, rax
 28971 00015C2A 58                      	pop rax
 28972 00015C2B C60004                  	mov byte [rax], T_closure
 28973 00015C2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28974 00015C32 48C74009[3F5C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ab
 28975 00015C3A E9CD000000              	jmp .L_lambda_simple_end_00ab
 28976                                  .L_lambda_simple_code_00ab:	; lambda-simple body
 28977 00015C3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28978 00015C45 740B                    	je .L_lambda_simple_arity_check_ok_00ab
 28979 00015C47 FF742410                	push qword [rsp + 8 * 2]
 28980 00015C4B 6A01                    	push 1
 28981 00015C4D E946230000              	jmp L_error_incorrect_arity_simple
 28982                                  .L_lambda_simple_arity_check_ok_00ab:
 28983 00015C52 C8000000                	enter 0, 0
 28984                                  	; preparing a tail-call
 28985                                  	; preparing a non-tail-call
 28986                                  	; preparing a non-tail-call
 28987 00015C56 488B4520                	mov rax, PARAM(0)	; param vec
 28988 00015C5A 50                      	push rax
 28989 00015C5B 6A01                    	push 1	; arg count
 28990 00015C5D 488B0425[22170000]      	mov rax, qword [free_var_141]	; free var vector->list
 28991 00015C65 803805                  	cmp byte [rax], T_undefined
 28992 00015C68 0F8444220000            	je L_error_fvar_undefined
 28993 00015C6E 803804                  	cmp byte [rax], T_closure
 28994 00015C71 0F85BF220000            	jne L_error_non_closure
 28995 00015C77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28996 00015C7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 28997 00015C7D 50                      	push rax
 28998 00015C7E 6A01                    	push 1	; arg count
 28999 00015C80 488B0425[9B150000]      	mov rax, qword [free_var_118]	; free var reverse
 29000 00015C88 803805                  	cmp byte [rax], T_undefined
 29001 00015C8B 0F8421220000            	je L_error_fvar_undefined
 29002 00015C91 803804                  	cmp byte [rax], T_closure
 29003 00015C94 0F859C220000            	jne L_error_non_closure
 29004 00015C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29005 00015C9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 29006 00015CA0 50                      	push rax
 29007 00015CA1 6A01                    	push 1	; arg count
 29008 00015CA3 488B0425[14140000]      	mov rax, qword [free_var_95]	; free var list->vector
 29009 00015CAB 803805                  	cmp byte [rax], T_undefined
 29010 00015CAE 0F84FE210000            	je L_error_fvar_undefined
 29011 00015CB4 803804                  	cmp byte [rax], T_closure
 29012 00015CB7 0F8579220000            	jne L_error_non_closure
 29013 00015CBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 29014 00015CC0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29015 00015CC3 FF7500                  	push qword[rbp]
 29016 00015CC6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29017 00015CC9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29018 00015CCD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29019 00015CD1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29020 00015CD5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29021 00015CD8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29022 00015CDB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29023 00015CE0 4983C103                	add r9, 3 	 ;for getting to the params
 29024 00015CE4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29025 00015CE8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29026                                  .L_tc_recycle_frame_loop_00fe:
 29027 00015CEB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29028 00015CEE 7410                    	je .L_tc_recycle_frame_done_00fe
 29029 00015CF0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29030 00015CF3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29031 00015CF6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29032 00015CFA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29033 00015CFE EBEB                    	jmp .L_tc_recycle_frame_loop_00fe
 29034                                  .L_tc_recycle_frame_done_00fe:
 29035 00015D00 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29036 00015D01 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29037 00015D05 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29038 00015D08 C9                      	leave
 29039 00015D09 C21800                  	ret AND_KILL_FRAME(1)
 29040                                  .L_lambda_simple_end_00ab:	; new closure is in rax
 29041 00015D0C 48890425[66170000]      	mov qword [free_var_145], rax
 29042 00015D14 48B8-                   	mov rax, sob_void
 29042 00015D16 [0000000000000000] 
 29043                                  
 29044 00015D1E 4889C7                  	mov rdi, rax
 29045 00015D21 E80E250000              	call print_sexpr_if_not_void
 29046                                  	; preparing a non-tail-call
 29047 00015D26 48B8-                   	mov rax, L_constants + 1993
 29047 00015D28 [C907000000000000] 
 29048 00015D30 50                      	push rax
 29049 00015D31 6A01                    	push 1	; arg count
 29050 00015D33 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29051 00015D38 E8A2220000              	call malloc
 29052 00015D3D 50                      	push rax
 29053 00015D3E BF00000000              	mov rdi, 8 * 0	; new rib
 29054 00015D43 E897220000              	call malloc
 29055 00015D48 50                      	push rax
 29056 00015D49 BF08000000              	mov rdi, 8 * 1	; extended env
 29057 00015D4E E88C220000              	call malloc
 29058 00015D53 488B7D10                	mov rdi, ENV
 29059 00015D57 BE00000000              	mov rsi, 0
 29060 00015D5C BA01000000              	mov rdx, 1
 29061                                  .L_lambda_simple_env_loop_00ac:	; ext_env[i + 1] <-- env[i]
 29062 00015D61 4883FE00                	cmp rsi, 0
 29063 00015D65 7410                    	je .L_lambda_simple_env_end_00ac
 29064 00015D67 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29065 00015D6B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29066 00015D6F 48FFC6                  	inc rsi
 29067 00015D72 48FFC2                  	inc rdx
 29068 00015D75 EBEA                    	jmp .L_lambda_simple_env_loop_00ac
 29069                                  .L_lambda_simple_env_end_00ac:
 29070 00015D77 5B                      	pop rbx
 29071 00015D78 BE00000000              	mov rsi, 0
 29072                                  .L_lambda_simple_params_loop_00ac:	; copy params
 29073 00015D7D 4883FE00                	cmp rsi, 0
 29074 00015D81 740E                    	je .L_lambda_simple_params_end_00ac
 29075 00015D83 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29076 00015D88 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29077 00015D8C 48FFC6                  	inc rsi
 29078 00015D8F EBEC                    	jmp .L_lambda_simple_params_loop_00ac
 29079                                  .L_lambda_simple_params_end_00ac:
 29080 00015D91 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29081 00015D94 4889C3                  	mov rbx, rax
 29082 00015D97 58                      	pop rax
 29083 00015D98 C60004                  	mov byte [rax], T_closure
 29084 00015D9B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29085 00015D9F 48C74009[AC5D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ac
 29086 00015DA7 E959060000              	jmp .L_lambda_simple_end_00ac
 29087                                  .L_lambda_simple_code_00ac:	; lambda-simple body
 29088 00015DAC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29089 00015DB2 740B                    	je .L_lambda_simple_arity_check_ok_00ac
 29090 00015DB4 FF742410                	push qword [rsp + 8 * 2]
 29091 00015DB8 6A01                    	push 1
 29092 00015DBA E9D9210000              	jmp L_error_incorrect_arity_simple
 29093                                  .L_lambda_simple_arity_check_ok_00ac:
 29094 00015DBF C8000000                	enter 0, 0
 29095 00015DC3 BF08000000              	mov rdi, 8*1
 29096 00015DC8 E812220000              	call malloc
 29097 00015DCD 488B5D20                	mov rbx, PARAM(0)
 29098 00015DD1 488918                  	mov qword[rax], rbx
 29099 00015DD4 48894520                	mov PARAM(0), rax
 29100 00015DD8 48B8-                   	mov rax, sob_void
 29100 00015DDA [0000000000000000] 
 29101                                  
 29102 00015DE2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29103 00015DE7 E8F3210000              	call malloc
 29104 00015DEC 50                      	push rax
 29105 00015DED BF08000000              	mov rdi, 8 * 1	; new rib
 29106 00015DF2 E8E8210000              	call malloc
 29107 00015DF7 50                      	push rax
 29108 00015DF8 BF10000000              	mov rdi, 8 * 2	; extended env
 29109 00015DFD E8DD210000              	call malloc
 29110 00015E02 488B7D10                	mov rdi, ENV
 29111 00015E06 BE00000000              	mov rsi, 0
 29112 00015E0B BA01000000              	mov rdx, 1
 29113                                  .L_lambda_simple_env_loop_00ad:	; ext_env[i + 1] <-- env[i]
 29114 00015E10 4883FE01                	cmp rsi, 1
 29115 00015E14 7410                    	je .L_lambda_simple_env_end_00ad
 29116 00015E16 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29117 00015E1A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29118 00015E1E 48FFC6                  	inc rsi
 29119 00015E21 48FFC2                  	inc rdx
 29120 00015E24 EBEA                    	jmp .L_lambda_simple_env_loop_00ad
 29121                                  .L_lambda_simple_env_end_00ad:
 29122 00015E26 5B                      	pop rbx
 29123 00015E27 BE00000000              	mov rsi, 0
 29124                                  .L_lambda_simple_params_loop_00ad:	; copy params
 29125 00015E2C 4883FE01                	cmp rsi, 1
 29126 00015E30 740E                    	je .L_lambda_simple_params_end_00ad
 29127 00015E32 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29128 00015E37 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29129 00015E3B 48FFC6                  	inc rsi
 29130 00015E3E EBEC                    	jmp .L_lambda_simple_params_loop_00ad
 29131                                  .L_lambda_simple_params_end_00ad:
 29132 00015E40 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29133 00015E43 4889C3                  	mov rbx, rax
 29134 00015E46 58                      	pop rax
 29135 00015E47 C60004                  	mov byte [rax], T_closure
 29136 00015E4A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29137 00015E4E 48C74009[5B5E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ad
 29138 00015E56 E904030000              	jmp .L_lambda_simple_end_00ad
 29139                                  .L_lambda_simple_code_00ad:	; lambda-simple body
 29140 00015E5B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29141 00015E61 740B                    	je .L_lambda_simple_arity_check_ok_00ad
 29142 00015E63 FF742410                	push qword [rsp + 8 * 2]
 29143 00015E67 6A03                    	push 3
 29144 00015E69 E92A210000              	jmp L_error_incorrect_arity_simple
 29145                                  .L_lambda_simple_arity_check_ok_00ad:
 29146 00015E6E C8000000                	enter 0, 0
 29147                                  	; preparing a non-tail-call
 29148 00015E72 488B4530                	mov rax, PARAM(2)	; param j
 29149 00015E76 50                      	push rax
 29150 00015E77 488B4528                	mov rax, PARAM(1)	; param i
 29151 00015E7B 50                      	push rax
 29152 00015E7C 6A02                    	push 2	; arg count
 29153 00015E7E 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 29154 00015E86 803805                  	cmp byte [rax], T_undefined
 29155 00015E89 0F8423200000            	je L_error_fvar_undefined
 29156 00015E8F 803804                  	cmp byte [rax], T_closure
 29157 00015E92 0F859E200000            	jne L_error_non_closure
 29158 00015E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29159 00015E9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 29160 00015E9E 483D[02000000]          	cmp rax, sob_boolean_false
 29161 00015EA4 0F84AD020000            	je .L_if_else_008d
 29162                                  	; preparing a tail-call
 29163                                  	; preparing a non-tail-call
 29164 00015EAA 488B4528                	mov rax, PARAM(1)	; param i
 29165 00015EAE 50                      	push rax
 29166 00015EAF 488B4520                	mov rax, PARAM(0)	; param str
 29167 00015EB3 50                      	push rax
 29168 00015EB4 6A02                    	push 2	; arg count
 29169 00015EB6 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 29170 00015EBE 803805                  	cmp byte [rax], T_undefined
 29171 00015EC1 0F84EB1F0000            	je L_error_fvar_undefined
 29172 00015EC7 803804                  	cmp byte [rax], T_closure
 29173 00015ECA 0F8566200000            	jne L_error_non_closure
 29174 00015ED0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29175 00015ED3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29176 00015ED6 50                      	push rax
 29177 00015ED7 6A01                    	push 1	; arg count
 29178 00015ED9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29179 00015EDE E8FC200000              	call malloc
 29180 00015EE3 50                      	push rax
 29181 00015EE4 BF18000000              	mov rdi, 8 * 3	; new rib
 29182 00015EE9 E8F1200000              	call malloc
 29183 00015EEE 50                      	push rax
 29184 00015EEF BF18000000              	mov rdi, 8 * 3	; extended env
 29185 00015EF4 E8E6200000              	call malloc
 29186 00015EF9 488B7D10                	mov rdi, ENV
 29187 00015EFD BE00000000              	mov rsi, 0
 29188 00015F02 BA01000000              	mov rdx, 1
 29189                                  .L_lambda_simple_env_loop_00ae:	; ext_env[i + 1] <-- env[i]
 29190 00015F07 4883FE02                	cmp rsi, 2
 29191 00015F0B 7410                    	je .L_lambda_simple_env_end_00ae
 29192 00015F0D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29193 00015F11 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29194 00015F15 48FFC6                  	inc rsi
 29195 00015F18 48FFC2                  	inc rdx
 29196 00015F1B EBEA                    	jmp .L_lambda_simple_env_loop_00ae
 29197                                  .L_lambda_simple_env_end_00ae:
 29198 00015F1D 5B                      	pop rbx
 29199 00015F1E BE00000000              	mov rsi, 0
 29200                                  .L_lambda_simple_params_loop_00ae:	; copy params
 29201 00015F23 4883FE03                	cmp rsi, 3
 29202 00015F27 740E                    	je .L_lambda_simple_params_end_00ae
 29203 00015F29 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29204 00015F2E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29205 00015F32 48FFC6                  	inc rsi
 29206 00015F35 EBEC                    	jmp .L_lambda_simple_params_loop_00ae
 29207                                  .L_lambda_simple_params_end_00ae:
 29208 00015F37 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29209 00015F3A 4889C3                  	mov rbx, rax
 29210 00015F3D 58                      	pop rax
 29211 00015F3E C60004                  	mov byte [rax], T_closure
 29212 00015F41 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29213 00015F45 48C74009[525F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ae
 29214 00015F4D E9AF010000              	jmp .L_lambda_simple_end_00ae
 29215                                  .L_lambda_simple_code_00ae:	; lambda-simple body
 29216 00015F52 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29217 00015F58 740B                    	je .L_lambda_simple_arity_check_ok_00ae
 29218 00015F5A FF742410                	push qword [rsp + 8 * 2]
 29219 00015F5E 6A01                    	push 1
 29220 00015F60 E933200000              	jmp L_error_incorrect_arity_simple
 29221                                  .L_lambda_simple_arity_check_ok_00ae:
 29222 00015F65 C8000000                	enter 0, 0
 29223                                  	; preparing a non-tail-call
 29224                                  	; preparing a non-tail-call
 29225 00015F69 488B4510                	mov rax, ENV
 29226 00015F6D 488B00                  	mov rax, qword [rax + 8 * 0]
 29227 00015F70 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29228 00015F74 50                      	push rax
 29229 00015F75 488B4510                	mov rax, ENV
 29230 00015F79 488B00                  	mov rax, qword [rax + 8 * 0]
 29231 00015F7C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29232 00015F7F 50                      	push rax
 29233 00015F80 6A02                    	push 2	; arg count
 29234 00015F82 488B0425[45160000]      	mov rax, qword [free_var_128]	; free var string-ref
 29235 00015F8A 803805                  	cmp byte [rax], T_undefined
 29236 00015F8D 0F841F1F0000            	je L_error_fvar_undefined
 29237 00015F93 803804                  	cmp byte [rax], T_closure
 29238 00015F96 0F859A1F0000            	jne L_error_non_closure
 29239 00015F9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29240 00015F9F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29241 00015FA2 50                      	push rax
 29242 00015FA3 488B4510                	mov rax, ENV
 29243 00015FA7 488B00                  	mov rax, qword [rax + 8 * 0]
 29244 00015FAA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29245 00015FAE 50                      	push rax
 29246 00015FAF 488B4510                	mov rax, ENV
 29247 00015FB3 488B00                  	mov rax, qword [rax + 8 * 0]
 29248 00015FB6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29249 00015FB9 50                      	push rax
 29250 00015FBA 6A03                    	push 3	; arg count
 29251 00015FBC 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 29252 00015FC4 803805                  	cmp byte [rax], T_undefined
 29253 00015FC7 0F84E51E0000            	je L_error_fvar_undefined
 29254 00015FCD 803804                  	cmp byte [rax], T_closure
 29255 00015FD0 0F85601F0000            	jne L_error_non_closure
 29256 00015FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29257 00015FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29258                                  
 29259                                  	; preparing a non-tail-call
 29260 00015FDC 488B4520                	mov rax, PARAM(0)	; param ch
 29261 00015FE0 50                      	push rax
 29262 00015FE1 488B4510                	mov rax, ENV
 29263 00015FE5 488B00                  	mov rax, qword [rax + 8 * 0]
 29264 00015FE8 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29265 00015FEC 50                      	push rax
 29266 00015FED 488B4510                	mov rax, ENV
 29267 00015FF1 488B00                  	mov rax, qword [rax + 8 * 0]
 29268 00015FF4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29269 00015FF7 50                      	push rax
 29270 00015FF8 6A03                    	push 3	; arg count
 29271 00015FFA 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 29272 00016002 803805                  	cmp byte [rax], T_undefined
 29273 00016005 0F84A71E0000            	je L_error_fvar_undefined
 29274 0001600B 803804                  	cmp byte [rax], T_closure
 29275 0001600E 0F85221F0000            	jne L_error_non_closure
 29276 00016014 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29277 00016017 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29278                                  
 29279                                  	; preparing a tail-call
 29280                                  	; preparing a non-tail-call
 29281 0001601A 48B8-                   	mov rax, L_constants + 2270
 29281 0001601C [DE08000000000000] 
 29282 00016024 50                      	push rax
 29283 00016025 488B4510                	mov rax, ENV
 29284 00016029 488B00                  	mov rax, qword [rax + 8 * 0]
 29285 0001602C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29286 00016030 50                      	push rax
 29287 00016031 6A02                    	push 2	; arg count
 29288 00016033 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29289 0001603B 803805                  	cmp byte [rax], T_undefined
 29290 0001603E 0F846E1E0000            	je L_error_fvar_undefined
 29291 00016044 803804                  	cmp byte [rax], T_closure
 29292 00016047 0F85E91E0000            	jne L_error_non_closure
 29293 0001604D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29294 00016050 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29295 00016053 50                      	push rax
 29296                                  	; preparing a non-tail-call
 29297 00016054 48B8-                   	mov rax, L_constants + 2270
 29297 00016056 [DE08000000000000] 
 29298 0001605E 50                      	push rax
 29299 0001605F 488B4510                	mov rax, ENV
 29300 00016063 488B00                  	mov rax, qword [rax + 8 * 0]
 29301 00016066 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29302 0001606A 50                      	push rax
 29303 0001606B 6A02                    	push 2	; arg count
 29304 0001606D 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 29305 00016075 803805                  	cmp byte [rax], T_undefined
 29306 00016078 0F84341E0000            	je L_error_fvar_undefined
 29307 0001607E 803804                  	cmp byte [rax], T_closure
 29308 00016081 0F85AF1E0000            	jne L_error_non_closure
 29309 00016087 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29310 0001608A FF5009                  	call SOB_CLOSURE_CODE(rax)
 29311 0001608D 50                      	push rax
 29312 0001608E 488B4510                	mov rax, ENV
 29313 00016092 488B00                  	mov rax, qword [rax + 8 * 0]
 29314 00016095 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29315 00016098 50                      	push rax
 29316 00016099 6A03                    	push 3	; arg count
 29317 0001609B 488B4510                	mov rax, ENV
 29318 0001609F 488B4008                	mov rax, qword [rax + 8 * 1]
 29319 000160A3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29320 000160A6 488B00                  	mov rax, qword [rax]
 29321 000160A9 803804                  	cmp byte [rax], T_closure
 29322 000160AC 0F85841E0000            	jne L_error_non_closure
 29323 000160B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29324 000160B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29325 000160B8 FF7500                  	push qword[rbp]
 29326 000160BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29327 000160BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29328 000160C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29329 000160C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29330 000160CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29331 000160CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29332 000160D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29333 000160D5 4983C103                	add r9, 3 	 ;for getting to the params
 29334 000160D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29335 000160DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29336                                  .L_tc_recycle_frame_loop_00ff:
 29337 000160E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29338 000160E3 7410                    	je .L_tc_recycle_frame_done_00ff
 29339 000160E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29340 000160E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29341 000160EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29342 000160EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29343 000160F3 EBEB                    	jmp .L_tc_recycle_frame_loop_00ff
 29344                                  .L_tc_recycle_frame_done_00ff:
 29345 000160F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29346 000160F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29347 000160FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29348 000160FD C9                      	leave
 29349 000160FE C21800                  	ret AND_KILL_FRAME(1)
 29350                                  .L_lambda_simple_end_00ae:	; new closure is in rax
 29351 00016101 803804                  	cmp byte [rax], T_closure
 29352 00016104 0F852C1E0000            	jne L_error_non_closure
 29353 0001610A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29354 0001610D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29355 00016110 FF7500                  	push qword[rbp]
 29356 00016113 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29357 00016116 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29358 0001611A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29359 0001611E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29360 00016122 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29361 00016125 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29362 00016128 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29363 0001612D 4983C103                	add r9, 3 	 ;for getting to the params
 29364 00016131 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29365 00016135 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29366                                  .L_tc_recycle_frame_loop_0100:
 29367 00016138 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29368 0001613B 7410                    	je .L_tc_recycle_frame_done_0100
 29369 0001613D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29370 00016140 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29371 00016143 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29372 00016147 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29373 0001614B EBEB                    	jmp .L_tc_recycle_frame_loop_0100
 29374                                  .L_tc_recycle_frame_done_0100:
 29375 0001614D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29376 0001614E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29377 00016152 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29378 00016155 EB04                    	jmp .L_if_end_008d
 29379                                  .L_if_else_008d:
 29380 00016157 488B4520                	mov rax, PARAM(0)	; param str
 29381                                  .L_if_end_008d:
 29382 0001615B C9                      	leave
 29383 0001615C C22800                  	ret AND_KILL_FRAME(3)
 29384                                  .L_lambda_simple_end_00ad:	; new closure is in rax
 29385 0001615F 50                      	push rax
 29386 00016160 488B4520                	mov rax, PARAM(0)	; param run
 29387 00016164 8F00                    	pop qword [rax]
 29388 00016166 48B8-                   	mov rax, sob_void
 29388 00016168 [0000000000000000] 
 29389                                  
 29390 00016170 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29391 00016175 E8651E0000              	call malloc
 29392 0001617A 50                      	push rax
 29393 0001617B BF08000000              	mov rdi, 8 * 1	; new rib
 29394 00016180 E85A1E0000              	call malloc
 29395 00016185 50                      	push rax
 29396 00016186 BF10000000              	mov rdi, 8 * 2	; extended env
 29397 0001618B E84F1E0000              	call malloc
 29398 00016190 488B7D10                	mov rdi, ENV
 29399 00016194 BE00000000              	mov rsi, 0
 29400 00016199 BA01000000              	mov rdx, 1
 29401                                  .L_lambda_simple_env_loop_00af:	; ext_env[i + 1] <-- env[i]
 29402 0001619E 4883FE01                	cmp rsi, 1
 29403 000161A2 7410                    	je .L_lambda_simple_env_end_00af
 29404 000161A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29405 000161A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29406 000161AC 48FFC6                  	inc rsi
 29407 000161AF 48FFC2                  	inc rdx
 29408 000161B2 EBEA                    	jmp .L_lambda_simple_env_loop_00af
 29409                                  .L_lambda_simple_env_end_00af:
 29410 000161B4 5B                      	pop rbx
 29411 000161B5 BE00000000              	mov rsi, 0
 29412                                  .L_lambda_simple_params_loop_00af:	; copy params
 29413 000161BA 4883FE01                	cmp rsi, 1
 29414 000161BE 740E                    	je .L_lambda_simple_params_end_00af
 29415 000161C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29416 000161C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29417 000161C9 48FFC6                  	inc rsi
 29418 000161CC EBEC                    	jmp .L_lambda_simple_params_loop_00af
 29419                                  .L_lambda_simple_params_end_00af:
 29420 000161CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29421 000161D1 4889C3                  	mov rbx, rax
 29422 000161D4 58                      	pop rax
 29423 000161D5 C60004                  	mov byte [rax], T_closure
 29424 000161D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29425 000161DC 48C74009[E9610100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00af
 29426 000161E4 E918020000              	jmp .L_lambda_simple_end_00af
 29427                                  .L_lambda_simple_code_00af:	; lambda-simple body
 29428 000161E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29429 000161EF 740B                    	je .L_lambda_simple_arity_check_ok_00af
 29430 000161F1 FF742410                	push qword [rsp + 8 * 2]
 29431 000161F5 6A01                    	push 1
 29432 000161F7 E99C1D0000              	jmp L_error_incorrect_arity_simple
 29433                                  .L_lambda_simple_arity_check_ok_00af:
 29434 000161FC C8000000                	enter 0, 0
 29435                                  	; preparing a tail-call
 29436                                  	; preparing a non-tail-call
 29437 00016200 488B4520                	mov rax, PARAM(0)	; param str
 29438 00016204 50                      	push rax
 29439 00016205 6A01                    	push 1	; arg count
 29440 00016207 488B0425[34160000]      	mov rax, qword [free_var_127]	; free var string-length
 29441 0001620F 803805                  	cmp byte [rax], T_undefined
 29442 00016212 0F849A1C0000            	je L_error_fvar_undefined
 29443 00016218 803804                  	cmp byte [rax], T_closure
 29444 0001621B 0F85151D0000            	jne L_error_non_closure
 29445 00016221 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29446 00016224 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29447 00016227 50                      	push rax
 29448 00016228 6A01                    	push 1	; arg count
 29449 0001622A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29450 0001622F E8AB1D0000              	call malloc
 29451 00016234 50                      	push rax
 29452 00016235 BF08000000              	mov rdi, 8 * 1	; new rib
 29453 0001623A E8A01D0000              	call malloc
 29454 0001623F 50                      	push rax
 29455 00016240 BF18000000              	mov rdi, 8 * 3	; extended env
 29456 00016245 E8951D0000              	call malloc
 29457 0001624A 488B7D10                	mov rdi, ENV
 29458 0001624E BE00000000              	mov rsi, 0
 29459 00016253 BA01000000              	mov rdx, 1
 29460                                  .L_lambda_simple_env_loop_00b0:	; ext_env[i + 1] <-- env[i]
 29461 00016258 4883FE02                	cmp rsi, 2
 29462 0001625C 7410                    	je .L_lambda_simple_env_end_00b0
 29463 0001625E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29464 00016262 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29465 00016266 48FFC6                  	inc rsi
 29466 00016269 48FFC2                  	inc rdx
 29467 0001626C EBEA                    	jmp .L_lambda_simple_env_loop_00b0
 29468                                  .L_lambda_simple_env_end_00b0:
 29469 0001626E 5B                      	pop rbx
 29470 0001626F BE00000000              	mov rsi, 0
 29471                                  .L_lambda_simple_params_loop_00b0:	; copy params
 29472 00016274 4883FE01                	cmp rsi, 1
 29473 00016278 740E                    	je .L_lambda_simple_params_end_00b0
 29474 0001627A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29475 0001627F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29476 00016283 48FFC6                  	inc rsi
 29477 00016286 EBEC                    	jmp .L_lambda_simple_params_loop_00b0
 29478                                  .L_lambda_simple_params_end_00b0:
 29479 00016288 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29480 0001628B 4889C3                  	mov rbx, rax
 29481 0001628E 58                      	pop rax
 29482 0001628F C60004                  	mov byte [rax], T_closure
 29483 00016292 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29484 00016296 48C74009[A3620100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b0
 29485 0001629E E906010000              	jmp .L_lambda_simple_end_00b0
 29486                                  .L_lambda_simple_code_00b0:	; lambda-simple body
 29487 000162A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29488 000162A9 740B                    	je .L_lambda_simple_arity_check_ok_00b0
 29489 000162AB FF742410                	push qword [rsp + 8 * 2]
 29490 000162AF 6A01                    	push 1
 29491 000162B1 E9E21C0000              	jmp L_error_incorrect_arity_simple
 29492                                  .L_lambda_simple_arity_check_ok_00b0:
 29493 000162B6 C8000000                	enter 0, 0
 29494                                  	; preparing a non-tail-call
 29495 000162BA 488B4520                	mov rax, PARAM(0)	; param n
 29496 000162BE 50                      	push rax
 29497 000162BF 6A01                    	push 1	; arg count
 29498 000162C1 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 29499 000162C9 803805                  	cmp byte [rax], T_undefined
 29500 000162CC 0F84E01B0000            	je L_error_fvar_undefined
 29501 000162D2 803804                  	cmp byte [rax], T_closure
 29502 000162D5 0F855B1C0000            	jne L_error_non_closure
 29503 000162DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 29504 000162DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 29505 000162E1 483D[02000000]          	cmp rax, sob_boolean_false
 29506 000162E7 740F                    	je .L_if_else_008e
 29507 000162E9 488B4510                	mov rax, ENV
 29508 000162ED 488B00                  	mov rax, qword [rax + 8 * 0]
 29509 000162F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29510 000162F3 E9AD000000              	jmp .L_if_end_008e
 29511                                  .L_if_else_008e:
 29512                                  	; preparing a tail-call
 29513                                  	; preparing a non-tail-call
 29514 000162F8 48B8-                   	mov rax, L_constants + 2270
 29514 000162FA [DE08000000000000] 
 29515 00016302 50                      	push rax
 29516 00016303 488B4520                	mov rax, PARAM(0)	; param n
 29517 00016307 50                      	push rax
 29518 00016308 6A02                    	push 2	; arg count
 29519 0001630A 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29520 00016312 803805                  	cmp byte [rax], T_undefined
 29521 00016315 0F84971B0000            	je L_error_fvar_undefined
 29522 0001631B 803804                  	cmp byte [rax], T_closure
 29523 0001631E 0F85121C0000            	jne L_error_non_closure
 29524 00016324 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29525 00016327 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29526 0001632A 50                      	push rax
 29527 0001632B 48B8-                   	mov rax, L_constants + 2135
 29527 0001632D [5708000000000000] 
 29528 00016335 50                      	push rax
 29529 00016336 488B4510                	mov rax, ENV
 29530 0001633A 488B00                  	mov rax, qword [rax + 8 * 0]
 29531 0001633D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29532 00016340 50                      	push rax
 29533 00016341 6A03                    	push 3	; arg count
 29534 00016343 488B4510                	mov rax, ENV
 29535 00016347 488B4008                	mov rax, qword [rax + 8 * 1]
 29536 0001634B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29537 0001634E 488B00                  	mov rax, qword [rax]
 29538 00016351 803804                  	cmp byte [rax], T_closure
 29539 00016354 0F85DC1B0000            	jne L_error_non_closure
 29540 0001635A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29541 0001635D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29542 00016360 FF7500                  	push qword[rbp]
 29543 00016363 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29544 00016366 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29545 0001636A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29546 0001636E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29547 00016372 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29548 00016375 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29549 00016378 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29550 0001637D 4983C103                	add r9, 3 	 ;for getting to the params
 29551 00016381 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29552 00016385 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29553                                  .L_tc_recycle_frame_loop_0101:
 29554 00016388 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29555 0001638B 7410                    	je .L_tc_recycle_frame_done_0101
 29556 0001638D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29557 00016390 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29558 00016393 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29559 00016397 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29560 0001639B EBEB                    	jmp .L_tc_recycle_frame_loop_0101
 29561                                  .L_tc_recycle_frame_done_0101:
 29562 0001639D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29563 0001639E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29564 000163A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29565                                  .L_if_end_008e:
 29566 000163A5 C9                      	leave
 29567 000163A6 C21800                  	ret AND_KILL_FRAME(1)
 29568                                  .L_lambda_simple_end_00b0:	; new closure is in rax
 29569 000163A9 803804                  	cmp byte [rax], T_closure
 29570 000163AC 0F85841B0000            	jne L_error_non_closure
 29571 000163B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29572 000163B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29573 000163B8 FF7500                  	push qword[rbp]
 29574 000163BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29575 000163BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29576 000163C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29577 000163C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29578 000163CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29579 000163CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29580 000163D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29581 000163D5 4983C103                	add r9, 3 	 ;for getting to the params
 29582 000163D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29583 000163DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29584                                  .L_tc_recycle_frame_loop_0102:
 29585 000163E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29586 000163E3 7410                    	je .L_tc_recycle_frame_done_0102
 29587 000163E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29588 000163E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29589 000163EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29590 000163EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29591 000163F3 EBEB                    	jmp .L_tc_recycle_frame_loop_0102
 29592                                  .L_tc_recycle_frame_done_0102:
 29593 000163F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29594 000163F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29595 000163FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29596 000163FD C9                      	leave
 29597 000163FE C21800                  	ret AND_KILL_FRAME(1)
 29598                                  .L_lambda_simple_end_00af:	; new closure is in rax
 29599 00016401 C9                      	leave
 29600 00016402 C21800                  	ret AND_KILL_FRAME(1)
 29601                                  .L_lambda_simple_end_00ac:	; new closure is in rax
 29602 00016405 803804                  	cmp byte [rax], T_closure
 29603 00016408 0F85281B0000            	jne L_error_non_closure
 29604 0001640E FF7001                  	push SOB_CLOSURE_ENV(rax)
 29605 00016411 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29606 00016414 48890425[67160000]      	mov qword [free_var_130], rax
 29607 0001641C 48B8-                   	mov rax, sob_void
 29607 0001641E [0000000000000000] 
 29608                                  
 29609 00016426 4889C7                  	mov rdi, rax
 29610 00016429 E8061E0000              	call print_sexpr_if_not_void
 29611                                  	; preparing a non-tail-call
 29612 0001642E 48B8-                   	mov rax, L_constants + 1993
 29612 00016430 [C907000000000000] 
 29613 00016438 50                      	push rax
 29614 00016439 6A01                    	push 1	; arg count
 29615 0001643B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29616 00016440 E89A1B0000              	call malloc
 29617 00016445 50                      	push rax
 29618 00016446 BF00000000              	mov rdi, 8 * 0	; new rib
 29619 0001644B E88F1B0000              	call malloc
 29620 00016450 50                      	push rax
 29621 00016451 BF08000000              	mov rdi, 8 * 1	; extended env
 29622 00016456 E8841B0000              	call malloc
 29623 0001645B 488B7D10                	mov rdi, ENV
 29624 0001645F BE00000000              	mov rsi, 0
 29625 00016464 BA01000000              	mov rdx, 1
 29626                                  .L_lambda_simple_env_loop_00b1:	; ext_env[i + 1] <-- env[i]
 29627 00016469 4883FE00                	cmp rsi, 0
 29628 0001646D 7410                    	je .L_lambda_simple_env_end_00b1
 29629 0001646F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29630 00016473 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29631 00016477 48FFC6                  	inc rsi
 29632 0001647A 48FFC2                  	inc rdx
 29633 0001647D EBEA                    	jmp .L_lambda_simple_env_loop_00b1
 29634                                  .L_lambda_simple_env_end_00b1:
 29635 0001647F 5B                      	pop rbx
 29636 00016480 BE00000000              	mov rsi, 0
 29637                                  .L_lambda_simple_params_loop_00b1:	; copy params
 29638 00016485 4883FE00                	cmp rsi, 0
 29639 00016489 740E                    	je .L_lambda_simple_params_end_00b1
 29640 0001648B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29641 00016490 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29642 00016494 48FFC6                  	inc rsi
 29643 00016497 EBEC                    	jmp .L_lambda_simple_params_loop_00b1
 29644                                  .L_lambda_simple_params_end_00b1:
 29645 00016499 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29646 0001649C 4889C3                  	mov rbx, rax
 29647 0001649F 58                      	pop rax
 29648 000164A0 C60004                  	mov byte [rax], T_closure
 29649 000164A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29650 000164A7 48C74009[B4640100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b1
 29651 000164AF E959060000              	jmp .L_lambda_simple_end_00b1
 29652                                  .L_lambda_simple_code_00b1:	; lambda-simple body
 29653 000164B4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29654 000164BA 740B                    	je .L_lambda_simple_arity_check_ok_00b1
 29655 000164BC FF742410                	push qword [rsp + 8 * 2]
 29656 000164C0 6A01                    	push 1
 29657 000164C2 E9D11A0000              	jmp L_error_incorrect_arity_simple
 29658                                  .L_lambda_simple_arity_check_ok_00b1:
 29659 000164C7 C8000000                	enter 0, 0
 29660 000164CB BF08000000              	mov rdi, 8*1
 29661 000164D0 E80A1B0000              	call malloc
 29662 000164D5 488B5D20                	mov rbx, PARAM(0)
 29663 000164D9 488918                  	mov qword[rax], rbx
 29664 000164DC 48894520                	mov PARAM(0), rax
 29665 000164E0 48B8-                   	mov rax, sob_void
 29665 000164E2 [0000000000000000] 
 29666                                  
 29667 000164EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29668 000164EF E8EB1A0000              	call malloc
 29669 000164F4 50                      	push rax
 29670 000164F5 BF08000000              	mov rdi, 8 * 1	; new rib
 29671 000164FA E8E01A0000              	call malloc
 29672 000164FF 50                      	push rax
 29673 00016500 BF10000000              	mov rdi, 8 * 2	; extended env
 29674 00016505 E8D51A0000              	call malloc
 29675 0001650A 488B7D10                	mov rdi, ENV
 29676 0001650E BE00000000              	mov rsi, 0
 29677 00016513 BA01000000              	mov rdx, 1
 29678                                  .L_lambda_simple_env_loop_00b2:	; ext_env[i + 1] <-- env[i]
 29679 00016518 4883FE01                	cmp rsi, 1
 29680 0001651C 7410                    	je .L_lambda_simple_env_end_00b2
 29681 0001651E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29682 00016522 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29683 00016526 48FFC6                  	inc rsi
 29684 00016529 48FFC2                  	inc rdx
 29685 0001652C EBEA                    	jmp .L_lambda_simple_env_loop_00b2
 29686                                  .L_lambda_simple_env_end_00b2:
 29687 0001652E 5B                      	pop rbx
 29688 0001652F BE00000000              	mov rsi, 0
 29689                                  .L_lambda_simple_params_loop_00b2:	; copy params
 29690 00016534 4883FE01                	cmp rsi, 1
 29691 00016538 740E                    	je .L_lambda_simple_params_end_00b2
 29692 0001653A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29693 0001653F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29694 00016543 48FFC6                  	inc rsi
 29695 00016546 EBEC                    	jmp .L_lambda_simple_params_loop_00b2
 29696                                  .L_lambda_simple_params_end_00b2:
 29697 00016548 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29698 0001654B 4889C3                  	mov rbx, rax
 29699 0001654E 58                      	pop rax
 29700 0001654F C60004                  	mov byte [rax], T_closure
 29701 00016552 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29702 00016556 48C74009[63650100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b2
 29703 0001655E E904030000              	jmp .L_lambda_simple_end_00b2
 29704                                  .L_lambda_simple_code_00b2:	; lambda-simple body
 29705 00016563 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29706 00016569 740B                    	je .L_lambda_simple_arity_check_ok_00b2
 29707 0001656B FF742410                	push qword [rsp + 8 * 2]
 29708 0001656F 6A03                    	push 3
 29709 00016571 E9221A0000              	jmp L_error_incorrect_arity_simple
 29710                                  .L_lambda_simple_arity_check_ok_00b2:
 29711 00016576 C8000000                	enter 0, 0
 29712                                  	; preparing a non-tail-call
 29713 0001657A 488B4530                	mov rax, PARAM(2)	; param j
 29714 0001657E 50                      	push rax
 29715 0001657F 488B4528                	mov rax, PARAM(1)	; param i
 29716 00016583 50                      	push rax
 29717 00016584 6A02                    	push 2	; arg count
 29718 00016586 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 29719 0001658E 803805                  	cmp byte [rax], T_undefined
 29720 00016591 0F841B190000            	je L_error_fvar_undefined
 29721 00016597 803804                  	cmp byte [rax], T_closure
 29722 0001659A 0F8596190000            	jne L_error_non_closure
 29723 000165A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29724 000165A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29725 000165A6 483D[02000000]          	cmp rax, sob_boolean_false
 29726 000165AC 0F84AD020000            	je .L_if_else_008f
 29727                                  	; preparing a tail-call
 29728                                  	; preparing a non-tail-call
 29729 000165B2 488B4528                	mov rax, PARAM(1)	; param i
 29730 000165B6 50                      	push rax
 29731 000165B7 488B4520                	mov rax, PARAM(0)	; param vec
 29732 000165BB 50                      	push rax
 29733 000165BC 6A02                    	push 2	; arg count
 29734 000165BE 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 29735 000165C6 803805                  	cmp byte [rax], T_undefined
 29736 000165C9 0F84E3180000            	je L_error_fvar_undefined
 29737 000165CF 803804                  	cmp byte [rax], T_closure
 29738 000165D2 0F855E190000            	jne L_error_non_closure
 29739 000165D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29740 000165DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 29741 000165DE 50                      	push rax
 29742 000165DF 6A01                    	push 1	; arg count
 29743 000165E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29744 000165E6 E8F4190000              	call malloc
 29745 000165EB 50                      	push rax
 29746 000165EC BF18000000              	mov rdi, 8 * 3	; new rib
 29747 000165F1 E8E9190000              	call malloc
 29748 000165F6 50                      	push rax
 29749 000165F7 BF18000000              	mov rdi, 8 * 3	; extended env
 29750 000165FC E8DE190000              	call malloc
 29751 00016601 488B7D10                	mov rdi, ENV
 29752 00016605 BE00000000              	mov rsi, 0
 29753 0001660A BA01000000              	mov rdx, 1
 29754                                  .L_lambda_simple_env_loop_00b3:	; ext_env[i + 1] <-- env[i]
 29755 0001660F 4883FE02                	cmp rsi, 2
 29756 00016613 7410                    	je .L_lambda_simple_env_end_00b3
 29757 00016615 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29758 00016619 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29759 0001661D 48FFC6                  	inc rsi
 29760 00016620 48FFC2                  	inc rdx
 29761 00016623 EBEA                    	jmp .L_lambda_simple_env_loop_00b3
 29762                                  .L_lambda_simple_env_end_00b3:
 29763 00016625 5B                      	pop rbx
 29764 00016626 BE00000000              	mov rsi, 0
 29765                                  .L_lambda_simple_params_loop_00b3:	; copy params
 29766 0001662B 4883FE03                	cmp rsi, 3
 29767 0001662F 740E                    	je .L_lambda_simple_params_end_00b3
 29768 00016631 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29769 00016636 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29770 0001663A 48FFC6                  	inc rsi
 29771 0001663D EBEC                    	jmp .L_lambda_simple_params_loop_00b3
 29772                                  .L_lambda_simple_params_end_00b3:
 29773 0001663F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29774 00016642 4889C3                  	mov rbx, rax
 29775 00016645 58                      	pop rax
 29776 00016646 C60004                  	mov byte [rax], T_closure
 29777 00016649 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29778 0001664D 48C74009[5A660100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b3
 29779 00016655 E9AF010000              	jmp .L_lambda_simple_end_00b3
 29780                                  .L_lambda_simple_code_00b3:	; lambda-simple body
 29781 0001665A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29782 00016660 740B                    	je .L_lambda_simple_arity_check_ok_00b3
 29783 00016662 FF742410                	push qword [rsp + 8 * 2]
 29784 00016666 6A01                    	push 1
 29785 00016668 E92B190000              	jmp L_error_incorrect_arity_simple
 29786                                  .L_lambda_simple_arity_check_ok_00b3:
 29787 0001666D C8000000                	enter 0, 0
 29788                                  	; preparing a non-tail-call
 29789                                  	; preparing a non-tail-call
 29790 00016671 488B4510                	mov rax, ENV
 29791 00016675 488B00                  	mov rax, qword [rax + 8 * 0]
 29792 00016678 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29793 0001667C 50                      	push rax
 29794 0001667D 488B4510                	mov rax, ENV
 29795 00016681 488B00                  	mov rax, qword [rax + 8 * 0]
 29796 00016684 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29797 00016687 50                      	push rax
 29798 00016688 6A02                    	push 2	; arg count
 29799 0001668A 488B0425[55170000]      	mov rax, qword [free_var_144]	; free var vector-ref
 29800 00016692 803805                  	cmp byte [rax], T_undefined
 29801 00016695 0F8417180000            	je L_error_fvar_undefined
 29802 0001669B 803804                  	cmp byte [rax], T_closure
 29803 0001669E 0F8592180000            	jne L_error_non_closure
 29804 000166A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29805 000166A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29806 000166AA 50                      	push rax
 29807 000166AB 488B4510                	mov rax, ENV
 29808 000166AF 488B00                  	mov rax, qword [rax + 8 * 0]
 29809 000166B2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29810 000166B6 50                      	push rax
 29811 000166B7 488B4510                	mov rax, ENV
 29812 000166BB 488B00                  	mov rax, qword [rax + 8 * 0]
 29813 000166BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29814 000166C1 50                      	push rax
 29815 000166C2 6A03                    	push 3	; arg count
 29816 000166C4 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 29817 000166CC 803805                  	cmp byte [rax], T_undefined
 29818 000166CF 0F84DD170000            	je L_error_fvar_undefined
 29819 000166D5 803804                  	cmp byte [rax], T_closure
 29820 000166D8 0F8558180000            	jne L_error_non_closure
 29821 000166DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29822 000166E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29823                                  
 29824                                  	; preparing a non-tail-call
 29825 000166E4 488B4520                	mov rax, PARAM(0)	; param ch
 29826 000166E8 50                      	push rax
 29827 000166E9 488B4510                	mov rax, ENV
 29828 000166ED 488B00                  	mov rax, qword [rax + 8 * 0]
 29829 000166F0 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29830 000166F4 50                      	push rax
 29831 000166F5 488B4510                	mov rax, ENV
 29832 000166F9 488B00                  	mov rax, qword [rax + 8 * 0]
 29833 000166FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29834 000166FF 50                      	push rax
 29835 00016700 6A03                    	push 3	; arg count
 29836 00016702 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 29837 0001670A 803805                  	cmp byte [rax], T_undefined
 29838 0001670D 0F849F170000            	je L_error_fvar_undefined
 29839 00016713 803804                  	cmp byte [rax], T_closure
 29840 00016716 0F851A180000            	jne L_error_non_closure
 29841 0001671C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29842 0001671F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29843                                  
 29844                                  	; preparing a tail-call
 29845                                  	; preparing a non-tail-call
 29846 00016722 48B8-                   	mov rax, L_constants + 2270
 29846 00016724 [DE08000000000000] 
 29847 0001672C 50                      	push rax
 29848 0001672D 488B4510                	mov rax, ENV
 29849 00016731 488B00                  	mov rax, qword [rax + 8 * 0]
 29850 00016734 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29851 00016738 50                      	push rax
 29852 00016739 6A02                    	push 2	; arg count
 29853 0001673B 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 29854 00016743 803805                  	cmp byte [rax], T_undefined
 29855 00016746 0F8466170000            	je L_error_fvar_undefined
 29856 0001674C 803804                  	cmp byte [rax], T_closure
 29857 0001674F 0F85E1170000            	jne L_error_non_closure
 29858 00016755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29859 00016758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29860 0001675B 50                      	push rax
 29861                                  	; preparing a non-tail-call
 29862 0001675C 48B8-                   	mov rax, L_constants + 2270
 29862 0001675E [DE08000000000000] 
 29863 00016766 50                      	push rax
 29864 00016767 488B4510                	mov rax, ENV
 29865 0001676B 488B00                  	mov rax, qword [rax + 8 * 0]
 29866 0001676E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29867 00016772 50                      	push rax
 29868 00016773 6A02                    	push 2	; arg count
 29869 00016775 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 29870 0001677D 803805                  	cmp byte [rax], T_undefined
 29871 00016780 0F842C170000            	je L_error_fvar_undefined
 29872 00016786 803804                  	cmp byte [rax], T_closure
 29873 00016789 0F85A7170000            	jne L_error_non_closure
 29874 0001678F FF7001                  	push SOB_CLOSURE_ENV(rax)
 29875 00016792 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29876 00016795 50                      	push rax
 29877 00016796 488B4510                	mov rax, ENV
 29878 0001679A 488B00                  	mov rax, qword [rax + 8 * 0]
 29879 0001679D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29880 000167A0 50                      	push rax
 29881 000167A1 6A03                    	push 3	; arg count
 29882 000167A3 488B4510                	mov rax, ENV
 29883 000167A7 488B4008                	mov rax, qword [rax + 8 * 1]
 29884 000167AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29885 000167AE 488B00                  	mov rax, qword [rax]
 29886 000167B1 803804                  	cmp byte [rax], T_closure
 29887 000167B4 0F857C170000            	jne L_error_non_closure
 29888 000167BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 29889 000167BD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29890 000167C0 FF7500                  	push qword[rbp]
 29891 000167C3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29892 000167C6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29893 000167CA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29894 000167CE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29895 000167D2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29896 000167D5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29897 000167D8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29898 000167DD 4983C103                	add r9, 3 	 ;for getting to the params
 29899 000167E1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29900 000167E5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29901                                  .L_tc_recycle_frame_loop_0103:
 29902 000167E8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29903 000167EB 7410                    	je .L_tc_recycle_frame_done_0103
 29904 000167ED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29905 000167F0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29906 000167F3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29907 000167F7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29908 000167FB EBEB                    	jmp .L_tc_recycle_frame_loop_0103
 29909                                  .L_tc_recycle_frame_done_0103:
 29910 000167FD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29911 000167FE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29912 00016802 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29913 00016805 C9                      	leave
 29914 00016806 C21800                  	ret AND_KILL_FRAME(1)
 29915                                  .L_lambda_simple_end_00b3:	; new closure is in rax
 29916 00016809 803804                  	cmp byte [rax], T_closure
 29917 0001680C 0F8524170000            	jne L_error_non_closure
 29918 00016812 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29919 00016815 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29920 00016818 FF7500                  	push qword[rbp]
 29921 0001681B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29922 0001681E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29923 00016822 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29924 00016826 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29925 0001682A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29926 0001682D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29927 00016830 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29928 00016835 4983C103                	add r9, 3 	 ;for getting to the params
 29929 00016839 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29930 0001683D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29931                                  .L_tc_recycle_frame_loop_0104:
 29932 00016840 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29933 00016843 7410                    	je .L_tc_recycle_frame_done_0104
 29934 00016845 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29935 00016848 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29936 0001684B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29937 0001684F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29938 00016853 EBEB                    	jmp .L_tc_recycle_frame_loop_0104
 29939                                  .L_tc_recycle_frame_done_0104:
 29940 00016855 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29941 00016856 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29942 0001685A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29943 0001685D EB04                    	jmp .L_if_end_008f
 29944                                  .L_if_else_008f:
 29945 0001685F 488B4520                	mov rax, PARAM(0)	; param vec
 29946                                  .L_if_end_008f:
 29947 00016863 C9                      	leave
 29948 00016864 C22800                  	ret AND_KILL_FRAME(3)
 29949                                  .L_lambda_simple_end_00b2:	; new closure is in rax
 29950 00016867 50                      	push rax
 29951 00016868 488B4520                	mov rax, PARAM(0)	; param run
 29952 0001686C 8F00                    	pop qword [rax]
 29953 0001686E 48B8-                   	mov rax, sob_void
 29953 00016870 [0000000000000000] 
 29954                                  
 29955 00016878 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29956 0001687D E85D170000              	call malloc
 29957 00016882 50                      	push rax
 29958 00016883 BF08000000              	mov rdi, 8 * 1	; new rib
 29959 00016888 E852170000              	call malloc
 29960 0001688D 50                      	push rax
 29961 0001688E BF10000000              	mov rdi, 8 * 2	; extended env
 29962 00016893 E847170000              	call malloc
 29963 00016898 488B7D10                	mov rdi, ENV
 29964 0001689C BE00000000              	mov rsi, 0
 29965 000168A1 BA01000000              	mov rdx, 1
 29966                                  .L_lambda_simple_env_loop_00b4:	; ext_env[i + 1] <-- env[i]
 29967 000168A6 4883FE01                	cmp rsi, 1
 29968 000168AA 7410                    	je .L_lambda_simple_env_end_00b4
 29969 000168AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29970 000168B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29971 000168B4 48FFC6                  	inc rsi
 29972 000168B7 48FFC2                  	inc rdx
 29973 000168BA EBEA                    	jmp .L_lambda_simple_env_loop_00b4
 29974                                  .L_lambda_simple_env_end_00b4:
 29975 000168BC 5B                      	pop rbx
 29976 000168BD BE00000000              	mov rsi, 0
 29977                                  .L_lambda_simple_params_loop_00b4:	; copy params
 29978 000168C2 4883FE01                	cmp rsi, 1
 29979 000168C6 740E                    	je .L_lambda_simple_params_end_00b4
 29980 000168C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29981 000168CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29982 000168D1 48FFC6                  	inc rsi
 29983 000168D4 EBEC                    	jmp .L_lambda_simple_params_loop_00b4
 29984                                  .L_lambda_simple_params_end_00b4:
 29985 000168D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29986 000168D9 4889C3                  	mov rbx, rax
 29987 000168DC 58                      	pop rax
 29988 000168DD C60004                  	mov byte [rax], T_closure
 29989 000168E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29990 000168E4 48C74009[F1680100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b4
 29991 000168EC E918020000              	jmp .L_lambda_simple_end_00b4
 29992                                  .L_lambda_simple_code_00b4:	; lambda-simple body
 29993 000168F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29994 000168F7 740B                    	je .L_lambda_simple_arity_check_ok_00b4
 29995 000168F9 FF742410                	push qword [rsp + 8 * 2]
 29996 000168FD 6A01                    	push 1
 29997 000168FF E994160000              	jmp L_error_incorrect_arity_simple
 29998                                  .L_lambda_simple_arity_check_ok_00b4:
 29999 00016904 C8000000                	enter 0, 0
 30000                                  	; preparing a tail-call
 30001                                  	; preparing a non-tail-call
 30002 00016908 488B4520                	mov rax, PARAM(0)	; param vec
 30003 0001690C 50                      	push rax
 30004 0001690D 6A01                    	push 1	; arg count
 30005 0001690F 488B0425[44170000]      	mov rax, qword [free_var_143]	; free var vector-length
 30006 00016917 803805                  	cmp byte [rax], T_undefined
 30007 0001691A 0F8492150000            	je L_error_fvar_undefined
 30008 00016920 803804                  	cmp byte [rax], T_closure
 30009 00016923 0F850D160000            	jne L_error_non_closure
 30010 00016929 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30011 0001692C FF5009                  	call SOB_CLOSURE_CODE(rax)
 30012 0001692F 50                      	push rax
 30013 00016930 6A01                    	push 1	; arg count
 30014 00016932 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30015 00016937 E8A3160000              	call malloc
 30016 0001693C 50                      	push rax
 30017 0001693D BF08000000              	mov rdi, 8 * 1	; new rib
 30018 00016942 E898160000              	call malloc
 30019 00016947 50                      	push rax
 30020 00016948 BF18000000              	mov rdi, 8 * 3	; extended env
 30021 0001694D E88D160000              	call malloc
 30022 00016952 488B7D10                	mov rdi, ENV
 30023 00016956 BE00000000              	mov rsi, 0
 30024 0001695B BA01000000              	mov rdx, 1
 30025                                  .L_lambda_simple_env_loop_00b5:	; ext_env[i + 1] <-- env[i]
 30026 00016960 4883FE02                	cmp rsi, 2
 30027 00016964 7410                    	je .L_lambda_simple_env_end_00b5
 30028 00016966 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30029 0001696A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30030 0001696E 48FFC6                  	inc rsi
 30031 00016971 48FFC2                  	inc rdx
 30032 00016974 EBEA                    	jmp .L_lambda_simple_env_loop_00b5
 30033                                  .L_lambda_simple_env_end_00b5:
 30034 00016976 5B                      	pop rbx
 30035 00016977 BE00000000              	mov rsi, 0
 30036                                  .L_lambda_simple_params_loop_00b5:	; copy params
 30037 0001697C 4883FE01                	cmp rsi, 1
 30038 00016980 740E                    	je .L_lambda_simple_params_end_00b5
 30039 00016982 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30040 00016987 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30041 0001698B 48FFC6                  	inc rsi
 30042 0001698E EBEC                    	jmp .L_lambda_simple_params_loop_00b5
 30043                                  .L_lambda_simple_params_end_00b5:
 30044 00016990 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30045 00016993 4889C3                  	mov rbx, rax
 30046 00016996 58                      	pop rax
 30047 00016997 C60004                  	mov byte [rax], T_closure
 30048 0001699A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30049 0001699E 48C74009[AB690100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b5
 30050 000169A6 E906010000              	jmp .L_lambda_simple_end_00b5
 30051                                  .L_lambda_simple_code_00b5:	; lambda-simple body
 30052 000169AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30053 000169B1 740B                    	je .L_lambda_simple_arity_check_ok_00b5
 30054 000169B3 FF742410                	push qword [rsp + 8 * 2]
 30055 000169B7 6A01                    	push 1
 30056 000169B9 E9DA150000              	jmp L_error_incorrect_arity_simple
 30057                                  .L_lambda_simple_arity_check_ok_00b5:
 30058 000169BE C8000000                	enter 0, 0
 30059                                  	; preparing a non-tail-call
 30060 000169C2 488B4520                	mov rax, PARAM(0)	; param n
 30061 000169C6 50                      	push rax
 30062 000169C7 6A01                    	push 1	; arg count
 30063 000169C9 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 30064 000169D1 803805                  	cmp byte [rax], T_undefined
 30065 000169D4 0F84D8140000            	je L_error_fvar_undefined
 30066 000169DA 803804                  	cmp byte [rax], T_closure
 30067 000169DD 0F8553150000            	jne L_error_non_closure
 30068 000169E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30069 000169E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30070 000169E9 483D[02000000]          	cmp rax, sob_boolean_false
 30071 000169EF 740F                    	je .L_if_else_0090
 30072 000169F1 488B4510                	mov rax, ENV
 30073 000169F5 488B00                  	mov rax, qword [rax + 8 * 0]
 30074 000169F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30075 000169FB E9AD000000              	jmp .L_if_end_0090
 30076                                  .L_if_else_0090:
 30077                                  	; preparing a tail-call
 30078                                  	; preparing a non-tail-call
 30079 00016A00 48B8-                   	mov rax, L_constants + 2270
 30079 00016A02 [DE08000000000000] 
 30080 00016A0A 50                      	push rax
 30081 00016A0B 488B4520                	mov rax, PARAM(0)	; param n
 30082 00016A0F 50                      	push rax
 30083 00016A10 6A02                    	push 2	; arg count
 30084 00016A12 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 30085 00016A1A 803805                  	cmp byte [rax], T_undefined
 30086 00016A1D 0F848F140000            	je L_error_fvar_undefined
 30087 00016A23 803804                  	cmp byte [rax], T_closure
 30088 00016A26 0F850A150000            	jne L_error_non_closure
 30089 00016A2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30090 00016A2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 30091 00016A32 50                      	push rax
 30092 00016A33 48B8-                   	mov rax, L_constants + 2135
 30092 00016A35 [5708000000000000] 
 30093 00016A3D 50                      	push rax
 30094 00016A3E 488B4510                	mov rax, ENV
 30095 00016A42 488B00                  	mov rax, qword [rax + 8 * 0]
 30096 00016A45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30097 00016A48 50                      	push rax
 30098 00016A49 6A03                    	push 3	; arg count
 30099 00016A4B 488B4510                	mov rax, ENV
 30100 00016A4F 488B4008                	mov rax, qword [rax + 8 * 1]
 30101 00016A53 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30102 00016A56 488B00                  	mov rax, qword [rax]
 30103 00016A59 803804                  	cmp byte [rax], T_closure
 30104 00016A5C 0F85D4140000            	jne L_error_non_closure
 30105 00016A62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30106 00016A65 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30107 00016A68 FF7500                  	push qword[rbp]
 30108 00016A6B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30109 00016A6E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30110 00016A72 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30111 00016A76 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30112 00016A7A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30113 00016A7D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30114 00016A80 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30115 00016A85 4983C103                	add r9, 3 	 ;for getting to the params
 30116 00016A89 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30117 00016A8D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30118                                  .L_tc_recycle_frame_loop_0105:
 30119 00016A90 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30120 00016A93 7410                    	je .L_tc_recycle_frame_done_0105
 30121 00016A95 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30122 00016A98 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30123 00016A9B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30124 00016A9F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30125 00016AA3 EBEB                    	jmp .L_tc_recycle_frame_loop_0105
 30126                                  .L_tc_recycle_frame_done_0105:
 30127 00016AA5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30128 00016AA6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30129 00016AAA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30130                                  .L_if_end_0090:
 30131 00016AAD C9                      	leave
 30132 00016AAE C21800                  	ret AND_KILL_FRAME(1)
 30133                                  .L_lambda_simple_end_00b5:	; new closure is in rax
 30134 00016AB1 803804                  	cmp byte [rax], T_closure
 30135 00016AB4 0F857C140000            	jne L_error_non_closure
 30136 00016ABA FF7001                  	push SOB_CLOSURE_ENV(rax)
 30137 00016ABD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30138 00016AC0 FF7500                  	push qword[rbp]
 30139 00016AC3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30140 00016AC6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30141 00016ACA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30142 00016ACE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30143 00016AD2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30144 00016AD5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30145 00016AD8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30146 00016ADD 4983C103                	add r9, 3 	 ;for getting to the params
 30147 00016AE1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30148 00016AE5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30149                                  .L_tc_recycle_frame_loop_0106:
 30150 00016AE8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30151 00016AEB 7410                    	je .L_tc_recycle_frame_done_0106
 30152 00016AED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30153 00016AF0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30154 00016AF3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30155 00016AF7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30156 00016AFB EBEB                    	jmp .L_tc_recycle_frame_loop_0106
 30157                                  .L_tc_recycle_frame_done_0106:
 30158 00016AFD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30159 00016AFE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30160 00016B02 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30161 00016B05 C9                      	leave
 30162 00016B06 C21800                  	ret AND_KILL_FRAME(1)
 30163                                  .L_lambda_simple_end_00b4:	; new closure is in rax
 30164 00016B09 C9                      	leave
 30165 00016B0A C21800                  	ret AND_KILL_FRAME(1)
 30166                                  .L_lambda_simple_end_00b1:	; new closure is in rax
 30167 00016B0D 803804                  	cmp byte [rax], T_closure
 30168 00016B10 0F8520140000            	jne L_error_non_closure
 30169 00016B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30170 00016B19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30171 00016B1C 48890425[77170000]      	mov qword [free_var_146], rax
 30172 00016B24 48B8-                   	mov rax, sob_void
 30172 00016B26 [0000000000000000] 
 30173                                  
 30174 00016B2E 4889C7                  	mov rdi, rax
 30175 00016B31 E8FE160000              	call print_sexpr_if_not_void
 30176 00016B36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30177 00016B3B E89F140000              	call malloc
 30178 00016B40 50                      	push rax
 30179 00016B41 BF00000000              	mov rdi, 8 * 0	; new rib
 30180 00016B46 E894140000              	call malloc
 30181 00016B4B 50                      	push rax
 30182 00016B4C BF08000000              	mov rdi, 8 * 1	; extended env
 30183 00016B51 E889140000              	call malloc
 30184 00016B56 488B7D10                	mov rdi, ENV
 30185 00016B5A BE00000000              	mov rsi, 0
 30186 00016B5F BA01000000              	mov rdx, 1
 30187                                  .L_lambda_simple_env_loop_00b6:	; ext_env[i + 1] <-- env[i]
 30188 00016B64 4883FE00                	cmp rsi, 0
 30189 00016B68 7410                    	je .L_lambda_simple_env_end_00b6
 30190 00016B6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30191 00016B6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30192 00016B72 48FFC6                  	inc rsi
 30193 00016B75 48FFC2                  	inc rdx
 30194 00016B78 EBEA                    	jmp .L_lambda_simple_env_loop_00b6
 30195                                  .L_lambda_simple_env_end_00b6:
 30196 00016B7A 5B                      	pop rbx
 30197 00016B7B BE00000000              	mov rsi, 0
 30198                                  .L_lambda_simple_params_loop_00b6:	; copy params
 30199 00016B80 4883FE00                	cmp rsi, 0
 30200 00016B84 740E                    	je .L_lambda_simple_params_end_00b6
 30201 00016B86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30202 00016B8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30203 00016B8F 48FFC6                  	inc rsi
 30204 00016B92 EBEC                    	jmp .L_lambda_simple_params_loop_00b6
 30205                                  .L_lambda_simple_params_end_00b6:
 30206 00016B94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30207 00016B97 4889C3                  	mov rbx, rax
 30208 00016B9A 58                      	pop rax
 30209 00016B9B C60004                  	mov byte [rax], T_closure
 30210 00016B9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30211 00016BA2 48C74009[AF6B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b6
 30212 00016BAA E963030000              	jmp .L_lambda_simple_end_00b6
 30213                                  .L_lambda_simple_code_00b6:	; lambda-simple body
 30214 00016BAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30215 00016BB5 740B                    	je .L_lambda_simple_arity_check_ok_00b6
 30216 00016BB7 FF742410                	push qword [rsp + 8 * 2]
 30217 00016BBB 6A02                    	push 2
 30218 00016BBD E9D6130000              	jmp L_error_incorrect_arity_simple
 30219                                  .L_lambda_simple_arity_check_ok_00b6:
 30220 00016BC2 C8000000                	enter 0, 0
 30221                                  	; preparing a tail-call
 30222 00016BC6 48B8-                   	mov rax, L_constants + 1993
 30222 00016BC8 [C907000000000000] 
 30223 00016BD0 50                      	push rax
 30224 00016BD1 6A01                    	push 1	; arg count
 30225 00016BD3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30226 00016BD8 E802140000              	call malloc
 30227 00016BDD 50                      	push rax
 30228 00016BDE BF10000000              	mov rdi, 8 * 2	; new rib
 30229 00016BE3 E8F7130000              	call malloc
 30230 00016BE8 50                      	push rax
 30231 00016BE9 BF10000000              	mov rdi, 8 * 2	; extended env
 30232 00016BEE E8EC130000              	call malloc
 30233 00016BF3 488B7D10                	mov rdi, ENV
 30234 00016BF7 BE00000000              	mov rsi, 0
 30235 00016BFC BA01000000              	mov rdx, 1
 30236                                  .L_lambda_simple_env_loop_00b7:	; ext_env[i + 1] <-- env[i]
 30237 00016C01 4883FE01                	cmp rsi, 1
 30238 00016C05 7410                    	je .L_lambda_simple_env_end_00b7
 30239 00016C07 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30240 00016C0B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30241 00016C0F 48FFC6                  	inc rsi
 30242 00016C12 48FFC2                  	inc rdx
 30243 00016C15 EBEA                    	jmp .L_lambda_simple_env_loop_00b7
 30244                                  .L_lambda_simple_env_end_00b7:
 30245 00016C17 5B                      	pop rbx
 30246 00016C18 BE00000000              	mov rsi, 0
 30247                                  .L_lambda_simple_params_loop_00b7:	; copy params
 30248 00016C1D 4883FE02                	cmp rsi, 2
 30249 00016C21 740E                    	je .L_lambda_simple_params_end_00b7
 30250 00016C23 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30251 00016C28 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30252 00016C2C 48FFC6                  	inc rsi
 30253 00016C2F EBEC                    	jmp .L_lambda_simple_params_loop_00b7
 30254                                  .L_lambda_simple_params_end_00b7:
 30255 00016C31 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30256 00016C34 4889C3                  	mov rbx, rax
 30257 00016C37 58                      	pop rax
 30258 00016C38 C60004                  	mov byte [rax], T_closure
 30259 00016C3B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30260 00016C3F 48C74009[4C6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b7
 30261 00016C47 E96E020000              	jmp .L_lambda_simple_end_00b7
 30262                                  .L_lambda_simple_code_00b7:	; lambda-simple body
 30263 00016C4C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30264 00016C52 740B                    	je .L_lambda_simple_arity_check_ok_00b7
 30265 00016C54 FF742410                	push qword [rsp + 8 * 2]
 30266 00016C58 6A01                    	push 1
 30267 00016C5A E939130000              	jmp L_error_incorrect_arity_simple
 30268                                  .L_lambda_simple_arity_check_ok_00b7:
 30269 00016C5F C8000000                	enter 0, 0
 30270 00016C63 BF08000000              	mov rdi, 8*1
 30271 00016C68 E872130000              	call malloc
 30272 00016C6D 488B5D20                	mov rbx, PARAM(0)
 30273 00016C71 488918                  	mov qword[rax], rbx
 30274 00016C74 48894520                	mov PARAM(0), rax
 30275 00016C78 48B8-                   	mov rax, sob_void
 30275 00016C7A [0000000000000000] 
 30276                                  
 30277 00016C82 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30278 00016C87 E853130000              	call malloc
 30279 00016C8C 50                      	push rax
 30280 00016C8D BF08000000              	mov rdi, 8 * 1	; new rib
 30281 00016C92 E848130000              	call malloc
 30282 00016C97 50                      	push rax
 30283 00016C98 BF18000000              	mov rdi, 8 * 3	; extended env
 30284 00016C9D E83D130000              	call malloc
 30285 00016CA2 488B7D10                	mov rdi, ENV
 30286 00016CA6 BE00000000              	mov rsi, 0
 30287 00016CAB BA01000000              	mov rdx, 1
 30288                                  .L_lambda_simple_env_loop_00b8:	; ext_env[i + 1] <-- env[i]
 30289 00016CB0 4883FE02                	cmp rsi, 2
 30290 00016CB4 7410                    	je .L_lambda_simple_env_end_00b8
 30291 00016CB6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30292 00016CBA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30293 00016CBE 48FFC6                  	inc rsi
 30294 00016CC1 48FFC2                  	inc rdx
 30295 00016CC4 EBEA                    	jmp .L_lambda_simple_env_loop_00b8
 30296                                  .L_lambda_simple_env_end_00b8:
 30297 00016CC6 5B                      	pop rbx
 30298 00016CC7 BE00000000              	mov rsi, 0
 30299                                  .L_lambda_simple_params_loop_00b8:	; copy params
 30300 00016CCC 4883FE01                	cmp rsi, 1
 30301 00016CD0 740E                    	je .L_lambda_simple_params_end_00b8
 30302 00016CD2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30303 00016CD7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30304 00016CDB 48FFC6                  	inc rsi
 30305 00016CDE EBEC                    	jmp .L_lambda_simple_params_loop_00b8
 30306                                  .L_lambda_simple_params_end_00b8:
 30307 00016CE0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30308 00016CE3 4889C3                  	mov rbx, rax
 30309 00016CE6 58                      	pop rax
 30310 00016CE7 C60004                  	mov byte [rax], T_closure
 30311 00016CEA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30312 00016CEE 48C74009[FB6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b8
 30313 00016CF6 E942010000              	jmp .L_lambda_simple_end_00b8
 30314                                  .L_lambda_simple_code_00b8:	; lambda-simple body
 30315 00016CFB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30316 00016D01 740B                    	je .L_lambda_simple_arity_check_ok_00b8
 30317 00016D03 FF742410                	push qword [rsp + 8 * 2]
 30318 00016D07 6A01                    	push 1
 30319 00016D09 E98A120000              	jmp L_error_incorrect_arity_simple
 30320                                  .L_lambda_simple_arity_check_ok_00b8:
 30321 00016D0E C8000000                	enter 0, 0
 30322                                  	; preparing a non-tail-call
 30323 00016D12 488B4510                	mov rax, ENV
 30324 00016D16 488B4008                	mov rax, qword [rax + 8 * 1]
 30325 00016D1A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30326 00016D1D 50                      	push rax
 30327 00016D1E 488B4520                	mov rax, PARAM(0)	; param i
 30328 00016D22 50                      	push rax
 30329 00016D23 6A02                    	push 2	; arg count
 30330 00016D25 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 30331 00016D2D 803805                  	cmp byte [rax], T_undefined
 30332 00016D30 0F847C110000            	je L_error_fvar_undefined
 30333 00016D36 803804                  	cmp byte [rax], T_closure
 30334 00016D39 0F85F7110000            	jne L_error_non_closure
 30335 00016D3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 30336 00016D42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30337 00016D45 483D[02000000]          	cmp rax, sob_boolean_false
 30338 00016D4B 0F84DE000000            	je .L_if_else_0091
 30339                                  	; preparing a tail-call
 30340                                  	; preparing a non-tail-call
 30341                                  	; preparing a non-tail-call
 30342 00016D51 48B8-                   	mov rax, L_constants + 2270
 30342 00016D53 [DE08000000000000] 
 30343 00016D5B 50                      	push rax
 30344 00016D5C 488B4520                	mov rax, PARAM(0)	; param i
 30345 00016D60 50                      	push rax
 30346 00016D61 6A02                    	push 2	; arg count
 30347 00016D63 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 30348 00016D6B 803805                  	cmp byte [rax], T_undefined
 30349 00016D6E 0F843E110000            	je L_error_fvar_undefined
 30350 00016D74 803804                  	cmp byte [rax], T_closure
 30351 00016D77 0F85B9110000            	jne L_error_non_closure
 30352 00016D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30353 00016D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30354 00016D83 50                      	push rax
 30355 00016D84 6A01                    	push 1	; arg count
 30356 00016D86 488B4510                	mov rax, ENV
 30357 00016D8A 488B00                  	mov rax, qword [rax + 8 * 0]
 30358 00016D8D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30359 00016D90 488B00                  	mov rax, qword [rax]
 30360 00016D93 803804                  	cmp byte [rax], T_closure
 30361 00016D96 0F859A110000            	jne L_error_non_closure
 30362 00016D9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30363 00016D9F FF5009                  	call SOB_CLOSURE_CODE(rax)
 30364 00016DA2 50                      	push rax
 30365                                  	; preparing a non-tail-call
 30366 00016DA3 488B4520                	mov rax, PARAM(0)	; param i
 30367 00016DA7 50                      	push rax
 30368 00016DA8 6A01                    	push 1	; arg count
 30369 00016DAA 488B4510                	mov rax, ENV
 30370 00016DAE 488B4008                	mov rax, qword [rax + 8 * 1]
 30371 00016DB2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30372 00016DB6 803804                  	cmp byte [rax], T_closure
 30373 00016DB9 0F8577110000            	jne L_error_non_closure
 30374 00016DBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 30375 00016DC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30376 00016DC5 50                      	push rax
 30377 00016DC6 6A02                    	push 2	; arg count
 30378 00016DC8 488B0425[04130000]      	mov rax, qword [free_var_79]	; free var cons
 30379 00016DD0 803805                  	cmp byte [rax], T_undefined
 30380 00016DD3 0F84D9100000            	je L_error_fvar_undefined
 30381 00016DD9 803804                  	cmp byte [rax], T_closure
 30382 00016DDC 0F8554110000            	jne L_error_non_closure
 30383 00016DE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30384 00016DE5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30385 00016DE8 FF7500                  	push qword[rbp]
 30386 00016DEB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30387 00016DEE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30388 00016DF2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30389 00016DF6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30390 00016DFA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30391 00016DFD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30392 00016E00 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30393 00016E05 4983C103                	add r9, 3 	 ;for getting to the params
 30394 00016E09 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30395 00016E0D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30396                                  .L_tc_recycle_frame_loop_0107:
 30397 00016E10 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30398 00016E13 7410                    	je .L_tc_recycle_frame_done_0107
 30399 00016E15 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30400 00016E18 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30401 00016E1B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30402 00016E1F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30403 00016E23 EBEB                    	jmp .L_tc_recycle_frame_loop_0107
 30404                                  .L_tc_recycle_frame_done_0107:
 30405 00016E25 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30406 00016E26 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30407 00016E2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30408 00016E2D EB0A                    	jmp .L_if_end_0091
 30409                                  .L_if_else_0091:
 30410 00016E2F 48B8-                   	mov rax, L_constants + 1
 30410 00016E31 [0100000000000000] 
 30411                                  .L_if_end_0091:
 30412 00016E39 C9                      	leave
 30413 00016E3A C21800                  	ret AND_KILL_FRAME(1)
 30414                                  .L_lambda_simple_end_00b8:	; new closure is in rax
 30415 00016E3D 50                      	push rax
 30416 00016E3E 488B4520                	mov rax, PARAM(0)	; param run
 30417 00016E42 8F00                    	pop qword [rax]
 30418 00016E44 48B8-                   	mov rax, sob_void
 30418 00016E46 [0000000000000000] 
 30419                                  
 30420                                  	; preparing a tail-call
 30421 00016E4E 48B8-                   	mov rax, L_constants + 2135
 30421 00016E50 [5708000000000000] 
 30422 00016E58 50                      	push rax
 30423 00016E59 6A01                    	push 1	; arg count
 30424 00016E5B 488B4520                	mov rax, PARAM(0)	; param run
 30425 00016E5F 488B00                  	mov rax, qword [rax]
 30426 00016E62 803804                  	cmp byte [rax], T_closure
 30427 00016E65 0F85CB100000            	jne L_error_non_closure
 30428 00016E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 30429 00016E6E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30430 00016E71 FF7500                  	push qword[rbp]
 30431 00016E74 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30432 00016E77 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30433 00016E7B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30434 00016E7F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30435 00016E83 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30436 00016E86 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30437 00016E89 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30438 00016E8E 4983C103                	add r9, 3 	 ;for getting to the params
 30439 00016E92 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30440 00016E96 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30441                                  .L_tc_recycle_frame_loop_0108:
 30442 00016E99 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30443 00016E9C 7410                    	je .L_tc_recycle_frame_done_0108
 30444 00016E9E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30445 00016EA1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30446 00016EA4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30447 00016EA8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30448 00016EAC EBEB                    	jmp .L_tc_recycle_frame_loop_0108
 30449                                  .L_tc_recycle_frame_done_0108:
 30450 00016EAE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30451 00016EAF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30452 00016EB3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30453 00016EB6 C9                      	leave
 30454 00016EB7 C21800                  	ret AND_KILL_FRAME(1)
 30455                                  .L_lambda_simple_end_00b7:	; new closure is in rax
 30456 00016EBA 803804                  	cmp byte [rax], T_closure
 30457 00016EBD 0F8573100000            	jne L_error_non_closure
 30458 00016EC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30459 00016EC6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30460 00016EC9 FF7500                  	push qword[rbp]
 30461 00016ECC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30462 00016ECF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30463 00016ED3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30464 00016ED7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30465 00016EDB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30466 00016EDE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30467 00016EE1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30468 00016EE6 4983C103                	add r9, 3 	 ;for getting to the params
 30469 00016EEA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30470 00016EEE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30471                                  .L_tc_recycle_frame_loop_0109:
 30472 00016EF1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30473 00016EF4 7410                    	je .L_tc_recycle_frame_done_0109
 30474 00016EF6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30475 00016EF9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30476 00016EFC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30477 00016F00 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30478 00016F04 EBEB                    	jmp .L_tc_recycle_frame_loop_0109
 30479                                  .L_tc_recycle_frame_done_0109:
 30480 00016F06 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30481 00016F07 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30482 00016F0B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30483 00016F0E C9                      	leave
 30484 00016F0F C22000                  	ret AND_KILL_FRAME(2)
 30485                                  .L_lambda_simple_end_00b6:	; new closure is in rax
 30486 00016F12 48890425[47140000]      	mov qword [free_var_98], rax
 30487 00016F1A 48B8-                   	mov rax, sob_void
 30487 00016F1C [0000000000000000] 
 30488                                  
 30489 00016F24 4889C7                  	mov rdi, rax
 30490 00016F27 E808130000              	call print_sexpr_if_not_void
 30491 00016F2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30492 00016F31 E8A9100000              	call malloc
 30493 00016F36 50                      	push rax
 30494 00016F37 BF00000000              	mov rdi, 8 * 0	; new rib
 30495 00016F3C E89E100000              	call malloc
 30496 00016F41 50                      	push rax
 30497 00016F42 BF08000000              	mov rdi, 8 * 1	; extended env
 30498 00016F47 E893100000              	call malloc
 30499 00016F4C 488B7D10                	mov rdi, ENV
 30500 00016F50 BE00000000              	mov rsi, 0
 30501 00016F55 BA01000000              	mov rdx, 1
 30502                                  .L_lambda_simple_env_loop_00b9:	; ext_env[i + 1] <-- env[i]
 30503 00016F5A 4883FE00                	cmp rsi, 0
 30504 00016F5E 7410                    	je .L_lambda_simple_env_end_00b9
 30505 00016F60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30506 00016F64 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30507 00016F68 48FFC6                  	inc rsi
 30508 00016F6B 48FFC2                  	inc rdx
 30509 00016F6E EBEA                    	jmp .L_lambda_simple_env_loop_00b9
 30510                                  .L_lambda_simple_env_end_00b9:
 30511 00016F70 5B                      	pop rbx
 30512 00016F71 BE00000000              	mov rsi, 0
 30513                                  .L_lambda_simple_params_loop_00b9:	; copy params
 30514 00016F76 4883FE00                	cmp rsi, 0
 30515 00016F7A 740E                    	je .L_lambda_simple_params_end_00b9
 30516 00016F7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30517 00016F81 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30518 00016F85 48FFC6                  	inc rsi
 30519 00016F88 EBEC                    	jmp .L_lambda_simple_params_loop_00b9
 30520                                  .L_lambda_simple_params_end_00b9:
 30521 00016F8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30522 00016F8D 4889C3                  	mov rbx, rax
 30523 00016F90 58                      	pop rax
 30524 00016F91 C60004                  	mov byte [rax], T_closure
 30525 00016F94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30526 00016F98 48C74009[A56F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b9
 30527 00016FA0 E986040000              	jmp .L_lambda_simple_end_00b9
 30528                                  .L_lambda_simple_code_00b9:	; lambda-simple body
 30529 00016FA5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30530 00016FAB 740B                    	je .L_lambda_simple_arity_check_ok_00b9
 30531 00016FAD FF742410                	push qword [rsp + 8 * 2]
 30532 00016FB1 6A02                    	push 2
 30533 00016FB3 E9E00F0000              	jmp L_error_incorrect_arity_simple
 30534                                  .L_lambda_simple_arity_check_ok_00b9:
 30535 00016FB8 C8000000                	enter 0, 0
 30536                                  	; preparing a tail-call
 30537                                  	; preparing a non-tail-call
 30538 00016FBC 488B4520                	mov rax, PARAM(0)	; param n
 30539 00016FC0 50                      	push rax
 30540 00016FC1 6A01                    	push 1	; arg count
 30541 00016FC3 488B0425[58140000]      	mov rax, qword [free_var_99]	; free var make-string
 30542 00016FCB 803805                  	cmp byte [rax], T_undefined
 30543 00016FCE 0F84DE0E0000            	je L_error_fvar_undefined
 30544 00016FD4 803804                  	cmp byte [rax], T_closure
 30545 00016FD7 0F85590F0000            	jne L_error_non_closure
 30546 00016FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 30547 00016FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30548 00016FE3 50                      	push rax
 30549 00016FE4 6A01                    	push 1	; arg count
 30550 00016FE6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30551 00016FEB E8EF0F0000              	call malloc
 30552 00016FF0 50                      	push rax
 30553 00016FF1 BF10000000              	mov rdi, 8 * 2	; new rib
 30554 00016FF6 E8E40F0000              	call malloc
 30555 00016FFB 50                      	push rax
 30556 00016FFC BF10000000              	mov rdi, 8 * 2	; extended env
 30557 00017001 E8D90F0000              	call malloc
 30558 00017006 488B7D10                	mov rdi, ENV
 30559 0001700A BE00000000              	mov rsi, 0
 30560 0001700F BA01000000              	mov rdx, 1
 30561                                  .L_lambda_simple_env_loop_00ba:	; ext_env[i + 1] <-- env[i]
 30562 00017014 4883FE01                	cmp rsi, 1
 30563 00017018 7410                    	je .L_lambda_simple_env_end_00ba
 30564 0001701A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30565 0001701E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30566 00017022 48FFC6                  	inc rsi
 30567 00017025 48FFC2                  	inc rdx
 30568 00017028 EBEA                    	jmp .L_lambda_simple_env_loop_00ba
 30569                                  .L_lambda_simple_env_end_00ba:
 30570 0001702A 5B                      	pop rbx
 30571 0001702B BE00000000              	mov rsi, 0
 30572                                  .L_lambda_simple_params_loop_00ba:	; copy params
 30573 00017030 4883FE02                	cmp rsi, 2
 30574 00017034 740E                    	je .L_lambda_simple_params_end_00ba
 30575 00017036 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30576 0001703B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30577 0001703F 48FFC6                  	inc rsi
 30578 00017042 EBEC                    	jmp .L_lambda_simple_params_loop_00ba
 30579                                  .L_lambda_simple_params_end_00ba:
 30580 00017044 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30581 00017047 4889C3                  	mov rbx, rax
 30582 0001704A 58                      	pop rax
 30583 0001704B C60004                  	mov byte [rax], T_closure
 30584 0001704E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30585 00017052 48C74009[5F700100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ba
 30586 0001705A E974030000              	jmp .L_lambda_simple_end_00ba
 30587                                  .L_lambda_simple_code_00ba:	; lambda-simple body
 30588 0001705F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30589 00017065 740B                    	je .L_lambda_simple_arity_check_ok_00ba
 30590 00017067 FF742410                	push qword [rsp + 8 * 2]
 30591 0001706B 6A01                    	push 1
 30592 0001706D E9260F0000              	jmp L_error_incorrect_arity_simple
 30593                                  .L_lambda_simple_arity_check_ok_00ba:
 30594 00017072 C8000000                	enter 0, 0
 30595                                  	; preparing a tail-call
 30596 00017076 48B8-                   	mov rax, L_constants + 1993
 30596 00017078 [C907000000000000] 
 30597 00017080 50                      	push rax
 30598 00017081 6A01                    	push 1	; arg count
 30599 00017083 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30600 00017088 E8520F0000              	call malloc
 30601 0001708D 50                      	push rax
 30602 0001708E BF08000000              	mov rdi, 8 * 1	; new rib
 30603 00017093 E8470F0000              	call malloc
 30604 00017098 50                      	push rax
 30605 00017099 BF18000000              	mov rdi, 8 * 3	; extended env
 30606 0001709E E83C0F0000              	call malloc
 30607 000170A3 488B7D10                	mov rdi, ENV
 30608 000170A7 BE00000000              	mov rsi, 0
 30609 000170AC BA01000000              	mov rdx, 1
 30610                                  .L_lambda_simple_env_loop_00bb:	; ext_env[i + 1] <-- env[i]
 30611 000170B1 4883FE02                	cmp rsi, 2
 30612 000170B5 7410                    	je .L_lambda_simple_env_end_00bb
 30613 000170B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30614 000170BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30615 000170BF 48FFC6                  	inc rsi
 30616 000170C2 48FFC2                  	inc rdx
 30617 000170C5 EBEA                    	jmp .L_lambda_simple_env_loop_00bb
 30618                                  .L_lambda_simple_env_end_00bb:
 30619 000170C7 5B                      	pop rbx
 30620 000170C8 BE00000000              	mov rsi, 0
 30621                                  .L_lambda_simple_params_loop_00bb:	; copy params
 30622 000170CD 4883FE01                	cmp rsi, 1
 30623 000170D1 740E                    	je .L_lambda_simple_params_end_00bb
 30624 000170D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30625 000170D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30626 000170DC 48FFC6                  	inc rsi
 30627 000170DF EBEC                    	jmp .L_lambda_simple_params_loop_00bb
 30628                                  .L_lambda_simple_params_end_00bb:
 30629 000170E1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30630 000170E4 4889C3                  	mov rbx, rax
 30631 000170E7 58                      	pop rax
 30632 000170E8 C60004                  	mov byte [rax], T_closure
 30633 000170EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30634 000170EF 48C74009[FC700100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bb
 30635 000170F7 E97F020000              	jmp .L_lambda_simple_end_00bb
 30636                                  .L_lambda_simple_code_00bb:	; lambda-simple body
 30637 000170FC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30638 00017102 740B                    	je .L_lambda_simple_arity_check_ok_00bb
 30639 00017104 FF742410                	push qword [rsp + 8 * 2]
 30640 00017108 6A01                    	push 1
 30641 0001710A E9890E0000              	jmp L_error_incorrect_arity_simple
 30642                                  .L_lambda_simple_arity_check_ok_00bb:
 30643 0001710F C8000000                	enter 0, 0
 30644 00017113 BF08000000              	mov rdi, 8*1
 30645 00017118 E8C20E0000              	call malloc
 30646 0001711D 488B5D20                	mov rbx, PARAM(0)
 30647 00017121 488918                  	mov qword[rax], rbx
 30648 00017124 48894520                	mov PARAM(0), rax
 30649 00017128 48B8-                   	mov rax, sob_void
 30649 0001712A [0000000000000000] 
 30650                                  
 30651 00017132 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30652 00017137 E8A30E0000              	call malloc
 30653 0001713C 50                      	push rax
 30654 0001713D BF08000000              	mov rdi, 8 * 1	; new rib
 30655 00017142 E8980E0000              	call malloc
 30656 00017147 50                      	push rax
 30657 00017148 BF20000000              	mov rdi, 8 * 4	; extended env
 30658 0001714D E88D0E0000              	call malloc
 30659 00017152 488B7D10                	mov rdi, ENV
 30660 00017156 BE00000000              	mov rsi, 0
 30661 0001715B BA01000000              	mov rdx, 1
 30662                                  .L_lambda_simple_env_loop_00bc:	; ext_env[i + 1] <-- env[i]
 30663 00017160 4883FE03                	cmp rsi, 3
 30664 00017164 7410                    	je .L_lambda_simple_env_end_00bc
 30665 00017166 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30666 0001716A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30667 0001716E 48FFC6                  	inc rsi
 30668 00017171 48FFC2                  	inc rdx
 30669 00017174 EBEA                    	jmp .L_lambda_simple_env_loop_00bc
 30670                                  .L_lambda_simple_env_end_00bc:
 30671 00017176 5B                      	pop rbx
 30672 00017177 BE00000000              	mov rsi, 0
 30673                                  .L_lambda_simple_params_loop_00bc:	; copy params
 30674 0001717C 4883FE01                	cmp rsi, 1
 30675 00017180 740E                    	je .L_lambda_simple_params_end_00bc
 30676 00017182 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30677 00017187 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30678 0001718B 48FFC6                  	inc rsi
 30679 0001718E EBEC                    	jmp .L_lambda_simple_params_loop_00bc
 30680                                  .L_lambda_simple_params_end_00bc:
 30681 00017190 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30682 00017193 4889C3                  	mov rbx, rax
 30683 00017196 58                      	pop rax
 30684 00017197 C60004                  	mov byte [rax], T_closure
 30685 0001719A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30686 0001719E 48C74009[AB710100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bc
 30687 000171A6 E953010000              	jmp .L_lambda_simple_end_00bc
 30688                                  .L_lambda_simple_code_00bc:	; lambda-simple body
 30689 000171AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30690 000171B1 740B                    	je .L_lambda_simple_arity_check_ok_00bc
 30691 000171B3 FF742410                	push qword [rsp + 8 * 2]
 30692 000171B7 6A01                    	push 1
 30693 000171B9 E9DA0D0000              	jmp L_error_incorrect_arity_simple
 30694                                  .L_lambda_simple_arity_check_ok_00bc:
 30695 000171BE C8000000                	enter 0, 0
 30696                                  	; preparing a non-tail-call
 30697 000171C2 488B4510                	mov rax, ENV
 30698 000171C6 488B4010                	mov rax, qword [rax + 8 * 2]
 30699 000171CA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30700 000171CD 50                      	push rax
 30701 000171CE 488B4520                	mov rax, PARAM(0)	; param i
 30702 000171D2 50                      	push rax
 30703 000171D3 6A02                    	push 2	; arg count
 30704 000171D5 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 30705 000171DD 803805                  	cmp byte [rax], T_undefined
 30706 000171E0 0F84CC0C0000            	je L_error_fvar_undefined
 30707 000171E6 803804                  	cmp byte [rax], T_closure
 30708 000171E9 0F85470D0000            	jne L_error_non_closure
 30709 000171EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 30710 000171F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30711 000171F5 483D[02000000]          	cmp rax, sob_boolean_false
 30712 000171FB 0F84EE000000            	je .L_if_else_0092
 30713                                  	; preparing a non-tail-call
 30714                                  	; preparing a non-tail-call
 30715 00017201 488B4520                	mov rax, PARAM(0)	; param i
 30716 00017205 50                      	push rax
 30717 00017206 6A01                    	push 1	; arg count
 30718 00017208 488B4510                	mov rax, ENV
 30719 0001720C 488B4010                	mov rax, qword [rax + 8 * 2]
 30720 00017210 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30721 00017214 803804                  	cmp byte [rax], T_closure
 30722 00017217 0F85190D0000            	jne L_error_non_closure
 30723 0001721D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30724 00017220 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30725 00017223 50                      	push rax
 30726 00017224 488B4520                	mov rax, PARAM(0)	; param i
 30727 00017228 50                      	push rax
 30728 00017229 488B4510                	mov rax, ENV
 30729 0001722D 488B4008                	mov rax, qword [rax + 8 * 1]
 30730 00017231 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30731 00017234 50                      	push rax
 30732 00017235 6A03                    	push 3	; arg count
 30733 00017237 488B0425[78160000]      	mov rax, qword [free_var_131]	; free var string-set!
 30734 0001723F 803805                  	cmp byte [rax], T_undefined
 30735 00017242 0F846A0C0000            	je L_error_fvar_undefined
 30736 00017248 803804                  	cmp byte [rax], T_closure
 30737 0001724B 0F85E50C0000            	jne L_error_non_closure
 30738 00017251 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30739 00017254 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30740                                  
 30741                                  	; preparing a tail-call
 30742                                  	; preparing a non-tail-call
 30743 00017257 48B8-                   	mov rax, L_constants + 2270
 30743 00017259 [DE08000000000000] 
 30744 00017261 50                      	push rax
 30745 00017262 488B4520                	mov rax, PARAM(0)	; param i
 30746 00017266 50                      	push rax
 30747 00017267 6A02                    	push 2	; arg count
 30748 00017269 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 30749 00017271 803805                  	cmp byte [rax], T_undefined
 30750 00017274 0F84380C0000            	je L_error_fvar_undefined
 30751 0001727A 803804                  	cmp byte [rax], T_closure
 30752 0001727D 0F85B30C0000            	jne L_error_non_closure
 30753 00017283 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30754 00017286 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30755 00017289 50                      	push rax
 30756 0001728A 6A01                    	push 1	; arg count
 30757 0001728C 488B4510                	mov rax, ENV
 30758 00017290 488B00                  	mov rax, qword [rax + 8 * 0]
 30759 00017293 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30760 00017296 488B00                  	mov rax, qword [rax]
 30761 00017299 803804                  	cmp byte [rax], T_closure
 30762 0001729C 0F85940C0000            	jne L_error_non_closure
 30763 000172A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30764 000172A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30765 000172A8 FF7500                  	push qword[rbp]
 30766 000172AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30767 000172AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30768 000172B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30769 000172B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30770 000172BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30771 000172BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30772 000172C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30773 000172C5 4983C103                	add r9, 3 	 ;for getting to the params
 30774 000172C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30775 000172CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30776                                  .L_tc_recycle_frame_loop_010a:
 30777 000172D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30778 000172D3 7410                    	je .L_tc_recycle_frame_done_010a
 30779 000172D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30780 000172D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30781 000172DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30782 000172DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30783 000172E3 EBEB                    	jmp .L_tc_recycle_frame_loop_010a
 30784                                  .L_tc_recycle_frame_done_010a:
 30785 000172E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30786 000172E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30787 000172EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30788 000172ED EB0B                    	jmp .L_if_end_0092
 30789                                  .L_if_else_0092:
 30790 000172EF 488B4510                	mov rax, ENV
 30791 000172F3 488B4008                	mov rax, qword [rax + 8 * 1]
 30792 000172F7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30793                                  .L_if_end_0092:
 30794 000172FA C9                      	leave
 30795 000172FB C21800                  	ret AND_KILL_FRAME(1)
 30796                                  .L_lambda_simple_end_00bc:	; new closure is in rax
 30797 000172FE 50                      	push rax
 30798 000172FF 488B4520                	mov rax, PARAM(0)	; param run
 30799 00017303 8F00                    	pop qword [rax]
 30800 00017305 48B8-                   	mov rax, sob_void
 30800 00017307 [0000000000000000] 
 30801                                  
 30802                                  	; preparing a tail-call
 30803 0001730F 48B8-                   	mov rax, L_constants + 2135
 30803 00017311 [5708000000000000] 
 30804 00017319 50                      	push rax
 30805 0001731A 6A01                    	push 1	; arg count
 30806 0001731C 488B4520                	mov rax, PARAM(0)	; param run
 30807 00017320 488B00                  	mov rax, qword [rax]
 30808 00017323 803804                  	cmp byte [rax], T_closure
 30809 00017326 0F850A0C0000            	jne L_error_non_closure
 30810 0001732C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30811 0001732F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30812 00017332 FF7500                  	push qword[rbp]
 30813 00017335 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30814 00017338 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30815 0001733C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30816 00017340 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30817 00017344 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30818 00017347 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30819 0001734A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30820 0001734F 4983C103                	add r9, 3 	 ;for getting to the params
 30821 00017353 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30822 00017357 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30823                                  .L_tc_recycle_frame_loop_010b:
 30824 0001735A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30825 0001735D 7410                    	je .L_tc_recycle_frame_done_010b
 30826 0001735F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30827 00017362 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30828 00017365 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30829 00017369 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30830 0001736D EBEB                    	jmp .L_tc_recycle_frame_loop_010b
 30831                                  .L_tc_recycle_frame_done_010b:
 30832 0001736F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30833 00017370 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30834 00017374 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30835 00017377 C9                      	leave
 30836 00017378 C21800                  	ret AND_KILL_FRAME(1)
 30837                                  .L_lambda_simple_end_00bb:	; new closure is in rax
 30838 0001737B 803804                  	cmp byte [rax], T_closure
 30839 0001737E 0F85B20B0000            	jne L_error_non_closure
 30840 00017384 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30841 00017387 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30842 0001738A FF7500                  	push qword[rbp]
 30843 0001738D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30844 00017390 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30845 00017394 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30846 00017398 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30847 0001739C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30848 0001739F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30849 000173A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30850 000173A7 4983C103                	add r9, 3 	 ;for getting to the params
 30851 000173AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30852 000173AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30853                                  .L_tc_recycle_frame_loop_010c:
 30854 000173B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30855 000173B5 7410                    	je .L_tc_recycle_frame_done_010c
 30856 000173B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30857 000173BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30858 000173BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30859 000173C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30860 000173C5 EBEB                    	jmp .L_tc_recycle_frame_loop_010c
 30861                                  .L_tc_recycle_frame_done_010c:
 30862 000173C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30863 000173C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30864 000173CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30865 000173CF C9                      	leave
 30866 000173D0 C21800                  	ret AND_KILL_FRAME(1)
 30867                                  .L_lambda_simple_end_00ba:	; new closure is in rax
 30868 000173D3 803804                  	cmp byte [rax], T_closure
 30869 000173D6 0F855A0B0000            	jne L_error_non_closure
 30870 000173DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 30871 000173DF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30872 000173E2 FF7500                  	push qword[rbp]
 30873 000173E5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30874 000173E8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30875 000173EC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30876 000173F0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30877 000173F4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30878 000173F7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30879 000173FA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30880 000173FF 4983C103                	add r9, 3 	 ;for getting to the params
 30881 00017403 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30882 00017407 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30883                                  .L_tc_recycle_frame_loop_010d:
 30884 0001740A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30885 0001740D 7410                    	je .L_tc_recycle_frame_done_010d
 30886 0001740F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30887 00017412 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30888 00017415 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30889 00017419 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30890 0001741D EBEB                    	jmp .L_tc_recycle_frame_loop_010d
 30891                                  .L_tc_recycle_frame_done_010d:
 30892 0001741F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30893 00017420 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30894 00017424 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30895 00017427 C9                      	leave
 30896 00017428 C22000                  	ret AND_KILL_FRAME(2)
 30897                                  .L_lambda_simple_end_00b9:	; new closure is in rax
 30898 0001742B 48890425[69140000]      	mov qword [free_var_100], rax
 30899 00017433 48B8-                   	mov rax, sob_void
 30899 00017435 [0000000000000000] 
 30900                                  
 30901 0001743D 4889C7                  	mov rdi, rax
 30902 00017440 E8EF0D0000              	call print_sexpr_if_not_void
 30903 00017445 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30904 0001744A E8900B0000              	call malloc
 30905 0001744F 50                      	push rax
 30906 00017450 BF00000000              	mov rdi, 8 * 0	; new rib
 30907 00017455 E8850B0000              	call malloc
 30908 0001745A 50                      	push rax
 30909 0001745B BF08000000              	mov rdi, 8 * 1	; extended env
 30910 00017460 E87A0B0000              	call malloc
 30911 00017465 488B7D10                	mov rdi, ENV
 30912 00017469 BE00000000              	mov rsi, 0
 30913 0001746E BA01000000              	mov rdx, 1
 30914                                  .L_lambda_simple_env_loop_00bd:	; ext_env[i + 1] <-- env[i]
 30915 00017473 4883FE00                	cmp rsi, 0
 30916 00017477 7410                    	je .L_lambda_simple_env_end_00bd
 30917 00017479 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30918 0001747D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30919 00017481 48FFC6                  	inc rsi
 30920 00017484 48FFC2                  	inc rdx
 30921 00017487 EBEA                    	jmp .L_lambda_simple_env_loop_00bd
 30922                                  .L_lambda_simple_env_end_00bd:
 30923 00017489 5B                      	pop rbx
 30924 0001748A BE00000000              	mov rsi, 0
 30925                                  .L_lambda_simple_params_loop_00bd:	; copy params
 30926 0001748F 4883FE00                	cmp rsi, 0
 30927 00017493 740E                    	je .L_lambda_simple_params_end_00bd
 30928 00017495 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30929 0001749A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30930 0001749E 48FFC6                  	inc rsi
 30931 000174A1 EBEC                    	jmp .L_lambda_simple_params_loop_00bd
 30932                                  .L_lambda_simple_params_end_00bd:
 30933 000174A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30934 000174A6 4889C3                  	mov rbx, rax
 30935 000174A9 58                      	pop rax
 30936 000174AA C60004                  	mov byte [rax], T_closure
 30937 000174AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30938 000174B1 48C74009[BE740100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bd
 30939 000174B9 E986040000              	jmp .L_lambda_simple_end_00bd
 30940                                  .L_lambda_simple_code_00bd:	; lambda-simple body
 30941 000174BE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30942 000174C4 740B                    	je .L_lambda_simple_arity_check_ok_00bd
 30943 000174C6 FF742410                	push qword [rsp + 8 * 2]
 30944 000174CA 6A02                    	push 2
 30945 000174CC E9C70A0000              	jmp L_error_incorrect_arity_simple
 30946                                  .L_lambda_simple_arity_check_ok_00bd:
 30947 000174D1 C8000000                	enter 0, 0
 30948                                  	; preparing a tail-call
 30949                                  	; preparing a non-tail-call
 30950 000174D5 488B4520                	mov rax, PARAM(0)	; param n
 30951 000174D9 50                      	push rax
 30952 000174DA 6A01                    	push 1	; arg count
 30953 000174DC 488B0425[7A140000]      	mov rax, qword [free_var_101]	; free var make-vector
 30954 000174E4 803805                  	cmp byte [rax], T_undefined
 30955 000174E7 0F84C5090000            	je L_error_fvar_undefined
 30956 000174ED 803804                  	cmp byte [rax], T_closure
 30957 000174F0 0F85400A0000            	jne L_error_non_closure
 30958 000174F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30959 000174F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30960 000174FC 50                      	push rax
 30961 000174FD 6A01                    	push 1	; arg count
 30962 000174FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30963 00017504 E8D60A0000              	call malloc
 30964 00017509 50                      	push rax
 30965 0001750A BF10000000              	mov rdi, 8 * 2	; new rib
 30966 0001750F E8CB0A0000              	call malloc
 30967 00017514 50                      	push rax
 30968 00017515 BF10000000              	mov rdi, 8 * 2	; extended env
 30969 0001751A E8C00A0000              	call malloc
 30970 0001751F 488B7D10                	mov rdi, ENV
 30971 00017523 BE00000000              	mov rsi, 0
 30972 00017528 BA01000000              	mov rdx, 1
 30973                                  .L_lambda_simple_env_loop_00be:	; ext_env[i + 1] <-- env[i]
 30974 0001752D 4883FE01                	cmp rsi, 1
 30975 00017531 7410                    	je .L_lambda_simple_env_end_00be
 30976 00017533 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30977 00017537 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30978 0001753B 48FFC6                  	inc rsi
 30979 0001753E 48FFC2                  	inc rdx
 30980 00017541 EBEA                    	jmp .L_lambda_simple_env_loop_00be
 30981                                  .L_lambda_simple_env_end_00be:
 30982 00017543 5B                      	pop rbx
 30983 00017544 BE00000000              	mov rsi, 0
 30984                                  .L_lambda_simple_params_loop_00be:	; copy params
 30985 00017549 4883FE02                	cmp rsi, 2
 30986 0001754D 740E                    	je .L_lambda_simple_params_end_00be
 30987 0001754F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30988 00017554 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30989 00017558 48FFC6                  	inc rsi
 30990 0001755B EBEC                    	jmp .L_lambda_simple_params_loop_00be
 30991                                  .L_lambda_simple_params_end_00be:
 30992 0001755D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30993 00017560 4889C3                  	mov rbx, rax
 30994 00017563 58                      	pop rax
 30995 00017564 C60004                  	mov byte [rax], T_closure
 30996 00017567 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30997 0001756B 48C74009[78750100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00be
 30998 00017573 E974030000              	jmp .L_lambda_simple_end_00be
 30999                                  .L_lambda_simple_code_00be:	; lambda-simple body
 31000 00017578 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31001 0001757E 740B                    	je .L_lambda_simple_arity_check_ok_00be
 31002 00017580 FF742410                	push qword [rsp + 8 * 2]
 31003 00017584 6A01                    	push 1
 31004 00017586 E90D0A0000              	jmp L_error_incorrect_arity_simple
 31005                                  .L_lambda_simple_arity_check_ok_00be:
 31006 0001758B C8000000                	enter 0, 0
 31007                                  	; preparing a tail-call
 31008 0001758F 48B8-                   	mov rax, L_constants + 1993
 31008 00017591 [C907000000000000] 
 31009 00017599 50                      	push rax
 31010 0001759A 6A01                    	push 1	; arg count
 31011 0001759C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31012 000175A1 E8390A0000              	call malloc
 31013 000175A6 50                      	push rax
 31014 000175A7 BF08000000              	mov rdi, 8 * 1	; new rib
 31015 000175AC E82E0A0000              	call malloc
 31016 000175B1 50                      	push rax
 31017 000175B2 BF18000000              	mov rdi, 8 * 3	; extended env
 31018 000175B7 E8230A0000              	call malloc
 31019 000175BC 488B7D10                	mov rdi, ENV
 31020 000175C0 BE00000000              	mov rsi, 0
 31021 000175C5 BA01000000              	mov rdx, 1
 31022                                  .L_lambda_simple_env_loop_00bf:	; ext_env[i + 1] <-- env[i]
 31023 000175CA 4883FE02                	cmp rsi, 2
 31024 000175CE 7410                    	je .L_lambda_simple_env_end_00bf
 31025 000175D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31026 000175D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31027 000175D8 48FFC6                  	inc rsi
 31028 000175DB 48FFC2                  	inc rdx
 31029 000175DE EBEA                    	jmp .L_lambda_simple_env_loop_00bf
 31030                                  .L_lambda_simple_env_end_00bf:
 31031 000175E0 5B                      	pop rbx
 31032 000175E1 BE00000000              	mov rsi, 0
 31033                                  .L_lambda_simple_params_loop_00bf:	; copy params
 31034 000175E6 4883FE01                	cmp rsi, 1
 31035 000175EA 740E                    	je .L_lambda_simple_params_end_00bf
 31036 000175EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31037 000175F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31038 000175F5 48FFC6                  	inc rsi
 31039 000175F8 EBEC                    	jmp .L_lambda_simple_params_loop_00bf
 31040                                  .L_lambda_simple_params_end_00bf:
 31041 000175FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31042 000175FD 4889C3                  	mov rbx, rax
 31043 00017600 58                      	pop rax
 31044 00017601 C60004                  	mov byte [rax], T_closure
 31045 00017604 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31046 00017608 48C74009[15760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bf
 31047 00017610 E97F020000              	jmp .L_lambda_simple_end_00bf
 31048                                  .L_lambda_simple_code_00bf:	; lambda-simple body
 31049 00017615 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31050 0001761B 740B                    	je .L_lambda_simple_arity_check_ok_00bf
 31051 0001761D FF742410                	push qword [rsp + 8 * 2]
 31052 00017621 6A01                    	push 1
 31053 00017623 E970090000              	jmp L_error_incorrect_arity_simple
 31054                                  .L_lambda_simple_arity_check_ok_00bf:
 31055 00017628 C8000000                	enter 0, 0
 31056 0001762C BF08000000              	mov rdi, 8*1
 31057 00017631 E8A9090000              	call malloc
 31058 00017636 488B5D20                	mov rbx, PARAM(0)
 31059 0001763A 488918                  	mov qword[rax], rbx
 31060 0001763D 48894520                	mov PARAM(0), rax
 31061 00017641 48B8-                   	mov rax, sob_void
 31061 00017643 [0000000000000000] 
 31062                                  
 31063 0001764B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31064 00017650 E88A090000              	call malloc
 31065 00017655 50                      	push rax
 31066 00017656 BF08000000              	mov rdi, 8 * 1	; new rib
 31067 0001765B E87F090000              	call malloc
 31068 00017660 50                      	push rax
 31069 00017661 BF20000000              	mov rdi, 8 * 4	; extended env
 31070 00017666 E874090000              	call malloc
 31071 0001766B 488B7D10                	mov rdi, ENV
 31072 0001766F BE00000000              	mov rsi, 0
 31073 00017674 BA01000000              	mov rdx, 1
 31074                                  .L_lambda_simple_env_loop_00c0:	; ext_env[i + 1] <-- env[i]
 31075 00017679 4883FE03                	cmp rsi, 3
 31076 0001767D 7410                    	je .L_lambda_simple_env_end_00c0
 31077 0001767F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31078 00017683 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31079 00017687 48FFC6                  	inc rsi
 31080 0001768A 48FFC2                  	inc rdx
 31081 0001768D EBEA                    	jmp .L_lambda_simple_env_loop_00c0
 31082                                  .L_lambda_simple_env_end_00c0:
 31083 0001768F 5B                      	pop rbx
 31084 00017690 BE00000000              	mov rsi, 0
 31085                                  .L_lambda_simple_params_loop_00c0:	; copy params
 31086 00017695 4883FE01                	cmp rsi, 1
 31087 00017699 740E                    	je .L_lambda_simple_params_end_00c0
 31088 0001769B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31089 000176A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31090 000176A4 48FFC6                  	inc rsi
 31091 000176A7 EBEC                    	jmp .L_lambda_simple_params_loop_00c0
 31092                                  .L_lambda_simple_params_end_00c0:
 31093 000176A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31094 000176AC 4889C3                  	mov rbx, rax
 31095 000176AF 58                      	pop rax
 31096 000176B0 C60004                  	mov byte [rax], T_closure
 31097 000176B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31098 000176B7 48C74009[C4760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c0
 31099 000176BF E953010000              	jmp .L_lambda_simple_end_00c0
 31100                                  .L_lambda_simple_code_00c0:	; lambda-simple body
 31101 000176C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31102 000176CA 740B                    	je .L_lambda_simple_arity_check_ok_00c0
 31103 000176CC FF742410                	push qword [rsp + 8 * 2]
 31104 000176D0 6A01                    	push 1
 31105 000176D2 E9C1080000              	jmp L_error_incorrect_arity_simple
 31106                                  .L_lambda_simple_arity_check_ok_00c0:
 31107 000176D7 C8000000                	enter 0, 0
 31108                                  	; preparing a non-tail-call
 31109 000176DB 488B4510                	mov rax, ENV
 31110 000176DF 488B4010                	mov rax, qword [rax + 8 * 2]
 31111 000176E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 31112 000176E6 50                      	push rax
 31113 000176E7 488B4520                	mov rax, PARAM(0)	; param i
 31114 000176EB 50                      	push rax
 31115 000176EC 6A02                    	push 2	; arg count
 31116 000176EE 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 31117 000176F6 803805                  	cmp byte [rax], T_undefined
 31118 000176F9 0F84B3070000            	je L_error_fvar_undefined
 31119 000176FF 803804                  	cmp byte [rax], T_closure
 31120 00017702 0F852E080000            	jne L_error_non_closure
 31121 00017708 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31122 0001770B FF5009                  	call SOB_CLOSURE_CODE(rax)
 31123 0001770E 483D[02000000]          	cmp rax, sob_boolean_false
 31124 00017714 0F84EE000000            	je .L_if_else_0093
 31125                                  	; preparing a non-tail-call
 31126                                  	; preparing a non-tail-call
 31127 0001771A 488B4520                	mov rax, PARAM(0)	; param i
 31128 0001771E 50                      	push rax
 31129 0001771F 6A01                    	push 1	; arg count
 31130 00017721 488B4510                	mov rax, ENV
 31131 00017725 488B4010                	mov rax, qword [rax + 8 * 2]
 31132 00017729 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 31133 0001772D 803804                  	cmp byte [rax], T_closure
 31134 00017730 0F8500080000            	jne L_error_non_closure
 31135 00017736 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31136 00017739 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31137 0001773C 50                      	push rax
 31138 0001773D 488B4520                	mov rax, PARAM(0)	; param i
 31139 00017741 50                      	push rax
 31140 00017742 488B4510                	mov rax, ENV
 31141 00017746 488B4008                	mov rax, qword [rax + 8 * 1]
 31142 0001774A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 31143 0001774D 50                      	push rax
 31144 0001774E 6A03                    	push 3	; arg count
 31145 00017750 488B0425[88170000]      	mov rax, qword [free_var_147]	; free var vector-set!
 31146 00017758 803805                  	cmp byte [rax], T_undefined
 31147 0001775B 0F8451070000            	je L_error_fvar_undefined
 31148 00017761 803804                  	cmp byte [rax], T_closure
 31149 00017764 0F85CC070000            	jne L_error_non_closure
 31150 0001776A FF7001                  	push SOB_CLOSURE_ENV(rax)
 31151 0001776D FF5009                  	call SOB_CLOSURE_CODE(rax)
 31152                                  
 31153                                  	; preparing a tail-call
 31154                                  	; preparing a non-tail-call
 31155 00017770 48B8-                   	mov rax, L_constants + 2270
 31155 00017772 [DE08000000000000] 
 31156 0001777A 50                      	push rax
 31157 0001777B 488B4520                	mov rax, PARAM(0)	; param i
 31158 0001777F 50                      	push rax
 31159 00017780 6A02                    	push 2	; arg count
 31160 00017782 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 31161 0001778A 803805                  	cmp byte [rax], T_undefined
 31162 0001778D 0F841F070000            	je L_error_fvar_undefined
 31163 00017793 803804                  	cmp byte [rax], T_closure
 31164 00017796 0F859A070000            	jne L_error_non_closure
 31165 0001779C FF7001                  	push SOB_CLOSURE_ENV(rax)
 31166 0001779F FF5009                  	call SOB_CLOSURE_CODE(rax)
 31167 000177A2 50                      	push rax
 31168 000177A3 6A01                    	push 1	; arg count
 31169 000177A5 488B4510                	mov rax, ENV
 31170 000177A9 488B00                  	mov rax, qword [rax + 8 * 0]
 31171 000177AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 31172 000177AF 488B00                  	mov rax, qword [rax]
 31173 000177B2 803804                  	cmp byte [rax], T_closure
 31174 000177B5 0F857B070000            	jne L_error_non_closure
 31175 000177BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 31176 000177BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31177 000177C1 FF7500                  	push qword[rbp]
 31178 000177C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31179 000177C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31180 000177CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31181 000177CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31182 000177D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31183 000177D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31184 000177D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31185 000177DE 4983C103                	add r9, 3 	 ;for getting to the params
 31186 000177E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31187 000177E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31188                                  .L_tc_recycle_frame_loop_010e:
 31189 000177E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31190 000177EC 7410                    	je .L_tc_recycle_frame_done_010e
 31191 000177EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31192 000177F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31193 000177F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31194 000177F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31195 000177FC EBEB                    	jmp .L_tc_recycle_frame_loop_010e
 31196                                  .L_tc_recycle_frame_done_010e:
 31197 000177FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31198 000177FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31199 00017803 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31200 00017806 EB0B                    	jmp .L_if_end_0093
 31201                                  .L_if_else_0093:
 31202 00017808 488B4510                	mov rax, ENV
 31203 0001780C 488B4008                	mov rax, qword [rax + 8 * 1]
 31204 00017810 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 31205                                  .L_if_end_0093:
 31206 00017813 C9                      	leave
 31207 00017814 C21800                  	ret AND_KILL_FRAME(1)
 31208                                  .L_lambda_simple_end_00c0:	; new closure is in rax
 31209 00017817 50                      	push rax
 31210 00017818 488B4520                	mov rax, PARAM(0)	; param run
 31211 0001781C 8F00                    	pop qword [rax]
 31212 0001781E 48B8-                   	mov rax, sob_void
 31212 00017820 [0000000000000000] 
 31213                                  
 31214                                  	; preparing a tail-call
 31215 00017828 48B8-                   	mov rax, L_constants + 2135
 31215 0001782A [5708000000000000] 
 31216 00017832 50                      	push rax
 31217 00017833 6A01                    	push 1	; arg count
 31218 00017835 488B4520                	mov rax, PARAM(0)	; param run
 31219 00017839 488B00                  	mov rax, qword [rax]
 31220 0001783C 803804                  	cmp byte [rax], T_closure
 31221 0001783F 0F85F1060000            	jne L_error_non_closure
 31222 00017845 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31223 00017848 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31224 0001784B FF7500                  	push qword[rbp]
 31225 0001784E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31226 00017851 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31227 00017855 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31228 00017859 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31229 0001785D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31230 00017860 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31231 00017863 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31232 00017868 4983C103                	add r9, 3 	 ;for getting to the params
 31233 0001786C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31234 00017870 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31235                                  .L_tc_recycle_frame_loop_010f:
 31236 00017873 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31237 00017876 7410                    	je .L_tc_recycle_frame_done_010f
 31238 00017878 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31239 0001787B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31240 0001787E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31241 00017882 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31242 00017886 EBEB                    	jmp .L_tc_recycle_frame_loop_010f
 31243                                  .L_tc_recycle_frame_done_010f:
 31244 00017888 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31245 00017889 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31246 0001788D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31247 00017890 C9                      	leave
 31248 00017891 C21800                  	ret AND_KILL_FRAME(1)
 31249                                  .L_lambda_simple_end_00bf:	; new closure is in rax
 31250 00017894 803804                  	cmp byte [rax], T_closure
 31251 00017897 0F8599060000            	jne L_error_non_closure
 31252 0001789D FF7001                  	push SOB_CLOSURE_ENV(rax)
 31253 000178A0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31254 000178A3 FF7500                  	push qword[rbp]
 31255 000178A6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31256 000178A9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31257 000178AD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31258 000178B1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31259 000178B5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31260 000178B8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31261 000178BB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31262 000178C0 4983C103                	add r9, 3 	 ;for getting to the params
 31263 000178C4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31264 000178C8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31265                                  .L_tc_recycle_frame_loop_0110:
 31266 000178CB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31267 000178CE 7410                    	je .L_tc_recycle_frame_done_0110
 31268 000178D0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31269 000178D3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31270 000178D6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31271 000178DA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31272 000178DE EBEB                    	jmp .L_tc_recycle_frame_loop_0110
 31273                                  .L_tc_recycle_frame_done_0110:
 31274 000178E0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31275 000178E1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31276 000178E5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31277 000178E8 C9                      	leave
 31278 000178E9 C21800                  	ret AND_KILL_FRAME(1)
 31279                                  .L_lambda_simple_end_00be:	; new closure is in rax
 31280 000178EC 803804                  	cmp byte [rax], T_closure
 31281 000178EF 0F8541060000            	jne L_error_non_closure
 31282 000178F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31283 000178F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31284 000178FB FF7500                  	push qword[rbp]
 31285 000178FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31286 00017901 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31287 00017905 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31288 00017909 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31289 0001790D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31290 00017910 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31291 00017913 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31292 00017918 4983C103                	add r9, 3 	 ;for getting to the params
 31293 0001791C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31294 00017920 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31295                                  .L_tc_recycle_frame_loop_0111:
 31296 00017923 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31297 00017926 7410                    	je .L_tc_recycle_frame_done_0111
 31298 00017928 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31299 0001792B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31300 0001792E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31301 00017932 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31302 00017936 EBEB                    	jmp .L_tc_recycle_frame_loop_0111
 31303                                  .L_tc_recycle_frame_done_0111:
 31304 00017938 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31305 00017939 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31306 0001793D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31307 00017940 C9                      	leave
 31308 00017941 C22000                  	ret AND_KILL_FRAME(2)
 31309                                  .L_lambda_simple_end_00bd:	; new closure is in rax
 31310 00017944 48890425[8B140000]      	mov qword [free_var_102], rax
 31311 0001794C 48B8-                   	mov rax, sob_void
 31311 0001794E [0000000000000000] 
 31312                                  
 31313 00017956 4889C7                  	mov rdi, rax
 31314 00017959 E8D6080000              	call print_sexpr_if_not_void
 31315 0001795E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31316 00017963 E877060000              	call malloc
 31317 00017968 50                      	push rax
 31318 00017969 BF00000000              	mov rdi, 8 * 0	; new rib
 31319 0001796E E86C060000              	call malloc
 31320 00017973 50                      	push rax
 31321 00017974 BF08000000              	mov rdi, 8 * 1	; extended env
 31322 00017979 E861060000              	call malloc
 31323 0001797E 488B7D10                	mov rdi, ENV
 31324 00017982 BE00000000              	mov rsi, 0
 31325 00017987 BA01000000              	mov rdx, 1
 31326                                  .L_lambda_simple_env_loop_00c1:	; ext_env[i + 1] <-- env[i]
 31327 0001798C 4883FE00                	cmp rsi, 0
 31328 00017990 7410                    	je .L_lambda_simple_env_end_00c1
 31329 00017992 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31330 00017996 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31331 0001799A 48FFC6                  	inc rsi
 31332 0001799D 48FFC2                  	inc rdx
 31333 000179A0 EBEA                    	jmp .L_lambda_simple_env_loop_00c1
 31334                                  .L_lambda_simple_env_end_00c1:
 31335 000179A2 5B                      	pop rbx
 31336 000179A3 BE00000000              	mov rsi, 0
 31337                                  .L_lambda_simple_params_loop_00c1:	; copy params
 31338 000179A8 4883FE00                	cmp rsi, 0
 31339 000179AC 740E                    	je .L_lambda_simple_params_end_00c1
 31340 000179AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31341 000179B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31342 000179B7 48FFC6                  	inc rsi
 31343 000179BA EBEC                    	jmp .L_lambda_simple_params_loop_00c1
 31344                                  .L_lambda_simple_params_end_00c1:
 31345 000179BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31346 000179BF 4889C3                  	mov rbx, rax
 31347 000179C2 58                      	pop rax
 31348 000179C3 C60004                  	mov byte [rax], T_closure
 31349 000179C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31350 000179CA 48C74009[D7790100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c1
 31351 000179D2 E977020000              	jmp .L_lambda_simple_end_00c1
 31352                                  .L_lambda_simple_code_00c1:	; lambda-simple body
 31353 000179D7 48837C241003            	cmp qword [rsp + 8 * 2], 3
 31354 000179DD 740B                    	je .L_lambda_simple_arity_check_ok_00c1
 31355 000179DF FF742410                	push qword [rsp + 8 * 2]
 31356 000179E3 6A03                    	push 3
 31357 000179E5 E9AE050000              	jmp L_error_incorrect_arity_simple
 31358                                  .L_lambda_simple_arity_check_ok_00c1:
 31359 000179EA C8000000                	enter 0, 0
 31360                                  	; preparing a non-tail-call
 31361 000179EE 488B4530                	mov rax, PARAM(2)	; param n
 31362 000179F2 50                      	push rax
 31363 000179F3 6A01                    	push 1	; arg count
 31364 000179F5 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 31365 000179FD 803805                  	cmp byte [rax], T_undefined
 31366 00017A00 0F84AC040000            	je L_error_fvar_undefined
 31367 00017A06 803804                  	cmp byte [rax], T_closure
 31368 00017A09 0F8527050000            	jne L_error_non_closure
 31369 00017A0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31370 00017A12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31371 00017A15 483D[02000000]          	cmp rax, sob_boolean_false
 31372 00017A1B 740F                    	je .L_if_else_0096
 31373 00017A1D 48B8-                   	mov rax, L_constants + 3485
 31373 00017A1F [9D0D000000000000] 
 31374 00017A27 E91E020000              	jmp .L_if_end_0096
 31375                                  .L_if_else_0096:
 31376                                  	; preparing a non-tail-call
 31377 00017A2C 488B4528                	mov rax, PARAM(1)	; param b
 31378 00017A30 50                      	push rax
 31379 00017A31 488B4520                	mov rax, PARAM(0)	; param a
 31380 00017A35 50                      	push rax
 31381 00017A36 6A02                    	push 2	; arg count
 31382 00017A38 488B0425[090E0000]      	mov rax, qword [free_var_4]	; free var <
 31383 00017A40 803805                  	cmp byte [rax], T_undefined
 31384 00017A43 0F8469040000            	je L_error_fvar_undefined
 31385 00017A49 803804                  	cmp byte [rax], T_closure
 31386 00017A4C 0F85E4040000            	jne L_error_non_closure
 31387 00017A52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31388 00017A55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31389 00017A58 483D[02000000]          	cmp rax, sob_boolean_false
 31390 00017A5E 0F84D1000000            	je .L_if_else_0095
 31391                                  	; preparing a tail-call
 31392                                  	; preparing a non-tail-call
 31393 00017A64 488B4530                	mov rax, PARAM(2)	; param n
 31394 00017A68 50                      	push rax
 31395                                  	; preparing a non-tail-call
 31396 00017A69 488B4520                	mov rax, PARAM(0)	; param a
 31397 00017A6D 50                      	push rax
 31398 00017A6E 488B4528                	mov rax, PARAM(1)	; param b
 31399 00017A72 50                      	push rax
 31400 00017A73 6A02                    	push 2	; arg count
 31401 00017A75 488B0425[F80D0000]      	mov rax, qword [free_var_3]	; free var /
 31402 00017A7D 803805                  	cmp byte [rax], T_undefined
 31403 00017A80 0F842C040000            	je L_error_fvar_undefined
 31404 00017A86 803804                  	cmp byte [rax], T_closure
 31405 00017A89 0F85A7040000            	jne L_error_non_closure
 31406 00017A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31407 00017A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31408 00017A95 50                      	push rax
 31409 00017A96 488B4520                	mov rax, PARAM(0)	; param a
 31410 00017A9A 50                      	push rax
 31411 00017A9B 6A03                    	push 3	; arg count
 31412 00017A9D 488B0425[36140000]      	mov rax, qword [free_var_97]	; free var logarithm
 31413 00017AA5 803805                  	cmp byte [rax], T_undefined
 31414 00017AA8 0F8404040000            	je L_error_fvar_undefined
 31415 00017AAE 803804                  	cmp byte [rax], T_closure
 31416 00017AB1 0F857F040000            	jne L_error_non_closure
 31417 00017AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31418 00017ABA FF5009                  	call SOB_CLOSURE_CODE(rax)
 31419 00017ABD 50                      	push rax
 31420 00017ABE 48B8-                   	mov rax, L_constants + 3485
 31420 00017AC0 [9D0D000000000000] 
 31421 00017AC8 50                      	push rax
 31422 00017AC9 6A02                    	push 2	; arg count
 31423 00017ACB 488B0425[D60D0000]      	mov rax, qword [free_var_1]	; free var +
 31424 00017AD3 803805                  	cmp byte [rax], T_undefined
 31425 00017AD6 0F84D6030000            	je L_error_fvar_undefined
 31426 00017ADC 803804                  	cmp byte [rax], T_closure
 31427 00017ADF 0F8551040000            	jne L_error_non_closure
 31428 00017AE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31429 00017AE8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31430 00017AEB FF7500                  	push qword[rbp]
 31431 00017AEE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31432 00017AF1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31433 00017AF5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31434 00017AF9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31435 00017AFD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31436 00017B00 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31437 00017B03 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31438 00017B08 4983C103                	add r9, 3 	 ;for getting to the params
 31439 00017B0C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31440 00017B10 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31441                                  .L_tc_recycle_frame_loop_0112:
 31442 00017B13 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31443 00017B16 7410                    	je .L_tc_recycle_frame_done_0112
 31444 00017B18 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31445 00017B1B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31446 00017B1E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31447 00017B22 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31448 00017B26 EBEB                    	jmp .L_tc_recycle_frame_loop_0112
 31449                                  .L_tc_recycle_frame_done_0112:
 31450 00017B28 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31451 00017B29 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31452 00017B2D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31453 00017B30 E915010000              	jmp .L_if_end_0095
 31454                                  .L_if_else_0095:
 31455                                  	; preparing a non-tail-call
 31456 00017B35 488B4528                	mov rax, PARAM(1)	; param b
 31457 00017B39 50                      	push rax
 31458 00017B3A 488B4520                	mov rax, PARAM(0)	; param a
 31459 00017B3E 50                      	push rax
 31460 00017B3F 6A02                    	push 2	; arg count
 31461 00017B41 488B0425[2B0E0000]      	mov rax, qword [free_var_6]	; free var =
 31462 00017B49 803805                  	cmp byte [rax], T_undefined
 31463 00017B4C 0F8460030000            	je L_error_fvar_undefined
 31464 00017B52 803804                  	cmp byte [rax], T_closure
 31465 00017B55 0F85DB030000            	jne L_error_non_closure
 31466 00017B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 31467 00017B5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 31468 00017B61 483D[02000000]          	cmp rax, sob_boolean_false
 31469 00017B67 740F                    	je .L_if_else_0094
 31470 00017B69 48B8-                   	mov rax, L_constants + 3485
 31470 00017B6B [9D0D000000000000] 
 31471 00017B73 E9D2000000              	jmp .L_if_end_0094
 31472                                  .L_if_else_0094:
 31473                                  	; preparing a tail-call
 31474                                  	; preparing a non-tail-call
 31475                                  	; preparing a non-tail-call
 31476 00017B78 48B8-                   	mov rax, L_constants + 2270
 31476 00017B7A [DE08000000000000] 
 31477 00017B82 50                      	push rax
 31478 00017B83 488B4530                	mov rax, PARAM(2)	; param n
 31479 00017B87 50                      	push rax
 31480 00017B88 6A02                    	push 2	; arg count
 31481 00017B8A 488B0425[E70D0000]      	mov rax, qword [free_var_2]	; free var -
 31482 00017B92 803805                  	cmp byte [rax], T_undefined
 31483 00017B95 0F8417030000            	je L_error_fvar_undefined
 31484 00017B9B 803804                  	cmp byte [rax], T_closure
 31485 00017B9E 0F8592030000            	jne L_error_non_closure
 31486 00017BA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31487 00017BA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31488 00017BAA 50                      	push rax
 31489 00017BAB 488B4520                	mov rax, PARAM(0)	; param a
 31490 00017BAF 50                      	push rax
 31491 00017BB0 488B4528                	mov rax, PARAM(1)	; param b
 31492 00017BB4 50                      	push rax
 31493 00017BB5 6A03                    	push 3	; arg count
 31494 00017BB7 488B0425[36140000]      	mov rax, qword [free_var_97]	; free var logarithm
 31495 00017BBF 803805                  	cmp byte [rax], T_undefined
 31496 00017BC2 0F84EA020000            	je L_error_fvar_undefined
 31497 00017BC8 803804                  	cmp byte [rax], T_closure
 31498 00017BCB 0F8565030000            	jne L_error_non_closure
 31499 00017BD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31500 00017BD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31501 00017BD7 50                      	push rax
 31502 00017BD8 48B8-                   	mov rax, L_constants + 3485
 31502 00017BDA [9D0D000000000000] 
 31503 00017BE2 50                      	push rax
 31504 00017BE3 6A02                    	push 2	; arg count
 31505 00017BE5 488B0425[F80D0000]      	mov rax, qword [free_var_3]	; free var /
 31506 00017BED 803805                  	cmp byte [rax], T_undefined
 31507 00017BF0 0F84BC020000            	je L_error_fvar_undefined
 31508 00017BF6 803804                  	cmp byte [rax], T_closure
 31509 00017BF9 0F8537030000            	jne L_error_non_closure
 31510 00017BFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 31511 00017C02 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31512 00017C05 FF7500                  	push qword[rbp]
 31513 00017C08 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31514 00017C0B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31515 00017C0F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31516 00017C13 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31517 00017C17 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31518 00017C1A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31519 00017C1D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31520 00017C22 4983C103                	add r9, 3 	 ;for getting to the params
 31521 00017C26 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31522 00017C2A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31523                                  .L_tc_recycle_frame_loop_0113:
 31524 00017C2D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31525 00017C30 7410                    	je .L_tc_recycle_frame_done_0113
 31526 00017C32 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31527 00017C35 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31528 00017C38 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31529 00017C3C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31530 00017C40 EBEB                    	jmp .L_tc_recycle_frame_loop_0113
 31531                                  .L_tc_recycle_frame_done_0113:
 31532 00017C42 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31533 00017C43 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31534 00017C47 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31535                                  .L_if_end_0094:
 31536                                  .L_if_end_0095:
 31537                                  .L_if_end_0096:
 31538 00017C4A C9                      	leave
 31539 00017C4B C22800                  	ret AND_KILL_FRAME(3)
 31540                                  .L_lambda_simple_end_00c1:	; new closure is in rax
 31541 00017C4E 48890425[36140000]      	mov qword [free_var_97], rax
 31542 00017C56 48B8-                   	mov rax, sob_void
 31542 00017C58 [0000000000000000] 
 31543                                  
 31544 00017C60 4889C7                  	mov rdi, rax
 31545 00017C63 E8CC050000              	call print_sexpr_if_not_void
 31546 00017C68 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31547 00017C6D E86D030000              	call malloc
 31548 00017C72 50                      	push rax
 31549 00017C73 BF00000000              	mov rdi, 8 * 0	; new rib
 31550 00017C78 E862030000              	call malloc
 31551 00017C7D 50                      	push rax
 31552 00017C7E BF08000000              	mov rdi, 8 * 1	; extended env
 31553 00017C83 E857030000              	call malloc
 31554 00017C88 488B7D10                	mov rdi, ENV
 31555 00017C8C BE00000000              	mov rsi, 0
 31556 00017C91 BA01000000              	mov rdx, 1
 31557                                  .L_lambda_simple_env_loop_00c2:	; ext_env[i + 1] <-- env[i]
 31558 00017C96 4883FE00                	cmp rsi, 0
 31559 00017C9A 7410                    	je .L_lambda_simple_env_end_00c2
 31560 00017C9C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31561 00017CA0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31562 00017CA4 48FFC6                  	inc rsi
 31563 00017CA7 48FFC2                  	inc rdx
 31564 00017CAA EBEA                    	jmp .L_lambda_simple_env_loop_00c2
 31565                                  .L_lambda_simple_env_end_00c2:
 31566 00017CAC 5B                      	pop rbx
 31567 00017CAD BE00000000              	mov rsi, 0
 31568                                  .L_lambda_simple_params_loop_00c2:	; copy params
 31569 00017CB2 4883FE00                	cmp rsi, 0
 31570 00017CB6 740E                    	je .L_lambda_simple_params_end_00c2
 31571 00017CB8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31572 00017CBD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31573 00017CC1 48FFC6                  	inc rsi
 31574 00017CC4 EBEC                    	jmp .L_lambda_simple_params_loop_00c2
 31575                                  .L_lambda_simple_params_end_00c2:
 31576 00017CC6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31577 00017CC9 4889C3                  	mov rbx, rax
 31578 00017CCC 58                      	pop rax
 31579 00017CCD C60004                  	mov byte [rax], T_closure
 31580 00017CD0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31581 00017CD4 48C74009[E17C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c2
 31582 00017CDC E98D000000              	jmp .L_lambda_simple_end_00c2
 31583                                  .L_lambda_simple_code_00c2:	; lambda-simple body
 31584 00017CE1 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31585 00017CE7 740B                    	je .L_lambda_simple_arity_check_ok_00c2
 31586 00017CE9 FF742410                	push qword [rsp + 8 * 2]
 31587 00017CED 6A00                    	push 0
 31588 00017CEF E9A4020000              	jmp L_error_incorrect_arity_simple
 31589                                  .L_lambda_simple_arity_check_ok_00c2:
 31590 00017CF4 C8000000                	enter 0, 0
 31591                                  	; preparing a tail-call
 31592 00017CF8 48B8-                   	mov rax, L_constants + 3510
 31592 00017CFA [B60D000000000000] 
 31593 00017D02 50                      	push rax
 31594 00017D03 6A01                    	push 1	; arg count
 31595 00017D05 488B0425[BB170000]      	mov rax, qword [free_var_150]	; free var write-char
 31596 00017D0D 803805                  	cmp byte [rax], T_undefined
 31597 00017D10 0F849C010000            	je L_error_fvar_undefined
 31598 00017D16 803804                  	cmp byte [rax], T_closure
 31599 00017D19 0F8517020000            	jne L_error_non_closure
 31600 00017D1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31601 00017D22 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31602 00017D25 FF7500                  	push qword[rbp]
 31603 00017D28 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31604 00017D2B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31605 00017D2F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31606 00017D33 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31607 00017D37 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31608 00017D3A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31609 00017D3D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31610 00017D42 4983C103                	add r9, 3 	 ;for getting to the params
 31611 00017D46 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31612 00017D4A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31613                                  .L_tc_recycle_frame_loop_0114:
 31614 00017D4D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31615 00017D50 7410                    	je .L_tc_recycle_frame_done_0114
 31616 00017D52 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31617 00017D55 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31618 00017D58 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31619 00017D5C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31620 00017D60 EBEB                    	jmp .L_tc_recycle_frame_loop_0114
 31621                                  .L_tc_recycle_frame_done_0114:
 31622 00017D62 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31623 00017D63 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31624 00017D67 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31625 00017D6A C9                      	leave
 31626 00017D6B C21000                  	ret AND_KILL_FRAME(0)
 31627                                  .L_lambda_simple_end_00c2:	; new closure is in rax
 31628 00017D6E 48890425[BE140000]      	mov qword [free_var_105], rax
 31629 00017D76 48B8-                   	mov rax, sob_void
 31629 00017D78 [0000000000000000] 
 31630                                  
 31631 00017D80 4889C7                  	mov rdi, rax
 31632 00017D83 E8AC040000              	call print_sexpr_if_not_void
 31633 00017D88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31634 00017D8D E84D020000              	call malloc
 31635 00017D92 50                      	push rax
 31636 00017D93 BF00000000              	mov rdi, 8 * 0	; new rib
 31637 00017D98 E842020000              	call malloc
 31638 00017D9D 50                      	push rax
 31639 00017D9E BF08000000              	mov rdi, 8 * 1	; extended env
 31640 00017DA3 E837020000              	call malloc
 31641 00017DA8 488B7D10                	mov rdi, ENV
 31642 00017DAC BE00000000              	mov rsi, 0
 31643 00017DB1 BA01000000              	mov rdx, 1
 31644                                  .L_lambda_simple_env_loop_00c3:	; ext_env[i + 1] <-- env[i]
 31645 00017DB6 4883FE00                	cmp rsi, 0
 31646 00017DBA 7410                    	je .L_lambda_simple_env_end_00c3
 31647 00017DBC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31648 00017DC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31649 00017DC4 48FFC6                  	inc rsi
 31650 00017DC7 48FFC2                  	inc rdx
 31651 00017DCA EBEA                    	jmp .L_lambda_simple_env_loop_00c3
 31652                                  .L_lambda_simple_env_end_00c3:
 31653 00017DCC 5B                      	pop rbx
 31654 00017DCD BE00000000              	mov rsi, 0
 31655                                  .L_lambda_simple_params_loop_00c3:	; copy params
 31656 00017DD2 4883FE00                	cmp rsi, 0
 31657 00017DD6 740E                    	je .L_lambda_simple_params_end_00c3
 31658 00017DD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31659 00017DDD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31660 00017DE1 48FFC6                  	inc rsi
 31661 00017DE4 EBEC                    	jmp .L_lambda_simple_params_loop_00c3
 31662                                  .L_lambda_simple_params_end_00c3:
 31663 00017DE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31664 00017DE9 4889C3                  	mov rbx, rax
 31665 00017DEC 58                      	pop rax
 31666 00017DED C60004                  	mov byte [rax], T_closure
 31667 00017DF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31668 00017DF4 48C74009[FE7D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c3
 31669 00017DFC EB25                    	jmp .L_lambda_simple_end_00c3
 31670                                  .L_lambda_simple_code_00c3:	; lambda-simple body
 31671 00017DFE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31672 00017E04 740B                    	je .L_lambda_simple_arity_check_ok_00c3
 31673 00017E06 FF742410                	push qword [rsp + 8 * 2]
 31674 00017E0A 6A00                    	push 0
 31675 00017E0C E987010000              	jmp L_error_incorrect_arity_simple
 31676                                  .L_lambda_simple_arity_check_ok_00c3:
 31677 00017E11 C8000000                	enter 0, 0
 31678 00017E15 48B8-                   	mov rax, L_constants + 0
 31678 00017E17 [0000000000000000] 
 31679 00017E1F C9                      	leave
 31680 00017E20 C21000                  	ret AND_KILL_FRAME(0)
 31681                                  .L_lambda_simple_end_00c3:	; new closure is in rax
 31682 00017E23 48890425[AA170000]      	mov qword [free_var_149], rax
 31683 00017E2B 48B8-                   	mov rax, sob_void
 31683 00017E2D [0000000000000000] 
 31684                                  
 31685 00017E35 4889C7                  	mov rdi, rax
 31686 00017E38 E8F7030000              	call print_sexpr_if_not_void
 31687                                  	; preparing a non-tail-call
 31688 00017E3D 48B8-                   	mov rax, L_constants + 2270
 31688 00017E3F [DE08000000000000] 
 31689 00017E47 50                      	push rax
 31690 00017E48 488B0425[CC170000]      	mov rax, qword [free_var_151]	; free var zero?
 31691 00017E50 803805                  	cmp byte [rax], T_undefined
 31692 00017E53 745D                    	je L_error_fvar_undefined
 31693 00017E55 50                      	push rax
 31694 00017E56 6A02                    	push 2	; arg count
 31695 00017E58 488B0425[F60F0000]      	mov rax, qword [free_var_33]	; free var apply
 31696 00017E60 803805                  	cmp byte [rax], T_undefined
 31697 00017E63 744D                    	je L_error_fvar_undefined
 31698 00017E65 803804                  	cmp byte [rax], T_closure
 31699 00017E68 0F85C8000000            	jne L_error_non_closure
 31700 00017E6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 31701 00017E71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31702                                  Lend:
 31703 00017E74 4889C7                  	mov rdi, rax
 31704 00017E77 E8B8030000              	call print_sexpr_if_not_void
 31705                                  
 31706 00017E7C 48BF-                           mov rdi, fmt_memory_usage
 31706 00017E7E [7518000000000000] 
 31707 00017E86 488B3425[FB180000]              mov rsi, qword [top_of_memory]
 31708 00017E8E 4881EE[00000000]                sub rsi, memory
 31709 00017E95 B800000000                      mov rax, 0
 31710                                          ENTER
    44 00017E9A C8000000            <1>  enter 0, 0
    45 00017E9E 4883E4F0            <1>  and rsp, ~15
 31711 00017EA2 E8(00000000)                    call printf
 31712                                          LEAVE
    49 00017EA7 C9                  <1>  leave
 31713 00017EA8 B800000000                      mov rax, 0
 31714 00017EAD E8(00000000)                    call exit
 31715                                  
 31716                                  L_error_fvar_undefined:
 31717 00017EB2 50                              push rax
 31718 00017EB3 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 31719 00017EBB 48BE-                           mov rsi, fmt_undefined_free_var_1
 31719 00017EBD [DD17000000000000] 
 31720 00017EC5 B800000000                      mov rax, 0
 31721                                          ENTER
    44 00017ECA C8000000            <1>  enter 0, 0
    45 00017ECE 4883E4F0            <1>  and rsp, ~15
 31722 00017ED2 E8(00000000)                    call fprintf
 31723                                          LEAVE
    49 00017ED7 C9                  <1>  leave
 31724 00017ED8 58                              pop rax
 31725 00017ED9 488B4001                        mov rax, qword [rax + 1] ; string
 31726 00017EDD 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 31727 00017EE1 BE01000000                      mov rsi, 1               ; sizeof(char)
 31728 00017EE6 488B5001                        mov rdx, qword [rax + 1] ; string-length
 31729 00017EEA 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 31730 00017EF2 B800000000                      mov rax, 0
 31731                                          ENTER
    44 00017EF7 C8000000            <1>  enter 0, 0
    45 00017EFB 4883E4F0            <1>  and rsp, ~15
 31732 00017EFF E8(00000000)                    call fwrite
 31733                                          LEAVE
    49 00017F04 C9                  <1>  leave
 31734 00017F05 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 31735 00017F0D 48BE-                           mov rsi, fmt_undefined_free_var_2
 31735 00017F0F [F417000000000000] 
 31736 00017F17 B800000000                      mov rax, 0
 31737                                          ENTER
    44 00017F1C C8000000            <1>  enter 0, 0
    45 00017F20 4883E4F0            <1>  and rsp, ~15
 31738 00017F24 E8(00000000)                    call fprintf
 31739                                          LEAVE
    49 00017F29 C9                  <1>  leave
 31740 00017F2A 48C7C0F6FFFFFF                  mov rax, -10
 31741 00017F31 E8(00000000)                    call exit
 31742                                  
 31743                                  L_error_non_closure:
 31744 00017F36 488B3C25[00000000]              mov rdi, qword [stderr]
 31745 00017F3E 48BE-                           mov rsi, fmt_non_closure
 31745 00017F40 [AB18000000000000] 
 31746 00017F48 B800000000                      mov rax, 0
 31747                                          ENTER
    44 00017F4D C8000000            <1>  enter 0, 0
    45 00017F51 4883E4F0            <1>  and rsp, ~15
 31748 00017F55 E8(00000000)                    call fprintf
 31749                                          LEAVE
    49 00017F5A C9                  <1>  leave
 31750 00017F5B 48C7C0FEFFFFFF                  mov rax, -2
 31751 00017F62 E8(00000000)                    call exit
 31752                                  
 31753                                  L_error_improper_list:
 31754 00017F67 488B3C25[00000000]      	mov rdi, qword [stderr]
 31755 00017F6F 48BE-                   	mov rsi, fmt_error_improper_list
 31755 00017F71 [D318000000000000] 
 31756 00017F79 B800000000              	mov rax, 0
 31757                                          ENTER
    44 00017F7E C8000000            <1>  enter 0, 0
    45 00017F82 4883E4F0            <1>  and rsp, ~15
 31758 00017F86 E8(00000000)            	call fprintf
 31759                                          LEAVE
    49 00017F8B C9                  <1>  leave
 31760 00017F8C 48C7C0F9FFFFFF          	mov rax, -7
 31761 00017F93 E8(00000000)            	call exit
 31762                                  
 31763                                  L_error_incorrect_arity_simple:
 31764 00017F98 488B3C25[00000000]              mov rdi, qword [stderr]
 31765 00017FA0 48BE-                           mov rsi, fmt_incorrect_arity_simple
 31765 00017FA2 [1618000000000000] 
 31766 00017FAA EB12                            jmp L_error_incorrect_arity_common
 31767                                  L_error_incorrect_arity_opt:
 31768 00017FAC 488B3C25[00000000]              mov rdi, qword [stderr]
 31769 00017FB4 48BE-                           mov rsi, fmt_incorrect_arity_opt
 31769 00017FB6 [4118000000000000] 
 31770                                  L_error_incorrect_arity_common:
 31771 00017FBE 5A                              pop rdx
 31772 00017FBF 59                              pop rcx
 31773 00017FC0 B800000000                      mov rax, 0
 31774                                          ENTER
    44 00017FC5 C8000000            <1>  enter 0, 0
    45 00017FC9 4883E4F0            <1>  and rsp, ~15
 31775 00017FCD E8(00000000)                    call fprintf
 31776                                          LEAVE
    49 00017FD2 C9                  <1>  leave
 31777 00017FD3 48C7C0FAFFFFFF                  mov rax, -6
 31778 00017FDA E8(00000000)                    call exit
 31779                                  
 31780                                  section .data
 31781                                  fmt_undefined_free_var_1:
 31782 000017DD 212121205468652066-             db `!!! The free variable \0`
 31782 000017E6 726565207661726961-
 31782 000017EF 626C652000         
 31783                                  fmt_undefined_free_var_2:
 31784 000017F4 207761732075736564-             db ` was used before it was defined.\n\0`
 31784 000017FD 206265666F72652069-
 31784 00001806 742077617320646566-
 31784 0000180F 696E65642E0A00     
 31785                                  fmt_incorrect_arity_simple:
 31786 00001816 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 31786 0000181F 74656420256C642061-
 31786 00001828 7267756D656E74732C-
 31786 00001831 206275742067697665-
 31786 0000183A 6E20256C640A00     
 31787                                  fmt_incorrect_arity_opt:
 31788 00001841 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 31788 0000184A 746564206174206C65-
 31788 00001853 61737420256C642061-
 31788 0000185C 7267756D656E74732C-
 31788 00001865 206275742067697665-
 31788 0000186E 6E20256C640A00     
 31789                                  fmt_memory_usage:
 31790 00001875 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 31790 0000187E 20256C642062797465-
 31790 00001887 73206F662064796E61-
 31790 00001890 6D6963616C6C792D61-
 31790 00001899 6C6C6F636174656420-
 31790 000018A2 6D656D6F72790A0A00 
 31791                                  fmt_non_closure:
 31792 000018AB 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 31792 000018B4 7074696E6720746F20-
 31792 000018BD 6170706C792061206E-
 31792 000018C6 6F6E2D636C6F737572-
 31792 000018CF 65210A00           
 31793                                  fmt_error_improper_list:
 31794 000018D3 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 31794 000018DC 7267756D656E742069-
 31794 000018E5 73206E6F7420612070-
 31794 000018EE 726F706572206C6973-
 31794 000018F7 74210A00           
 31795                                  
 31796                                  section .bss
 31797                                  memory:
 31798 00000000 <res 40000000h>         	resb gbytes(1)
 31799                                  
 31800                                  section .data
 31801                                  top_of_memory:
 31802 000018FB [0000000000000000]              dq memory
 31803                                  
 31804                                  section .text
 31805                                  malloc:
 31806 00017FDF 488B0425[FB180000]              mov rax, qword [top_of_memory]
 31807 00017FE7 48013C25[FB180000]              add qword [top_of_memory], rdi
 31808 00017FEF C3                              ret
 31809                                  
 31810                                  L_code_ptr_return:
 31811 00017FF0 48837C241002            	cmp qword [rsp + 8*2], 2
 31812 00017FF6 0F85F41C0000            	jne L_error_arg_count_2
 31813 00017FFC 488B4C2418              	mov rcx, qword [rsp + 8*3]
 31814                                  	assert_integer(rcx)
    53 00018001 803911              <1>  cmp byte [%1], %2
    54 00018004 0F85851D0000        <1>  jne L_error_incorrect_type
 31815 0001800A 488B4901                	mov rcx, qword [rcx + 1]
 31816 0001800E 4883F900                	cmp rcx, 0
 31817 00018012 0F8C0C1C0000            	jl L_error_integer_range
 31818 00018018 488B442420              	mov rax, qword [rsp + 8*4]
 31819                                  .L0:
 31820 0001801D 4883F900                        cmp rcx, 0
 31821 00018021 7409                            je .L1
 31822 00018023 488B6D00                	mov rbp, qword [rbp]
 31823 00018027 48FFC9                  	dec rcx
 31824 0001802A 7FF1                    	jg .L0
 31825                                  .L1:
 31826 0001802C 4889EC                  	mov rsp, rbp
 31827 0001802F 5D                      	pop rbp
 31828 00018030 5B                              pop rbx
 31829 00018031 488B4C2408                      mov rcx, qword [rsp + 8*1]
 31830 00018036 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
 31831 0001803B FFE3                    	jmp rbx
 31832                                  
 31833                                  L_code_ptr_make_list:
 31834 0001803D C8000000                	enter 0, 0
 31835 00018041 48837D1801                      cmp COUNT, 1
 31836 00018046 740C                            je .L0
 31837 00018048 48837D1802                      cmp COUNT, 2
 31838 0001804D 7411                            je .L1
 31839 0001804F E9D11C0000                      jmp L_error_arg_count_12
 31840                                  .L0:
 31841 00018054 49B9-                           mov r9, sob_void
 31841 00018056 [0000000000000000] 
 31842 0001805E EB04                            jmp .L2
 31843                                  .L1:
 31844 00018060 4C8B4D28                        mov r9, PARAM(1)
 31845                                  .L2:
 31846 00018064 488B4D20                        mov rcx, PARAM(0)
 31847                                          assert_integer(rcx)
    53 00018068 803911              <1>  cmp byte [%1], %2
    54 0001806B 0F851E1D0000        <1>  jne L_error_incorrect_type
 31848 00018071 488B4901                        mov rcx, qword [rcx + 1]
 31849 00018075 4883F900                        cmp rcx, 0
 31850 00018079 0F8CD61B0000                    jl L_error_arg_negative
 31851 0001807F 49B8-                           mov r8, sob_nil
 31851 00018081 [0100000000000000] 
 31852                                  .L3:
 31853 00018089 4883F900                        cmp rcx, 0
 31854 0001808D 7E1D                            jle .L4
 31855 0001808F BF11000000                      mov rdi, 1 + 8 + 8
 31856 00018094 E846FFFFFF                      call malloc
 31857 00018099 C60021                          mov byte [rax], T_pair
 31858 0001809C 4C894801                        mov qword [rax + 1], r9
 31859 000180A0 4C894009                        mov qword [rax + 1 + 8], r8
 31860 000180A4 4989C0                          mov r8, rax
 31861 000180A7 48FFC9                          dec rcx
 31862 000180AA EBDD                            jmp .L3
 31863                                  .L4:
 31864 000180AC 4C89C0                          mov rax, r8
 31865 000180AF 48837D1802                      cmp COUNT, 2
 31866 000180B4 7404                            je .L5
 31867 000180B6 C9                              leave
 31868 000180B7 C21800                          ret AND_KILL_FRAME(1)
 31869                                  .L5:
 31870 000180BA C9                      	leave
 31871 000180BB C22000                  	ret AND_KILL_FRAME(2)
 31872                                  
 31873                                  L_code_ptr_is_primitive:
 31874 000180BE C8000000                	enter 0, 0
 31875 000180C2 48837D1801              	cmp COUNT, 1
 31876 000180C7 0F85EE1B0000            	jne L_error_arg_count_1
 31877 000180CD 488B4520                	mov rax, PARAM(0)
 31878                                  	assert_closure(rax)
    53 000180D1 803804              <1>  cmp byte [%1], %2
    54 000180D4 0F85B51C0000        <1>  jne L_error_incorrect_type
 31879 000180DA 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
 31880 000180DF 750C                    	jne .L_false
 31881 000180E1 48B8-                   	mov rax, sob_boolean_true
 31881 000180E3 [0300000000000000] 
 31882 000180EB EB0A                    	jmp .L_end
 31883                                  .L_false:
 31884 000180ED 48B8-                   	mov rax, sob_boolean_false
 31884 000180EF [0200000000000000] 
 31885                                  .L_end:
 31886 000180F7 C9                      	leave
 31887 000180F8 C21800                  	ret AND_KILL_FRAME(1)
 31888                                  
 31889                                  L_code_ptr_length:
 31890 000180FB C8000000                	enter 0, 0
 31891 000180FF 48837D1801              	cmp COUNT, 1
 31892 00018104 0F85B11B0000            	jne L_error_arg_count_1
 31893 0001810A 488B5D20                	mov rbx, PARAM(0)
 31894 0001810E BF00000000              	mov rdi, 0
 31895                                  .L:
 31896 00018113 803B01                  	cmp byte [rbx], T_nil
 31897 00018116 7412                    	je .L_end
 31898                                  	assert_pair(rbx)
    53 00018118 803B21              <1>  cmp byte [%1], %2
    54 0001811B 0F856E1C0000        <1>  jne L_error_incorrect_type
 31899 00018121 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
 31900 00018125 48FFC7                  	inc rdi
 31901 00018128 EBE9                    	jmp .L
 31902                                  .L_end:
 31903 0001812A E8DB1A0000              	call make_integer
 31904 0001812F C9                      	leave
 31905 00018130 C21800                  	ret AND_KILL_FRAME(1)
 31906                                  
 31907                                  L_code_ptr_break:
 31908 00018133 48837C241000                    cmp qword [rsp + 8 * 2], 0
 31909 00018139 0F85471B0000                    jne L_error_arg_count_0
 31910 0001813F CC                              int3
 31911 00018140 48B8-                           mov rax, sob_void
 31911 00018142 [0000000000000000] 
 31912 0001814A C21000                          ret AND_KILL_FRAME(0)        
 31913                                  
 31914                                  L_code_ptr_frame:
 31915 0001814D C8000000                        enter 0, 0
 31916 00018151 48837D1800                      cmp COUNT, 0
 31917 00018156 0F852A1B0000                    jne L_error_arg_count_0
 31918                                  
 31919 0001815C 48BF-                           mov rdi, fmt_frame
 31919 0001815E [0319000000000000] 
 31920 00018166 488B7500                        mov rsi, qword [rbp]    ; old rbp
 31921 0001816A 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 31922 0001816E 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 31923 00018172 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 31924 00018176 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 31925 0001817A 6A00                            push 0
 31926 0001817C 4151                            push r9
 31927 0001817E 4150                            push r8                   ; we'll use it when printing the params
 31928 00018180 B800000000                      mov rax, 0
 31929                                          
 31930                                          ENTER
    44 00018185 C8000000            <1>  enter 0, 0
    45 00018189 4883E4F0            <1>  and rsp, ~15
 31931 0001818D E8(00000000)                    call printf
 31932                                          LEAVE
    49 00018192 C9                  <1>  leave
 31933                                  
 31934                                  .L:
 31935 00018193 488B0C24                        mov rcx, qword [rsp]
 31936 00018197 4883F900                        cmp rcx, 0
 31937 0001819B 7467                            je .L_out
 31938 0001819D 48BF-                           mov rdi, fmt_frame_param_prefix
 31938 0001819F [3C19000000000000] 
 31939 000181A7 488B742410                      mov rsi, qword [rsp + 8*2]
 31940 000181AC B800000000                      mov rax, 0
 31941                                          
 31942                                          ENTER
    44 000181B1 C8000000            <1>  enter 0, 0
    45 000181B5 4883E4F0            <1>  and rsp, ~15
 31943 000181B9 E8(00000000)                    call printf
 31944                                          LEAVE
    49 000181BE C9                  <1>  leave
 31945                                  
 31946 000181BF 488B0C24                        mov rcx, qword [rsp]
 31947 000181C3 48FFC9                          dec rcx
 31948 000181C6 48890C24                        mov qword [rsp], rcx    ; dec arg count
 31949 000181CA 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 31950 000181CF 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 31951 000181D4 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 31952 000181D8 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 31953 000181DD 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 31954 000181E0 E87B000000                      call print_sexpr
 31955 000181E5 48BF-                           mov rdi, fmt_newline
 31955 000181E7 [6819000000000000] 
 31956 000181EF B800000000                      mov rax, 0
 31957                                          ENTER
    44 000181F4 C8000000            <1>  enter 0, 0
    45 000181F8 4883E4F0            <1>  and rsp, ~15
 31958 000181FC E8(00000000)                    call printf
 31959                                          LEAVE
    49 00018201 C9                  <1>  leave
 31960 00018202 EB8F                            jmp .L
 31961                                  .L_out:
 31962 00018204 48BF-                           mov rdi, fmt_frame_continue
 31962 00018206 [4D19000000000000] 
 31963 0001820E B800000000                      mov rax, 0
 31964                                          ENTER
    44 00018213 C8000000            <1>  enter 0, 0
    45 00018217 4883E4F0            <1>  and rsp, ~15
 31965 0001821B E8(00000000)                    call printf
 31966 00018220 E8(00000000)                    call getchar
 31967                                          LEAVE
    49 00018225 C9                  <1>  leave
 31968                                          
 31969 00018226 48B8-                           mov rax, sob_void
 31969 00018228 [0000000000000000] 
 31970 00018230 C9                              leave
 31971 00018231 C21000                          ret AND_KILL_FRAME(0)
 31972                                          
 31973                                  print_sexpr_if_not_void:
 31974 00018234 4881FF[00000000]        	cmp rdi, sob_void
 31975 0001823B 7422                    	je .done
 31976 0001823D E81E000000              	call print_sexpr
 31977 00018242 48BF-                   	mov rdi, fmt_newline
 31977 00018244 [6819000000000000] 
 31978 0001824C B800000000              	mov rax, 0
 31979                                  	ENTER
    44 00018251 C8000000            <1>  enter 0, 0
    45 00018255 4883E4F0            <1>  and rsp, ~15
 31980 00018259 E8(00000000)            	call printf
 31981                                  	LEAVE
    49 0001825E C9                  <1>  leave
 31982                                  .done:
 31983 0001825F C3                      	ret
 31984                                  
 31985                                  section .data
 31986                                  fmt_frame:
 31987 00001903 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 31987 0000190C 207265742061646472-
 31987 00001915 203D2025703B206C65-
 31987 0000191E 7820656E76203D2025-
 31987 00001927 703B20706172616D20-
 31987 00001930 636F756E74203D2025-
 31987 00001939 640A00             
 31988                                  fmt_frame_param_prefix:
 31989 0000193C 3D3D5B706172616D20-             db `==[param %d]==> \0`
 31989 00001945 25645D3D3D3E2000   
 31990                                  fmt_frame_continue:
 31991 0000194D 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 31991 00001956 723E20746F20636F6E-
 31991 0000195F 74696E75652E2E2E00 
 31992                                  fmt_newline:
 31993 00001968 0A00                    	db `\n\0`
 31994                                  fmt_void:
 31995 0000196A 233C766F69643E00        	db `#<void>\0`
 31996                                  fmt_nil:
 31997 00001972 282900                  	db `()\0`
 31998                                  fmt_boolean_false:
 31999 00001975 236600                  	db `#f\0`
 32000                                  fmt_boolean_true:
 32001 00001978 237400                  	db `#t\0`
 32002                                  fmt_char_backslash:
 32003 0000197B 235C5C00                	db `#\\\\\0`
 32004                                  fmt_char_dquote:
 32005 0000197F 235C2200                	db `#\\"\0`
 32006                                  fmt_char_simple:
 32007 00001983 235C256300              	db `#\\%c\0`
 32008                                  fmt_char_null:
 32009 00001988 235C6E756C00            	db `#\\nul\0`
 32010                                  fmt_char_bell:
 32011 0000198E 235C62656C6C00          	db `#\\bell\0`
 32012                                  fmt_char_backspace:
 32013 00001995 235C6261636B737061-     	db `#\\backspace\0`
 32013 0000199E 636500             
 32014                                  fmt_char_tab:
 32015 000019A1 235C74616200            	db `#\\tab\0`
 32016                                  fmt_char_newline:
 32017 000019A7 235C6E65776C696E65-     	db `#\\newline\0`
 32017 000019B0 00                 
 32018                                  fmt_char_formfeed:
 32019 000019B1 235C7061676500          	db `#\\page\0`
 32020                                  fmt_char_return:
 32021 000019B8 235C72657475726E00      	db `#\\return\0`
 32022                                  fmt_char_escape:
 32023 000019C1 235C65736300            	db `#\\esc\0`
 32024                                  fmt_char_space:
 32025 000019C7 235C737061636500        	db `#\\space\0`
 32026                                  fmt_char_hex:
 32027 000019CF 235C782530325800        	db `#\\x%02X\0`
 32028                                  fmt_gensym:
 32029 000019D7 47256C6400                      db `G%ld\0`
 32030                                  fmt_closure:
 32031 000019DC 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 32031 000019E5 206174203078253038-
 32031 000019EE 5820656E763D307825-
 32031 000019F7 30385820636F64653D-
 32031 00001A00 3078253038583E00   
 32032                                  fmt_lparen:
 32033 00001A08 2800                    	db `(\0`
 32034                                  fmt_dotted_pair:
 32035 00001A0A 202E2000                	db ` . \0`
 32036                                  fmt_rparen:
 32037 00001A0E 2900                    	db `)\0`
 32038                                  fmt_space:
 32039 00001A10 2000                    	db ` \0`
 32040                                  fmt_empty_vector:
 32041 00001A12 23282900                	db `#()\0`
 32042                                  fmt_vector:
 32043 00001A16 232800                  	db `#(\0`
 32044                                  fmt_real:
 32045 00001A19 256600                  	db `%f\0`
 32046                                  fmt_fraction:
 32047 00001A1C 256C642F256C6400        	db `%ld/%ld\0`
 32048                                  fmt_zero:
 32049 00001A24 3000                    	db `0\0`
 32050                                  fmt_int:
 32051 00001A26 256C6400                	db `%ld\0`
 32052                                  fmt_unknown_scheme_object_error:
 32053 00001A2A 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 32053 00001A33 6F723A20556E6B6E6F-
 32053 00001A3C 776E20536368656D65-
 32053 00001A45 2D6F626A6563742028-
 32053 00001A4E 525454492030782530-
 32053 00001A57 32582920           
 32054 00001A5B 617420616464726573-     	db `at address 0x%08X\n\n\0`
 32054 00001A64 73203078253038580A-
 32054 00001A6D 0A00               
 32055                                  fmt_dquote:
 32056 00001A6F 2200                    	db `\"\0`
 32057                                  fmt_string_char:
 32058 00001A71 256300                          db `%c\0`
 32059                                  fmt_string_char_7:
 32060 00001A74 5C6100                          db `\\a\0`
 32061                                  fmt_string_char_8:
 32062 00001A77 5C6200                          db `\\b\0`
 32063                                  fmt_string_char_9:
 32064 00001A7A 5C7400                          db `\\t\0`
 32065                                  fmt_string_char_10:
 32066 00001A7D 5C6E00                          db `\\n\0`
 32067                                  fmt_string_char_11:
 32068 00001A80 5C7600                          db `\\v\0`
 32069                                  fmt_string_char_12:
 32070 00001A83 5C6600                          db `\\f\0`
 32071                                  fmt_string_char_13:
 32072 00001A86 5C7200                          db `\\r\0`
 32073                                  fmt_string_char_34:
 32074 00001A89 5C2200                          db `\\"\0`
 32075                                  fmt_string_char_92:
 32076 00001A8C 5C5C00                          db `\\\\\0`
 32077                                  fmt_string_char_hex:
 32078 00001A8F 5C7825583B00                    db `\\x%X;\0`
 32079                                  
 32080                                  section .text
 32081                                  
 32082                                  print_sexpr:
 32083 00018260 C8000000                	enter 0, 0
 32084 00018264 8A07                    	mov al, byte [rdi]
 32085 00018266 3C00                    	cmp al, T_void
 32086 00018268 7465                    	je .Lvoid
 32087 0001826A 3C01                    	cmp al, T_nil
 32088 0001826C 7470                    	je .Lnil
 32089 0001826E 3C09                    	cmp al, T_boolean_false
 32090 00018270 747B                    	je .Lboolean_false
 32091 00018272 3C0A                    	cmp al, T_boolean_true
 32092 00018274 0F8482000000            	je .Lboolean_true
 32093 0001827A 3C02                    	cmp al, T_char
 32094 0001827C 0F8489000000            	je .Lchar
 32095 00018282 3C41                    	cmp al, T_interned_symbol
 32096 00018284 0F84CB010000            	je .Linterned_symbol
 32097 0001828A 3C42                            cmp al, T_uninterned_symbol
 32098 0001828C 0F84EF010000                    je .Luninterned_symbol
 32099 00018292 3C21                    	cmp al, T_pair
 32100 00018294 0F84FA010000            	je .Lpair
 32101 0001829A 3C22                    	cmp al, T_vector
 32102 0001829C 0F84C3020000            	je .Lvector
 32103 000182A2 3C04                    	cmp al, T_closure
 32104 000182A4 0F8491010000            	je .Lclosure
 32105 000182AA 3C13                    	cmp al, T_real
 32106 000182AC 0F8454030000            	je .Lreal
 32107 000182B2 3C12                    	cmp al, T_fraction
 32108 000182B4 0F847A030000            	je .Lfraction
 32109 000182BA 3C11                    	cmp al, T_integer
 32110 000182BC 0F84B3030000            	je .Linteger
 32111 000182C2 3C03                    	cmp al, T_string
 32112 000182C4 0F84BE030000            	je .Lstring
 32113                                  
 32114 000182CA E9F6040000              	jmp .Lunknown_sexpr_type
 32115                                  
 32116                                  .Lvoid:
 32117 000182CF 48BF-                   	mov rdi, fmt_void
 32117 000182D1 [6A19000000000000] 
 32118 000182D9 E91A050000              	jmp .Lemit
 32119                                  
 32120                                  .Lnil:
 32121 000182DE 48BF-                   	mov rdi, fmt_nil
 32121 000182E0 [7219000000000000] 
 32122 000182E8 E90B050000              	jmp .Lemit
 32123                                  
 32124                                  .Lboolean_false:
 32125 000182ED 48BF-                   	mov rdi, fmt_boolean_false
 32125 000182EF [7519000000000000] 
 32126 000182F7 E9FC040000              	jmp .Lemit
 32127                                  
 32128                                  .Lboolean_true:
 32129 000182FC 48BF-                   	mov rdi, fmt_boolean_true
 32129 000182FE [7819000000000000] 
 32130 00018306 E9ED040000              	jmp .Lemit
 32131                                  
 32132                                  .Lchar:
 32133 0001830B 8A4701                  	mov al, byte [rdi + 1]
 32134 0001830E 3C20                    	cmp al, ' '
 32135 00018310 7E28                    	jle .Lchar_whitespace
 32136 00018312 3C5C                    	cmp al, 92 		; backslash
 32137 00018314 0F847C000000            	je .Lchar_backslash
 32138 0001831A 3C22                    	cmp al, '"'
 32139 0001831C 0F8483000000            	je .Lchar_dquote
 32140 00018322 4825FF000000            	and rax, 255
 32141 00018328 48BF-                   	mov rdi, fmt_char_simple
 32141 0001832A [8319000000000000] 
 32142 00018332 4889C6                  	mov rsi, rax
 32143 00018335 E9BE040000              	jmp .Lemit
 32144                                  
 32145                                  .Lchar_whitespace:
 32146 0001833A 3C00                    	cmp al, 0
 32147 0001833C 7476                    	je .Lchar_null
 32148 0001833E 3C07                    	cmp al, 7
 32149 00018340 0F847D000000            	je .Lchar_bell
 32150 00018346 3C08                    	cmp al, 8
 32151 00018348 0F8484000000            	je .Lchar_backspace
 32152 0001834E 3C09                    	cmp al, 9
 32153 00018350 0F848B000000            	je .Lchar_tab
 32154 00018356 3C0A                    	cmp al, 10
 32155 00018358 0F8492000000            	je .Lchar_newline
 32156 0001835E 3C0C                    	cmp al, 12
 32157 00018360 0F8499000000            	je .Lchar_formfeed
 32158 00018366 3C0D                    	cmp al, 13
 32159 00018368 0F84A0000000            	je .Lchar_return
 32160 0001836E 3C1B                    	cmp al, 27
 32161 00018370 0F84A7000000            	je .Lchar_escape
 32162 00018376 4825FF000000            	and rax, 255
 32163 0001837C 3C20                    	cmp al, ' '
 32164 0001837E 0F84A8000000            	je .Lchar_space
 32165 00018384 48BF-                   	mov rdi, fmt_char_hex
 32165 00018386 [CF19000000000000] 
 32166 0001838E 4889C6                  	mov rsi, rax
 32167 00018391 E962040000              	jmp .Lemit	
 32168                                  
 32169                                  .Lchar_backslash:
 32170 00018396 48BF-                   	mov rdi, fmt_char_backslash
 32170 00018398 [7B19000000000000] 
 32171 000183A0 E953040000              	jmp .Lemit
 32172                                  
 32173                                  .Lchar_dquote:
 32174 000183A5 48BF-                   	mov rdi, fmt_char_dquote
 32174 000183A7 [7F19000000000000] 
 32175 000183AF E944040000              	jmp .Lemit
 32176                                  
 32177                                  .Lchar_null:
 32178 000183B4 48BF-                   	mov rdi, fmt_char_null
 32178 000183B6 [8819000000000000] 
 32179 000183BE E935040000              	jmp .Lemit
 32180                                  
 32181                                  .Lchar_bell:
 32182 000183C3 48BF-                   	mov rdi, fmt_char_bell
 32182 000183C5 [8E19000000000000] 
 32183 000183CD E926040000              	jmp .Lemit
 32184                                  
 32185                                  .Lchar_backspace:
 32186 000183D2 48BF-                   	mov rdi, fmt_char_backspace
 32186 000183D4 [9519000000000000] 
 32187 000183DC E917040000              	jmp .Lemit
 32188                                  
 32189                                  .Lchar_tab:
 32190 000183E1 48BF-                   	mov rdi, fmt_char_tab
 32190 000183E3 [A119000000000000] 
 32191 000183EB E908040000              	jmp .Lemit
 32192                                  
 32193                                  .Lchar_newline:
 32194 000183F0 48BF-                   	mov rdi, fmt_char_newline
 32194 000183F2 [A719000000000000] 
 32195 000183FA E9F9030000              	jmp .Lemit
 32196                                  
 32197                                  .Lchar_formfeed:
 32198 000183FF 48BF-                   	mov rdi, fmt_char_formfeed
 32198 00018401 [B119000000000000] 
 32199 00018409 E9EA030000              	jmp .Lemit
 32200                                  
 32201                                  .Lchar_return:
 32202 0001840E 48BF-                   	mov rdi, fmt_char_return
 32202 00018410 [B819000000000000] 
 32203 00018418 E9DB030000              	jmp .Lemit
 32204                                  
 32205                                  .Lchar_escape:
 32206 0001841D 48BF-                   	mov rdi, fmt_char_escape
 32206 0001841F [C119000000000000] 
 32207 00018427 E9CC030000              	jmp .Lemit
 32208                                  
 32209                                  .Lchar_space:
 32210 0001842C 48BF-                   	mov rdi, fmt_char_space
 32210 0001842E [C719000000000000] 
 32211 00018436 E9BD030000              	jmp .Lemit
 32212                                  
 32213                                  .Lclosure:
 32214 0001843B 4889FE                  	mov rsi, qword rdi
 32215 0001843E 48BF-                   	mov rdi, fmt_closure
 32215 00018440 [DC19000000000000] 
 32216 00018448 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 32217 0001844C 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 32218 00018450 E9A3030000              	jmp .Lemit
 32219                                  
 32220                                  .Linterned_symbol:
 32221 00018455 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 32222 00018459 BE01000000              	mov rsi, 1		 ; size = 1 byte
 32223 0001845E 488B5701                	mov rdx, qword [rdi + 1] ; length
 32224 00018462 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 32225 00018466 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 32226                                  	ENTER
    44 0001846E C8000000            <1>  enter 0, 0
    45 00018472 4883E4F0            <1>  and rsp, ~15
 32227 00018476 E8(00000000)            	call fwrite
 32228                                  	LEAVE
    49 0001847B C9                  <1>  leave
 32229 0001847C E98C030000              	jmp .Lend
 32230                                  
 32231                                  .Luninterned_symbol:
 32232 00018481 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 32233 00018485 48BF-                           mov rdi, fmt_gensym
 32233 00018487 [D719000000000000] 
 32234 0001848F E964030000                      jmp .Lemit
 32235                                  	
 32236                                  .Lpair:
 32237 00018494 57                      	push rdi
 32238 00018495 48BF-                   	mov rdi, fmt_lparen
 32238 00018497 [081A000000000000] 
 32239 0001849F B800000000              	mov rax, 0
 32240                                          ENTER
    44 000184A4 C8000000            <1>  enter 0, 0
    45 000184A8 4883E4F0            <1>  and rsp, ~15
 32241 000184AC E8(00000000)            	call printf
 32242                                          LEAVE
    49 000184B1 C9                  <1>  leave
 32243 000184B2 488B3C24                	mov rdi, qword [rsp] 	; pair
 32244 000184B6 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32245 000184BA E8A1FDFFFF              	call print_sexpr
 32246 000184BF 5F                      	pop rdi 		; pair
 32247 000184C0 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32248                                  .Lcdr:
 32249 000184C4 8A07                    	mov al, byte [rdi]
 32250 000184C6 3C01                    	cmp al, T_nil
 32251 000184C8 7447                    	je .Lcdr_nil
 32252 000184CA 3C21                    	cmp al, T_pair
 32253 000184CC 7462                    	je .Lcdr_pair
 32254 000184CE 57                      	push rdi
 32255 000184CF 48BF-                   	mov rdi, fmt_dotted_pair
 32255 000184D1 [0A1A000000000000] 
 32256 000184D9 B800000000              	mov rax, 0
 32257                                          ENTER
    44 000184DE C8000000            <1>  enter 0, 0
    45 000184E2 4883E4F0            <1>  and rsp, ~15
 32258 000184E6 E8(00000000)            	call printf
 32259                                          LEAVE
    49 000184EB C9                  <1>  leave
 32260 000184EC 5F                      	pop rdi
 32261 000184ED E86EFDFFFF              	call print_sexpr
 32262 000184F2 48BF-                   	mov rdi, fmt_rparen
 32262 000184F4 [0E1A000000000000] 
 32263 000184FC B800000000              	mov rax, 0
 32264                                          ENTER
    44 00018501 C8000000            <1>  enter 0, 0
    45 00018505 4883E4F0            <1>  and rsp, ~15
 32265 00018509 E8(00000000)            	call printf
 32266                                          LEAVE
    49 0001850E C9                  <1>  leave
 32267 0001850F C9                      	leave
 32268 00018510 C3                      	ret
 32269                                  
 32270                                  .Lcdr_nil:
 32271 00018511 48BF-                   	mov rdi, fmt_rparen
 32271 00018513 [0E1A000000000000] 
 32272 0001851B B800000000              	mov rax, 0
 32273                                          ENTER
    44 00018520 C8000000            <1>  enter 0, 0
    45 00018524 4883E4F0            <1>  and rsp, ~15
 32274 00018528 E8(00000000)            	call printf
 32275                                          LEAVE
    49 0001852D C9                  <1>  leave
 32276 0001852E C9                      	leave
 32277 0001852F C3                      	ret
 32278                                  
 32279                                  .Lcdr_pair:
 32280 00018530 57                      	push rdi
 32281 00018531 48BF-                   	mov rdi, fmt_space
 32281 00018533 [101A000000000000] 
 32282 0001853B B800000000              	mov rax, 0
 32283                                          ENTER
    44 00018540 C8000000            <1>  enter 0, 0
    45 00018544 4883E4F0            <1>  and rsp, ~15
 32284 00018548 E8(00000000)            	call printf
 32285                                          LEAVE
    49 0001854D C9                  <1>  leave
 32286 0001854E 488B3C24                	mov rdi, qword [rsp]
 32287 00018552 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32288 00018556 E805FDFFFF              	call print_sexpr
 32289 0001855B 5F                      	pop rdi
 32290 0001855C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32291 00018560 E95FFFFFFF              	jmp .Lcdr
 32292                                  
 32293                                  .Lvector:
 32294 00018565 488B4701                	mov rax, qword [rdi + 1] ; length
 32295 00018569 4883F800                	cmp rax, 0
 32296 0001856D 0F8484000000            	je .Lvector_empty
 32297 00018573 57                      	push rdi
 32298 00018574 48BF-                   	mov rdi, fmt_vector
 32298 00018576 [161A000000000000] 
 32299 0001857E B800000000              	mov rax, 0
 32300                                          ENTER
    44 00018583 C8000000            <1>  enter 0, 0
    45 00018587 4883E4F0            <1>  and rsp, ~15
 32301 0001858B E8(00000000)            	call printf
 32302                                          LEAVE
    49 00018590 C9                  <1>  leave
 32303 00018591 488B3C24                	mov rdi, qword [rsp]
 32304 00018595 FF7701                  	push qword [rdi + 1]
 32305 00018598 6A01                    	push 1
 32306 0001859A 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 32307 0001859E E8BDFCFFFF              	call print_sexpr
 32308                                  .Lvector_loop:
 32309                                  	; [rsp] index
 32310                                  	; [rsp + 8*1] limit
 32311                                  	; [rsp + 8*2] vector
 32312 000185A3 488B0424                	mov rax, qword [rsp]
 32313 000185A7 483B442408              	cmp rax, qword [rsp + 8*1]
 32314 000185AC 7436                    	je .Lvector_end
 32315 000185AE 48BF-                   	mov rdi, fmt_space
 32315 000185B0 [101A000000000000] 
 32316 000185B8 B800000000              	mov rax, 0
 32317                                          ENTER
    44 000185BD C8000000            <1>  enter 0, 0
    45 000185C1 4883E4F0            <1>  and rsp, ~15
 32318 000185C5 E8(00000000)            	call printf
 32319                                          LEAVE
    49 000185CA C9                  <1>  leave
 32320 000185CB 488B0424                	mov rax, qword [rsp]
 32321 000185CF 488B5C2410              	mov rbx, qword [rsp + 8*2]
 32322 000185D4 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 32323 000185D9 E882FCFFFF              	call print_sexpr
 32324 000185DE 48FF0424                	inc qword [rsp]
 32325 000185E2 EBBF                    	jmp .Lvector_loop
 32326                                  
 32327                                  .Lvector_end:
 32328 000185E4 4883C418                	add rsp, 8*3
 32329 000185E8 48BF-                   	mov rdi, fmt_rparen
 32329 000185EA [0E1A000000000000] 
 32330 000185F2 E901020000              	jmp .Lemit	
 32331                                  
 32332                                  .Lvector_empty:
 32333 000185F7 48BF-                   	mov rdi, fmt_empty_vector
 32333 000185F9 [121A000000000000] 
 32334 00018601 E9F2010000              	jmp .Lemit
 32335                                  
 32336                                  .Lreal:
 32337 00018606 FF7701                  	push qword [rdi + 1]
 32338 00018609 F20F100424              	movsd xmm0, qword [rsp]
 32339 0001860E 4883C408                	add rsp, 8*1
 32340 00018612 48BF-                   	mov rdi, fmt_real
 32340 00018614 [191A000000000000] 
 32341 0001861C B801000000              	mov rax, 1
 32342                                  	ENTER
    44 00018621 C8000000            <1>  enter 0, 0
    45 00018625 4883E4F0            <1>  and rsp, ~15
 32343 00018629 E8(00000000)            	call printf
 32344                                  	LEAVE
    49 0001862E C9                  <1>  leave
 32345 0001862F E9D9010000              	jmp .Lend
 32346                                  
 32347                                  .Lfraction:
 32348 00018634 488B7701                	mov rsi, qword [rdi + 1]
 32349 00018638 488B5709                	mov rdx, qword [rdi + 1 + 8]
 32350 0001863C 4883FE00                	cmp rsi, 0
 32351 00018640 7415                    	je .Lrat_zero
 32352 00018642 4883FA01                	cmp rdx, 1
 32353 00018646 741E                    	je .Lrat_int
 32354 00018648 48BF-                   	mov rdi, fmt_fraction
 32354 0001864A [1C1A000000000000] 
 32355 00018652 E9A1010000              	jmp .Lemit
 32356                                  
 32357                                  .Lrat_zero:
 32358 00018657 48BF-                   	mov rdi, fmt_zero
 32358 00018659 [241A000000000000] 
 32359 00018661 E992010000              	jmp .Lemit
 32360                                  
 32361                                  .Lrat_int:
 32362 00018666 48BF-                   	mov rdi, fmt_int
 32362 00018668 [261A000000000000] 
 32363 00018670 E983010000              	jmp .Lemit
 32364                                  
 32365                                  .Linteger:
 32366 00018675 488B7701                	mov rsi, qword [rdi + 1]
 32367 00018679 48BF-                   	mov rdi, fmt_int
 32367 0001867B [261A000000000000] 
 32368 00018683 E970010000              	jmp .Lemit
 32369                                  
 32370                                  .Lstring:
 32371 00018688 488D4709                	lea rax, [rdi + 1 + 8]
 32372 0001868C 50                      	push rax
 32373 0001868D FF7701                  	push qword [rdi + 1]
 32374 00018690 48BF-                   	mov rdi, fmt_dquote
 32374 00018692 [6F1A000000000000] 
 32375 0001869A B800000000              	mov rax, 0
 32376                                  	ENTER
    44 0001869F C8000000            <1>  enter 0, 0
    45 000186A3 4883E4F0            <1>  and rsp, ~15
 32377 000186A7 E8(00000000)            	call printf
 32378                                  	LEAVE
    49 000186AC C9                  <1>  leave
 32379                                  .Lstring_loop:
 32380                                  	; qword [rsp]: limit
 32381                                  	; qword [rsp + 8*1]: char *
 32382 000186AD 48833C2400              	cmp qword [rsp], 0
 32383 000186B2 0F84FD000000            	je .Lstring_end
 32384 000186B8 488B442408              	mov rax, qword [rsp + 8*1]
 32385 000186BD 8A00                    	mov al, byte [rax]
 32386 000186BF 4825FF000000            	and rax, 255
 32387 000186C5 3C07                    	cmp al, 7
 32388 000186C7 7468                            je .Lstring_char_7
 32389 000186C9 3C08                            cmp al, 8
 32390 000186CB 7470                            je .Lstring_char_8
 32391 000186CD 3C09                            cmp al, 9
 32392 000186CF 7478                            je .Lstring_char_9
 32393 000186D1 3C0A                            cmp al, 10
 32394 000186D3 0F847C000000                    je .Lstring_char_10
 32395 000186D9 3C0B                            cmp al, 11
 32396 000186DB 0F8480000000                    je .Lstring_char_11
 32397 000186E1 3C0C                            cmp al, 12
 32398 000186E3 0F8484000000                    je .Lstring_char_12
 32399 000186E9 3C0D                            cmp al, 13
 32400 000186EB 0F8488000000                    je .Lstring_char_13
 32401 000186F1 3C22                            cmp al, 34
 32402 000186F3 0F848C000000                    je .Lstring_char_34
 32403 000186F9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 32405 000186FB 3C20                            cmp al, ' '
 32406 000186FD 0F8CA0000000                    jl .Lstring_char_hex
 32407 00018703 48BF-                           mov rdi, fmt_string_char
 32407 00018705 [711A000000000000] 
 32408 0001870D 4889C6                          mov rsi, rax
 32409                                  .Lstring_char_emit:
 32410 00018710 B800000000                      mov rax, 0
 32411                                          ENTER
    44 00018715 C8000000            <1>  enter 0, 0
    45 00018719 4883E4F0            <1>  and rsp, ~15
 32412 0001871D E8(00000000)                    call printf
 32413                                          LEAVE
    49 00018722 C9                  <1>  leave
 32414 00018723 48FF0C24                        dec qword [rsp]
 32415 00018727 48FF442408                      inc qword [rsp + 8*1]
 32416 0001872C E97CFFFFFF                      jmp .Lstring_loop
 32417                                  
 32418                                  .Lstring_char_7:
 32419 00018731 48BF-                           mov rdi, fmt_string_char_7
 32419 00018733 [741A000000000000] 
 32420 0001873B EBD3                            jmp .Lstring_char_emit
 32421                                  
 32422                                  .Lstring_char_8:
 32423 0001873D 48BF-                           mov rdi, fmt_string_char_8
 32423 0001873F [771A000000000000] 
 32424 00018747 EBC7                            jmp .Lstring_char_emit
 32425                                          
 32426                                  .Lstring_char_9:
 32427 00018749 48BF-                           mov rdi, fmt_string_char_9
 32427 0001874B [7A1A000000000000] 
 32428 00018753 EBBB                            jmp .Lstring_char_emit
 32429                                  
 32430                                  .Lstring_char_10:
 32431 00018755 48BF-                           mov rdi, fmt_string_char_10
 32431 00018757 [7D1A000000000000] 
 32432 0001875F EBAF                            jmp .Lstring_char_emit
 32433                                  
 32434                                  .Lstring_char_11:
 32435 00018761 48BF-                           mov rdi, fmt_string_char_11
 32435 00018763 [801A000000000000] 
 32436 0001876B EBA3                            jmp .Lstring_char_emit
 32437                                  
 32438                                  .Lstring_char_12:
 32439 0001876D 48BF-                           mov rdi, fmt_string_char_12
 32439 0001876F [831A000000000000] 
 32440 00018777 EB97                            jmp .Lstring_char_emit
 32441                                  
 32442                                  .Lstring_char_13:
 32443 00018779 48BF-                           mov rdi, fmt_string_char_13
 32443 0001877B [861A000000000000] 
 32444 00018783 EB8B                            jmp .Lstring_char_emit
 32445                                  
 32446                                  .Lstring_char_34:
 32447 00018785 48BF-                           mov rdi, fmt_string_char_34
 32447 00018787 [891A000000000000] 
 32448 0001878F E97CFFFFFF                      jmp .Lstring_char_emit
 32449                                  
 32450                                  .Lstring_char_92:
 32451 00018794 48BF-                           mov rdi, fmt_string_char_92
 32451 00018796 [8C1A000000000000] 
 32452 0001879E E96DFFFFFF                      jmp .Lstring_char_emit
 32453                                  
 32454                                  .Lstring_char_hex:
 32455 000187A3 48BF-                           mov rdi, fmt_string_char_hex
 32455 000187A5 [8F1A000000000000] 
 32456 000187AD 4889C6                          mov rsi, rax
 32457 000187B0 E95BFFFFFF                      jmp .Lstring_char_emit        
 32458                                  
 32459                                  .Lstring_end:
 32460 000187B5 4883C410                	add rsp, 8 * 2
 32461 000187B9 48BF-                   	mov rdi, fmt_dquote
 32461 000187BB [6F1A000000000000] 
 32462 000187C3 EB33                    	jmp .Lemit
 32463                                  
 32464                                  .Lunknown_sexpr_type:
 32465 000187C5 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 32465 000187C7 [2A1A000000000000] 
 32466 000187CF 4825FF000000            	and rax, 255
 32467 000187D5 4889C2                  	mov rdx, rax
 32468 000187D8 4889F9                  	mov rcx, rdi
 32469 000187DB 488B3C25[00000000]      	mov rdi, qword [stderr]
 32470 000187E3 B800000000              	mov rax, 0
 32471                                          ENTER
    44 000187E8 C8000000            <1>  enter 0, 0
    45 000187EC 4883E4F0            <1>  and rsp, ~15
 32472 000187F0 E8(00000000)            	call fprintf
 32473                                          LEAVE
    49 000187F5 C9                  <1>  leave
 32474 000187F6 C9                              leave
 32475 000187F7 C3                              ret
 32476                                  
 32477                                  .Lemit:
 32478 000187F8 B800000000              	mov rax, 0
 32479                                          ENTER
    44 000187FD C8000000            <1>  enter 0, 0
    45 00018801 4883E4F0            <1>  and rsp, ~15
 32480 00018805 E8(00000000)            	call printf
 32481                                          LEAVE
    49 0001880A C9                  <1>  leave
 32482 0001880B EB00                    	jmp .Lend
 32483                                  
 32484                                  .Lend:
 32485                                  	LEAVE
    49 0001880D C9                  <1>  leave
 32486 0001880E C3                      	ret
 32487                                  
 32488                                  ;;; rdi: address of free variable
 32489                                  ;;; rsi: address of code-pointer
 32490                                  bind_primitive:
 32491 0001880F C8000000                        enter 0, 0
 32492 00018813 57                              push rdi
 32493 00018814 BF11000000                      mov rdi, (1 + 8 + 8)
 32494 00018819 E8C1F7FFFF                      call malloc
 32495 0001881E 5F                              pop rdi
 32496 0001881F C60004                          mov byte [rax], T_closure
 32497 00018822 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 32498 0001882A 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 32499 0001882E 488907                          mov qword [rdi], rax
 32500 00018831 48B8-                           mov rax, sob_void
 32500 00018833 [0000000000000000] 
 32501 0001883B C9                              leave
 32502 0001883C C3                              ret
 32503                                  
 32504                                  L_code_ptr_ash:
 32505 0001883D C8000000                        enter 0, 0
 32506 00018841 48837D1802                      cmp COUNT, 2
 32507 00018846 0F85A4140000                    jne L_error_arg_count_2
 32508 0001884C 488B7D20                        mov rdi, PARAM(0)
 32509                                          assert_integer(rdi)
    53 00018850 803F11              <1>  cmp byte [%1], %2
    54 00018853 0F8536150000        <1>  jne L_error_incorrect_type
 32510 00018859 488B4D28                        mov rcx, PARAM(1)
 32511                                          assert_integer(rcx)
    53 0001885D 803911              <1>  cmp byte [%1], %2
    54 00018860 0F8529150000        <1>  jne L_error_incorrect_type
 32512 00018866 488B7F01                        mov rdi, qword [rdi + 1]
 32513 0001886A 488B4901                        mov rcx, qword [rcx + 1]
 32514 0001886E 4883F900                        cmp rcx, 0
 32515 00018872 7C0F                            jl .L_negative
 32516                                  .L_loop_positive:
 32517 00018874 4883F900                        cmp rcx, 0
 32518 00018878 741B                            je .L_exit
 32519 0001887A 48D3E7                          sal rdi, cl
 32520 0001887D 48C1E908                        shr rcx, 8
 32521 00018881 EBF1                            jmp .L_loop_positive
 32522                                  .L_negative:
 32523 00018883 48F7D9                          neg rcx
 32524                                  .L_loop_negative:
 32525 00018886 4883F900                        cmp rcx, 0
 32526 0001888A 7409                            je .L_exit
 32527 0001888C 48D3FF                          sar rdi, cl
 32528 0001888F 48C1E908                        shr rcx, 8
 32529 00018893 EBF1                            jmp .L_loop_negative
 32530                                  .L_exit:
 32531 00018895 E870130000                      call make_integer
 32532 0001889A C9                              leave
 32533 0001889B C22000                          ret AND_KILL_FRAME(2)
 32534                                  
 32535                                  L_code_ptr_logand:
 32536 0001889E C8000000                        enter 0, 0
 32537 000188A2 48837D1802                      cmp COUNT, 2
 32538 000188A7 0F8543140000                    jne L_error_arg_count_2
 32539 000188AD 4C8B4520                        mov r8, PARAM(0)
 32540                                          assert_integer(r8)
    53 000188B1 41803811            <1>  cmp byte [%1], %2
    54 000188B5 0F85D4140000        <1>  jne L_error_incorrect_type
 32541 000188BB 4C8B4D28                        mov r9, PARAM(1)
 32542                                          assert_integer(r9)
    53 000188BF 41803911            <1>  cmp byte [%1], %2
    54 000188C3 0F85C6140000        <1>  jne L_error_incorrect_type
 32543 000188C9 498B7801                        mov rdi, qword [r8 + 1]
 32544 000188CD 49237901                        and rdi, qword [r9 + 1]
 32545 000188D1 E834130000                      call make_integer
 32546 000188D6 C9                              leave
 32547 000188D7 C22000                          ret AND_KILL_FRAME(2)
 32548                                  
 32549                                  L_code_ptr_logor:
 32550 000188DA C8000000                        enter 0, 0
 32551 000188DE 48837D1802                      cmp COUNT, 2
 32552 000188E3 0F8507140000                    jne L_error_arg_count_2
 32553 000188E9 4C8B4520                        mov r8, PARAM(0)
 32554                                          assert_integer(r8)
    53 000188ED 41803811            <1>  cmp byte [%1], %2
    54 000188F1 0F8598140000        <1>  jne L_error_incorrect_type
 32555 000188F7 4C8B4D28                        mov r9, PARAM(1)
 32556                                          assert_integer(r9)
    53 000188FB 41803911            <1>  cmp byte [%1], %2
    54 000188FF 0F858A140000        <1>  jne L_error_incorrect_type
 32557 00018905 498B7801                        mov rdi, qword [r8 + 1]
 32558 00018909 490B7901                        or rdi, qword [r9 + 1]
 32559 0001890D E8F8120000                      call make_integer
 32560 00018912 C9                              leave
 32561 00018913 C22000                          ret AND_KILL_FRAME(2)
 32562                                  
 32563                                  L_code_ptr_logxor:
 32564 00018916 C8000000                        enter 0, 0
 32565 0001891A 48837D1802                      cmp COUNT, 2
 32566 0001891F 0F85CB130000                    jne L_error_arg_count_2
 32567 00018925 4C8B4520                        mov r8, PARAM(0)
 32568                                          assert_integer(r8)
    53 00018929 41803811            <1>  cmp byte [%1], %2
    54 0001892D 0F855C140000        <1>  jne L_error_incorrect_type
 32569 00018933 4C8B4D28                        mov r9, PARAM(1)
 32570                                          assert_integer(r9)
    53 00018937 41803911            <1>  cmp byte [%1], %2
    54 0001893B 0F854E140000        <1>  jne L_error_incorrect_type
 32571 00018941 498B7801                        mov rdi, qword [r8 + 1]
 32572 00018945 49337901                        xor rdi, qword [r9 + 1]
 32573 00018949 E8BC120000                      call make_integer
 32574                                          LEAVE
    49 0001894E C9                  <1>  leave
 32575 0001894F C22000                          ret AND_KILL_FRAME(2)
 32576                                  
 32577                                  L_code_ptr_lognot:
 32578 00018952 C8000000                        enter 0, 0
 32579 00018956 48837D1801                      cmp COUNT, 1
 32580 0001895B 0F855A130000                    jne L_error_arg_count_1
 32581 00018961 4C8B4520                        mov r8, PARAM(0)
 32582                                          assert_integer(r8)
    53 00018965 41803811            <1>  cmp byte [%1], %2
    54 00018969 0F8520140000        <1>  jne L_error_incorrect_type
 32583 0001896F 498B7801                        mov rdi, qword [r8 + 1]
 32584 00018973 48F7D7                          not rdi
 32585 00018976 E88F120000                      call make_integer
 32586 0001897B C9                              leave
 32587 0001897C C21800                          ret AND_KILL_FRAME(1)
 32588                                  
 32589                                  L_code_ptr_bin_apply:
 32590 0001897F C8000000                        enter 0, 0
 32591                                          ;assuming we have 2 params - f and list to apply f on it
 32592 00018983 48837D1802                      cmp COUNT, 2
 32593 00018988 0F8C62130000                    jl L_error_arg_count_2    ; f and list
 32594 0001898E 4C8B4500                        mov r8, qword[rbp]      ;backup rbp  
 32595 00018992 4C8B4D08                        mov r9, qword[rbp +8]   ;backup ret addr
 32596 00018996 4C8B7D28                        mov r15, PARAM(1)         ;get list
 32597                                          assert_pair(r15)
    53 0001899A 41803F21            <1>  cmp byte [%1], %2
    54 0001899E 0F85EB130000        <1>  jne L_error_incorrect_type
 32598                                          
 32599 000189A4 488B4520                        mov rax, PARAM(0)         ;get f
 32600                                  
 32601                                          assert_closure(rax)        ; Count elements in the list
    53 000189A8 803804              <1>  cmp byte [%1], %2
    54 000189AB 0F85DE130000        <1>  jne L_error_incorrect_type
 32602 000189B1 41BA00000000                    mov r10, 0                ;counter
 32603 000189B7 4D89FB                          mov r11, r15 ; Is the list pointer
 32604                                         
 32605                                          
 32606                                  .count_loop:
 32607 000189BA 49813B[01000000]                cmp qword[r11], sob_nil ;checking if we done, it's a proper list
 32608 000189C1 7409                            je .write_over_frame
 32609 000189C3 49FFC2                          inc r10                   ; Increment list element count
 32610 000189C6 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11) ;getting the next element in s if error might be here
 32611 000189CA EBEE                            jmp .count_loop
 32612                                  
 32613                                          ;r10 list length
 32614                                  
 32615                                  .write_over_frame:
 32616 000189CC 4D89D3                          mov r11, r10 ;
 32617 000189CF 4983EB02                        sub r11, 2 ;how much to increase rbp for list argumetns
 32618 000189D3 49C1E303                        shl r11, 3 ;multiply by 8
 32619 000189D7 4C29DD                          sub rbp, r11 ;making space for list arguemtns
 32620                                  
 32621                                  .mov_env_rbp:
 32622 000189DA 4C894500                        mov qword[rbp], r8 ;restore old rbp ;now rbp points to the right position
 32623 000189DE 4C894D08                        mov qword[rbp + 8], r9 ;restore old ret addr
 32624 000189E2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 32625 000189E6 48895D10                        mov qword[rbp + 8*2], rbx ;save the env in the new frame
 32626 000189EA 4C895518                        mov qword[rbp+ 8*3], r10 ;save the number of params in the new frame
 32627 000189EE 41BB00000000                    mov r11, 0;
 32628                                          ;r10 is the originl list length
 32629                                  .copy_list_arguments:
 32630 000189F4 4D39D3                          cmp r11, r10 ;reached to the end of the list
 32631 000189F7 7412                            je .done_copy_list_arguments;
 32632 000189F9 4D8B6701                        mov r12, SOB_PAIR_CAR(r15) ;get the car of the list
 32633 000189FD 4E8964DD20                      mov qword PARAM(r11), r12 ;copy the car to the new frame
 32634 00018A02 4D8B7F09                        mov r15, SOB_PAIR_CDR(r15) ;get the cdr of the list
 32635 00018A06 49FFC3                          inc r11
 32636 00018A09 EBE9                            jmp .copy_list_arguments
 32637                                          ;;;rsp now points to the old ret?
 32638                                          ;;;rbp now points to the older rbp?
 32639                                  .done_copy_list_arguments:
 32640 00018A0B 488D6508                        lea rsp, [rbp + 8*1]
 32641 00018A0F C9                              leave
 32642 00018A10 FF6009                          jmp SOB_CLOSURE_CODE(rax) ;jump to the code of the closure
 32643                                  
 32644                                  
 32645                                  L_code_ptr_is_null:
 32646 00018A13 C8000000                        enter 0, 0
 32647 00018A17 48837D1801                      cmp COUNT, 1
 32648 00018A1C 0F8599120000                    jne L_error_arg_count_1
 32649 00018A22 488B4520                        mov rax, PARAM(0)
 32650 00018A26 803801                          cmp byte [rax], T_nil
 32651 00018A29 750C                            jne .L_false
 32652 00018A2B 48B8-                           mov rax, sob_boolean_true
 32652 00018A2D [0300000000000000] 
 32653 00018A35 EB0A                            jmp .L_end
 32654                                  .L_false:
 32655 00018A37 48B8-                           mov rax, sob_boolean_false
 32655 00018A39 [0200000000000000] 
 32656                                  .L_end:
 32657 00018A41 C9                              leave
 32658 00018A42 C21800                          ret AND_KILL_FRAME(1)
 32659                                  
 32660                                  L_code_ptr_is_pair:
 32661 00018A45 C8000000                        enter 0, 0
 32662 00018A49 48837D1801                      cmp COUNT, 1
 32663 00018A4E 0F8567120000                    jne L_error_arg_count_1
 32664 00018A54 488B4520                        mov rax, PARAM(0)
 32665 00018A58 803821                          cmp byte [rax], T_pair
 32666 00018A5B 750C                            jne .L_false
 32667 00018A5D 48B8-                           mov rax, sob_boolean_true
 32667 00018A5F [0300000000000000] 
 32668 00018A67 EB0A                            jmp .L_end
 32669                                  .L_false:
 32670 00018A69 48B8-                           mov rax, sob_boolean_false
 32670 00018A6B [0200000000000000] 
 32671                                  .L_end:
 32672 00018A73 C9                              leave
 32673 00018A74 C21800                          ret AND_KILL_FRAME(1)
 32674                                          
 32675                                  L_code_ptr_is_void:
 32676 00018A77 C8000000                        enter 0, 0
 32677 00018A7B 48837D1801                      cmp COUNT, 1
 32678 00018A80 0F8535120000                    jne L_error_arg_count_1
 32679 00018A86 488B4520                        mov rax, PARAM(0)
 32680 00018A8A 803800                          cmp byte [rax], T_void
 32681 00018A8D 750C                            jne .L_false
 32682 00018A8F 48B8-                           mov rax, sob_boolean_true
 32682 00018A91 [0300000000000000] 
 32683 00018A99 EB0A                            jmp .L_end
 32684                                  .L_false:
 32685 00018A9B 48B8-                           mov rax, sob_boolean_false
 32685 00018A9D [0200000000000000] 
 32686                                  .L_end:
 32687 00018AA5 C9                              leave
 32688 00018AA6 C21800                          ret AND_KILL_FRAME(1)
 32689                                  
 32690                                  L_code_ptr_is_char:
 32691 00018AA9 C8000000                        enter 0, 0
 32692 00018AAD 48837D1801                      cmp COUNT, 1
 32693 00018AB2 0F8503120000                    jne L_error_arg_count_1
 32694 00018AB8 488B4520                        mov rax, PARAM(0)
 32695 00018ABC 803802                          cmp byte [rax], T_char
 32696 00018ABF 750C                            jne .L_false
 32697 00018AC1 48B8-                           mov rax, sob_boolean_true
 32697 00018AC3 [0300000000000000] 
 32698 00018ACB EB0A                            jmp .L_end
 32699                                  .L_false:
 32700 00018ACD 48B8-                           mov rax, sob_boolean_false
 32700 00018ACF [0200000000000000] 
 32701                                  .L_end:
 32702 00018AD7 C9                              leave
 32703 00018AD8 C21800                          ret AND_KILL_FRAME(1)
 32704                                  
 32705                                  L_code_ptr_is_string:
 32706 00018ADB C8000000                        enter 0, 0
 32707 00018ADF 48837D1801                      cmp COUNT, 1
 32708 00018AE4 0F85D1110000                    jne L_error_arg_count_1
 32709 00018AEA 488B4520                        mov rax, PARAM(0)
 32710 00018AEE 803803                          cmp byte [rax], T_string
 32711 00018AF1 750C                            jne .L_false
 32712 00018AF3 48B8-                           mov rax, sob_boolean_true
 32712 00018AF5 [0300000000000000] 
 32713 00018AFD EB0A                            jmp .L_end
 32714                                  .L_false:
 32715 00018AFF 48B8-                           mov rax, sob_boolean_false
 32715 00018B01 [0200000000000000] 
 32716                                  .L_end:
 32717 00018B09 C9                              leave
 32718 00018B0A C21800                          ret AND_KILL_FRAME(1)
 32719                                  
 32720                                  L_code_ptr_is_symbol:
 32721 00018B0D C8000000                        enter 0, 0
 32722 00018B11 48837D1801                      cmp COUNT, 1
 32723 00018B16 0F859F110000                    jne L_error_arg_count_1
 32724 00018B1C 4C8B4520                        mov r8, PARAM(0)
 32725 00018B20 41802040                        and byte [r8], T_symbol
 32726 00018B24 740C                            jz .L_false
 32727 00018B26 48B8-                           mov rax, sob_boolean_true
 32727 00018B28 [0300000000000000] 
 32728 00018B30 EB0A                            jmp .L_exit
 32729                                  .L_false:
 32730 00018B32 48B8-                           mov rax, sob_boolean_false
 32730 00018B34 [0200000000000000] 
 32731                                  .L_exit:
 32732 00018B3C C9                              leave
 32733 00018B3D C21800                          ret AND_KILL_FRAME(1)
 32734                                  
 32735                                  L_code_ptr_is_uninterned_symbol:
 32736 00018B40 C8000000                        enter 0, 0
 32737 00018B44 48837D1801                      cmp COUNT, 1
 32738 00018B49 0F856C110000                    jne L_error_arg_count_1
 32739 00018B4F 4C8B4520                        mov r8, PARAM(0)
 32740 00018B53 41803842                        cmp byte [r8], T_uninterned_symbol
 32741 00018B57 750C                            jne .L_false
 32742 00018B59 48B8-                           mov rax, sob_boolean_true
 32742 00018B5B [0300000000000000] 
 32743 00018B63 EB0A                            jmp .L_exit
 32744                                  .L_false:
 32745 00018B65 48B8-                           mov rax, sob_boolean_false
 32745 00018B67 [0200000000000000] 
 32746                                  .L_exit:
 32747 00018B6F C9                              leave
 32748 00018B70 C21800                          ret AND_KILL_FRAME(1)
 32749                                  
 32750                                  L_code_ptr_is_interned_symbol:
 32751 00018B73 C8000000                        enter 0, 0
 32752 00018B77 48837D1801                      cmp COUNT, 1
 32753 00018B7C 0F8539110000                    jne L_error_arg_count_1
 32754 00018B82 488B4520                        mov rax, PARAM(0)
 32755 00018B86 803841                          cmp byte [rax], T_interned_symbol
 32756 00018B89 750C                            jne .L_false
 32757 00018B8B 48B8-                           mov rax, sob_boolean_true
 32757 00018B8D [0300000000000000] 
 32758 00018B95 EB0A                            jmp .L_end
 32759                                  .L_false:
 32760 00018B97 48B8-                           mov rax, sob_boolean_false
 32760 00018B99 [0200000000000000] 
 32761                                  .L_end:
 32762 00018BA1 C9                              leave
 32763 00018BA2 C21800                          ret AND_KILL_FRAME(1)
 32764                                  
 32765                                  L_code_ptr_gensym:
 32766 00018BA5 C8000000                        enter 0, 0
 32767 00018BA9 48837D1800                      cmp COUNT, 0
 32768 00018BAE 0F85D2100000                    jne L_error_arg_count_0
 32769 00018BB4 48FF0425[951A0000]              inc qword [gensym_count]
 32770 00018BBC BF09000000                      mov rdi, (1 + 8)
 32771 00018BC1 E819F4FFFF                      call malloc
 32772 00018BC6 C60042                          mov byte [rax], T_uninterned_symbol
 32773 00018BC9 488B0C25[951A0000]              mov rcx, qword [gensym_count]
 32774 00018BD1 48894801                        mov qword [rax + 1], rcx
 32775 00018BD5 C9                              leave
 32776 00018BD6 C21000                          ret AND_KILL_FRAME(0)
 32777                                  
 32778                                  L_code_ptr_is_vector:
 32779 00018BD9 C8000000                        enter 0, 0
 32780 00018BDD 48837D1801                      cmp COUNT, 1
 32781 00018BE2 0F85D3100000                    jne L_error_arg_count_1
 32782 00018BE8 488B4520                        mov rax, PARAM(0)
 32783 00018BEC 803822                          cmp byte [rax], T_vector
 32784 00018BEF 750C                            jne .L_false
 32785 00018BF1 48B8-                           mov rax, sob_boolean_true
 32785 00018BF3 [0300000000000000] 
 32786 00018BFB EB0A                            jmp .L_end
 32787                                  .L_false:
 32788 00018BFD 48B8-                           mov rax, sob_boolean_false
 32788 00018BFF [0200000000000000] 
 32789                                  .L_end:
 32790 00018C07 C9                              leave
 32791 00018C08 C21800                          ret AND_KILL_FRAME(1)
 32792                                  
 32793                                  L_code_ptr_is_closure:
 32794 00018C0B C8000000                        enter 0, 0
 32795 00018C0F 48837D1801                      cmp COUNT, 1
 32796 00018C14 0F85A1100000                    jne L_error_arg_count_1
 32797 00018C1A 488B4520                        mov rax, PARAM(0)
 32798 00018C1E 803804                          cmp byte [rax], T_closure
 32799 00018C21 750C                            jne .L_false
 32800 00018C23 48B8-                           mov rax, sob_boolean_true
 32800 00018C25 [0300000000000000] 
 32801 00018C2D EB0A                            jmp .L_end
 32802                                  .L_false:
 32803 00018C2F 48B8-                           mov rax, sob_boolean_false
 32803 00018C31 [0200000000000000] 
 32804                                  .L_end:
 32805 00018C39 C9                              leave
 32806 00018C3A C21800                          ret AND_KILL_FRAME(1)
 32807                                  
 32808                                  L_code_ptr_is_real:
 32809 00018C3D C8000000                        enter 0, 0
 32810 00018C41 48837D1801                      cmp COUNT, 1
 32811 00018C46 0F856F100000                    jne L_error_arg_count_1
 32812 00018C4C 488B4520                        mov rax, PARAM(0)
 32813 00018C50 803813                          cmp byte [rax], T_real
 32814 00018C53 750C                            jne .L_false
 32815 00018C55 48B8-                           mov rax, sob_boolean_true
 32815 00018C57 [0300000000000000] 
 32816 00018C5F EB0A                            jmp .L_end
 32817                                  .L_false:
 32818 00018C61 48B8-                           mov rax, sob_boolean_false
 32818 00018C63 [0200000000000000] 
 32819                                  .L_end:
 32820 00018C6B C9                              leave
 32821 00018C6C C21800                          ret AND_KILL_FRAME(1)
 32822                                  
 32823                                  L_code_ptr_is_fraction:
 32824 00018C6F C8000000                        enter 0, 0
 32825 00018C73 48837D1801                      cmp COUNT, 1
 32826 00018C78 0F853D100000                    jne L_error_arg_count_1
 32827 00018C7E 488B4520                        mov rax, PARAM(0)
 32828 00018C82 803812                          cmp byte [rax], T_fraction
 32829 00018C85 750C                            jne .L_false
 32830 00018C87 48B8-                           mov rax, sob_boolean_true
 32830 00018C89 [0300000000000000] 
 32831 00018C91 EB0A                            jmp .L_end
 32832                                  .L_false:
 32833 00018C93 48B8-                           mov rax, sob_boolean_false
 32833 00018C95 [0200000000000000] 
 32834                                  .L_end:
 32835 00018C9D C9                              leave
 32836 00018C9E C21800                          ret AND_KILL_FRAME(1)
 32837                                  
 32838                                  L_code_ptr_is_boolean:
 32839 00018CA1 C8000000                        enter 0, 0
 32840 00018CA5 48837D1801                      cmp COUNT, 1
 32841 00018CAA 0F850B100000                    jne L_error_arg_count_1
 32842 00018CB0 488B4520                        mov rax, PARAM(0)
 32843 00018CB4 8A18                            mov bl, byte [rax]
 32844 00018CB6 80E308                          and bl, T_boolean
 32845 00018CB9 740C                            je .L_false
 32846 00018CBB 48B8-                           mov rax, sob_boolean_true
 32846 00018CBD [0300000000000000] 
 32847 00018CC5 EB0A                            jmp .L_end
 32848                                  .L_false:
 32849 00018CC7 48B8-                           mov rax, sob_boolean_false
 32849 00018CC9 [0200000000000000] 
 32850                                  .L_end:
 32851 00018CD1 C9                              leave
 32852 00018CD2 C21800                          ret AND_KILL_FRAME(1)
 32853                                          
 32854                                  L_code_ptr_is_boolean_false:
 32855 00018CD5 C8000000                        enter 0, 0
 32856 00018CD9 48837D1801                      cmp COUNT, 1
 32857 00018CDE 0F85D70F0000                    jne L_error_arg_count_1
 32858 00018CE4 488B4520                        mov rax, PARAM(0)
 32859 00018CE8 8A18                            mov bl, byte [rax]
 32860 00018CEA 80FB09                          cmp bl, T_boolean_false
 32861 00018CED 750C                            jne .L_false
 32862 00018CEF 48B8-                           mov rax, sob_boolean_true
 32862 00018CF1 [0300000000000000] 
 32863 00018CF9 EB0A                            jmp .L_end
 32864                                  .L_false:
 32865 00018CFB 48B8-                           mov rax, sob_boolean_false
 32865 00018CFD [0200000000000000] 
 32866                                  .L_end:
 32867 00018D05 C9                              leave
 32868 00018D06 C21800                          ret AND_KILL_FRAME(1)
 32869                                  
 32870                                  L_code_ptr_is_boolean_true:
 32871 00018D09 C8000000                        enter 0, 0
 32872 00018D0D 48837D1801                      cmp COUNT, 1
 32873 00018D12 0F85A30F0000                    jne L_error_arg_count_1
 32874 00018D18 488B4520                        mov rax, PARAM(0)
 32875 00018D1C 8A18                            mov bl, byte [rax]
 32876 00018D1E 80FB0A                          cmp bl, T_boolean_true
 32877 00018D21 750C                            jne .L_false
 32878 00018D23 48B8-                           mov rax, sob_boolean_true
 32878 00018D25 [0300000000000000] 
 32879 00018D2D EB0A                            jmp .L_end
 32880                                  .L_false:
 32881 00018D2F 48B8-                           mov rax, sob_boolean_false
 32881 00018D31 [0200000000000000] 
 32882                                  .L_end:
 32883 00018D39 C9                              leave
 32884 00018D3A C21800                          ret AND_KILL_FRAME(1)
 32885                                  
 32886                                  L_code_ptr_is_number:
 32887 00018D3D C8000000                        enter 0, 0
 32888 00018D41 48837D1801                      cmp COUNT, 1
 32889 00018D46 0F856F0F0000                    jne L_error_arg_count_1
 32890 00018D4C 488B4520                        mov rax, PARAM(0)
 32891 00018D50 8A18                            mov bl, byte [rax]
 32892 00018D52 80E310                          and bl, T_number
 32893 00018D55 740C                            jz .L_false
 32894 00018D57 48B8-                           mov rax, sob_boolean_true
 32894 00018D59 [0300000000000000] 
 32895 00018D61 EB0A                            jmp .L_end
 32896                                  .L_false:
 32897 00018D63 48B8-                           mov rax, sob_boolean_false
 32897 00018D65 [0200000000000000] 
 32898                                  .L_end:
 32899 00018D6D C9                              leave
 32900 00018D6E C21800                          ret AND_KILL_FRAME(1)
 32901                                          
 32902                                  L_code_ptr_is_collection:
 32903 00018D71 C8000000                        enter 0, 0
 32904 00018D75 48837D1801                      cmp COUNT, 1
 32905 00018D7A 0F853B0F0000                    jne L_error_arg_count_1
 32906 00018D80 488B4520                        mov rax, PARAM(0)
 32907 00018D84 8A18                            mov bl, byte [rax]
 32908 00018D86 80E320                          and bl, T_collection
 32909 00018D89 740C                            je .L_false
 32910 00018D8B 48B8-                           mov rax, sob_boolean_true
 32910 00018D8D [0300000000000000] 
 32911 00018D95 EB0A                            jmp .L_end
 32912                                  .L_false:
 32913 00018D97 48B8-                           mov rax, sob_boolean_false
 32913 00018D99 [0200000000000000] 
 32914                                  .L_end:
 32915 00018DA1 C9                              leave
 32916 00018DA2 C21800                          ret AND_KILL_FRAME(1)
 32917                                  
 32918                                  L_code_ptr_cons:
 32919 00018DA5 C8000000                        enter 0, 0
 32920 00018DA9 48837D1802                      cmp COUNT, 2
 32921 00018DAE 0F853C0F0000                    jne L_error_arg_count_2
 32922 00018DB4 BF11000000                      mov rdi, (1 + 8 + 8)
 32923 00018DB9 E821F2FFFF                      call malloc
 32924 00018DBE C60021                          mov byte [rax], T_pair
 32925 00018DC1 488B5D20                        mov rbx, PARAM(0)
 32926 00018DC5 48895801                        mov SOB_PAIR_CAR(rax), rbx
 32927 00018DC9 488B5D28                        mov rbx, PARAM(1)
 32928 00018DCD 48895809                        mov SOB_PAIR_CDR(rax), rbx
 32929 00018DD1 C9                              leave
 32930 00018DD2 C22000                          ret AND_KILL_FRAME(2)
 32931                                  
 32932                                  L_code_ptr_display_sexpr:
 32933 00018DD5 C8000000                        enter 0, 0
 32934 00018DD9 48837D1801                      cmp COUNT, 1
 32935 00018DDE 0F85D70E0000                    jne L_error_arg_count_1
 32936 00018DE4 488B7D20                        mov rdi, PARAM(0)
 32937 00018DE8 E873F4FFFF                      call print_sexpr
 32938 00018DED 48B8-                           mov rax, sob_void
 32938 00018DEF [0000000000000000] 
 32939 00018DF7 C9                              leave
 32940 00018DF8 C21800                          ret AND_KILL_FRAME(1)
 32941                                  
 32942                                  L_code_ptr_write_char:
 32943 00018DFB C8000000                        enter 0, 0
 32944 00018DFF 48837D1801                      cmp COUNT, 1
 32945 00018E04 0F85B10E0000                    jne L_error_arg_count_1
 32946 00018E0A 488B4520                        mov rax, PARAM(0)
 32947                                          assert_char(rax)
    53 00018E0E 803802              <1>  cmp byte [%1], %2
    54 00018E11 0F85780F0000        <1>  jne L_error_incorrect_type
 32948 00018E17 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 32949 00018E1A 4825FF000000                    and rax, 255
 32950 00018E20 48BF-                           mov rdi, fmt_char
 32950 00018E22 [9D1A000000000000] 
 32951 00018E2A 4889C6                          mov rsi, rax
 32952 00018E2D B800000000                      mov rax, 0
 32953                                          ENTER
    44 00018E32 C8000000            <1>  enter 0, 0
    45 00018E36 4883E4F0            <1>  and rsp, ~15
 32954 00018E3A E8(00000000)                    call printf
 32955                                          LEAVE
    49 00018E3F C9                  <1>  leave
 32956 00018E40 48B8-                           mov rax, sob_void
 32956 00018E42 [0000000000000000] 
 32957 00018E4A C9                              leave
 32958 00018E4B C21800                          ret AND_KILL_FRAME(1)
 32959                                  
 32960                                  L_code_ptr_car:
 32961 00018E4E C8000000                        enter 0, 0
 32962 00018E52 48837D1801                      cmp COUNT, 1
 32963 00018E57 0F855E0E0000                    jne L_error_arg_count_1
 32964 00018E5D 488B4520                        mov rax, PARAM(0)
 32965                                          assert_pair(rax)
    53 00018E61 803821              <1>  cmp byte [%1], %2
    54 00018E64 0F85250F0000        <1>  jne L_error_incorrect_type
 32966 00018E6A 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 32967 00018E6E C9                              leave
 32968 00018E6F C21800                          ret AND_KILL_FRAME(1)
 32969                                          
 32970                                  L_code_ptr_cdr:
 32971 00018E72 C8000000                        enter 0, 0
 32972 00018E76 48837D1801                      cmp COUNT, 1
 32973 00018E7B 0F853A0E0000                    jne L_error_arg_count_1
 32974 00018E81 488B4520                        mov rax, PARAM(0)
 32975                                          assert_pair(rax)
    53 00018E85 803821              <1>  cmp byte [%1], %2
    54 00018E88 0F85010F0000        <1>  jne L_error_incorrect_type
 32976 00018E8E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 32977 00018E92 C9                              leave
 32978 00018E93 C21800                          ret AND_KILL_FRAME(1)
 32979                                          
 32980                                  L_code_ptr_string_length:
 32981 00018E96 C8000000                        enter 0, 0
 32982 00018E9A 48837D1801                      cmp COUNT, 1
 32983 00018E9F 0F85160E0000                    jne L_error_arg_count_1
 32984 00018EA5 488B4520                        mov rax, PARAM(0)
 32985                                          assert_string(rax)
    53 00018EA9 803803              <1>  cmp byte [%1], %2
    54 00018EAC 0F85DD0E0000        <1>  jne L_error_incorrect_type
 32986 00018EB2 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 32987 00018EB6 E84F0D0000                      call make_integer
 32988 00018EBB C9                              leave
 32989 00018EBC C21800                          ret AND_KILL_FRAME(1)
 32990                                  
 32991                                  L_code_ptr_vector_length:
 32992 00018EBF C8000000                        enter 0, 0
 32993 00018EC3 48837D1801                      cmp COUNT, 1
 32994 00018EC8 0F85ED0D0000                    jne L_error_arg_count_1
 32995 00018ECE 488B4520                        mov rax, PARAM(0)
 32996                                          assert_vector(rax)
    53 00018ED2 803822              <1>  cmp byte [%1], %2
    54 00018ED5 0F85B40E0000        <1>  jne L_error_incorrect_type
 32997 00018EDB 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 32998 00018EDF E8260D0000                      call make_integer
 32999 00018EE4 C9                              leave
 33000 00018EE5 C21800                          ret AND_KILL_FRAME(1)
 33001                                  
 33002                                  L_code_ptr_real_to_integer:
 33003 00018EE8 C8000000                        enter 0, 0
 33004 00018EEC 48837D1801                      cmp COUNT, 1
 33005 00018EF1 0F85C40D0000                    jne L_error_arg_count_1
 33006 00018EF7 488B5D20                        mov rbx, PARAM(0)
 33007                                          assert_real(rbx)
    53 00018EFB 803B13              <1>  cmp byte [%1], %2
    54 00018EFE 0F858B0E0000        <1>  jne L_error_incorrect_type
 33008 00018F04 F20F104301                      movsd xmm0, qword [rbx + 1]
 33009 00018F09 F2480F2CF8                      cvttsd2si rdi, xmm0
 33010 00018F0E E8F70C0000                      call make_integer
 33011 00018F13 C9                              leave
 33012 00018F14 C21800                          ret AND_KILL_FRAME(1)
 33013                                  
 33014                                  L_code_ptr_exit:
 33015 00018F17 C8000000                        enter 0, 0
 33016 00018F1B 48837D1800                      cmp COUNT, 0
 33017 00018F20 0F85600D0000                    jne L_error_arg_count_0
 33018 00018F26 B800000000                      mov rax, 0
 33019 00018F2B E8(00000000)                    call exit
 33020                                  
 33021                                  L_code_ptr_integer_to_real:
 33022 00018F30 C8000000                        enter 0, 0
 33023 00018F34 48837D1801                      cmp COUNT, 1
 33024 00018F39 0F857C0D0000                    jne L_error_arg_count_1
 33025 00018F3F 488B4520                        mov rax, PARAM(0)
 33026                                          assert_integer(rax)
    53 00018F43 803811              <1>  cmp byte [%1], %2
    54 00018F46 0F85430E0000        <1>  jne L_error_incorrect_type
 33027 00018F4C FF7001                          push qword [rax + 1]
 33028 00018F4F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 33029 00018F55 E8980C0000                      call make_real
 33030 00018F5A C9                              leave
 33031 00018F5B C21800                          ret AND_KILL_FRAME(1)
 33032                                  
 33033                                  L_code_ptr_fraction_to_real:
 33034 00018F5E C8000000                        enter 0, 0
 33035 00018F62 48837D1801                      cmp COUNT, 1
 33036 00018F67 0F854E0D0000                    jne L_error_arg_count_1
 33037 00018F6D 488B4520                        mov rax, PARAM(0)
 33038                                          assert_fraction(rax)
    53 00018F71 803812              <1>  cmp byte [%1], %2
    54 00018F74 0F85150E0000        <1>  jne L_error_incorrect_type
 33039 00018F7A FF7001                          push qword [rax + 1]
 33040 00018F7D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 33041 00018F83 FF7009                          push qword [rax + 1 + 8]
 33042 00018F86 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 33043 00018F8C F20F5EC1                        divsd xmm0, xmm1
 33044 00018F90 E85D0C0000                      call make_real
 33045 00018F95 C9                              leave
 33046 00018F96 C21800                          ret AND_KILL_FRAME(1)
 33047                                  
 33048                                  L_code_ptr_char_to_integer:
 33049 00018F99 C8000000                        enter 0, 0
 33050 00018F9D 48837D1801                      cmp COUNT, 1
 33051 00018FA2 0F85130D0000                    jne L_error_arg_count_1
 33052 00018FA8 488B4520                        mov rax, PARAM(0)
 33053                                          assert_char(rax)
    53 00018FAC 803802              <1>  cmp byte [%1], %2
    54 00018FAF 0F85DA0D0000        <1>  jne L_error_incorrect_type
 33054 00018FB5 8A4001                          mov al, byte [rax + 1]
 33055 00018FB8 4825FF000000                    and rax, 255
 33056 00018FBE 4889C7                          mov rdi, rax
 33057 00018FC1 E8440C0000                      call make_integer
 33058 00018FC6 C9                              leave
 33059 00018FC7 C21800                          ret AND_KILL_FRAME(1)
 33060                                  
 33061                                  L_code_ptr_integer_to_fraction:
 33062 00018FCA C8000000                        enter 0, 0
 33063 00018FCE 48837D1801                      cmp COUNT, 1
 33064 00018FD3 0F85E20C0000                    jne L_error_arg_count_1
 33065 00018FD9 4C8B4520                        mov r8, PARAM(0)
 33066                                          assert_integer(r8)
    53 00018FDD 41803811            <1>  cmp byte [%1], %2
    54 00018FE1 0F85A80D0000        <1>  jne L_error_incorrect_type
 33067 00018FE7 BF11000000                      mov rdi, (1 + 8 + 8)
 33068 00018FEC E8EEEFFFFF                      call malloc
 33069 00018FF1 498B5801                        mov rbx, qword [r8 + 1]
 33070 00018FF5 C60012                          mov byte [rax], T_fraction
 33071 00018FF8 48895801                        mov qword [rax + 1], rbx
 33072 00018FFC 48C7400901000000                mov qword [rax + 1 + 8], 1
 33073 00019004 C9                              leave
 33074 00019005 C21800                          ret AND_KILL_FRAME(1)
 33075                                  
 33076                                  L_code_ptr_integer_to_char:
 33077 00019008 C8000000                        enter 0, 0
 33078 0001900C 48837D1801                      cmp COUNT, 1
 33079 00019011 0F85A40C0000                    jne L_error_arg_count_1
 33080 00019017 488B4520                        mov rax, PARAM(0)
 33081                                          assert_integer(rax)
    53 0001901B 803811              <1>  cmp byte [%1], %2
    54 0001901E 0F856B0D0000        <1>  jne L_error_incorrect_type
 33082 00019024 488B5801                        mov rbx, qword [rax + 1]
 33083 00019028 4883FB00                        cmp rbx, 0
 33084 0001902C 0F8EF20B0000                    jle L_error_integer_range
 33085 00019032 4881FB00010000                  cmp rbx, 256
 33086 00019039 0F8DE50B0000                    jge L_error_integer_range
 33087 0001903F BF02000000                      mov rdi, (1 + 1)
 33088 00019044 E896EFFFFF                      call malloc
 33089 00019049 C60002                          mov byte [rax], T_char
 33090 0001904C 885801                          mov byte [rax + 1], bl
 33091 0001904F C9                              leave
 33092 00019050 C21800                          ret AND_KILL_FRAME(1)
 33093                                  
 33094                                  L_code_ptr_trng:
 33095 00019053 C8000000                        enter 0, 0
 33096 00019057 48837D1800                      cmp COUNT, 0
 33097 0001905C 0F85240C0000                    jne L_error_arg_count_0
 33098 00019062 480FC7F7                        rdrand rdi
 33099 00019066 48D1EF                          shr rdi, 1
 33100 00019069 E89C0B0000                      call make_integer
 33101 0001906E C9                              leave
 33102 0001906F C21000                          ret AND_KILL_FRAME(0)
 33103                                  
 33104                                  L_code_ptr_is_zero:
 33105 00019072 C8000000                        enter 0, 0
 33106 00019076 48837D1801                      cmp COUNT, 1
 33107 0001907B 0F853A0C0000                    jne L_error_arg_count_1
 33108 00019081 488B4520                        mov rax, PARAM(0)
 33109 00019085 803811                          cmp byte [rax], T_integer
 33110 00019088 740F                            je .L_integer
 33111 0001908A 803812                          cmp byte [rax], T_fraction
 33112 0001908D 7413                            je .L_fraction
 33113 0001908F 803813                          cmp byte [rax], T_real
 33114 00019092 7417                            je .L_real
 33115 00019094 E9F60C0000                      jmp L_error_incorrect_type
 33116                                  .L_integer:
 33117 00019099 4883780100                      cmp qword [rax + 1], 0
 33118 0001909E 7429                            je .L_zero
 33119 000190A0 EB1B                            jmp .L_not_zero
 33120                                  .L_fraction:
 33121 000190A2 4883780100                      cmp qword [rax + 1], 0
 33122 000190A7 7420                            je .L_zero
 33123 000190A9 EB12                            jmp .L_not_zero
 33124                                  .L_real:
 33125 000190AB 660FEFC0                        pxor xmm0, xmm0
 33126 000190AF FF7001                          push qword [rax + 1]
 33127 000190B2 F20F100C24                      movsd xmm1, qword [rsp]
 33128 000190B7 660F2EC1                        ucomisd xmm0, xmm1
 33129 000190BB 740C                            je .L_zero
 33130                                  .L_not_zero:
 33131 000190BD 48B8-                           mov rax, sob_boolean_false
 33131 000190BF [0200000000000000] 
 33132 000190C7 EB0A                            jmp .L_end
 33133                                  .L_zero:
 33134 000190C9 48B8-                           mov rax, sob_boolean_true
 33134 000190CB [0300000000000000] 
 33135                                  .L_end:
 33136 000190D3 C9                              leave
 33137 000190D4 C21800                          ret AND_KILL_FRAME(1)
 33138                                  
 33139                                  L_code_ptr_is_integer:
 33140 000190D7 C8000000                        enter 0, 0
 33141 000190DB 48837D1801                      cmp COUNT, 1
 33142 000190E0 0F85D50B0000                    jne L_error_arg_count_1
 33143 000190E6 488B4520                        mov rax, PARAM(0)
 33144 000190EA 803811                          cmp byte [rax], T_integer
 33145 000190ED 750C                            jne .L_false
 33146 000190EF 48B8-                           mov rax, sob_boolean_true
 33146 000190F1 [0300000000000000] 
 33147 000190F9 EB0A                            jmp .L_exit
 33148                                  .L_false:
 33149 000190FB 48B8-                           mov rax, sob_boolean_false
 33149 000190FD [0200000000000000] 
 33150                                  .L_exit:
 33151 00019105 C9                              leave
 33152 00019106 C21800                          ret AND_KILL_FRAME(1)
 33153                                  
 33154                                  L_code_ptr_raw_bin_add_rr:
 33155 00019109 C8000000                        enter 0, 0
 33156 0001910D 48837D1802                      cmp COUNT, 2
 33157 00019112 0F85D80B0000                    jne L_error_arg_count_2
 33158 00019118 488B5D20                        mov rbx, PARAM(0)
 33159                                          assert_real(rbx)
    53 0001911C 803B13              <1>  cmp byte [%1], %2
    54 0001911F 0F856A0C0000        <1>  jne L_error_incorrect_type
 33160 00019125 488B4D28                        mov rcx, PARAM(1)
 33161                                          assert_real(rcx)
    53 00019129 803913              <1>  cmp byte [%1], %2
    54 0001912C 0F855D0C0000        <1>  jne L_error_incorrect_type
 33162 00019132 F20F104301                      movsd xmm0, qword [rbx + 1]
 33163 00019137 F20F104901                      movsd xmm1, qword [rcx + 1]
 33164 0001913C F20F58C1                        addsd xmm0, xmm1
 33165 00019140 E8AD0A0000                      call make_real
 33166 00019145 C9                              leave
 33167 00019146 C22000                          ret AND_KILL_FRAME(2)
 33168                                  
 33169                                  L_code_ptr_raw_bin_sub_rr:
 33170 00019149 C8000000                        enter 0, 0
 33171 0001914D 48837D1802                      cmp COUNT, 2
 33172 00019152 0F85980B0000                    jne L_error_arg_count_2
 33173 00019158 488B5D20                        mov rbx, PARAM(0)
 33174                                          assert_real(rbx)
    53 0001915C 803B13              <1>  cmp byte [%1], %2
    54 0001915F 0F852A0C0000        <1>  jne L_error_incorrect_type
 33175 00019165 488B4D28                        mov rcx, PARAM(1)
 33176                                          assert_real(rcx)
    53 00019169 803913              <1>  cmp byte [%1], %2
    54 0001916C 0F851D0C0000        <1>  jne L_error_incorrect_type
 33177 00019172 F20F104301                      movsd xmm0, qword [rbx + 1]
 33178 00019177 F20F104901                      movsd xmm1, qword [rcx + 1]
 33179 0001917C F20F5CC1                        subsd xmm0, xmm1
 33180 00019180 E86D0A0000                      call make_real
 33181 00019185 C9                              leave
 33182 00019186 C22000                          ret AND_KILL_FRAME(2)
 33183                                  
 33184                                  L_code_ptr_raw_bin_mul_rr:
 33185 00019189 C8000000                        enter 0, 0
 33186 0001918D 48837D1802                      cmp COUNT, 2
 33187 00019192 0F85580B0000                    jne L_error_arg_count_2
 33188 00019198 488B5D20                        mov rbx, PARAM(0)
 33189                                          assert_real(rbx)
    53 0001919C 803B13              <1>  cmp byte [%1], %2
    54 0001919F 0F85EA0B0000        <1>  jne L_error_incorrect_type
 33190 000191A5 488B4D28                        mov rcx, PARAM(1)
 33191                                          assert_real(rcx)
    53 000191A9 803913              <1>  cmp byte [%1], %2
    54 000191AC 0F85DD0B0000        <1>  jne L_error_incorrect_type
 33192 000191B2 F20F104301                      movsd xmm0, qword [rbx + 1]
 33193 000191B7 F20F104901                      movsd xmm1, qword [rcx + 1]
 33194 000191BC F20F59C1                        mulsd xmm0, xmm1
 33195 000191C0 E82D0A0000                      call make_real
 33196 000191C5 C9                              leave
 33197 000191C6 C22000                          ret AND_KILL_FRAME(2)
 33198                                  
 33199                                  L_code_ptr_raw_bin_div_rr:
 33200 000191C9 C8000000                        enter 0, 0
 33201 000191CD 48837D1802                      cmp COUNT, 2
 33202 000191D2 0F85180B0000                    jne L_error_arg_count_2
 33203 000191D8 488B5D20                        mov rbx, PARAM(0)
 33204                                          assert_real(rbx)
    53 000191DC 803B13              <1>  cmp byte [%1], %2
    54 000191DF 0F85AA0B0000        <1>  jne L_error_incorrect_type
 33205 000191E5 488B4D28                        mov rcx, PARAM(1)
 33206                                          assert_real(rcx)
    53 000191E9 803913              <1>  cmp byte [%1], %2
    54 000191EC 0F859D0B0000        <1>  jne L_error_incorrect_type
 33207 000191F2 F20F104301                      movsd xmm0, qword [rbx + 1]
 33208 000191F7 F20F104901                      movsd xmm1, qword [rcx + 1]
 33209 000191FC 660FEFD2                        pxor xmm2, xmm2
 33210 00019200 660F2ECA                        ucomisd xmm1, xmm2
 33211 00019204 0F84B60B0000                    je L_error_division_by_zero
 33212 0001920A F20F5EC1                        divsd xmm0, xmm1
 33213 0001920E E8DF090000                      call make_real
 33214 00019213 C9                              leave
 33215 00019214 C22000                          ret AND_KILL_FRAME(2)
 33216                                  
 33217                                  L_code_ptr_raw_bin_add_zz:
 33218 00019217 C8000000                	enter 0, 0
 33219 0001921B 48837D1802              	cmp COUNT, 2
 33220 00019220 0F85CA0A0000            	jne L_error_arg_count_2
 33221 00019226 4C8B4520                	mov r8, PARAM(0)
 33222                                  	assert_integer(r8)
    53 0001922A 41803811            <1>  cmp byte [%1], %2
    54 0001922E 0F855B0B0000        <1>  jne L_error_incorrect_type
 33223 00019234 4C8B4D28                	mov r9, PARAM(1)
 33224                                  	assert_integer(r9)
    53 00019238 41803911            <1>  cmp byte [%1], %2
    54 0001923C 0F854D0B0000        <1>  jne L_error_incorrect_type
 33225 00019242 498B7801                	mov rdi, qword [r8 + 1]
 33226 00019246 49037901                	add rdi, qword [r9 + 1]
 33227 0001924A E8BB090000              	call make_integer
 33228 0001924F C9                      	leave
 33229 00019250 C22000                  	ret AND_KILL_FRAME(2)
 33230                                  
 33231                                  L_code_ptr_raw_bin_add_qq:
 33232 00019253 C8000000                        enter 0, 0
 33233 00019257 48837D1802                      cmp COUNT, 2
 33234 0001925C 0F858E0A0000                    jne L_error_arg_count_2
 33235 00019262 4C8B4520                        mov r8, PARAM(0)
 33236                                          assert_fraction(r8)
    53 00019266 41803812            <1>  cmp byte [%1], %2
    54 0001926A 0F851F0B0000        <1>  jne L_error_incorrect_type
 33237 00019270 4C8B4D28                        mov r9, PARAM(1)
 33238                                          assert_fraction(r9)
    53 00019274 41803912            <1>  cmp byte [%1], %2
    54 00019278 0F85110B0000        <1>  jne L_error_incorrect_type
 33239 0001927E 498B4001                        mov rax, qword [r8 + 1] ; num1
 33240 00019282 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33241 00019286 4899                            cqo
 33242 00019288 48F7EB                          imul rbx
 33243 0001928B 4889C6                          mov rsi, rax
 33244 0001928E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33245 00019292 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33246 00019296 4899                            cqo
 33247 00019298 48F7EB                          imul rbx
 33248 0001929B 4801C6                          add rsi, rax
 33249 0001929E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33250 000192A2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33251 000192A6 4899                            cqo
 33252 000192A8 48F7EB                          imul rbx
 33253 000192AB 4889C7                          mov rdi, rax
 33254 000192AE E8DE010000                      call normalize_fraction
 33255 000192B3 C9                              leave
 33256 000192B4 C22000                          ret AND_KILL_FRAME(2)
 33257                                  
 33258                                  L_code_ptr_raw_bin_sub_zz:
 33259 000192B7 C8000000                	enter 0, 0
 33260 000192BB 48837D1802              	cmp COUNT, 2
 33261 000192C0 0F852A0A0000            	jne L_error_arg_count_2
 33262 000192C6 4C8B4520                	mov r8, PARAM(0)
 33263                                  	assert_integer(r8)
    53 000192CA 41803811            <1>  cmp byte [%1], %2
    54 000192CE 0F85BB0A0000        <1>  jne L_error_incorrect_type
 33264 000192D4 4C8B4D28                	mov r9, PARAM(1)
 33265                                  	assert_integer(r9)
    53 000192D8 41803911            <1>  cmp byte [%1], %2
    54 000192DC 0F85AD0A0000        <1>  jne L_error_incorrect_type
 33266 000192E2 498B7801                	mov rdi, qword [r8 + 1]
 33267 000192E6 492B7901                	sub rdi, qword [r9 + 1]
 33268 000192EA E81B090000              	call make_integer
 33269 000192EF C9                      	leave
 33270 000192F0 C22000                  	ret AND_KILL_FRAME(2)
 33271                                  
 33272                                  L_code_ptr_raw_bin_sub_qq:
 33273 000192F3 C8000000                        enter 0, 0
 33274 000192F7 48837D1802                      cmp COUNT, 2
 33275 000192FC 0F85EE090000                    jne L_error_arg_count_2
 33276 00019302 4C8B4520                        mov r8, PARAM(0)
 33277                                          assert_fraction(r8)
    53 00019306 41803812            <1>  cmp byte [%1], %2
    54 0001930A 0F857F0A0000        <1>  jne L_error_incorrect_type
 33278 00019310 4C8B4D28                        mov r9, PARAM(1)
 33279                                          assert_fraction(r9)
    53 00019314 41803912            <1>  cmp byte [%1], %2
    54 00019318 0F85710A0000        <1>  jne L_error_incorrect_type
 33280 0001931E 498B4001                        mov rax, qword [r8 + 1] ; num1
 33281 00019322 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33282 00019326 4899                            cqo
 33283 00019328 48F7EB                          imul rbx
 33284 0001932B 4889C6                          mov rsi, rax
 33285 0001932E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33286 00019332 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33287 00019336 4899                            cqo
 33288 00019338 48F7EB                          imul rbx
 33289 0001933B 4829C6                          sub rsi, rax
 33290 0001933E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33291 00019342 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33292 00019346 4899                            cqo
 33293 00019348 48F7EB                          imul rbx
 33294 0001934B 4889C7                          mov rdi, rax
 33295 0001934E E83E010000                      call normalize_fraction
 33296 00019353 C9                              leave
 33297 00019354 C22000                          ret AND_KILL_FRAME(2)
 33298                                  
 33299                                  L_code_ptr_raw_bin_mul_zz:
 33300 00019357 C8000000                	enter 0, 0
 33301 0001935B 48837D1802              	cmp COUNT, 2
 33302 00019360 0F858A090000            	jne L_error_arg_count_2
 33303 00019366 4C8B4520                	mov r8, PARAM(0)
 33304                                  	assert_integer(r8)
    53 0001936A 41803811            <1>  cmp byte [%1], %2
    54 0001936E 0F851B0A0000        <1>  jne L_error_incorrect_type
 33305 00019374 4C8B4D28                	mov r9, PARAM(1)
 33306                                  	assert_integer(r9)
    53 00019378 41803911            <1>  cmp byte [%1], %2
    54 0001937C 0F850D0A0000        <1>  jne L_error_incorrect_type
 33307 00019382 4899                    	cqo
 33308 00019384 498B4001                	mov rax, qword [r8 + 1]
 33309 00019388 49F76101                	mul qword [r9 + 1]
 33310 0001938C 4889C7                  	mov rdi, rax
 33311 0001938F E876080000              	call make_integer
 33312 00019394 C9                      	leave
 33313 00019395 C22000                  	ret AND_KILL_FRAME(2)
 33314                                  
 33315                                  L_code_ptr_raw_bin_mul_qq:
 33316 00019398 C8000000                        enter 0, 0
 33317 0001939C 48837D1802                      cmp COUNT, 2
 33318 000193A1 0F8549090000                    jne L_error_arg_count_2
 33319 000193A7 4C8B4520                        mov r8, PARAM(0)
 33320                                          assert_fraction(r8)
    53 000193AB 41803812            <1>  cmp byte [%1], %2
    54 000193AF 0F85DA090000        <1>  jne L_error_incorrect_type
 33321 000193B5 4C8B4D28                        mov r9, PARAM(1)
 33322                                          assert_fraction(r9)
    53 000193B9 41803912            <1>  cmp byte [%1], %2
    54 000193BD 0F85CC090000        <1>  jne L_error_incorrect_type
 33323 000193C3 498B4001                        mov rax, qword [r8 + 1] ; num1
 33324 000193C7 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33325 000193CB 4899                            cqo
 33326 000193CD 48F7EB                          imul rbx
 33327 000193D0 4889C6                          mov rsi, rax
 33328 000193D3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33329 000193D7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33330 000193DB 4899                            cqo
 33331 000193DD 48F7EB                          imul rbx
 33332 000193E0 4889C7                          mov rdi, rax
 33333 000193E3 E8A9000000                      call normalize_fraction
 33334 000193E8 C9                              leave
 33335 000193E9 C22000                          ret AND_KILL_FRAME(2)
 33336                                          
 33337                                  L_code_ptr_raw_bin_div_zz:
 33338 000193EC C8000000                	enter 0, 0
 33339 000193F0 48837D1802              	cmp COUNT, 2
 33340 000193F5 0F85F5080000            	jne L_error_arg_count_2
 33341 000193FB 4C8B4520                	mov r8, PARAM(0)
 33342                                  	assert_integer(r8)
    53 000193FF 41803811            <1>  cmp byte [%1], %2
    54 00019403 0F8586090000        <1>  jne L_error_incorrect_type
 33343 00019409 4C8B4D28                	mov r9, PARAM(1)
 33344                                  	assert_integer(r9)
    53 0001940D 41803911            <1>  cmp byte [%1], %2
    54 00019411 0F8578090000        <1>  jne L_error_incorrect_type
 33345 00019417 498B7901                	mov rdi, qword [r9 + 1]
 33346 0001941B 4883FF00                	cmp rdi, 0
 33347 0001941F 0F849B090000            	je L_error_division_by_zero
 33348 00019425 498B7001                	mov rsi, qword [r8 + 1]
 33349 00019429 E863000000              	call normalize_fraction
 33350 0001942E C9                      	leave
 33351 0001942F C22000                  	ret AND_KILL_FRAME(2)
 33352                                  
 33353                                  L_code_ptr_raw_bin_div_qq:
 33354 00019432 C8000000                        enter 0, 0
 33355 00019436 48837D1802                      cmp COUNT, 2
 33356 0001943B 0F85AF080000                    jne L_error_arg_count_2
 33357 00019441 4C8B4520                        mov r8, PARAM(0)
 33358                                          assert_fraction(r8)
    53 00019445 41803812            <1>  cmp byte [%1], %2
    54 00019449 0F8540090000        <1>  jne L_error_incorrect_type
 33359 0001944F 4C8B4D28                        mov r9, PARAM(1)
 33360                                          assert_fraction(r9)
    53 00019453 41803912            <1>  cmp byte [%1], %2
    54 00019457 0F8532090000        <1>  jne L_error_incorrect_type
 33361 0001945D 4983790100                      cmp qword [r9 + 1], 0
 33362 00019462 0F8458090000                    je L_error_division_by_zero
 33363 00019468 498B4001                        mov rax, qword [r8 + 1] ; num1
 33364 0001946C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33365 00019470 4899                            cqo
 33366 00019472 48F7EB                          imul rbx
 33367 00019475 4889C6                          mov rsi, rax
 33368 00019478 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33369 0001947C 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33370 00019480 4899                            cqo
 33371 00019482 48F7EB                          imul rbx
 33372 00019485 4889C7                          mov rdi, rax
 33373 00019488 E804000000                      call normalize_fraction
 33374 0001948D C9                              leave
 33375 0001948E C22000                          ret AND_KILL_FRAME(2)
 33376                                          
 33377                                  normalize_fraction:
 33378 00019491 56                              push rsi
 33379 00019492 57                              push rdi
 33380 00019493 E859000000                      call gcd
 33381 00019498 4889C3                          mov rbx, rax
 33382 0001949B 58                              pop rax
 33383 0001949C 4899                            cqo
 33384 0001949E 48F7FB                          idiv rbx
 33385 000194A1 4989C0                          mov r8, rax
 33386 000194A4 58                              pop rax
 33387 000194A5 4899                            cqo
 33388 000194A7 48F7FB                          idiv rbx
 33389 000194AA 4989C1                          mov r9, rax
 33390 000194AD 4983F900                        cmp r9, 0
 33391 000194B1 741C                            je .L_zero
 33392 000194B3 4983F801                        cmp r8, 1
 33393 000194B7 7421                            je .L_int
 33394 000194B9 BF11000000                      mov rdi, (1 + 8 + 8)
 33395 000194BE E81CEBFFFF                      call malloc
 33396 000194C3 C60012                          mov byte [rax], T_fraction
 33397 000194C6 4C894801                        mov qword [rax + 1], r9
 33398 000194CA 4C894009                        mov qword [rax + 1 + 8], r8
 33399 000194CE C3                              ret
 33400                                  .L_zero:
 33401 000194CF BF00000000                      mov rdi, 0
 33402 000194D4 E831070000                      call make_integer
 33403 000194D9 C3                              ret
 33404                                  .L_int:
 33405 000194DA 4C89CF                          mov rdi, r9
 33406 000194DD E828070000                      call make_integer
 33407 000194E2 C3                              ret
 33408                                  
 33409                                  iabs:
 33410 000194E3 4889F8                          mov rax, rdi
 33411 000194E6 4883F800                        cmp rax, 0
 33412 000194EA 7C01                            jl .Lneg
 33413 000194EC C3                              ret
 33414                                  .Lneg:
 33415 000194ED 48F7D8                          neg rax
 33416 000194F0 C3                              ret
 33417                                  
 33418                                  gcd:
 33419 000194F1 E8EDFFFFFF                      call iabs
 33420 000194F6 4889C3                          mov rbx, rax
 33421 000194F9 4889F7                          mov rdi, rsi
 33422 000194FC E8E2FFFFFF                      call iabs
 33423 00019501 4883F800                        cmp rax, 0
 33424 00019505 7502                            jne .L0
 33425 00019507 4893                            xchg rax, rbx
 33426                                  .L0:
 33427 00019509 4883FB00                        cmp rbx, 0
 33428 0001950D 740C                            je .L1
 33429 0001950F 4899                            cqo
 33430 00019511 48F7F3                          div rbx
 33431 00019514 4889D0                          mov rax, rdx
 33432 00019517 4893                            xchg rax, rbx
 33433 00019519 EBEE                            jmp .L0
 33434                                  .L1:
 33435 0001951B C3                              ret
 33436                                  
 33437                                  L_code_ptr_error:
 33438 0001951C C8000000                        enter 0, 0
 33439 00019520 48837D1802                      cmp COUNT, 2
 33440 00019525 0F85C5070000                    jne L_error_arg_count_2
 33441 0001952B 488B7520                        mov rsi, PARAM(0)
 33442                                          assert_interned_symbol(rsi)
    53 0001952F 803E41              <1>  cmp byte [%1], %2
    54 00019532 0F8557080000        <1>  jne L_error_incorrect_type
 33443 00019538 488B7528                        mov rsi, PARAM(1)
 33444                                          assert_string(rsi)
    53 0001953C 803E03              <1>  cmp byte [%1], %2
    54 0001953F 0F854A080000        <1>  jne L_error_incorrect_type
 33445 00019545 48BF-                           mov rdi, fmt_scheme_error_part_1
 33445 00019547 [FB1B000000000000] 
 33446 0001954F B800000000                      mov rax, 0
 33447                                          ENTER
    44 00019554 C8000000            <1>  enter 0, 0
    45 00019558 4883E4F0            <1>  and rsp, ~15
 33448 0001955C E8(00000000)                    call printf
 33449                                          LEAVE
    49 00019561 C9                  <1>  leave
 33450 00019562 488B7D20                        mov rdi, PARAM(0)
 33451 00019566 E8F5ECFFFF                      call print_sexpr
 33452 0001956B 48BF-                           mov rdi, fmt_scheme_error_part_2
 33452 0001956D [0F1C000000000000] 
 33453 00019575 B800000000                      mov rax, 0
 33454                                          ENTER
    44 0001957A C8000000            <1>  enter 0, 0
    45 0001957E 4883E4F0            <1>  and rsp, ~15
 33455 00019582 E8(00000000)                    call printf
 33456                                          LEAVE
    49 00019587 C9                  <1>  leave
 33457 00019588 488B4528                        mov rax, PARAM(1)       ; sob_string
 33458 0001958C BE01000000                      mov rsi, 1              ; size = 1 byte
 33459 00019591 488B5001                        mov rdx, qword [rax + 1] ; length
 33460 00019595 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 33461 00019599 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 33462                                  	ENTER
    44 000195A1 C8000000            <1>  enter 0, 0
    45 000195A5 4883E4F0            <1>  and rsp, ~15
 33463 000195A9 E8(00000000)                    call fwrite
 33464                                  	LEAVE
    49 000195AE C9                  <1>  leave
 33465 000195AF 48BF-                           mov rdi, fmt_scheme_error_part_3
 33465 000195B1 [511C000000000000] 
 33466 000195B9 B800000000                      mov rax, 0
 33467                                          ENTER
    44 000195BE C8000000            <1>  enter 0, 0
    45 000195C2 4883E4F0            <1>  and rsp, ~15
 33468 000195C6 E8(00000000)                    call printf
 33469                                          LEAVE
    49 000195CB C9                  <1>  leave
 33470 000195CC 48C7C0F7FFFFFF                  mov rax, -9
 33471 000195D3 E8(00000000)                    call exit
 33472                                  
 33473                                  L_code_ptr_raw_less_than_rr:
 33474 000195D8 C8000000                        enter 0, 0
 33475 000195DC 48837D1802                      cmp COUNT, 2
 33476 000195E1 0F8509070000                    jne L_error_arg_count_2
 33477 000195E7 488B7520                        mov rsi, PARAM(0)
 33478                                          assert_real(rsi)
    53 000195EB 803E13              <1>  cmp byte [%1], %2
    54 000195EE 0F859B070000        <1>  jne L_error_incorrect_type
 33479 000195F4 488B7D28                        mov rdi, PARAM(1)
 33480                                          assert_real(rdi)
    53 000195F8 803F13              <1>  cmp byte [%1], %2
    54 000195FB 0F858E070000        <1>  jne L_error_incorrect_type
 33481 00019601 F20F104601                      movsd xmm0, qword [rsi + 1]
 33482 00019606 F20F104F01                      movsd xmm1, qword [rdi + 1]
 33483 0001960B 660F2FC1                        comisd xmm0, xmm1
 33484 0001960F 730C                            jae .L_false
 33485 00019611 48B8-                           mov rax, sob_boolean_true
 33485 00019613 [0300000000000000] 
 33486 0001961B EB0A                            jmp .L_exit
 33487                                  .L_false:
 33488 0001961D 48B8-                           mov rax, sob_boolean_false
 33488 0001961F [0200000000000000] 
 33489                                  .L_exit:
 33490 00019627 C9                              leave
 33491 00019628 C22000                          ret AND_KILL_FRAME(2)
 33492                                          
 33493                                  L_code_ptr_raw_less_than_zz:
 33494 0001962B C8000000                	enter 0, 0
 33495 0001962F 48837D1802              	cmp COUNT, 2
 33496 00019634 0F85B6060000            	jne L_error_arg_count_2
 33497 0001963A 4C8B4520                	mov r8, PARAM(0)
 33498                                  	assert_integer(r8)
    53 0001963E 41803811            <1>  cmp byte [%1], %2
    54 00019642 0F8547070000        <1>  jne L_error_incorrect_type
 33499 00019648 4C8B4D28                	mov r9, PARAM(1)
 33500                                  	assert_integer(r9)
    53 0001964C 41803911            <1>  cmp byte [%1], %2
    54 00019650 0F8539070000        <1>  jne L_error_incorrect_type
 33501 00019656 498B7801                	mov rdi, qword [r8 + 1]
 33502 0001965A 493B7901                	cmp rdi, qword [r9 + 1]
 33503 0001965E 7D0C                    	jge .L_false
 33504 00019660 48B8-                   	mov rax, sob_boolean_true
 33504 00019662 [0300000000000000] 
 33505 0001966A EB0A                    	jmp .L_exit
 33506                                  .L_false:
 33507 0001966C 48B8-                   	mov rax, sob_boolean_false
 33507 0001966E [0200000000000000] 
 33508                                  .L_exit:
 33509 00019676 C9                      	leave
 33510 00019677 C22000                  	ret AND_KILL_FRAME(2)
 33511                                  
 33512                                  L_code_ptr_raw_less_than_qq:
 33513 0001967A C8000000                        enter 0, 0
 33514 0001967E 48837D1802                      cmp COUNT, 2
 33515 00019683 0F8567060000                    jne L_error_arg_count_2
 33516 00019689 488B7520                        mov rsi, PARAM(0)
 33517                                          assert_fraction(rsi)
    53 0001968D 803E12              <1>  cmp byte [%1], %2
    54 00019690 0F85F9060000        <1>  jne L_error_incorrect_type
 33518 00019696 488B7D28                        mov rdi, PARAM(1)
 33519                                          assert_fraction(rdi)
    53 0001969A 803F12              <1>  cmp byte [%1], %2
    54 0001969D 0F85EC060000        <1>  jne L_error_incorrect_type
 33520 000196A3 488B4601                        mov rax, qword [rsi + 1] ; num1
 33521 000196A7 4899                            cqo
 33522 000196A9 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 33523 000196AD 4889C1                          mov rcx, rax
 33524 000196B0 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 33525 000196B4 4899                            cqo
 33526 000196B6 48F76F01                        imul qword [rdi + 1]          ; num2
 33527 000196BA 4829C1                          sub rcx, rax
 33528 000196BD 7D0C                            jge .L_false
 33529 000196BF 48B8-                           mov rax, sob_boolean_true
 33529 000196C1 [0300000000000000] 
 33530 000196C9 EB0A                            jmp .L_exit
 33531                                  .L_false:
 33532 000196CB 48B8-                           mov rax, sob_boolean_false
 33532 000196CD [0200000000000000] 
 33533                                  .L_exit:
 33534 000196D5 C9                              leave
 33535 000196D6 C22000                          ret AND_KILL_FRAME(2)
 33536                                  
 33537                                  L_code_ptr_raw_equal_rr:
 33538 000196D9 C8000000                        enter 0, 0
 33539 000196DD 48837D1802                      cmp COUNT, 2
 33540 000196E2 0F8508060000                    jne L_error_arg_count_2
 33541 000196E8 488B7520                        mov rsi, PARAM(0)
 33542                                          assert_real(rsi)
    53 000196EC 803E13              <1>  cmp byte [%1], %2
    54 000196EF 0F859A060000        <1>  jne L_error_incorrect_type
 33543 000196F5 488B7D28                        mov rdi, PARAM(1)
 33544                                          assert_real(rdi)
    53 000196F9 803F13              <1>  cmp byte [%1], %2
    54 000196FC 0F858D060000        <1>  jne L_error_incorrect_type
 33545 00019702 F20F104601                      movsd xmm0, qword [rsi + 1]
 33546 00019707 F20F104F01                      movsd xmm1, qword [rdi + 1]
 33547 0001970C 660F2FC1                        comisd xmm0, xmm1
 33548 00019710 750C                            jne .L_false
 33549 00019712 48B8-                           mov rax, sob_boolean_true
 33549 00019714 [0300000000000000] 
 33550 0001971C EB0A                            jmp .L_exit
 33551                                  .L_false:
 33552 0001971E 48B8-                           mov rax, sob_boolean_false
 33552 00019720 [0200000000000000] 
 33553                                  .L_exit:
 33554 00019728 C9                              leave
 33555 00019729 C22000                          ret AND_KILL_FRAME(2)
 33556                                          
 33557                                  L_code_ptr_raw_equal_zz:
 33558 0001972C C8000000                	enter 0, 0
 33559 00019730 48837D1802              	cmp COUNT, 2
 33560 00019735 0F85B5050000            	jne L_error_arg_count_2
 33561 0001973B 4C8B4520                	mov r8, PARAM(0)
 33562                                  	assert_integer(r8)
    53 0001973F 41803811            <1>  cmp byte [%1], %2
    54 00019743 0F8546060000        <1>  jne L_error_incorrect_type
 33563 00019749 4C8B4D28                	mov r9, PARAM(1)
 33564                                  	assert_integer(r9)
    53 0001974D 41803911            <1>  cmp byte [%1], %2
    54 00019751 0F8538060000        <1>  jne L_error_incorrect_type
 33565 00019757 498B7801                	mov rdi, qword [r8 + 1]
 33566 0001975B 493B7901                	cmp rdi, qword [r9 + 1]
 33567 0001975F 750C                    	jne .L_false
 33568 00019761 48B8-                   	mov rax, sob_boolean_true
 33568 00019763 [0300000000000000] 
 33569 0001976B EB0A                    	jmp .L_exit
 33570                                  .L_false:
 33571 0001976D 48B8-                   	mov rax, sob_boolean_false
 33571 0001976F [0200000000000000] 
 33572                                  .L_exit:
 33573 00019777 C9                      	leave
 33574 00019778 C22000                  	ret AND_KILL_FRAME(2)
 33575                                  
 33576                                  L_code_ptr_raw_equal_qq:
 33577 0001977B C8000000                        enter 0, 0
 33578 0001977F 48837D1802                      cmp COUNT, 2
 33579 00019784 0F8566050000                    jne L_error_arg_count_2
 33580 0001978A 488B7520                        mov rsi, PARAM(0)
 33581                                          assert_fraction(rsi)
    53 0001978E 803E12              <1>  cmp byte [%1], %2
    54 00019791 0F85F8050000        <1>  jne L_error_incorrect_type
 33582 00019797 488B7D28                        mov rdi, PARAM(1)
 33583                                          assert_fraction(rdi)
    53 0001979B 803F12              <1>  cmp byte [%1], %2
    54 0001979E 0F85EB050000        <1>  jne L_error_incorrect_type
 33584 000197A4 488B4601                        mov rax, qword [rsi + 1] ; num1
 33585 000197A8 4899                            cqo
 33586 000197AA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 33587 000197AE 4889C1                          mov rcx, rax
 33588 000197B1 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 33589 000197B5 4899                            cqo
 33590 000197B7 48F76F01                        imul qword [rdi + 1]          ; num2
 33591 000197BB 4829C1                          sub rcx, rax
 33592 000197BE 750C                            jne .L_false
 33593 000197C0 48B8-                           mov rax, sob_boolean_true
 33593 000197C2 [0300000000000000] 
 33594 000197CA EB0A                            jmp .L_exit
 33595                                  .L_false:
 33596 000197CC 48B8-                           mov rax, sob_boolean_false
 33596 000197CE [0200000000000000] 
 33597                                  .L_exit:
 33598 000197D6 C9                              leave
 33599 000197D7 C22000                          ret AND_KILL_FRAME(2)
 33600                                  
 33601                                  L_code_ptr_quotient:
 33602 000197DA C8000000                        enter 0, 0
 33603 000197DE 48837D1802                      cmp COUNT, 2
 33604 000197E3 0F8507050000                    jne L_error_arg_count_2
 33605 000197E9 488B7520                        mov rsi, PARAM(0)
 33606                                          assert_integer(rsi)
    53 000197ED 803E11              <1>  cmp byte [%1], %2
    54 000197F0 0F8599050000        <1>  jne L_error_incorrect_type
 33607 000197F6 488B7D28                        mov rdi, PARAM(1)
 33608                                          assert_integer(rdi)
    53 000197FA 803F11              <1>  cmp byte [%1], %2
    54 000197FD 0F858C050000        <1>  jne L_error_incorrect_type
 33609 00019803 488B4601                        mov rax, qword [rsi + 1]
 33610 00019807 488B5F01                        mov rbx, qword [rdi + 1]
 33611 0001980B 4883FB00                        cmp rbx, 0
 33612 0001980F 0F84AB050000                    je L_error_division_by_zero
 33613 00019815 4899                            cqo
 33614 00019817 48F7FB                          idiv rbx
 33615 0001981A 4889C7                          mov rdi, rax
 33616 0001981D E8E8030000                      call make_integer
 33617 00019822 C9                              leave
 33618 00019823 C22000                          ret AND_KILL_FRAME(2)
 33619                                          
 33620                                  L_code_ptr_remainder:
 33621 00019826 C8000000                        enter 0, 0
 33622 0001982A 48837D1802                      cmp COUNT, 2
 33623 0001982F 0F85BB040000                    jne L_error_arg_count_2
 33624 00019835 488B7520                        mov rsi, PARAM(0)
 33625                                          assert_integer(rsi)
    53 00019839 803E11              <1>  cmp byte [%1], %2
    54 0001983C 0F854D050000        <1>  jne L_error_incorrect_type
 33626 00019842 488B7D28                        mov rdi, PARAM(1)
 33627                                          assert_integer(rdi)
    53 00019846 803F11              <1>  cmp byte [%1], %2
    54 00019849 0F8540050000        <1>  jne L_error_incorrect_type
 33628 0001984F 488B4601                        mov rax, qword [rsi + 1]
 33629 00019853 488B5F01                        mov rbx, qword [rdi + 1]
 33630 00019857 4883FB00                        cmp rbx, 0
 33631 0001985B 0F845F050000                    je L_error_division_by_zero
 33632 00019861 4899                            cqo
 33633 00019863 48F7FB                          idiv rbx
 33634 00019866 4889D7                          mov rdi, rdx
 33635 00019869 E89C030000                      call make_integer
 33636 0001986E C9                              leave
 33637 0001986F C22000                          ret AND_KILL_FRAME(2)
 33638                                  
 33639                                  L_code_ptr_set_car:
 33640 00019872 C8000000                        enter 0, 0
 33641 00019876 48837D1802                      cmp COUNT, 2
 33642 0001987B 0F856F040000                    jne L_error_arg_count_2
 33643 00019881 488B4520                        mov rax, PARAM(0)
 33644                                          assert_pair(rax)
    53 00019885 803821              <1>  cmp byte [%1], %2
    54 00019888 0F8501050000        <1>  jne L_error_incorrect_type
 33645 0001988E 488B5D28                        mov rbx, PARAM(1)
 33646 00019892 48895801                        mov SOB_PAIR_CAR(rax), rbx
 33647 00019896 48B8-                           mov rax, sob_void
 33647 00019898 [0000000000000000] 
 33648 000198A0 C9                              leave
 33649 000198A1 C22000                          ret AND_KILL_FRAME(2)
 33650                                  
 33651                                  L_code_ptr_set_cdr:
 33652 000198A4 C8000000                        enter 0, 0
 33653 000198A8 48837D1802                      cmp COUNT, 2
 33654 000198AD 0F853D040000                    jne L_error_arg_count_2
 33655 000198B3 488B4520                        mov rax, PARAM(0)
 33656                                          assert_pair(rax)
    53 000198B7 803821              <1>  cmp byte [%1], %2
    54 000198BA 0F85CF040000        <1>  jne L_error_incorrect_type
 33657 000198C0 488B5D28                        mov rbx, PARAM(1)
 33658 000198C4 48895809                        mov SOB_PAIR_CDR(rax), rbx
 33659 000198C8 48B8-                           mov rax, sob_void
 33659 000198CA [0000000000000000] 
 33660 000198D2 C9                              leave
 33661 000198D3 C22000                          ret AND_KILL_FRAME(2)
 33662                                  
 33663                                  L_code_ptr_string_ref:
 33664 000198D6 C8000000                        enter 0, 0
 33665 000198DA 48837D1802                      cmp COUNT, 2
 33666 000198DF 0F850B040000                    jne L_error_arg_count_2
 33667 000198E5 488B7D20                        mov rdi, PARAM(0)
 33668                                          assert_string(rdi)
    53 000198E9 803F03              <1>  cmp byte [%1], %2
    54 000198EC 0F859D040000        <1>  jne L_error_incorrect_type
 33669 000198F2 488B7528                        mov rsi, PARAM(1)
 33670                                          assert_integer(rsi)
    53 000198F6 803E11              <1>  cmp byte [%1], %2
    54 000198F9 0F8590040000        <1>  jne L_error_incorrect_type
 33671 000198FF 488B5701                        mov rdx, qword [rdi + 1]
 33672 00019903 488B4E01                        mov rcx, qword [rsi + 1]
 33673 00019907 4839D1                          cmp rcx, rdx
 33674 0001990A 0F8D14030000                    jge L_error_integer_range
 33675 00019910 4883F900                        cmp rcx, 0
 33676 00019914 0F8C0A030000                    jl L_error_integer_range
 33677 0001991A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 33678 0001991E BF02000000                      mov rdi, 2
 33679 00019923 E8B7E6FFFF                      call malloc
 33680 00019928 C60002                          mov byte [rax], T_char
 33681 0001992B 885801                          mov byte [rax + 1], bl
 33682 0001992E C9                              leave
 33683 0001992F C22000                          ret AND_KILL_FRAME(2)
 33684                                  
 33685                                  L_code_ptr_vector_ref:
 33686 00019932 C8000000                        enter 0, 0
 33687 00019936 48837D1802                      cmp COUNT, 2
 33688 0001993B 0F85AF030000                    jne L_error_arg_count_2
 33689 00019941 488B7D20                        mov rdi, PARAM(0)
 33690                                          assert_vector(rdi)
    53 00019945 803F22              <1>  cmp byte [%1], %2
    54 00019948 0F8541040000        <1>  jne L_error_incorrect_type
 33691 0001994E 488B7528                        mov rsi, PARAM(1)
 33692                                          assert_integer(rsi)
    53 00019952 803E11              <1>  cmp byte [%1], %2
    54 00019955 0F8534040000        <1>  jne L_error_incorrect_type
 33693 0001995B 488B5701                        mov rdx, qword [rdi + 1]
 33694 0001995F 488B4E01                        mov rcx, qword [rsi + 1]
 33695 00019963 4839D1                          cmp rcx, rdx
 33696 00019966 0F8DB8020000                    jge L_error_integer_range
 33697 0001996C 4883F900                        cmp rcx, 0
 33698 00019970 0F8CAE020000                    jl L_error_integer_range
 33699 00019976 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 33700 0001997B C9                              leave
 33701 0001997C C22000                          ret AND_KILL_FRAME(2)
 33702                                  
 33703                                  L_code_ptr_vector_set:
 33704 0001997F C8000000                        enter 0, 0
 33705 00019983 48837D1803                      cmp COUNT, 3
 33706 00019988 0F85CC030000                    jne L_error_arg_count_3
 33707 0001998E 488B7D20                        mov rdi, PARAM(0)
 33708                                          assert_vector(rdi)
    53 00019992 803F22              <1>  cmp byte [%1], %2
    54 00019995 0F85F4030000        <1>  jne L_error_incorrect_type
 33709 0001999B 488B7528                        mov rsi, PARAM(1)
 33710                                          assert_integer(rsi)
    53 0001999F 803E11              <1>  cmp byte [%1], %2
    54 000199A2 0F85E7030000        <1>  jne L_error_incorrect_type
 33711 000199A8 488B5701                        mov rdx, qword [rdi + 1]
 33712 000199AC 488B4E01                        mov rcx, qword [rsi + 1]
 33713 000199B0 4839D1                          cmp rcx, rdx
 33714 000199B3 0F8D6B020000                    jge L_error_integer_range
 33715 000199B9 4883F900                        cmp rcx, 0
 33716 000199BD 0F8C61020000                    jl L_error_integer_range
 33717 000199C3 488B4530                        mov rax, PARAM(2)
 33718 000199C7 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 33719 000199CC 48B8-                           mov rax, sob_void
 33719 000199CE [0000000000000000] 
 33720 000199D6 C9                              leave
 33721 000199D7 C22800                          ret AND_KILL_FRAME(3)
 33722                                  
 33723                                  L_code_ptr_string_set:
 33724 000199DA C8000000                        enter 0, 0
 33725 000199DE 48837D1803                      cmp COUNT, 3
 33726 000199E3 0F8571030000                    jne L_error_arg_count_3
 33727 000199E9 488B7D20                        mov rdi, PARAM(0)
 33728                                          assert_string(rdi)
    53 000199ED 803F03              <1>  cmp byte [%1], %2
    54 000199F0 0F8599030000        <1>  jne L_error_incorrect_type
 33729 000199F6 488B7528                        mov rsi, PARAM(1)
 33730                                          assert_integer(rsi)
    53 000199FA 803E11              <1>  cmp byte [%1], %2
    54 000199FD 0F858C030000        <1>  jne L_error_incorrect_type
 33731 00019A03 488B5701                        mov rdx, qword [rdi + 1]
 33732 00019A07 488B4E01                        mov rcx, qword [rsi + 1]
 33733 00019A0B 4839D1                          cmp rcx, rdx
 33734 00019A0E 0F8D10020000                    jge L_error_integer_range
 33735 00019A14 4883F900                        cmp rcx, 0
 33736 00019A18 0F8C06020000                    jl L_error_integer_range
 33737 00019A1E 488B4530                        mov rax, PARAM(2)
 33738                                          assert_char(rax)
    53 00019A22 803802              <1>  cmp byte [%1], %2
    54 00019A25 0F8564030000        <1>  jne L_error_incorrect_type
 33739 00019A2B 8A4001                          mov al, byte [rax + 1]
 33740 00019A2E 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 33741 00019A32 48B8-                           mov rax, sob_void
 33741 00019A34 [0000000000000000] 
 33742 00019A3C C9                              leave
 33743 00019A3D C22800                          ret AND_KILL_FRAME(3)
 33744                                  
 33745                                  L_code_ptr_make_vector:
 33746 00019A40 C8000000                        enter 0, 0
 33747 00019A44 48837D1802                      cmp COUNT, 2
 33748 00019A49 0F85A1020000                    jne L_error_arg_count_2
 33749 00019A4F 488B4D20                        mov rcx, PARAM(0)
 33750                                          assert_integer(rcx)
    53 00019A53 803911              <1>  cmp byte [%1], %2
    54 00019A56 0F8533030000        <1>  jne L_error_incorrect_type
 33751 00019A5C 488B4901                        mov rcx, qword [rcx + 1]
 33752 00019A60 4883F900                        cmp rcx, 0
 33753 00019A64 0F8CBA010000                    jl L_error_integer_range
 33754 00019A6A 488B5528                        mov rdx, PARAM(1)
 33755 00019A6E 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 33756 00019A76 E864E5FFFF                      call malloc
 33757 00019A7B C60022                          mov byte [rax], T_vector
 33758 00019A7E 48894801                        mov qword [rax + 1], rcx
 33759 00019A82 41B800000000                    mov r8, 0
 33760                                  .L0:
 33761 00019A88 4939C8                          cmp r8, rcx
 33762 00019A8B 740A                            je .L1
 33763 00019A8D 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 33764 00019A92 49FFC0                          inc r8
 33765 00019A95 EBF1                            jmp .L0
 33766                                  .L1:
 33767 00019A97 C9                              leave
 33768 00019A98 C22000                          ret AND_KILL_FRAME(2)
 33769                                          
 33770                                  L_code_ptr_make_string:
 33771 00019A9B C8000000                        enter 0, 0
 33772 00019A9F 48837D1802                      cmp COUNT, 2
 33773 00019AA4 0F8546020000                    jne L_error_arg_count_2
 33774 00019AAA 488B4D20                        mov rcx, PARAM(0)
 33775                                          assert_integer(rcx)
    53 00019AAE 803911              <1>  cmp byte [%1], %2
    54 00019AB1 0F85D8020000        <1>  jne L_error_incorrect_type
 33776 00019AB7 488B4901                        mov rcx, qword [rcx + 1]
 33777 00019ABB 4883F900                        cmp rcx, 0
 33778 00019ABF 0F8C5F010000                    jl L_error_integer_range
 33779 00019AC5 488B5528                        mov rdx, PARAM(1)
 33780                                          assert_char(rdx)
    53 00019AC9 803A02              <1>  cmp byte [%1], %2
    54 00019ACC 0F85BD020000        <1>  jne L_error_incorrect_type
 33781 00019AD2 8A5201                          mov dl, byte [rdx + 1]
 33782 00019AD5 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 33783 00019AD9 E801E5FFFF                      call malloc
 33784 00019ADE C60003                          mov byte [rax], T_string
 33785 00019AE1 48894801                        mov qword [rax + 1], rcx
 33786 00019AE5 41B800000000                    mov r8, 0
 33787                                  .L0:
 33788 00019AEB 4939C8                          cmp r8, rcx
 33789 00019AEE 740A                            je .L1
 33790 00019AF0 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 33791 00019AF5 49FFC0                          inc r8
 33792 00019AF8 EBF1                            jmp .L0
 33793                                  .L1:
 33794 00019AFA C9                              leave
 33795 00019AFB C22000                          ret AND_KILL_FRAME(2)
 33796                                  
 33797                                  L_code_ptr_numerator:
 33798 00019AFE C8000000                        enter 0, 0
 33799 00019B02 48837D1801                      cmp COUNT, 1
 33800 00019B07 0F85AE010000                    jne L_error_arg_count_1
 33801 00019B0D 488B4520                        mov rax, PARAM(0)
 33802                                          assert_fraction(rax)
    53 00019B11 803812              <1>  cmp byte [%1], %2
    54 00019B14 0F8575020000        <1>  jne L_error_incorrect_type
 33803 00019B1A 488B7801                        mov rdi, qword [rax + 1]
 33804 00019B1E E8E7000000                      call make_integer
 33805 00019B23 C9                              leave
 33806 00019B24 C21800                          ret AND_KILL_FRAME(1)
 33807                                          
 33808                                  L_code_ptr_denominator:
 33809 00019B27 C8000000                        enter 0, 0
 33810 00019B2B 48837D1801                      cmp COUNT, 1
 33811 00019B30 0F8585010000                    jne L_error_arg_count_1
 33812 00019B36 488B4520                        mov rax, PARAM(0)
 33813                                          assert_fraction(rax)
    53 00019B3A 803812              <1>  cmp byte [%1], %2
    54 00019B3D 0F854C020000        <1>  jne L_error_incorrect_type
 33814 00019B43 488B7809                        mov rdi, qword [rax + 1 + 8]
 33815 00019B47 E8BE000000                      call make_integer
 33816 00019B4C C9                              leave
 33817 00019B4D C21800                          ret AND_KILL_FRAME(1)
 33818                                  
 33819                                  L_code_ptr_is_eq:
 33820 00019B50 C8000000                	enter 0, 0
 33821 00019B54 48837D1802              	cmp COUNT, 2
 33822 00019B59 0F8591010000            	jne L_error_arg_count_2
 33823 00019B5F 488B7D20                	mov rdi, PARAM(0)
 33824 00019B63 488B7528                	mov rsi, PARAM(1)
 33825 00019B67 4839F7                  	cmp rdi, rsi
 33826 00019B6A 746C                    	je .L_eq_true
 33827 00019B6C 8A17                    	mov dl, byte [rdi]
 33828 00019B6E 3A16                    	cmp dl, byte [rsi]
 33829 00019B70 7572                    	jne .L_eq_false
 33830 00019B72 80FA02                  	cmp dl, T_char
 33831 00019B75 7459                    	je .L_char
 33832 00019B77 80FA41                  	cmp dl, T_interned_symbol
 33833 00019B7A 7440                    	je .L_interned_symbol
 33834 00019B7C 80FA42                          cmp dl, T_uninterned_symbol
 33835 00019B7F 7443                            je .L_uninterned_symbol
 33836 00019B81 80FA13                  	cmp dl, T_real
 33837 00019B84 742E                    	je .L_real
 33838 00019B86 80FA12                  	cmp dl, T_fraction
 33839 00019B89 7413                    	je .L_fraction
 33840 00019B8B 80FA11                          cmp dl, T_integer
 33841 00019B8E 7402                            je .L_integer
 33842 00019B90 EB52                    	jmp .L_eq_false
 33843                                  .L_integer:
 33844 00019B92 488B4601                        mov rax, qword [rsi + 1]
 33845 00019B96 483B4701                        cmp rax, qword [rdi + 1]
 33846 00019B9A 7548                            jne .L_eq_false
 33847 00019B9C EB3A                            jmp .L_eq_true
 33848                                  .L_fraction:
 33849 00019B9E 488B4601                	mov rax, qword [rsi + 1]
 33850 00019BA2 483B4701                	cmp rax, qword [rdi + 1]
 33851 00019BA6 753C                    	jne .L_eq_false
 33852 00019BA8 488B4609                	mov rax, qword [rsi + 1 + 8]
 33853 00019BAC 483B4709                	cmp rax, qword [rdi + 1 + 8]
 33854 00019BB0 7532                    	jne .L_eq_false
 33855 00019BB2 EB24                    	jmp .L_eq_true
 33856                                  .L_real:
 33857 00019BB4 488B4601                	mov rax, qword [rsi + 1]
 33858 00019BB8 483B4701                	cmp rax, qword [rdi + 1]
 33859                                  .L_interned_symbol:
 33860                                  	; never reached, because interned_symbols are static!
 33861                                  	; but I'm keeping it in case, I'll ever change
 33862                                  	; the implementation
 33863 00019BBC 488B4601                	mov rax, qword [rsi + 1]
 33864 00019BC0 483B4701                	cmp rax, qword [rdi + 1]
 33865                                  .L_uninterned_symbol:
 33866 00019BC4 4C8B4701                        mov r8, qword [rdi + 1]
 33867 00019BC8 4C3B4601                        cmp r8, qword [rsi + 1]
 33868 00019BCC 7516                            jne .L_eq_false
 33869 00019BCE EB08                            jmp .L_eq_true
 33870                                  .L_char:
 33871 00019BD0 8A5E01                  	mov bl, byte [rsi + 1]
 33872 00019BD3 3A5F01                  	cmp bl, byte [rdi + 1]
 33873 00019BD6 750C                    	jne .L_eq_false
 33874                                  .L_eq_true:
 33875 00019BD8 48B8-                   	mov rax, sob_boolean_true
 33875 00019BDA [0300000000000000] 
 33876 00019BE2 EB0A                    	jmp .L_eq_exit
 33877                                  .L_eq_false:
 33878 00019BE4 48B8-                   	mov rax, sob_boolean_false
 33878 00019BE6 [0200000000000000] 
 33879                                  .L_eq_exit:
 33880 00019BEE C9                      	leave
 33881 00019BEF C22000                  	ret AND_KILL_FRAME(2)
 33882                                  
 33883                                  make_real:
 33884 00019BF2 C8000000                        enter 0, 0
 33885 00019BF6 BF09000000                      mov rdi, (1 + 8)
 33886 00019BFB E8DFE3FFFF                      call malloc
 33887 00019C00 C60013                          mov byte [rax], T_real
 33888 00019C03 F20F114001                      movsd qword [rax + 1], xmm0
 33889 00019C08 C9                              leave 
 33890 00019C09 C3                              ret
 33891                                          
 33892                                  make_integer:
 33893 00019C0A C8000000                        enter 0, 0
 33894 00019C0E 4889FE                          mov rsi, rdi
 33895 00019C11 BF09000000                      mov rdi, (1 + 8)
 33896 00019C16 E8C4E3FFFF                      call malloc
 33897 00019C1B C60011                          mov byte [rax], T_integer
 33898 00019C1E 48897001                        mov qword [rax + 1], rsi
 33899 00019C22 C9                              leave
 33900 00019C23 C3                              ret
 33901                                          
 33902                                  L_error_integer_range:
 33903 00019C24 488B3C25[00000000]              mov rdi, qword [stderr]
 33904 00019C2C 48BE-                           mov rsi, fmt_integer_range
 33904 00019C2E [C81B000000000000] 
 33905 00019C36 B800000000                      mov rax, 0
 33906                                          ENTER
    44 00019C3B C8000000            <1>  enter 0, 0
    45 00019C3F 4883E4F0            <1>  and rsp, ~15
 33907 00019C43 E8(00000000)                    call fprintf
 33908                                          LEAVE
    49 00019C48 C9                  <1>  leave
 33909 00019C49 48C7C0FBFFFFFF                  mov rax, -5
 33910 00019C50 E8(00000000)                    call exit
 33911                                  
 33912                                  L_error_arg_negative:
 33913 00019C55 488B3C25[00000000]              mov rdi, qword [stderr]
 33914 00019C5D 48BE-                           mov rsi, fmt_arg_negative
 33914 00019C5F [A01A000000000000] 
 33915 00019C67 B800000000                      mov rax, 0
 33916                                          ENTER
    44 00019C6C C8000000            <1>  enter 0, 0
    45 00019C70 4883E4F0            <1>  and rsp, ~15
 33917 00019C74 E8(00000000)                    call fprintf
 33918                                          LEAVE
    49 00019C79 C9                  <1>  leave
 33919 00019C7A 48C7C0FDFFFFFF                  mov rax, -3
 33920 00019C81 E8(00000000)                    call exit
 33921                                  
 33922                                  L_error_arg_count_0:
 33923 00019C86 488B3C25[00000000]              mov rdi, qword [stderr]
 33924 00019C8E 48BE-                           mov rsi, fmt_arg_count_0
 33924 00019C90 [C61A000000000000] 
 33925 00019C98 488B5518                        mov rdx, COUNT
 33926 00019C9C B800000000                      mov rax, 0
 33927                                          ENTER
    44 00019CA1 C8000000            <1>  enter 0, 0
    45 00019CA5 4883E4F0            <1>  and rsp, ~15
 33928 00019CA9 E8(00000000)                    call fprintf
 33929                                          LEAVE
    49 00019CAE C9                  <1>  leave
 33930 00019CAF 48C7C0FDFFFFFF                  mov rax, -3
 33931 00019CB6 E8(00000000)                    call exit
 33932                                  
 33933                                  L_error_arg_count_1:
 33934 00019CBB 488B3C25[00000000]              mov rdi, qword [stderr]
 33935 00019CC3 48BE-                           mov rsi, fmt_arg_count_1
 33935 00019CC5 [EE1A000000000000] 
 33936 00019CCD 488B5518                        mov rdx, COUNT
 33937 00019CD1 B800000000                      mov rax, 0
 33938                                          ENTER
    44 00019CD6 C8000000            <1>  enter 0, 0
    45 00019CDA 4883E4F0            <1>  and rsp, ~15
 33939 00019CDE E8(00000000)                    call fprintf
 33940                                          LEAVE
    49 00019CE3 C9                  <1>  leave
 33941 00019CE4 48C7C0FDFFFFFF                  mov rax, -3
 33942 00019CEB E8(00000000)                    call exit
 33943                                  
 33944                                  L_error_arg_count_2:
 33945 00019CF0 488B3C25[00000000]              mov rdi, qword [stderr]
 33946 00019CF8 48BE-                           mov rsi, fmt_arg_count_2
 33946 00019CFA [541B000000000000] 
 33947 00019D02 488B5518                        mov rdx, COUNT
 33948 00019D06 B800000000                      mov rax, 0
 33949                                          ENTER
    44 00019D0B C8000000            <1>  enter 0, 0
    45 00019D0F 4883E4F0            <1>  and rsp, ~15
 33950 00019D13 E8(00000000)                    call fprintf
 33951                                          LEAVE
    49 00019D18 C9                  <1>  leave
 33952 00019D19 48C7C0FDFFFFFF                  mov rax, -3
 33953 00019D20 E8(00000000)                    call exit
 33954                                  
 33955                                  L_error_arg_count_12:
 33956 00019D25 488B3C25[00000000]              mov rdi, qword [stderr]
 33957 00019D2D 48BE-                           mov rsi, fmt_arg_count_12
 33957 00019D2F [141B000000000000] 
 33958 00019D37 488B5518                        mov rdx, COUNT
 33959 00019D3B B800000000                      mov rax, 0
 33960                                          ENTER
    44 00019D40 C8000000            <1>  enter 0, 0
    45 00019D44 4883E4F0            <1>  and rsp, ~15
 33961 00019D48 E8(00000000)                    call fprintf
 33962                                          LEAVE
    49 00019D4D C9                  <1>  leave
 33963 00019D4E 48C7C0FDFFFFFF                  mov rax, -3
 33964 00019D55 E8(00000000)                    call exit
 33965                                  
 33966                                  L_error_arg_count_3:
 33967 00019D5A 488B3C25[00000000]              mov rdi, qword [stderr]
 33968 00019D62 48BE-                           mov rsi, fmt_arg_count_3
 33968 00019D64 [7B1B000000000000] 
 33969 00019D6C 488B5518                        mov rdx, COUNT
 33970 00019D70 B800000000                      mov rax, 0
 33971                                          ENTER
    44 00019D75 C8000000            <1>  enter 0, 0
    45 00019D79 4883E4F0            <1>  and rsp, ~15
 33972 00019D7D E8(00000000)                    call fprintf
 33973                                          LEAVE
    49 00019D82 C9                  <1>  leave
 33974 00019D83 48C7C0FDFFFFFF                  mov rax, -3
 33975 00019D8A E8(00000000)                    call exit
 33976                                          
 33977                                  L_error_incorrect_type:
 33978 00019D8F 488B3C25[00000000]              mov rdi, qword [stderr]
 33979 00019D97 48BE-                           mov rsi, fmt_type
 33979 00019D99 [A41B000000000000] 
 33980 00019DA1 B800000000                      mov rax, 0
 33981                                          ENTER
    44 00019DA6 C8000000            <1>  enter 0, 0
    45 00019DAA 4883E4F0            <1>  and rsp, ~15
 33982 00019DAE E8(00000000)                    call fprintf
 33983                                          LEAVE
    49 00019DB3 C9                  <1>  leave
 33984 00019DB4 48C7C0FCFFFFFF                  mov rax, -4
 33985 00019DBB E8(00000000)                    call exit
 33986                                  
 33987                                  L_error_division_by_zero:
 33988 00019DC0 488B3C25[00000000]              mov rdi, qword [stderr]
 33989 00019DC8 48BE-                           mov rsi, fmt_division_by_zero
 33989 00019DCA [E51B000000000000] 
 33990 00019DD2 B800000000                      mov rax, 0
 33991                                          ENTER
    44 00019DD7 C8000000            <1>  enter 0, 0
    45 00019DDB 4883E4F0            <1>  and rsp, ~15
 33992 00019DDF E8(00000000)                    call fprintf
 33993                                          LEAVE
    49 00019DE4 C9                  <1>  leave
 33994 00019DE5 48C7C0F8FFFFFF                  mov rax, -8
 33995 00019DEC E8(00000000)                    call exit
 33996                                  
 33997                                  section .data
 33998                                  gensym_count:
 33999 00001A95 0000000000000000                dq 0
 34000                                  fmt_char:
 34001 00001A9D 256300                          db `%c\0`
 34002                                  fmt_arg_negative:
 34003 00001AA0 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 34003 00001AA9 7267756D656E742063-
 34003 00001AB2 616E6E6F7420626520-
 34003 00001ABB 6E656761746976652E-
 34003 00001AC4 0A00               
 34004                                  fmt_arg_count_0:
 34005 00001AC6 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 34005 00001ACF 74696E67207A65726F-
 34005 00001AD8 20617267756D656E74-
 34005 00001AE1 732E20466F756E6420-
 34005 00001AEA 25640A00           
 34006                                  fmt_arg_count_1:
 34007 00001AEE 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 34007 00001AF7 74696E67206F6E6520-
 34007 00001B00 617267756D656E742E-
 34007 00001B09 20466F756E64202564-
 34007 00001B12 0A00               
 34008                                  fmt_arg_count_12:
 34009 00001B14 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 34009 00001B1D 74696E67206F6E6520-
 34009 00001B26 726571756972656420-
 34009 00001B2F 616E64206F6E65206F-
 34009 00001B38 7074696F6E616C2061-
 34009 00001B41 7267756D656E742E20-
 34009 00001B4A 466F756E642025640A-
 34009 00001B53 00                 
 34010                                  fmt_arg_count_2:
 34011 00001B54 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 34011 00001B5D 74696E672074776F20-
 34011 00001B66 617267756D656E7473-
 34011 00001B6F 2E20466F756E642025-
 34011 00001B78 640A00             
 34012                                  fmt_arg_count_3:
 34013 00001B7B 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 34013 00001B84 74696E672074687265-
 34013 00001B8D 6520617267756D656E-
 34013 00001B96 74732E20466F756E64-
 34013 00001B9F 2025640A00         
 34014                                  fmt_type:
 34015 00001BA4 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 34015 00001BAD 696F6E207061737365-
 34015 00001BB6 6420696E636F727265-
 34015 00001BBF 637420747970650A00 
 34016                                  fmt_integer_range:
 34017 00001BC8 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 34017 00001BD1 7265637420696E7465-
 34017 00001BDA 6765722072616E6765-
 34017 00001BE3 0A00               
 34018                                  fmt_division_by_zero:
 34019 00001BE5 212121204469766973-             db `!!! Division by zero\n\0`
 34019 00001BEE 696F6E206279207A65-
 34019 00001BF7 726F0A00           
 34020                                  fmt_scheme_error_part_1:
 34021 00001BFB 0A2121212054686520-             db `\n!!! The procedure \0`
 34021 00001C04 70726F636564757265-
 34021 00001C0D 2000               
 34022                                  fmt_scheme_error_part_2:
 34023 00001C0F 2061736B656420746F-             db ` asked to terminate the program\n`
 34023 00001C18 207465726D696E6174-
 34023 00001C21 65207468652070726F-
 34023 00001C2A 6772616D0A         
 34024 00001C2F 202020207769746820-             db `    with the following message:\n\n\0`
 34024 00001C38 74686520666F6C6C6F-
 34024 00001C41 77696E67206D657373-
 34024 00001C4A 6167653A0A0A00     
 34025                                  fmt_scheme_error_part_3:
 34026 00001C51 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 34026 00001C5A 210A0A00           
