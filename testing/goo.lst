     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "return"
    97 00000007 0600000000000000        	dq 6
    98 0000000F 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
    99                                  	; L_constants + 21:
   100 00000015 11                      	db T_integer	; 1
   101 00000016 0100000000000000        	dq 1
   102                                  	; L_constants + 30:
   103 0000001E 11                      	db T_integer	; 2
   104 0000001F 0200000000000000        	dq 2
   105                                  
   106                                  
   107                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   108                                  global main
   109                                  section .text
   110                                  main:
   111 00000000 C8000000                        enter 0, 0
   112 00000004 6A00                            push 0
   113 00000006 6A00                            push 0
   114 00000008 68[2D000000]                    push Lend
   115 0000000D C8000000                        enter 0, 0
   116                                  
   117 00000011 48B8-                   	mov rax, L_constants + 21
   117 00000013 [1500000000000000] 
   118 0000001B 483D[02000000]          	cmp rax, sob_boolean_false
   119                                  	jne .L_or_end_0001
   119          ******************       error: symbol `main.L_or_end_0001' not defined
   120 00000021 48B8-                   	mov rax, L_constants + 30
   120 00000023 [1E00000000000000] 
   121                                  	.L_or_end_0002:
   122                                  Lend:
   123 0000002B 4889C7                  	mov rdi, rax
   124 0000002E E8BA030000              	call print_sexpr_if_not_void
   125                                  
   126 00000033 48BF-                           mov rdi, fmt_memory_usage
   126 00000035 [BF00000000000000] 
   127 0000003D 488B3425[45010000]              mov rsi, qword [top_of_memory]
   128 00000045 4881EE[00000000]                sub rsi, memory
   129 0000004C B800000000                      mov rax, 0
   130                                          ENTER
    44 00000051 C8000000            <1>  enter 0, 0
    45 00000055 4883E4F0            <1>  and rsp, ~15
   131 00000059 E8(00000000)                    call printf
   132                                          LEAVE
    49 0000005E C9                  <1>  leave
   133 0000005F B800000000                      mov rax, 0
   134 00000064 E8(00000000)                    call exit
   135                                  
   136                                  L_error_fvar_undefined:
   137 00000069 50                              push rax
   138 0000006A 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   139 00000072 48BE-                           mov rsi, fmt_undefined_free_var_1
   139 00000074 [2700000000000000] 
   140 0000007C B800000000                      mov rax, 0
   141                                          ENTER
    44 00000081 C8000000            <1>  enter 0, 0
    45 00000085 4883E4F0            <1>  and rsp, ~15
   142 00000089 E8(00000000)                    call fprintf
   143                                          LEAVE
    49 0000008E C9                  <1>  leave
   144 0000008F 58                              pop rax
   145 00000090 488B4001                        mov rax, qword [rax + 1] ; string
   146 00000094 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   147 00000098 BE01000000                      mov rsi, 1               ; sizeof(char)
   148 0000009D 488B5001                        mov rdx, qword [rax + 1] ; string-length
   149 000000A1 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   150 000000A9 B800000000                      mov rax, 0
   151                                          ENTER
    44 000000AE C8000000            <1>  enter 0, 0
    45 000000B2 4883E4F0            <1>  and rsp, ~15
   152 000000B6 E8(00000000)                    call fwrite
   153                                          LEAVE
    49 000000BB C9                  <1>  leave
   154 000000BC 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   155 000000C4 48BE-                           mov rsi, fmt_undefined_free_var_2
   155 000000C6 [3E00000000000000] 
   156 000000CE B800000000                      mov rax, 0
   157                                          ENTER
    44 000000D3 C8000000            <1>  enter 0, 0
    45 000000D7 4883E4F0            <1>  and rsp, ~15
   158 000000DB E8(00000000)                    call fprintf
   159                                          LEAVE
    49 000000E0 C9                  <1>  leave
   160 000000E1 48C7C0F6FFFFFF                  mov rax, -10
   161 000000E8 E8(00000000)                    call exit
   162                                  
   163                                  L_error_non_closure:
   164 000000ED 488B3C25[00000000]              mov rdi, qword [stderr]
   165 000000F5 48BE-                           mov rsi, fmt_non_closure
   165 000000F7 [F500000000000000] 
   166 000000FF B800000000                      mov rax, 0
   167                                          ENTER
    44 00000104 C8000000            <1>  enter 0, 0
    45 00000108 4883E4F0            <1>  and rsp, ~15
   168 0000010C E8(00000000)                    call fprintf
   169                                          LEAVE
    49 00000111 C9                  <1>  leave
   170 00000112 48C7C0FEFFFFFF                  mov rax, -2
   171 00000119 E8(00000000)                    call exit
   172                                  
   173                                  L_error_improper_list:
   174 0000011E 488B3C25[00000000]      	mov rdi, qword [stderr]
   175 00000126 48BE-                   	mov rsi, fmt_error_improper_list
   175 00000128 [1D01000000000000] 
   176 00000130 B800000000              	mov rax, 0
   177                                          ENTER
    44 00000135 C8000000            <1>  enter 0, 0
    45 00000139 4883E4F0            <1>  and rsp, ~15
   178 0000013D E8(00000000)            	call fprintf
   179                                          LEAVE
    49 00000142 C9                  <1>  leave
   180 00000143 48C7C0F9FFFFFF          	mov rax, -7
   181 0000014A E8(00000000)            	call exit
   182                                  
   183                                  L_error_incorrect_arity_simple:
   184 0000014F 488B3C25[00000000]              mov rdi, qword [stderr]
   185 00000157 48BE-                           mov rsi, fmt_incorrect_arity_simple
   185 00000159 [6000000000000000] 
   186 00000161 EB14                            jmp L_error_incorrect_arity_common
   187                                  L_error_incorrect_arity_opt:
   188 00000163 488B3C25[00000000]              mov rdi, qword [stderr]
   189 0000016B 48BE-                           mov rsi, fmt_incorrect_arity_opt
   189 0000016D [8B00000000000000] 
   190                                  L_error_incorrect_arity_common:
   191 00000175 5A                              pop rdx
   192 00000176 59                              pop rcx
   193 00000177 B800000000                      mov rax, 0
   194                                          ENTER
    44 0000017C C8000000            <1>  enter 0, 0
    45 00000180 4883E4F0            <1>  and rsp, ~15
   195 00000184 E8(00000000)                    call fprintf
   196                                          LEAVE
    49 00000189 C9                  <1>  leave
   197 0000018A 48C7C0FAFFFFFF                  mov rax, -6
   198 00000191 E8(00000000)                    call exit
   199                                  
   200                                  section .data
   201                                  fmt_undefined_free_var_1:
   202 00000027 212121205468652066-             db `!!! The free variable \0`
   202 00000030 726565207661726961-
   202 00000039 626C652000         
   203                                  fmt_undefined_free_var_2:
   204 0000003E 207761732075736564-             db ` was used before it was defined.\n\0`
   204 00000047 206265666F72652069-
   204 00000050 742077617320646566-
   204 00000059 696E65642E0A00     
   205                                  fmt_incorrect_arity_simple:
   206 00000060 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   206 00000069 74656420256C642061-
   206 00000072 7267756D656E74732C-
   206 0000007B 206275742067697665-
   206 00000084 6E20256C640A00     
   207                                  fmt_incorrect_arity_opt:
   208 0000008B 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   208 00000094 746564206174206C65-
   208 0000009D 61737420256C642061-
   208 000000A6 7267756D656E74732C-
   208 000000AF 206275742067697665-
   208 000000B8 6E20256C640A00     
   209                                  fmt_memory_usage:
   210 000000BF 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   210 000000C8 20256C642062797465-
   210 000000D1 73206F662064796E61-
   210 000000DA 6D6963616C6C792D61-
   210 000000E3 6C6C6F636174656420-
   210 000000EC 6D656D6F72790A0A00 
   211                                  fmt_non_closure:
   212 000000F5 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   212 000000FE 7074696E6720746F20-
   212 00000107 6170706C792061206E-
   212 00000110 6F6E2D636C6F737572-
   212 00000119 65210A00           
   213                                  fmt_error_improper_list:
   214 0000011D 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   214 00000126 7267756D656E742069-
   214 0000012F 73206E6F7420612070-
   214 00000138 726F706572206C6973-
   214 00000141 74210A00           
   215                                  
   216                                  section .bss
   217                                  memory:
   218 00000000 <res 40000000h>         	resb gbytes(1)
   219                                  
   220                                  section .data
   221                                  top_of_memory:
   222 00000145 [0000000000000000]              dq memory
   223                                  
   224                                  section .text
   225                                  malloc:
   226 00000196 488B0425[45010000]              mov rax, qword [top_of_memory]
   227 0000019E 48013C25[45010000]              add qword [top_of_memory], rdi
   228 000001A6 C3                              ret
   229                                  
   230                                  L_code_ptr_return:
   231 000001A7 48837C241002            	cmp qword [rsp + 8*2], 2
   232 000001AD 0F85481C0000            	jne L_error_arg_count_2
   233 000001B3 488B4C2418              	mov rcx, qword [rsp + 8*3]
   234                                  	assert_integer(rcx)
    53 000001B8 803911              <1>  cmp byte [%1], %2
    54 000001BB 0F85D91C0000        <1>  jne L_error_incorrect_type
   235 000001C1 488B4901                	mov rcx, qword [rcx + 1]
   236 000001C5 4883F900                	cmp rcx, 0
   237 000001C9 0F8C601B0000            	jl L_error_integer_range
   238 000001CF 488B442420              	mov rax, qword [rsp + 8*4]
   239                                  .L0:
   240 000001D4 4883F900                        cmp rcx, 0
   241 000001D8 740B                            je .L1
   242 000001DA 488B6D00                	mov rbp, qword [rbp]
   243 000001DE 48FFC9                  	dec rcx
   244 000001E1 7FF1                    	jg .L0
   245                                  .L1:
   246 000001E3 4889EC                  	mov rsp, rbp
   247 000001E6 5D                      	pop rbp
   248 000001E7 5B                              pop rbx
   249 000001E8 488B4C2408                      mov rcx, qword [rsp + 8*1]
   250 000001ED 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   251 000001F2 FFE3                    	jmp rbx
   252                                  
   253                                  L_code_ptr_make_list:
   254 000001F4 C8000000                	enter 0, 0
   255 000001F8 48837D1801                      cmp COUNT, 1
   256 000001FD 740E                            je .L0
   257 000001FF 48837D1802                      cmp COUNT, 2
   258 00000204 7413                            je .L1
   259 00000206 E9251C0000                      jmp L_error_arg_count_12
   260                                  .L0:
   261 0000020B 49B9-                           mov r9, sob_void
   261 0000020D [0000000000000000] 
   262 00000215 EB06                            jmp .L2
   263                                  .L1:
   264 00000217 4C8B4D28                        mov r9, PARAM(1)
   265                                  .L2:
   266 0000021B 488B4D20                        mov rcx, PARAM(0)
   267                                          assert_integer(rcx)
    53 0000021F 803911              <1>  cmp byte [%1], %2
    54 00000222 0F85721C0000        <1>  jne L_error_incorrect_type
   268 00000228 488B4901                        mov rcx, qword [rcx + 1]
   269 0000022C 4883F900                        cmp rcx, 0
   270 00000230 0F8C2A1B0000                    jl L_error_arg_negative
   271 00000236 49B8-                           mov r8, sob_nil
   271 00000238 [0100000000000000] 
   272                                  .L3:
   273 00000240 4883F900                        cmp rcx, 0
   274 00000244 7E1F                            jle .L4
   275 00000246 BF11000000                      mov rdi, 1 + 8 + 8
   276 0000024B E846FFFFFF                      call malloc
   277 00000250 C60021                          mov byte [rax], T_pair
   278 00000253 4C894801                        mov qword [rax + 1], r9
   279 00000257 4C894009                        mov qword [rax + 1 + 8], r8
   280 0000025B 4989C0                          mov r8, rax
   281 0000025E 48FFC9                          dec rcx
   282 00000261 EBDD                            jmp .L3
   283                                  .L4:
   284 00000263 4C89C0                          mov rax, r8
   285 00000266 48837D1802                      cmp COUNT, 2
   286 0000026B 7406                            je .L5
   287 0000026D C9                              leave
   288 0000026E C21800                          ret AND_KILL_FRAME(1)
   289                                  .L5:
   290 00000271 C9                      	leave
   291 00000272 C22000                  	ret AND_KILL_FRAME(2)
   292                                  
   293                                  L_code_ptr_is_primitive:
   294 00000275 C8000000                	enter 0, 0
   295 00000279 48837D1801              	cmp COUNT, 1
   296 0000027E 0F85421B0000            	jne L_error_arg_count_1
   297 00000284 488B4520                	mov rax, PARAM(0)
   298                                  	assert_closure(rax)
    53 00000288 803804              <1>  cmp byte [%1], %2
    54 0000028B 0F85091C0000        <1>  jne L_error_incorrect_type
   299 00000291 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   300 00000296 750E                    	jne .L_false
   301 00000298 48B8-                   	mov rax, sob_boolean_true
   301 0000029A [0300000000000000] 
   302 000002A2 EB0C                    	jmp .L_end
   303                                  .L_false:
   304 000002A4 48B8-                   	mov rax, sob_boolean_false
   304 000002A6 [0200000000000000] 
   305                                  .L_end:
   306 000002AE C9                      	leave
   307 000002AF C21800                  	ret AND_KILL_FRAME(1)
   308                                  
   309                                  L_code_ptr_length:
   310 000002B2 C8000000                	enter 0, 0
   311 000002B6 48837D1801              	cmp COUNT, 1
   312 000002BB 0F85051B0000            	jne L_error_arg_count_1
   313 000002C1 488B5D20                	mov rbx, PARAM(0)
   314 000002C5 BF00000000              	mov rdi, 0
   315                                  .L:
   316 000002CA 803B01                  	cmp byte [rbx], T_nil
   317 000002CD 7414                    	je .L_end
   318                                  	assert_pair(rbx)
    53 000002CF 803B21              <1>  cmp byte [%1], %2
    54 000002D2 0F85C21B0000        <1>  jne L_error_incorrect_type
   319 000002D8 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   320 000002DC 48FFC7                  	inc rdi
   321 000002DF EBE9                    	jmp .L
   322                                  .L_end:
   323 000002E1 E82F1A0000              	call make_integer
   324 000002E6 C9                      	leave
   325 000002E7 C21800                  	ret AND_KILL_FRAME(1)
   326                                  
   327                                  L_code_ptr_break:
   328 000002EA 48837C241000                    cmp qword [rsp + 8 * 2], 0
   329 000002F0 0F859B1A0000                    jne L_error_arg_count_0
   330 000002F6 CC                              int3
   331 000002F7 48B8-                           mov rax, sob_void
   331 000002F9 [0000000000000000] 
   332 00000301 C21000                          ret AND_KILL_FRAME(0)        
   333                                  
   334                                  L_code_ptr_frame:
   335 00000304 C8000000                        enter 0, 0
   336 00000308 48837D1800                      cmp COUNT, 0
   337 0000030D 0F857E1A0000                    jne L_error_arg_count_0
   338                                  
   339 00000313 48BF-                           mov rdi, fmt_frame
   339 00000315 [4D01000000000000] 
   340 0000031D 488B7500                        mov rsi, qword [rbp]    ; old rbp
   341 00000321 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   342 00000325 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   343 00000329 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   344 0000032D 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   345 00000331 6A00                            push 0
   346 00000333 4151                            push r9
   347 00000335 4150                            push r8                   ; we'll use it when printing the params
   348 00000337 B800000000                      mov rax, 0
   349                                          
   350                                          ENTER
    44 0000033C C8000000            <1>  enter 0, 0
    45 00000340 4883E4F0            <1>  and rsp, ~15
   351 00000344 E8(00000000)                    call printf
   352                                          LEAVE
    49 00000349 C9                  <1>  leave
   353                                  
   354                                  .L:
   355 0000034A 488B0C24                        mov rcx, qword [rsp]
   356 0000034E 4883F900                        cmp rcx, 0
   357 00000352 7469                            je .L_out
   358 00000354 48BF-                           mov rdi, fmt_frame_param_prefix
   358 00000356 [8601000000000000] 
   359 0000035E 488B742410                      mov rsi, qword [rsp + 8*2]
   360 00000363 B800000000                      mov rax, 0
   361                                          
   362                                          ENTER
    44 00000368 C8000000            <1>  enter 0, 0
    45 0000036C 4883E4F0            <1>  and rsp, ~15
   363 00000370 E8(00000000)                    call printf
   364                                          LEAVE
    49 00000375 C9                  <1>  leave
   365                                  
   366 00000376 488B0C24                        mov rcx, qword [rsp]
   367 0000037A 48FFC9                          dec rcx
   368 0000037D 48890C24                        mov qword [rsp], rcx    ; dec arg count
   369 00000381 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   370 00000386 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   371 0000038B 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   372 0000038F 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   373 00000394 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   374 00000397 E87D000000                      call print_sexpr
   375 0000039C 48BF-                           mov rdi, fmt_newline
   375 0000039E [B201000000000000] 
   376 000003A6 B800000000                      mov rax, 0
   377                                          ENTER
    44 000003AB C8000000            <1>  enter 0, 0
    45 000003AF 4883E4F0            <1>  and rsp, ~15
   378 000003B3 E8(00000000)                    call printf
   379                                          LEAVE
    49 000003B8 C9                  <1>  leave
   380 000003B9 EB8F                            jmp .L
   381                                  .L_out:
   382 000003BB 48BF-                           mov rdi, fmt_frame_continue
   382 000003BD [9701000000000000] 
   383 000003C5 B800000000                      mov rax, 0
   384                                          ENTER
    44 000003CA C8000000            <1>  enter 0, 0
    45 000003CE 4883E4F0            <1>  and rsp, ~15
   385 000003D2 E8(00000000)                    call printf
   386 000003D7 E8(00000000)                    call getchar
   387                                          LEAVE
    49 000003DC C9                  <1>  leave
   388                                          
   389 000003DD 48B8-                           mov rax, sob_void
   389 000003DF [0000000000000000] 
   390 000003E7 C9                              leave
   391 000003E8 C21000                          ret AND_KILL_FRAME(0)
   392                                          
   393                                  print_sexpr_if_not_void:
   394 000003EB 4881FF[00000000]        	cmp rdi, sob_void
   395 000003F2 7424                    	je .done
   396 000003F4 E820000000              	call print_sexpr
   397 000003F9 48BF-                   	mov rdi, fmt_newline
   397 000003FB [B201000000000000] 
   398 00000403 B800000000              	mov rax, 0
   399                                  	ENTER
    44 00000408 C8000000            <1>  enter 0, 0
    45 0000040C 4883E4F0            <1>  and rsp, ~15
   400 00000410 E8(00000000)            	call printf
   401                                  	LEAVE
    49 00000415 C9                  <1>  leave
   402                                  .done:
   403 00000416 C3                      	ret
   404                                  
   405                                  section .data
   406                                  fmt_frame:
   407 0000014D 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   407 00000156 207265742061646472-
   407 0000015F 203D2025703B206C65-
   407 00000168 7820656E76203D2025-
   407 00000171 703B20706172616D20-
   407 0000017A 636F756E74203D2025-
   407 00000183 640A00             
   408                                  fmt_frame_param_prefix:
   409 00000186 3D3D5B706172616D20-             db `==[param %d]==> \0`
   409 0000018F 25645D3D3D3E2000   
   410                                  fmt_frame_continue:
   411 00000197 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   411 000001A0 723E20746F20636F6E-
   411 000001A9 74696E75652E2E2E00 
   412                                  fmt_newline:
   413 000001B2 0A00                    	db `\n\0`
   414                                  fmt_void:
   415 000001B4 233C766F69643E00        	db `#<void>\0`
   416                                  fmt_nil:
   417 000001BC 282900                  	db `()\0`
   418                                  fmt_boolean_false:
   419 000001BF 236600                  	db `#f\0`
   420                                  fmt_boolean_true:
   421 000001C2 237400                  	db `#t\0`
   422                                  fmt_char_backslash:
   423 000001C5 235C5C00                	db `#\\\\\0`
   424                                  fmt_char_dquote:
   425 000001C9 235C2200                	db `#\\"\0`
   426                                  fmt_char_simple:
   427 000001CD 235C256300              	db `#\\%c\0`
   428                                  fmt_char_null:
   429 000001D2 235C6E756C00            	db `#\\nul\0`
   430                                  fmt_char_bell:
   431 000001D8 235C62656C6C00          	db `#\\bell\0`
   432                                  fmt_char_backspace:
   433 000001DF 235C6261636B737061-     	db `#\\backspace\0`
   433 000001E8 636500             
   434                                  fmt_char_tab:
   435 000001EB 235C74616200            	db `#\\tab\0`
   436                                  fmt_char_newline:
   437 000001F1 235C6E65776C696E65-     	db `#\\newline\0`
   437 000001FA 00                 
   438                                  fmt_char_formfeed:
   439 000001FB 235C7061676500          	db `#\\page\0`
   440                                  fmt_char_return:
   441 00000202 235C72657475726E00      	db `#\\return\0`
   442                                  fmt_char_escape:
   443 0000020B 235C65736300            	db `#\\esc\0`
   444                                  fmt_char_space:
   445 00000211 235C737061636500        	db `#\\space\0`
   446                                  fmt_char_hex:
   447 00000219 235C782530325800        	db `#\\x%02X\0`
   448                                  fmt_gensym:
   449 00000221 47256C6400                      db `G%ld\0`
   450                                  fmt_closure:
   451 00000226 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   451 0000022F 206174203078253038-
   451 00000238 5820656E763D307825-
   451 00000241 30385820636F64653D-
   451 0000024A 3078253038583E00   
   452                                  fmt_lparen:
   453 00000252 2800                    	db `(\0`
   454                                  fmt_dotted_pair:
   455 00000254 202E2000                	db ` . \0`
   456                                  fmt_rparen:
   457 00000258 2900                    	db `)\0`
   458                                  fmt_space:
   459 0000025A 2000                    	db ` \0`
   460                                  fmt_empty_vector:
   461 0000025C 23282900                	db `#()\0`
   462                                  fmt_vector:
   463 00000260 232800                  	db `#(\0`
   464                                  fmt_real:
   465 00000263 256600                  	db `%f\0`
   466                                  fmt_fraction:
   467 00000266 256C642F256C6400        	db `%ld/%ld\0`
   468                                  fmt_zero:
   469 0000026E 3000                    	db `0\0`
   470                                  fmt_int:
   471 00000270 256C6400                	db `%ld\0`
   472                                  fmt_unknown_scheme_object_error:
   473 00000274 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   473 0000027D 6F723A20556E6B6E6F-
   473 00000286 776E20536368656D65-
   473 0000028F 2D6F626A6563742028-
   473 00000298 525454492030782530-
   473 000002A1 32582920           
   474 000002A5 617420616464726573-     	db `at address 0x%08X\n\n\0`
   474 000002AE 73203078253038580A-
   474 000002B7 0A00               
   475                                  fmt_dquote:
   476 000002B9 2200                    	db `\"\0`
   477                                  fmt_string_char:
   478 000002BB 256300                          db `%c\0`
   479                                  fmt_string_char_7:
   480 000002BE 5C6100                          db `\\a\0`
   481                                  fmt_string_char_8:
   482 000002C1 5C6200                          db `\\b\0`
   483                                  fmt_string_char_9:
   484 000002C4 5C7400                          db `\\t\0`
   485                                  fmt_string_char_10:
   486 000002C7 5C6E00                          db `\\n\0`
   487                                  fmt_string_char_11:
   488 000002CA 5C7600                          db `\\v\0`
   489                                  fmt_string_char_12:
   490 000002CD 5C6600                          db `\\f\0`
   491                                  fmt_string_char_13:
   492 000002D0 5C7200                          db `\\r\0`
   493                                  fmt_string_char_34:
   494 000002D3 5C2200                          db `\\"\0`
   495                                  fmt_string_char_92:
   496 000002D6 5C5C00                          db `\\\\\0`
   497                                  fmt_string_char_hex:
   498 000002D9 5C7825583B00                    db `\\x%X;\0`
   499                                  
   500                                  section .text
   501                                  
   502                                  print_sexpr:
   503 00000417 C8000000                	enter 0, 0
   504 0000041B 8A07                    	mov al, byte [rdi]
   505 0000041D 3C00                    	cmp al, T_void
   506 0000041F 7467                    	je .Lvoid
   507 00000421 3C01                    	cmp al, T_nil
   508 00000423 7472                    	je .Lnil
   509 00000425 3C09                    	cmp al, T_boolean_false
   510 00000427 747D                    	je .Lboolean_false
   511 00000429 3C0A                    	cmp al, T_boolean_true
   512 0000042B 0F8484000000            	je .Lboolean_true
   513 00000431 3C02                    	cmp al, T_char
   514 00000433 0F848B000000            	je .Lchar
   515 00000439 3C41                    	cmp al, T_interned_symbol
   516 0000043B 0F84C1010000            	je .Linterned_symbol
   517 00000441 3C42                            cmp al, T_uninterned_symbol
   518 00000443 0F84E5010000                    je .Luninterned_symbol
   519 00000449 3C21                    	cmp al, T_pair
   520 0000044B 0F84F0010000            	je .Lpair
   521 00000451 3C22                    	cmp al, T_vector
   522 00000453 0F84B9020000            	je .Lvector
   523 00000459 3C04                    	cmp al, T_closure
   524 0000045B 0F8487010000            	je .Lclosure
   525 00000461 3C13                    	cmp al, T_real
   526 00000463 0F844A030000            	je .Lreal
   527 00000469 3C12                    	cmp al, T_fraction
   528 0000046B 0F8470030000            	je .Lfraction
   529 00000471 3C11                    	cmp al, T_integer
   530 00000473 0F84A9030000            	je .Linteger
   531 00000479 3C03                    	cmp al, T_string
   532 0000047B 0F84B4030000            	je .Lstring
   533                                  
   534 00000481 E9DE040000              	jmp .Lunknown_sexpr_type
   535                                  
   536                                  .Lvoid:
   537 00000486 48BF-                   	mov rdi, fmt_void
   537 00000488 [B401000000000000] 
   538 00000490 E902050000              	jmp .Lemit
   539                                  
   540                                  .Lnil:
   541 00000495 48BF-                   	mov rdi, fmt_nil
   541 00000497 [BC01000000000000] 
   542 0000049F E9F3040000              	jmp .Lemit
   543                                  
   544                                  .Lboolean_false:
   545 000004A4 48BF-                   	mov rdi, fmt_boolean_false
   545 000004A6 [BF01000000000000] 
   546 000004AE E9E4040000              	jmp .Lemit
   547                                  
   548                                  .Lboolean_true:
   549 000004B3 48BF-                   	mov rdi, fmt_boolean_true
   549 000004B5 [C201000000000000] 
   550 000004BD E9D5040000              	jmp .Lemit
   551                                  
   552                                  .Lchar:
   553 000004C2 8A4701                  	mov al, byte [rdi + 1]
   554 000004C5 3C20                    	cmp al, ' '
   555 000004C7 7E22                    	jle .Lchar_whitespace
   556 000004C9 3C5C                    	cmp al, 92 		; backslash
   557 000004CB 7476                    	je .Lchar_backslash
   558 000004CD 3C22                    	cmp al, '"'
   559 000004CF 0F847D000000            	je .Lchar_dquote
   560 000004D5 4825FF000000            	and rax, 255
   561 000004DB 48BF-                   	mov rdi, fmt_char_simple
   561 000004DD [CD01000000000000] 
   562 000004E5 4889C6                  	mov rsi, rax
   563 000004E8 E9AA040000              	jmp .Lemit
   564                                  
   565                                  .Lchar_whitespace:
   566 000004ED 3C00                    	cmp al, 0
   567 000004EF 7470                    	je .Lchar_null
   568 000004F1 3C07                    	cmp al, 7
   569 000004F3 747B                    	je .Lchar_bell
   570 000004F5 3C08                    	cmp al, 8
   571 000004F7 0F8482000000            	je .Lchar_backspace
   572 000004FD 3C09                    	cmp al, 9
   573 000004FF 0F8489000000            	je .Lchar_tab
   574 00000505 3C0A                    	cmp al, 10
   575 00000507 0F8490000000            	je .Lchar_newline
   576 0000050D 3C0C                    	cmp al, 12
   577 0000050F 0F8497000000            	je .Lchar_formfeed
   578 00000515 3C0D                    	cmp al, 13
   579 00000517 0F849E000000            	je .Lchar_return
   580 0000051D 3C1B                    	cmp al, 27
   581 0000051F 0F84A5000000            	je .Lchar_escape
   582 00000525 4825FF000000            	and rax, 255
   583 0000052B 3C20                    	cmp al, ' '
   584 0000052D 0F84A6000000            	je .Lchar_space
   585 00000533 48BF-                   	mov rdi, fmt_char_hex
   585 00000535 [1902000000000000] 
   586 0000053D 4889C6                  	mov rsi, rax
   587 00000540 E952040000              	jmp .Lemit	
   588                                  
   589                                  .Lchar_backslash:
   590 00000545 48BF-                   	mov rdi, fmt_char_backslash
   590 00000547 [C501000000000000] 
   591 0000054F E943040000              	jmp .Lemit
   592                                  
   593                                  .Lchar_dquote:
   594 00000554 48BF-                   	mov rdi, fmt_char_dquote
   594 00000556 [C901000000000000] 
   595 0000055E E934040000              	jmp .Lemit
   596                                  
   597                                  .Lchar_null:
   598 00000563 48BF-                   	mov rdi, fmt_char_null
   598 00000565 [D201000000000000] 
   599 0000056D E925040000              	jmp .Lemit
   600                                  
   601                                  .Lchar_bell:
   602 00000572 48BF-                   	mov rdi, fmt_char_bell
   602 00000574 [D801000000000000] 
   603 0000057C E916040000              	jmp .Lemit
   604                                  
   605                                  .Lchar_backspace:
   606 00000581 48BF-                   	mov rdi, fmt_char_backspace
   606 00000583 [DF01000000000000] 
   607 0000058B E907040000              	jmp .Lemit
   608                                  
   609                                  .Lchar_tab:
   610 00000590 48BF-                   	mov rdi, fmt_char_tab
   610 00000592 [EB01000000000000] 
   611 0000059A E9F8030000              	jmp .Lemit
   612                                  
   613                                  .Lchar_newline:
   614 0000059F 48BF-                   	mov rdi, fmt_char_newline
   614 000005A1 [F101000000000000] 
   615 000005A9 E9E9030000              	jmp .Lemit
   616                                  
   617                                  .Lchar_formfeed:
   618 000005AE 48BF-                   	mov rdi, fmt_char_formfeed
   618 000005B0 [FB01000000000000] 
   619 000005B8 E9DA030000              	jmp .Lemit
   620                                  
   621                                  .Lchar_return:
   622 000005BD 48BF-                   	mov rdi, fmt_char_return
   622 000005BF [0202000000000000] 
   623 000005C7 E9CB030000              	jmp .Lemit
   624                                  
   625                                  .Lchar_escape:
   626 000005CC 48BF-                   	mov rdi, fmt_char_escape
   626 000005CE [0B02000000000000] 
   627 000005D6 E9BC030000              	jmp .Lemit
   628                                  
   629                                  .Lchar_space:
   630 000005DB 48BF-                   	mov rdi, fmt_char_space
   630 000005DD [1102000000000000] 
   631 000005E5 E9AD030000              	jmp .Lemit
   632                                  
   633                                  .Lclosure:
   634 000005EA 4889FE                  	mov rsi, qword rdi
   635 000005ED 48BF-                   	mov rdi, fmt_closure
   635 000005EF [2602000000000000] 
   636 000005F7 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   637 000005FB 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   638 000005FF E993030000              	jmp .Lemit
   639                                  
   640                                  .Linterned_symbol:
   641 00000604 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   642 00000608 BE01000000              	mov rsi, 1		 ; size = 1 byte
   643 0000060D 488B5701                	mov rdx, qword [rdi + 1] ; length
   644 00000611 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   645 00000615 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   646                                  	ENTER
    44 0000061D C8000000            <1>  enter 0, 0
    45 00000621 4883E4F0            <1>  and rsp, ~15
   647 00000625 E8(00000000)            	call fwrite
   648                                  	LEAVE
    49 0000062A C9                  <1>  leave
   649 0000062B E97C030000              	jmp .Lend
   650                                  
   651                                  .Luninterned_symbol:
   652 00000630 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
   653 00000634 48BF-                           mov rdi, fmt_gensym
   653 00000636 [2102000000000000] 
   654 0000063E E954030000                      jmp .Lemit
   655                                  	
   656                                  .Lpair:
   657 00000643 57                      	push rdi
   658 00000644 48BF-                   	mov rdi, fmt_lparen
   658 00000646 [5202000000000000] 
   659 0000064E B800000000              	mov rax, 0
   660                                          ENTER
    44 00000653 C8000000            <1>  enter 0, 0
    45 00000657 4883E4F0            <1>  and rsp, ~15
   661 0000065B E8(00000000)            	call printf
   662                                          LEAVE
    49 00000660 C9                  <1>  leave
   663 00000661 488B3C24                	mov rdi, qword [rsp] 	; pair
   664 00000665 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   665 00000669 E8A9FDFFFF              	call print_sexpr
   666 0000066E 5F                      	pop rdi 		; pair
   667 0000066F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   668                                  .Lcdr:
   669 00000673 8A07                    	mov al, byte [rdi]
   670 00000675 3C01                    	cmp al, T_nil
   671 00000677 7445                    	je .Lcdr_nil
   672 00000679 3C21                    	cmp al, T_pair
   673 0000067B 7460                    	je .Lcdr_pair
   674 0000067D 57                      	push rdi
   675 0000067E 48BF-                   	mov rdi, fmt_dotted_pair
   675 00000680 [5402000000000000] 
   676 00000688 B800000000              	mov rax, 0
   677                                          ENTER
    44 0000068D C8000000            <1>  enter 0, 0
    45 00000691 4883E4F0            <1>  and rsp, ~15
   678 00000695 E8(00000000)            	call printf
   679                                          LEAVE
    49 0000069A C9                  <1>  leave
   680 0000069B 5F                      	pop rdi
   681 0000069C E876FDFFFF              	call print_sexpr
   682 000006A1 48BF-                   	mov rdi, fmt_rparen
   682 000006A3 [5802000000000000] 
   683 000006AB B800000000              	mov rax, 0
   684                                          ENTER
    44 000006B0 C8000000            <1>  enter 0, 0
    45 000006B4 4883E4F0            <1>  and rsp, ~15
   685 000006B8 E8(00000000)            	call printf
   686                                          LEAVE
    49 000006BD C9                  <1>  leave
   687 000006BE C9                      	leave
   688 000006BF C3                      	ret
   689                                  
   690                                  .Lcdr_nil:
   691 000006C0 48BF-                   	mov rdi, fmt_rparen
   691 000006C2 [5802000000000000] 
   692 000006CA B800000000              	mov rax, 0
   693                                          ENTER
    44 000006CF C8000000            <1>  enter 0, 0
    45 000006D3 4883E4F0            <1>  and rsp, ~15
   694 000006D7 E8(00000000)            	call printf
   695                                          LEAVE
    49 000006DC C9                  <1>  leave
   696 000006DD C9                      	leave
   697 000006DE C3                      	ret
   698                                  
   699                                  .Lcdr_pair:
   700 000006DF 57                      	push rdi
   701 000006E0 48BF-                   	mov rdi, fmt_space
   701 000006E2 [5A02000000000000] 
   702 000006EA B800000000              	mov rax, 0
   703                                          ENTER
    44 000006EF C8000000            <1>  enter 0, 0
    45 000006F3 4883E4F0            <1>  and rsp, ~15
   704 000006F7 E8(00000000)            	call printf
   705                                          LEAVE
    49 000006FC C9                  <1>  leave
   706 000006FD 488B3C24                	mov rdi, qword [rsp]
   707 00000701 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   708 00000705 E80DFDFFFF              	call print_sexpr
   709 0000070A 5F                      	pop rdi
   710 0000070B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   711 0000070F E95FFFFFFF              	jmp .Lcdr
   712                                  
   713                                  .Lvector:
   714 00000714 488B4701                	mov rax, qword [rdi + 1] ; length
   715 00000718 4883F800                	cmp rax, 0
   716 0000071C 0F8482000000            	je .Lvector_empty
   717 00000722 57                      	push rdi
   718 00000723 48BF-                   	mov rdi, fmt_vector
   718 00000725 [6002000000000000] 
   719 0000072D B800000000              	mov rax, 0
   720                                          ENTER
    44 00000732 C8000000            <1>  enter 0, 0
    45 00000736 4883E4F0            <1>  and rsp, ~15
   721 0000073A E8(00000000)            	call printf
   722                                          LEAVE
    49 0000073F C9                  <1>  leave
   723 00000740 488B3C24                	mov rdi, qword [rsp]
   724 00000744 FF7701                  	push qword [rdi + 1]
   725 00000747 6A01                    	push 1
   726 00000749 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   727 0000074D E8C5FCFFFF              	call print_sexpr
   728                                  .Lvector_loop:
   729                                  	; [rsp] index
   730                                  	; [rsp + 8*1] limit
   731                                  	; [rsp + 8*2] vector
   732 00000752 488B0424                	mov rax, qword [rsp]
   733 00000756 483B442408              	cmp rax, qword [rsp + 8*1]
   734 0000075B 7434                    	je .Lvector_end
   735 0000075D 48BF-                   	mov rdi, fmt_space
   735 0000075F [5A02000000000000] 
   736 00000767 B800000000              	mov rax, 0
   737                                          ENTER
    44 0000076C C8000000            <1>  enter 0, 0
    45 00000770 4883E4F0            <1>  and rsp, ~15
   738 00000774 E8(00000000)            	call printf
   739                                          LEAVE
    49 00000779 C9                  <1>  leave
   740 0000077A 488B0424                	mov rax, qword [rsp]
   741 0000077E 488B5C2410              	mov rbx, qword [rsp + 8*2]
   742 00000783 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   743 00000788 E88AFCFFFF              	call print_sexpr
   744 0000078D 48FF0424                	inc qword [rsp]
   745 00000791 EBBF                    	jmp .Lvector_loop
   746                                  
   747                                  .Lvector_end:
   748 00000793 4883C418                	add rsp, 8*3
   749 00000797 48BF-                   	mov rdi, fmt_rparen
   749 00000799 [5802000000000000] 
   750 000007A1 E9F1010000              	jmp .Lemit	
   751                                  
   752                                  .Lvector_empty:
   753 000007A6 48BF-                   	mov rdi, fmt_empty_vector
   753 000007A8 [5C02000000000000] 
   754 000007B0 E9E2010000              	jmp .Lemit
   755                                  
   756                                  .Lreal:
   757 000007B5 FF7701                  	push qword [rdi + 1]
   758 000007B8 F20F100424              	movsd xmm0, qword [rsp]
   759 000007BD 4883C408                	add rsp, 8*1
   760 000007C1 48BF-                   	mov rdi, fmt_real
   760 000007C3 [6302000000000000] 
   761 000007CB B801000000              	mov rax, 1
   762                                  	ENTER
    44 000007D0 C8000000            <1>  enter 0, 0
    45 000007D4 4883E4F0            <1>  and rsp, ~15
   763 000007D8 E8(00000000)            	call printf
   764                                  	LEAVE
    49 000007DD C9                  <1>  leave
   765 000007DE E9C9010000              	jmp .Lend
   766                                  
   767                                  .Lfraction:
   768 000007E3 488B7701                	mov rsi, qword [rdi + 1]
   769 000007E7 488B5709                	mov rdx, qword [rdi + 1 + 8]
   770 000007EB 4883FE00                	cmp rsi, 0
   771 000007EF 7413                    	je .Lrat_zero
   772 000007F1 4883FA01                	cmp rdx, 1
   773 000007F5 741C                    	je .Lrat_int
   774 000007F7 48BF-                   	mov rdi, fmt_fraction
   774 000007F9 [6602000000000000] 
   775 00000801 E991010000              	jmp .Lemit
   776                                  
   777                                  .Lrat_zero:
   778 00000806 48BF-                   	mov rdi, fmt_zero
   778 00000808 [6E02000000000000] 
   779 00000810 E982010000              	jmp .Lemit
   780                                  
   781                                  .Lrat_int:
   782 00000815 48BF-                   	mov rdi, fmt_int
   782 00000817 [7002000000000000] 
   783 0000081F E973010000              	jmp .Lemit
   784                                  
   785                                  .Linteger:
   786 00000824 488B7701                	mov rsi, qword [rdi + 1]
   787 00000828 48BF-                   	mov rdi, fmt_int
   787 0000082A [7002000000000000] 
   788 00000832 E960010000              	jmp .Lemit
   789                                  
   790                                  .Lstring:
   791 00000837 488D4709                	lea rax, [rdi + 1 + 8]
   792 0000083B 50                      	push rax
   793 0000083C FF7701                  	push qword [rdi + 1]
   794 0000083F 48BF-                   	mov rdi, fmt_dquote
   794 00000841 [B902000000000000] 
   795 00000849 B800000000              	mov rax, 0
   796                                  	ENTER
    44 0000084E C8000000            <1>  enter 0, 0
    45 00000852 4883E4F0            <1>  and rsp, ~15
   797 00000856 E8(00000000)            	call printf
   798                                  	LEAVE
    49 0000085B C9                  <1>  leave
   799                                  .Lstring_loop:
   800                                  	; qword [rsp]: limit
   801                                  	; qword [rsp + 8*1]: char *
   802 0000085C 48833C2400              	cmp qword [rsp], 0
   803 00000861 0F84ED000000            	je .Lstring_end
   804 00000867 488B442408              	mov rax, qword [rsp + 8*1]
   805 0000086C 8A00                    	mov al, byte [rax]
   806 0000086E 4825FF000000            	and rax, 255
   807 00000874 3C07                    	cmp al, 7
   808 00000876 745B                            je .Lstring_char_7
   809 00000878 3C08                            cmp al, 8
   810 0000087A 7463                            je .Lstring_char_8
   811 0000087C 3C09                            cmp al, 9
   812 0000087E 746B                            je .Lstring_char_9
   813 00000880 3C0A                            cmp al, 10
   814 00000882 7473                            je .Lstring_char_10
   815 00000884 3C0B                            cmp al, 11
   816 00000886 747B                            je .Lstring_char_11
   817 00000888 3C0C                            cmp al, 12
   818 0000088A 0F847F000000                    je .Lstring_char_12
   819 00000890 3C0D                            cmp al, 13
   820 00000892 0F8483000000                    je .Lstring_char_13
   821 00000898 3C22                            cmp al, 34
   822 0000089A 0F8487000000                    je .Lstring_char_34
   823 000008A0 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   825 000008A2 3C20                            cmp al, ' '
   826 000008A4 0F8C98000000                    jl .Lstring_char_hex
   827 000008AA 48BF-                           mov rdi, fmt_string_char
   827 000008AC [BB02000000000000] 
   828 000008B4 4889C6                          mov rsi, rax
   829                                  .Lstring_char_emit:
   830 000008B7 B800000000                      mov rax, 0
   831                                          ENTER
    44 000008BC C8000000            <1>  enter 0, 0
    45 000008C0 4883E4F0            <1>  and rsp, ~15
   832 000008C4 E8(00000000)                    call printf
   833                                          LEAVE
    49 000008C9 C9                  <1>  leave
   834 000008CA 48FF0C24                        dec qword [rsp]
   835 000008CE 48FF442408                      inc qword [rsp + 8*1]
   836 000008D3 EB87                            jmp .Lstring_loop
   837                                  
   838                                  .Lstring_char_7:
   839 000008D5 48BF-                           mov rdi, fmt_string_char_7
   839 000008D7 [BE02000000000000] 
   840 000008DF EBD6                            jmp .Lstring_char_emit
   841                                  
   842                                  .Lstring_char_8:
   843 000008E1 48BF-                           mov rdi, fmt_string_char_8
   843 000008E3 [C102000000000000] 
   844 000008EB EBCA                            jmp .Lstring_char_emit
   845                                          
   846                                  .Lstring_char_9:
   847 000008ED 48BF-                           mov rdi, fmt_string_char_9
   847 000008EF [C402000000000000] 
   848 000008F7 EBBE                            jmp .Lstring_char_emit
   849                                  
   850                                  .Lstring_char_10:
   851 000008F9 48BF-                           mov rdi, fmt_string_char_10
   851 000008FB [C702000000000000] 
   852 00000903 EBB2                            jmp .Lstring_char_emit
   853                                  
   854                                  .Lstring_char_11:
   855 00000905 48BF-                           mov rdi, fmt_string_char_11
   855 00000907 [CA02000000000000] 
   856 0000090F EBA6                            jmp .Lstring_char_emit
   857                                  
   858                                  .Lstring_char_12:
   859 00000911 48BF-                           mov rdi, fmt_string_char_12
   859 00000913 [CD02000000000000] 
   860 0000091B EB9A                            jmp .Lstring_char_emit
   861                                  
   862                                  .Lstring_char_13:
   863 0000091D 48BF-                           mov rdi, fmt_string_char_13
   863 0000091F [D002000000000000] 
   864 00000927 EB8E                            jmp .Lstring_char_emit
   865                                  
   866                                  .Lstring_char_34:
   867 00000929 48BF-                           mov rdi, fmt_string_char_34
   867 0000092B [D302000000000000] 
   868 00000933 EB82                            jmp .Lstring_char_emit
   869                                  
   870                                  .Lstring_char_92:
   871 00000935 48BF-                           mov rdi, fmt_string_char_92
   871 00000937 [D602000000000000] 
   872 0000093F E973FFFFFF                      jmp .Lstring_char_emit
   873                                  
   874                                  .Lstring_char_hex:
   875 00000944 48BF-                           mov rdi, fmt_string_char_hex
   875 00000946 [D902000000000000] 
   876 0000094E 4889C6                          mov rsi, rax
   877 00000951 E961FFFFFF                      jmp .Lstring_char_emit        
   878                                  
   879                                  .Lstring_end:
   880 00000956 4883C410                	add rsp, 8 * 2
   881 0000095A 48BF-                   	mov rdi, fmt_dquote
   881 0000095C [B902000000000000] 
   882 00000964 EB31                    	jmp .Lemit
   883                                  
   884                                  .Lunknown_sexpr_type:
   885 00000966 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
   885 00000968 [7402000000000000] 
   886 00000970 4825FF000000            	and rax, 255
   887 00000976 4889C2                  	mov rdx, rax
   888 00000979 4889F9                  	mov rcx, rdi
   889 0000097C 488B3C25[00000000]      	mov rdi, qword [stderr]
   890 00000984 B800000000              	mov rax, 0
   891                                          ENTER
    44 00000989 C8000000            <1>  enter 0, 0
    45 0000098D 4883E4F0            <1>  and rsp, ~15
   892 00000991 E8(00000000)            	call fprintf
   893                                          LEAVE
    49 00000996 C9                  <1>  leave
   894 00000997 C9                              leave
   895 00000998 C3                              ret
   896                                  
   897                                  .Lemit:
   898 00000999 B800000000              	mov rax, 0
   899                                          ENTER
    44 0000099E C8000000            <1>  enter 0, 0
    45 000009A2 4883E4F0            <1>  and rsp, ~15
   900 000009A6 E8(00000000)            	call printf
   901                                          LEAVE
    49 000009AB C9                  <1>  leave
   902 000009AC EBFE                    	jmp .Lend
   903                                  
   904                                  .Lend:
   905                                  	LEAVE
    49 000009AE C9                  <1>  leave
   906 000009AF C3                      	ret
   907                                  
   908                                  ;;; rdi: address of free variable
   909                                  ;;; rsi: address of code-pointer
   910                                  bind_primitive:
   911 000009B0 C8000000                        enter 0, 0
   912 000009B4 57                              push rdi
   913 000009B5 BF11000000                      mov rdi, (1 + 8 + 8)
   914 000009BA E8D7F7FFFF                      call malloc
   915 000009BF 5F                              pop rdi
   916 000009C0 C60004                          mov byte [rax], T_closure
   917 000009C3 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
   918 000009CB 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
   919 000009CF 488907                          mov qword [rdi], rax
   920 000009D2 48B8-                           mov rax, sob_void
   920 000009D4 [0000000000000000] 
   921 000009DC C9                              leave
   922 000009DD C3                              ret
   923                                  
   924                                  L_code_ptr_ash:
   925 000009DE C8000000                        enter 0, 0
   926 000009E2 48837D1802                      cmp COUNT, 2
   927 000009E7 0F850E140000                    jne L_error_arg_count_2
   928 000009ED 488B7D20                        mov rdi, PARAM(0)
   929                                          assert_integer(rdi)
    53 000009F1 803F11              <1>  cmp byte [%1], %2
    54 000009F4 0F85A0140000        <1>  jne L_error_incorrect_type
   930 000009FA 488B4D28                        mov rcx, PARAM(1)
   931                                          assert_integer(rcx)
    53 000009FE 803911              <1>  cmp byte [%1], %2
    54 00000A01 0F8593140000        <1>  jne L_error_incorrect_type
   932 00000A07 488B7F01                        mov rdi, qword [rdi + 1]
   933 00000A0B 488B4901                        mov rcx, qword [rcx + 1]
   934 00000A0F 4883F900                        cmp rcx, 0
   935 00000A13 7C0D                            jl .L_negative
   936                                  .L_loop_positive:
   937 00000A15 4883F900                        cmp rcx, 0
   938 00000A19 7419                            je .L_exit
   939 00000A1B 48D3E7                          sal rdi, cl
   940 00000A1E 48C1E908                        shr rcx, 8
   941 00000A22 EBF1                            jmp .L_loop_positive
   942                                  .L_negative:
   943 00000A24 48F7D9                          neg rcx
   944                                  .L_loop_negative:
   945 00000A27 4883F900                        cmp rcx, 0
   946 00000A2B 7407                            je .L_exit
   947 00000A2D 48D3FF                          sar rdi, cl
   948 00000A30 48C1E908                        shr rcx, 8
   949 00000A34 EBF1                            jmp .L_loop_negative
   950                                  .L_exit:
   951 00000A36 E8DA120000                      call make_integer
   952 00000A3B C9                              leave
   953 00000A3C C22000                          ret AND_KILL_FRAME(2)
   954                                  
   955                                  L_code_ptr_logand:
   956 00000A3F C8000000                        enter 0, 0
   957 00000A43 48837D1802                      cmp COUNT, 2
   958 00000A48 0F85AD130000                    jne L_error_arg_count_2
   959 00000A4E 4C8B4520                        mov r8, PARAM(0)
   960                                          assert_integer(r8)
    53 00000A52 41803811            <1>  cmp byte [%1], %2
    54 00000A56 0F853E140000        <1>  jne L_error_incorrect_type
   961 00000A5C 4C8B4D28                        mov r9, PARAM(1)
   962                                          assert_integer(r9)
    53 00000A60 41803911            <1>  cmp byte [%1], %2
    54 00000A64 0F8530140000        <1>  jne L_error_incorrect_type
   963 00000A6A 498B7801                        mov rdi, qword [r8 + 1]
   964 00000A6E 49237901                        and rdi, qword [r9 + 1]
   965 00000A72 E89E120000                      call make_integer
   966 00000A77 C9                              leave
   967 00000A78 C22000                          ret AND_KILL_FRAME(2)
   968                                  
   969                                  L_code_ptr_logor:
   970 00000A7B C8000000                        enter 0, 0
   971 00000A7F 48837D1802                      cmp COUNT, 2
   972 00000A84 0F8571130000                    jne L_error_arg_count_2
   973 00000A8A 4C8B4520                        mov r8, PARAM(0)
   974                                          assert_integer(r8)
    53 00000A8E 41803811            <1>  cmp byte [%1], %2
    54 00000A92 0F8502140000        <1>  jne L_error_incorrect_type
   975 00000A98 4C8B4D28                        mov r9, PARAM(1)
   976                                          assert_integer(r9)
    53 00000A9C 41803911            <1>  cmp byte [%1], %2
    54 00000AA0 0F85F4130000        <1>  jne L_error_incorrect_type
   977 00000AA6 498B7801                        mov rdi, qword [r8 + 1]
   978 00000AAA 490B7901                        or rdi, qword [r9 + 1]
   979 00000AAE E862120000                      call make_integer
   980 00000AB3 C9                              leave
   981 00000AB4 C22000                          ret AND_KILL_FRAME(2)
   982                                  
   983                                  L_code_ptr_logxor:
   984 00000AB7 C8000000                        enter 0, 0
   985 00000ABB 48837D1802                      cmp COUNT, 2
   986 00000AC0 0F8535130000                    jne L_error_arg_count_2
   987 00000AC6 4C8B4520                        mov r8, PARAM(0)
   988                                          assert_integer(r8)
    53 00000ACA 41803811            <1>  cmp byte [%1], %2
    54 00000ACE 0F85C6130000        <1>  jne L_error_incorrect_type
   989 00000AD4 4C8B4D28                        mov r9, PARAM(1)
   990                                          assert_integer(r9)
    53 00000AD8 41803911            <1>  cmp byte [%1], %2
    54 00000ADC 0F85B8130000        <1>  jne L_error_incorrect_type
   991 00000AE2 498B7801                        mov rdi, qword [r8 + 1]
   992 00000AE6 49337901                        xor rdi, qword [r9 + 1]
   993 00000AEA E826120000                      call make_integer
   994                                          LEAVE
    49 00000AEF C9                  <1>  leave
   995 00000AF0 C22000                          ret AND_KILL_FRAME(2)
   996                                  
   997                                  L_code_ptr_lognot:
   998 00000AF3 C8000000                        enter 0, 0
   999 00000AF7 48837D1801                      cmp COUNT, 1
  1000 00000AFC 0F85C4120000                    jne L_error_arg_count_1
  1001 00000B02 4C8B4520                        mov r8, PARAM(0)
  1002                                          assert_integer(r8)
    53 00000B06 41803811            <1>  cmp byte [%1], %2
    54 00000B0A 0F858A130000        <1>  jne L_error_incorrect_type
  1003 00000B10 498B7801                        mov rdi, qword [r8 + 1]
  1004 00000B14 48F7D7                          not rdi
  1005 00000B17 E8F9110000                      call make_integer
  1006 00000B1C C9                              leave
  1007 00000B1D C21800                          ret AND_KILL_FRAME(1)
  1008                                  
  1009                                  L_code_ptr_bin_apply:
  1010                                  ;;; fill in for final project!
  1011                                  
  1012                                  L_code_ptr_is_null:
  1013 00000B20 C8000000                        enter 0, 0
  1014 00000B24 48837D1801                      cmp COUNT, 1
  1015 00000B29 0F8597120000                    jne L_error_arg_count_1
  1016 00000B2F 488B4520                        mov rax, PARAM(0)
  1017 00000B33 803801                          cmp byte [rax], T_nil
  1018 00000B36 750A                            jne .L_false
  1019 00000B38 48B8-                           mov rax, sob_boolean_true
  1019 00000B3A [0300000000000000] 
  1020 00000B42 EB08                            jmp .L_end
  1021                                  .L_false:
  1022 00000B44 48B8-                           mov rax, sob_boolean_false
  1022 00000B46 [0200000000000000] 
  1023                                  .L_end:
  1024 00000B4E C9                              leave
  1025 00000B4F C21800                          ret AND_KILL_FRAME(1)
  1026                                  
  1027                                  L_code_ptr_is_pair:
  1028 00000B52 C8000000                        enter 0, 0
  1029 00000B56 48837D1801                      cmp COUNT, 1
  1030 00000B5B 0F8565120000                    jne L_error_arg_count_1
  1031 00000B61 488B4520                        mov rax, PARAM(0)
  1032 00000B65 803821                          cmp byte [rax], T_pair
  1033 00000B68 750A                            jne .L_false
  1034 00000B6A 48B8-                           mov rax, sob_boolean_true
  1034 00000B6C [0300000000000000] 
  1035 00000B74 EB08                            jmp .L_end
  1036                                  .L_false:
  1037 00000B76 48B8-                           mov rax, sob_boolean_false
  1037 00000B78 [0200000000000000] 
  1038                                  .L_end:
  1039 00000B80 C9                              leave
  1040 00000B81 C21800                          ret AND_KILL_FRAME(1)
  1041                                          
  1042                                  L_code_ptr_is_void:
  1043 00000B84 C8000000                        enter 0, 0
  1044 00000B88 48837D1801                      cmp COUNT, 1
  1045 00000B8D 0F8533120000                    jne L_error_arg_count_1
  1046 00000B93 488B4520                        mov rax, PARAM(0)
  1047 00000B97 803800                          cmp byte [rax], T_void
  1048 00000B9A 750A                            jne .L_false
  1049 00000B9C 48B8-                           mov rax, sob_boolean_true
  1049 00000B9E [0300000000000000] 
  1050 00000BA6 EB08                            jmp .L_end
  1051                                  .L_false:
  1052 00000BA8 48B8-                           mov rax, sob_boolean_false
  1052 00000BAA [0200000000000000] 
  1053                                  .L_end:
  1054 00000BB2 C9                              leave
  1055 00000BB3 C21800                          ret AND_KILL_FRAME(1)
  1056                                  
  1057                                  L_code_ptr_is_char:
  1058 00000BB6 C8000000                        enter 0, 0
  1059 00000BBA 48837D1801                      cmp COUNT, 1
  1060 00000BBF 0F8501120000                    jne L_error_arg_count_1
  1061 00000BC5 488B4520                        mov rax, PARAM(0)
  1062 00000BC9 803802                          cmp byte [rax], T_char
  1063 00000BCC 750A                            jne .L_false
  1064 00000BCE 48B8-                           mov rax, sob_boolean_true
  1064 00000BD0 [0300000000000000] 
  1065 00000BD8 EB08                            jmp .L_end
  1066                                  .L_false:
  1067 00000BDA 48B8-                           mov rax, sob_boolean_false
  1067 00000BDC [0200000000000000] 
  1068                                  .L_end:
  1069 00000BE4 C9                              leave
  1070 00000BE5 C21800                          ret AND_KILL_FRAME(1)
  1071                                  
  1072                                  L_code_ptr_is_string:
  1073 00000BE8 C8000000                        enter 0, 0
  1074 00000BEC 48837D1801                      cmp COUNT, 1
  1075 00000BF1 0F85CF110000                    jne L_error_arg_count_1
  1076 00000BF7 488B4520                        mov rax, PARAM(0)
  1077 00000BFB 803803                          cmp byte [rax], T_string
  1078 00000BFE 750A                            jne .L_false
  1079 00000C00 48B8-                           mov rax, sob_boolean_true
  1079 00000C02 [0300000000000000] 
  1080 00000C0A EB08                            jmp .L_end
  1081                                  .L_false:
  1082 00000C0C 48B8-                           mov rax, sob_boolean_false
  1082 00000C0E [0200000000000000] 
  1083                                  .L_end:
  1084 00000C16 C9                              leave
  1085 00000C17 C21800                          ret AND_KILL_FRAME(1)
  1086                                  
  1087                                  L_code_ptr_is_symbol:
  1088 00000C1A C8000000                        enter 0, 0
  1089 00000C1E 48837D1801                      cmp COUNT, 1
  1090 00000C23 0F859D110000                    jne L_error_arg_count_1
  1091 00000C29 4C8B4520                        mov r8, PARAM(0)
  1092 00000C2D 41802040                        and byte [r8], T_symbol
  1093 00000C31 740A                            jz .L_false
  1094 00000C33 48B8-                           mov rax, sob_boolean_true
  1094 00000C35 [0300000000000000] 
  1095 00000C3D EB08                            jmp .L_exit
  1096                                  .L_false:
  1097 00000C3F 48B8-                           mov rax, sob_boolean_false
  1097 00000C41 [0200000000000000] 
  1098                                  .L_exit:
  1099 00000C49 C9                              leave
  1100 00000C4A C21800                          ret AND_KILL_FRAME(1)
  1101                                  
  1102                                  L_code_ptr_is_uninterned_symbol:
  1103 00000C4D C8000000                        enter 0, 0
  1104 00000C51 48837D1801                      cmp COUNT, 1
  1105 00000C56 0F856A110000                    jne L_error_arg_count_1
  1106 00000C5C 4C8B4520                        mov r8, PARAM(0)
  1107 00000C60 41803842                        cmp byte [r8], T_uninterned_symbol
  1108 00000C64 750A                            jne .L_false
  1109 00000C66 48B8-                           mov rax, sob_boolean_true
  1109 00000C68 [0300000000000000] 
  1110 00000C70 EB08                            jmp .L_exit
  1111                                  .L_false:
  1112 00000C72 48B8-                           mov rax, sob_boolean_false
  1112 00000C74 [0200000000000000] 
  1113                                  .L_exit:
  1114 00000C7C C9                              leave
  1115 00000C7D C21800                          ret AND_KILL_FRAME(1)
  1116                                  
  1117                                  L_code_ptr_is_interned_symbol:
  1118 00000C80 C8000000                        enter 0, 0
  1119 00000C84 48837D1801                      cmp COUNT, 1
  1120 00000C89 0F8537110000                    jne L_error_arg_count_1
  1121 00000C8F 488B4520                        mov rax, PARAM(0)
  1122 00000C93 803841                          cmp byte [rax], T_interned_symbol
  1123 00000C96 750A                            jne .L_false
  1124 00000C98 48B8-                           mov rax, sob_boolean_true
  1124 00000C9A [0300000000000000] 
  1125 00000CA2 EB08                            jmp .L_end
  1126                                  .L_false:
  1127 00000CA4 48B8-                           mov rax, sob_boolean_false
  1127 00000CA6 [0200000000000000] 
  1128                                  .L_end:
  1129 00000CAE C9                              leave
  1130 00000CAF C21800                          ret AND_KILL_FRAME(1)
  1131                                  
  1132                                  L_code_ptr_gensym:
  1133 00000CB2 C8000000                        enter 0, 0
  1134 00000CB6 48837D1800                      cmp COUNT, 0
  1135 00000CBB 0F85D0100000                    jne L_error_arg_count_0
  1136 00000CC1 48FF0425[DF020000]              inc qword [gensym_count]
  1137 00000CC9 BF09000000                      mov rdi, (1 + 8)
  1138 00000CCE E8C3F4FFFF                      call malloc
  1139 00000CD3 C60042                          mov byte [rax], T_uninterned_symbol
  1140 00000CD6 488B0C25[DF020000]              mov rcx, qword [gensym_count]
  1141 00000CDE 48894801                        mov qword [rax + 1], rcx
  1142 00000CE2 C9                              leave
  1143 00000CE3 C21000                          ret AND_KILL_FRAME(0)
  1144                                  
  1145                                  L_code_ptr_is_vector:
  1146 00000CE6 C8000000                        enter 0, 0
  1147 00000CEA 48837D1801                      cmp COUNT, 1
  1148 00000CEF 0F85D1100000                    jne L_error_arg_count_1
  1149 00000CF5 488B4520                        mov rax, PARAM(0)
  1150 00000CF9 803822                          cmp byte [rax], T_vector
  1151 00000CFC 750A                            jne .L_false
  1152 00000CFE 48B8-                           mov rax, sob_boolean_true
  1152 00000D00 [0300000000000000] 
  1153 00000D08 EB08                            jmp .L_end
  1154                                  .L_false:
  1155 00000D0A 48B8-                           mov rax, sob_boolean_false
  1155 00000D0C [0200000000000000] 
  1156                                  .L_end:
  1157 00000D14 C9                              leave
  1158 00000D15 C21800                          ret AND_KILL_FRAME(1)
  1159                                  
  1160                                  L_code_ptr_is_closure:
  1161 00000D18 C8000000                        enter 0, 0
  1162 00000D1C 48837D1801                      cmp COUNT, 1
  1163 00000D21 0F859F100000                    jne L_error_arg_count_1
  1164 00000D27 488B4520                        mov rax, PARAM(0)
  1165 00000D2B 803804                          cmp byte [rax], T_closure
  1166 00000D2E 750A                            jne .L_false
  1167 00000D30 48B8-                           mov rax, sob_boolean_true
  1167 00000D32 [0300000000000000] 
  1168 00000D3A EB08                            jmp .L_end
  1169                                  .L_false:
  1170 00000D3C 48B8-                           mov rax, sob_boolean_false
  1170 00000D3E [0200000000000000] 
  1171                                  .L_end:
  1172 00000D46 C9                              leave
  1173 00000D47 C21800                          ret AND_KILL_FRAME(1)
  1174                                  
  1175                                  L_code_ptr_is_real:
  1176 00000D4A C8000000                        enter 0, 0
  1177 00000D4E 48837D1801                      cmp COUNT, 1
  1178 00000D53 0F856D100000                    jne L_error_arg_count_1
  1179 00000D59 488B4520                        mov rax, PARAM(0)
  1180 00000D5D 803813                          cmp byte [rax], T_real
  1181 00000D60 750A                            jne .L_false
  1182 00000D62 48B8-                           mov rax, sob_boolean_true
  1182 00000D64 [0300000000000000] 
  1183 00000D6C EB08                            jmp .L_end
  1184                                  .L_false:
  1185 00000D6E 48B8-                           mov rax, sob_boolean_false
  1185 00000D70 [0200000000000000] 
  1186                                  .L_end:
  1187 00000D78 C9                              leave
  1188 00000D79 C21800                          ret AND_KILL_FRAME(1)
  1189                                  
  1190                                  L_code_ptr_is_fraction:
  1191 00000D7C C8000000                        enter 0, 0
  1192 00000D80 48837D1801                      cmp COUNT, 1
  1193 00000D85 0F853B100000                    jne L_error_arg_count_1
  1194 00000D8B 488B4520                        mov rax, PARAM(0)
  1195 00000D8F 803812                          cmp byte [rax], T_fraction
  1196 00000D92 750A                            jne .L_false
  1197 00000D94 48B8-                           mov rax, sob_boolean_true
  1197 00000D96 [0300000000000000] 
  1198 00000D9E EB08                            jmp .L_end
  1199                                  .L_false:
  1200 00000DA0 48B8-                           mov rax, sob_boolean_false
  1200 00000DA2 [0200000000000000] 
  1201                                  .L_end:
  1202 00000DAA C9                              leave
  1203 00000DAB C21800                          ret AND_KILL_FRAME(1)
  1204                                  
  1205                                  L_code_ptr_is_boolean:
  1206 00000DAE C8000000                        enter 0, 0
  1207 00000DB2 48837D1801                      cmp COUNT, 1
  1208 00000DB7 0F8509100000                    jne L_error_arg_count_1
  1209 00000DBD 488B4520                        mov rax, PARAM(0)
  1210 00000DC1 8A18                            mov bl, byte [rax]
  1211 00000DC3 80E308                          and bl, T_boolean
  1212 00000DC6 740A                            je .L_false
  1213 00000DC8 48B8-                           mov rax, sob_boolean_true
  1213 00000DCA [0300000000000000] 
  1214 00000DD2 EB08                            jmp .L_end
  1215                                  .L_false:
  1216 00000DD4 48B8-                           mov rax, sob_boolean_false
  1216 00000DD6 [0200000000000000] 
  1217                                  .L_end:
  1218 00000DDE C9                              leave
  1219 00000DDF C21800                          ret AND_KILL_FRAME(1)
  1220                                          
  1221                                  L_code_ptr_is_boolean_false:
  1222 00000DE2 C8000000                        enter 0, 0
  1223 00000DE6 48837D1801                      cmp COUNT, 1
  1224 00000DEB 0F85D50F0000                    jne L_error_arg_count_1
  1225 00000DF1 488B4520                        mov rax, PARAM(0)
  1226 00000DF5 8A18                            mov bl, byte [rax]
  1227 00000DF7 80FB09                          cmp bl, T_boolean_false
  1228 00000DFA 750A                            jne .L_false
  1229 00000DFC 48B8-                           mov rax, sob_boolean_true
  1229 00000DFE [0300000000000000] 
  1230 00000E06 EB08                            jmp .L_end
  1231                                  .L_false:
  1232 00000E08 48B8-                           mov rax, sob_boolean_false
  1232 00000E0A [0200000000000000] 
  1233                                  .L_end:
  1234 00000E12 C9                              leave
  1235 00000E13 C21800                          ret AND_KILL_FRAME(1)
  1236                                  
  1237                                  L_code_ptr_is_boolean_true:
  1238 00000E16 C8000000                        enter 0, 0
  1239 00000E1A 48837D1801                      cmp COUNT, 1
  1240 00000E1F 0F85A10F0000                    jne L_error_arg_count_1
  1241 00000E25 488B4520                        mov rax, PARAM(0)
  1242 00000E29 8A18                            mov bl, byte [rax]
  1243 00000E2B 80FB0A                          cmp bl, T_boolean_true
  1244 00000E2E 750A                            jne .L_false
  1245 00000E30 48B8-                           mov rax, sob_boolean_true
  1245 00000E32 [0300000000000000] 
  1246 00000E3A EB08                            jmp .L_end
  1247                                  .L_false:
  1248 00000E3C 48B8-                           mov rax, sob_boolean_false
  1248 00000E3E [0200000000000000] 
  1249                                  .L_end:
  1250 00000E46 C9                              leave
  1251 00000E47 C21800                          ret AND_KILL_FRAME(1)
  1252                                  
  1253                                  L_code_ptr_is_number:
  1254 00000E4A C8000000                        enter 0, 0
  1255 00000E4E 48837D1801                      cmp COUNT, 1
  1256 00000E53 0F856D0F0000                    jne L_error_arg_count_1
  1257 00000E59 488B4520                        mov rax, PARAM(0)
  1258 00000E5D 8A18                            mov bl, byte [rax]
  1259 00000E5F 80E310                          and bl, T_number
  1260 00000E62 740A                            jz .L_false
  1261 00000E64 48B8-                           mov rax, sob_boolean_true
  1261 00000E66 [0300000000000000] 
  1262 00000E6E EB08                            jmp .L_end
  1263                                  .L_false:
  1264 00000E70 48B8-                           mov rax, sob_boolean_false
  1264 00000E72 [0200000000000000] 
  1265                                  .L_end:
  1266 00000E7A C9                              leave
  1267 00000E7B C21800                          ret AND_KILL_FRAME(1)
  1268                                          
  1269                                  L_code_ptr_is_collection:
  1270 00000E7E C8000000                        enter 0, 0
  1271 00000E82 48837D1801                      cmp COUNT, 1
  1272 00000E87 0F85390F0000                    jne L_error_arg_count_1
  1273 00000E8D 488B4520                        mov rax, PARAM(0)
  1274 00000E91 8A18                            mov bl, byte [rax]
  1275 00000E93 80E320                          and bl, T_collection
  1276 00000E96 740A                            je .L_false
  1277 00000E98 48B8-                           mov rax, sob_boolean_true
  1277 00000E9A [0300000000000000] 
  1278 00000EA2 EB08                            jmp .L_end
  1279                                  .L_false:
  1280 00000EA4 48B8-                           mov rax, sob_boolean_false
  1280 00000EA6 [0200000000000000] 
  1281                                  .L_end:
  1282 00000EAE C9                              leave
  1283 00000EAF C21800                          ret AND_KILL_FRAME(1)
  1284                                  
  1285                                  L_code_ptr_cons:
  1286 00000EB2 C8000000                        enter 0, 0
  1287 00000EB6 48837D1802                      cmp COUNT, 2
  1288 00000EBB 0F853A0F0000                    jne L_error_arg_count_2
  1289 00000EC1 BF11000000                      mov rdi, (1 + 8 + 8)
  1290 00000EC6 E8CBF2FFFF                      call malloc
  1291 00000ECB C60021                          mov byte [rax], T_pair
  1292 00000ECE 488B5D20                        mov rbx, PARAM(0)
  1293 00000ED2 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1294 00000ED6 488B5D28                        mov rbx, PARAM(1)
  1295 00000EDA 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1296 00000EDE C9                              leave
  1297 00000EDF C22000                          ret AND_KILL_FRAME(2)
  1298                                  
  1299                                  L_code_ptr_display_sexpr:
  1300 00000EE2 C8000000                        enter 0, 0
  1301 00000EE6 48837D1801                      cmp COUNT, 1
  1302 00000EEB 0F85D50E0000                    jne L_error_arg_count_1
  1303 00000EF1 488B7D20                        mov rdi, PARAM(0)
  1304 00000EF5 E81DF5FFFF                      call print_sexpr
  1305 00000EFA 48B8-                           mov rax, sob_void
  1305 00000EFC [0000000000000000] 
  1306 00000F04 C9                              leave
  1307 00000F05 C21800                          ret AND_KILL_FRAME(1)
  1308                                  
  1309                                  L_code_ptr_write_char:
  1310 00000F08 C8000000                        enter 0, 0
  1311 00000F0C 48837D1801                      cmp COUNT, 1
  1312 00000F11 0F85AF0E0000                    jne L_error_arg_count_1
  1313 00000F17 488B4520                        mov rax, PARAM(0)
  1314                                          assert_char(rax)
    53 00000F1B 803802              <1>  cmp byte [%1], %2
    54 00000F1E 0F85760F0000        <1>  jne L_error_incorrect_type
  1315 00000F24 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1316 00000F27 4825FF000000                    and rax, 255
  1317 00000F2D 48BF-                           mov rdi, fmt_char
  1317 00000F2F [E702000000000000] 
  1318 00000F37 4889C6                          mov rsi, rax
  1319 00000F3A B800000000                      mov rax, 0
  1320                                          ENTER
    44 00000F3F C8000000            <1>  enter 0, 0
    45 00000F43 4883E4F0            <1>  and rsp, ~15
  1321 00000F47 E8(00000000)                    call printf
  1322                                          LEAVE
    49 00000F4C C9                  <1>  leave
  1323 00000F4D 48B8-                           mov rax, sob_void
  1323 00000F4F [0000000000000000] 
  1324 00000F57 C9                              leave
  1325 00000F58 C21800                          ret AND_KILL_FRAME(1)
  1326                                  
  1327                                  L_code_ptr_car:
  1328 00000F5B C8000000                        enter 0, 0
  1329 00000F5F 48837D1801                      cmp COUNT, 1
  1330 00000F64 0F855C0E0000                    jne L_error_arg_count_1
  1331 00000F6A 488B4520                        mov rax, PARAM(0)
  1332                                          assert_pair(rax)
    53 00000F6E 803821              <1>  cmp byte [%1], %2
    54 00000F71 0F85230F0000        <1>  jne L_error_incorrect_type
  1333 00000F77 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1334 00000F7B C9                              leave
  1335 00000F7C C21800                          ret AND_KILL_FRAME(1)
  1336                                          
  1337                                  L_code_ptr_cdr:
  1338 00000F7F C8000000                        enter 0, 0
  1339 00000F83 48837D1801                      cmp COUNT, 1
  1340 00000F88 0F85380E0000                    jne L_error_arg_count_1
  1341 00000F8E 488B4520                        mov rax, PARAM(0)
  1342                                          assert_pair(rax)
    53 00000F92 803821              <1>  cmp byte [%1], %2
    54 00000F95 0F85FF0E0000        <1>  jne L_error_incorrect_type
  1343 00000F9B 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1344 00000F9F C9                              leave
  1345 00000FA0 C21800                          ret AND_KILL_FRAME(1)
  1346                                          
  1347                                  L_code_ptr_string_length:
  1348 00000FA3 C8000000                        enter 0, 0
  1349 00000FA7 48837D1801                      cmp COUNT, 1
  1350 00000FAC 0F85140E0000                    jne L_error_arg_count_1
  1351 00000FB2 488B4520                        mov rax, PARAM(0)
  1352                                          assert_string(rax)
    53 00000FB6 803803              <1>  cmp byte [%1], %2
    54 00000FB9 0F85DB0E0000        <1>  jne L_error_incorrect_type
  1353 00000FBF 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1354 00000FC3 E84D0D0000                      call make_integer
  1355 00000FC8 C9                              leave
  1356 00000FC9 C21800                          ret AND_KILL_FRAME(1)
  1357                                  
  1358                                  L_code_ptr_vector_length:
  1359 00000FCC C8000000                        enter 0, 0
  1360 00000FD0 48837D1801                      cmp COUNT, 1
  1361 00000FD5 0F85EB0D0000                    jne L_error_arg_count_1
  1362 00000FDB 488B4520                        mov rax, PARAM(0)
  1363                                          assert_vector(rax)
    53 00000FDF 803822              <1>  cmp byte [%1], %2
    54 00000FE2 0F85B20E0000        <1>  jne L_error_incorrect_type
  1364 00000FE8 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1365 00000FEC E8240D0000                      call make_integer
  1366 00000FF1 C9                              leave
  1367 00000FF2 C21800                          ret AND_KILL_FRAME(1)
  1368                                  
  1369                                  L_code_ptr_real_to_integer:
  1370 00000FF5 C8000000                        enter 0, 0
  1371 00000FF9 48837D1801                      cmp COUNT, 1
  1372 00000FFE 0F85C20D0000                    jne L_error_arg_count_1
  1373 00001004 488B5D20                        mov rbx, PARAM(0)
  1374                                          assert_real(rbx)
    53 00001008 803B13              <1>  cmp byte [%1], %2
    54 0000100B 0F85890E0000        <1>  jne L_error_incorrect_type
  1375 00001011 F20F104301                      movsd xmm0, qword [rbx + 1]
  1376 00001016 F2480F2CF8                      cvttsd2si rdi, xmm0
  1377 0000101B E8F50C0000                      call make_integer
  1378 00001020 C9                              leave
  1379 00001021 C21800                          ret AND_KILL_FRAME(1)
  1380                                  
  1381                                  L_code_ptr_exit:
  1382 00001024 C8000000                        enter 0, 0
  1383 00001028 48837D1800                      cmp COUNT, 0
  1384 0000102D 0F855E0D0000                    jne L_error_arg_count_0
  1385 00001033 B800000000                      mov rax, 0
  1386 00001038 E8(00000000)                    call exit
  1387                                  
  1388                                  L_code_ptr_integer_to_real:
  1389 0000103D C8000000                        enter 0, 0
  1390 00001041 48837D1801                      cmp COUNT, 1
  1391 00001046 0F857A0D0000                    jne L_error_arg_count_1
  1392 0000104C 488B4520                        mov rax, PARAM(0)
  1393                                          assert_integer(rax)
    53 00001050 803811              <1>  cmp byte [%1], %2
    54 00001053 0F85410E0000        <1>  jne L_error_incorrect_type
  1394 00001059 FF7001                          push qword [rax + 1]
  1395 0000105C F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1396 00001062 E8960C0000                      call make_real
  1397 00001067 C9                              leave
  1398 00001068 C21800                          ret AND_KILL_FRAME(1)
  1399                                  
  1400                                  L_code_ptr_fraction_to_real:
  1401 0000106B C8000000                        enter 0, 0
  1402 0000106F 48837D1801                      cmp COUNT, 1
  1403 00001074 0F854C0D0000                    jne L_error_arg_count_1
  1404 0000107A 488B4520                        mov rax, PARAM(0)
  1405                                          assert_fraction(rax)
    53 0000107E 803812              <1>  cmp byte [%1], %2
    54 00001081 0F85130E0000        <1>  jne L_error_incorrect_type
  1406 00001087 FF7001                          push qword [rax + 1]
  1407 0000108A F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1408 00001090 FF7009                          push qword [rax + 1 + 8]
  1409 00001093 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1410 00001099 F20F5EC1                        divsd xmm0, xmm1
  1411 0000109D E85B0C0000                      call make_real
  1412 000010A2 C9                              leave
  1413 000010A3 C21800                          ret AND_KILL_FRAME(1)
  1414                                  
  1415                                  L_code_ptr_char_to_integer:
  1416 000010A6 C8000000                        enter 0, 0
  1417 000010AA 48837D1801                      cmp COUNT, 1
  1418 000010AF 0F85110D0000                    jne L_error_arg_count_1
  1419 000010B5 488B4520                        mov rax, PARAM(0)
  1420                                          assert_char(rax)
    53 000010B9 803802              <1>  cmp byte [%1], %2
    54 000010BC 0F85D80D0000        <1>  jne L_error_incorrect_type
  1421 000010C2 8A4001                          mov al, byte [rax + 1]
  1422 000010C5 4825FF000000                    and rax, 255
  1423 000010CB 4889C7                          mov rdi, rax
  1424 000010CE E8420C0000                      call make_integer
  1425 000010D3 C9                              leave
  1426 000010D4 C21800                          ret AND_KILL_FRAME(1)
  1427                                  
  1428                                  L_code_ptr_integer_to_fraction:
  1429 000010D7 C8000000                        enter 0, 0
  1430 000010DB 48837D1801                      cmp COUNT, 1
  1431 000010E0 0F85E00C0000                    jne L_error_arg_count_1
  1432 000010E6 4C8B4520                        mov r8, PARAM(0)
  1433                                          assert_integer(r8)
    53 000010EA 41803811            <1>  cmp byte [%1], %2
    54 000010EE 0F85A60D0000        <1>  jne L_error_incorrect_type
  1434 000010F4 BF11000000                      mov rdi, (1 + 8 + 8)
  1435 000010F9 E898F0FFFF                      call malloc
  1436 000010FE 498B5801                        mov rbx, qword [r8 + 1]
  1437 00001102 C60012                          mov byte [rax], T_fraction
  1438 00001105 48895801                        mov qword [rax + 1], rbx
  1439 00001109 48C7400901000000                mov qword [rax + 1 + 8], 1
  1440 00001111 C9                              leave
  1441 00001112 C21800                          ret AND_KILL_FRAME(1)
  1442                                  
  1443                                  L_code_ptr_integer_to_char:
  1444 00001115 C8000000                        enter 0, 0
  1445 00001119 48837D1801                      cmp COUNT, 1
  1446 0000111E 0F85A20C0000                    jne L_error_arg_count_1
  1447 00001124 488B4520                        mov rax, PARAM(0)
  1448                                          assert_integer(rax)
    53 00001128 803811              <1>  cmp byte [%1], %2
    54 0000112B 0F85690D0000        <1>  jne L_error_incorrect_type
  1449 00001131 488B5801                        mov rbx, qword [rax + 1]
  1450 00001135 4883FB00                        cmp rbx, 0
  1451 00001139 0F8EF00B0000                    jle L_error_integer_range
  1452 0000113F 4881FB00010000                  cmp rbx, 256
  1453 00001146 0F8DE30B0000                    jge L_error_integer_range
  1454 0000114C BF02000000                      mov rdi, (1 + 1)
  1455 00001151 E840F0FFFF                      call malloc
  1456 00001156 C60002                          mov byte [rax], T_char
  1457 00001159 885801                          mov byte [rax + 1], bl
  1458 0000115C C9                              leave
  1459 0000115D C21800                          ret AND_KILL_FRAME(1)
  1460                                  
  1461                                  L_code_ptr_trng:
  1462 00001160 C8000000                        enter 0, 0
  1463 00001164 48837D1800                      cmp COUNT, 0
  1464 00001169 0F85220C0000                    jne L_error_arg_count_0
  1465 0000116F 480FC7F7                        rdrand rdi
  1466 00001173 48D1EF                          shr rdi, 1
  1467 00001176 E89A0B0000                      call make_integer
  1468 0000117B C9                              leave
  1469 0000117C C21000                          ret AND_KILL_FRAME(0)
  1470                                  
  1471                                  L_code_ptr_is_zero:
  1472 0000117F C8000000                        enter 0, 0
  1473 00001183 48837D1801                      cmp COUNT, 1
  1474 00001188 0F85380C0000                    jne L_error_arg_count_1
  1475 0000118E 488B4520                        mov rax, PARAM(0)
  1476 00001192 803811                          cmp byte [rax], T_integer
  1477 00001195 740D                            je .L_integer
  1478 00001197 803812                          cmp byte [rax], T_fraction
  1479 0000119A 7411                            je .L_fraction
  1480 0000119C 803813                          cmp byte [rax], T_real
  1481 0000119F 7415                            je .L_real
  1482 000011A1 E9F40C0000                      jmp L_error_incorrect_type
  1483                                  .L_integer:
  1484 000011A6 4883780100                      cmp qword [rax + 1], 0
  1485 000011AB 7427                            je .L_zero
  1486 000011AD EB19                            jmp .L_not_zero
  1487                                  .L_fraction:
  1488 000011AF 4883780100                      cmp qword [rax + 1], 0
  1489 000011B4 741E                            je .L_zero
  1490 000011B6 EB10                            jmp .L_not_zero
  1491                                  .L_real:
  1492 000011B8 660FEFC0                        pxor xmm0, xmm0
  1493 000011BC FF7001                          push qword [rax + 1]
  1494 000011BF F20F100C24                      movsd xmm1, qword [rsp]
  1495 000011C4 660F2EC1                        ucomisd xmm0, xmm1
  1496 000011C8 740A                            je .L_zero
  1497                                  .L_not_zero:
  1498 000011CA 48B8-                           mov rax, sob_boolean_false
  1498 000011CC [0200000000000000] 
  1499 000011D4 EB08                            jmp .L_end
  1500                                  .L_zero:
  1501 000011D6 48B8-                           mov rax, sob_boolean_true
  1501 000011D8 [0300000000000000] 
  1502                                  .L_end:
  1503 000011E0 C9                              leave
  1504 000011E1 C21800                          ret AND_KILL_FRAME(1)
  1505                                  
  1506                                  L_code_ptr_is_integer:
  1507 000011E4 C8000000                        enter 0, 0
  1508 000011E8 48837D1801                      cmp COUNT, 1
  1509 000011ED 0F85D30B0000                    jne L_error_arg_count_1
  1510 000011F3 488B4520                        mov rax, PARAM(0)
  1511 000011F7 803811                          cmp byte [rax], T_integer
  1512 000011FA 750A                            jne .L_false
  1513 000011FC 48B8-                           mov rax, sob_boolean_true
  1513 000011FE [0300000000000000] 
  1514 00001206 EB08                            jmp .L_exit
  1515                                  .L_false:
  1516 00001208 48B8-                           mov rax, sob_boolean_false
  1516 0000120A [0200000000000000] 
  1517                                  .L_exit:
  1518 00001212 C9                              leave
  1519 00001213 C21800                          ret AND_KILL_FRAME(1)
  1520                                  
  1521                                  L_code_ptr_raw_bin_add_rr:
  1522 00001216 C8000000                        enter 0, 0
  1523 0000121A 48837D1802                      cmp COUNT, 2
  1524 0000121F 0F85D60B0000                    jne L_error_arg_count_2
  1525 00001225 488B5D20                        mov rbx, PARAM(0)
  1526                                          assert_real(rbx)
    53 00001229 803B13              <1>  cmp byte [%1], %2
    54 0000122C 0F85680C0000        <1>  jne L_error_incorrect_type
  1527 00001232 488B4D28                        mov rcx, PARAM(1)
  1528                                          assert_real(rcx)
    53 00001236 803913              <1>  cmp byte [%1], %2
    54 00001239 0F855B0C0000        <1>  jne L_error_incorrect_type
  1529 0000123F F20F104301                      movsd xmm0, qword [rbx + 1]
  1530 00001244 F20F104901                      movsd xmm1, qword [rcx + 1]
  1531 00001249 F20F58C1                        addsd xmm0, xmm1
  1532 0000124D E8AB0A0000                      call make_real
  1533 00001252 C9                              leave
  1534 00001253 C22000                          ret AND_KILL_FRAME(2)
  1535                                  
  1536                                  L_code_ptr_raw_bin_sub_rr:
  1537 00001256 C8000000                        enter 0, 0
  1538 0000125A 48837D1802                      cmp COUNT, 2
  1539 0000125F 0F85960B0000                    jne L_error_arg_count_2
  1540 00001265 488B5D20                        mov rbx, PARAM(0)
  1541                                          assert_real(rbx)
    53 00001269 803B13              <1>  cmp byte [%1], %2
    54 0000126C 0F85280C0000        <1>  jne L_error_incorrect_type
  1542 00001272 488B4D28                        mov rcx, PARAM(1)
  1543                                          assert_real(rcx)
    53 00001276 803913              <1>  cmp byte [%1], %2
    54 00001279 0F851B0C0000        <1>  jne L_error_incorrect_type
  1544 0000127F F20F104301                      movsd xmm0, qword [rbx + 1]
  1545 00001284 F20F104901                      movsd xmm1, qword [rcx + 1]
  1546 00001289 F20F5CC1                        subsd xmm0, xmm1
  1547 0000128D E86B0A0000                      call make_real
  1548 00001292 C9                              leave
  1549 00001293 C22000                          ret AND_KILL_FRAME(2)
  1550                                  
  1551                                  L_code_ptr_raw_bin_mul_rr:
  1552 00001296 C8000000                        enter 0, 0
  1553 0000129A 48837D1802                      cmp COUNT, 2
  1554 0000129F 0F85560B0000                    jne L_error_arg_count_2
  1555 000012A5 488B5D20                        mov rbx, PARAM(0)
  1556                                          assert_real(rbx)
    53 000012A9 803B13              <1>  cmp byte [%1], %2
    54 000012AC 0F85E80B0000        <1>  jne L_error_incorrect_type
  1557 000012B2 488B4D28                        mov rcx, PARAM(1)
  1558                                          assert_real(rcx)
    53 000012B6 803913              <1>  cmp byte [%1], %2
    54 000012B9 0F85DB0B0000        <1>  jne L_error_incorrect_type
  1559 000012BF F20F104301                      movsd xmm0, qword [rbx + 1]
  1560 000012C4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1561 000012C9 F20F59C1                        mulsd xmm0, xmm1
  1562 000012CD E82B0A0000                      call make_real
  1563 000012D2 C9                              leave
  1564 000012D3 C22000                          ret AND_KILL_FRAME(2)
  1565                                  
  1566                                  L_code_ptr_raw_bin_div_rr:
  1567 000012D6 C8000000                        enter 0, 0
  1568 000012DA 48837D1802                      cmp COUNT, 2
  1569 000012DF 0F85160B0000                    jne L_error_arg_count_2
  1570 000012E5 488B5D20                        mov rbx, PARAM(0)
  1571                                          assert_real(rbx)
    53 000012E9 803B13              <1>  cmp byte [%1], %2
    54 000012EC 0F85A80B0000        <1>  jne L_error_incorrect_type
  1572 000012F2 488B4D28                        mov rcx, PARAM(1)
  1573                                          assert_real(rcx)
    53 000012F6 803913              <1>  cmp byte [%1], %2
    54 000012F9 0F859B0B0000        <1>  jne L_error_incorrect_type
  1574 000012FF F20F104301                      movsd xmm0, qword [rbx + 1]
  1575 00001304 F20F104901                      movsd xmm1, qword [rcx + 1]
  1576 00001309 660FEFD2                        pxor xmm2, xmm2
  1577 0000130D 660F2ECA                        ucomisd xmm1, xmm2
  1578 00001311 0F84B40B0000                    je L_error_division_by_zero
  1579 00001317 F20F5EC1                        divsd xmm0, xmm1
  1580 0000131B E8DD090000                      call make_real
  1581 00001320 C9                              leave
  1582 00001321 C22000                          ret AND_KILL_FRAME(2)
  1583                                  
  1584                                  L_code_ptr_raw_bin_add_zz:
  1585 00001324 C8000000                	enter 0, 0
  1586 00001328 48837D1802              	cmp COUNT, 2
  1587 0000132D 0F85C80A0000            	jne L_error_arg_count_2
  1588 00001333 4C8B4520                	mov r8, PARAM(0)
  1589                                  	assert_integer(r8)
    53 00001337 41803811            <1>  cmp byte [%1], %2
    54 0000133B 0F85590B0000        <1>  jne L_error_incorrect_type
  1590 00001341 4C8B4D28                	mov r9, PARAM(1)
  1591                                  	assert_integer(r9)
    53 00001345 41803911            <1>  cmp byte [%1], %2
    54 00001349 0F854B0B0000        <1>  jne L_error_incorrect_type
  1592 0000134F 498B7801                	mov rdi, qword [r8 + 1]
  1593 00001353 49037901                	add rdi, qword [r9 + 1]
  1594 00001357 E8B9090000              	call make_integer
  1595 0000135C C9                      	leave
  1596 0000135D C22000                  	ret AND_KILL_FRAME(2)
  1597                                  
  1598                                  L_code_ptr_raw_bin_add_qq:
  1599 00001360 C8000000                        enter 0, 0
  1600 00001364 48837D1802                      cmp COUNT, 2
  1601 00001369 0F858C0A0000                    jne L_error_arg_count_2
  1602 0000136F 4C8B4520                        mov r8, PARAM(0)
  1603                                          assert_fraction(r8)
    53 00001373 41803812            <1>  cmp byte [%1], %2
    54 00001377 0F851D0B0000        <1>  jne L_error_incorrect_type
  1604 0000137D 4C8B4D28                        mov r9, PARAM(1)
  1605                                          assert_fraction(r9)
    53 00001381 41803912            <1>  cmp byte [%1], %2
    54 00001385 0F850F0B0000        <1>  jne L_error_incorrect_type
  1606 0000138B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1607 0000138F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1608 00001393 4899                            cqo
  1609 00001395 48F7EB                          imul rbx
  1610 00001398 4889C6                          mov rsi, rax
  1611 0000139B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1612 0000139F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1613 000013A3 4899                            cqo
  1614 000013A5 48F7EB                          imul rbx
  1615 000013A8 4801C6                          add rsi, rax
  1616 000013AB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1617 000013AF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1618 000013B3 4899                            cqo
  1619 000013B5 48F7EB                          imul rbx
  1620 000013B8 4889C7                          mov rdi, rax
  1621 000013BB E8DC010000                      call normalize_fraction
  1622 000013C0 C9                              leave
  1623 000013C1 C22000                          ret AND_KILL_FRAME(2)
  1624                                  
  1625                                  L_code_ptr_raw_bin_sub_zz:
  1626 000013C4 C8000000                	enter 0, 0
  1627 000013C8 48837D1802              	cmp COUNT, 2
  1628 000013CD 0F85280A0000            	jne L_error_arg_count_2
  1629 000013D3 4C8B4520                	mov r8, PARAM(0)
  1630                                  	assert_integer(r8)
    53 000013D7 41803811            <1>  cmp byte [%1], %2
    54 000013DB 0F85B90A0000        <1>  jne L_error_incorrect_type
  1631 000013E1 4C8B4D28                	mov r9, PARAM(1)
  1632                                  	assert_integer(r9)
    53 000013E5 41803911            <1>  cmp byte [%1], %2
    54 000013E9 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1633 000013EF 498B7801                	mov rdi, qword [r8 + 1]
  1634 000013F3 492B7901                	sub rdi, qword [r9 + 1]
  1635 000013F7 E819090000              	call make_integer
  1636 000013FC C9                      	leave
  1637 000013FD C22000                  	ret AND_KILL_FRAME(2)
  1638                                  
  1639                                  L_code_ptr_raw_bin_sub_qq:
  1640 00001400 C8000000                        enter 0, 0
  1641 00001404 48837D1802                      cmp COUNT, 2
  1642 00001409 0F85EC090000                    jne L_error_arg_count_2
  1643 0000140F 4C8B4520                        mov r8, PARAM(0)
  1644                                          assert_fraction(r8)
    53 00001413 41803812            <1>  cmp byte [%1], %2
    54 00001417 0F857D0A0000        <1>  jne L_error_incorrect_type
  1645 0000141D 4C8B4D28                        mov r9, PARAM(1)
  1646                                          assert_fraction(r9)
    53 00001421 41803912            <1>  cmp byte [%1], %2
    54 00001425 0F856F0A0000        <1>  jne L_error_incorrect_type
  1647 0000142B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1648 0000142F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1649 00001433 4899                            cqo
  1650 00001435 48F7EB                          imul rbx
  1651 00001438 4889C6                          mov rsi, rax
  1652 0000143B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1653 0000143F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1654 00001443 4899                            cqo
  1655 00001445 48F7EB                          imul rbx
  1656 00001448 4829C6                          sub rsi, rax
  1657 0000144B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1658 0000144F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1659 00001453 4899                            cqo
  1660 00001455 48F7EB                          imul rbx
  1661 00001458 4889C7                          mov rdi, rax
  1662 0000145B E83C010000                      call normalize_fraction
  1663 00001460 C9                              leave
  1664 00001461 C22000                          ret AND_KILL_FRAME(2)
  1665                                  
  1666                                  L_code_ptr_raw_bin_mul_zz:
  1667 00001464 C8000000                	enter 0, 0
  1668 00001468 48837D1802              	cmp COUNT, 2
  1669 0000146D 0F8588090000            	jne L_error_arg_count_2
  1670 00001473 4C8B4520                	mov r8, PARAM(0)
  1671                                  	assert_integer(r8)
    53 00001477 41803811            <1>  cmp byte [%1], %2
    54 0000147B 0F85190A0000        <1>  jne L_error_incorrect_type
  1672 00001481 4C8B4D28                	mov r9, PARAM(1)
  1673                                  	assert_integer(r9)
    53 00001485 41803911            <1>  cmp byte [%1], %2
    54 00001489 0F850B0A0000        <1>  jne L_error_incorrect_type
  1674 0000148F 4899                    	cqo
  1675 00001491 498B4001                	mov rax, qword [r8 + 1]
  1676 00001495 49F76101                	mul qword [r9 + 1]
  1677 00001499 4889C7                  	mov rdi, rax
  1678 0000149C E874080000              	call make_integer
  1679 000014A1 C9                      	leave
  1680 000014A2 C22000                  	ret AND_KILL_FRAME(2)
  1681                                  
  1682                                  L_code_ptr_raw_bin_mul_qq:
  1683 000014A5 C8000000                        enter 0, 0
  1684 000014A9 48837D1802                      cmp COUNT, 2
  1685 000014AE 0F8547090000                    jne L_error_arg_count_2
  1686 000014B4 4C8B4520                        mov r8, PARAM(0)
  1687                                          assert_fraction(r8)
    53 000014B8 41803812            <1>  cmp byte [%1], %2
    54 000014BC 0F85D8090000        <1>  jne L_error_incorrect_type
  1688 000014C2 4C8B4D28                        mov r9, PARAM(1)
  1689                                          assert_fraction(r9)
    53 000014C6 41803912            <1>  cmp byte [%1], %2
    54 000014CA 0F85CA090000        <1>  jne L_error_incorrect_type
  1690 000014D0 498B4001                        mov rax, qword [r8 + 1] ; num1
  1691 000014D4 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1692 000014D8 4899                            cqo
  1693 000014DA 48F7EB                          imul rbx
  1694 000014DD 4889C6                          mov rsi, rax
  1695 000014E0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1696 000014E4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1697 000014E8 4899                            cqo
  1698 000014EA 48F7EB                          imul rbx
  1699 000014ED 4889C7                          mov rdi, rax
  1700 000014F0 E8A7000000                      call normalize_fraction
  1701 000014F5 C9                              leave
  1702 000014F6 C22000                          ret AND_KILL_FRAME(2)
  1703                                          
  1704                                  L_code_ptr_raw_bin_div_zz:
  1705 000014F9 C8000000                	enter 0, 0
  1706 000014FD 48837D1802              	cmp COUNT, 2
  1707 00001502 0F85F3080000            	jne L_error_arg_count_2
  1708 00001508 4C8B4520                	mov r8, PARAM(0)
  1709                                  	assert_integer(r8)
    53 0000150C 41803811            <1>  cmp byte [%1], %2
    54 00001510 0F8584090000        <1>  jne L_error_incorrect_type
  1710 00001516 4C8B4D28                	mov r9, PARAM(1)
  1711                                  	assert_integer(r9)
    53 0000151A 41803911            <1>  cmp byte [%1], %2
    54 0000151E 0F8576090000        <1>  jne L_error_incorrect_type
  1712 00001524 498B7901                	mov rdi, qword [r9 + 1]
  1713 00001528 4883FF00                	cmp rdi, 0
  1714 0000152C 0F8499090000            	je L_error_division_by_zero
  1715 00001532 498B7001                	mov rsi, qword [r8 + 1]
  1716 00001536 E861000000              	call normalize_fraction
  1717 0000153B C9                      	leave
  1718 0000153C C22000                  	ret AND_KILL_FRAME(2)
  1719                                  
  1720                                  L_code_ptr_raw_bin_div_qq:
  1721 0000153F C8000000                        enter 0, 0
  1722 00001543 48837D1802                      cmp COUNT, 2
  1723 00001548 0F85AD080000                    jne L_error_arg_count_2
  1724 0000154E 4C8B4520                        mov r8, PARAM(0)
  1725                                          assert_fraction(r8)
    53 00001552 41803812            <1>  cmp byte [%1], %2
    54 00001556 0F853E090000        <1>  jne L_error_incorrect_type
  1726 0000155C 4C8B4D28                        mov r9, PARAM(1)
  1727                                          assert_fraction(r9)
    53 00001560 41803912            <1>  cmp byte [%1], %2
    54 00001564 0F8530090000        <1>  jne L_error_incorrect_type
  1728 0000156A 4983790100                      cmp qword [r9 + 1], 0
  1729 0000156F 0F8456090000                    je L_error_division_by_zero
  1730 00001575 498B4001                        mov rax, qword [r8 + 1] ; num1
  1731 00001579 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1732 0000157D 4899                            cqo
  1733 0000157F 48F7EB                          imul rbx
  1734 00001582 4889C6                          mov rsi, rax
  1735 00001585 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1736 00001589 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1737 0000158D 4899                            cqo
  1738 0000158F 48F7EB                          imul rbx
  1739 00001592 4889C7                          mov rdi, rax
  1740 00001595 E802000000                      call normalize_fraction
  1741 0000159A C9                              leave
  1742 0000159B C22000                          ret AND_KILL_FRAME(2)
  1743                                          
  1744                                  normalize_fraction:
  1745 0000159E 56                              push rsi
  1746 0000159F 57                              push rdi
  1747 000015A0 E857000000                      call gcd
  1748 000015A5 4889C3                          mov rbx, rax
  1749 000015A8 58                              pop rax
  1750 000015A9 4899                            cqo
  1751 000015AB 48F7FB                          idiv rbx
  1752 000015AE 4989C0                          mov r8, rax
  1753 000015B1 58                              pop rax
  1754 000015B2 4899                            cqo
  1755 000015B4 48F7FB                          idiv rbx
  1756 000015B7 4989C1                          mov r9, rax
  1757 000015BA 4983F900                        cmp r9, 0
  1758 000015BE 741A                            je .L_zero
  1759 000015C0 4983F801                        cmp r8, 1
  1760 000015C4 741F                            je .L_int
  1761 000015C6 BF11000000                      mov rdi, (1 + 8 + 8)
  1762 000015CB E8C6EBFFFF                      call malloc
  1763 000015D0 C60012                          mov byte [rax], T_fraction
  1764 000015D3 4C894801                        mov qword [rax + 1], r9
  1765 000015D7 4C894009                        mov qword [rax + 1 + 8], r8
  1766 000015DB C3                              ret
  1767                                  .L_zero:
  1768 000015DC BF00000000                      mov rdi, 0
  1769 000015E1 E82F070000                      call make_integer
  1770 000015E6 C3                              ret
  1771                                  .L_int:
  1772 000015E7 4C89CF                          mov rdi, r9
  1773 000015EA E826070000                      call make_integer
  1774 000015EF C3                              ret
  1775                                  
  1776                                  iabs:
  1777 000015F0 4889F8                          mov rax, rdi
  1778 000015F3 4883F800                        cmp rax, 0
  1779 000015F7 7CFF                            jl .Lneg
  1780 000015F9 C3                              ret
  1781                                  .Lneg:
  1782 000015FA 48F7D8                          neg rax
  1783 000015FD C3                              ret
  1784                                  
  1785                                  gcd:
  1786 000015FE E8EDFFFFFF                      call iabs
  1787 00001603 4889C3                          mov rbx, rax
  1788 00001606 4889F7                          mov rdi, rsi
  1789 00001609 E8E2FFFFFF                      call iabs
  1790 0000160E 4883F800                        cmp rax, 0
  1791 00001612 7500                            jne .L0
  1792 00001614 4893                            xchg rax, rbx
  1793                                  .L0:
  1794 00001616 4883FB00                        cmp rbx, 0
  1795 0000161A 740A                            je .L1
  1796 0000161C 4899                            cqo
  1797 0000161E 48F7F3                          div rbx
  1798 00001621 4889D0                          mov rax, rdx
  1799 00001624 4893                            xchg rax, rbx
  1800 00001626 EBEE                            jmp .L0
  1801                                  .L1:
  1802 00001628 C3                              ret
  1803                                  
  1804                                  L_code_ptr_error:
  1805 00001629 C8000000                        enter 0, 0
  1806 0000162D 48837D1802                      cmp COUNT, 2
  1807 00001632 0F85C3070000                    jne L_error_arg_count_2
  1808 00001638 488B7520                        mov rsi, PARAM(0)
  1809                                          assert_interned_symbol(rsi)
    53 0000163C 803E41              <1>  cmp byte [%1], %2
    54 0000163F 0F8555080000        <1>  jne L_error_incorrect_type
  1810 00001645 488B7528                        mov rsi, PARAM(1)
  1811                                          assert_string(rsi)
    53 00001649 803E03              <1>  cmp byte [%1], %2
    54 0000164C 0F8548080000        <1>  jne L_error_incorrect_type
  1812 00001652 48BF-                           mov rdi, fmt_scheme_error_part_1
  1812 00001654 [4504000000000000] 
  1813 0000165C B800000000                      mov rax, 0
  1814                                          ENTER
    44 00001661 C8000000            <1>  enter 0, 0
    45 00001665 4883E4F0            <1>  and rsp, ~15
  1815 00001669 E8(00000000)                    call printf
  1816                                          LEAVE
    49 0000166E C9                  <1>  leave
  1817 0000166F 488B7D20                        mov rdi, PARAM(0)
  1818 00001673 E89FEDFFFF                      call print_sexpr
  1819 00001678 48BF-                           mov rdi, fmt_scheme_error_part_2
  1819 0000167A [5904000000000000] 
  1820 00001682 B800000000                      mov rax, 0
  1821                                          ENTER
    44 00001687 C8000000            <1>  enter 0, 0
    45 0000168B 4883E4F0            <1>  and rsp, ~15
  1822 0000168F E8(00000000)                    call printf
  1823                                          LEAVE
    49 00001694 C9                  <1>  leave
  1824 00001695 488B4528                        mov rax, PARAM(1)       ; sob_string
  1825 00001699 BE01000000                      mov rsi, 1              ; size = 1 byte
  1826 0000169E 488B5001                        mov rdx, qword [rax + 1] ; length
  1827 000016A2 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1828 000016A6 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1829                                  	ENTER
    44 000016AE C8000000            <1>  enter 0, 0
    45 000016B2 4883E4F0            <1>  and rsp, ~15
  1830 000016B6 E8(00000000)                    call fwrite
  1831                                  	LEAVE
    49 000016BB C9                  <1>  leave
  1832 000016BC 48BF-                           mov rdi, fmt_scheme_error_part_3
  1832 000016BE [9B04000000000000] 
  1833 000016C6 B800000000                      mov rax, 0
  1834                                          ENTER
    44 000016CB C8000000            <1>  enter 0, 0
    45 000016CF 4883E4F0            <1>  and rsp, ~15
  1835 000016D3 E8(00000000)                    call printf
  1836                                          LEAVE
    49 000016D8 C9                  <1>  leave
  1837 000016D9 48C7C0F7FFFFFF                  mov rax, -9
  1838 000016E0 E8(00000000)                    call exit
  1839                                  
  1840                                  L_code_ptr_raw_less_than_rr:
  1841 000016E5 C8000000                        enter 0, 0
  1842 000016E9 48837D1802                      cmp COUNT, 2
  1843 000016EE 0F8507070000                    jne L_error_arg_count_2
  1844 000016F4 488B7520                        mov rsi, PARAM(0)
  1845                                          assert_real(rsi)
    53 000016F8 803E13              <1>  cmp byte [%1], %2
    54 000016FB 0F8599070000        <1>  jne L_error_incorrect_type
  1846 00001701 488B7D28                        mov rdi, PARAM(1)
  1847                                          assert_real(rdi)
    53 00001705 803F13              <1>  cmp byte [%1], %2
    54 00001708 0F858C070000        <1>  jne L_error_incorrect_type
  1848 0000170E F20F104601                      movsd xmm0, qword [rsi + 1]
  1849 00001713 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1850 00001718 660F2FC1                        comisd xmm0, xmm1
  1851 0000171C 730A                            jae .L_false
  1852 0000171E 48B8-                           mov rax, sob_boolean_true
  1852 00001720 [0300000000000000] 
  1853 00001728 EB08                            jmp .L_exit
  1854                                  .L_false:
  1855 0000172A 48B8-                           mov rax, sob_boolean_false
  1855 0000172C [0200000000000000] 
  1856                                  .L_exit:
  1857 00001734 C9                              leave
  1858 00001735 C22000                          ret AND_KILL_FRAME(2)
  1859                                          
  1860                                  L_code_ptr_raw_less_than_zz:
  1861 00001738 C8000000                	enter 0, 0
  1862 0000173C 48837D1802              	cmp COUNT, 2
  1863 00001741 0F85B4060000            	jne L_error_arg_count_2
  1864 00001747 4C8B4520                	mov r8, PARAM(0)
  1865                                  	assert_integer(r8)
    53 0000174B 41803811            <1>  cmp byte [%1], %2
    54 0000174F 0F8545070000        <1>  jne L_error_incorrect_type
  1866 00001755 4C8B4D28                	mov r9, PARAM(1)
  1867                                  	assert_integer(r9)
    53 00001759 41803911            <1>  cmp byte [%1], %2
    54 0000175D 0F8537070000        <1>  jne L_error_incorrect_type
  1868 00001763 498B7801                	mov rdi, qword [r8 + 1]
  1869 00001767 493B7901                	cmp rdi, qword [r9 + 1]
  1870 0000176B 7D0A                    	jge .L_false
  1871 0000176D 48B8-                   	mov rax, sob_boolean_true
  1871 0000176F [0300000000000000] 
  1872 00001777 EB08                    	jmp .L_exit
  1873                                  .L_false:
  1874 00001779 48B8-                   	mov rax, sob_boolean_false
  1874 0000177B [0200000000000000] 
  1875                                  .L_exit:
  1876 00001783 C9                      	leave
  1877 00001784 C22000                  	ret AND_KILL_FRAME(2)
  1878                                  
  1879                                  L_code_ptr_raw_less_than_qq:
  1880 00001787 C8000000                        enter 0, 0
  1881 0000178B 48837D1802                      cmp COUNT, 2
  1882 00001790 0F8565060000                    jne L_error_arg_count_2
  1883 00001796 488B7520                        mov rsi, PARAM(0)
  1884                                          assert_fraction(rsi)
    53 0000179A 803E12              <1>  cmp byte [%1], %2
    54 0000179D 0F85F7060000        <1>  jne L_error_incorrect_type
  1885 000017A3 488B7D28                        mov rdi, PARAM(1)
  1886                                          assert_fraction(rdi)
    53 000017A7 803F12              <1>  cmp byte [%1], %2
    54 000017AA 0F85EA060000        <1>  jne L_error_incorrect_type
  1887 000017B0 488B4601                        mov rax, qword [rsi + 1] ; num1
  1888 000017B4 4899                            cqo
  1889 000017B6 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1890 000017BA 4889C1                          mov rcx, rax
  1891 000017BD 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1892 000017C1 4899                            cqo
  1893 000017C3 48F76F01                        imul qword [rdi + 1]          ; num2
  1894 000017C7 4829C1                          sub rcx, rax
  1895 000017CA 7D0A                            jge .L_false
  1896 000017CC 48B8-                           mov rax, sob_boolean_true
  1896 000017CE [0300000000000000] 
  1897 000017D6 EB08                            jmp .L_exit
  1898                                  .L_false:
  1899 000017D8 48B8-                           mov rax, sob_boolean_false
  1899 000017DA [0200000000000000] 
  1900                                  .L_exit:
  1901 000017E2 C9                              leave
  1902 000017E3 C22000                          ret AND_KILL_FRAME(2)
  1903                                  
  1904                                  L_code_ptr_raw_equal_rr:
  1905 000017E6 C8000000                        enter 0, 0
  1906 000017EA 48837D1802                      cmp COUNT, 2
  1907 000017EF 0F8506060000                    jne L_error_arg_count_2
  1908 000017F5 488B7520                        mov rsi, PARAM(0)
  1909                                          assert_real(rsi)
    53 000017F9 803E13              <1>  cmp byte [%1], %2
    54 000017FC 0F8598060000        <1>  jne L_error_incorrect_type
  1910 00001802 488B7D28                        mov rdi, PARAM(1)
  1911                                          assert_real(rdi)
    53 00001806 803F13              <1>  cmp byte [%1], %2
    54 00001809 0F858B060000        <1>  jne L_error_incorrect_type
  1912 0000180F F20F104601                      movsd xmm0, qword [rsi + 1]
  1913 00001814 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1914 00001819 660F2FC1                        comisd xmm0, xmm1
  1915 0000181D 750A                            jne .L_false
  1916 0000181F 48B8-                           mov rax, sob_boolean_true
  1916 00001821 [0300000000000000] 
  1917 00001829 EB08                            jmp .L_exit
  1918                                  .L_false:
  1919 0000182B 48B8-                           mov rax, sob_boolean_false
  1919 0000182D [0200000000000000] 
  1920                                  .L_exit:
  1921 00001835 C9                              leave
  1922 00001836 C22000                          ret AND_KILL_FRAME(2)
  1923                                          
  1924                                  L_code_ptr_raw_equal_zz:
  1925 00001839 C8000000                	enter 0, 0
  1926 0000183D 48837D1802              	cmp COUNT, 2
  1927 00001842 0F85B3050000            	jne L_error_arg_count_2
  1928 00001848 4C8B4520                	mov r8, PARAM(0)
  1929                                  	assert_integer(r8)
    53 0000184C 41803811            <1>  cmp byte [%1], %2
    54 00001850 0F8544060000        <1>  jne L_error_incorrect_type
  1930 00001856 4C8B4D28                	mov r9, PARAM(1)
  1931                                  	assert_integer(r9)
    53 0000185A 41803911            <1>  cmp byte [%1], %2
    54 0000185E 0F8536060000        <1>  jne L_error_incorrect_type
  1932 00001864 498B7801                	mov rdi, qword [r8 + 1]
  1933 00001868 493B7901                	cmp rdi, qword [r9 + 1]
  1934 0000186C 750A                    	jne .L_false
  1935 0000186E 48B8-                   	mov rax, sob_boolean_true
  1935 00001870 [0300000000000000] 
  1936 00001878 EB08                    	jmp .L_exit
  1937                                  .L_false:
  1938 0000187A 48B8-                   	mov rax, sob_boolean_false
  1938 0000187C [0200000000000000] 
  1939                                  .L_exit:
  1940 00001884 C9                      	leave
  1941 00001885 C22000                  	ret AND_KILL_FRAME(2)
  1942                                  
  1943                                  L_code_ptr_raw_equal_qq:
  1944 00001888 C8000000                        enter 0, 0
  1945 0000188C 48837D1802                      cmp COUNT, 2
  1946 00001891 0F8564050000                    jne L_error_arg_count_2
  1947 00001897 488B7520                        mov rsi, PARAM(0)
  1948                                          assert_fraction(rsi)
    53 0000189B 803E12              <1>  cmp byte [%1], %2
    54 0000189E 0F85F6050000        <1>  jne L_error_incorrect_type
  1949 000018A4 488B7D28                        mov rdi, PARAM(1)
  1950                                          assert_fraction(rdi)
    53 000018A8 803F12              <1>  cmp byte [%1], %2
    54 000018AB 0F85E9050000        <1>  jne L_error_incorrect_type
  1951 000018B1 488B4601                        mov rax, qword [rsi + 1] ; num1
  1952 000018B5 4899                            cqo
  1953 000018B7 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1954 000018BB 4889C1                          mov rcx, rax
  1955 000018BE 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1956 000018C2 4899                            cqo
  1957 000018C4 48F76F01                        imul qword [rdi + 1]          ; num2
  1958 000018C8 4829C1                          sub rcx, rax
  1959 000018CB 750A                            jne .L_false
  1960 000018CD 48B8-                           mov rax, sob_boolean_true
  1960 000018CF [0300000000000000] 
  1961 000018D7 EB08                            jmp .L_exit
  1962                                  .L_false:
  1963 000018D9 48B8-                           mov rax, sob_boolean_false
  1963 000018DB [0200000000000000] 
  1964                                  .L_exit:
  1965 000018E3 C9                              leave
  1966 000018E4 C22000                          ret AND_KILL_FRAME(2)
  1967                                  
  1968                                  L_code_ptr_quotient:
  1969 000018E7 C8000000                        enter 0, 0
  1970 000018EB 48837D1802                      cmp COUNT, 2
  1971 000018F0 0F8505050000                    jne L_error_arg_count_2
  1972 000018F6 488B7520                        mov rsi, PARAM(0)
  1973                                          assert_integer(rsi)
    53 000018FA 803E11              <1>  cmp byte [%1], %2
    54 000018FD 0F8597050000        <1>  jne L_error_incorrect_type
  1974 00001903 488B7D28                        mov rdi, PARAM(1)
  1975                                          assert_integer(rdi)
    53 00001907 803F11              <1>  cmp byte [%1], %2
    54 0000190A 0F858A050000        <1>  jne L_error_incorrect_type
  1976 00001910 488B4601                        mov rax, qword [rsi + 1]
  1977 00001914 488B5F01                        mov rbx, qword [rdi + 1]
  1978 00001918 4883FB00                        cmp rbx, 0
  1979 0000191C 0F84A9050000                    je L_error_division_by_zero
  1980 00001922 4899                            cqo
  1981 00001924 48F7FB                          idiv rbx
  1982 00001927 4889C7                          mov rdi, rax
  1983 0000192A E8E6030000                      call make_integer
  1984 0000192F C9                              leave
  1985 00001930 C22000                          ret AND_KILL_FRAME(2)
  1986                                          
  1987                                  L_code_ptr_remainder:
  1988 00001933 C8000000                        enter 0, 0
  1989 00001937 48837D1802                      cmp COUNT, 2
  1990 0000193C 0F85B9040000                    jne L_error_arg_count_2
  1991 00001942 488B7520                        mov rsi, PARAM(0)
  1992                                          assert_integer(rsi)
    53 00001946 803E11              <1>  cmp byte [%1], %2
    54 00001949 0F854B050000        <1>  jne L_error_incorrect_type
  1993 0000194F 488B7D28                        mov rdi, PARAM(1)
  1994                                          assert_integer(rdi)
    53 00001953 803F11              <1>  cmp byte [%1], %2
    54 00001956 0F853E050000        <1>  jne L_error_incorrect_type
  1995 0000195C 488B4601                        mov rax, qword [rsi + 1]
  1996 00001960 488B5F01                        mov rbx, qword [rdi + 1]
  1997 00001964 4883FB00                        cmp rbx, 0
  1998 00001968 0F845D050000                    je L_error_division_by_zero
  1999 0000196E 4899                            cqo
  2000 00001970 48F7FB                          idiv rbx
  2001 00001973 4889D7                          mov rdi, rdx
  2002 00001976 E89A030000                      call make_integer
  2003 0000197B C9                              leave
  2004 0000197C C22000                          ret AND_KILL_FRAME(2)
  2005                                  
  2006                                  L_code_ptr_set_car:
  2007 0000197F C8000000                        enter 0, 0
  2008 00001983 48837D1802                      cmp COUNT, 2
  2009 00001988 0F856D040000                    jne L_error_arg_count_2
  2010 0000198E 488B4520                        mov rax, PARAM(0)
  2011                                          assert_pair(rax)
    53 00001992 803821              <1>  cmp byte [%1], %2
    54 00001995 0F85FF040000        <1>  jne L_error_incorrect_type
  2012 0000199B 488B5D28                        mov rbx, PARAM(1)
  2013 0000199F 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2014 000019A3 48B8-                           mov rax, sob_void
  2014 000019A5 [0000000000000000] 
  2015 000019AD C9                              leave
  2016 000019AE C22000                          ret AND_KILL_FRAME(2)
  2017                                  
  2018                                  L_code_ptr_set_cdr:
  2019 000019B1 C8000000                        enter 0, 0
  2020 000019B5 48837D1802                      cmp COUNT, 2
  2021 000019BA 0F853B040000                    jne L_error_arg_count_2
  2022 000019C0 488B4520                        mov rax, PARAM(0)
  2023                                          assert_pair(rax)
    53 000019C4 803821              <1>  cmp byte [%1], %2
    54 000019C7 0F85CD040000        <1>  jne L_error_incorrect_type
  2024 000019CD 488B5D28                        mov rbx, PARAM(1)
  2025 000019D1 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2026 000019D5 48B8-                           mov rax, sob_void
  2026 000019D7 [0000000000000000] 
  2027 000019DF C9                              leave
  2028 000019E0 C22000                          ret AND_KILL_FRAME(2)
  2029                                  
  2030                                  L_code_ptr_string_ref:
  2031 000019E3 C8000000                        enter 0, 0
  2032 000019E7 48837D1802                      cmp COUNT, 2
  2033 000019EC 0F8509040000                    jne L_error_arg_count_2
  2034 000019F2 488B7D20                        mov rdi, PARAM(0)
  2035                                          assert_string(rdi)
    53 000019F6 803F03              <1>  cmp byte [%1], %2
    54 000019F9 0F859B040000        <1>  jne L_error_incorrect_type
  2036 000019FF 488B7528                        mov rsi, PARAM(1)
  2037                                          assert_integer(rsi)
    53 00001A03 803E11              <1>  cmp byte [%1], %2
    54 00001A06 0F858E040000        <1>  jne L_error_incorrect_type
  2038 00001A0C 488B5701                        mov rdx, qword [rdi + 1]
  2039 00001A10 488B4E01                        mov rcx, qword [rsi + 1]
  2040 00001A14 4839D1                          cmp rcx, rdx
  2041 00001A17 0F8D12030000                    jge L_error_integer_range
  2042 00001A1D 4883F900                        cmp rcx, 0
  2043 00001A21 0F8C08030000                    jl L_error_integer_range
  2044 00001A27 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2045 00001A2B BF02000000                      mov rdi, 2
  2046 00001A30 E861E7FFFF                      call malloc
  2047 00001A35 C60002                          mov byte [rax], T_char
  2048 00001A38 885801                          mov byte [rax + 1], bl
  2049 00001A3B C9                              leave
  2050 00001A3C C22000                          ret AND_KILL_FRAME(2)
  2051                                  
  2052                                  L_code_ptr_vector_ref:
  2053 00001A3F C8000000                        enter 0, 0
  2054 00001A43 48837D1802                      cmp COUNT, 2
  2055 00001A48 0F85AD030000                    jne L_error_arg_count_2
  2056 00001A4E 488B7D20                        mov rdi, PARAM(0)
  2057                                          assert_vector(rdi)
    53 00001A52 803F22              <1>  cmp byte [%1], %2
    54 00001A55 0F853F040000        <1>  jne L_error_incorrect_type
  2058 00001A5B 488B7528                        mov rsi, PARAM(1)
  2059                                          assert_integer(rsi)
    53 00001A5F 803E11              <1>  cmp byte [%1], %2
    54 00001A62 0F8532040000        <1>  jne L_error_incorrect_type
  2060 00001A68 488B5701                        mov rdx, qword [rdi + 1]
  2061 00001A6C 488B4E01                        mov rcx, qword [rsi + 1]
  2062 00001A70 4839D1                          cmp rcx, rdx
  2063 00001A73 0F8DB6020000                    jge L_error_integer_range
  2064 00001A79 4883F900                        cmp rcx, 0
  2065 00001A7D 0F8CAC020000                    jl L_error_integer_range
  2066 00001A83 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2067 00001A88 C9                              leave
  2068 00001A89 C22000                          ret AND_KILL_FRAME(2)
  2069                                  
  2070                                  L_code_ptr_vector_set:
  2071 00001A8C C8000000                        enter 0, 0
  2072 00001A90 48837D1803                      cmp COUNT, 3
  2073 00001A95 0F85CA030000                    jne L_error_arg_count_3
  2074 00001A9B 488B7D20                        mov rdi, PARAM(0)
  2075                                          assert_vector(rdi)
    53 00001A9F 803F22              <1>  cmp byte [%1], %2
    54 00001AA2 0F85F2030000        <1>  jne L_error_incorrect_type
  2076 00001AA8 488B7528                        mov rsi, PARAM(1)
  2077                                          assert_integer(rsi)
    53 00001AAC 803E11              <1>  cmp byte [%1], %2
    54 00001AAF 0F85E5030000        <1>  jne L_error_incorrect_type
  2078 00001AB5 488B5701                        mov rdx, qword [rdi + 1]
  2079 00001AB9 488B4E01                        mov rcx, qword [rsi + 1]
  2080 00001ABD 4839D1                          cmp rcx, rdx
  2081 00001AC0 0F8D69020000                    jge L_error_integer_range
  2082 00001AC6 4883F900                        cmp rcx, 0
  2083 00001ACA 0F8C5F020000                    jl L_error_integer_range
  2084 00001AD0 488B4530                        mov rax, PARAM(2)
  2085 00001AD4 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2086 00001AD9 48B8-                           mov rax, sob_void
  2086 00001ADB [0000000000000000] 
  2087 00001AE3 C9                              leave
  2088 00001AE4 C22800                          ret AND_KILL_FRAME(3)
  2089                                  
  2090                                  L_code_ptr_string_set:
  2091 00001AE7 C8000000                        enter 0, 0
  2092 00001AEB 48837D1803                      cmp COUNT, 3
  2093 00001AF0 0F856F030000                    jne L_error_arg_count_3
  2094 00001AF6 488B7D20                        mov rdi, PARAM(0)
  2095                                          assert_string(rdi)
    53 00001AFA 803F03              <1>  cmp byte [%1], %2
    54 00001AFD 0F8597030000        <1>  jne L_error_incorrect_type
  2096 00001B03 488B7528                        mov rsi, PARAM(1)
  2097                                          assert_integer(rsi)
    53 00001B07 803E11              <1>  cmp byte [%1], %2
    54 00001B0A 0F858A030000        <1>  jne L_error_incorrect_type
  2098 00001B10 488B5701                        mov rdx, qword [rdi + 1]
  2099 00001B14 488B4E01                        mov rcx, qword [rsi + 1]
  2100 00001B18 4839D1                          cmp rcx, rdx
  2101 00001B1B 0F8D0E020000                    jge L_error_integer_range
  2102 00001B21 4883F900                        cmp rcx, 0
  2103 00001B25 0F8C04020000                    jl L_error_integer_range
  2104 00001B2B 488B4530                        mov rax, PARAM(2)
  2105                                          assert_char(rax)
    53 00001B2F 803802              <1>  cmp byte [%1], %2
    54 00001B32 0F8562030000        <1>  jne L_error_incorrect_type
  2106 00001B38 8A4001                          mov al, byte [rax + 1]
  2107 00001B3B 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2108 00001B3F 48B8-                           mov rax, sob_void
  2108 00001B41 [0000000000000000] 
  2109 00001B49 C9                              leave
  2110 00001B4A C22800                          ret AND_KILL_FRAME(3)
  2111                                  
  2112                                  L_code_ptr_make_vector:
  2113 00001B4D C8000000                        enter 0, 0
  2114 00001B51 48837D1802                      cmp COUNT, 2
  2115 00001B56 0F859F020000                    jne L_error_arg_count_2
  2116 00001B5C 488B4D20                        mov rcx, PARAM(0)
  2117                                          assert_integer(rcx)
    53 00001B60 803911              <1>  cmp byte [%1], %2
    54 00001B63 0F8531030000        <1>  jne L_error_incorrect_type
  2118 00001B69 488B4901                        mov rcx, qword [rcx + 1]
  2119 00001B6D 4883F900                        cmp rcx, 0
  2120 00001B71 0F8CB8010000                    jl L_error_integer_range
  2121 00001B77 488B5528                        mov rdx, PARAM(1)
  2122 00001B7B 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2123 00001B83 E80EE6FFFF                      call malloc
  2124 00001B88 C60022                          mov byte [rax], T_vector
  2125 00001B8B 48894801                        mov qword [rax + 1], rcx
  2126 00001B8F 41B800000000                    mov r8, 0
  2127                                  .L0:
  2128 00001B95 4939C8                          cmp r8, rcx
  2129 00001B98 7408                            je .L1
  2130 00001B9A 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2131 00001B9F 49FFC0                          inc r8
  2132 00001BA2 EBF1                            jmp .L0
  2133                                  .L1:
  2134 00001BA4 C9                              leave
  2135 00001BA5 C22000                          ret AND_KILL_FRAME(2)
  2136                                          
  2137                                  L_code_ptr_make_string:
  2138 00001BA8 C8000000                        enter 0, 0
  2139 00001BAC 48837D1802                      cmp COUNT, 2
  2140 00001BB1 0F8544020000                    jne L_error_arg_count_2
  2141 00001BB7 488B4D20                        mov rcx, PARAM(0)
  2142                                          assert_integer(rcx)
    53 00001BBB 803911              <1>  cmp byte [%1], %2
    54 00001BBE 0F85D6020000        <1>  jne L_error_incorrect_type
  2143 00001BC4 488B4901                        mov rcx, qword [rcx + 1]
  2144 00001BC8 4883F900                        cmp rcx, 0
  2145 00001BCC 0F8C5D010000                    jl L_error_integer_range
  2146 00001BD2 488B5528                        mov rdx, PARAM(1)
  2147                                          assert_char(rdx)
    53 00001BD6 803A02              <1>  cmp byte [%1], %2
    54 00001BD9 0F85BB020000        <1>  jne L_error_incorrect_type
  2148 00001BDF 8A5201                          mov dl, byte [rdx + 1]
  2149 00001BE2 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2150 00001BE6 E8ABE5FFFF                      call malloc
  2151 00001BEB C60003                          mov byte [rax], T_string
  2152 00001BEE 48894801                        mov qword [rax + 1], rcx
  2153 00001BF2 41B800000000                    mov r8, 0
  2154                                  .L0:
  2155 00001BF8 4939C8                          cmp r8, rcx
  2156 00001BFB 7408                            je .L1
  2157 00001BFD 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2158 00001C02 49FFC0                          inc r8
  2159 00001C05 EBF1                            jmp .L0
  2160                                  .L1:
  2161 00001C07 C9                              leave
  2162 00001C08 C22000                          ret AND_KILL_FRAME(2)
  2163                                  
  2164                                  L_code_ptr_numerator:
  2165 00001C0B C8000000                        enter 0, 0
  2166 00001C0F 48837D1801                      cmp COUNT, 1
  2167 00001C14 0F85AC010000                    jne L_error_arg_count_1
  2168 00001C1A 488B4520                        mov rax, PARAM(0)
  2169                                          assert_fraction(rax)
    53 00001C1E 803812              <1>  cmp byte [%1], %2
    54 00001C21 0F8573020000        <1>  jne L_error_incorrect_type
  2170 00001C27 488B7801                        mov rdi, qword [rax + 1]
  2171 00001C2B E8E5000000                      call make_integer
  2172 00001C30 C9                              leave
  2173 00001C31 C21800                          ret AND_KILL_FRAME(1)
  2174                                          
  2175                                  L_code_ptr_denominator:
  2176 00001C34 C8000000                        enter 0, 0
  2177 00001C38 48837D1801                      cmp COUNT, 1
  2178 00001C3D 0F8583010000                    jne L_error_arg_count_1
  2179 00001C43 488B4520                        mov rax, PARAM(0)
  2180                                          assert_fraction(rax)
    53 00001C47 803812              <1>  cmp byte [%1], %2
    54 00001C4A 0F854A020000        <1>  jne L_error_incorrect_type
  2181 00001C50 488B7809                        mov rdi, qword [rax + 1 + 8]
  2182 00001C54 E8BC000000                      call make_integer
  2183 00001C59 C9                              leave
  2184 00001C5A C21800                          ret AND_KILL_FRAME(1)
  2185                                  
  2186                                  L_code_ptr_is_eq:
  2187 00001C5D C8000000                	enter 0, 0
  2188 00001C61 48837D1802              	cmp COUNT, 2
  2189 00001C66 0F858F010000            	jne L_error_arg_count_2
  2190 00001C6C 488B7D20                	mov rdi, PARAM(0)
  2191 00001C70 488B7528                	mov rsi, PARAM(1)
  2192 00001C74 4839F7                  	cmp rdi, rsi
  2193 00001C77 746A                    	je .L_eq_true
  2194 00001C79 8A17                    	mov dl, byte [rdi]
  2195 00001C7B 3A16                    	cmp dl, byte [rsi]
  2196 00001C7D 7570                    	jne .L_eq_false
  2197 00001C7F 80FA02                  	cmp dl, T_char
  2198 00001C82 7457                    	je .L_char
  2199 00001C84 80FA41                  	cmp dl, T_interned_symbol
  2200 00001C87 743E                    	je .L_interned_symbol
  2201 00001C89 80FA42                          cmp dl, T_uninterned_symbol
  2202 00001C8C 7441                            je .L_uninterned_symbol
  2203 00001C8E 80FA13                  	cmp dl, T_real
  2204 00001C91 742C                    	je .L_real
  2205 00001C93 80FA12                  	cmp dl, T_fraction
  2206 00001C96 7411                    	je .L_fraction
  2207 00001C98 80FA11                          cmp dl, T_integer
  2208 00001C9B 7400                            je .L_integer
  2209 00001C9D EB50                    	jmp .L_eq_false
  2210                                  .L_integer:
  2211 00001C9F 488B4601                        mov rax, qword [rsi + 1]
  2212 00001CA3 483B4701                        cmp rax, qword [rdi + 1]
  2213 00001CA7 7546                            jne .L_eq_false
  2214 00001CA9 EB38                            jmp .L_eq_true
  2215                                  .L_fraction:
  2216 00001CAB 488B4601                	mov rax, qword [rsi + 1]
  2217 00001CAF 483B4701                	cmp rax, qword [rdi + 1]
  2218 00001CB3 753A                    	jne .L_eq_false
  2219 00001CB5 488B4609                	mov rax, qword [rsi + 1 + 8]
  2220 00001CB9 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2221 00001CBD 7530                    	jne .L_eq_false
  2222 00001CBF EB22                    	jmp .L_eq_true
  2223                                  .L_real:
  2224 00001CC1 488B4601                	mov rax, qword [rsi + 1]
  2225 00001CC5 483B4701                	cmp rax, qword [rdi + 1]
  2226                                  .L_interned_symbol:
  2227                                  	; never reached, because interned_symbols are static!
  2228                                  	; but I'm keeping it in case, I'll ever change
  2229                                  	; the implementation
  2230 00001CC9 488B4601                	mov rax, qword [rsi + 1]
  2231 00001CCD 483B4701                	cmp rax, qword [rdi + 1]
  2232                                  .L_uninterned_symbol:
  2233 00001CD1 4C8B4701                        mov r8, qword [rdi + 1]
  2234 00001CD5 4C3B4601                        cmp r8, qword [rsi + 1]
  2235 00001CD9 7514                            jne .L_eq_false
  2236 00001CDB EB06                            jmp .L_eq_true
  2237                                  .L_char:
  2238 00001CDD 8A5E01                  	mov bl, byte [rsi + 1]
  2239 00001CE0 3A5F01                  	cmp bl, byte [rdi + 1]
  2240 00001CE3 750A                    	jne .L_eq_false
  2241                                  .L_eq_true:
  2242 00001CE5 48B8-                   	mov rax, sob_boolean_true
  2242 00001CE7 [0300000000000000] 
  2243 00001CEF EB08                    	jmp .L_eq_exit
  2244                                  .L_eq_false:
  2245 00001CF1 48B8-                   	mov rax, sob_boolean_false
  2245 00001CF3 [0200000000000000] 
  2246                                  .L_eq_exit:
  2247 00001CFB C9                      	leave
  2248 00001CFC C22000                  	ret AND_KILL_FRAME(2)
  2249                                  
  2250                                  make_real:
  2251 00001CFF C8000000                        enter 0, 0
  2252 00001D03 BF09000000                      mov rdi, (1 + 8)
  2253 00001D08 E889E4FFFF                      call malloc
  2254 00001D0D C60013                          mov byte [rax], T_real
  2255 00001D10 F20F114001                      movsd qword [rax + 1], xmm0
  2256 00001D15 C9                              leave 
  2257 00001D16 C3                              ret
  2258                                          
  2259                                  make_integer:
  2260 00001D17 C8000000                        enter 0, 0
  2261 00001D1B 4889FE                          mov rsi, rdi
  2262 00001D1E BF09000000                      mov rdi, (1 + 8)
  2263 00001D23 E86EE4FFFF                      call malloc
  2264 00001D28 C60011                          mov byte [rax], T_integer
  2265 00001D2B 48897001                        mov qword [rax + 1], rsi
  2266 00001D2F C9                              leave
  2267 00001D30 C3                              ret
  2268                                          
  2269                                  L_error_integer_range:
  2270 00001D31 488B3C25[00000000]              mov rdi, qword [stderr]
  2271 00001D39 48BE-                           mov rsi, fmt_integer_range
  2271 00001D3B [1204000000000000] 
  2272 00001D43 B800000000                      mov rax, 0
  2273                                          ENTER
    44 00001D48 C8000000            <1>  enter 0, 0
    45 00001D4C 4883E4F0            <1>  and rsp, ~15
  2274 00001D50 E8(00000000)                    call fprintf
  2275                                          LEAVE
    49 00001D55 C9                  <1>  leave
  2276 00001D56 48C7C0FBFFFFFF                  mov rax, -5
  2277 00001D5D E8(00000000)                    call exit
  2278                                  
  2279                                  L_error_arg_negative:
  2280 00001D62 488B3C25[00000000]              mov rdi, qword [stderr]
  2281 00001D6A 48BE-                           mov rsi, fmt_arg_negative
  2281 00001D6C [EA02000000000000] 
  2282 00001D74 B800000000                      mov rax, 0
  2283                                          ENTER
    44 00001D79 C8000000            <1>  enter 0, 0
    45 00001D7D 4883E4F0            <1>  and rsp, ~15
  2284 00001D81 E8(00000000)                    call fprintf
  2285                                          LEAVE
    49 00001D86 C9                  <1>  leave
  2286 00001D87 48C7C0FDFFFFFF                  mov rax, -3
  2287 00001D8E E8(00000000)                    call exit
  2288                                  
  2289                                  L_error_arg_count_0:
  2290 00001D93 488B3C25[00000000]              mov rdi, qword [stderr]
  2291 00001D9B 48BE-                           mov rsi, fmt_arg_count_0
  2291 00001D9D [1003000000000000] 
  2292 00001DA5 488B5518                        mov rdx, COUNT
  2293 00001DA9 B800000000                      mov rax, 0
  2294                                          ENTER
    44 00001DAE C8000000            <1>  enter 0, 0
    45 00001DB2 4883E4F0            <1>  and rsp, ~15
  2295 00001DB6 E8(00000000)                    call fprintf
  2296                                          LEAVE
    49 00001DBB C9                  <1>  leave
  2297 00001DBC 48C7C0FDFFFFFF                  mov rax, -3
  2298 00001DC3 E8(00000000)                    call exit
  2299                                  
  2300                                  L_error_arg_count_1:
  2301 00001DC8 488B3C25[00000000]              mov rdi, qword [stderr]
  2302 00001DD0 48BE-                           mov rsi, fmt_arg_count_1
  2302 00001DD2 [3803000000000000] 
  2303 00001DDA 488B5518                        mov rdx, COUNT
  2304 00001DDE B800000000                      mov rax, 0
  2305                                          ENTER
    44 00001DE3 C8000000            <1>  enter 0, 0
    45 00001DE7 4883E4F0            <1>  and rsp, ~15
  2306 00001DEB E8(00000000)                    call fprintf
  2307                                          LEAVE
    49 00001DF0 C9                  <1>  leave
  2308 00001DF1 48C7C0FDFFFFFF                  mov rax, -3
  2309 00001DF8 E8(00000000)                    call exit
  2310                                  
  2311                                  L_error_arg_count_2:
  2312 00001DFD 488B3C25[00000000]              mov rdi, qword [stderr]
  2313 00001E05 48BE-                           mov rsi, fmt_arg_count_2
  2313 00001E07 [9E03000000000000] 
  2314 00001E0F 488B5518                        mov rdx, COUNT
  2315 00001E13 B800000000                      mov rax, 0
  2316                                          ENTER
    44 00001E18 C8000000            <1>  enter 0, 0
    45 00001E1C 4883E4F0            <1>  and rsp, ~15
  2317 00001E20 E8(00000000)                    call fprintf
  2318                                          LEAVE
    49 00001E25 C9                  <1>  leave
  2319 00001E26 48C7C0FDFFFFFF                  mov rax, -3
  2320 00001E2D E8(00000000)                    call exit
  2321                                  
  2322                                  L_error_arg_count_12:
  2323 00001E32 488B3C25[00000000]              mov rdi, qword [stderr]
  2324 00001E3A 48BE-                           mov rsi, fmt_arg_count_12
  2324 00001E3C [5E03000000000000] 
  2325 00001E44 488B5518                        mov rdx, COUNT
  2326 00001E48 B800000000                      mov rax, 0
  2327                                          ENTER
    44 00001E4D C8000000            <1>  enter 0, 0
    45 00001E51 4883E4F0            <1>  and rsp, ~15
  2328 00001E55 E8(00000000)                    call fprintf
  2329                                          LEAVE
    49 00001E5A C9                  <1>  leave
  2330 00001E5B 48C7C0FDFFFFFF                  mov rax, -3
  2331 00001E62 E8(00000000)                    call exit
  2332                                  
  2333                                  L_error_arg_count_3:
  2334 00001E67 488B3C25[00000000]              mov rdi, qword [stderr]
  2335 00001E6F 48BE-                           mov rsi, fmt_arg_count_3
  2335 00001E71 [C503000000000000] 
  2336 00001E79 488B5518                        mov rdx, COUNT
  2337 00001E7D B800000000                      mov rax, 0
  2338                                          ENTER
    44 00001E82 C8000000            <1>  enter 0, 0
    45 00001E86 4883E4F0            <1>  and rsp, ~15
  2339 00001E8A E8(00000000)                    call fprintf
  2340                                          LEAVE
    49 00001E8F C9                  <1>  leave
  2341 00001E90 48C7C0FDFFFFFF                  mov rax, -3
  2342 00001E97 E8(00000000)                    call exit
  2343                                          
  2344                                  L_error_incorrect_type:
  2345 00001E9C 488B3C25[00000000]              mov rdi, qword [stderr]
  2346 00001EA4 48BE-                           mov rsi, fmt_type
  2346 00001EA6 [EE03000000000000] 
  2347 00001EAE B800000000                      mov rax, 0
  2348                                          ENTER
    44 00001EB3 C8000000            <1>  enter 0, 0
    45 00001EB7 4883E4F0            <1>  and rsp, ~15
  2349 00001EBB E8(00000000)                    call fprintf
  2350                                          LEAVE
    49 00001EC0 C9                  <1>  leave
  2351 00001EC1 48C7C0FCFFFFFF                  mov rax, -4
  2352 00001EC8 E8(00000000)                    call exit
  2353                                  
  2354                                  L_error_division_by_zero:
  2355 00001ECD 488B3C25[00000000]              mov rdi, qword [stderr]
  2356 00001ED5 48BE-                           mov rsi, fmt_division_by_zero
  2356 00001ED7 [2F04000000000000] 
  2357 00001EDF B800000000                      mov rax, 0
  2358                                          ENTER
    44 00001EE4 C8000000            <1>  enter 0, 0
    45 00001EE8 4883E4F0            <1>  and rsp, ~15
  2359 00001EEC E8(00000000)                    call fprintf
  2360                                          LEAVE
    49 00001EF1 C9                  <1>  leave
  2361 00001EF2 48C7C0F8FFFFFF                  mov rax, -8
  2362 00001EF9 E8(00000000)                    call exit
  2363                                  
  2364                                  section .data
  2365                                  gensym_count:
  2366 000002DF 0000000000000000                dq 0
  2367                                  fmt_char:
  2368 000002E7 256300                          db `%c\0`
  2369                                  fmt_arg_negative:
  2370 000002EA 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2370 000002F3 7267756D656E742063-
  2370 000002FC 616E6E6F7420626520-
  2370 00000305 6E656761746976652E-
  2370 0000030E 0A00               
  2371                                  fmt_arg_count_0:
  2372 00000310 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2372 00000319 74696E67207A65726F-
  2372 00000322 20617267756D656E74-
  2372 0000032B 732E20466F756E6420-
  2372 00000334 25640A00           
  2373                                  fmt_arg_count_1:
  2374 00000338 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2374 00000341 74696E67206F6E6520-
  2374 0000034A 617267756D656E742E-
  2374 00000353 20466F756E64202564-
  2374 0000035C 0A00               
  2375                                  fmt_arg_count_12:
  2376 0000035E 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2376 00000367 74696E67206F6E6520-
  2376 00000370 726571756972656420-
  2376 00000379 616E64206F6E65206F-
  2376 00000382 7074696F6E616C2061-
  2376 0000038B 7267756D656E742E20-
  2376 00000394 466F756E642025640A-
  2376 0000039D 00                 
  2377                                  fmt_arg_count_2:
  2378 0000039E 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2378 000003A7 74696E672074776F20-
  2378 000003B0 617267756D656E7473-
  2378 000003B9 2E20466F756E642025-
  2378 000003C2 640A00             
  2379                                  fmt_arg_count_3:
  2380 000003C5 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2380 000003CE 74696E672074687265-
  2380 000003D7 6520617267756D656E-
  2380 000003E0 74732E20466F756E64-
  2380 000003E9 2025640A00         
  2381                                  fmt_type:
  2382 000003EE 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2382 000003F7 696F6E207061737365-
  2382 00000400 6420696E636F727265-
  2382 00000409 637420747970650A00 
  2383                                  fmt_integer_range:
  2384 00000412 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2384 0000041B 7265637420696E7465-
  2384 00000424 6765722072616E6765-
  2384 0000042D 0A00               
  2385                                  fmt_division_by_zero:
  2386 0000042F 212121204469766973-             db `!!! Division by zero\n\0`
  2386 00000438 696F6E206279207A65-
  2386 00000441 726F0A00           
  2387                                  fmt_scheme_error_part_1:
  2388 00000445 0A2121212054686520-             db `\n!!! The procedure \0`
  2388 0000044E 70726F636564757265-
  2388 00000457 2000               
  2389                                  fmt_scheme_error_part_2:
  2390 00000459 2061736B656420746F-             db ` asked to terminate the program\n`
  2390 00000462 207465726D696E6174-
  2390 0000046B 65207468652070726F-
  2390 00000474 6772616D0A         
  2391 00000479 202020207769746820-             db `    with the following message:\n\n\0`
  2391 00000482 74686520666F6C6C6F-
  2391 0000048B 77696E67206D657373-
  2391 00000494 6167653A0A0A00     
  2392                                  fmt_scheme_error_part_3:
  2393 0000049B 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2393 000004A4 210A0A00           
