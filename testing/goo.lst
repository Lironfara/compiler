     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  
   468                                  
   469                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   470                                  global main
   471                                  section .text
   472                                  main:
   473 00000000 C8000000                        enter 0, 0
   474 00000004 6A00                            push 0
   475 00000006 6A00                            push 0
   476 00000008 68[11000000]                    push Lend
   477 0000000D C8000000                        enter 0, 0
   478                                  
   479                                  Lend:
   480 00000011 4889C7                  	mov rdi, rax
   481 00000014 E8B8030000              	call print_sexpr_if_not_void
   482                                  
   483 00000019 48BF-                           mov rdi, fmt_memory_usage
   483 0000001B [7506000000000000] 
   484 00000023 488B3425[FB060000]              mov rsi, qword [top_of_memory]
   485 0000002B 4881EE[00000000]                sub rsi, memory
   486 00000032 B800000000                      mov rax, 0
   487                                          ENTER
    44 00000037 C8000000            <1>  enter 0, 0
    45 0000003B 4883E4F0            <1>  and rsp, ~15
   488 0000003F E8(00000000)                    call printf
   489                                          LEAVE
    49 00000044 C9                  <1>  leave
   490 00000045 B800000000                      mov rax, 0
   491 0000004A E8(00000000)                    call exit
   492                                  
   493                                  L_error_fvar_undefined:
   494 0000004F 50                              push rax
   495 00000050 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
   496 00000058 48BE-                           mov rsi, fmt_undefined_free_var_1
   496 0000005A [DD05000000000000] 
   497 00000062 B800000000                      mov rax, 0
   498                                          ENTER
    44 00000067 C8000000            <1>  enter 0, 0
    45 0000006B 4883E4F0            <1>  and rsp, ~15
   499 0000006F E8(00000000)                    call fprintf
   500                                          LEAVE
    49 00000074 C9                  <1>  leave
   501 00000075 58                              pop rax
   502 00000076 488B4001                        mov rax, qword [rax + 1] ; string
   503 0000007A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
   504 0000007E BE01000000                      mov rsi, 1               ; sizeof(char)
   505 00000083 488B5001                        mov rdx, qword [rax + 1] ; string-length
   506 00000087 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
   507 0000008F B800000000                      mov rax, 0
   508                                          ENTER
    44 00000094 C8000000            <1>  enter 0, 0
    45 00000098 4883E4F0            <1>  and rsp, ~15
   509 0000009C E8(00000000)                    call fwrite
   510                                          LEAVE
    49 000000A1 C9                  <1>  leave
   511 000000A2 488B3C25[00000000]              mov rdi, [stderr]       ; destination
   512 000000AA 48BE-                           mov rsi, fmt_undefined_free_var_2
   512 000000AC [F405000000000000] 
   513 000000B4 B800000000                      mov rax, 0
   514                                          ENTER
    44 000000B9 C8000000            <1>  enter 0, 0
    45 000000BD 4883E4F0            <1>  and rsp, ~15
   515 000000C1 E8(00000000)                    call fprintf
   516                                          LEAVE
    49 000000C6 C9                  <1>  leave
   517 000000C7 48C7C0F6FFFFFF                  mov rax, -10
   518 000000CE E8(00000000)                    call exit
   519                                  
   520                                  L_error_non_closure:
   521 000000D3 488B3C25[00000000]              mov rdi, qword [stderr]
   522 000000DB 48BE-                           mov rsi, fmt_non_closure
   522 000000DD [AB06000000000000] 
   523 000000E5 B800000000                      mov rax, 0
   524                                          ENTER
    44 000000EA C8000000            <1>  enter 0, 0
    45 000000EE 4883E4F0            <1>  and rsp, ~15
   525 000000F2 E8(00000000)                    call fprintf
   526                                          LEAVE
    49 000000F7 C9                  <1>  leave
   527 000000F8 48C7C0FEFFFFFF                  mov rax, -2
   528 000000FF E8(00000000)                    call exit
   529                                  
   530                                  L_error_improper_list:
   531 00000104 488B3C25[00000000]      	mov rdi, qword [stderr]
   532 0000010C 48BE-                   	mov rsi, fmt_error_improper_list
   532 0000010E [D306000000000000] 
   533 00000116 B800000000              	mov rax, 0
   534                                          ENTER
    44 0000011B C8000000            <1>  enter 0, 0
    45 0000011F 4883E4F0            <1>  and rsp, ~15
   535 00000123 E8(00000000)            	call fprintf
   536                                          LEAVE
    49 00000128 C9                  <1>  leave
   537 00000129 48C7C0F9FFFFFF          	mov rax, -7
   538 00000130 E8(00000000)            	call exit
   539                                  
   540                                  L_error_incorrect_arity_simple:
   541 00000135 488B3C25[00000000]              mov rdi, qword [stderr]
   542 0000013D 48BE-                           mov rsi, fmt_incorrect_arity_simple
   542 0000013F [1606000000000000] 
   543 00000147 EB12                            jmp L_error_incorrect_arity_common
   544                                  L_error_incorrect_arity_opt:
   545 00000149 488B3C25[00000000]              mov rdi, qword [stderr]
   546 00000151 48BE-                           mov rsi, fmt_incorrect_arity_opt
   546 00000153 [4106000000000000] 
   547                                  L_error_incorrect_arity_common:
   548 0000015B 5A                              pop rdx
   549 0000015C 59                              pop rcx
   550 0000015D B800000000                      mov rax, 0
   551                                          ENTER
    44 00000162 C8000000            <1>  enter 0, 0
    45 00000166 4883E4F0            <1>  and rsp, ~15
   552 0000016A E8(00000000)                    call fprintf
   553                                          LEAVE
    49 0000016F C9                  <1>  leave
   554 00000170 48C7C0FAFFFFFF                  mov rax, -6
   555 00000177 E8(00000000)                    call exit
   556                                  
   557                                  section .data
   558                                  fmt_undefined_free_var_1:
   559 000005DD 212121205468652066-             db `!!! The free variable \0`
   559 000005E6 726565207661726961-
   559 000005EF 626C652000         
   560                                  fmt_undefined_free_var_2:
   561 000005F4 207761732075736564-             db ` was used before it was defined.\n\0`
   561 000005FD 206265666F72652069-
   561 00000606 742077617320646566-
   561 0000060F 696E65642E0A00     
   562                                  fmt_incorrect_arity_simple:
   563 00000616 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   563 0000061F 74656420256C642061-
   563 00000628 7267756D656E74732C-
   563 00000631 206275742067697665-
   563 0000063A 6E20256C640A00     
   564                                  fmt_incorrect_arity_opt:
   565 00000641 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   565 0000064A 746564206174206C65-
   565 00000653 61737420256C642061-
   565 0000065C 7267756D656E74732C-
   565 00000665 206275742067697665-
   565 0000066E 6E20256C640A00     
   566                                  fmt_memory_usage:
   567 00000675 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   567 0000067E 20256C642062797465-
   567 00000687 73206F662064796E61-
   567 00000690 6D6963616C6C792D61-
   567 00000699 6C6C6F636174656420-
   567 000006A2 6D656D6F72790A0A00 
   568                                  fmt_non_closure:
   569 000006AB 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   569 000006B4 7074696E6720746F20-
   569 000006BD 6170706C792061206E-
   569 000006C6 6F6E2D636C6F737572-
   569 000006CF 65210A00           
   570                                  fmt_error_improper_list:
   571 000006D3 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   571 000006DC 7267756D656E742069-
   571 000006E5 73206E6F7420612070-
   571 000006EE 726F706572206C6973-
   571 000006F7 74210A00           
   572                                  
   573                                  section .bss
   574                                  memory:
   575 00000000 <res 40000000h>         	resb gbytes(1)
   576                                  
   577                                  section .data
   578                                  top_of_memory:
   579 000006FB [0000000000000000]              dq memory
   580                                  
   581                                  section .text
   582                                  malloc:
   583 0000017C 488B0425[FB060000]              mov rax, qword [top_of_memory]
   584 00000184 48013C25[FB060000]              add qword [top_of_memory], rdi
   585 0000018C C3                              ret
   586                                  
   587                                  L_code_ptr_return:
   588 0000018D 48837C241002            	cmp qword [rsp + 8*2], 2
   589 00000193 0F85461C0000            	jne L_error_arg_count_2
   590 00000199 488B4C2418              	mov rcx, qword [rsp + 8*3]
   591                                  	assert_integer(rcx)
    53 0000019E 803911              <1>  cmp byte [%1], %2
    54 000001A1 0F85D71C0000        <1>  jne L_error_incorrect_type
   592 000001A7 488B4901                	mov rcx, qword [rcx + 1]
   593 000001AB 4883F900                	cmp rcx, 0
   594 000001AF 0F8C5E1B0000            	jl L_error_integer_range
   595 000001B5 488B442420              	mov rax, qword [rsp + 8*4]
   596                                  .L0:
   597 000001BA 4883F900                        cmp rcx, 0
   598 000001BE 7409                            je .L1
   599 000001C0 488B6D00                	mov rbp, qword [rbp]
   600 000001C4 48FFC9                  	dec rcx
   601 000001C7 7FF1                    	jg .L0
   602                                  .L1:
   603 000001C9 4889EC                  	mov rsp, rbp
   604 000001CC 5D                      	pop rbp
   605 000001CD 5B                              pop rbx
   606 000001CE 488B4C2408                      mov rcx, qword [rsp + 8*1]
   607 000001D3 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
   608 000001D8 FFE3                    	jmp rbx
   609                                  
   610                                  L_code_ptr_make_list:
   611 000001DA C8000000                	enter 0, 0
   612 000001DE 48837D1801                      cmp COUNT, 1
   613 000001E3 740C                            je .L0
   614 000001E5 48837D1802                      cmp COUNT, 2
   615 000001EA 7411                            je .L1
   616 000001EC E9231C0000                      jmp L_error_arg_count_12
   617                                  .L0:
   618 000001F1 49B9-                           mov r9, sob_void
   618 000001F3 [0000000000000000] 
   619 000001FB EB04                            jmp .L2
   620                                  .L1:
   621 000001FD 4C8B4D28                        mov r9, PARAM(1)
   622                                  .L2:
   623 00000201 488B4D20                        mov rcx, PARAM(0)
   624                                          assert_integer(rcx)
    53 00000205 803911              <1>  cmp byte [%1], %2
    54 00000208 0F85701C0000        <1>  jne L_error_incorrect_type
   625 0000020E 488B4901                        mov rcx, qword [rcx + 1]
   626 00000212 4883F900                        cmp rcx, 0
   627 00000216 0F8C281B0000                    jl L_error_arg_negative
   628 0000021C 49B8-                           mov r8, sob_nil
   628 0000021E [0100000000000000] 
   629                                  .L3:
   630 00000226 4883F900                        cmp rcx, 0
   631 0000022A 7E1D                            jle .L4
   632 0000022C BF11000000                      mov rdi, 1 + 8 + 8
   633 00000231 E846FFFFFF                      call malloc
   634 00000236 C60021                          mov byte [rax], T_pair
   635 00000239 4C894801                        mov qword [rax + 1], r9
   636 0000023D 4C894009                        mov qword [rax + 1 + 8], r8
   637 00000241 4989C0                          mov r8, rax
   638 00000244 48FFC9                          dec rcx
   639 00000247 EBDD                            jmp .L3
   640                                  .L4:
   641 00000249 4C89C0                          mov rax, r8
   642 0000024C 48837D1802                      cmp COUNT, 2
   643 00000251 7404                            je .L5
   644 00000253 C9                              leave
   645 00000254 C21800                          ret AND_KILL_FRAME(1)
   646                                  .L5:
   647 00000257 C9                      	leave
   648 00000258 C22000                  	ret AND_KILL_FRAME(2)
   649                                  
   650                                  L_code_ptr_is_primitive:
   651 0000025B C8000000                	enter 0, 0
   652 0000025F 48837D1801              	cmp COUNT, 1
   653 00000264 0F85401B0000            	jne L_error_arg_count_1
   654 0000026A 488B4520                	mov rax, PARAM(0)
   655                                  	assert_closure(rax)
    53 0000026E 803804              <1>  cmp byte [%1], %2
    54 00000271 0F85071C0000        <1>  jne L_error_incorrect_type
   656 00000277 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
   657 0000027C 750C                    	jne .L_false
   658 0000027E 48B8-                   	mov rax, sob_boolean_true
   658 00000280 [0300000000000000] 
   659 00000288 EB0A                    	jmp .L_end
   660                                  .L_false:
   661 0000028A 48B8-                   	mov rax, sob_boolean_false
   661 0000028C [0200000000000000] 
   662                                  .L_end:
   663 00000294 C9                      	leave
   664 00000295 C21800                  	ret AND_KILL_FRAME(1)
   665                                  
   666                                  L_code_ptr_length:
   667 00000298 C8000000                	enter 0, 0
   668 0000029C 48837D1801              	cmp COUNT, 1
   669 000002A1 0F85031B0000            	jne L_error_arg_count_1
   670 000002A7 488B5D20                	mov rbx, PARAM(0)
   671 000002AB BF00000000              	mov rdi, 0
   672                                  .L:
   673 000002B0 803B01                  	cmp byte [rbx], T_nil
   674 000002B3 7412                    	je .L_end
   675                                  	assert_pair(rbx)
    53 000002B5 803B21              <1>  cmp byte [%1], %2
    54 000002B8 0F85C01B0000        <1>  jne L_error_incorrect_type
   676 000002BE 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
   677 000002C2 48FFC7                  	inc rdi
   678 000002C5 EBE9                    	jmp .L
   679                                  .L_end:
   680 000002C7 E82D1A0000              	call make_integer
   681 000002CC C9                      	leave
   682 000002CD C21800                  	ret AND_KILL_FRAME(1)
   683                                  
   684                                  L_code_ptr_break:
   685 000002D0 48837C241000                    cmp qword [rsp + 8 * 2], 0
   686 000002D6 0F85991A0000                    jne L_error_arg_count_0
   687 000002DC CC                              int3
   688 000002DD 48B8-                           mov rax, sob_void
   688 000002DF [0000000000000000] 
   689 000002E7 C21000                          ret AND_KILL_FRAME(0)        
   690                                  
   691                                  L_code_ptr_frame:
   692 000002EA C8000000                        enter 0, 0
   693 000002EE 48837D1800                      cmp COUNT, 0
   694 000002F3 0F857C1A0000                    jne L_error_arg_count_0
   695                                  
   696 000002F9 48BF-                           mov rdi, fmt_frame
   696 000002FB [0307000000000000] 
   697 00000303 488B7500                        mov rsi, qword [rbp]    ; old rbp
   698 00000307 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
   699 0000030B 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
   700 0000030F 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
   701 00000313 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
   702 00000317 6A00                            push 0
   703 00000319 4151                            push r9
   704 0000031B 4150                            push r8                   ; we'll use it when printing the params
   705 0000031D B800000000                      mov rax, 0
   706                                          
   707                                          ENTER
    44 00000322 C8000000            <1>  enter 0, 0
    45 00000326 4883E4F0            <1>  and rsp, ~15
   708 0000032A E8(00000000)                    call printf
   709                                          LEAVE
    49 0000032F C9                  <1>  leave
   710                                  
   711                                  .L:
   712 00000330 488B0C24                        mov rcx, qword [rsp]
   713 00000334 4883F900                        cmp rcx, 0
   714 00000338 7467                            je .L_out
   715 0000033A 48BF-                           mov rdi, fmt_frame_param_prefix
   715 0000033C [3C07000000000000] 
   716 00000344 488B742410                      mov rsi, qword [rsp + 8*2]
   717 00000349 B800000000                      mov rax, 0
   718                                          
   719                                          ENTER
    44 0000034E C8000000            <1>  enter 0, 0
    45 00000352 4883E4F0            <1>  and rsp, ~15
   720 00000356 E8(00000000)                    call printf
   721                                          LEAVE
    49 0000035B C9                  <1>  leave
   722                                  
   723 0000035C 488B0C24                        mov rcx, qword [rsp]
   724 00000360 48FFC9                          dec rcx
   725 00000363 48890C24                        mov qword [rsp], rcx    ; dec arg count
   726 00000367 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
   727 0000036C 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
   728 00000371 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
   729 00000375 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
   730 0000037A 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
   731 0000037D E87B000000                      call print_sexpr
   732 00000382 48BF-                           mov rdi, fmt_newline
   732 00000384 [6807000000000000] 
   733 0000038C B800000000                      mov rax, 0
   734                                          ENTER
    44 00000391 C8000000            <1>  enter 0, 0
    45 00000395 4883E4F0            <1>  and rsp, ~15
   735 00000399 E8(00000000)                    call printf
   736                                          LEAVE
    49 0000039E C9                  <1>  leave
   737 0000039F EB8F                            jmp .L
   738                                  .L_out:
   739 000003A1 48BF-                           mov rdi, fmt_frame_continue
   739 000003A3 [4D07000000000000] 
   740 000003AB B800000000                      mov rax, 0
   741                                          ENTER
    44 000003B0 C8000000            <1>  enter 0, 0
    45 000003B4 4883E4F0            <1>  and rsp, ~15
   742 000003B8 E8(00000000)                    call printf
   743 000003BD E8(00000000)                    call getchar
   744                                          LEAVE
    49 000003C2 C9                  <1>  leave
   745                                          
   746 000003C3 48B8-                           mov rax, sob_void
   746 000003C5 [0000000000000000] 
   747 000003CD C9                              leave
   748 000003CE C21000                          ret AND_KILL_FRAME(0)
   749                                          
   750                                  print_sexpr_if_not_void:
   751 000003D1 4881FF[00000000]        	cmp rdi, sob_void
   752 000003D8 7422                    	je .done
   753 000003DA E81E000000              	call print_sexpr
   754 000003DF 48BF-                   	mov rdi, fmt_newline
   754 000003E1 [6807000000000000] 
   755 000003E9 B800000000              	mov rax, 0
   756                                  	ENTER
    44 000003EE C8000000            <1>  enter 0, 0
    45 000003F2 4883E4F0            <1>  and rsp, ~15
   757 000003F6 E8(00000000)            	call printf
   758                                  	LEAVE
    49 000003FB C9                  <1>  leave
   759                                  .done:
   760 000003FC C3                      	ret
   761                                  
   762                                  section .data
   763                                  fmt_frame:
   764 00000703 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
   764 0000070C 207265742061646472-
   764 00000715 203D2025703B206C65-
   764 0000071E 7820656E76203D2025-
   764 00000727 703B20706172616D20-
   764 00000730 636F756E74203D2025-
   764 00000739 640A00             
   765                                  fmt_frame_param_prefix:
   766 0000073C 3D3D5B706172616D20-             db `==[param %d]==> \0`
   766 00000745 25645D3D3D3E2000   
   767                                  fmt_frame_continue:
   768 0000074D 486974203C456E7465-             db `Hit <Enter> to continue...\0`
   768 00000756 723E20746F20636F6E-
   768 0000075F 74696E75652E2E2E00 
   769                                  fmt_newline:
   770 00000768 0A00                    	db `\n\0`
   771                                  fmt_void:
   772 0000076A 233C766F69643E00        	db `#<void>\0`
   773                                  fmt_nil:
   774 00000772 282900                  	db `()\0`
   775                                  fmt_boolean_false:
   776 00000775 236600                  	db `#f\0`
   777                                  fmt_boolean_true:
   778 00000778 237400                  	db `#t\0`
   779                                  fmt_char_backslash:
   780 0000077B 235C5C00                	db `#\\\\\0`
   781                                  fmt_char_dquote:
   782 0000077F 235C2200                	db `#\\"\0`
   783                                  fmt_char_simple:
   784 00000783 235C256300              	db `#\\%c\0`
   785                                  fmt_char_null:
   786 00000788 235C6E756C00            	db `#\\nul\0`
   787                                  fmt_char_bell:
   788 0000078E 235C62656C6C00          	db `#\\bell\0`
   789                                  fmt_char_backspace:
   790 00000795 235C6261636B737061-     	db `#\\backspace\0`
   790 0000079E 636500             
   791                                  fmt_char_tab:
   792 000007A1 235C74616200            	db `#\\tab\0`
   793                                  fmt_char_newline:
   794 000007A7 235C6E65776C696E65-     	db `#\\newline\0`
   794 000007B0 00                 
   795                                  fmt_char_formfeed:
   796 000007B1 235C7061676500          	db `#\\page\0`
   797                                  fmt_char_return:
   798 000007B8 235C72657475726E00      	db `#\\return\0`
   799                                  fmt_char_escape:
   800 000007C1 235C65736300            	db `#\\esc\0`
   801                                  fmt_char_space:
   802 000007C7 235C737061636500        	db `#\\space\0`
   803                                  fmt_char_hex:
   804 000007CF 235C782530325800        	db `#\\x%02X\0`
   805                                  fmt_gensym:
   806 000007D7 47256C6400                      db `G%ld\0`
   807                                  fmt_closure:
   808 000007DC 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   808 000007E5 206174203078253038-
   808 000007EE 5820656E763D307825-
   808 000007F7 30385820636F64653D-
   808 00000800 3078253038583E00   
   809                                  fmt_lparen:
   810 00000808 2800                    	db `(\0`
   811                                  fmt_dotted_pair:
   812 0000080A 202E2000                	db ` . \0`
   813                                  fmt_rparen:
   814 0000080E 2900                    	db `)\0`
   815                                  fmt_space:
   816 00000810 2000                    	db ` \0`
   817                                  fmt_empty_vector:
   818 00000812 23282900                	db `#()\0`
   819                                  fmt_vector:
   820 00000816 232800                  	db `#(\0`
   821                                  fmt_real:
   822 00000819 256600                  	db `%f\0`
   823                                  fmt_fraction:
   824 0000081C 256C642F256C6400        	db `%ld/%ld\0`
   825                                  fmt_zero:
   826 00000824 3000                    	db `0\0`
   827                                  fmt_int:
   828 00000826 256C6400                	db `%ld\0`
   829                                  fmt_unknown_scheme_object_error:
   830 0000082A 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
   830 00000833 6F723A20556E6B6E6F-
   830 0000083C 776E20536368656D65-
   830 00000845 2D6F626A6563742028-
   830 0000084E 525454492030782530-
   830 00000857 32582920           
   831 0000085B 617420616464726573-     	db `at address 0x%08X\n\n\0`
   831 00000864 73203078253038580A-
   831 0000086D 0A00               
   832                                  fmt_dquote:
   833 0000086F 2200                    	db `\"\0`
   834                                  fmt_string_char:
   835 00000871 256300                          db `%c\0`
   836                                  fmt_string_char_7:
   837 00000874 5C6100                          db `\\a\0`
   838                                  fmt_string_char_8:
   839 00000877 5C6200                          db `\\b\0`
   840                                  fmt_string_char_9:
   841 0000087A 5C7400                          db `\\t\0`
   842                                  fmt_string_char_10:
   843 0000087D 5C6E00                          db `\\n\0`
   844                                  fmt_string_char_11:
   845 00000880 5C7600                          db `\\v\0`
   846                                  fmt_string_char_12:
   847 00000883 5C6600                          db `\\f\0`
   848                                  fmt_string_char_13:
   849 00000886 5C7200                          db `\\r\0`
   850                                  fmt_string_char_34:
   851 00000889 5C2200                          db `\\"\0`
   852                                  fmt_string_char_92:
   853 0000088C 5C5C00                          db `\\\\\0`
   854                                  fmt_string_char_hex:
   855 0000088F 5C7825583B00                    db `\\x%X;\0`
   856                                  
   857                                  section .text
   858                                  
   859                                  print_sexpr:
   860 000003FD C8000000                	enter 0, 0
   861 00000401 8A07                    	mov al, byte [rdi]
   862 00000403 3C00                    	cmp al, T_void
   863 00000405 7465                    	je .Lvoid
   864 00000407 3C01                    	cmp al, T_nil
   865 00000409 7470                    	je .Lnil
   866 0000040B 3C09                    	cmp al, T_boolean_false
   867 0000040D 747B                    	je .Lboolean_false
   868 0000040F 3C0A                    	cmp al, T_boolean_true
   869 00000411 0F8482000000            	je .Lboolean_true
   870 00000417 3C02                    	cmp al, T_char
   871 00000419 0F8489000000            	je .Lchar
   872 0000041F 3C41                    	cmp al, T_interned_symbol
   873 00000421 0F84BF010000            	je .Linterned_symbol
   874 00000427 3C42                            cmp al, T_uninterned_symbol
   875 00000429 0F84E3010000                    je .Luninterned_symbol
   876 0000042F 3C21                    	cmp al, T_pair
   877 00000431 0F84EE010000            	je .Lpair
   878 00000437 3C22                    	cmp al, T_vector
   879 00000439 0F84B7020000            	je .Lvector
   880 0000043F 3C04                    	cmp al, T_closure
   881 00000441 0F8485010000            	je .Lclosure
   882 00000447 3C13                    	cmp al, T_real
   883 00000449 0F8448030000            	je .Lreal
   884 0000044F 3C12                    	cmp al, T_fraction
   885 00000451 0F846E030000            	je .Lfraction
   886 00000457 3C11                    	cmp al, T_integer
   887 00000459 0F84A7030000            	je .Linteger
   888 0000045F 3C03                    	cmp al, T_string
   889 00000461 0F84B2030000            	je .Lstring
   890                                  
   891 00000467 E9DC040000              	jmp .Lunknown_sexpr_type
   892                                  
   893                                  .Lvoid:
   894 0000046C 48BF-                   	mov rdi, fmt_void
   894 0000046E [6A07000000000000] 
   895 00000476 E900050000              	jmp .Lemit
   896                                  
   897                                  .Lnil:
   898 0000047B 48BF-                   	mov rdi, fmt_nil
   898 0000047D [7207000000000000] 
   899 00000485 E9F1040000              	jmp .Lemit
   900                                  
   901                                  .Lboolean_false:
   902 0000048A 48BF-                   	mov rdi, fmt_boolean_false
   902 0000048C [7507000000000000] 
   903 00000494 E9E2040000              	jmp .Lemit
   904                                  
   905                                  .Lboolean_true:
   906 00000499 48BF-                   	mov rdi, fmt_boolean_true
   906 0000049B [7807000000000000] 
   907 000004A3 E9D3040000              	jmp .Lemit
   908                                  
   909                                  .Lchar:
   910 000004A8 8A4701                  	mov al, byte [rdi + 1]
   911 000004AB 3C20                    	cmp al, ' '
   912 000004AD 7E20                    	jle .Lchar_whitespace
   913 000004AF 3C5C                    	cmp al, 92 		; backslash
   914 000004B1 7474                    	je .Lchar_backslash
   915 000004B3 3C22                    	cmp al, '"'
   916 000004B5 747F                    	je .Lchar_dquote
   917 000004B7 4825FF000000            	and rax, 255
   918 000004BD 48BF-                   	mov rdi, fmt_char_simple
   918 000004BF [8307000000000000] 
   919 000004C7 4889C6                  	mov rsi, rax
   920 000004CA E9AC040000              	jmp .Lemit
   921                                  
   922                                  .Lchar_whitespace:
   923 000004CF 3C00                    	cmp al, 0
   924 000004D1 7472                    	je .Lchar_null
   925 000004D3 3C07                    	cmp al, 7
   926 000004D5 747D                    	je .Lchar_bell
   927 000004D7 3C08                    	cmp al, 8
   928 000004D9 0F8484000000            	je .Lchar_backspace
   929 000004DF 3C09                    	cmp al, 9
   930 000004E1 0F848B000000            	je .Lchar_tab
   931 000004E7 3C0A                    	cmp al, 10
   932 000004E9 0F8492000000            	je .Lchar_newline
   933 000004EF 3C0C                    	cmp al, 12
   934 000004F1 0F8499000000            	je .Lchar_formfeed
   935 000004F7 3C0D                    	cmp al, 13
   936 000004F9 0F84A0000000            	je .Lchar_return
   937 000004FF 3C1B                    	cmp al, 27
   938 00000501 0F84A7000000            	je .Lchar_escape
   939 00000507 4825FF000000            	and rax, 255
   940 0000050D 3C20                    	cmp al, ' '
   941 0000050F 0F84A8000000            	je .Lchar_space
   942 00000515 48BF-                   	mov rdi, fmt_char_hex
   942 00000517 [CF07000000000000] 
   943 0000051F 4889C6                  	mov rsi, rax
   944 00000522 E954040000              	jmp .Lemit	
   945                                  
   946                                  .Lchar_backslash:
   947 00000527 48BF-                   	mov rdi, fmt_char_backslash
   947 00000529 [7B07000000000000] 
   948 00000531 E945040000              	jmp .Lemit
   949                                  
   950                                  .Lchar_dquote:
   951 00000536 48BF-                   	mov rdi, fmt_char_dquote
   951 00000538 [7F07000000000000] 
   952 00000540 E936040000              	jmp .Lemit
   953                                  
   954                                  .Lchar_null:
   955 00000545 48BF-                   	mov rdi, fmt_char_null
   955 00000547 [8807000000000000] 
   956 0000054F E927040000              	jmp .Lemit
   957                                  
   958                                  .Lchar_bell:
   959 00000554 48BF-                   	mov rdi, fmt_char_bell
   959 00000556 [8E07000000000000] 
   960 0000055E E918040000              	jmp .Lemit
   961                                  
   962                                  .Lchar_backspace:
   963 00000563 48BF-                   	mov rdi, fmt_char_backspace
   963 00000565 [9507000000000000] 
   964 0000056D E909040000              	jmp .Lemit
   965                                  
   966                                  .Lchar_tab:
   967 00000572 48BF-                   	mov rdi, fmt_char_tab
   967 00000574 [A107000000000000] 
   968 0000057C E9FA030000              	jmp .Lemit
   969                                  
   970                                  .Lchar_newline:
   971 00000581 48BF-                   	mov rdi, fmt_char_newline
   971 00000583 [A707000000000000] 
   972 0000058B E9EB030000              	jmp .Lemit
   973                                  
   974                                  .Lchar_formfeed:
   975 00000590 48BF-                   	mov rdi, fmt_char_formfeed
   975 00000592 [B107000000000000] 
   976 0000059A E9DC030000              	jmp .Lemit
   977                                  
   978                                  .Lchar_return:
   979 0000059F 48BF-                   	mov rdi, fmt_char_return
   979 000005A1 [B807000000000000] 
   980 000005A9 E9CD030000              	jmp .Lemit
   981                                  
   982                                  .Lchar_escape:
   983 000005AE 48BF-                   	mov rdi, fmt_char_escape
   983 000005B0 [C107000000000000] 
   984 000005B8 E9BE030000              	jmp .Lemit
   985                                  
   986                                  .Lchar_space:
   987 000005BD 48BF-                   	mov rdi, fmt_char_space
   987 000005BF [C707000000000000] 
   988 000005C7 E9AF030000              	jmp .Lemit
   989                                  
   990                                  .Lclosure:
   991 000005CC 4889FE                  	mov rsi, qword rdi
   992 000005CF 48BF-                   	mov rdi, fmt_closure
   992 000005D1 [DC07000000000000] 
   993 000005D9 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   994 000005DD 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   995 000005E1 E995030000              	jmp .Lemit
   996                                  
   997                                  .Linterned_symbol:
   998 000005E6 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   999 000005EA BE01000000              	mov rsi, 1		 ; size = 1 byte
  1000 000005EF 488B5701                	mov rdx, qword [rdi + 1] ; length
  1001 000005F3 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1002 000005F7 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1003                                  	ENTER
    44 000005FF C8000000            <1>  enter 0, 0
    45 00000603 4883E4F0            <1>  and rsp, ~15
  1004 00000607 E8(00000000)            	call fwrite
  1005                                  	LEAVE
    49 0000060C C9                  <1>  leave
  1006 0000060D E97E030000              	jmp .Lend
  1007                                  
  1008                                  .Luninterned_symbol:
  1009 00000612 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1010 00000616 48BF-                           mov rdi, fmt_gensym
  1010 00000618 [D707000000000000] 
  1011 00000620 E956030000                      jmp .Lemit
  1012                                  	
  1013                                  .Lpair:
  1014 00000625 57                      	push rdi
  1015 00000626 48BF-                   	mov rdi, fmt_lparen
  1015 00000628 [0808000000000000] 
  1016 00000630 B800000000              	mov rax, 0
  1017                                          ENTER
    44 00000635 C8000000            <1>  enter 0, 0
    45 00000639 4883E4F0            <1>  and rsp, ~15
  1018 0000063D E8(00000000)            	call printf
  1019                                          LEAVE
    49 00000642 C9                  <1>  leave
  1020 00000643 488B3C24                	mov rdi, qword [rsp] 	; pair
  1021 00000647 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1022 0000064B E8ADFDFFFF              	call print_sexpr
  1023 00000650 5F                      	pop rdi 		; pair
  1024 00000651 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1025                                  .Lcdr:
  1026 00000655 8A07                    	mov al, byte [rdi]
  1027 00000657 3C01                    	cmp al, T_nil
  1028 00000659 7447                    	je .Lcdr_nil
  1029 0000065B 3C21                    	cmp al, T_pair
  1030 0000065D 7462                    	je .Lcdr_pair
  1031 0000065F 57                      	push rdi
  1032 00000660 48BF-                   	mov rdi, fmt_dotted_pair
  1032 00000662 [0A08000000000000] 
  1033 0000066A B800000000              	mov rax, 0
  1034                                          ENTER
    44 0000066F C8000000            <1>  enter 0, 0
    45 00000673 4883E4F0            <1>  and rsp, ~15
  1035 00000677 E8(00000000)            	call printf
  1036                                          LEAVE
    49 0000067C C9                  <1>  leave
  1037 0000067D 5F                      	pop rdi
  1038 0000067E E87AFDFFFF              	call print_sexpr
  1039 00000683 48BF-                   	mov rdi, fmt_rparen
  1039 00000685 [0E08000000000000] 
  1040 0000068D B800000000              	mov rax, 0
  1041                                          ENTER
    44 00000692 C8000000            <1>  enter 0, 0
    45 00000696 4883E4F0            <1>  and rsp, ~15
  1042 0000069A E8(00000000)            	call printf
  1043                                          LEAVE
    49 0000069F C9                  <1>  leave
  1044 000006A0 C9                      	leave
  1045 000006A1 C3                      	ret
  1046                                  
  1047                                  .Lcdr_nil:
  1048 000006A2 48BF-                   	mov rdi, fmt_rparen
  1048 000006A4 [0E08000000000000] 
  1049 000006AC B800000000              	mov rax, 0
  1050                                          ENTER
    44 000006B1 C8000000            <1>  enter 0, 0
    45 000006B5 4883E4F0            <1>  and rsp, ~15
  1051 000006B9 E8(00000000)            	call printf
  1052                                          LEAVE
    49 000006BE C9                  <1>  leave
  1053 000006BF C9                      	leave
  1054 000006C0 C3                      	ret
  1055                                  
  1056                                  .Lcdr_pair:
  1057 000006C1 57                      	push rdi
  1058 000006C2 48BF-                   	mov rdi, fmt_space
  1058 000006C4 [1008000000000000] 
  1059 000006CC B800000000              	mov rax, 0
  1060                                          ENTER
    44 000006D1 C8000000            <1>  enter 0, 0
    45 000006D5 4883E4F0            <1>  and rsp, ~15
  1061 000006D9 E8(00000000)            	call printf
  1062                                          LEAVE
    49 000006DE C9                  <1>  leave
  1063 000006DF 488B3C24                	mov rdi, qword [rsp]
  1064 000006E3 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1065 000006E7 E811FDFFFF              	call print_sexpr
  1066 000006EC 5F                      	pop rdi
  1067 000006ED 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1068 000006F1 E95FFFFFFF              	jmp .Lcdr
  1069                                  
  1070                                  .Lvector:
  1071 000006F6 488B4701                	mov rax, qword [rdi + 1] ; length
  1072 000006FA 4883F800                	cmp rax, 0
  1073 000006FE 0F8484000000            	je .Lvector_empty
  1074 00000704 57                      	push rdi
  1075 00000705 48BF-                   	mov rdi, fmt_vector
  1075 00000707 [1608000000000000] 
  1076 0000070F B800000000              	mov rax, 0
  1077                                          ENTER
    44 00000714 C8000000            <1>  enter 0, 0
    45 00000718 4883E4F0            <1>  and rsp, ~15
  1078 0000071C E8(00000000)            	call printf
  1079                                          LEAVE
    49 00000721 C9                  <1>  leave
  1080 00000722 488B3C24                	mov rdi, qword [rsp]
  1081 00000726 FF7701                  	push qword [rdi + 1]
  1082 00000729 6A01                    	push 1
  1083 0000072B 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1084 0000072F E8C9FCFFFF              	call print_sexpr
  1085                                  .Lvector_loop:
  1086                                  	; [rsp] index
  1087                                  	; [rsp + 8*1] limit
  1088                                  	; [rsp + 8*2] vector
  1089 00000734 488B0424                	mov rax, qword [rsp]
  1090 00000738 483B442408              	cmp rax, qword [rsp + 8*1]
  1091 0000073D 7436                    	je .Lvector_end
  1092 0000073F 48BF-                   	mov rdi, fmt_space
  1092 00000741 [1008000000000000] 
  1093 00000749 B800000000              	mov rax, 0
  1094                                          ENTER
    44 0000074E C8000000            <1>  enter 0, 0
    45 00000752 4883E4F0            <1>  and rsp, ~15
  1095 00000756 E8(00000000)            	call printf
  1096                                          LEAVE
    49 0000075B C9                  <1>  leave
  1097 0000075C 488B0424                	mov rax, qword [rsp]
  1098 00000760 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1099 00000765 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1100 0000076A E88EFCFFFF              	call print_sexpr
  1101 0000076F 48FF0424                	inc qword [rsp]
  1102 00000773 EBBF                    	jmp .Lvector_loop
  1103                                  
  1104                                  .Lvector_end:
  1105 00000775 4883C418                	add rsp, 8*3
  1106 00000779 48BF-                   	mov rdi, fmt_rparen
  1106 0000077B [0E08000000000000] 
  1107 00000783 E9F3010000              	jmp .Lemit	
  1108                                  
  1109                                  .Lvector_empty:
  1110 00000788 48BF-                   	mov rdi, fmt_empty_vector
  1110 0000078A [1208000000000000] 
  1111 00000792 E9E4010000              	jmp .Lemit
  1112                                  
  1113                                  .Lreal:
  1114 00000797 FF7701                  	push qword [rdi + 1]
  1115 0000079A F20F100424              	movsd xmm0, qword [rsp]
  1116 0000079F 4883C408                	add rsp, 8*1
  1117 000007A3 48BF-                   	mov rdi, fmt_real
  1117 000007A5 [1908000000000000] 
  1118 000007AD B801000000              	mov rax, 1
  1119                                  	ENTER
    44 000007B2 C8000000            <1>  enter 0, 0
    45 000007B6 4883E4F0            <1>  and rsp, ~15
  1120 000007BA E8(00000000)            	call printf
  1121                                  	LEAVE
    49 000007BF C9                  <1>  leave
  1122 000007C0 E9CB010000              	jmp .Lend
  1123                                  
  1124                                  .Lfraction:
  1125 000007C5 488B7701                	mov rsi, qword [rdi + 1]
  1126 000007C9 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1127 000007CD 4883FE00                	cmp rsi, 0
  1128 000007D1 7415                    	je .Lrat_zero
  1129 000007D3 4883FA01                	cmp rdx, 1
  1130 000007D7 741E                    	je .Lrat_int
  1131 000007D9 48BF-                   	mov rdi, fmt_fraction
  1131 000007DB [1C08000000000000] 
  1132 000007E3 E993010000              	jmp .Lemit
  1133                                  
  1134                                  .Lrat_zero:
  1135 000007E8 48BF-                   	mov rdi, fmt_zero
  1135 000007EA [2408000000000000] 
  1136 000007F2 E984010000              	jmp .Lemit
  1137                                  
  1138                                  .Lrat_int:
  1139 000007F7 48BF-                   	mov rdi, fmt_int
  1139 000007F9 [2608000000000000] 
  1140 00000801 E975010000              	jmp .Lemit
  1141                                  
  1142                                  .Linteger:
  1143 00000806 488B7701                	mov rsi, qword [rdi + 1]
  1144 0000080A 48BF-                   	mov rdi, fmt_int
  1144 0000080C [2608000000000000] 
  1145 00000814 E962010000              	jmp .Lemit
  1146                                  
  1147                                  .Lstring:
  1148 00000819 488D4709                	lea rax, [rdi + 1 + 8]
  1149 0000081D 50                      	push rax
  1150 0000081E FF7701                  	push qword [rdi + 1]
  1151 00000821 48BF-                   	mov rdi, fmt_dquote
  1151 00000823 [6F08000000000000] 
  1152 0000082B B800000000              	mov rax, 0
  1153                                  	ENTER
    44 00000830 C8000000            <1>  enter 0, 0
    45 00000834 4883E4F0            <1>  and rsp, ~15
  1154 00000838 E8(00000000)            	call printf
  1155                                  	LEAVE
    49 0000083D C9                  <1>  leave
  1156                                  .Lstring_loop:
  1157                                  	; qword [rsp]: limit
  1158                                  	; qword [rsp + 8*1]: char *
  1159 0000083E 48833C2400              	cmp qword [rsp], 0
  1160 00000843 0F84EF000000            	je .Lstring_end
  1161 00000849 488B442408              	mov rax, qword [rsp + 8*1]
  1162 0000084E 8A00                    	mov al, byte [rax]
  1163 00000850 4825FF000000            	and rax, 255
  1164 00000856 3C07                    	cmp al, 7
  1165 00000858 745D                            je .Lstring_char_7
  1166 0000085A 3C08                            cmp al, 8
  1167 0000085C 7465                            je .Lstring_char_8
  1168 0000085E 3C09                            cmp al, 9
  1169 00000860 746D                            je .Lstring_char_9
  1170 00000862 3C0A                            cmp al, 10
  1171 00000864 7475                            je .Lstring_char_10
  1172 00000866 3C0B                            cmp al, 11
  1173 00000868 747D                            je .Lstring_char_11
  1174 0000086A 3C0C                            cmp al, 12
  1175 0000086C 0F8481000000                    je .Lstring_char_12
  1176 00000872 3C0D                            cmp al, 13
  1177 00000874 0F8485000000                    je .Lstring_char_13
  1178 0000087A 3C22                            cmp al, 34
  1179 0000087C 0F8489000000                    je .Lstring_char_34
  1180 00000882 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1182 00000884 3C20                            cmp al, ' '
  1183 00000886 0F8C9A000000                    jl .Lstring_char_hex
  1184 0000088C 48BF-                           mov rdi, fmt_string_char
  1184 0000088E [7108000000000000] 
  1185 00000896 4889C6                          mov rsi, rax
  1186                                  .Lstring_char_emit:
  1187 00000899 B800000000                      mov rax, 0
  1188                                          ENTER
    44 0000089E C8000000            <1>  enter 0, 0
    45 000008A2 4883E4F0            <1>  and rsp, ~15
  1189 000008A6 E8(00000000)                    call printf
  1190                                          LEAVE
    49 000008AB C9                  <1>  leave
  1191 000008AC 48FF0C24                        dec qword [rsp]
  1192 000008B0 48FF442408                      inc qword [rsp + 8*1]
  1193 000008B5 EB87                            jmp .Lstring_loop
  1194                                  
  1195                                  .Lstring_char_7:
  1196 000008B7 48BF-                           mov rdi, fmt_string_char_7
  1196 000008B9 [7408000000000000] 
  1197 000008C1 EBD6                            jmp .Lstring_char_emit
  1198                                  
  1199                                  .Lstring_char_8:
  1200 000008C3 48BF-                           mov rdi, fmt_string_char_8
  1200 000008C5 [7708000000000000] 
  1201 000008CD EBCA                            jmp .Lstring_char_emit
  1202                                          
  1203                                  .Lstring_char_9:
  1204 000008CF 48BF-                           mov rdi, fmt_string_char_9
  1204 000008D1 [7A08000000000000] 
  1205 000008D9 EBBE                            jmp .Lstring_char_emit
  1206                                  
  1207                                  .Lstring_char_10:
  1208 000008DB 48BF-                           mov rdi, fmt_string_char_10
  1208 000008DD [7D08000000000000] 
  1209 000008E5 EBB2                            jmp .Lstring_char_emit
  1210                                  
  1211                                  .Lstring_char_11:
  1212 000008E7 48BF-                           mov rdi, fmt_string_char_11
  1212 000008E9 [8008000000000000] 
  1213 000008F1 EBA6                            jmp .Lstring_char_emit
  1214                                  
  1215                                  .Lstring_char_12:
  1216 000008F3 48BF-                           mov rdi, fmt_string_char_12
  1216 000008F5 [8308000000000000] 
  1217 000008FD EB9A                            jmp .Lstring_char_emit
  1218                                  
  1219                                  .Lstring_char_13:
  1220 000008FF 48BF-                           mov rdi, fmt_string_char_13
  1220 00000901 [8608000000000000] 
  1221 00000909 EB8E                            jmp .Lstring_char_emit
  1222                                  
  1223                                  .Lstring_char_34:
  1224 0000090B 48BF-                           mov rdi, fmt_string_char_34
  1224 0000090D [8908000000000000] 
  1225 00000915 EB82                            jmp .Lstring_char_emit
  1226                                  
  1227                                  .Lstring_char_92:
  1228 00000917 48BF-                           mov rdi, fmt_string_char_92
  1228 00000919 [8C08000000000000] 
  1229 00000921 E973FFFFFF                      jmp .Lstring_char_emit
  1230                                  
  1231                                  .Lstring_char_hex:
  1232 00000926 48BF-                           mov rdi, fmt_string_char_hex
  1232 00000928 [8F08000000000000] 
  1233 00000930 4889C6                          mov rsi, rax
  1234 00000933 E961FFFFFF                      jmp .Lstring_char_emit        
  1235                                  
  1236                                  .Lstring_end:
  1237 00000938 4883C410                	add rsp, 8 * 2
  1238 0000093C 48BF-                   	mov rdi, fmt_dquote
  1238 0000093E [6F08000000000000] 
  1239 00000946 EB33                    	jmp .Lemit
  1240                                  
  1241                                  .Lunknown_sexpr_type:
  1242 00000948 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1242 0000094A [2A08000000000000] 
  1243 00000952 4825FF000000            	and rax, 255
  1244 00000958 4889C2                  	mov rdx, rax
  1245 0000095B 4889F9                  	mov rcx, rdi
  1246 0000095E 488B3C25[00000000]      	mov rdi, qword [stderr]
  1247 00000966 B800000000              	mov rax, 0
  1248                                          ENTER
    44 0000096B C8000000            <1>  enter 0, 0
    45 0000096F 4883E4F0            <1>  and rsp, ~15
  1249 00000973 E8(00000000)            	call fprintf
  1250                                          LEAVE
    49 00000978 C9                  <1>  leave
  1251 00000979 C9                              leave
  1252 0000097A C3                              ret
  1253                                  
  1254                                  .Lemit:
  1255 0000097B B800000000              	mov rax, 0
  1256                                          ENTER
    44 00000980 C8000000            <1>  enter 0, 0
    45 00000984 4883E4F0            <1>  and rsp, ~15
  1257 00000988 E8(00000000)            	call printf
  1258                                          LEAVE
    49 0000098D C9                  <1>  leave
  1259 0000098E EB00                    	jmp .Lend
  1260                                  
  1261                                  .Lend:
  1262                                  	LEAVE
    49 00000990 C9                  <1>  leave
  1263 00000991 C3                      	ret
  1264                                  
  1265                                  ;;; rdi: address of free variable
  1266                                  ;;; rsi: address of code-pointer
  1267                                  bind_primitive:
  1268 00000992 C8000000                        enter 0, 0
  1269 00000996 57                              push rdi
  1270 00000997 BF11000000                      mov rdi, (1 + 8 + 8)
  1271 0000099C E8DBF7FFFF                      call malloc
  1272 000009A1 5F                              pop rdi
  1273 000009A2 C60004                          mov byte [rax], T_closure
  1274 000009A5 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1275 000009AD 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1276 000009B1 488907                          mov qword [rdi], rax
  1277 000009B4 48B8-                           mov rax, sob_void
  1277 000009B6 [0000000000000000] 
  1278 000009BE C9                              leave
  1279 000009BF C3                              ret
  1280                                  
  1281                                  L_code_ptr_ash:
  1282 000009C0 C8000000                        enter 0, 0
  1283 000009C4 48837D1802                      cmp COUNT, 2
  1284 000009C9 0F8510140000                    jne L_error_arg_count_2
  1285 000009CF 488B7D20                        mov rdi, PARAM(0)
  1286                                          assert_integer(rdi)
    53 000009D3 803F11              <1>  cmp byte [%1], %2
    54 000009D6 0F85A2140000        <1>  jne L_error_incorrect_type
  1287 000009DC 488B4D28                        mov rcx, PARAM(1)
  1288                                          assert_integer(rcx)
    53 000009E0 803911              <1>  cmp byte [%1], %2
    54 000009E3 0F8595140000        <1>  jne L_error_incorrect_type
  1289 000009E9 488B7F01                        mov rdi, qword [rdi + 1]
  1290 000009ED 488B4901                        mov rcx, qword [rcx + 1]
  1291 000009F1 4883F900                        cmp rcx, 0
  1292 000009F5 7C0F                            jl .L_negative
  1293                                  .L_loop_positive:
  1294 000009F7 4883F900                        cmp rcx, 0
  1295 000009FB 741B                            je .L_exit
  1296 000009FD 48D3E7                          sal rdi, cl
  1297 00000A00 48C1E908                        shr rcx, 8
  1298 00000A04 EBF1                            jmp .L_loop_positive
  1299                                  .L_negative:
  1300 00000A06 48F7D9                          neg rcx
  1301                                  .L_loop_negative:
  1302 00000A09 4883F900                        cmp rcx, 0
  1303 00000A0D 7409                            je .L_exit
  1304 00000A0F 48D3FF                          sar rdi, cl
  1305 00000A12 48C1E908                        shr rcx, 8
  1306 00000A16 EBF1                            jmp .L_loop_negative
  1307                                  .L_exit:
  1308 00000A18 E8DC120000                      call make_integer
  1309 00000A1D C9                              leave
  1310 00000A1E C22000                          ret AND_KILL_FRAME(2)
  1311                                  
  1312                                  L_code_ptr_logand:
  1313 00000A21 C8000000                        enter 0, 0
  1314 00000A25 48837D1802                      cmp COUNT, 2
  1315 00000A2A 0F85AF130000                    jne L_error_arg_count_2
  1316 00000A30 4C8B4520                        mov r8, PARAM(0)
  1317                                          assert_integer(r8)
    53 00000A34 41803811            <1>  cmp byte [%1], %2
    54 00000A38 0F8540140000        <1>  jne L_error_incorrect_type
  1318 00000A3E 4C8B4D28                        mov r9, PARAM(1)
  1319                                          assert_integer(r9)
    53 00000A42 41803911            <1>  cmp byte [%1], %2
    54 00000A46 0F8532140000        <1>  jne L_error_incorrect_type
  1320 00000A4C 498B7801                        mov rdi, qword [r8 + 1]
  1321 00000A50 49237901                        and rdi, qword [r9 + 1]
  1322 00000A54 E8A0120000                      call make_integer
  1323 00000A59 C9                              leave
  1324 00000A5A C22000                          ret AND_KILL_FRAME(2)
  1325                                  
  1326                                  L_code_ptr_logor:
  1327 00000A5D C8000000                        enter 0, 0
  1328 00000A61 48837D1802                      cmp COUNT, 2
  1329 00000A66 0F8573130000                    jne L_error_arg_count_2
  1330 00000A6C 4C8B4520                        mov r8, PARAM(0)
  1331                                          assert_integer(r8)
    53 00000A70 41803811            <1>  cmp byte [%1], %2
    54 00000A74 0F8504140000        <1>  jne L_error_incorrect_type
  1332 00000A7A 4C8B4D28                        mov r9, PARAM(1)
  1333                                          assert_integer(r9)
    53 00000A7E 41803911            <1>  cmp byte [%1], %2
    54 00000A82 0F85F6130000        <1>  jne L_error_incorrect_type
  1334 00000A88 498B7801                        mov rdi, qword [r8 + 1]
  1335 00000A8C 490B7901                        or rdi, qword [r9 + 1]
  1336 00000A90 E864120000                      call make_integer
  1337 00000A95 C9                              leave
  1338 00000A96 C22000                          ret AND_KILL_FRAME(2)
  1339                                  
  1340                                  L_code_ptr_logxor:
  1341 00000A99 C8000000                        enter 0, 0
  1342 00000A9D 48837D1802                      cmp COUNT, 2
  1343 00000AA2 0F8537130000                    jne L_error_arg_count_2
  1344 00000AA8 4C8B4520                        mov r8, PARAM(0)
  1345                                          assert_integer(r8)
    53 00000AAC 41803811            <1>  cmp byte [%1], %2
    54 00000AB0 0F85C8130000        <1>  jne L_error_incorrect_type
  1346 00000AB6 4C8B4D28                        mov r9, PARAM(1)
  1347                                          assert_integer(r9)
    53 00000ABA 41803911            <1>  cmp byte [%1], %2
    54 00000ABE 0F85BA130000        <1>  jne L_error_incorrect_type
  1348 00000AC4 498B7801                        mov rdi, qword [r8 + 1]
  1349 00000AC8 49337901                        xor rdi, qword [r9 + 1]
  1350 00000ACC E828120000                      call make_integer
  1351                                          LEAVE
    49 00000AD1 C9                  <1>  leave
  1352 00000AD2 C22000                          ret AND_KILL_FRAME(2)
  1353                                  
  1354                                  L_code_ptr_lognot:
  1355 00000AD5 C8000000                        enter 0, 0
  1356 00000AD9 48837D1801                      cmp COUNT, 1
  1357 00000ADE 0F85C6120000                    jne L_error_arg_count_1
  1358 00000AE4 4C8B4520                        mov r8, PARAM(0)
  1359                                          assert_integer(r8)
    53 00000AE8 41803811            <1>  cmp byte [%1], %2
    54 00000AEC 0F858C130000        <1>  jne L_error_incorrect_type
  1360 00000AF2 498B7801                        mov rdi, qword [r8 + 1]
  1361 00000AF6 48F7D7                          not rdi
  1362 00000AF9 E8FB110000                      call make_integer
  1363 00000AFE C9                              leave
  1364 00000AFF C21800                          ret AND_KILL_FRAME(1)
  1365                                  
  1366                                  L_code_ptr_bin_apply:
  1367                                  ;;; fill in for final project!
  1368                                  
  1369                                  L_code_ptr_is_null:
  1370 00000B02 C8000000                        enter 0, 0
  1371 00000B06 48837D1801                      cmp COUNT, 1
  1372 00000B0B 0F8599120000                    jne L_error_arg_count_1
  1373 00000B11 488B4520                        mov rax, PARAM(0)
  1374 00000B15 803801                          cmp byte [rax], T_nil
  1375 00000B18 750C                            jne .L_false
  1376 00000B1A 48B8-                           mov rax, sob_boolean_true
  1376 00000B1C [0300000000000000] 
  1377 00000B24 EB0A                            jmp .L_end
  1378                                  .L_false:
  1379 00000B26 48B8-                           mov rax, sob_boolean_false
  1379 00000B28 [0200000000000000] 
  1380                                  .L_end:
  1381 00000B30 C9                              leave
  1382 00000B31 C21800                          ret AND_KILL_FRAME(1)
  1383                                  
  1384                                  L_code_ptr_is_pair:
  1385 00000B34 C8000000                        enter 0, 0
  1386 00000B38 48837D1801                      cmp COUNT, 1
  1387 00000B3D 0F8567120000                    jne L_error_arg_count_1
  1388 00000B43 488B4520                        mov rax, PARAM(0)
  1389 00000B47 803821                          cmp byte [rax], T_pair
  1390 00000B4A 750C                            jne .L_false
  1391 00000B4C 48B8-                           mov rax, sob_boolean_true
  1391 00000B4E [0300000000000000] 
  1392 00000B56 EB0A                            jmp .L_end
  1393                                  .L_false:
  1394 00000B58 48B8-                           mov rax, sob_boolean_false
  1394 00000B5A [0200000000000000] 
  1395                                  .L_end:
  1396 00000B62 C9                              leave
  1397 00000B63 C21800                          ret AND_KILL_FRAME(1)
  1398                                          
  1399                                  L_code_ptr_is_void:
  1400 00000B66 C8000000                        enter 0, 0
  1401 00000B6A 48837D1801                      cmp COUNT, 1
  1402 00000B6F 0F8535120000                    jne L_error_arg_count_1
  1403 00000B75 488B4520                        mov rax, PARAM(0)
  1404 00000B79 803800                          cmp byte [rax], T_void
  1405 00000B7C 750C                            jne .L_false
  1406 00000B7E 48B8-                           mov rax, sob_boolean_true
  1406 00000B80 [0300000000000000] 
  1407 00000B88 EB0A                            jmp .L_end
  1408                                  .L_false:
  1409 00000B8A 48B8-                           mov rax, sob_boolean_false
  1409 00000B8C [0200000000000000] 
  1410                                  .L_end:
  1411 00000B94 C9                              leave
  1412 00000B95 C21800                          ret AND_KILL_FRAME(1)
  1413                                  
  1414                                  L_code_ptr_is_char:
  1415 00000B98 C8000000                        enter 0, 0
  1416 00000B9C 48837D1801                      cmp COUNT, 1
  1417 00000BA1 0F8503120000                    jne L_error_arg_count_1
  1418 00000BA7 488B4520                        mov rax, PARAM(0)
  1419 00000BAB 803802                          cmp byte [rax], T_char
  1420 00000BAE 750C                            jne .L_false
  1421 00000BB0 48B8-                           mov rax, sob_boolean_true
  1421 00000BB2 [0300000000000000] 
  1422 00000BBA EB0A                            jmp .L_end
  1423                                  .L_false:
  1424 00000BBC 48B8-                           mov rax, sob_boolean_false
  1424 00000BBE [0200000000000000] 
  1425                                  .L_end:
  1426 00000BC6 C9                              leave
  1427 00000BC7 C21800                          ret AND_KILL_FRAME(1)
  1428                                  
  1429                                  L_code_ptr_is_string:
  1430 00000BCA C8000000                        enter 0, 0
  1431 00000BCE 48837D1801                      cmp COUNT, 1
  1432 00000BD3 0F85D1110000                    jne L_error_arg_count_1
  1433 00000BD9 488B4520                        mov rax, PARAM(0)
  1434 00000BDD 803803                          cmp byte [rax], T_string
  1435 00000BE0 750C                            jne .L_false
  1436 00000BE2 48B8-                           mov rax, sob_boolean_true
  1436 00000BE4 [0300000000000000] 
  1437 00000BEC EB0A                            jmp .L_end
  1438                                  .L_false:
  1439 00000BEE 48B8-                           mov rax, sob_boolean_false
  1439 00000BF0 [0200000000000000] 
  1440                                  .L_end:
  1441 00000BF8 C9                              leave
  1442 00000BF9 C21800                          ret AND_KILL_FRAME(1)
  1443                                  
  1444                                  L_code_ptr_is_symbol:
  1445 00000BFC C8000000                        enter 0, 0
  1446 00000C00 48837D1801                      cmp COUNT, 1
  1447 00000C05 0F859F110000                    jne L_error_arg_count_1
  1448 00000C0B 4C8B4520                        mov r8, PARAM(0)
  1449 00000C0F 41802040                        and byte [r8], T_symbol
  1450 00000C13 740C                            jz .L_false
  1451 00000C15 48B8-                           mov rax, sob_boolean_true
  1451 00000C17 [0300000000000000] 
  1452 00000C1F EB0A                            jmp .L_exit
  1453                                  .L_false:
  1454 00000C21 48B8-                           mov rax, sob_boolean_false
  1454 00000C23 [0200000000000000] 
  1455                                  .L_exit:
  1456 00000C2B C9                              leave
  1457 00000C2C C21800                          ret AND_KILL_FRAME(1)
  1458                                  
  1459                                  L_code_ptr_is_uninterned_symbol:
  1460 00000C2F C8000000                        enter 0, 0
  1461 00000C33 48837D1801                      cmp COUNT, 1
  1462 00000C38 0F856C110000                    jne L_error_arg_count_1
  1463 00000C3E 4C8B4520                        mov r8, PARAM(0)
  1464 00000C42 41803842                        cmp byte [r8], T_uninterned_symbol
  1465 00000C46 750C                            jne .L_false
  1466 00000C48 48B8-                           mov rax, sob_boolean_true
  1466 00000C4A [0300000000000000] 
  1467 00000C52 EB0A                            jmp .L_exit
  1468                                  .L_false:
  1469 00000C54 48B8-                           mov rax, sob_boolean_false
  1469 00000C56 [0200000000000000] 
  1470                                  .L_exit:
  1471 00000C5E C9                              leave
  1472 00000C5F C21800                          ret AND_KILL_FRAME(1)
  1473                                  
  1474                                  L_code_ptr_is_interned_symbol:
  1475 00000C62 C8000000                        enter 0, 0
  1476 00000C66 48837D1801                      cmp COUNT, 1
  1477 00000C6B 0F8539110000                    jne L_error_arg_count_1
  1478 00000C71 488B4520                        mov rax, PARAM(0)
  1479 00000C75 803841                          cmp byte [rax], T_interned_symbol
  1480 00000C78 750C                            jne .L_false
  1481 00000C7A 48B8-                           mov rax, sob_boolean_true
  1481 00000C7C [0300000000000000] 
  1482 00000C84 EB0A                            jmp .L_end
  1483                                  .L_false:
  1484 00000C86 48B8-                           mov rax, sob_boolean_false
  1484 00000C88 [0200000000000000] 
  1485                                  .L_end:
  1486 00000C90 C9                              leave
  1487 00000C91 C21800                          ret AND_KILL_FRAME(1)
  1488                                  
  1489                                  L_code_ptr_gensym:
  1490 00000C94 C8000000                        enter 0, 0
  1491 00000C98 48837D1800                      cmp COUNT, 0
  1492 00000C9D 0F85D2100000                    jne L_error_arg_count_0
  1493 00000CA3 48FF0425[95080000]              inc qword [gensym_count]
  1494 00000CAB BF09000000                      mov rdi, (1 + 8)
  1495 00000CB0 E8C7F4FFFF                      call malloc
  1496 00000CB5 C60042                          mov byte [rax], T_uninterned_symbol
  1497 00000CB8 488B0C25[95080000]              mov rcx, qword [gensym_count]
  1498 00000CC0 48894801                        mov qword [rax + 1], rcx
  1499 00000CC4 C9                              leave
  1500 00000CC5 C21000                          ret AND_KILL_FRAME(0)
  1501                                  
  1502                                  L_code_ptr_is_vector:
  1503 00000CC8 C8000000                        enter 0, 0
  1504 00000CCC 48837D1801                      cmp COUNT, 1
  1505 00000CD1 0F85D3100000                    jne L_error_arg_count_1
  1506 00000CD7 488B4520                        mov rax, PARAM(0)
  1507 00000CDB 803822                          cmp byte [rax], T_vector
  1508 00000CDE 750C                            jne .L_false
  1509 00000CE0 48B8-                           mov rax, sob_boolean_true
  1509 00000CE2 [0300000000000000] 
  1510 00000CEA EB0A                            jmp .L_end
  1511                                  .L_false:
  1512 00000CEC 48B8-                           mov rax, sob_boolean_false
  1512 00000CEE [0200000000000000] 
  1513                                  .L_end:
  1514 00000CF6 C9                              leave
  1515 00000CF7 C21800                          ret AND_KILL_FRAME(1)
  1516                                  
  1517                                  L_code_ptr_is_closure:
  1518 00000CFA C8000000                        enter 0, 0
  1519 00000CFE 48837D1801                      cmp COUNT, 1
  1520 00000D03 0F85A1100000                    jne L_error_arg_count_1
  1521 00000D09 488B4520                        mov rax, PARAM(0)
  1522 00000D0D 803804                          cmp byte [rax], T_closure
  1523 00000D10 750C                            jne .L_false
  1524 00000D12 48B8-                           mov rax, sob_boolean_true
  1524 00000D14 [0300000000000000] 
  1525 00000D1C EB0A                            jmp .L_end
  1526                                  .L_false:
  1527 00000D1E 48B8-                           mov rax, sob_boolean_false
  1527 00000D20 [0200000000000000] 
  1528                                  .L_end:
  1529 00000D28 C9                              leave
  1530 00000D29 C21800                          ret AND_KILL_FRAME(1)
  1531                                  
  1532                                  L_code_ptr_is_real:
  1533 00000D2C C8000000                        enter 0, 0
  1534 00000D30 48837D1801                      cmp COUNT, 1
  1535 00000D35 0F856F100000                    jne L_error_arg_count_1
  1536 00000D3B 488B4520                        mov rax, PARAM(0)
  1537 00000D3F 803813                          cmp byte [rax], T_real
  1538 00000D42 750C                            jne .L_false
  1539 00000D44 48B8-                           mov rax, sob_boolean_true
  1539 00000D46 [0300000000000000] 
  1540 00000D4E EB0A                            jmp .L_end
  1541                                  .L_false:
  1542 00000D50 48B8-                           mov rax, sob_boolean_false
  1542 00000D52 [0200000000000000] 
  1543                                  .L_end:
  1544 00000D5A C9                              leave
  1545 00000D5B C21800                          ret AND_KILL_FRAME(1)
  1546                                  
  1547                                  L_code_ptr_is_fraction:
  1548 00000D5E C8000000                        enter 0, 0
  1549 00000D62 48837D1801                      cmp COUNT, 1
  1550 00000D67 0F853D100000                    jne L_error_arg_count_1
  1551 00000D6D 488B4520                        mov rax, PARAM(0)
  1552 00000D71 803812                          cmp byte [rax], T_fraction
  1553 00000D74 750C                            jne .L_false
  1554 00000D76 48B8-                           mov rax, sob_boolean_true
  1554 00000D78 [0300000000000000] 
  1555 00000D80 EB0A                            jmp .L_end
  1556                                  .L_false:
  1557 00000D82 48B8-                           mov rax, sob_boolean_false
  1557 00000D84 [0200000000000000] 
  1558                                  .L_end:
  1559 00000D8C C9                              leave
  1560 00000D8D C21800                          ret AND_KILL_FRAME(1)
  1561                                  
  1562                                  L_code_ptr_is_boolean:
  1563 00000D90 C8000000                        enter 0, 0
  1564 00000D94 48837D1801                      cmp COUNT, 1
  1565 00000D99 0F850B100000                    jne L_error_arg_count_1
  1566 00000D9F 488B4520                        mov rax, PARAM(0)
  1567 00000DA3 8A18                            mov bl, byte [rax]
  1568 00000DA5 80E308                          and bl, T_boolean
  1569 00000DA8 740C                            je .L_false
  1570 00000DAA 48B8-                           mov rax, sob_boolean_true
  1570 00000DAC [0300000000000000] 
  1571 00000DB4 EB0A                            jmp .L_end
  1572                                  .L_false:
  1573 00000DB6 48B8-                           mov rax, sob_boolean_false
  1573 00000DB8 [0200000000000000] 
  1574                                  .L_end:
  1575 00000DC0 C9                              leave
  1576 00000DC1 C21800                          ret AND_KILL_FRAME(1)
  1577                                          
  1578                                  L_code_ptr_is_boolean_false:
  1579 00000DC4 C8000000                        enter 0, 0
  1580 00000DC8 48837D1801                      cmp COUNT, 1
  1581 00000DCD 0F85D70F0000                    jne L_error_arg_count_1
  1582 00000DD3 488B4520                        mov rax, PARAM(0)
  1583 00000DD7 8A18                            mov bl, byte [rax]
  1584 00000DD9 80FB09                          cmp bl, T_boolean_false
  1585 00000DDC 750C                            jne .L_false
  1586 00000DDE 48B8-                           mov rax, sob_boolean_true
  1586 00000DE0 [0300000000000000] 
  1587 00000DE8 EB0A                            jmp .L_end
  1588                                  .L_false:
  1589 00000DEA 48B8-                           mov rax, sob_boolean_false
  1589 00000DEC [0200000000000000] 
  1590                                  .L_end:
  1591 00000DF4 C9                              leave
  1592 00000DF5 C21800                          ret AND_KILL_FRAME(1)
  1593                                  
  1594                                  L_code_ptr_is_boolean_true:
  1595 00000DF8 C8000000                        enter 0, 0
  1596 00000DFC 48837D1801                      cmp COUNT, 1
  1597 00000E01 0F85A30F0000                    jne L_error_arg_count_1
  1598 00000E07 488B4520                        mov rax, PARAM(0)
  1599 00000E0B 8A18                            mov bl, byte [rax]
  1600 00000E0D 80FB0A                          cmp bl, T_boolean_true
  1601 00000E10 750C                            jne .L_false
  1602 00000E12 48B8-                           mov rax, sob_boolean_true
  1602 00000E14 [0300000000000000] 
  1603 00000E1C EB0A                            jmp .L_end
  1604                                  .L_false:
  1605 00000E1E 48B8-                           mov rax, sob_boolean_false
  1605 00000E20 [0200000000000000] 
  1606                                  .L_end:
  1607 00000E28 C9                              leave
  1608 00000E29 C21800                          ret AND_KILL_FRAME(1)
  1609                                  
  1610                                  L_code_ptr_is_number:
  1611 00000E2C C8000000                        enter 0, 0
  1612 00000E30 48837D1801                      cmp COUNT, 1
  1613 00000E35 0F856F0F0000                    jne L_error_arg_count_1
  1614 00000E3B 488B4520                        mov rax, PARAM(0)
  1615 00000E3F 8A18                            mov bl, byte [rax]
  1616 00000E41 80E310                          and bl, T_number
  1617 00000E44 740C                            jz .L_false
  1618 00000E46 48B8-                           mov rax, sob_boolean_true
  1618 00000E48 [0300000000000000] 
  1619 00000E50 EB0A                            jmp .L_end
  1620                                  .L_false:
  1621 00000E52 48B8-                           mov rax, sob_boolean_false
  1621 00000E54 [0200000000000000] 
  1622                                  .L_end:
  1623 00000E5C C9                              leave
  1624 00000E5D C21800                          ret AND_KILL_FRAME(1)
  1625                                          
  1626                                  L_code_ptr_is_collection:
  1627 00000E60 C8000000                        enter 0, 0
  1628 00000E64 48837D1801                      cmp COUNT, 1
  1629 00000E69 0F853B0F0000                    jne L_error_arg_count_1
  1630 00000E6F 488B4520                        mov rax, PARAM(0)
  1631 00000E73 8A18                            mov bl, byte [rax]
  1632 00000E75 80E320                          and bl, T_collection
  1633 00000E78 740C                            je .L_false
  1634 00000E7A 48B8-                           mov rax, sob_boolean_true
  1634 00000E7C [0300000000000000] 
  1635 00000E84 EB0A                            jmp .L_end
  1636                                  .L_false:
  1637 00000E86 48B8-                           mov rax, sob_boolean_false
  1637 00000E88 [0200000000000000] 
  1638                                  .L_end:
  1639 00000E90 C9                              leave
  1640 00000E91 C21800                          ret AND_KILL_FRAME(1)
  1641                                  
  1642                                  L_code_ptr_cons:
  1643 00000E94 C8000000                        enter 0, 0
  1644 00000E98 48837D1802                      cmp COUNT, 2
  1645 00000E9D 0F853C0F0000                    jne L_error_arg_count_2
  1646 00000EA3 BF11000000                      mov rdi, (1 + 8 + 8)
  1647 00000EA8 E8CFF2FFFF                      call malloc
  1648 00000EAD C60021                          mov byte [rax], T_pair
  1649 00000EB0 488B5D20                        mov rbx, PARAM(0)
  1650 00000EB4 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1651 00000EB8 488B5D28                        mov rbx, PARAM(1)
  1652 00000EBC 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1653 00000EC0 C9                              leave
  1654 00000EC1 C22000                          ret AND_KILL_FRAME(2)
  1655                                  
  1656                                  L_code_ptr_display_sexpr:
  1657 00000EC4 C8000000                        enter 0, 0
  1658 00000EC8 48837D1801                      cmp COUNT, 1
  1659 00000ECD 0F85D70E0000                    jne L_error_arg_count_1
  1660 00000ED3 488B7D20                        mov rdi, PARAM(0)
  1661 00000ED7 E821F5FFFF                      call print_sexpr
  1662 00000EDC 48B8-                           mov rax, sob_void
  1662 00000EDE [0000000000000000] 
  1663 00000EE6 C9                              leave
  1664 00000EE7 C21800                          ret AND_KILL_FRAME(1)
  1665                                  
  1666                                  L_code_ptr_write_char:
  1667 00000EEA C8000000                        enter 0, 0
  1668 00000EEE 48837D1801                      cmp COUNT, 1
  1669 00000EF3 0F85B10E0000                    jne L_error_arg_count_1
  1670 00000EF9 488B4520                        mov rax, PARAM(0)
  1671                                          assert_char(rax)
    53 00000EFD 803802              <1>  cmp byte [%1], %2
    54 00000F00 0F85780F0000        <1>  jne L_error_incorrect_type
  1672 00000F06 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1673 00000F09 4825FF000000                    and rax, 255
  1674 00000F0F 48BF-                           mov rdi, fmt_char
  1674 00000F11 [9D08000000000000] 
  1675 00000F19 4889C6                          mov rsi, rax
  1676 00000F1C B800000000                      mov rax, 0
  1677                                          ENTER
    44 00000F21 C8000000            <1>  enter 0, 0
    45 00000F25 4883E4F0            <1>  and rsp, ~15
  1678 00000F29 E8(00000000)                    call printf
  1679                                          LEAVE
    49 00000F2E C9                  <1>  leave
  1680 00000F2F 48B8-                           mov rax, sob_void
  1680 00000F31 [0000000000000000] 
  1681 00000F39 C9                              leave
  1682 00000F3A C21800                          ret AND_KILL_FRAME(1)
  1683                                  
  1684                                  L_code_ptr_car:
  1685 00000F3D C8000000                        enter 0, 0
  1686 00000F41 48837D1801                      cmp COUNT, 1
  1687 00000F46 0F855E0E0000                    jne L_error_arg_count_1
  1688 00000F4C 488B4520                        mov rax, PARAM(0)
  1689                                          assert_pair(rax)
    53 00000F50 803821              <1>  cmp byte [%1], %2
    54 00000F53 0F85250F0000        <1>  jne L_error_incorrect_type
  1690 00000F59 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1691 00000F5D C9                              leave
  1692 00000F5E C21800                          ret AND_KILL_FRAME(1)
  1693                                          
  1694                                  L_code_ptr_cdr:
  1695 00000F61 C8000000                        enter 0, 0
  1696 00000F65 48837D1801                      cmp COUNT, 1
  1697 00000F6A 0F853A0E0000                    jne L_error_arg_count_1
  1698 00000F70 488B4520                        mov rax, PARAM(0)
  1699                                          assert_pair(rax)
    53 00000F74 803821              <1>  cmp byte [%1], %2
    54 00000F77 0F85010F0000        <1>  jne L_error_incorrect_type
  1700 00000F7D 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1701 00000F81 C9                              leave
  1702 00000F82 C21800                          ret AND_KILL_FRAME(1)
  1703                                          
  1704                                  L_code_ptr_string_length:
  1705 00000F85 C8000000                        enter 0, 0
  1706 00000F89 48837D1801                      cmp COUNT, 1
  1707 00000F8E 0F85160E0000                    jne L_error_arg_count_1
  1708 00000F94 488B4520                        mov rax, PARAM(0)
  1709                                          assert_string(rax)
    53 00000F98 803803              <1>  cmp byte [%1], %2
    54 00000F9B 0F85DD0E0000        <1>  jne L_error_incorrect_type
  1710 00000FA1 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1711 00000FA5 E84F0D0000                      call make_integer
  1712 00000FAA C9                              leave
  1713 00000FAB C21800                          ret AND_KILL_FRAME(1)
  1714                                  
  1715                                  L_code_ptr_vector_length:
  1716 00000FAE C8000000                        enter 0, 0
  1717 00000FB2 48837D1801                      cmp COUNT, 1
  1718 00000FB7 0F85ED0D0000                    jne L_error_arg_count_1
  1719 00000FBD 488B4520                        mov rax, PARAM(0)
  1720                                          assert_vector(rax)
    53 00000FC1 803822              <1>  cmp byte [%1], %2
    54 00000FC4 0F85B40E0000        <1>  jne L_error_incorrect_type
  1721 00000FCA 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1722 00000FCE E8260D0000                      call make_integer
  1723 00000FD3 C9                              leave
  1724 00000FD4 C21800                          ret AND_KILL_FRAME(1)
  1725                                  
  1726                                  L_code_ptr_real_to_integer:
  1727 00000FD7 C8000000                        enter 0, 0
  1728 00000FDB 48837D1801                      cmp COUNT, 1
  1729 00000FE0 0F85C40D0000                    jne L_error_arg_count_1
  1730 00000FE6 488B5D20                        mov rbx, PARAM(0)
  1731                                          assert_real(rbx)
    53 00000FEA 803B13              <1>  cmp byte [%1], %2
    54 00000FED 0F858B0E0000        <1>  jne L_error_incorrect_type
  1732 00000FF3 F20F104301                      movsd xmm0, qword [rbx + 1]
  1733 00000FF8 F2480F2CF8                      cvttsd2si rdi, xmm0
  1734 00000FFD E8F70C0000                      call make_integer
  1735 00001002 C9                              leave
  1736 00001003 C21800                          ret AND_KILL_FRAME(1)
  1737                                  
  1738                                  L_code_ptr_exit:
  1739 00001006 C8000000                        enter 0, 0
  1740 0000100A 48837D1800                      cmp COUNT, 0
  1741 0000100F 0F85600D0000                    jne L_error_arg_count_0
  1742 00001015 B800000000                      mov rax, 0
  1743 0000101A E8(00000000)                    call exit
  1744                                  
  1745                                  L_code_ptr_integer_to_real:
  1746 0000101F C8000000                        enter 0, 0
  1747 00001023 48837D1801                      cmp COUNT, 1
  1748 00001028 0F857C0D0000                    jne L_error_arg_count_1
  1749 0000102E 488B4520                        mov rax, PARAM(0)
  1750                                          assert_integer(rax)
    53 00001032 803811              <1>  cmp byte [%1], %2
    54 00001035 0F85430E0000        <1>  jne L_error_incorrect_type
  1751 0000103B FF7001                          push qword [rax + 1]
  1752 0000103E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1753 00001044 E8980C0000                      call make_real
  1754 00001049 C9                              leave
  1755 0000104A C21800                          ret AND_KILL_FRAME(1)
  1756                                  
  1757                                  L_code_ptr_fraction_to_real:
  1758 0000104D C8000000                        enter 0, 0
  1759 00001051 48837D1801                      cmp COUNT, 1
  1760 00001056 0F854E0D0000                    jne L_error_arg_count_1
  1761 0000105C 488B4520                        mov rax, PARAM(0)
  1762                                          assert_fraction(rax)
    53 00001060 803812              <1>  cmp byte [%1], %2
    54 00001063 0F85150E0000        <1>  jne L_error_incorrect_type
  1763 00001069 FF7001                          push qword [rax + 1]
  1764 0000106C F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1765 00001072 FF7009                          push qword [rax + 1 + 8]
  1766 00001075 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1767 0000107B F20F5EC1                        divsd xmm0, xmm1
  1768 0000107F E85D0C0000                      call make_real
  1769 00001084 C9                              leave
  1770 00001085 C21800                          ret AND_KILL_FRAME(1)
  1771                                  
  1772                                  L_code_ptr_char_to_integer:
  1773 00001088 C8000000                        enter 0, 0
  1774 0000108C 48837D1801                      cmp COUNT, 1
  1775 00001091 0F85130D0000                    jne L_error_arg_count_1
  1776 00001097 488B4520                        mov rax, PARAM(0)
  1777                                          assert_char(rax)
    53 0000109B 803802              <1>  cmp byte [%1], %2
    54 0000109E 0F85DA0D0000        <1>  jne L_error_incorrect_type
  1778 000010A4 8A4001                          mov al, byte [rax + 1]
  1779 000010A7 4825FF000000                    and rax, 255
  1780 000010AD 4889C7                          mov rdi, rax
  1781 000010B0 E8440C0000                      call make_integer
  1782 000010B5 C9                              leave
  1783 000010B6 C21800                          ret AND_KILL_FRAME(1)
  1784                                  
  1785                                  L_code_ptr_integer_to_fraction:
  1786 000010B9 C8000000                        enter 0, 0
  1787 000010BD 48837D1801                      cmp COUNT, 1
  1788 000010C2 0F85E20C0000                    jne L_error_arg_count_1
  1789 000010C8 4C8B4520                        mov r8, PARAM(0)
  1790                                          assert_integer(r8)
    53 000010CC 41803811            <1>  cmp byte [%1], %2
    54 000010D0 0F85A80D0000        <1>  jne L_error_incorrect_type
  1791 000010D6 BF11000000                      mov rdi, (1 + 8 + 8)
  1792 000010DB E89CF0FFFF                      call malloc
  1793 000010E0 498B5801                        mov rbx, qword [r8 + 1]
  1794 000010E4 C60012                          mov byte [rax], T_fraction
  1795 000010E7 48895801                        mov qword [rax + 1], rbx
  1796 000010EB 48C7400901000000                mov qword [rax + 1 + 8], 1
  1797 000010F3 C9                              leave
  1798 000010F4 C21800                          ret AND_KILL_FRAME(1)
  1799                                  
  1800                                  L_code_ptr_integer_to_char:
  1801 000010F7 C8000000                        enter 0, 0
  1802 000010FB 48837D1801                      cmp COUNT, 1
  1803 00001100 0F85A40C0000                    jne L_error_arg_count_1
  1804 00001106 488B4520                        mov rax, PARAM(0)
  1805                                          assert_integer(rax)
    53 0000110A 803811              <1>  cmp byte [%1], %2
    54 0000110D 0F856B0D0000        <1>  jne L_error_incorrect_type
  1806 00001113 488B5801                        mov rbx, qword [rax + 1]
  1807 00001117 4883FB00                        cmp rbx, 0
  1808 0000111B 0F8EF20B0000                    jle L_error_integer_range
  1809 00001121 4881FB00010000                  cmp rbx, 256
  1810 00001128 0F8DE50B0000                    jge L_error_integer_range
  1811 0000112E BF02000000                      mov rdi, (1 + 1)
  1812 00001133 E844F0FFFF                      call malloc
  1813 00001138 C60002                          mov byte [rax], T_char
  1814 0000113B 885801                          mov byte [rax + 1], bl
  1815 0000113E C9                              leave
  1816 0000113F C21800                          ret AND_KILL_FRAME(1)
  1817                                  
  1818                                  L_code_ptr_trng:
  1819 00001142 C8000000                        enter 0, 0
  1820 00001146 48837D1800                      cmp COUNT, 0
  1821 0000114B 0F85240C0000                    jne L_error_arg_count_0
  1822 00001151 480FC7F7                        rdrand rdi
  1823 00001155 48D1EF                          shr rdi, 1
  1824 00001158 E89C0B0000                      call make_integer
  1825 0000115D C9                              leave
  1826 0000115E C21000                          ret AND_KILL_FRAME(0)
  1827                                  
  1828                                  L_code_ptr_is_zero:
  1829 00001161 C8000000                        enter 0, 0
  1830 00001165 48837D1801                      cmp COUNT, 1
  1831 0000116A 0F853A0C0000                    jne L_error_arg_count_1
  1832 00001170 488B4520                        mov rax, PARAM(0)
  1833 00001174 803811                          cmp byte [rax], T_integer
  1834 00001177 740F                            je .L_integer
  1835 00001179 803812                          cmp byte [rax], T_fraction
  1836 0000117C 7413                            je .L_fraction
  1837 0000117E 803813                          cmp byte [rax], T_real
  1838 00001181 7417                            je .L_real
  1839 00001183 E9F60C0000                      jmp L_error_incorrect_type
  1840                                  .L_integer:
  1841 00001188 4883780100                      cmp qword [rax + 1], 0
  1842 0000118D 7429                            je .L_zero
  1843 0000118F EB1B                            jmp .L_not_zero
  1844                                  .L_fraction:
  1845 00001191 4883780100                      cmp qword [rax + 1], 0
  1846 00001196 7420                            je .L_zero
  1847 00001198 EB12                            jmp .L_not_zero
  1848                                  .L_real:
  1849 0000119A 660FEFC0                        pxor xmm0, xmm0
  1850 0000119E FF7001                          push qword [rax + 1]
  1851 000011A1 F20F100C24                      movsd xmm1, qword [rsp]
  1852 000011A6 660F2EC1                        ucomisd xmm0, xmm1
  1853 000011AA 740C                            je .L_zero
  1854                                  .L_not_zero:
  1855 000011AC 48B8-                           mov rax, sob_boolean_false
  1855 000011AE [0200000000000000] 
  1856 000011B6 EB0A                            jmp .L_end
  1857                                  .L_zero:
  1858 000011B8 48B8-                           mov rax, sob_boolean_true
  1858 000011BA [0300000000000000] 
  1859                                  .L_end:
  1860 000011C2 C9                              leave
  1861 000011C3 C21800                          ret AND_KILL_FRAME(1)
  1862                                  
  1863                                  L_code_ptr_is_integer:
  1864 000011C6 C8000000                        enter 0, 0
  1865 000011CA 48837D1801                      cmp COUNT, 1
  1866 000011CF 0F85D50B0000                    jne L_error_arg_count_1
  1867 000011D5 488B4520                        mov rax, PARAM(0)
  1868 000011D9 803811                          cmp byte [rax], T_integer
  1869 000011DC 750C                            jne .L_false
  1870 000011DE 48B8-                           mov rax, sob_boolean_true
  1870 000011E0 [0300000000000000] 
  1871 000011E8 EB0A                            jmp .L_exit
  1872                                  .L_false:
  1873 000011EA 48B8-                           mov rax, sob_boolean_false
  1873 000011EC [0200000000000000] 
  1874                                  .L_exit:
  1875 000011F4 C9                              leave
  1876 000011F5 C21800                          ret AND_KILL_FRAME(1)
  1877                                  
  1878                                  L_code_ptr_raw_bin_add_rr:
  1879 000011F8 C8000000                        enter 0, 0
  1880 000011FC 48837D1802                      cmp COUNT, 2
  1881 00001201 0F85D80B0000                    jne L_error_arg_count_2
  1882 00001207 488B5D20                        mov rbx, PARAM(0)
  1883                                          assert_real(rbx)
    53 0000120B 803B13              <1>  cmp byte [%1], %2
    54 0000120E 0F856A0C0000        <1>  jne L_error_incorrect_type
  1884 00001214 488B4D28                        mov rcx, PARAM(1)
  1885                                          assert_real(rcx)
    53 00001218 803913              <1>  cmp byte [%1], %2
    54 0000121B 0F855D0C0000        <1>  jne L_error_incorrect_type
  1886 00001221 F20F104301                      movsd xmm0, qword [rbx + 1]
  1887 00001226 F20F104901                      movsd xmm1, qword [rcx + 1]
  1888 0000122B F20F58C1                        addsd xmm0, xmm1
  1889 0000122F E8AD0A0000                      call make_real
  1890 00001234 C9                              leave
  1891 00001235 C22000                          ret AND_KILL_FRAME(2)
  1892                                  
  1893                                  L_code_ptr_raw_bin_sub_rr:
  1894 00001238 C8000000                        enter 0, 0
  1895 0000123C 48837D1802                      cmp COUNT, 2
  1896 00001241 0F85980B0000                    jne L_error_arg_count_2
  1897 00001247 488B5D20                        mov rbx, PARAM(0)
  1898                                          assert_real(rbx)
    53 0000124B 803B13              <1>  cmp byte [%1], %2
    54 0000124E 0F852A0C0000        <1>  jne L_error_incorrect_type
  1899 00001254 488B4D28                        mov rcx, PARAM(1)
  1900                                          assert_real(rcx)
    53 00001258 803913              <1>  cmp byte [%1], %2
    54 0000125B 0F851D0C0000        <1>  jne L_error_incorrect_type
  1901 00001261 F20F104301                      movsd xmm0, qword [rbx + 1]
  1902 00001266 F20F104901                      movsd xmm1, qword [rcx + 1]
  1903 0000126B F20F5CC1                        subsd xmm0, xmm1
  1904 0000126F E86D0A0000                      call make_real
  1905 00001274 C9                              leave
  1906 00001275 C22000                          ret AND_KILL_FRAME(2)
  1907                                  
  1908                                  L_code_ptr_raw_bin_mul_rr:
  1909 00001278 C8000000                        enter 0, 0
  1910 0000127C 48837D1802                      cmp COUNT, 2
  1911 00001281 0F85580B0000                    jne L_error_arg_count_2
  1912 00001287 488B5D20                        mov rbx, PARAM(0)
  1913                                          assert_real(rbx)
    53 0000128B 803B13              <1>  cmp byte [%1], %2
    54 0000128E 0F85EA0B0000        <1>  jne L_error_incorrect_type
  1914 00001294 488B4D28                        mov rcx, PARAM(1)
  1915                                          assert_real(rcx)
    53 00001298 803913              <1>  cmp byte [%1], %2
    54 0000129B 0F85DD0B0000        <1>  jne L_error_incorrect_type
  1916 000012A1 F20F104301                      movsd xmm0, qword [rbx + 1]
  1917 000012A6 F20F104901                      movsd xmm1, qword [rcx + 1]
  1918 000012AB F20F59C1                        mulsd xmm0, xmm1
  1919 000012AF E82D0A0000                      call make_real
  1920 000012B4 C9                              leave
  1921 000012B5 C22000                          ret AND_KILL_FRAME(2)
  1922                                  
  1923                                  L_code_ptr_raw_bin_div_rr:
  1924 000012B8 C8000000                        enter 0, 0
  1925 000012BC 48837D1802                      cmp COUNT, 2
  1926 000012C1 0F85180B0000                    jne L_error_arg_count_2
  1927 000012C7 488B5D20                        mov rbx, PARAM(0)
  1928                                          assert_real(rbx)
    53 000012CB 803B13              <1>  cmp byte [%1], %2
    54 000012CE 0F85AA0B0000        <1>  jne L_error_incorrect_type
  1929 000012D4 488B4D28                        mov rcx, PARAM(1)
  1930                                          assert_real(rcx)
    53 000012D8 803913              <1>  cmp byte [%1], %2
    54 000012DB 0F859D0B0000        <1>  jne L_error_incorrect_type
  1931 000012E1 F20F104301                      movsd xmm0, qword [rbx + 1]
  1932 000012E6 F20F104901                      movsd xmm1, qword [rcx + 1]
  1933 000012EB 660FEFD2                        pxor xmm2, xmm2
  1934 000012EF 660F2ECA                        ucomisd xmm1, xmm2
  1935 000012F3 0F84B60B0000                    je L_error_division_by_zero
  1936 000012F9 F20F5EC1                        divsd xmm0, xmm1
  1937 000012FD E8DF090000                      call make_real
  1938 00001302 C9                              leave
  1939 00001303 C22000                          ret AND_KILL_FRAME(2)
  1940                                  
  1941                                  L_code_ptr_raw_bin_add_zz:
  1942 00001306 C8000000                	enter 0, 0
  1943 0000130A 48837D1802              	cmp COUNT, 2
  1944 0000130F 0F85CA0A0000            	jne L_error_arg_count_2
  1945 00001315 4C8B4520                	mov r8, PARAM(0)
  1946                                  	assert_integer(r8)
    53 00001319 41803811            <1>  cmp byte [%1], %2
    54 0000131D 0F855B0B0000        <1>  jne L_error_incorrect_type
  1947 00001323 4C8B4D28                	mov r9, PARAM(1)
  1948                                  	assert_integer(r9)
    53 00001327 41803911            <1>  cmp byte [%1], %2
    54 0000132B 0F854D0B0000        <1>  jne L_error_incorrect_type
  1949 00001331 498B7801                	mov rdi, qword [r8 + 1]
  1950 00001335 49037901                	add rdi, qword [r9 + 1]
  1951 00001339 E8BB090000              	call make_integer
  1952 0000133E C9                      	leave
  1953 0000133F C22000                  	ret AND_KILL_FRAME(2)
  1954                                  
  1955                                  L_code_ptr_raw_bin_add_qq:
  1956 00001342 C8000000                        enter 0, 0
  1957 00001346 48837D1802                      cmp COUNT, 2
  1958 0000134B 0F858E0A0000                    jne L_error_arg_count_2
  1959 00001351 4C8B4520                        mov r8, PARAM(0)
  1960                                          assert_fraction(r8)
    53 00001355 41803812            <1>  cmp byte [%1], %2
    54 00001359 0F851F0B0000        <1>  jne L_error_incorrect_type
  1961 0000135F 4C8B4D28                        mov r9, PARAM(1)
  1962                                          assert_fraction(r9)
    53 00001363 41803912            <1>  cmp byte [%1], %2
    54 00001367 0F85110B0000        <1>  jne L_error_incorrect_type
  1963 0000136D 498B4001                        mov rax, qword [r8 + 1] ; num1
  1964 00001371 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1965 00001375 4899                            cqo
  1966 00001377 48F7EB                          imul rbx
  1967 0000137A 4889C6                          mov rsi, rax
  1968 0000137D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1969 00001381 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1970 00001385 4899                            cqo
  1971 00001387 48F7EB                          imul rbx
  1972 0000138A 4801C6                          add rsi, rax
  1973 0000138D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1974 00001391 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1975 00001395 4899                            cqo
  1976 00001397 48F7EB                          imul rbx
  1977 0000139A 4889C7                          mov rdi, rax
  1978 0000139D E8DE010000                      call normalize_fraction
  1979 000013A2 C9                              leave
  1980 000013A3 C22000                          ret AND_KILL_FRAME(2)
  1981                                  
  1982                                  L_code_ptr_raw_bin_sub_zz:
  1983 000013A6 C8000000                	enter 0, 0
  1984 000013AA 48837D1802              	cmp COUNT, 2
  1985 000013AF 0F852A0A0000            	jne L_error_arg_count_2
  1986 000013B5 4C8B4520                	mov r8, PARAM(0)
  1987                                  	assert_integer(r8)
    53 000013B9 41803811            <1>  cmp byte [%1], %2
    54 000013BD 0F85BB0A0000        <1>  jne L_error_incorrect_type
  1988 000013C3 4C8B4D28                	mov r9, PARAM(1)
  1989                                  	assert_integer(r9)
    53 000013C7 41803911            <1>  cmp byte [%1], %2
    54 000013CB 0F85AD0A0000        <1>  jne L_error_incorrect_type
  1990 000013D1 498B7801                	mov rdi, qword [r8 + 1]
  1991 000013D5 492B7901                	sub rdi, qword [r9 + 1]
  1992 000013D9 E81B090000              	call make_integer
  1993 000013DE C9                      	leave
  1994 000013DF C22000                  	ret AND_KILL_FRAME(2)
  1995                                  
  1996                                  L_code_ptr_raw_bin_sub_qq:
  1997 000013E2 C8000000                        enter 0, 0
  1998 000013E6 48837D1802                      cmp COUNT, 2
  1999 000013EB 0F85EE090000                    jne L_error_arg_count_2
  2000 000013F1 4C8B4520                        mov r8, PARAM(0)
  2001                                          assert_fraction(r8)
    53 000013F5 41803812            <1>  cmp byte [%1], %2
    54 000013F9 0F857F0A0000        <1>  jne L_error_incorrect_type
  2002 000013FF 4C8B4D28                        mov r9, PARAM(1)
  2003                                          assert_fraction(r9)
    53 00001403 41803912            <1>  cmp byte [%1], %2
    54 00001407 0F85710A0000        <1>  jne L_error_incorrect_type
  2004 0000140D 498B4001                        mov rax, qword [r8 + 1] ; num1
  2005 00001411 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2006 00001415 4899                            cqo
  2007 00001417 48F7EB                          imul rbx
  2008 0000141A 4889C6                          mov rsi, rax
  2009 0000141D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2010 00001421 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2011 00001425 4899                            cqo
  2012 00001427 48F7EB                          imul rbx
  2013 0000142A 4829C6                          sub rsi, rax
  2014 0000142D 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2015 00001431 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2016 00001435 4899                            cqo
  2017 00001437 48F7EB                          imul rbx
  2018 0000143A 4889C7                          mov rdi, rax
  2019 0000143D E83E010000                      call normalize_fraction
  2020 00001442 C9                              leave
  2021 00001443 C22000                          ret AND_KILL_FRAME(2)
  2022                                  
  2023                                  L_code_ptr_raw_bin_mul_zz:
  2024 00001446 C8000000                	enter 0, 0
  2025 0000144A 48837D1802              	cmp COUNT, 2
  2026 0000144F 0F858A090000            	jne L_error_arg_count_2
  2027 00001455 4C8B4520                	mov r8, PARAM(0)
  2028                                  	assert_integer(r8)
    53 00001459 41803811            <1>  cmp byte [%1], %2
    54 0000145D 0F851B0A0000        <1>  jne L_error_incorrect_type
  2029 00001463 4C8B4D28                	mov r9, PARAM(1)
  2030                                  	assert_integer(r9)
    53 00001467 41803911            <1>  cmp byte [%1], %2
    54 0000146B 0F850D0A0000        <1>  jne L_error_incorrect_type
  2031 00001471 4899                    	cqo
  2032 00001473 498B4001                	mov rax, qword [r8 + 1]
  2033 00001477 49F76101                	mul qword [r9 + 1]
  2034 0000147B 4889C7                  	mov rdi, rax
  2035 0000147E E876080000              	call make_integer
  2036 00001483 C9                      	leave
  2037 00001484 C22000                  	ret AND_KILL_FRAME(2)
  2038                                  
  2039                                  L_code_ptr_raw_bin_mul_qq:
  2040 00001487 C8000000                        enter 0, 0
  2041 0000148B 48837D1802                      cmp COUNT, 2
  2042 00001490 0F8549090000                    jne L_error_arg_count_2
  2043 00001496 4C8B4520                        mov r8, PARAM(0)
  2044                                          assert_fraction(r8)
    53 0000149A 41803812            <1>  cmp byte [%1], %2
    54 0000149E 0F85DA090000        <1>  jne L_error_incorrect_type
  2045 000014A4 4C8B4D28                        mov r9, PARAM(1)
  2046                                          assert_fraction(r9)
    53 000014A8 41803912            <1>  cmp byte [%1], %2
    54 000014AC 0F85CC090000        <1>  jne L_error_incorrect_type
  2047 000014B2 498B4001                        mov rax, qword [r8 + 1] ; num1
  2048 000014B6 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2049 000014BA 4899                            cqo
  2050 000014BC 48F7EB                          imul rbx
  2051 000014BF 4889C6                          mov rsi, rax
  2052 000014C2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2053 000014C6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2054 000014CA 4899                            cqo
  2055 000014CC 48F7EB                          imul rbx
  2056 000014CF 4889C7                          mov rdi, rax
  2057 000014D2 E8A9000000                      call normalize_fraction
  2058 000014D7 C9                              leave
  2059 000014D8 C22000                          ret AND_KILL_FRAME(2)
  2060                                          
  2061                                  L_code_ptr_raw_bin_div_zz:
  2062 000014DB C8000000                	enter 0, 0
  2063 000014DF 48837D1802              	cmp COUNT, 2
  2064 000014E4 0F85F5080000            	jne L_error_arg_count_2
  2065 000014EA 4C8B4520                	mov r8, PARAM(0)
  2066                                  	assert_integer(r8)
    53 000014EE 41803811            <1>  cmp byte [%1], %2
    54 000014F2 0F8586090000        <1>  jne L_error_incorrect_type
  2067 000014F8 4C8B4D28                	mov r9, PARAM(1)
  2068                                  	assert_integer(r9)
    53 000014FC 41803911            <1>  cmp byte [%1], %2
    54 00001500 0F8578090000        <1>  jne L_error_incorrect_type
  2069 00001506 498B7901                	mov rdi, qword [r9 + 1]
  2070 0000150A 4883FF00                	cmp rdi, 0
  2071 0000150E 0F849B090000            	je L_error_division_by_zero
  2072 00001514 498B7001                	mov rsi, qword [r8 + 1]
  2073 00001518 E863000000              	call normalize_fraction
  2074 0000151D C9                      	leave
  2075 0000151E C22000                  	ret AND_KILL_FRAME(2)
  2076                                  
  2077                                  L_code_ptr_raw_bin_div_qq:
  2078 00001521 C8000000                        enter 0, 0
  2079 00001525 48837D1802                      cmp COUNT, 2
  2080 0000152A 0F85AF080000                    jne L_error_arg_count_2
  2081 00001530 4C8B4520                        mov r8, PARAM(0)
  2082                                          assert_fraction(r8)
    53 00001534 41803812            <1>  cmp byte [%1], %2
    54 00001538 0F8540090000        <1>  jne L_error_incorrect_type
  2083 0000153E 4C8B4D28                        mov r9, PARAM(1)
  2084                                          assert_fraction(r9)
    53 00001542 41803912            <1>  cmp byte [%1], %2
    54 00001546 0F8532090000        <1>  jne L_error_incorrect_type
  2085 0000154C 4983790100                      cmp qword [r9 + 1], 0
  2086 00001551 0F8458090000                    je L_error_division_by_zero
  2087 00001557 498B4001                        mov rax, qword [r8 + 1] ; num1
  2088 0000155B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2089 0000155F 4899                            cqo
  2090 00001561 48F7EB                          imul rbx
  2091 00001564 4889C6                          mov rsi, rax
  2092 00001567 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2093 0000156B 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2094 0000156F 4899                            cqo
  2095 00001571 48F7EB                          imul rbx
  2096 00001574 4889C7                          mov rdi, rax
  2097 00001577 E804000000                      call normalize_fraction
  2098 0000157C C9                              leave
  2099 0000157D C22000                          ret AND_KILL_FRAME(2)
  2100                                          
  2101                                  normalize_fraction:
  2102 00001580 56                              push rsi
  2103 00001581 57                              push rdi
  2104 00001582 E859000000                      call gcd
  2105 00001587 4889C3                          mov rbx, rax
  2106 0000158A 58                              pop rax
  2107 0000158B 4899                            cqo
  2108 0000158D 48F7FB                          idiv rbx
  2109 00001590 4989C0                          mov r8, rax
  2110 00001593 58                              pop rax
  2111 00001594 4899                            cqo
  2112 00001596 48F7FB                          idiv rbx
  2113 00001599 4989C1                          mov r9, rax
  2114 0000159C 4983F900                        cmp r9, 0
  2115 000015A0 741C                            je .L_zero
  2116 000015A2 4983F801                        cmp r8, 1
  2117 000015A6 7421                            je .L_int
  2118 000015A8 BF11000000                      mov rdi, (1 + 8 + 8)
  2119 000015AD E8CAEBFFFF                      call malloc
  2120 000015B2 C60012                          mov byte [rax], T_fraction
  2121 000015B5 4C894801                        mov qword [rax + 1], r9
  2122 000015B9 4C894009                        mov qword [rax + 1 + 8], r8
  2123 000015BD C3                              ret
  2124                                  .L_zero:
  2125 000015BE BF00000000                      mov rdi, 0
  2126 000015C3 E831070000                      call make_integer
  2127 000015C8 C3                              ret
  2128                                  .L_int:
  2129 000015C9 4C89CF                          mov rdi, r9
  2130 000015CC E828070000                      call make_integer
  2131 000015D1 C3                              ret
  2132                                  
  2133                                  iabs:
  2134 000015D2 4889F8                          mov rax, rdi
  2135 000015D5 4883F800                        cmp rax, 0
  2136 000015D9 7C01                            jl .Lneg
  2137 000015DB C3                              ret
  2138                                  .Lneg:
  2139 000015DC 48F7D8                          neg rax
  2140 000015DF C3                              ret
  2141                                  
  2142                                  gcd:
  2143 000015E0 E8EDFFFFFF                      call iabs
  2144 000015E5 4889C3                          mov rbx, rax
  2145 000015E8 4889F7                          mov rdi, rsi
  2146 000015EB E8E2FFFFFF                      call iabs
  2147 000015F0 4883F800                        cmp rax, 0
  2148 000015F4 7502                            jne .L0
  2149 000015F6 4893                            xchg rax, rbx
  2150                                  .L0:
  2151 000015F8 4883FB00                        cmp rbx, 0
  2152 000015FC 740C                            je .L1
  2153 000015FE 4899                            cqo
  2154 00001600 48F7F3                          div rbx
  2155 00001603 4889D0                          mov rax, rdx
  2156 00001606 4893                            xchg rax, rbx
  2157 00001608 EBEE                            jmp .L0
  2158                                  .L1:
  2159 0000160A C3                              ret
  2160                                  
  2161                                  L_code_ptr_error:
  2162 0000160B C8000000                        enter 0, 0
  2163 0000160F 48837D1802                      cmp COUNT, 2
  2164 00001614 0F85C5070000                    jne L_error_arg_count_2
  2165 0000161A 488B7520                        mov rsi, PARAM(0)
  2166                                          assert_interned_symbol(rsi)
    53 0000161E 803E41              <1>  cmp byte [%1], %2
    54 00001621 0F8557080000        <1>  jne L_error_incorrect_type
  2167 00001627 488B7528                        mov rsi, PARAM(1)
  2168                                          assert_string(rsi)
    53 0000162B 803E03              <1>  cmp byte [%1], %2
    54 0000162E 0F854A080000        <1>  jne L_error_incorrect_type
  2169 00001634 48BF-                           mov rdi, fmt_scheme_error_part_1
  2169 00001636 [FB09000000000000] 
  2170 0000163E B800000000                      mov rax, 0
  2171                                          ENTER
    44 00001643 C8000000            <1>  enter 0, 0
    45 00001647 4883E4F0            <1>  and rsp, ~15
  2172 0000164B E8(00000000)                    call printf
  2173                                          LEAVE
    49 00001650 C9                  <1>  leave
  2174 00001651 488B7D20                        mov rdi, PARAM(0)
  2175 00001655 E8A3EDFFFF                      call print_sexpr
  2176 0000165A 48BF-                           mov rdi, fmt_scheme_error_part_2
  2176 0000165C [0F0A000000000000] 
  2177 00001664 B800000000                      mov rax, 0
  2178                                          ENTER
    44 00001669 C8000000            <1>  enter 0, 0
    45 0000166D 4883E4F0            <1>  and rsp, ~15
  2179 00001671 E8(00000000)                    call printf
  2180                                          LEAVE
    49 00001676 C9                  <1>  leave
  2181 00001677 488B4528                        mov rax, PARAM(1)       ; sob_string
  2182 0000167B BE01000000                      mov rsi, 1              ; size = 1 byte
  2183 00001680 488B5001                        mov rdx, qword [rax + 1] ; length
  2184 00001684 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2185 00001688 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2186                                  	ENTER
    44 00001690 C8000000            <1>  enter 0, 0
    45 00001694 4883E4F0            <1>  and rsp, ~15
  2187 00001698 E8(00000000)                    call fwrite
  2188                                  	LEAVE
    49 0000169D C9                  <1>  leave
  2189 0000169E 48BF-                           mov rdi, fmt_scheme_error_part_3
  2189 000016A0 [510A000000000000] 
  2190 000016A8 B800000000                      mov rax, 0
  2191                                          ENTER
    44 000016AD C8000000            <1>  enter 0, 0
    45 000016B1 4883E4F0            <1>  and rsp, ~15
  2192 000016B5 E8(00000000)                    call printf
  2193                                          LEAVE
    49 000016BA C9                  <1>  leave
  2194 000016BB 48C7C0F7FFFFFF                  mov rax, -9
  2195 000016C2 E8(00000000)                    call exit
  2196                                  
  2197                                  L_code_ptr_raw_less_than_rr:
  2198 000016C7 C8000000                        enter 0, 0
  2199 000016CB 48837D1802                      cmp COUNT, 2
  2200 000016D0 0F8509070000                    jne L_error_arg_count_2
  2201 000016D6 488B7520                        mov rsi, PARAM(0)
  2202                                          assert_real(rsi)
    53 000016DA 803E13              <1>  cmp byte [%1], %2
    54 000016DD 0F859B070000        <1>  jne L_error_incorrect_type
  2203 000016E3 488B7D28                        mov rdi, PARAM(1)
  2204                                          assert_real(rdi)
    53 000016E7 803F13              <1>  cmp byte [%1], %2
    54 000016EA 0F858E070000        <1>  jne L_error_incorrect_type
  2205 000016F0 F20F104601                      movsd xmm0, qword [rsi + 1]
  2206 000016F5 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2207 000016FA 660F2FC1                        comisd xmm0, xmm1
  2208 000016FE 730C                            jae .L_false
  2209 00001700 48B8-                           mov rax, sob_boolean_true
  2209 00001702 [0300000000000000] 
  2210 0000170A EB0A                            jmp .L_exit
  2211                                  .L_false:
  2212 0000170C 48B8-                           mov rax, sob_boolean_false
  2212 0000170E [0200000000000000] 
  2213                                  .L_exit:
  2214 00001716 C9                              leave
  2215 00001717 C22000                          ret AND_KILL_FRAME(2)
  2216                                          
  2217                                  L_code_ptr_raw_less_than_zz:
  2218 0000171A C8000000                	enter 0, 0
  2219 0000171E 48837D1802              	cmp COUNT, 2
  2220 00001723 0F85B6060000            	jne L_error_arg_count_2
  2221 00001729 4C8B4520                	mov r8, PARAM(0)
  2222                                  	assert_integer(r8)
    53 0000172D 41803811            <1>  cmp byte [%1], %2
    54 00001731 0F8547070000        <1>  jne L_error_incorrect_type
  2223 00001737 4C8B4D28                	mov r9, PARAM(1)
  2224                                  	assert_integer(r9)
    53 0000173B 41803911            <1>  cmp byte [%1], %2
    54 0000173F 0F8539070000        <1>  jne L_error_incorrect_type
  2225 00001745 498B7801                	mov rdi, qword [r8 + 1]
  2226 00001749 493B7901                	cmp rdi, qword [r9 + 1]
  2227 0000174D 7D0C                    	jge .L_false
  2228 0000174F 48B8-                   	mov rax, sob_boolean_true
  2228 00001751 [0300000000000000] 
  2229 00001759 EB0A                    	jmp .L_exit
  2230                                  .L_false:
  2231 0000175B 48B8-                   	mov rax, sob_boolean_false
  2231 0000175D [0200000000000000] 
  2232                                  .L_exit:
  2233 00001765 C9                      	leave
  2234 00001766 C22000                  	ret AND_KILL_FRAME(2)
  2235                                  
  2236                                  L_code_ptr_raw_less_than_qq:
  2237 00001769 C8000000                        enter 0, 0
  2238 0000176D 48837D1802                      cmp COUNT, 2
  2239 00001772 0F8567060000                    jne L_error_arg_count_2
  2240 00001778 488B7520                        mov rsi, PARAM(0)
  2241                                          assert_fraction(rsi)
    53 0000177C 803E12              <1>  cmp byte [%1], %2
    54 0000177F 0F85F9060000        <1>  jne L_error_incorrect_type
  2242 00001785 488B7D28                        mov rdi, PARAM(1)
  2243                                          assert_fraction(rdi)
    53 00001789 803F12              <1>  cmp byte [%1], %2
    54 0000178C 0F85EC060000        <1>  jne L_error_incorrect_type
  2244 00001792 488B4601                        mov rax, qword [rsi + 1] ; num1
  2245 00001796 4899                            cqo
  2246 00001798 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2247 0000179C 4889C1                          mov rcx, rax
  2248 0000179F 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2249 000017A3 4899                            cqo
  2250 000017A5 48F76F01                        imul qword [rdi + 1]          ; num2
  2251 000017A9 4829C1                          sub rcx, rax
  2252 000017AC 7D0C                            jge .L_false
  2253 000017AE 48B8-                           mov rax, sob_boolean_true
  2253 000017B0 [0300000000000000] 
  2254 000017B8 EB0A                            jmp .L_exit
  2255                                  .L_false:
  2256 000017BA 48B8-                           mov rax, sob_boolean_false
  2256 000017BC [0200000000000000] 
  2257                                  .L_exit:
  2258 000017C4 C9                              leave
  2259 000017C5 C22000                          ret AND_KILL_FRAME(2)
  2260                                  
  2261                                  L_code_ptr_raw_equal_rr:
  2262 000017C8 C8000000                        enter 0, 0
  2263 000017CC 48837D1802                      cmp COUNT, 2
  2264 000017D1 0F8508060000                    jne L_error_arg_count_2
  2265 000017D7 488B7520                        mov rsi, PARAM(0)
  2266                                          assert_real(rsi)
    53 000017DB 803E13              <1>  cmp byte [%1], %2
    54 000017DE 0F859A060000        <1>  jne L_error_incorrect_type
  2267 000017E4 488B7D28                        mov rdi, PARAM(1)
  2268                                          assert_real(rdi)
    53 000017E8 803F13              <1>  cmp byte [%1], %2
    54 000017EB 0F858D060000        <1>  jne L_error_incorrect_type
  2269 000017F1 F20F104601                      movsd xmm0, qword [rsi + 1]
  2270 000017F6 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2271 000017FB 660F2FC1                        comisd xmm0, xmm1
  2272 000017FF 750C                            jne .L_false
  2273 00001801 48B8-                           mov rax, sob_boolean_true
  2273 00001803 [0300000000000000] 
  2274 0000180B EB0A                            jmp .L_exit
  2275                                  .L_false:
  2276 0000180D 48B8-                           mov rax, sob_boolean_false
  2276 0000180F [0200000000000000] 
  2277                                  .L_exit:
  2278 00001817 C9                              leave
  2279 00001818 C22000                          ret AND_KILL_FRAME(2)
  2280                                          
  2281                                  L_code_ptr_raw_equal_zz:
  2282 0000181B C8000000                	enter 0, 0
  2283 0000181F 48837D1802              	cmp COUNT, 2
  2284 00001824 0F85B5050000            	jne L_error_arg_count_2
  2285 0000182A 4C8B4520                	mov r8, PARAM(0)
  2286                                  	assert_integer(r8)
    53 0000182E 41803811            <1>  cmp byte [%1], %2
    54 00001832 0F8546060000        <1>  jne L_error_incorrect_type
  2287 00001838 4C8B4D28                	mov r9, PARAM(1)
  2288                                  	assert_integer(r9)
    53 0000183C 41803911            <1>  cmp byte [%1], %2
    54 00001840 0F8538060000        <1>  jne L_error_incorrect_type
  2289 00001846 498B7801                	mov rdi, qword [r8 + 1]
  2290 0000184A 493B7901                	cmp rdi, qword [r9 + 1]
  2291 0000184E 750C                    	jne .L_false
  2292 00001850 48B8-                   	mov rax, sob_boolean_true
  2292 00001852 [0300000000000000] 
  2293 0000185A EB0A                    	jmp .L_exit
  2294                                  .L_false:
  2295 0000185C 48B8-                   	mov rax, sob_boolean_false
  2295 0000185E [0200000000000000] 
  2296                                  .L_exit:
  2297 00001866 C9                      	leave
  2298 00001867 C22000                  	ret AND_KILL_FRAME(2)
  2299                                  
  2300                                  L_code_ptr_raw_equal_qq:
  2301 0000186A C8000000                        enter 0, 0
  2302 0000186E 48837D1802                      cmp COUNT, 2
  2303 00001873 0F8566050000                    jne L_error_arg_count_2
  2304 00001879 488B7520                        mov rsi, PARAM(0)
  2305                                          assert_fraction(rsi)
    53 0000187D 803E12              <1>  cmp byte [%1], %2
    54 00001880 0F85F8050000        <1>  jne L_error_incorrect_type
  2306 00001886 488B7D28                        mov rdi, PARAM(1)
  2307                                          assert_fraction(rdi)
    53 0000188A 803F12              <1>  cmp byte [%1], %2
    54 0000188D 0F85EB050000        <1>  jne L_error_incorrect_type
  2308 00001893 488B4601                        mov rax, qword [rsi + 1] ; num1
  2309 00001897 4899                            cqo
  2310 00001899 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2311 0000189D 4889C1                          mov rcx, rax
  2312 000018A0 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2313 000018A4 4899                            cqo
  2314 000018A6 48F76F01                        imul qword [rdi + 1]          ; num2
  2315 000018AA 4829C1                          sub rcx, rax
  2316 000018AD 750C                            jne .L_false
  2317 000018AF 48B8-                           mov rax, sob_boolean_true
  2317 000018B1 [0300000000000000] 
  2318 000018B9 EB0A                            jmp .L_exit
  2319                                  .L_false:
  2320 000018BB 48B8-                           mov rax, sob_boolean_false
  2320 000018BD [0200000000000000] 
  2321                                  .L_exit:
  2322 000018C5 C9                              leave
  2323 000018C6 C22000                          ret AND_KILL_FRAME(2)
  2324                                  
  2325                                  L_code_ptr_quotient:
  2326 000018C9 C8000000                        enter 0, 0
  2327 000018CD 48837D1802                      cmp COUNT, 2
  2328 000018D2 0F8507050000                    jne L_error_arg_count_2
  2329 000018D8 488B7520                        mov rsi, PARAM(0)
  2330                                          assert_integer(rsi)
    53 000018DC 803E11              <1>  cmp byte [%1], %2
    54 000018DF 0F8599050000        <1>  jne L_error_incorrect_type
  2331 000018E5 488B7D28                        mov rdi, PARAM(1)
  2332                                          assert_integer(rdi)
    53 000018E9 803F11              <1>  cmp byte [%1], %2
    54 000018EC 0F858C050000        <1>  jne L_error_incorrect_type
  2333 000018F2 488B4601                        mov rax, qword [rsi + 1]
  2334 000018F6 488B5F01                        mov rbx, qword [rdi + 1]
  2335 000018FA 4883FB00                        cmp rbx, 0
  2336 000018FE 0F84AB050000                    je L_error_division_by_zero
  2337 00001904 4899                            cqo
  2338 00001906 48F7FB                          idiv rbx
  2339 00001909 4889C7                          mov rdi, rax
  2340 0000190C E8E8030000                      call make_integer
  2341 00001911 C9                              leave
  2342 00001912 C22000                          ret AND_KILL_FRAME(2)
  2343                                          
  2344                                  L_code_ptr_remainder:
  2345 00001915 C8000000                        enter 0, 0
  2346 00001919 48837D1802                      cmp COUNT, 2
  2347 0000191E 0F85BB040000                    jne L_error_arg_count_2
  2348 00001924 488B7520                        mov rsi, PARAM(0)
  2349                                          assert_integer(rsi)
    53 00001928 803E11              <1>  cmp byte [%1], %2
    54 0000192B 0F854D050000        <1>  jne L_error_incorrect_type
  2350 00001931 488B7D28                        mov rdi, PARAM(1)
  2351                                          assert_integer(rdi)
    53 00001935 803F11              <1>  cmp byte [%1], %2
    54 00001938 0F8540050000        <1>  jne L_error_incorrect_type
  2352 0000193E 488B4601                        mov rax, qword [rsi + 1]
  2353 00001942 488B5F01                        mov rbx, qword [rdi + 1]
  2354 00001946 4883FB00                        cmp rbx, 0
  2355 0000194A 0F845F050000                    je L_error_division_by_zero
  2356 00001950 4899                            cqo
  2357 00001952 48F7FB                          idiv rbx
  2358 00001955 4889D7                          mov rdi, rdx
  2359 00001958 E89C030000                      call make_integer
  2360 0000195D C9                              leave
  2361 0000195E C22000                          ret AND_KILL_FRAME(2)
  2362                                  
  2363                                  L_code_ptr_set_car:
  2364 00001961 C8000000                        enter 0, 0
  2365 00001965 48837D1802                      cmp COUNT, 2
  2366 0000196A 0F856F040000                    jne L_error_arg_count_2
  2367 00001970 488B4520                        mov rax, PARAM(0)
  2368                                          assert_pair(rax)
    53 00001974 803821              <1>  cmp byte [%1], %2
    54 00001977 0F8501050000        <1>  jne L_error_incorrect_type
  2369 0000197D 488B5D28                        mov rbx, PARAM(1)
  2370 00001981 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2371 00001985 48B8-                           mov rax, sob_void
  2371 00001987 [0000000000000000] 
  2372 0000198F C9                              leave
  2373 00001990 C22000                          ret AND_KILL_FRAME(2)
  2374                                  
  2375                                  L_code_ptr_set_cdr:
  2376 00001993 C8000000                        enter 0, 0
  2377 00001997 48837D1802                      cmp COUNT, 2
  2378 0000199C 0F853D040000                    jne L_error_arg_count_2
  2379 000019A2 488B4520                        mov rax, PARAM(0)
  2380                                          assert_pair(rax)
    53 000019A6 803821              <1>  cmp byte [%1], %2
    54 000019A9 0F85CF040000        <1>  jne L_error_incorrect_type
  2381 000019AF 488B5D28                        mov rbx, PARAM(1)
  2382 000019B3 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2383 000019B7 48B8-                           mov rax, sob_void
  2383 000019B9 [0000000000000000] 
  2384 000019C1 C9                              leave
  2385 000019C2 C22000                          ret AND_KILL_FRAME(2)
  2386                                  
  2387                                  L_code_ptr_string_ref:
  2388 000019C5 C8000000                        enter 0, 0
  2389 000019C9 48837D1802                      cmp COUNT, 2
  2390 000019CE 0F850B040000                    jne L_error_arg_count_2
  2391 000019D4 488B7D20                        mov rdi, PARAM(0)
  2392                                          assert_string(rdi)
    53 000019D8 803F03              <1>  cmp byte [%1], %2
    54 000019DB 0F859D040000        <1>  jne L_error_incorrect_type
  2393 000019E1 488B7528                        mov rsi, PARAM(1)
  2394                                          assert_integer(rsi)
    53 000019E5 803E11              <1>  cmp byte [%1], %2
    54 000019E8 0F8590040000        <1>  jne L_error_incorrect_type
  2395 000019EE 488B5701                        mov rdx, qword [rdi + 1]
  2396 000019F2 488B4E01                        mov rcx, qword [rsi + 1]
  2397 000019F6 4839D1                          cmp rcx, rdx
  2398 000019F9 0F8D14030000                    jge L_error_integer_range
  2399 000019FF 4883F900                        cmp rcx, 0
  2400 00001A03 0F8C0A030000                    jl L_error_integer_range
  2401 00001A09 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2402 00001A0D BF02000000                      mov rdi, 2
  2403 00001A12 E865E7FFFF                      call malloc
  2404 00001A17 C60002                          mov byte [rax], T_char
  2405 00001A1A 885801                          mov byte [rax + 1], bl
  2406 00001A1D C9                              leave
  2407 00001A1E C22000                          ret AND_KILL_FRAME(2)
  2408                                  
  2409                                  L_code_ptr_vector_ref:
  2410 00001A21 C8000000                        enter 0, 0
  2411 00001A25 48837D1802                      cmp COUNT, 2
  2412 00001A2A 0F85AF030000                    jne L_error_arg_count_2
  2413 00001A30 488B7D20                        mov rdi, PARAM(0)
  2414                                          assert_vector(rdi)
    53 00001A34 803F22              <1>  cmp byte [%1], %2
    54 00001A37 0F8541040000        <1>  jne L_error_incorrect_type
  2415 00001A3D 488B7528                        mov rsi, PARAM(1)
  2416                                          assert_integer(rsi)
    53 00001A41 803E11              <1>  cmp byte [%1], %2
    54 00001A44 0F8534040000        <1>  jne L_error_incorrect_type
  2417 00001A4A 488B5701                        mov rdx, qword [rdi + 1]
  2418 00001A4E 488B4E01                        mov rcx, qword [rsi + 1]
  2419 00001A52 4839D1                          cmp rcx, rdx
  2420 00001A55 0F8DB8020000                    jge L_error_integer_range
  2421 00001A5B 4883F900                        cmp rcx, 0
  2422 00001A5F 0F8CAE020000                    jl L_error_integer_range
  2423 00001A65 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2424 00001A6A C9                              leave
  2425 00001A6B C22000                          ret AND_KILL_FRAME(2)
  2426                                  
  2427                                  L_code_ptr_vector_set:
  2428 00001A6E C8000000                        enter 0, 0
  2429 00001A72 48837D1803                      cmp COUNT, 3
  2430 00001A77 0F85CC030000                    jne L_error_arg_count_3
  2431 00001A7D 488B7D20                        mov rdi, PARAM(0)
  2432                                          assert_vector(rdi)
    53 00001A81 803F22              <1>  cmp byte [%1], %2
    54 00001A84 0F85F4030000        <1>  jne L_error_incorrect_type
  2433 00001A8A 488B7528                        mov rsi, PARAM(1)
  2434                                          assert_integer(rsi)
    53 00001A8E 803E11              <1>  cmp byte [%1], %2
    54 00001A91 0F85E7030000        <1>  jne L_error_incorrect_type
  2435 00001A97 488B5701                        mov rdx, qword [rdi + 1]
  2436 00001A9B 488B4E01                        mov rcx, qword [rsi + 1]
  2437 00001A9F 4839D1                          cmp rcx, rdx
  2438 00001AA2 0F8D6B020000                    jge L_error_integer_range
  2439 00001AA8 4883F900                        cmp rcx, 0
  2440 00001AAC 0F8C61020000                    jl L_error_integer_range
  2441 00001AB2 488B4530                        mov rax, PARAM(2)
  2442 00001AB6 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2443 00001ABB 48B8-                           mov rax, sob_void
  2443 00001ABD [0000000000000000] 
  2444 00001AC5 C9                              leave
  2445 00001AC6 C22800                          ret AND_KILL_FRAME(3)
  2446                                  
  2447                                  L_code_ptr_string_set:
  2448 00001AC9 C8000000                        enter 0, 0
  2449 00001ACD 48837D1803                      cmp COUNT, 3
  2450 00001AD2 0F8571030000                    jne L_error_arg_count_3
  2451 00001AD8 488B7D20                        mov rdi, PARAM(0)
  2452                                          assert_string(rdi)
    53 00001ADC 803F03              <1>  cmp byte [%1], %2
    54 00001ADF 0F8599030000        <1>  jne L_error_incorrect_type
  2453 00001AE5 488B7528                        mov rsi, PARAM(1)
  2454                                          assert_integer(rsi)
    53 00001AE9 803E11              <1>  cmp byte [%1], %2
    54 00001AEC 0F858C030000        <1>  jne L_error_incorrect_type
  2455 00001AF2 488B5701                        mov rdx, qword [rdi + 1]
  2456 00001AF6 488B4E01                        mov rcx, qword [rsi + 1]
  2457 00001AFA 4839D1                          cmp rcx, rdx
  2458 00001AFD 0F8D10020000                    jge L_error_integer_range
  2459 00001B03 4883F900                        cmp rcx, 0
  2460 00001B07 0F8C06020000                    jl L_error_integer_range
  2461 00001B0D 488B4530                        mov rax, PARAM(2)
  2462                                          assert_char(rax)
    53 00001B11 803802              <1>  cmp byte [%1], %2
    54 00001B14 0F8564030000        <1>  jne L_error_incorrect_type
  2463 00001B1A 8A4001                          mov al, byte [rax + 1]
  2464 00001B1D 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2465 00001B21 48B8-                           mov rax, sob_void
  2465 00001B23 [0000000000000000] 
  2466 00001B2B C9                              leave
  2467 00001B2C C22800                          ret AND_KILL_FRAME(3)
  2468                                  
  2469                                  L_code_ptr_make_vector:
  2470 00001B2F C8000000                        enter 0, 0
  2471 00001B33 48837D1802                      cmp COUNT, 2
  2472 00001B38 0F85A1020000                    jne L_error_arg_count_2
  2473 00001B3E 488B4D20                        mov rcx, PARAM(0)
  2474                                          assert_integer(rcx)
    53 00001B42 803911              <1>  cmp byte [%1], %2
    54 00001B45 0F8533030000        <1>  jne L_error_incorrect_type
  2475 00001B4B 488B4901                        mov rcx, qword [rcx + 1]
  2476 00001B4F 4883F900                        cmp rcx, 0
  2477 00001B53 0F8CBA010000                    jl L_error_integer_range
  2478 00001B59 488B5528                        mov rdx, PARAM(1)
  2479 00001B5D 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2480 00001B65 E812E6FFFF                      call malloc
  2481 00001B6A C60022                          mov byte [rax], T_vector
  2482 00001B6D 48894801                        mov qword [rax + 1], rcx
  2483 00001B71 41B800000000                    mov r8, 0
  2484                                  .L0:
  2485 00001B77 4939C8                          cmp r8, rcx
  2486 00001B7A 740A                            je .L1
  2487 00001B7C 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2488 00001B81 49FFC0                          inc r8
  2489 00001B84 EBF1                            jmp .L0
  2490                                  .L1:
  2491 00001B86 C9                              leave
  2492 00001B87 C22000                          ret AND_KILL_FRAME(2)
  2493                                          
  2494                                  L_code_ptr_make_string:
  2495 00001B8A C8000000                        enter 0, 0
  2496 00001B8E 48837D1802                      cmp COUNT, 2
  2497 00001B93 0F8546020000                    jne L_error_arg_count_2
  2498 00001B99 488B4D20                        mov rcx, PARAM(0)
  2499                                          assert_integer(rcx)
    53 00001B9D 803911              <1>  cmp byte [%1], %2
    54 00001BA0 0F85D8020000        <1>  jne L_error_incorrect_type
  2500 00001BA6 488B4901                        mov rcx, qword [rcx + 1]
  2501 00001BAA 4883F900                        cmp rcx, 0
  2502 00001BAE 0F8C5F010000                    jl L_error_integer_range
  2503 00001BB4 488B5528                        mov rdx, PARAM(1)
  2504                                          assert_char(rdx)
    53 00001BB8 803A02              <1>  cmp byte [%1], %2
    54 00001BBB 0F85BD020000        <1>  jne L_error_incorrect_type
  2505 00001BC1 8A5201                          mov dl, byte [rdx + 1]
  2506 00001BC4 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2507 00001BC8 E8AFE5FFFF                      call malloc
  2508 00001BCD C60003                          mov byte [rax], T_string
  2509 00001BD0 48894801                        mov qword [rax + 1], rcx
  2510 00001BD4 41B800000000                    mov r8, 0
  2511                                  .L0:
  2512 00001BDA 4939C8                          cmp r8, rcx
  2513 00001BDD 740A                            je .L1
  2514 00001BDF 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2515 00001BE4 49FFC0                          inc r8
  2516 00001BE7 EBF1                            jmp .L0
  2517                                  .L1:
  2518 00001BE9 C9                              leave
  2519 00001BEA C22000                          ret AND_KILL_FRAME(2)
  2520                                  
  2521                                  L_code_ptr_numerator:
  2522 00001BED C8000000                        enter 0, 0
  2523 00001BF1 48837D1801                      cmp COUNT, 1
  2524 00001BF6 0F85AE010000                    jne L_error_arg_count_1
  2525 00001BFC 488B4520                        mov rax, PARAM(0)
  2526                                          assert_fraction(rax)
    53 00001C00 803812              <1>  cmp byte [%1], %2
    54 00001C03 0F8575020000        <1>  jne L_error_incorrect_type
  2527 00001C09 488B7801                        mov rdi, qword [rax + 1]
  2528 00001C0D E8E7000000                      call make_integer
  2529 00001C12 C9                              leave
  2530 00001C13 C21800                          ret AND_KILL_FRAME(1)
  2531                                          
  2532                                  L_code_ptr_denominator:
  2533 00001C16 C8000000                        enter 0, 0
  2534 00001C1A 48837D1801                      cmp COUNT, 1
  2535 00001C1F 0F8585010000                    jne L_error_arg_count_1
  2536 00001C25 488B4520                        mov rax, PARAM(0)
  2537                                          assert_fraction(rax)
    53 00001C29 803812              <1>  cmp byte [%1], %2
    54 00001C2C 0F854C020000        <1>  jne L_error_incorrect_type
  2538 00001C32 488B7809                        mov rdi, qword [rax + 1 + 8]
  2539 00001C36 E8BE000000                      call make_integer
  2540 00001C3B C9                              leave
  2541 00001C3C C21800                          ret AND_KILL_FRAME(1)
  2542                                  
  2543                                  L_code_ptr_is_eq:
  2544 00001C3F C8000000                	enter 0, 0
  2545 00001C43 48837D1802              	cmp COUNT, 2
  2546 00001C48 0F8591010000            	jne L_error_arg_count_2
  2547 00001C4E 488B7D20                	mov rdi, PARAM(0)
  2548 00001C52 488B7528                	mov rsi, PARAM(1)
  2549 00001C56 4839F7                  	cmp rdi, rsi
  2550 00001C59 746C                    	je .L_eq_true
  2551 00001C5B 8A17                    	mov dl, byte [rdi]
  2552 00001C5D 3A16                    	cmp dl, byte [rsi]
  2553 00001C5F 7572                    	jne .L_eq_false
  2554 00001C61 80FA02                  	cmp dl, T_char
  2555 00001C64 7459                    	je .L_char
  2556 00001C66 80FA41                  	cmp dl, T_interned_symbol
  2557 00001C69 7440                    	je .L_interned_symbol
  2558 00001C6B 80FA42                          cmp dl, T_uninterned_symbol
  2559 00001C6E 7443                            je .L_uninterned_symbol
  2560 00001C70 80FA13                  	cmp dl, T_real
  2561 00001C73 742E                    	je .L_real
  2562 00001C75 80FA12                  	cmp dl, T_fraction
  2563 00001C78 7413                    	je .L_fraction
  2564 00001C7A 80FA11                          cmp dl, T_integer
  2565 00001C7D 7402                            je .L_integer
  2566 00001C7F EB52                    	jmp .L_eq_false
  2567                                  .L_integer:
  2568 00001C81 488B4601                        mov rax, qword [rsi + 1]
  2569 00001C85 483B4701                        cmp rax, qword [rdi + 1]
  2570 00001C89 7548                            jne .L_eq_false
  2571 00001C8B EB3A                            jmp .L_eq_true
  2572                                  .L_fraction:
  2573 00001C8D 488B4601                	mov rax, qword [rsi + 1]
  2574 00001C91 483B4701                	cmp rax, qword [rdi + 1]
  2575 00001C95 753C                    	jne .L_eq_false
  2576 00001C97 488B4609                	mov rax, qword [rsi + 1 + 8]
  2577 00001C9B 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2578 00001C9F 7532                    	jne .L_eq_false
  2579 00001CA1 EB24                    	jmp .L_eq_true
  2580                                  .L_real:
  2581 00001CA3 488B4601                	mov rax, qword [rsi + 1]
  2582 00001CA7 483B4701                	cmp rax, qword [rdi + 1]
  2583                                  .L_interned_symbol:
  2584                                  	; never reached, because interned_symbols are static!
  2585                                  	; but I'm keeping it in case, I'll ever change
  2586                                  	; the implementation
  2587 00001CAB 488B4601                	mov rax, qword [rsi + 1]
  2588 00001CAF 483B4701                	cmp rax, qword [rdi + 1]
  2589                                  .L_uninterned_symbol:
  2590 00001CB3 4C8B4701                        mov r8, qword [rdi + 1]
  2591 00001CB7 4C3B4601                        cmp r8, qword [rsi + 1]
  2592 00001CBB 7516                            jne .L_eq_false
  2593 00001CBD EB08                            jmp .L_eq_true
  2594                                  .L_char:
  2595 00001CBF 8A5E01                  	mov bl, byte [rsi + 1]
  2596 00001CC2 3A5F01                  	cmp bl, byte [rdi + 1]
  2597 00001CC5 750C                    	jne .L_eq_false
  2598                                  .L_eq_true:
  2599 00001CC7 48B8-                   	mov rax, sob_boolean_true
  2599 00001CC9 [0300000000000000] 
  2600 00001CD1 EB0A                    	jmp .L_eq_exit
  2601                                  .L_eq_false:
  2602 00001CD3 48B8-                   	mov rax, sob_boolean_false
  2602 00001CD5 [0200000000000000] 
  2603                                  .L_eq_exit:
  2604 00001CDD C9                      	leave
  2605 00001CDE C22000                  	ret AND_KILL_FRAME(2)
  2606                                  
  2607                                  make_real:
  2608 00001CE1 C8000000                        enter 0, 0
  2609 00001CE5 BF09000000                      mov rdi, (1 + 8)
  2610 00001CEA E88DE4FFFF                      call malloc
  2611 00001CEF C60013                          mov byte [rax], T_real
  2612 00001CF2 F20F114001                      movsd qword [rax + 1], xmm0
  2613 00001CF7 C9                              leave 
  2614 00001CF8 C3                              ret
  2615                                          
  2616                                  make_integer:
  2617 00001CF9 C8000000                        enter 0, 0
  2618 00001CFD 4889FE                          mov rsi, rdi
  2619 00001D00 BF09000000                      mov rdi, (1 + 8)
  2620 00001D05 E872E4FFFF                      call malloc
  2621 00001D0A C60011                          mov byte [rax], T_integer
  2622 00001D0D 48897001                        mov qword [rax + 1], rsi
  2623 00001D11 C9                              leave
  2624 00001D12 C3                              ret
  2625                                          
  2626                                  L_error_integer_range:
  2627 00001D13 488B3C25[00000000]              mov rdi, qword [stderr]
  2628 00001D1B 48BE-                           mov rsi, fmt_integer_range
  2628 00001D1D [C809000000000000] 
  2629 00001D25 B800000000                      mov rax, 0
  2630                                          ENTER
    44 00001D2A C8000000            <1>  enter 0, 0
    45 00001D2E 4883E4F0            <1>  and rsp, ~15
  2631 00001D32 E8(00000000)                    call fprintf
  2632                                          LEAVE
    49 00001D37 C9                  <1>  leave
  2633 00001D38 48C7C0FBFFFFFF                  mov rax, -5
  2634 00001D3F E8(00000000)                    call exit
  2635                                  
  2636                                  L_error_arg_negative:
  2637 00001D44 488B3C25[00000000]              mov rdi, qword [stderr]
  2638 00001D4C 48BE-                           mov rsi, fmt_arg_negative
  2638 00001D4E [A008000000000000] 
  2639 00001D56 B800000000                      mov rax, 0
  2640                                          ENTER
    44 00001D5B C8000000            <1>  enter 0, 0
    45 00001D5F 4883E4F0            <1>  and rsp, ~15
  2641 00001D63 E8(00000000)                    call fprintf
  2642                                          LEAVE
    49 00001D68 C9                  <1>  leave
  2643 00001D69 48C7C0FDFFFFFF                  mov rax, -3
  2644 00001D70 E8(00000000)                    call exit
  2645                                  
  2646                                  L_error_arg_count_0:
  2647 00001D75 488B3C25[00000000]              mov rdi, qword [stderr]
  2648 00001D7D 48BE-                           mov rsi, fmt_arg_count_0
  2648 00001D7F [C608000000000000] 
  2649 00001D87 488B5518                        mov rdx, COUNT
  2650 00001D8B B800000000                      mov rax, 0
  2651                                          ENTER
    44 00001D90 C8000000            <1>  enter 0, 0
    45 00001D94 4883E4F0            <1>  and rsp, ~15
  2652 00001D98 E8(00000000)                    call fprintf
  2653                                          LEAVE
    49 00001D9D C9                  <1>  leave
  2654 00001D9E 48C7C0FDFFFFFF                  mov rax, -3
  2655 00001DA5 E8(00000000)                    call exit
  2656                                  
  2657                                  L_error_arg_count_1:
  2658 00001DAA 488B3C25[00000000]              mov rdi, qword [stderr]
  2659 00001DB2 48BE-                           mov rsi, fmt_arg_count_1
  2659 00001DB4 [EE08000000000000] 
  2660 00001DBC 488B5518                        mov rdx, COUNT
  2661 00001DC0 B800000000                      mov rax, 0
  2662                                          ENTER
    44 00001DC5 C8000000            <1>  enter 0, 0
    45 00001DC9 4883E4F0            <1>  and rsp, ~15
  2663 00001DCD E8(00000000)                    call fprintf
  2664                                          LEAVE
    49 00001DD2 C9                  <1>  leave
  2665 00001DD3 48C7C0FDFFFFFF                  mov rax, -3
  2666 00001DDA E8(00000000)                    call exit
  2667                                  
  2668                                  L_error_arg_count_2:
  2669 00001DDF 488B3C25[00000000]              mov rdi, qword [stderr]
  2670 00001DE7 48BE-                           mov rsi, fmt_arg_count_2
  2670 00001DE9 [5409000000000000] 
  2671 00001DF1 488B5518                        mov rdx, COUNT
  2672 00001DF5 B800000000                      mov rax, 0
  2673                                          ENTER
    44 00001DFA C8000000            <1>  enter 0, 0
    45 00001DFE 4883E4F0            <1>  and rsp, ~15
  2674 00001E02 E8(00000000)                    call fprintf
  2675                                          LEAVE
    49 00001E07 C9                  <1>  leave
  2676 00001E08 48C7C0FDFFFFFF                  mov rax, -3
  2677 00001E0F E8(00000000)                    call exit
  2678                                  
  2679                                  L_error_arg_count_12:
  2680 00001E14 488B3C25[00000000]              mov rdi, qword [stderr]
  2681 00001E1C 48BE-                           mov rsi, fmt_arg_count_12
  2681 00001E1E [1409000000000000] 
  2682 00001E26 488B5518                        mov rdx, COUNT
  2683 00001E2A B800000000                      mov rax, 0
  2684                                          ENTER
    44 00001E2F C8000000            <1>  enter 0, 0
    45 00001E33 4883E4F0            <1>  and rsp, ~15
  2685 00001E37 E8(00000000)                    call fprintf
  2686                                          LEAVE
    49 00001E3C C9                  <1>  leave
  2687 00001E3D 48C7C0FDFFFFFF                  mov rax, -3
  2688 00001E44 E8(00000000)                    call exit
  2689                                  
  2690                                  L_error_arg_count_3:
  2691 00001E49 488B3C25[00000000]              mov rdi, qword [stderr]
  2692 00001E51 48BE-                           mov rsi, fmt_arg_count_3
  2692 00001E53 [7B09000000000000] 
  2693 00001E5B 488B5518                        mov rdx, COUNT
  2694 00001E5F B800000000                      mov rax, 0
  2695                                          ENTER
    44 00001E64 C8000000            <1>  enter 0, 0
    45 00001E68 4883E4F0            <1>  and rsp, ~15
  2696 00001E6C E8(00000000)                    call fprintf
  2697                                          LEAVE
    49 00001E71 C9                  <1>  leave
  2698 00001E72 48C7C0FDFFFFFF                  mov rax, -3
  2699 00001E79 E8(00000000)                    call exit
  2700                                          
  2701                                  L_error_incorrect_type:
  2702 00001E7E 488B3C25[00000000]              mov rdi, qword [stderr]
  2703 00001E86 48BE-                           mov rsi, fmt_type
  2703 00001E88 [A409000000000000] 
  2704 00001E90 B800000000                      mov rax, 0
  2705                                          ENTER
    44 00001E95 C8000000            <1>  enter 0, 0
    45 00001E99 4883E4F0            <1>  and rsp, ~15
  2706 00001E9D E8(00000000)                    call fprintf
  2707                                          LEAVE
    49 00001EA2 C9                  <1>  leave
  2708 00001EA3 48C7C0FCFFFFFF                  mov rax, -4
  2709 00001EAA E8(00000000)                    call exit
  2710                                  
  2711                                  L_error_division_by_zero:
  2712 00001EAF 488B3C25[00000000]              mov rdi, qword [stderr]
  2713 00001EB7 48BE-                           mov rsi, fmt_division_by_zero
  2713 00001EB9 [E509000000000000] 
  2714 00001EC1 B800000000                      mov rax, 0
  2715                                          ENTER
    44 00001EC6 C8000000            <1>  enter 0, 0
    45 00001ECA 4883E4F0            <1>  and rsp, ~15
  2716 00001ECE E8(00000000)                    call fprintf
  2717                                          LEAVE
    49 00001ED3 C9                  <1>  leave
  2718 00001ED4 48C7C0F8FFFFFF                  mov rax, -8
  2719 00001EDB E8(00000000)                    call exit
  2720                                  
  2721                                  section .data
  2722                                  gensym_count:
  2723 00000895 0000000000000000                dq 0
  2724                                  fmt_char:
  2725 0000089D 256300                          db `%c\0`
  2726                                  fmt_arg_negative:
  2727 000008A0 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  2727 000008A9 7267756D656E742063-
  2727 000008B2 616E6E6F7420626520-
  2727 000008BB 6E656761746976652E-
  2727 000008C4 0A00               
  2728                                  fmt_arg_count_0:
  2729 000008C6 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2729 000008CF 74696E67207A65726F-
  2729 000008D8 20617267756D656E74-
  2729 000008E1 732E20466F756E6420-
  2729 000008EA 25640A00           
  2730                                  fmt_arg_count_1:
  2731 000008EE 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2731 000008F7 74696E67206F6E6520-
  2731 00000900 617267756D656E742E-
  2731 00000909 20466F756E64202564-
  2731 00000912 0A00               
  2732                                  fmt_arg_count_12:
  2733 00000914 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2733 0000091D 74696E67206F6E6520-
  2733 00000926 726571756972656420-
  2733 0000092F 616E64206F6E65206F-
  2733 00000938 7074696F6E616C2061-
  2733 00000941 7267756D656E742E20-
  2733 0000094A 466F756E642025640A-
  2733 00000953 00                 
  2734                                  fmt_arg_count_2:
  2735 00000954 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2735 0000095D 74696E672074776F20-
  2735 00000966 617267756D656E7473-
  2735 0000096F 2E20466F756E642025-
  2735 00000978 640A00             
  2736                                  fmt_arg_count_3:
  2737 0000097B 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2737 00000984 74696E672074687265-
  2737 0000098D 6520617267756D656E-
  2737 00000996 74732E20466F756E64-
  2737 0000099F 2025640A00         
  2738                                  fmt_type:
  2739 000009A4 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2739 000009AD 696F6E207061737365-
  2739 000009B6 6420696E636F727265-
  2739 000009BF 637420747970650A00 
  2740                                  fmt_integer_range:
  2741 000009C8 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2741 000009D1 7265637420696E7465-
  2741 000009DA 6765722072616E6765-
  2741 000009E3 0A00               
  2742                                  fmt_division_by_zero:
  2743 000009E5 212121204469766973-             db `!!! Division by zero\n\0`
  2743 000009EE 696F6E206279207A65-
  2743 000009F7 726F0A00           
  2744                                  fmt_scheme_error_part_1:
  2745 000009FB 0A2121212054686520-             db `\n!!! The procedure \0`
  2745 00000A04 70726F636564757265-
  2745 00000A0D 2000               
  2746                                  fmt_scheme_error_part_2:
  2747 00000A0F 2061736B656420746F-             db ` asked to terminate the program\n`
  2747 00000A18 207465726D696E6174-
  2747 00000A21 65207468652070726F-
  2747 00000A2A 6772616D0A         
  2748 00000A2F 202020207769746820-             db `    with the following message:\n\n\0`
  2748 00000A38 74686520666F6C6C6F-
  2748 00000A41 77696E67206D657373-
  2748 00000A4A 6167653A0A0A00     
  2749                                  fmt_scheme_error_part_3:
  2750 00000A51 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2750 00000A5A 210A0A00           
