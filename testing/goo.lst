     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  
   468                                  
   469                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   470                                  global main
   471                                  section .text
   472                                  main:
   473 00000000 C8000000                        enter 0, 0
   474 00000004 6A00                            push 0
   475 00000006 6A00                            push 0
   476 00000008 68[9D120000]                    push Lend
   477 0000000D C8000000                        enter 0, 0
   478                                  
   479                                  	; preparing a non-tail-call
   480 00000011 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   481 00000016 E8ED130000              	call malloc
   482 0000001B 50                      	push rax
   483 0000001C BF00000000              	mov rdi, 8 * 0	; new rib
   484 00000021 E8E2130000              	call malloc
   485 00000026 50                      	push rax
   486 00000027 BF08000000              	mov rdi, 8 * 1	; extended env
   487 0000002C E8D7130000              	call malloc
   488 00000031 488B7D10                	mov rdi, ENV
   489 00000035 BE00000000              	mov rsi, 0
   490 0000003A BA01000000              	mov rdx, 1
   491                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   492 0000003F 4883FE00                	cmp rsi, 0
   493 00000043 7410                    	je .L_lambda_simple_env_end_0001
   494 00000045 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   495 00000049 48890CD0                	mov qword [rax + 8 * rdx], rcx
   496 0000004D 48FFC6                  	inc rsi
   497 00000050 48FFC2                  	inc rdx
   498 00000053 EBEA                    	jmp .L_lambda_simple_env_loop_0001
   499                                  .L_lambda_simple_env_end_0001:
   500 00000055 5B                      	pop rbx
   501 00000056 BE00000000              	mov rsi, 0
   502                                  .L_lambda_simple_params_loop_0001:	; copy params
   503 0000005B 4883FE00                	cmp rsi, 0
   504 0000005F 740E                    	je .L_lambda_simple_params_end_0001
   505 00000061 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   506 00000066 488914F3                	mov qword [rbx + 8 * rsi], rdx
   507 0000006A 48FFC6                  	inc rsi
   508 0000006D EBEC                    	jmp .L_lambda_simple_params_loop_0001
   509                                  .L_lambda_simple_params_end_0001:
   510 0000006F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   511 00000072 4889C3                  	mov rbx, rax
   512 00000075 58                      	pop rax
   513 00000076 C60004                  	mov byte [rax], T_closure
   514 00000079 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   515 0000007D 48C74009[8A000000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   516 00000085 E9B6000000              	jmp .L_lambda_simple_end_0001
   517                                  .L_lambda_simple_code_0001:	; lambda-simple body
   518 0000008A 48837C241001            	cmp qword [rsp + 8 * 2], 1
   519 00000090 740B                    	je .L_lambda_simple_arity_check_ok_0001
   520 00000092 FF742410                	push qword [rsp + 8 * 2]
   521 00000096 6A01                    	push 1
   522 00000098 E924130000              	jmp L_error_incorrect_arity_simple
   523                                  .L_lambda_simple_arity_check_ok_0001:
   524 0000009D C8000000                	enter 0, 0
   525 000000A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   526 000000A6 E85D130000              	call malloc
   527 000000AB 50                      	push rax
   528 000000AC BF08000000              	mov rdi, 8 * 1	; new rib
   529 000000B1 E852130000              	call malloc
   530 000000B6 50                      	push rax
   531 000000B7 BF10000000              	mov rdi, 8 * 2	; extended env
   532 000000BC E847130000              	call malloc
   533 000000C1 488B7D10                	mov rdi, ENV
   534 000000C5 BE00000000              	mov rsi, 0
   535 000000CA BA01000000              	mov rdx, 1
   536                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   537 000000CF 4883FE01                	cmp rsi, 1
   538 000000D3 7410                    	je .L_lambda_simple_env_end_0002
   539 000000D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   540 000000D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
   541 000000DD 48FFC6                  	inc rsi
   542 000000E0 48FFC2                  	inc rdx
   543 000000E3 EBEA                    	jmp .L_lambda_simple_env_loop_0002
   544                                  .L_lambda_simple_env_end_0002:
   545 000000E5 5B                      	pop rbx
   546 000000E6 BE00000000              	mov rsi, 0
   547                                  .L_lambda_simple_params_loop_0002:	; copy params
   548 000000EB 4883FE01                	cmp rsi, 1
   549 000000EF 740E                    	je .L_lambda_simple_params_end_0002
   550 000000F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   551 000000F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
   552 000000FA 48FFC6                  	inc rsi
   553 000000FD EBEC                    	jmp .L_lambda_simple_params_loop_0002
   554                                  .L_lambda_simple_params_end_0002:
   555 000000FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   556 00000102 4889C3                  	mov rbx, rax
   557 00000105 58                      	pop rax
   558 00000106 C60004                  	mov byte [rax], T_closure
   559 00000109 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   560 0000010D 48C74009[17010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   561 00000115 EB25                    	jmp .L_lambda_simple_end_0002
   562                                  .L_lambda_simple_code_0002:	; lambda-simple body
   563 00000117 48837C241001            	cmp qword [rsp + 8 * 2], 1
   564 0000011D 740B                    	je .L_lambda_simple_arity_check_ok_0002
   565 0000011F FF742410                	push qword [rsp + 8 * 2]
   566 00000123 6A01                    	push 1
   567 00000125 E997120000              	jmp L_error_incorrect_arity_simple
   568                                  .L_lambda_simple_arity_check_ok_0002:
   569 0000012A C8000000                	enter 0, 0
   570 0000012E 488B4510                	mov rax, ENV
   571 00000132 488B00                  	mov rax, qword [rax + 8 * 0]
   572 00000135 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
   573 00000138 C9                      	leave
   574 00000139 C21800                  	ret AND_KILL_FRAME(1)
   575                                  .L_lambda_simple_end_0002:	; new closure is in rax
   576 0000013C C9                      	leave
   577 0000013D C21800                  	ret AND_KILL_FRAME(1)
   578                                  .L_lambda_simple_end_0001:	; new closure is in rax
   579 00000140 50                      	push rax
   580 00000141 6A01                    	push 1	; arg count
   581                                  	; preparing a tail-call
   582 00000143 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   583 00000148 E8BB120000              	call malloc
   584 0000014D 50                      	push rax
   585 0000014E BF00000000              	mov rdi, 8 * 0	; new rib
   586 00000153 E8B0120000              	call malloc
   587 00000158 50                      	push rax
   588 00000159 BF08000000              	mov rdi, 8 * 1	; extended env
   589 0000015E E8A5120000              	call malloc
   590 00000163 488B7D10                	mov rdi, ENV
   591 00000167 BE00000000              	mov rsi, 0
   592 0000016C BA01000000              	mov rdx, 1
   593                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
   594 00000171 4883FE00                	cmp rsi, 0
   595 00000175 7410                    	je .L_lambda_simple_env_end_0003
   596 00000177 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   597 0000017B 48890CD0                	mov qword [rax + 8 * rdx], rcx
   598 0000017F 48FFC6                  	inc rsi
   599 00000182 48FFC2                  	inc rdx
   600 00000185 EBEA                    	jmp .L_lambda_simple_env_loop_0003
   601                                  .L_lambda_simple_env_end_0003:
   602 00000187 5B                      	pop rbx
   603 00000188 BE00000000              	mov rsi, 0
   604                                  .L_lambda_simple_params_loop_0003:	; copy params
   605 0000018D 4883FE00                	cmp rsi, 0
   606 00000191 740E                    	je .L_lambda_simple_params_end_0003
   607 00000193 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   608 00000198 488914F3                	mov qword [rbx + 8 * rsi], rdx
   609 0000019C 48FFC6                  	inc rsi
   610 0000019F EBEC                    	jmp .L_lambda_simple_params_loop_0003
   611                                  .L_lambda_simple_params_end_0003:
   612 000001A1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   613 000001A4 4889C3                  	mov rbx, rax
   614 000001A7 58                      	pop rax
   615 000001A8 C60004                  	mov byte [rax], T_closure
   616 000001AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   617 000001AF 48C74009[BC010000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
   618 000001B7 E9C7000000              	jmp .L_lambda_simple_end_0003
   619                                  .L_lambda_simple_code_0003:	; lambda-simple body
   620 000001BC 48837C241001            	cmp qword [rsp + 8 * 2], 1
   621 000001C2 740B                    	je .L_lambda_simple_arity_check_ok_0003
   622 000001C4 FF742410                	push qword [rsp + 8 * 2]
   623 000001C8 6A01                    	push 1
   624 000001CA E9F2110000              	jmp L_error_incorrect_arity_simple
   625                                  .L_lambda_simple_arity_check_ok_0003:
   626 000001CF C8000000                	enter 0, 0
   627                                  	; preparing a tail-call
   628 000001D3 48B8-                   	mov rax, L_constants + 2
   628 000001D5 [0200000000000000] 
   629 000001DD 50                      	push rax
   630 000001DE 6A01                    	push 1	; arg count
   631                                  	; preparing a tail-call
   632 000001E0 48B8-                   	mov rax, L_constants + 3
   632 000001E2 [0300000000000000] 
   633 000001EA 50                      	push rax
   634 000001EB 6A01                    	push 1	; arg count
   635 000001ED 488B4520                	mov rax, PARAM(0)	; param x
   636 000001F1 803804                  	cmp byte [rax], T_closure
   637 000001F4 0F8565110000            	jne L_error_non_closure
   638 000001FA FF7001                  	push SOB_CLOSURE_ENV(rax)
   639 000001FD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   640 00000200 FF7500                  	push qword[rbp]
   641 00000203 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
   642 00000208 48895D10                	mov qword[rbp + 8*2],rbx
   643 0000020C 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
   644 00000214 BF00000000              	mov rdi,0
   645 00000219 EB00                    	jmp .L_tc_recycle_frame_loop_0001
   646                                  .L_tc_recycle_frame_loop_0001:
   647 0000021B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
   648 0000021F 740F                    	je .L_tc_recycle_frame_done_0001
   649 00000221 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
   650 00000226 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
   651 0000022B 48FFC7                  	inc rdi
   652 0000022E EBEB                    	jmp .L_tc_recycle_frame_loop_0001
   653                                  .L_tc_recycle_frame_done_0001:
   654 00000230 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
   655 00000234 5D                      	pop rbp
   656 00000235 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   657 00000238 803804                  	cmp byte [rax], T_closure
   658 0000023B 0F851E110000            	jne L_error_non_closure
   659 00000241 FF7001                  	push SOB_CLOSURE_ENV(rax)
   660 00000244 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   661 00000247 FF7500                  	push qword[rbp]
   662 0000024A 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
   663 0000024F 48895D10                	mov qword[rbp + 8*2],rbx
   664 00000253 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
   665 0000025B BF00000000              	mov rdi,0
   666 00000260 EB00                    	jmp .L_tc_recycle_frame_loop_0002
   667                                  .L_tc_recycle_frame_loop_0002:
   668 00000262 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
   669 00000266 740F                    	je .L_tc_recycle_frame_done_0002
   670 00000268 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
   671 0000026D 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
   672 00000272 48FFC7                  	inc rdi
   673 00000275 EBEB                    	jmp .L_tc_recycle_frame_loop_0002
   674                                  .L_tc_recycle_frame_done_0002:
   675 00000277 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
   676 0000027B 5D                      	pop rbp
   677 0000027C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   678 0000027F C9                      	leave
   679 00000280 C21800                  	ret AND_KILL_FRAME(1)
   680                                  .L_lambda_simple_end_0003:	; new closure is in rax
   681 00000283 50                      	push rax
   682 00000284 6A01                    	push 1	; arg count
   683                                  	; preparing a tail-call
   684 00000286 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   685 0000028B E878110000              	call malloc
   686 00000290 50                      	push rax
   687 00000291 BF00000000              	mov rdi, 8 * 0	; new rib
   688 00000296 E86D110000              	call malloc
   689 0000029B 50                      	push rax
   690 0000029C BF08000000              	mov rdi, 8 * 1	; extended env
   691 000002A1 E862110000              	call malloc
   692 000002A6 488B7D10                	mov rdi, ENV
   693 000002AA BE00000000              	mov rsi, 0
   694 000002AF BA01000000              	mov rdx, 1
   695                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   696 000002B4 4883FE00                	cmp rsi, 0
   697 000002B8 7410                    	je .L_lambda_simple_env_end_0004
   698 000002BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   699 000002BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   700 000002C2 48FFC6                  	inc rsi
   701 000002C5 48FFC2                  	inc rdx
   702 000002C8 EBEA                    	jmp .L_lambda_simple_env_loop_0004
   703                                  .L_lambda_simple_env_end_0004:
   704 000002CA 5B                      	pop rbx
   705 000002CB BE00000000              	mov rsi, 0
   706                                  .L_lambda_simple_params_loop_0004:	; copy params
   707 000002D0 4883FE00                	cmp rsi, 0
   708 000002D4 740E                    	je .L_lambda_simple_params_end_0004
   709 000002D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   710 000002DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   711 000002DF 48FFC6                  	inc rsi
   712 000002E2 EBEC                    	jmp .L_lambda_simple_params_loop_0004
   713                                  .L_lambda_simple_params_end_0004:
   714 000002E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   715 000002E7 4889C3                  	mov rbx, rax
   716 000002EA 58                      	pop rax
   717 000002EB C60004                  	mov byte [rax], T_closure
   718 000002EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   719 000002F2 48C74009[FF020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
   720 000002FA E9D2020000              	jmp .L_lambda_simple_end_0004
   721                                  .L_lambda_simple_code_0004:	; lambda-simple body
   722 000002FF 48837C241001            	cmp qword [rsp + 8 * 2], 1
   723 00000305 740B                    	je .L_lambda_simple_arity_check_ok_0004
   724 00000307 FF742410                	push qword [rsp + 8 * 2]
   725 0000030B 6A01                    	push 1
   726 0000030D E9AF100000              	jmp L_error_incorrect_arity_simple
   727                                  .L_lambda_simple_arity_check_ok_0004:
   728 00000312 C8000000                	enter 0, 0
   729                                  	; preparing a tail-call
   730 00000316 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   731 0000031B E8E8100000              	call malloc
   732 00000320 50                      	push rax
   733 00000321 BF08000000              	mov rdi, 8 * 1	; new rib
   734 00000326 E8DD100000              	call malloc
   735 0000032B 50                      	push rax
   736 0000032C BF10000000              	mov rdi, 8 * 2	; extended env
   737 00000331 E8D2100000              	call malloc
   738 00000336 488B7D10                	mov rdi, ENV
   739 0000033A BE00000000              	mov rsi, 0
   740 0000033F BA01000000              	mov rdx, 1
   741                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
   742 00000344 4883FE01                	cmp rsi, 1
   743 00000348 7410                    	je .L_lambda_simple_env_end_0005
   744 0000034A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   745 0000034E 48890CD0                	mov qword [rax + 8 * rdx], rcx
   746 00000352 48FFC6                  	inc rsi
   747 00000355 48FFC2                  	inc rdx
   748 00000358 EBEA                    	jmp .L_lambda_simple_env_loop_0005
   749                                  .L_lambda_simple_env_end_0005:
   750 0000035A 5B                      	pop rbx
   751 0000035B BE00000000              	mov rsi, 0
   752                                  .L_lambda_simple_params_loop_0005:	; copy params
   753 00000360 4883FE01                	cmp rsi, 1
   754 00000364 740E                    	je .L_lambda_simple_params_end_0005
   755 00000366 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   756 0000036B 488914F3                	mov qword [rbx + 8 * rsi], rdx
   757 0000036F 48FFC6                  	inc rsi
   758 00000372 EBEC                    	jmp .L_lambda_simple_params_loop_0005
   759                                  .L_lambda_simple_params_end_0005:
   760 00000374 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   761 00000377 4889C3                  	mov rbx, rax
   762 0000037A 58                      	pop rax
   763 0000037B C60004                  	mov byte [rax], T_closure
   764 0000037E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   765 00000382 48C74009[8F030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
   766 0000038A E9F0010000              	jmp .L_lambda_simple_end_0005
   767                                  .L_lambda_simple_code_0005:	; lambda-simple body
   768 0000038F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   769 00000395 740B                    	je .L_lambda_simple_arity_check_ok_0005
   770 00000397 FF742410                	push qword [rsp + 8 * 2]
   771 0000039B 6A01                    	push 1
   772 0000039D E91F100000              	jmp L_error_incorrect_arity_simple
   773                                  .L_lambda_simple_arity_check_ok_0005:
   774 000003A2 C8000000                	enter 0, 0
   775 000003A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   776 000003AB E858100000              	call malloc
   777 000003B0 50                      	push rax
   778 000003B1 BF08000000              	mov rdi, 8 * 1	; new rib
   779 000003B6 E84D100000              	call malloc
   780 000003BB 50                      	push rax
   781 000003BC BF18000000              	mov rdi, 8 * 3	; extended env
   782 000003C1 E842100000              	call malloc
   783 000003C6 488B7D10                	mov rdi, ENV
   784 000003CA BE00000000              	mov rsi, 0
   785 000003CF BA01000000              	mov rdx, 1
   786                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
   787 000003D4 4883FE02                	cmp rsi, 2
   788 000003D8 7410                    	je .L_lambda_simple_env_end_0006
   789 000003DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   790 000003DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   791 000003E2 48FFC6                  	inc rsi
   792 000003E5 48FFC2                  	inc rdx
   793 000003E8 EBEA                    	jmp .L_lambda_simple_env_loop_0006
   794                                  .L_lambda_simple_env_end_0006:
   795 000003EA 5B                      	pop rbx
   796 000003EB BE00000000              	mov rsi, 0
   797                                  .L_lambda_simple_params_loop_0006:	; copy params
   798 000003F0 4883FE01                	cmp rsi, 1
   799 000003F4 740E                    	je .L_lambda_simple_params_end_0006
   800 000003F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   801 000003FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   802 000003FF 48FFC6                  	inc rsi
   803 00000402 EBEC                    	jmp .L_lambda_simple_params_loop_0006
   804                                  .L_lambda_simple_params_end_0006:
   805 00000404 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   806 00000407 4889C3                  	mov rbx, rax
   807 0000040A 58                      	pop rax
   808 0000040B C60004                  	mov byte [rax], T_closure
   809 0000040E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   810 00000412 48C74009[1F040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
   811 0000041A E95C010000              	jmp .L_lambda_simple_end_0006
   812                                  .L_lambda_simple_code_0006:	; lambda-simple body
   813 0000041F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   814 00000425 740B                    	je .L_lambda_simple_arity_check_ok_0006
   815 00000427 FF742410                	push qword [rsp + 8 * 2]
   816 0000042B 6A01                    	push 1
   817 0000042D E98F0F0000              	jmp L_error_incorrect_arity_simple
   818                                  .L_lambda_simple_arity_check_ok_0006:
   819 00000432 C8000000                	enter 0, 0
   820 00000436 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   821 0000043B E8C80F0000              	call malloc
   822 00000440 50                      	push rax
   823 00000441 BF08000000              	mov rdi, 8 * 1	; new rib
   824 00000446 E8BD0F0000              	call malloc
   825 0000044B 50                      	push rax
   826 0000044C BF20000000              	mov rdi, 8 * 4	; extended env
   827 00000451 E8B20F0000              	call malloc
   828 00000456 488B7D10                	mov rdi, ENV
   829 0000045A BE00000000              	mov rsi, 0
   830 0000045F BA01000000              	mov rdx, 1
   831                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
   832 00000464 4883FE03                	cmp rsi, 3
   833 00000468 7410                    	je .L_lambda_simple_env_end_0007
   834 0000046A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   835 0000046E 48890CD0                	mov qword [rax + 8 * rdx], rcx
   836 00000472 48FFC6                  	inc rsi
   837 00000475 48FFC2                  	inc rdx
   838 00000478 EBEA                    	jmp .L_lambda_simple_env_loop_0007
   839                                  .L_lambda_simple_env_end_0007:
   840 0000047A 5B                      	pop rbx
   841 0000047B BE00000000              	mov rsi, 0
   842                                  .L_lambda_simple_params_loop_0007:	; copy params
   843 00000480 4883FE01                	cmp rsi, 1
   844 00000484 740E                    	je .L_lambda_simple_params_end_0007
   845 00000486 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   846 0000048B 488914F3                	mov qword [rbx + 8 * rsi], rdx
   847 0000048F 48FFC6                  	inc rsi
   848 00000492 EBEC                    	jmp .L_lambda_simple_params_loop_0007
   849                                  .L_lambda_simple_params_end_0007:
   850 00000494 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   851 00000497 4889C3                  	mov rbx, rax
   852 0000049A 58                      	pop rax
   853 0000049B C60004                  	mov byte [rax], T_closure
   854 0000049E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   855 000004A2 48C74009[AF040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
   856 000004AA E9C8000000              	jmp .L_lambda_simple_end_0007
   857                                  .L_lambda_simple_code_0007:	; lambda-simple body
   858 000004AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
   859 000004B5 740B                    	je .L_lambda_simple_arity_check_ok_0007
   860 000004B7 FF742410                	push qword [rsp + 8 * 2]
   861 000004BB 6A01                    	push 1
   862 000004BD E9FF0E0000              	jmp L_error_incorrect_arity_simple
   863                                  .L_lambda_simple_arity_check_ok_0007:
   864 000004C2 C8000000                	enter 0, 0
   865                                  	; preparing a tail-call
   866 000004C6 488B4510                	mov rax, ENV
   867 000004CA 488B4008                	mov rax, qword [rax + 8 * 1]
   868 000004CE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
   869 000004D1 50                      	push rax
   870 000004D2 6A01                    	push 1	; arg count
   871                                  	; preparing a tail-call
   872 000004D4 488B4510                	mov rax, ENV
   873 000004D8 488B00                  	mov rax, qword [rax + 8 * 0]
   874 000004DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var y
   875 000004DE 50                      	push rax
   876 000004DF 6A01                    	push 1	; arg count
   877 000004E1 488B4520                	mov rax, PARAM(0)	; param z
   878 000004E5 803804                  	cmp byte [rax], T_closure
   879 000004E8 0F85710E0000            	jne L_error_non_closure
   880 000004EE FF7001                  	push SOB_CLOSURE_ENV(rax)
   881 000004F1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   882 000004F4 FF7500                  	push qword[rbp]
   883 000004F7 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
   884 000004FC 48895D10                	mov qword[rbp + 8*2],rbx
   885 00000500 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
   886 00000508 BF00000000              	mov rdi,0
   887 0000050D EB00                    	jmp .L_tc_recycle_frame_loop_0003
   888                                  .L_tc_recycle_frame_loop_0003:
   889 0000050F 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
   890 00000513 740F                    	je .L_tc_recycle_frame_done_0003
   891 00000515 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
   892 0000051A 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
   893 0000051F 48FFC7                  	inc rdi
   894 00000522 EBEB                    	jmp .L_tc_recycle_frame_loop_0003
   895                                  .L_tc_recycle_frame_done_0003:
   896 00000524 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
   897 00000528 5D                      	pop rbp
   898 00000529 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   899 0000052C 803804                  	cmp byte [rax], T_closure
   900 0000052F 0F852A0E0000            	jne L_error_non_closure
   901 00000535 FF7001                  	push SOB_CLOSURE_ENV(rax)
   902 00000538 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   903 0000053B FF7500                  	push qword[rbp]
   904 0000053E 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
   905 00000543 48895D10                	mov qword[rbp + 8*2],rbx
   906 00000547 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
   907 0000054F BF00000000              	mov rdi,0
   908 00000554 EB00                    	jmp .L_tc_recycle_frame_loop_0004
   909                                  .L_tc_recycle_frame_loop_0004:
   910 00000556 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
   911 0000055A 740F                    	je .L_tc_recycle_frame_done_0004
   912 0000055C 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
   913 00000561 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
   914 00000566 48FFC7                  	inc rdi
   915 00000569 EBEB                    	jmp .L_tc_recycle_frame_loop_0004
   916                                  .L_tc_recycle_frame_done_0004:
   917 0000056B 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
   918 0000056F 5D                      	pop rbp
   919 00000570 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   920 00000573 C9                      	leave
   921 00000574 C21800                  	ret AND_KILL_FRAME(1)
   922                                  .L_lambda_simple_end_0007:	; new closure is in rax
   923 00000577 C9                      	leave
   924 00000578 C21800                  	ret AND_KILL_FRAME(1)
   925                                  .L_lambda_simple_end_0006:	; new closure is in rax
   926 0000057B C9                      	leave
   927 0000057C C21800                  	ret AND_KILL_FRAME(1)
   928                                  .L_lambda_simple_end_0005:	; new closure is in rax
   929 0000057F 50                      	push rax
   930 00000580 6A01                    	push 1	; arg count
   931 00000582 488B4520                	mov rax, PARAM(0)	; param p
   932 00000586 803804                  	cmp byte [rax], T_closure
   933 00000589 0F85D00D0000            	jne L_error_non_closure
   934 0000058F FF7001                  	push SOB_CLOSURE_ENV(rax)
   935 00000592 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
   936 00000595 FF7500                  	push qword[rbp]
   937 00000598 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
   938 0000059D 48895D10                	mov qword[rbp + 8*2],rbx
   939 000005A1 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
   940 000005A9 BF00000000              	mov rdi,0
   941 000005AE EB00                    	jmp .L_tc_recycle_frame_loop_0005
   942                                  .L_tc_recycle_frame_loop_0005:
   943 000005B0 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
   944 000005B4 740F                    	je .L_tc_recycle_frame_done_0005
   945 000005B6 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
   946 000005BB 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
   947 000005C0 48FFC7                  	inc rdi
   948 000005C3 EBEB                    	jmp .L_tc_recycle_frame_loop_0005
   949                                  .L_tc_recycle_frame_done_0005:
   950 000005C5 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
   951 000005C9 5D                      	pop rbp
   952 000005CA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   953 000005CD C9                      	leave
   954 000005CE C21800                  	ret AND_KILL_FRAME(1)
   955                                  .L_lambda_simple_end_0004:	; new closure is in rax
   956 000005D1 50                      	push rax
   957 000005D2 6A01                    	push 1	; arg count
   958                                  	; preparing a tail-call
   959 000005D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   960 000005D9 E82A0E0000              	call malloc
   961 000005DE 50                      	push rax
   962 000005DF BF00000000              	mov rdi, 8 * 0	; new rib
   963 000005E4 E81F0E0000              	call malloc
   964 000005E9 50                      	push rax
   965 000005EA BF08000000              	mov rdi, 8 * 1	; extended env
   966 000005EF E8140E0000              	call malloc
   967 000005F4 488B7D10                	mov rdi, ENV
   968 000005F8 BE00000000              	mov rsi, 0
   969 000005FD BA01000000              	mov rdx, 1
   970                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
   971 00000602 4883FE00                	cmp rsi, 0
   972 00000606 7410                    	je .L_lambda_simple_env_end_0008
   973 00000608 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   974 0000060C 48890CD0                	mov qword [rax + 8 * rdx], rcx
   975 00000610 48FFC6                  	inc rsi
   976 00000613 48FFC2                  	inc rdx
   977 00000616 EBEA                    	jmp .L_lambda_simple_env_loop_0008
   978                                  .L_lambda_simple_env_end_0008:
   979 00000618 5B                      	pop rbx
   980 00000619 BE00000000              	mov rsi, 0
   981                                  .L_lambda_simple_params_loop_0008:	; copy params
   982 0000061E 4883FE00                	cmp rsi, 0
   983 00000622 740E                    	je .L_lambda_simple_params_end_0008
   984 00000624 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   985 00000629 488914F3                	mov qword [rbx + 8 * rsi], rdx
   986 0000062D 48FFC6                  	inc rsi
   987 00000630 EBEC                    	jmp .L_lambda_simple_params_loop_0008
   988                                  .L_lambda_simple_params_end_0008:
   989 00000632 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   990 00000635 4889C3                  	mov rbx, rax
   991 00000638 58                      	pop rax
   992 00000639 C60004                  	mov byte [rax], T_closure
   993 0000063C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   994 00000640 48C74009[4D060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
   995 00000648 E923010000              	jmp .L_lambda_simple_end_0008
   996                                  .L_lambda_simple_code_0008:	; lambda-simple body
   997 0000064D 48837C241001            	cmp qword [rsp + 8 * 2], 1
   998 00000653 740B                    	je .L_lambda_simple_arity_check_ok_0008
   999 00000655 FF742410                	push qword [rsp + 8 * 2]
  1000 00000659 6A01                    	push 1
  1001 0000065B E9610D0000              	jmp L_error_incorrect_arity_simple
  1002                                  .L_lambda_simple_arity_check_ok_0008:
  1003 00000660 C8000000                	enter 0, 0
  1004 00000664 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1005 00000669 E89A0D0000              	call malloc
  1006 0000066E 50                      	push rax
  1007 0000066F BF08000000              	mov rdi, 8 * 1	; new rib
  1008 00000674 E88F0D0000              	call malloc
  1009 00000679 50                      	push rax
  1010 0000067A BF10000000              	mov rdi, 8 * 2	; extended env
  1011 0000067F E8840D0000              	call malloc
  1012 00000684 488B7D10                	mov rdi, ENV
  1013 00000688 BE00000000              	mov rsi, 0
  1014 0000068D BA01000000              	mov rdx, 1
  1015                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1016 00000692 4883FE01                	cmp rsi, 1
  1017 00000696 7410                    	je .L_lambda_simple_env_end_0009
  1018 00000698 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1019 0000069C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1020 000006A0 48FFC6                  	inc rsi
  1021 000006A3 48FFC2                  	inc rdx
  1022 000006A6 EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1023                                  .L_lambda_simple_env_end_0009:
  1024 000006A8 5B                      	pop rbx
  1025 000006A9 BE00000000              	mov rsi, 0
  1026                                  .L_lambda_simple_params_loop_0009:	; copy params
  1027 000006AE 4883FE01                	cmp rsi, 1
  1028 000006B2 740E                    	je .L_lambda_simple_params_end_0009
  1029 000006B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1030 000006B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1031 000006BD 48FFC6                  	inc rsi
  1032 000006C0 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1033                                  .L_lambda_simple_params_end_0009:
  1034 000006C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1035 000006C5 4889C3                  	mov rbx, rax
  1036 000006C8 58                      	pop rax
  1037 000006C9 C60004                  	mov byte [rax], T_closure
  1038 000006CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1039 000006D0 48C74009[DD060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1040 000006D8 E98F000000              	jmp .L_lambda_simple_end_0009
  1041                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1042 000006DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1043 000006E3 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1044 000006E5 FF742410                	push qword [rsp + 8 * 2]
  1045 000006E9 6A01                    	push 1
  1046 000006EB E9D10C0000              	jmp L_error_incorrect_arity_simple
  1047                                  .L_lambda_simple_arity_check_ok_0009:
  1048 000006F0 C8000000                	enter 0, 0
  1049                                  	; preparing a tail-call
  1050                                  	; preparing a non-tail-call
  1051 000006F4 488B4520                	mov rax, PARAM(0)	; param y
  1052 000006F8 50                      	push rax
  1053 000006F9 6A01                    	push 1	; arg count
  1054 000006FB 488B4510                	mov rax, ENV
  1055 000006FF 488B00                  	mov rax, qword [rax + 8 * 0]
  1056 00000702 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1057 00000705 803804                  	cmp byte [rax], T_closure
  1058 00000708 0F85510C0000            	jne L_error_non_closure
  1059 0000070E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1060 00000711 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1061 00000714 50                      	push rax
  1062 00000715 6A01                    	push 1	; arg count
  1063 00000717 488B4510                	mov rax, ENV
  1064 0000071B 488B00                  	mov rax, qword [rax + 8 * 0]
  1065 0000071E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1066 00000721 803804                  	cmp byte [rax], T_closure
  1067 00000724 0F85350C0000            	jne L_error_non_closure
  1068 0000072A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1069 0000072D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1070 00000730 FF7500                  	push qword[rbp]
  1071 00000733 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1072 00000738 48895D10                	mov qword[rbp + 8*2],rbx
  1073 0000073C 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1074 00000744 BF00000000              	mov rdi,0
  1075 00000749 EB00                    	jmp .L_tc_recycle_frame_loop_0006
  1076                                  .L_tc_recycle_frame_loop_0006:
  1077 0000074B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1078 0000074F 740F                    	je .L_tc_recycle_frame_done_0006
  1079 00000751 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1080 00000756 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1081 0000075B 48FFC7                  	inc rdi
  1082 0000075E EBEB                    	jmp .L_tc_recycle_frame_loop_0006
  1083                                  .L_tc_recycle_frame_done_0006:
  1084 00000760 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1085 00000764 5D                      	pop rbp
  1086 00000765 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1087 00000768 C9                      	leave
  1088 00000769 C21800                  	ret AND_KILL_FRAME(1)
  1089                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1090 0000076C C9                      	leave
  1091 0000076D C21800                  	ret AND_KILL_FRAME(1)
  1092                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1093 00000770 50                      	push rax
  1094 00000771 6A01                    	push 1	; arg count
  1095 00000773 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1096 00000778 E88B0C0000              	call malloc
  1097 0000077D 50                      	push rax
  1098 0000077E BF00000000              	mov rdi, 8 * 0	; new rib
  1099 00000783 E8800C0000              	call malloc
  1100 00000788 50                      	push rax
  1101 00000789 BF08000000              	mov rdi, 8 * 1	; extended env
  1102 0000078E E8750C0000              	call malloc
  1103 00000793 488B7D10                	mov rdi, ENV
  1104 00000797 BE00000000              	mov rsi, 0
  1105 0000079C BA01000000              	mov rdx, 1
  1106                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1107 000007A1 4883FE00                	cmp rsi, 0
  1108 000007A5 7410                    	je .L_lambda_simple_env_end_000a
  1109 000007A7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1110 000007AB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1111 000007AF 48FFC6                  	inc rsi
  1112 000007B2 48FFC2                  	inc rdx
  1113 000007B5 EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1114                                  .L_lambda_simple_env_end_000a:
  1115 000007B7 5B                      	pop rbx
  1116 000007B8 BE00000000              	mov rsi, 0
  1117                                  .L_lambda_simple_params_loop_000a:	; copy params
  1118 000007BD 4883FE00                	cmp rsi, 0
  1119 000007C1 740E                    	je .L_lambda_simple_params_end_000a
  1120 000007C3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1121 000007C8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1122 000007CC 48FFC6                  	inc rsi
  1123 000007CF EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1124                                  .L_lambda_simple_params_end_000a:
  1125 000007D1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1126 000007D4 4889C3                  	mov rbx, rax
  1127 000007D7 58                      	pop rax
  1128 000007D8 C60004                  	mov byte [rax], T_closure
  1129 000007DB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1130 000007DF 48C74009[EC070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1131 000007E7 E983000000              	jmp .L_lambda_simple_end_000a
  1132                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1133 000007EC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1134 000007F2 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1135 000007F4 FF742410                	push qword [rsp + 8 * 2]
  1136 000007F8 6A01                    	push 1
  1137 000007FA E9C20B0000              	jmp L_error_incorrect_arity_simple
  1138                                  .L_lambda_simple_arity_check_ok_000a:
  1139 000007FF C8000000                	enter 0, 0
  1140                                  	; preparing a tail-call
  1141                                  	; preparing a non-tail-call
  1142 00000803 488B4520                	mov rax, PARAM(0)	; param x
  1143 00000807 50                      	push rax
  1144 00000808 6A01                    	push 1	; arg count
  1145 0000080A 488B4520                	mov rax, PARAM(0)	; param x
  1146 0000080E 803804                  	cmp byte [rax], T_closure
  1147 00000811 0F85480B0000            	jne L_error_non_closure
  1148 00000817 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1149 0000081A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1150 0000081D 50                      	push rax
  1151 0000081E 6A01                    	push 1	; arg count
  1152 00000820 488B4520                	mov rax, PARAM(0)	; param x
  1153 00000824 803804                  	cmp byte [rax], T_closure
  1154 00000827 0F85320B0000            	jne L_error_non_closure
  1155 0000082D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1156 00000830 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1157 00000833 FF7500                  	push qword[rbp]
  1158 00000836 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1159 0000083B 48895D10                	mov qword[rbp + 8*2],rbx
  1160 0000083F 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1161 00000847 BF00000000              	mov rdi,0
  1162 0000084C EB00                    	jmp .L_tc_recycle_frame_loop_0007
  1163                                  .L_tc_recycle_frame_loop_0007:
  1164 0000084E 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1165 00000852 740F                    	je .L_tc_recycle_frame_done_0007
  1166 00000854 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1167 00000859 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1168 0000085E 48FFC7                  	inc rdi
  1169 00000861 EBEB                    	jmp .L_tc_recycle_frame_loop_0007
  1170                                  .L_tc_recycle_frame_done_0007:
  1171 00000863 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1172 00000867 5D                      	pop rbp
  1173 00000868 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1174 0000086B C9                      	leave
  1175 0000086C C21800                  	ret AND_KILL_FRAME(1)
  1176                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1177 0000086F 803804                  	cmp byte [rax], T_closure
  1178 00000872 0F85E70A0000            	jne L_error_non_closure
  1179 00000878 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1180 0000087B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1181 0000087E FF7500                  	push qword[rbp]
  1182 00000881 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1183 00000886 48895D10                	mov qword[rbp + 8*2],rbx
  1184 0000088A 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1185 00000892 BF00000000              	mov rdi,0
  1186 00000897 EB00                    	jmp .L_tc_recycle_frame_loop_0008
  1187                                  .L_tc_recycle_frame_loop_0008:
  1188 00000899 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1189 0000089D 740F                    	je .L_tc_recycle_frame_done_0008
  1190 0000089F 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1191 000008A4 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1192 000008A9 48FFC7                  	inc rdi
  1193 000008AC EBEB                    	jmp .L_tc_recycle_frame_loop_0008
  1194                                  .L_tc_recycle_frame_done_0008:
  1195 000008AE 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1196 000008B2 5D                      	pop rbp
  1197 000008B3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1198 000008B6 803804                  	cmp byte [rax], T_closure
  1199 000008B9 0F85A00A0000            	jne L_error_non_closure
  1200 000008BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1201 000008C2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1202 000008C5 FF7500                  	push qword[rbp]
  1203 000008C8 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1204 000008CD 48895D10                	mov qword[rbp + 8*2],rbx
  1205 000008D1 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1206 000008D9 BF00000000              	mov rdi,0
  1207 000008DE EB00                    	jmp .L_tc_recycle_frame_loop_0009
  1208                                  .L_tc_recycle_frame_loop_0009:
  1209 000008E0 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1210 000008E4 740F                    	je .L_tc_recycle_frame_done_0009
  1211 000008E6 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1212 000008EB 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1213 000008F0 48FFC7                  	inc rdi
  1214 000008F3 EBEB                    	jmp .L_tc_recycle_frame_loop_0009
  1215                                  .L_tc_recycle_frame_done_0009:
  1216 000008F5 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1217 000008F9 5D                      	pop rbp
  1218 000008FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1219 000008FD 803804                  	cmp byte [rax], T_closure
  1220 00000900 0F85590A0000            	jne L_error_non_closure
  1221 00000906 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1222 00000909 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1223 0000090C FF7500                  	push qword[rbp]
  1224 0000090F 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1225 00000914 48895D10                	mov qword[rbp + 8*2],rbx
  1226 00000918 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1227 00000920 BF00000000              	mov rdi,0
  1228 00000925 EB00                    	jmp .L_tc_recycle_frame_loop_000a
  1229                                  .L_tc_recycle_frame_loop_000a:
  1230 00000927 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1231 0000092B 740F                    	je .L_tc_recycle_frame_done_000a
  1232 0000092D 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1233 00000932 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1234 00000937 48FFC7                  	inc rdi
  1235 0000093A EBEB                    	jmp .L_tc_recycle_frame_loop_000a
  1236                                  .L_tc_recycle_frame_done_000a:
  1237 0000093C 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1238 00000940 5D                      	pop rbp
  1239 00000941 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1240 00000944 803804                  	cmp byte [rax], T_closure
  1241 00000947 0F85120A0000            	jne L_error_non_closure
  1242 0000094D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1243 00000950 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1244                                  
  1245 00000953 4889C7                  	mov rdi, rax
  1246 00000956 E8020D0000              	call print_sexpr_if_not_void
  1247                                  	; preparing a non-tail-call
  1248 0000095B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1249 00000960 E8A30A0000              	call malloc
  1250 00000965 50                      	push rax
  1251 00000966 BF00000000              	mov rdi, 8 * 0	; new rib
  1252 0000096B E8980A0000              	call malloc
  1253 00000970 50                      	push rax
  1254 00000971 BF08000000              	mov rdi, 8 * 1	; extended env
  1255 00000976 E88D0A0000              	call malloc
  1256 0000097B 488B7D10                	mov rdi, ENV
  1257 0000097F BE00000000              	mov rsi, 0
  1258 00000984 BA01000000              	mov rdx, 1
  1259                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1260 00000989 4883FE00                	cmp rsi, 0
  1261 0000098D 7410                    	je .L_lambda_simple_env_end_000b
  1262 0000098F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1263 00000993 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1264 00000997 48FFC6                  	inc rsi
  1265 0000099A 48FFC2                  	inc rdx
  1266 0000099D EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1267                                  .L_lambda_simple_env_end_000b:
  1268 0000099F 5B                      	pop rbx
  1269 000009A0 BE00000000              	mov rsi, 0
  1270                                  .L_lambda_simple_params_loop_000b:	; copy params
  1271 000009A5 4883FE00                	cmp rsi, 0
  1272 000009A9 740E                    	je .L_lambda_simple_params_end_000b
  1273 000009AB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1274 000009B0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1275 000009B4 48FFC6                  	inc rsi
  1276 000009B7 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1277                                  .L_lambda_simple_params_end_000b:
  1278 000009B9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1279 000009BC 4889C3                  	mov rbx, rax
  1280 000009BF 58                      	pop rax
  1281 000009C0 C60004                  	mov byte [rax], T_closure
  1282 000009C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1283 000009C7 48C74009[D4090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1284 000009CF E9B6000000              	jmp .L_lambda_simple_end_000b
  1285                                  .L_lambda_simple_code_000b:	; lambda-simple body
  1286 000009D4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1287 000009DA 740B                    	je .L_lambda_simple_arity_check_ok_000b
  1288 000009DC FF742410                	push qword [rsp + 8 * 2]
  1289 000009E0 6A01                    	push 1
  1290 000009E2 E9DA090000              	jmp L_error_incorrect_arity_simple
  1291                                  .L_lambda_simple_arity_check_ok_000b:
  1292 000009E7 C8000000                	enter 0, 0
  1293 000009EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1294 000009F0 E8130A0000              	call malloc
  1295 000009F5 50                      	push rax
  1296 000009F6 BF08000000              	mov rdi, 8 * 1	; new rib
  1297 000009FB E8080A0000              	call malloc
  1298 00000A00 50                      	push rax
  1299 00000A01 BF10000000              	mov rdi, 8 * 2	; extended env
  1300 00000A06 E8FD090000              	call malloc
  1301 00000A0B 488B7D10                	mov rdi, ENV
  1302 00000A0F BE00000000              	mov rsi, 0
  1303 00000A14 BA01000000              	mov rdx, 1
  1304                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  1305 00000A19 4883FE01                	cmp rsi, 1
  1306 00000A1D 7410                    	je .L_lambda_simple_env_end_000c
  1307 00000A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1308 00000A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1309 00000A27 48FFC6                  	inc rsi
  1310 00000A2A 48FFC2                  	inc rdx
  1311 00000A2D EBEA                    	jmp .L_lambda_simple_env_loop_000c
  1312                                  .L_lambda_simple_env_end_000c:
  1313 00000A2F 5B                      	pop rbx
  1314 00000A30 BE00000000              	mov rsi, 0
  1315                                  .L_lambda_simple_params_loop_000c:	; copy params
  1316 00000A35 4883FE01                	cmp rsi, 1
  1317 00000A39 740E                    	je .L_lambda_simple_params_end_000c
  1318 00000A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1319 00000A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1320 00000A44 48FFC6                  	inc rsi
  1321 00000A47 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  1322                                  .L_lambda_simple_params_end_000c:
  1323 00000A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1324 00000A4C 4889C3                  	mov rbx, rax
  1325 00000A4F 58                      	pop rax
  1326 00000A50 C60004                  	mov byte [rax], T_closure
  1327 00000A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1328 00000A57 48C74009[610A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  1329 00000A5F EB25                    	jmp .L_lambda_simple_end_000c
  1330                                  .L_lambda_simple_code_000c:	; lambda-simple body
  1331 00000A61 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1332 00000A67 740B                    	je .L_lambda_simple_arity_check_ok_000c
  1333 00000A69 FF742410                	push qword [rsp + 8 * 2]
  1334 00000A6D 6A01                    	push 1
  1335 00000A6F E94D090000              	jmp L_error_incorrect_arity_simple
  1336                                  .L_lambda_simple_arity_check_ok_000c:
  1337 00000A74 C8000000                	enter 0, 0
  1338 00000A78 488B4510                	mov rax, ENV
  1339 00000A7C 488B00                  	mov rax, qword [rax + 8 * 0]
  1340 00000A7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1341 00000A82 C9                      	leave
  1342 00000A83 C21800                  	ret AND_KILL_FRAME(1)
  1343                                  .L_lambda_simple_end_000c:	; new closure is in rax
  1344 00000A86 C9                      	leave
  1345 00000A87 C21800                  	ret AND_KILL_FRAME(1)
  1346                                  .L_lambda_simple_end_000b:	; new closure is in rax
  1347 00000A8A 50                      	push rax
  1348 00000A8B 6A01                    	push 1	; arg count
  1349                                  	; preparing a tail-call
  1350 00000A8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1351 00000A92 E871090000              	call malloc
  1352 00000A97 50                      	push rax
  1353 00000A98 BF00000000              	mov rdi, 8 * 0	; new rib
  1354 00000A9D E866090000              	call malloc
  1355 00000AA2 50                      	push rax
  1356 00000AA3 BF08000000              	mov rdi, 8 * 1	; extended env
  1357 00000AA8 E85B090000              	call malloc
  1358 00000AAD 488B7D10                	mov rdi, ENV
  1359 00000AB1 BE00000000              	mov rsi, 0
  1360 00000AB6 BA01000000              	mov rdx, 1
  1361                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  1362 00000ABB 4883FE00                	cmp rsi, 0
  1363 00000ABF 7410                    	je .L_lambda_simple_env_end_000d
  1364 00000AC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1365 00000AC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1366 00000AC9 48FFC6                  	inc rsi
  1367 00000ACC 48FFC2                  	inc rdx
  1368 00000ACF EBEA                    	jmp .L_lambda_simple_env_loop_000d
  1369                                  .L_lambda_simple_env_end_000d:
  1370 00000AD1 5B                      	pop rbx
  1371 00000AD2 BE00000000              	mov rsi, 0
  1372                                  .L_lambda_simple_params_loop_000d:	; copy params
  1373 00000AD7 4883FE00                	cmp rsi, 0
  1374 00000ADB 740E                    	je .L_lambda_simple_params_end_000d
  1375 00000ADD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1376 00000AE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1377 00000AE6 48FFC6                  	inc rsi
  1378 00000AE9 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  1379                                  .L_lambda_simple_params_end_000d:
  1380 00000AEB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1381 00000AEE 4889C3                  	mov rbx, rax
  1382 00000AF1 58                      	pop rax
  1383 00000AF2 C60004                  	mov byte [rax], T_closure
  1384 00000AF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1385 00000AF9 48C74009[060B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  1386 00000B01 E9C7000000              	jmp .L_lambda_simple_end_000d
  1387                                  .L_lambda_simple_code_000d:	; lambda-simple body
  1388 00000B06 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1389 00000B0C 740B                    	je .L_lambda_simple_arity_check_ok_000d
  1390 00000B0E FF742410                	push qword [rsp + 8 * 2]
  1391 00000B12 6A01                    	push 1
  1392 00000B14 E9A8080000              	jmp L_error_incorrect_arity_simple
  1393                                  .L_lambda_simple_arity_check_ok_000d:
  1394 00000B19 C8000000                	enter 0, 0
  1395                                  	; preparing a tail-call
  1396 00000B1D 48B8-                   	mov rax, L_constants + 2
  1396 00000B1F [0200000000000000] 
  1397 00000B27 50                      	push rax
  1398 00000B28 6A01                    	push 1	; arg count
  1399                                  	; preparing a tail-call
  1400 00000B2A 48B8-                   	mov rax, L_constants + 3
  1400 00000B2C [0300000000000000] 
  1401 00000B34 50                      	push rax
  1402 00000B35 6A01                    	push 1	; arg count
  1403 00000B37 488B4520                	mov rax, PARAM(0)	; param x
  1404 00000B3B 803804                  	cmp byte [rax], T_closure
  1405 00000B3E 0F851B080000            	jne L_error_non_closure
  1406 00000B44 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1407 00000B47 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1408 00000B4A FF7500                  	push qword[rbp]
  1409 00000B4D 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1410 00000B52 48895D10                	mov qword[rbp + 8*2],rbx
  1411 00000B56 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1412 00000B5E BF00000000              	mov rdi,0
  1413 00000B63 EB00                    	jmp .L_tc_recycle_frame_loop_000b
  1414                                  .L_tc_recycle_frame_loop_000b:
  1415 00000B65 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1416 00000B69 740F                    	je .L_tc_recycle_frame_done_000b
  1417 00000B6B 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1418 00000B70 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1419 00000B75 48FFC7                  	inc rdi
  1420 00000B78 EBEB                    	jmp .L_tc_recycle_frame_loop_000b
  1421                                  .L_tc_recycle_frame_done_000b:
  1422 00000B7A 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1423 00000B7E 5D                      	pop rbp
  1424 00000B7F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1425 00000B82 803804                  	cmp byte [rax], T_closure
  1426 00000B85 0F85D4070000            	jne L_error_non_closure
  1427 00000B8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1428 00000B8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1429 00000B91 FF7500                  	push qword[rbp]
  1430 00000B94 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1431 00000B99 48895D10                	mov qword[rbp + 8*2],rbx
  1432 00000B9D 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1433 00000BA5 BF00000000              	mov rdi,0
  1434 00000BAA EB00                    	jmp .L_tc_recycle_frame_loop_000c
  1435                                  .L_tc_recycle_frame_loop_000c:
  1436 00000BAC 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1437 00000BB0 740F                    	je .L_tc_recycle_frame_done_000c
  1438 00000BB2 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1439 00000BB7 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1440 00000BBC 48FFC7                  	inc rdi
  1441 00000BBF EBEB                    	jmp .L_tc_recycle_frame_loop_000c
  1442                                  .L_tc_recycle_frame_done_000c:
  1443 00000BC1 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1444 00000BC5 5D                      	pop rbp
  1445 00000BC6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1446 00000BC9 C9                      	leave
  1447 00000BCA C21800                  	ret AND_KILL_FRAME(1)
  1448                                  .L_lambda_simple_end_000d:	; new closure is in rax
  1449 00000BCD 50                      	push rax
  1450 00000BCE 6A01                    	push 1	; arg count
  1451                                  	; preparing a tail-call
  1452 00000BD0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1453 00000BD5 E82E080000              	call malloc
  1454 00000BDA 50                      	push rax
  1455 00000BDB BF00000000              	mov rdi, 8 * 0	; new rib
  1456 00000BE0 E823080000              	call malloc
  1457 00000BE5 50                      	push rax
  1458 00000BE6 BF08000000              	mov rdi, 8 * 1	; extended env
  1459 00000BEB E818080000              	call malloc
  1460 00000BF0 488B7D10                	mov rdi, ENV
  1461 00000BF4 BE00000000              	mov rsi, 0
  1462 00000BF9 BA01000000              	mov rdx, 1
  1463                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  1464 00000BFE 4883FE00                	cmp rsi, 0
  1465 00000C02 7410                    	je .L_lambda_simple_env_end_000e
  1466 00000C04 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1467 00000C08 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1468 00000C0C 48FFC6                  	inc rsi
  1469 00000C0F 48FFC2                  	inc rdx
  1470 00000C12 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  1471                                  .L_lambda_simple_env_end_000e:
  1472 00000C14 5B                      	pop rbx
  1473 00000C15 BE00000000              	mov rsi, 0
  1474                                  .L_lambda_simple_params_loop_000e:	; copy params
  1475 00000C1A 4883FE00                	cmp rsi, 0
  1476 00000C1E 740E                    	je .L_lambda_simple_params_end_000e
  1477 00000C20 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1478 00000C25 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1479 00000C29 48FFC6                  	inc rsi
  1480 00000C2C EBEC                    	jmp .L_lambda_simple_params_loop_000e
  1481                                  .L_lambda_simple_params_end_000e:
  1482 00000C2E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1483 00000C31 4889C3                  	mov rbx, rax
  1484 00000C34 58                      	pop rax
  1485 00000C35 C60004                  	mov byte [rax], T_closure
  1486 00000C38 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1487 00000C3C 48C74009[490C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  1488 00000C44 E9D2020000              	jmp .L_lambda_simple_end_000e
  1489                                  .L_lambda_simple_code_000e:	; lambda-simple body
  1490 00000C49 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1491 00000C4F 740B                    	je .L_lambda_simple_arity_check_ok_000e
  1492 00000C51 FF742410                	push qword [rsp + 8 * 2]
  1493 00000C55 6A01                    	push 1
  1494 00000C57 E965070000              	jmp L_error_incorrect_arity_simple
  1495                                  .L_lambda_simple_arity_check_ok_000e:
  1496 00000C5C C8000000                	enter 0, 0
  1497                                  	; preparing a tail-call
  1498 00000C60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1499 00000C65 E89E070000              	call malloc
  1500 00000C6A 50                      	push rax
  1501 00000C6B BF08000000              	mov rdi, 8 * 1	; new rib
  1502 00000C70 E893070000              	call malloc
  1503 00000C75 50                      	push rax
  1504 00000C76 BF10000000              	mov rdi, 8 * 2	; extended env
  1505 00000C7B E888070000              	call malloc
  1506 00000C80 488B7D10                	mov rdi, ENV
  1507 00000C84 BE00000000              	mov rsi, 0
  1508 00000C89 BA01000000              	mov rdx, 1
  1509                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  1510 00000C8E 4883FE01                	cmp rsi, 1
  1511 00000C92 7410                    	je .L_lambda_simple_env_end_000f
  1512 00000C94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1513 00000C98 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1514 00000C9C 48FFC6                  	inc rsi
  1515 00000C9F 48FFC2                  	inc rdx
  1516 00000CA2 EBEA                    	jmp .L_lambda_simple_env_loop_000f
  1517                                  .L_lambda_simple_env_end_000f:
  1518 00000CA4 5B                      	pop rbx
  1519 00000CA5 BE00000000              	mov rsi, 0
  1520                                  .L_lambda_simple_params_loop_000f:	; copy params
  1521 00000CAA 4883FE01                	cmp rsi, 1
  1522 00000CAE 740E                    	je .L_lambda_simple_params_end_000f
  1523 00000CB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1524 00000CB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1525 00000CB9 48FFC6                  	inc rsi
  1526 00000CBC EBEC                    	jmp .L_lambda_simple_params_loop_000f
  1527                                  .L_lambda_simple_params_end_000f:
  1528 00000CBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1529 00000CC1 4889C3                  	mov rbx, rax
  1530 00000CC4 58                      	pop rax
  1531 00000CC5 C60004                  	mov byte [rax], T_closure
  1532 00000CC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1533 00000CCC 48C74009[D90C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  1534 00000CD4 E9F0010000              	jmp .L_lambda_simple_end_000f
  1535                                  .L_lambda_simple_code_000f:	; lambda-simple body
  1536 00000CD9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1537 00000CDF 740B                    	je .L_lambda_simple_arity_check_ok_000f
  1538 00000CE1 FF742410                	push qword [rsp + 8 * 2]
  1539 00000CE5 6A01                    	push 1
  1540 00000CE7 E9D5060000              	jmp L_error_incorrect_arity_simple
  1541                                  .L_lambda_simple_arity_check_ok_000f:
  1542 00000CEC C8000000                	enter 0, 0
  1543 00000CF0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1544 00000CF5 E80E070000              	call malloc
  1545 00000CFA 50                      	push rax
  1546 00000CFB BF08000000              	mov rdi, 8 * 1	; new rib
  1547 00000D00 E803070000              	call malloc
  1548 00000D05 50                      	push rax
  1549 00000D06 BF18000000              	mov rdi, 8 * 3	; extended env
  1550 00000D0B E8F8060000              	call malloc
  1551 00000D10 488B7D10                	mov rdi, ENV
  1552 00000D14 BE00000000              	mov rsi, 0
  1553 00000D19 BA01000000              	mov rdx, 1
  1554                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  1555 00000D1E 4883FE02                	cmp rsi, 2
  1556 00000D22 7410                    	je .L_lambda_simple_env_end_0010
  1557 00000D24 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1558 00000D28 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1559 00000D2C 48FFC6                  	inc rsi
  1560 00000D2F 48FFC2                  	inc rdx
  1561 00000D32 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  1562                                  .L_lambda_simple_env_end_0010:
  1563 00000D34 5B                      	pop rbx
  1564 00000D35 BE00000000              	mov rsi, 0
  1565                                  .L_lambda_simple_params_loop_0010:	; copy params
  1566 00000D3A 4883FE01                	cmp rsi, 1
  1567 00000D3E 740E                    	je .L_lambda_simple_params_end_0010
  1568 00000D40 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1569 00000D45 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1570 00000D49 48FFC6                  	inc rsi
  1571 00000D4C EBEC                    	jmp .L_lambda_simple_params_loop_0010
  1572                                  .L_lambda_simple_params_end_0010:
  1573 00000D4E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1574 00000D51 4889C3                  	mov rbx, rax
  1575 00000D54 58                      	pop rax
  1576 00000D55 C60004                  	mov byte [rax], T_closure
  1577 00000D58 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1578 00000D5C 48C74009[690D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  1579 00000D64 E95C010000              	jmp .L_lambda_simple_end_0010
  1580                                  .L_lambda_simple_code_0010:	; lambda-simple body
  1581 00000D69 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1582 00000D6F 740B                    	je .L_lambda_simple_arity_check_ok_0010
  1583 00000D71 FF742410                	push qword [rsp + 8 * 2]
  1584 00000D75 6A01                    	push 1
  1585 00000D77 E945060000              	jmp L_error_incorrect_arity_simple
  1586                                  .L_lambda_simple_arity_check_ok_0010:
  1587 00000D7C C8000000                	enter 0, 0
  1588 00000D80 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1589 00000D85 E87E060000              	call malloc
  1590 00000D8A 50                      	push rax
  1591 00000D8B BF08000000              	mov rdi, 8 * 1	; new rib
  1592 00000D90 E873060000              	call malloc
  1593 00000D95 50                      	push rax
  1594 00000D96 BF20000000              	mov rdi, 8 * 4	; extended env
  1595 00000D9B E868060000              	call malloc
  1596 00000DA0 488B7D10                	mov rdi, ENV
  1597 00000DA4 BE00000000              	mov rsi, 0
  1598 00000DA9 BA01000000              	mov rdx, 1
  1599                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  1600 00000DAE 4883FE03                	cmp rsi, 3
  1601 00000DB2 7410                    	je .L_lambda_simple_env_end_0011
  1602 00000DB4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1603 00000DB8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1604 00000DBC 48FFC6                  	inc rsi
  1605 00000DBF 48FFC2                  	inc rdx
  1606 00000DC2 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  1607                                  .L_lambda_simple_env_end_0011:
  1608 00000DC4 5B                      	pop rbx
  1609 00000DC5 BE00000000              	mov rsi, 0
  1610                                  .L_lambda_simple_params_loop_0011:	; copy params
  1611 00000DCA 4883FE01                	cmp rsi, 1
  1612 00000DCE 740E                    	je .L_lambda_simple_params_end_0011
  1613 00000DD0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1614 00000DD5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1615 00000DD9 48FFC6                  	inc rsi
  1616 00000DDC EBEC                    	jmp .L_lambda_simple_params_loop_0011
  1617                                  .L_lambda_simple_params_end_0011:
  1618 00000DDE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1619 00000DE1 4889C3                  	mov rbx, rax
  1620 00000DE4 58                      	pop rax
  1621 00000DE5 C60004                  	mov byte [rax], T_closure
  1622 00000DE8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1623 00000DEC 48C74009[F90D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  1624 00000DF4 E9C8000000              	jmp .L_lambda_simple_end_0011
  1625                                  .L_lambda_simple_code_0011:	; lambda-simple body
  1626 00000DF9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1627 00000DFF 740B                    	je .L_lambda_simple_arity_check_ok_0011
  1628 00000E01 FF742410                	push qword [rsp + 8 * 2]
  1629 00000E05 6A01                    	push 1
  1630 00000E07 E9B5050000              	jmp L_error_incorrect_arity_simple
  1631                                  .L_lambda_simple_arity_check_ok_0011:
  1632 00000E0C C8000000                	enter 0, 0
  1633                                  	; preparing a tail-call
  1634 00000E10 488B4510                	mov rax, ENV
  1635 00000E14 488B4008                	mov rax, qword [rax + 8 * 1]
  1636 00000E18 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1637 00000E1B 50                      	push rax
  1638 00000E1C 6A01                    	push 1	; arg count
  1639                                  	; preparing a tail-call
  1640 00000E1E 488B4510                	mov rax, ENV
  1641 00000E22 488B00                  	mov rax, qword [rax + 8 * 0]
  1642 00000E25 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var y
  1643 00000E28 50                      	push rax
  1644 00000E29 6A01                    	push 1	; arg count
  1645 00000E2B 488B4520                	mov rax, PARAM(0)	; param z
  1646 00000E2F 803804                  	cmp byte [rax], T_closure
  1647 00000E32 0F8527050000            	jne L_error_non_closure
  1648 00000E38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1649 00000E3B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1650 00000E3E FF7500                  	push qword[rbp]
  1651 00000E41 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1652 00000E46 48895D10                	mov qword[rbp + 8*2],rbx
  1653 00000E4A 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1654 00000E52 BF00000000              	mov rdi,0
  1655 00000E57 EB00                    	jmp .L_tc_recycle_frame_loop_000d
  1656                                  .L_tc_recycle_frame_loop_000d:
  1657 00000E59 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1658 00000E5D 740F                    	je .L_tc_recycle_frame_done_000d
  1659 00000E5F 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1660 00000E64 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1661 00000E69 48FFC7                  	inc rdi
  1662 00000E6C EBEB                    	jmp .L_tc_recycle_frame_loop_000d
  1663                                  .L_tc_recycle_frame_done_000d:
  1664 00000E6E 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1665 00000E72 5D                      	pop rbp
  1666 00000E73 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1667 00000E76 803804                  	cmp byte [rax], T_closure
  1668 00000E79 0F85E0040000            	jne L_error_non_closure
  1669 00000E7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1670 00000E82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1671 00000E85 FF7500                  	push qword[rbp]
  1672 00000E88 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1673 00000E8D 48895D10                	mov qword[rbp + 8*2],rbx
  1674 00000E91 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1675 00000E99 BF00000000              	mov rdi,0
  1676 00000E9E EB00                    	jmp .L_tc_recycle_frame_loop_000e
  1677                                  .L_tc_recycle_frame_loop_000e:
  1678 00000EA0 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1679 00000EA4 740F                    	je .L_tc_recycle_frame_done_000e
  1680 00000EA6 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1681 00000EAB 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1682 00000EB0 48FFC7                  	inc rdi
  1683 00000EB3 EBEB                    	jmp .L_tc_recycle_frame_loop_000e
  1684                                  .L_tc_recycle_frame_done_000e:
  1685 00000EB5 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1686 00000EB9 5D                      	pop rbp
  1687 00000EBA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1688 00000EBD C9                      	leave
  1689 00000EBE C21800                  	ret AND_KILL_FRAME(1)
  1690                                  .L_lambda_simple_end_0011:	; new closure is in rax
  1691 00000EC1 C9                      	leave
  1692 00000EC2 C21800                  	ret AND_KILL_FRAME(1)
  1693                                  .L_lambda_simple_end_0010:	; new closure is in rax
  1694 00000EC5 C9                      	leave
  1695 00000EC6 C21800                  	ret AND_KILL_FRAME(1)
  1696                                  .L_lambda_simple_end_000f:	; new closure is in rax
  1697 00000EC9 50                      	push rax
  1698 00000ECA 6A01                    	push 1	; arg count
  1699 00000ECC 488B4520                	mov rax, PARAM(0)	; param p
  1700 00000ED0 803804                  	cmp byte [rax], T_closure
  1701 00000ED3 0F8586040000            	jne L_error_non_closure
  1702 00000ED9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1703 00000EDC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1704 00000EDF FF7500                  	push qword[rbp]
  1705 00000EE2 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1706 00000EE7 48895D10                	mov qword[rbp + 8*2],rbx
  1707 00000EEB 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1708 00000EF3 BF00000000              	mov rdi,0
  1709 00000EF8 EB00                    	jmp .L_tc_recycle_frame_loop_000f
  1710                                  .L_tc_recycle_frame_loop_000f:
  1711 00000EFA 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1712 00000EFE 740F                    	je .L_tc_recycle_frame_done_000f
  1713 00000F00 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1714 00000F05 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1715 00000F0A 48FFC7                  	inc rdi
  1716 00000F0D EBEB                    	jmp .L_tc_recycle_frame_loop_000f
  1717                                  .L_tc_recycle_frame_done_000f:
  1718 00000F0F 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1719 00000F13 5D                      	pop rbp
  1720 00000F14 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1721 00000F17 C9                      	leave
  1722 00000F18 C21800                  	ret AND_KILL_FRAME(1)
  1723                                  .L_lambda_simple_end_000e:	; new closure is in rax
  1724 00000F1B 50                      	push rax
  1725 00000F1C 6A01                    	push 1	; arg count
  1726                                  	; preparing a tail-call
  1727 00000F1E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1728 00000F23 E8E0040000              	call malloc
  1729 00000F28 50                      	push rax
  1730 00000F29 BF00000000              	mov rdi, 8 * 0	; new rib
  1731 00000F2E E8D5040000              	call malloc
  1732 00000F33 50                      	push rax
  1733 00000F34 BF08000000              	mov rdi, 8 * 1	; extended env
  1734 00000F39 E8CA040000              	call malloc
  1735 00000F3E 488B7D10                	mov rdi, ENV
  1736 00000F42 BE00000000              	mov rsi, 0
  1737 00000F47 BA01000000              	mov rdx, 1
  1738                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  1739 00000F4C 4883FE00                	cmp rsi, 0
  1740 00000F50 7410                    	je .L_lambda_simple_env_end_0012
  1741 00000F52 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1742 00000F56 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1743 00000F5A 48FFC6                  	inc rsi
  1744 00000F5D 48FFC2                  	inc rdx
  1745 00000F60 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  1746                                  .L_lambda_simple_env_end_0012:
  1747 00000F62 5B                      	pop rbx
  1748 00000F63 BE00000000              	mov rsi, 0
  1749                                  .L_lambda_simple_params_loop_0012:	; copy params
  1750 00000F68 4883FE00                	cmp rsi, 0
  1751 00000F6C 740E                    	je .L_lambda_simple_params_end_0012
  1752 00000F6E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1753 00000F73 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1754 00000F77 48FFC6                  	inc rsi
  1755 00000F7A EBEC                    	jmp .L_lambda_simple_params_loop_0012
  1756                                  .L_lambda_simple_params_end_0012:
  1757 00000F7C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1758 00000F7F 4889C3                  	mov rbx, rax
  1759 00000F82 58                      	pop rax
  1760 00000F83 C60004                  	mov byte [rax], T_closure
  1761 00000F86 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1762 00000F8A 48C74009[970F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  1763 00000F92 E923010000              	jmp .L_lambda_simple_end_0012
  1764                                  .L_lambda_simple_code_0012:	; lambda-simple body
  1765 00000F97 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1766 00000F9D 740B                    	je .L_lambda_simple_arity_check_ok_0012
  1767 00000F9F FF742410                	push qword [rsp + 8 * 2]
  1768 00000FA3 6A01                    	push 1
  1769 00000FA5 E917040000              	jmp L_error_incorrect_arity_simple
  1770                                  .L_lambda_simple_arity_check_ok_0012:
  1771 00000FAA C8000000                	enter 0, 0
  1772 00000FAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1773 00000FB3 E850040000              	call malloc
  1774 00000FB8 50                      	push rax
  1775 00000FB9 BF08000000              	mov rdi, 8 * 1	; new rib
  1776 00000FBE E845040000              	call malloc
  1777 00000FC3 50                      	push rax
  1778 00000FC4 BF10000000              	mov rdi, 8 * 2	; extended env
  1779 00000FC9 E83A040000              	call malloc
  1780 00000FCE 488B7D10                	mov rdi, ENV
  1781 00000FD2 BE00000000              	mov rsi, 0
  1782 00000FD7 BA01000000              	mov rdx, 1
  1783                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  1784 00000FDC 4883FE01                	cmp rsi, 1
  1785 00000FE0 7410                    	je .L_lambda_simple_env_end_0013
  1786 00000FE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1787 00000FE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1788 00000FEA 48FFC6                  	inc rsi
  1789 00000FED 48FFC2                  	inc rdx
  1790 00000FF0 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  1791                                  .L_lambda_simple_env_end_0013:
  1792 00000FF2 5B                      	pop rbx
  1793 00000FF3 BE00000000              	mov rsi, 0
  1794                                  .L_lambda_simple_params_loop_0013:	; copy params
  1795 00000FF8 4883FE01                	cmp rsi, 1
  1796 00000FFC 740E                    	je .L_lambda_simple_params_end_0013
  1797 00000FFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1798 00001003 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1799 00001007 48FFC6                  	inc rsi
  1800 0000100A EBEC                    	jmp .L_lambda_simple_params_loop_0013
  1801                                  .L_lambda_simple_params_end_0013:
  1802 0000100C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1803 0000100F 4889C3                  	mov rbx, rax
  1804 00001012 58                      	pop rax
  1805 00001013 C60004                  	mov byte [rax], T_closure
  1806 00001016 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1807 0000101A 48C74009[27100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  1808 00001022 E98F000000              	jmp .L_lambda_simple_end_0013
  1809                                  .L_lambda_simple_code_0013:	; lambda-simple body
  1810 00001027 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1811 0000102D 740B                    	je .L_lambda_simple_arity_check_ok_0013
  1812 0000102F FF742410                	push qword [rsp + 8 * 2]
  1813 00001033 6A01                    	push 1
  1814 00001035 E987030000              	jmp L_error_incorrect_arity_simple
  1815                                  .L_lambda_simple_arity_check_ok_0013:
  1816 0000103A C8000000                	enter 0, 0
  1817                                  	; preparing a tail-call
  1818                                  	; preparing a non-tail-call
  1819 0000103E 488B4520                	mov rax, PARAM(0)	; param y
  1820 00001042 50                      	push rax
  1821 00001043 6A01                    	push 1	; arg count
  1822 00001045 488B4510                	mov rax, ENV
  1823 00001049 488B00                  	mov rax, qword [rax + 8 * 0]
  1824 0000104C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1825 0000104F 803804                  	cmp byte [rax], T_closure
  1826 00001052 0F8507030000            	jne L_error_non_closure
  1827 00001058 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1828 0000105B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1829 0000105E 50                      	push rax
  1830 0000105F 6A01                    	push 1	; arg count
  1831 00001061 488B4510                	mov rax, ENV
  1832 00001065 488B00                  	mov rax, qword [rax + 8 * 0]
  1833 00001068 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x
  1834 0000106B 803804                  	cmp byte [rax], T_closure
  1835 0000106E 0F85EB020000            	jne L_error_non_closure
  1836 00001074 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1837 00001077 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1838 0000107A FF7500                  	push qword[rbp]
  1839 0000107D 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1840 00001082 48895D10                	mov qword[rbp + 8*2],rbx
  1841 00001086 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1842 0000108E BF00000000              	mov rdi,0
  1843 00001093 EB00                    	jmp .L_tc_recycle_frame_loop_0010
  1844                                  .L_tc_recycle_frame_loop_0010:
  1845 00001095 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1846 00001099 740F                    	je .L_tc_recycle_frame_done_0010
  1847 0000109B 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1848 000010A0 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1849 000010A5 48FFC7                  	inc rdi
  1850 000010A8 EBEB                    	jmp .L_tc_recycle_frame_loop_0010
  1851                                  .L_tc_recycle_frame_done_0010:
  1852 000010AA 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1853 000010AE 5D                      	pop rbp
  1854 000010AF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1855 000010B2 C9                      	leave
  1856 000010B3 C21800                  	ret AND_KILL_FRAME(1)
  1857                                  .L_lambda_simple_end_0013:	; new closure is in rax
  1858 000010B6 C9                      	leave
  1859 000010B7 C21800                  	ret AND_KILL_FRAME(1)
  1860                                  .L_lambda_simple_end_0012:	; new closure is in rax
  1861 000010BA 50                      	push rax
  1862 000010BB 6A01                    	push 1	; arg count
  1863 000010BD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1864 000010C2 E841030000              	call malloc
  1865 000010C7 50                      	push rax
  1866 000010C8 BF00000000              	mov rdi, 8 * 0	; new rib
  1867 000010CD E836030000              	call malloc
  1868 000010D2 50                      	push rax
  1869 000010D3 BF08000000              	mov rdi, 8 * 1	; extended env
  1870 000010D8 E82B030000              	call malloc
  1871 000010DD 488B7D10                	mov rdi, ENV
  1872 000010E1 BE00000000              	mov rsi, 0
  1873 000010E6 BA01000000              	mov rdx, 1
  1874                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  1875 000010EB 4883FE00                	cmp rsi, 0
  1876 000010EF 7410                    	je .L_lambda_simple_env_end_0014
  1877 000010F1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1878 000010F5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1879 000010F9 48FFC6                  	inc rsi
  1880 000010FC 48FFC2                  	inc rdx
  1881 000010FF EBEA                    	jmp .L_lambda_simple_env_loop_0014
  1882                                  .L_lambda_simple_env_end_0014:
  1883 00001101 5B                      	pop rbx
  1884 00001102 BE00000000              	mov rsi, 0
  1885                                  .L_lambda_simple_params_loop_0014:	; copy params
  1886 00001107 4883FE00                	cmp rsi, 0
  1887 0000110B 740E                    	je .L_lambda_simple_params_end_0014
  1888 0000110D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1889 00001112 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1890 00001116 48FFC6                  	inc rsi
  1891 00001119 EBEC                    	jmp .L_lambda_simple_params_loop_0014
  1892                                  .L_lambda_simple_params_end_0014:
  1893 0000111B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1894 0000111E 4889C3                  	mov rbx, rax
  1895 00001121 58                      	pop rax
  1896 00001122 C60004                  	mov byte [rax], T_closure
  1897 00001125 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1898 00001129 48C74009[36110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  1899 00001131 E983000000              	jmp .L_lambda_simple_end_0014
  1900                                  .L_lambda_simple_code_0014:	; lambda-simple body
  1901 00001136 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1902 0000113C 740B                    	je .L_lambda_simple_arity_check_ok_0014
  1903 0000113E FF742410                	push qword [rsp + 8 * 2]
  1904 00001142 6A01                    	push 1
  1905 00001144 E978020000              	jmp L_error_incorrect_arity_simple
  1906                                  .L_lambda_simple_arity_check_ok_0014:
  1907 00001149 C8000000                	enter 0, 0
  1908                                  	; preparing a tail-call
  1909                                  	; preparing a non-tail-call
  1910 0000114D 488B4520                	mov rax, PARAM(0)	; param x
  1911 00001151 50                      	push rax
  1912 00001152 6A01                    	push 1	; arg count
  1913 00001154 488B4520                	mov rax, PARAM(0)	; param x
  1914 00001158 803804                  	cmp byte [rax], T_closure
  1915 0000115B 0F85FE010000            	jne L_error_non_closure
  1916 00001161 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1917 00001164 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1918 00001167 50                      	push rax
  1919 00001168 6A01                    	push 1	; arg count
  1920 0000116A 488B4520                	mov rax, PARAM(0)	; param x
  1921 0000116E 803804                  	cmp byte [rax], T_closure
  1922 00001171 0F85E8010000            	jne L_error_non_closure
  1923 00001177 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1924 0000117A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1925 0000117D FF7500                  	push qword[rbp]
  1926 00001180 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1927 00001185 48895D10                	mov qword[rbp + 8*2],rbx
  1928 00001189 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1929 00001191 BF00000000              	mov rdi,0
  1930 00001196 EB00                    	jmp .L_tc_recycle_frame_loop_0011
  1931                                  .L_tc_recycle_frame_loop_0011:
  1932 00001198 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1933 0000119C 740F                    	je .L_tc_recycle_frame_done_0011
  1934 0000119E 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1935 000011A3 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1936 000011A8 48FFC7                  	inc rdi
  1937 000011AB EBEB                    	jmp .L_tc_recycle_frame_loop_0011
  1938                                  .L_tc_recycle_frame_done_0011:
  1939 000011AD 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1940 000011B1 5D                      	pop rbp
  1941 000011B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1942 000011B5 C9                      	leave
  1943 000011B6 C21800                  	ret AND_KILL_FRAME(1)
  1944                                  .L_lambda_simple_end_0014:	; new closure is in rax
  1945 000011B9 803804                  	cmp byte [rax], T_closure
  1946 000011BC 0F859D010000            	jne L_error_non_closure
  1947 000011C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1948 000011C5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1949 000011C8 FF7500                  	push qword[rbp]
  1950 000011CB 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1951 000011D0 48895D10                	mov qword[rbp + 8*2],rbx
  1952 000011D4 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1953 000011DC BF00000000              	mov rdi,0
  1954 000011E1 EB00                    	jmp .L_tc_recycle_frame_loop_0012
  1955                                  .L_tc_recycle_frame_loop_0012:
  1956 000011E3 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1957 000011E7 740F                    	je .L_tc_recycle_frame_done_0012
  1958 000011E9 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1959 000011EE 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1960 000011F3 48FFC7                  	inc rdi
  1961 000011F6 EBEB                    	jmp .L_tc_recycle_frame_loop_0012
  1962                                  .L_tc_recycle_frame_done_0012:
  1963 000011F8 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1964 000011FC 5D                      	pop rbp
  1965 000011FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1966 00001200 803804                  	cmp byte [rax], T_closure
  1967 00001203 0F8556010000            	jne L_error_non_closure
  1968 00001209 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1969 0000120C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1970 0000120F FF7500                  	push qword[rbp]
  1971 00001212 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1972 00001217 48895D10                	mov qword[rbp + 8*2],rbx
  1973 0000121B 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1974 00001223 BF00000000              	mov rdi,0
  1975 00001228 EB00                    	jmp .L_tc_recycle_frame_loop_0013
  1976                                  .L_tc_recycle_frame_loop_0013:
  1977 0000122A 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1978 0000122E 740F                    	je .L_tc_recycle_frame_done_0013
  1979 00001230 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1980 00001235 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1981 0000123A 48FFC7                  	inc rdi
  1982 0000123D EBEB                    	jmp .L_tc_recycle_frame_loop_0013
  1983                                  .L_tc_recycle_frame_done_0013:
  1984 0000123F 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  1985 00001243 5D                      	pop rbp
  1986 00001244 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1987 00001247 803804                  	cmp byte [rax], T_closure
  1988 0000124A 0F850F010000            	jne L_error_non_closure
  1989 00001250 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1990 00001253 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1991 00001256 FF7500                  	push qword[rbp]
  1992 00001259 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1993 0000125E 48895D10                	mov qword[rbp + 8*2],rbx
  1994 00001262 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1995 0000126A BF00000000              	mov rdi,0
  1996 0000126F EB00                    	jmp .L_tc_recycle_frame_loop_0014
  1997                                  .L_tc_recycle_frame_loop_0014:
  1998 00001271 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1999 00001275 740F                    	je .L_tc_recycle_frame_done_0014
  2000 00001277 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2001 0000127C 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2002 00001281 48FFC7                  	inc rdi
  2003 00001284 EBEB                    	jmp .L_tc_recycle_frame_loop_0014
  2004                                  .L_tc_recycle_frame_done_0014:
  2005 00001286 488B6508                	mov rsp, [rbp+ 8 * 1]	; point to last argument
  2006 0000128A 5D                      	pop rbp
  2007 0000128B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2008 0000128E 803804                  	cmp byte [rax], T_closure
  2009 00001291 0F85C8000000            	jne L_error_non_closure
  2010 00001297 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2011 0000129A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2012                                  Lend:
  2013 0000129D 4889C7                  	mov rdi, rax
  2014 000012A0 E8B8030000              	call print_sexpr_if_not_void
  2015                                  
  2016 000012A5 48BF-                           mov rdi, fmt_memory_usage
  2016 000012A7 [7506000000000000] 
  2017 000012AF 488B3425[FB060000]              mov rsi, qword [top_of_memory]
  2018 000012B7 4881EE[00000000]                sub rsi, memory
  2019 000012BE B800000000                      mov rax, 0
  2020                                          ENTER
    44 000012C3 C8000000            <1>  enter 0, 0
    45 000012C7 4883E4F0            <1>  and rsp, ~15
  2021 000012CB E8(00000000)                    call printf
  2022                                          LEAVE
    49 000012D0 C9                  <1>  leave
  2023 000012D1 B800000000                      mov rax, 0
  2024 000012D6 E8(00000000)                    call exit
  2025                                  
  2026                                  L_error_fvar_undefined:
  2027 000012DB 50                              push rax
  2028 000012DC 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  2029 000012E4 48BE-                           mov rsi, fmt_undefined_free_var_1
  2029 000012E6 [DD05000000000000] 
  2030 000012EE B800000000                      mov rax, 0
  2031                                          ENTER
    44 000012F3 C8000000            <1>  enter 0, 0
    45 000012F7 4883E4F0            <1>  and rsp, ~15
  2032 000012FB E8(00000000)                    call fprintf
  2033                                          LEAVE
    49 00001300 C9                  <1>  leave
  2034 00001301 58                              pop rax
  2035 00001302 488B4001                        mov rax, qword [rax + 1] ; string
  2036 00001306 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2037 0000130A BE01000000                      mov rsi, 1               ; sizeof(char)
  2038 0000130F 488B5001                        mov rdx, qword [rax + 1] ; string-length
  2039 00001313 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  2040 0000131B B800000000                      mov rax, 0
  2041                                          ENTER
    44 00001320 C8000000            <1>  enter 0, 0
    45 00001324 4883E4F0            <1>  and rsp, ~15
  2042 00001328 E8(00000000)                    call fwrite
  2043                                          LEAVE
    49 0000132D C9                  <1>  leave
  2044 0000132E 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  2045 00001336 48BE-                           mov rsi, fmt_undefined_free_var_2
  2045 00001338 [F405000000000000] 
  2046 00001340 B800000000                      mov rax, 0
  2047                                          ENTER
    44 00001345 C8000000            <1>  enter 0, 0
    45 00001349 4883E4F0            <1>  and rsp, ~15
  2048 0000134D E8(00000000)                    call fprintf
  2049                                          LEAVE
    49 00001352 C9                  <1>  leave
  2050 00001353 48C7C0F6FFFFFF                  mov rax, -10
  2051 0000135A E8(00000000)                    call exit
  2052                                  
  2053                                  L_error_non_closure:
  2054 0000135F 488B3C25[00000000]              mov rdi, qword [stderr]
  2055 00001367 48BE-                           mov rsi, fmt_non_closure
  2055 00001369 [AB06000000000000] 
  2056 00001371 B800000000                      mov rax, 0
  2057                                          ENTER
    44 00001376 C8000000            <1>  enter 0, 0
    45 0000137A 4883E4F0            <1>  and rsp, ~15
  2058 0000137E E8(00000000)                    call fprintf
  2059                                          LEAVE
    49 00001383 C9                  <1>  leave
  2060 00001384 48C7C0FEFFFFFF                  mov rax, -2
  2061 0000138B E8(00000000)                    call exit
  2062                                  
  2063                                  L_error_improper_list:
  2064 00001390 488B3C25[00000000]      	mov rdi, qword [stderr]
  2065 00001398 48BE-                   	mov rsi, fmt_error_improper_list
  2065 0000139A [D306000000000000] 
  2066 000013A2 B800000000              	mov rax, 0
  2067                                          ENTER
    44 000013A7 C8000000            <1>  enter 0, 0
    45 000013AB 4883E4F0            <1>  and rsp, ~15
  2068 000013AF E8(00000000)            	call fprintf
  2069                                          LEAVE
    49 000013B4 C9                  <1>  leave
  2070 000013B5 48C7C0F9FFFFFF          	mov rax, -7
  2071 000013BC E8(00000000)            	call exit
  2072                                  
  2073                                  L_error_incorrect_arity_simple:
  2074 000013C1 488B3C25[00000000]              mov rdi, qword [stderr]
  2075 000013C9 48BE-                           mov rsi, fmt_incorrect_arity_simple
  2075 000013CB [1606000000000000] 
  2076 000013D3 EB12                            jmp L_error_incorrect_arity_common
  2077                                  L_error_incorrect_arity_opt:
  2078 000013D5 488B3C25[00000000]              mov rdi, qword [stderr]
  2079 000013DD 48BE-                           mov rsi, fmt_incorrect_arity_opt
  2079 000013DF [4106000000000000] 
  2080                                  L_error_incorrect_arity_common:
  2081 000013E7 5A                              pop rdx
  2082 000013E8 59                              pop rcx
  2083 000013E9 B800000000                      mov rax, 0
  2084                                          ENTER
    44 000013EE C8000000            <1>  enter 0, 0
    45 000013F2 4883E4F0            <1>  and rsp, ~15
  2085 000013F6 E8(00000000)                    call fprintf
  2086                                          LEAVE
    49 000013FB C9                  <1>  leave
  2087 000013FC 48C7C0FAFFFFFF                  mov rax, -6
  2088 00001403 E8(00000000)                    call exit
  2089                                  
  2090                                  section .data
  2091                                  fmt_undefined_free_var_1:
  2092 000005DD 212121205468652066-             db `!!! The free variable \0`
  2092 000005E6 726565207661726961-
  2092 000005EF 626C652000         
  2093                                  fmt_undefined_free_var_2:
  2094 000005F4 207761732075736564-             db ` was used before it was defined.\n\0`
  2094 000005FD 206265666F72652069-
  2094 00000606 742077617320646566-
  2094 0000060F 696E65642E0A00     
  2095                                  fmt_incorrect_arity_simple:
  2096 00000616 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  2096 0000061F 74656420256C642061-
  2096 00000628 7267756D656E74732C-
  2096 00000631 206275742067697665-
  2096 0000063A 6E20256C640A00     
  2097                                  fmt_incorrect_arity_opt:
  2098 00000641 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  2098 0000064A 746564206174206C65-
  2098 00000653 61737420256C642061-
  2098 0000065C 7267756D656E74732C-
  2098 00000665 206275742067697665-
  2098 0000066E 6E20256C640A00     
  2099                                  fmt_memory_usage:
  2100 00000675 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  2100 0000067E 20256C642062797465-
  2100 00000687 73206F662064796E61-
  2100 00000690 6D6963616C6C792D61-
  2100 00000699 6C6C6F636174656420-
  2100 000006A2 6D656D6F72790A0A00 
  2101                                  fmt_non_closure:
  2102 000006AB 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  2102 000006B4 7074696E6720746F20-
  2102 000006BD 6170706C792061206E-
  2102 000006C6 6F6E2D636C6F737572-
  2102 000006CF 65210A00           
  2103                                  fmt_error_improper_list:
  2104 000006D3 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  2104 000006DC 7267756D656E742069-
  2104 000006E5 73206E6F7420612070-
  2104 000006EE 726F706572206C6973-
  2104 000006F7 74210A00           
  2105                                  
  2106                                  section .bss
  2107                                  memory:
  2108 00000000 <res 40000000h>         	resb gbytes(1)
  2109                                  
  2110                                  section .data
  2111                                  top_of_memory:
  2112 000006FB [0000000000000000]              dq memory
  2113                                  
  2114                                  section .text
  2115                                  malloc:
  2116 00001408 488B0425[FB060000]              mov rax, qword [top_of_memory]
  2117 00001410 48013C25[FB060000]              add qword [top_of_memory], rdi
  2118 00001418 C3                              ret
  2119                                  
  2120                                  L_code_ptr_return:
  2121 00001419 48837C241002            	cmp qword [rsp + 8*2], 2
  2122 0000141F 0F851F1D0000            	jne L_error_arg_count_2
  2123 00001425 488B4C2418              	mov rcx, qword [rsp + 8*3]
  2124                                  	assert_integer(rcx)
    53 0000142A 803911              <1>  cmp byte [%1], %2
    54 0000142D 0F85B01D0000        <1>  jne L_error_incorrect_type
  2125 00001433 488B4901                	mov rcx, qword [rcx + 1]
  2126 00001437 4883F900                	cmp rcx, 0
  2127 0000143B 0F8C371C0000            	jl L_error_integer_range
  2128 00001441 488B442420              	mov rax, qword [rsp + 8*4]
  2129                                  .L0:
  2130 00001446 4883F900                        cmp rcx, 0
  2131 0000144A 7409                            je .L1
  2132 0000144C 488B6D00                	mov rbp, qword [rbp]
  2133 00001450 48FFC9                  	dec rcx
  2134 00001453 7FF1                    	jg .L0
  2135                                  .L1:
  2136 00001455 4889EC                  	mov rsp, rbp
  2137 00001458 5D                      	pop rbp
  2138 00001459 5B                              pop rbx
  2139 0000145A 488B4C2408                      mov rcx, qword [rsp + 8*1]
  2140 0000145F 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  2141 00001464 FFE3                    	jmp rbx
  2142                                  
  2143                                  L_code_ptr_make_list:
  2144 00001466 C8000000                	enter 0, 0
  2145 0000146A 48837D1801                      cmp COUNT, 1
  2146 0000146F 740C                            je .L0
  2147 00001471 48837D1802                      cmp COUNT, 2
  2148 00001476 7411                            je .L1
  2149 00001478 E9FC1C0000                      jmp L_error_arg_count_12
  2150                                  .L0:
  2151 0000147D 49B9-                           mov r9, sob_void
  2151 0000147F [0000000000000000] 
  2152 00001487 EB04                            jmp .L2
  2153                                  .L1:
  2154 00001489 4C8B4D28                        mov r9, PARAM(1)
  2155                                  .L2:
  2156 0000148D 488B4D20                        mov rcx, PARAM(0)
  2157                                          assert_integer(rcx)
    53 00001491 803911              <1>  cmp byte [%1], %2
    54 00001494 0F85491D0000        <1>  jne L_error_incorrect_type
  2158 0000149A 488B4901                        mov rcx, qword [rcx + 1]
  2159 0000149E 4883F900                        cmp rcx, 0
  2160 000014A2 0F8C011C0000                    jl L_error_arg_negative
  2161 000014A8 49B8-                           mov r8, sob_nil
  2161 000014AA [0100000000000000] 
  2162                                  .L3:
  2163 000014B2 4883F900                        cmp rcx, 0
  2164 000014B6 7E1D                            jle .L4
  2165 000014B8 BF11000000                      mov rdi, 1 + 8 + 8
  2166 000014BD E846FFFFFF                      call malloc
  2167 000014C2 C60021                          mov byte [rax], T_pair
  2168 000014C5 4C894801                        mov qword [rax + 1], r9
  2169 000014C9 4C894009                        mov qword [rax + 1 + 8], r8
  2170 000014CD 4989C0                          mov r8, rax
  2171 000014D0 48FFC9                          dec rcx
  2172 000014D3 EBDD                            jmp .L3
  2173                                  .L4:
  2174 000014D5 4C89C0                          mov rax, r8
  2175 000014D8 48837D1802                      cmp COUNT, 2
  2176 000014DD 7404                            je .L5
  2177 000014DF C9                              leave
  2178 000014E0 C21800                          ret AND_KILL_FRAME(1)
  2179                                  .L5:
  2180 000014E3 C9                      	leave
  2181 000014E4 C22000                  	ret AND_KILL_FRAME(2)
  2182                                  
  2183                                  L_code_ptr_is_primitive:
  2184 000014E7 C8000000                	enter 0, 0
  2185 000014EB 48837D1801              	cmp COUNT, 1
  2186 000014F0 0F85191C0000            	jne L_error_arg_count_1
  2187 000014F6 488B4520                	mov rax, PARAM(0)
  2188                                  	assert_closure(rax)
    53 000014FA 803804              <1>  cmp byte [%1], %2
    54 000014FD 0F85E01C0000        <1>  jne L_error_incorrect_type
  2189 00001503 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  2190 00001508 750C                    	jne .L_false
  2191 0000150A 48B8-                   	mov rax, sob_boolean_true
  2191 0000150C [0300000000000000] 
  2192 00001514 EB0A                    	jmp .L_end
  2193                                  .L_false:
  2194 00001516 48B8-                   	mov rax, sob_boolean_false
  2194 00001518 [0200000000000000] 
  2195                                  .L_end:
  2196 00001520 C9                      	leave
  2197 00001521 C21800                  	ret AND_KILL_FRAME(1)
  2198                                  
  2199                                  L_code_ptr_length:
  2200 00001524 C8000000                	enter 0, 0
  2201 00001528 48837D1801              	cmp COUNT, 1
  2202 0000152D 0F85DC1B0000            	jne L_error_arg_count_1
  2203 00001533 488B5D20                	mov rbx, PARAM(0)
  2204 00001537 BF00000000              	mov rdi, 0
  2205                                  .L:
  2206 0000153C 803B01                  	cmp byte [rbx], T_nil
  2207 0000153F 7412                    	je .L_end
  2208                                  	assert_pair(rbx)
    53 00001541 803B21              <1>  cmp byte [%1], %2
    54 00001544 0F85991C0000        <1>  jne L_error_incorrect_type
  2209 0000154A 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  2210 0000154E 48FFC7                  	inc rdi
  2211 00001551 EBE9                    	jmp .L
  2212                                  .L_end:
  2213 00001553 E8061B0000              	call make_integer
  2214 00001558 C9                      	leave
  2215 00001559 C21800                  	ret AND_KILL_FRAME(1)
  2216                                  
  2217                                  L_code_ptr_break:
  2218 0000155C 48837C241000                    cmp qword [rsp + 8 * 2], 0
  2219 00001562 0F85721B0000                    jne L_error_arg_count_0
  2220 00001568 CC                              int3
  2221 00001569 48B8-                           mov rax, sob_void
  2221 0000156B [0000000000000000] 
  2222 00001573 C21000                          ret AND_KILL_FRAME(0)        
  2223                                  
  2224                                  L_code_ptr_frame:
  2225 00001576 C8000000                        enter 0, 0
  2226 0000157A 48837D1800                      cmp COUNT, 0
  2227 0000157F 0F85551B0000                    jne L_error_arg_count_0
  2228                                  
  2229 00001585 48BF-                           mov rdi, fmt_frame
  2229 00001587 [0307000000000000] 
  2230 0000158F 488B7500                        mov rsi, qword [rbp]    ; old rbp
  2231 00001593 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  2232 00001597 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  2233 0000159B 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  2234 0000159F 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  2235 000015A3 6A00                            push 0
  2236 000015A5 4151                            push r9
  2237 000015A7 4150                            push r8                   ; we'll use it when printing the params
  2238 000015A9 B800000000                      mov rax, 0
  2239                                          
  2240                                          ENTER
    44 000015AE C8000000            <1>  enter 0, 0
    45 000015B2 4883E4F0            <1>  and rsp, ~15
  2241 000015B6 E8(00000000)                    call printf
  2242                                          LEAVE
    49 000015BB C9                  <1>  leave
  2243                                  
  2244                                  .L:
  2245 000015BC 488B0C24                        mov rcx, qword [rsp]
  2246 000015C0 4883F900                        cmp rcx, 0
  2247 000015C4 7467                            je .L_out
  2248 000015C6 48BF-                           mov rdi, fmt_frame_param_prefix
  2248 000015C8 [3C07000000000000] 
  2249 000015D0 488B742410                      mov rsi, qword [rsp + 8*2]
  2250 000015D5 B800000000                      mov rax, 0
  2251                                          
  2252                                          ENTER
    44 000015DA C8000000            <1>  enter 0, 0
    45 000015DE 4883E4F0            <1>  and rsp, ~15
  2253 000015E2 E8(00000000)                    call printf
  2254                                          LEAVE
    49 000015E7 C9                  <1>  leave
  2255                                  
  2256 000015E8 488B0C24                        mov rcx, qword [rsp]
  2257 000015EC 48FFC9                          dec rcx
  2258 000015EF 48890C24                        mov qword [rsp], rcx    ; dec arg count
  2259 000015F3 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  2260 000015F8 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  2261 000015FD 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  2262 00001601 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  2263 00001606 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  2264 00001609 E87B000000                      call print_sexpr
  2265 0000160E 48BF-                           mov rdi, fmt_newline
  2265 00001610 [6807000000000000] 
  2266 00001618 B800000000                      mov rax, 0
  2267                                          ENTER
    44 0000161D C8000000            <1>  enter 0, 0
    45 00001621 4883E4F0            <1>  and rsp, ~15
  2268 00001625 E8(00000000)                    call printf
  2269                                          LEAVE
    49 0000162A C9                  <1>  leave
  2270 0000162B EB8F                            jmp .L
  2271                                  .L_out:
  2272 0000162D 48BF-                           mov rdi, fmt_frame_continue
  2272 0000162F [4D07000000000000] 
  2273 00001637 B800000000                      mov rax, 0
  2274                                          ENTER
    44 0000163C C8000000            <1>  enter 0, 0
    45 00001640 4883E4F0            <1>  and rsp, ~15
  2275 00001644 E8(00000000)                    call printf
  2276 00001649 E8(00000000)                    call getchar
  2277                                          LEAVE
    49 0000164E C9                  <1>  leave
  2278                                          
  2279 0000164F 48B8-                           mov rax, sob_void
  2279 00001651 [0000000000000000] 
  2280 00001659 C9                              leave
  2281 0000165A C21000                          ret AND_KILL_FRAME(0)
  2282                                          
  2283                                  print_sexpr_if_not_void:
  2284 0000165D 4881FF[00000000]        	cmp rdi, sob_void
  2285 00001664 7422                    	je .done
  2286 00001666 E81E000000              	call print_sexpr
  2287 0000166B 48BF-                   	mov rdi, fmt_newline
  2287 0000166D [6807000000000000] 
  2288 00001675 B800000000              	mov rax, 0
  2289                                  	ENTER
    44 0000167A C8000000            <1>  enter 0, 0
    45 0000167E 4883E4F0            <1>  and rsp, ~15
  2290 00001682 E8(00000000)            	call printf
  2291                                  	LEAVE
    49 00001687 C9                  <1>  leave
  2292                                  .done:
  2293 00001688 C3                      	ret
  2294                                  
  2295                                  section .data
  2296                                  fmt_frame:
  2297 00000703 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  2297 0000070C 207265742061646472-
  2297 00000715 203D2025703B206C65-
  2297 0000071E 7820656E76203D2025-
  2297 00000727 703B20706172616D20-
  2297 00000730 636F756E74203D2025-
  2297 00000739 640A00             
  2298                                  fmt_frame_param_prefix:
  2299 0000073C 3D3D5B706172616D20-             db `==[param %d]==> \0`
  2299 00000745 25645D3D3D3E2000   
  2300                                  fmt_frame_continue:
  2301 0000074D 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  2301 00000756 723E20746F20636F6E-
  2301 0000075F 74696E75652E2E2E00 
  2302                                  fmt_newline:
  2303 00000768 0A00                    	db `\n\0`
  2304                                  fmt_void:
  2305 0000076A 233C766F69643E00        	db `#<void>\0`
  2306                                  fmt_nil:
  2307 00000772 282900                  	db `()\0`
  2308                                  fmt_boolean_false:
  2309 00000775 236600                  	db `#f\0`
  2310                                  fmt_boolean_true:
  2311 00000778 237400                  	db `#t\0`
  2312                                  fmt_char_backslash:
  2313 0000077B 235C5C00                	db `#\\\\\0`
  2314                                  fmt_char_dquote:
  2315 0000077F 235C2200                	db `#\\"\0`
  2316                                  fmt_char_simple:
  2317 00000783 235C256300              	db `#\\%c\0`
  2318                                  fmt_char_null:
  2319 00000788 235C6E756C00            	db `#\\nul\0`
  2320                                  fmt_char_bell:
  2321 0000078E 235C62656C6C00          	db `#\\bell\0`
  2322                                  fmt_char_backspace:
  2323 00000795 235C6261636B737061-     	db `#\\backspace\0`
  2323 0000079E 636500             
  2324                                  fmt_char_tab:
  2325 000007A1 235C74616200            	db `#\\tab\0`
  2326                                  fmt_char_newline:
  2327 000007A7 235C6E65776C696E65-     	db `#\\newline\0`
  2327 000007B0 00                 
  2328                                  fmt_char_formfeed:
  2329 000007B1 235C7061676500          	db `#\\page\0`
  2330                                  fmt_char_return:
  2331 000007B8 235C72657475726E00      	db `#\\return\0`
  2332                                  fmt_char_escape:
  2333 000007C1 235C65736300            	db `#\\esc\0`
  2334                                  fmt_char_space:
  2335 000007C7 235C737061636500        	db `#\\space\0`
  2336                                  fmt_char_hex:
  2337 000007CF 235C782530325800        	db `#\\x%02X\0`
  2338                                  fmt_gensym:
  2339 000007D7 47256C6400                      db `G%ld\0`
  2340                                  fmt_closure:
  2341 000007DC 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  2341 000007E5 206174203078253038-
  2341 000007EE 5820656E763D307825-
  2341 000007F7 30385820636F64653D-
  2341 00000800 3078253038583E00   
  2342                                  fmt_lparen:
  2343 00000808 2800                    	db `(\0`
  2344                                  fmt_dotted_pair:
  2345 0000080A 202E2000                	db ` . \0`
  2346                                  fmt_rparen:
  2347 0000080E 2900                    	db `)\0`
  2348                                  fmt_space:
  2349 00000810 2000                    	db ` \0`
  2350                                  fmt_empty_vector:
  2351 00000812 23282900                	db `#()\0`
  2352                                  fmt_vector:
  2353 00000816 232800                  	db `#(\0`
  2354                                  fmt_real:
  2355 00000819 256600                  	db `%f\0`
  2356                                  fmt_fraction:
  2357 0000081C 256C642F256C6400        	db `%ld/%ld\0`
  2358                                  fmt_zero:
  2359 00000824 3000                    	db `0\0`
  2360                                  fmt_int:
  2361 00000826 256C6400                	db `%ld\0`
  2362                                  fmt_unknown_scheme_object_error:
  2363 0000082A 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  2363 00000833 6F723A20556E6B6E6F-
  2363 0000083C 776E20536368656D65-
  2363 00000845 2D6F626A6563742028-
  2363 0000084E 525454492030782530-
  2363 00000857 32582920           
  2364 0000085B 617420616464726573-     	db `at address 0x%08X\n\n\0`
  2364 00000864 73203078253038580A-
  2364 0000086D 0A00               
  2365                                  fmt_dquote:
  2366 0000086F 2200                    	db `\"\0`
  2367                                  fmt_string_char:
  2368 00000871 256300                          db `%c\0`
  2369                                  fmt_string_char_7:
  2370 00000874 5C6100                          db `\\a\0`
  2371                                  fmt_string_char_8:
  2372 00000877 5C6200                          db `\\b\0`
  2373                                  fmt_string_char_9:
  2374 0000087A 5C7400                          db `\\t\0`
  2375                                  fmt_string_char_10:
  2376 0000087D 5C6E00                          db `\\n\0`
  2377                                  fmt_string_char_11:
  2378 00000880 5C7600                          db `\\v\0`
  2379                                  fmt_string_char_12:
  2380 00000883 5C6600                          db `\\f\0`
  2381                                  fmt_string_char_13:
  2382 00000886 5C7200                          db `\\r\0`
  2383                                  fmt_string_char_34:
  2384 00000889 5C2200                          db `\\"\0`
  2385                                  fmt_string_char_92:
  2386 0000088C 5C5C00                          db `\\\\\0`
  2387                                  fmt_string_char_hex:
  2388 0000088F 5C7825583B00                    db `\\x%X;\0`
  2389                                  
  2390                                  section .text
  2391                                  
  2392                                  print_sexpr:
  2393 00001689 C8000000                	enter 0, 0
  2394 0000168D 8A07                    	mov al, byte [rdi]
  2395 0000168F 3C00                    	cmp al, T_void
  2396 00001691 7465                    	je .Lvoid
  2397 00001693 3C01                    	cmp al, T_nil
  2398 00001695 7470                    	je .Lnil
  2399 00001697 3C09                    	cmp al, T_boolean_false
  2400 00001699 747B                    	je .Lboolean_false
  2401 0000169B 3C0A                    	cmp al, T_boolean_true
  2402 0000169D 0F8482000000            	je .Lboolean_true
  2403 000016A3 3C02                    	cmp al, T_char
  2404 000016A5 0F8489000000            	je .Lchar
  2405 000016AB 3C41                    	cmp al, T_interned_symbol
  2406 000016AD 0F84CB010000            	je .Linterned_symbol
  2407 000016B3 3C42                            cmp al, T_uninterned_symbol
  2408 000016B5 0F84EF010000                    je .Luninterned_symbol
  2409 000016BB 3C21                    	cmp al, T_pair
  2410 000016BD 0F84FA010000            	je .Lpair
  2411 000016C3 3C22                    	cmp al, T_vector
  2412 000016C5 0F84C3020000            	je .Lvector
  2413 000016CB 3C04                    	cmp al, T_closure
  2414 000016CD 0F8491010000            	je .Lclosure
  2415 000016D3 3C13                    	cmp al, T_real
  2416 000016D5 0F8454030000            	je .Lreal
  2417 000016DB 3C12                    	cmp al, T_fraction
  2418 000016DD 0F847A030000            	je .Lfraction
  2419 000016E3 3C11                    	cmp al, T_integer
  2420 000016E5 0F84B3030000            	je .Linteger
  2421 000016EB 3C03                    	cmp al, T_string
  2422 000016ED 0F84BE030000            	je .Lstring
  2423                                  
  2424 000016F3 E9F6040000              	jmp .Lunknown_sexpr_type
  2425                                  
  2426                                  .Lvoid:
  2427 000016F8 48BF-                   	mov rdi, fmt_void
  2427 000016FA [6A07000000000000] 
  2428 00001702 E91A050000              	jmp .Lemit
  2429                                  
  2430                                  .Lnil:
  2431 00001707 48BF-                   	mov rdi, fmt_nil
  2431 00001709 [7207000000000000] 
  2432 00001711 E90B050000              	jmp .Lemit
  2433                                  
  2434                                  .Lboolean_false:
  2435 00001716 48BF-                   	mov rdi, fmt_boolean_false
  2435 00001718 [7507000000000000] 
  2436 00001720 E9FC040000              	jmp .Lemit
  2437                                  
  2438                                  .Lboolean_true:
  2439 00001725 48BF-                   	mov rdi, fmt_boolean_true
  2439 00001727 [7807000000000000] 
  2440 0000172F E9ED040000              	jmp .Lemit
  2441                                  
  2442                                  .Lchar:
  2443 00001734 8A4701                  	mov al, byte [rdi + 1]
  2444 00001737 3C20                    	cmp al, ' '
  2445 00001739 7E28                    	jle .Lchar_whitespace
  2446 0000173B 3C5C                    	cmp al, 92 		; backslash
  2447 0000173D 0F847C000000            	je .Lchar_backslash
  2448 00001743 3C22                    	cmp al, '"'
  2449 00001745 0F8483000000            	je .Lchar_dquote
  2450 0000174B 4825FF000000            	and rax, 255
  2451 00001751 48BF-                   	mov rdi, fmt_char_simple
  2451 00001753 [8307000000000000] 
  2452 0000175B 4889C6                  	mov rsi, rax
  2453 0000175E E9BE040000              	jmp .Lemit
  2454                                  
  2455                                  .Lchar_whitespace:
  2456 00001763 3C00                    	cmp al, 0
  2457 00001765 7476                    	je .Lchar_null
  2458 00001767 3C07                    	cmp al, 7
  2459 00001769 0F847D000000            	je .Lchar_bell
  2460 0000176F 3C08                    	cmp al, 8
  2461 00001771 0F8484000000            	je .Lchar_backspace
  2462 00001777 3C09                    	cmp al, 9
  2463 00001779 0F848B000000            	je .Lchar_tab
  2464 0000177F 3C0A                    	cmp al, 10
  2465 00001781 0F8492000000            	je .Lchar_newline
  2466 00001787 3C0C                    	cmp al, 12
  2467 00001789 0F8499000000            	je .Lchar_formfeed
  2468 0000178F 3C0D                    	cmp al, 13
  2469 00001791 0F84A0000000            	je .Lchar_return
  2470 00001797 3C1B                    	cmp al, 27
  2471 00001799 0F84A7000000            	je .Lchar_escape
  2472 0000179F 4825FF000000            	and rax, 255
  2473 000017A5 3C20                    	cmp al, ' '
  2474 000017A7 0F84A8000000            	je .Lchar_space
  2475 000017AD 48BF-                   	mov rdi, fmt_char_hex
  2475 000017AF [CF07000000000000] 
  2476 000017B7 4889C6                  	mov rsi, rax
  2477 000017BA E962040000              	jmp .Lemit	
  2478                                  
  2479                                  .Lchar_backslash:
  2480 000017BF 48BF-                   	mov rdi, fmt_char_backslash
  2480 000017C1 [7B07000000000000] 
  2481 000017C9 E953040000              	jmp .Lemit
  2482                                  
  2483                                  .Lchar_dquote:
  2484 000017CE 48BF-                   	mov rdi, fmt_char_dquote
  2484 000017D0 [7F07000000000000] 
  2485 000017D8 E944040000              	jmp .Lemit
  2486                                  
  2487                                  .Lchar_null:
  2488 000017DD 48BF-                   	mov rdi, fmt_char_null
  2488 000017DF [8807000000000000] 
  2489 000017E7 E935040000              	jmp .Lemit
  2490                                  
  2491                                  .Lchar_bell:
  2492 000017EC 48BF-                   	mov rdi, fmt_char_bell
  2492 000017EE [8E07000000000000] 
  2493 000017F6 E926040000              	jmp .Lemit
  2494                                  
  2495                                  .Lchar_backspace:
  2496 000017FB 48BF-                   	mov rdi, fmt_char_backspace
  2496 000017FD [9507000000000000] 
  2497 00001805 E917040000              	jmp .Lemit
  2498                                  
  2499                                  .Lchar_tab:
  2500 0000180A 48BF-                   	mov rdi, fmt_char_tab
  2500 0000180C [A107000000000000] 
  2501 00001814 E908040000              	jmp .Lemit
  2502                                  
  2503                                  .Lchar_newline:
  2504 00001819 48BF-                   	mov rdi, fmt_char_newline
  2504 0000181B [A707000000000000] 
  2505 00001823 E9F9030000              	jmp .Lemit
  2506                                  
  2507                                  .Lchar_formfeed:
  2508 00001828 48BF-                   	mov rdi, fmt_char_formfeed
  2508 0000182A [B107000000000000] 
  2509 00001832 E9EA030000              	jmp .Lemit
  2510                                  
  2511                                  .Lchar_return:
  2512 00001837 48BF-                   	mov rdi, fmt_char_return
  2512 00001839 [B807000000000000] 
  2513 00001841 E9DB030000              	jmp .Lemit
  2514                                  
  2515                                  .Lchar_escape:
  2516 00001846 48BF-                   	mov rdi, fmt_char_escape
  2516 00001848 [C107000000000000] 
  2517 00001850 E9CC030000              	jmp .Lemit
  2518                                  
  2519                                  .Lchar_space:
  2520 00001855 48BF-                   	mov rdi, fmt_char_space
  2520 00001857 [C707000000000000] 
  2521 0000185F E9BD030000              	jmp .Lemit
  2522                                  
  2523                                  .Lclosure:
  2524 00001864 4889FE                  	mov rsi, qword rdi
  2525 00001867 48BF-                   	mov rdi, fmt_closure
  2525 00001869 [DC07000000000000] 
  2526 00001871 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  2527 00001875 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  2528 00001879 E9A3030000              	jmp .Lemit
  2529                                  
  2530                                  .Linterned_symbol:
  2531 0000187E 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  2532 00001882 BE01000000              	mov rsi, 1		 ; size = 1 byte
  2533 00001887 488B5701                	mov rdx, qword [rdi + 1] ; length
  2534 0000188B 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  2535 0000188F 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  2536                                  	ENTER
    44 00001897 C8000000            <1>  enter 0, 0
    45 0000189B 4883E4F0            <1>  and rsp, ~15
  2537 0000189F E8(00000000)            	call fwrite
  2538                                  	LEAVE
    49 000018A4 C9                  <1>  leave
  2539 000018A5 E98C030000              	jmp .Lend
  2540                                  
  2541                                  .Luninterned_symbol:
  2542 000018AA 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  2543 000018AE 48BF-                           mov rdi, fmt_gensym
  2543 000018B0 [D707000000000000] 
  2544 000018B8 E964030000                      jmp .Lemit
  2545                                  	
  2546                                  .Lpair:
  2547 000018BD 57                      	push rdi
  2548 000018BE 48BF-                   	mov rdi, fmt_lparen
  2548 000018C0 [0808000000000000] 
  2549 000018C8 B800000000              	mov rax, 0
  2550                                          ENTER
    44 000018CD C8000000            <1>  enter 0, 0
    45 000018D1 4883E4F0            <1>  and rsp, ~15
  2551 000018D5 E8(00000000)            	call printf
  2552                                          LEAVE
    49 000018DA C9                  <1>  leave
  2553 000018DB 488B3C24                	mov rdi, qword [rsp] 	; pair
  2554 000018DF 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  2555 000018E3 E8A1FDFFFF              	call print_sexpr
  2556 000018E8 5F                      	pop rdi 		; pair
  2557 000018E9 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  2558                                  .Lcdr:
  2559 000018ED 8A07                    	mov al, byte [rdi]
  2560 000018EF 3C01                    	cmp al, T_nil
  2561 000018F1 7447                    	je .Lcdr_nil
  2562 000018F3 3C21                    	cmp al, T_pair
  2563 000018F5 7462                    	je .Lcdr_pair
  2564 000018F7 57                      	push rdi
  2565 000018F8 48BF-                   	mov rdi, fmt_dotted_pair
  2565 000018FA [0A08000000000000] 
  2566 00001902 B800000000              	mov rax, 0
  2567                                          ENTER
    44 00001907 C8000000            <1>  enter 0, 0
    45 0000190B 4883E4F0            <1>  and rsp, ~15
  2568 0000190F E8(00000000)            	call printf
  2569                                          LEAVE
    49 00001914 C9                  <1>  leave
  2570 00001915 5F                      	pop rdi
  2571 00001916 E86EFDFFFF              	call print_sexpr
  2572 0000191B 48BF-                   	mov rdi, fmt_rparen
  2572 0000191D [0E08000000000000] 
  2573 00001925 B800000000              	mov rax, 0
  2574                                          ENTER
    44 0000192A C8000000            <1>  enter 0, 0
    45 0000192E 4883E4F0            <1>  and rsp, ~15
  2575 00001932 E8(00000000)            	call printf
  2576                                          LEAVE
    49 00001937 C9                  <1>  leave
  2577 00001938 C9                      	leave
  2578 00001939 C3                      	ret
  2579                                  
  2580                                  .Lcdr_nil:
  2581 0000193A 48BF-                   	mov rdi, fmt_rparen
  2581 0000193C [0E08000000000000] 
  2582 00001944 B800000000              	mov rax, 0
  2583                                          ENTER
    44 00001949 C8000000            <1>  enter 0, 0
    45 0000194D 4883E4F0            <1>  and rsp, ~15
  2584 00001951 E8(00000000)            	call printf
  2585                                          LEAVE
    49 00001956 C9                  <1>  leave
  2586 00001957 C9                      	leave
  2587 00001958 C3                      	ret
  2588                                  
  2589                                  .Lcdr_pair:
  2590 00001959 57                      	push rdi
  2591 0000195A 48BF-                   	mov rdi, fmt_space
  2591 0000195C [1008000000000000] 
  2592 00001964 B800000000              	mov rax, 0
  2593                                          ENTER
    44 00001969 C8000000            <1>  enter 0, 0
    45 0000196D 4883E4F0            <1>  and rsp, ~15
  2594 00001971 E8(00000000)            	call printf
  2595                                          LEAVE
    49 00001976 C9                  <1>  leave
  2596 00001977 488B3C24                	mov rdi, qword [rsp]
  2597 0000197B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  2598 0000197F E805FDFFFF              	call print_sexpr
  2599 00001984 5F                      	pop rdi
  2600 00001985 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  2601 00001989 E95FFFFFFF              	jmp .Lcdr
  2602                                  
  2603                                  .Lvector:
  2604 0000198E 488B4701                	mov rax, qword [rdi + 1] ; length
  2605 00001992 4883F800                	cmp rax, 0
  2606 00001996 0F8484000000            	je .Lvector_empty
  2607 0000199C 57                      	push rdi
  2608 0000199D 48BF-                   	mov rdi, fmt_vector
  2608 0000199F [1608000000000000] 
  2609 000019A7 B800000000              	mov rax, 0
  2610                                          ENTER
    44 000019AC C8000000            <1>  enter 0, 0
    45 000019B0 4883E4F0            <1>  and rsp, ~15
  2611 000019B4 E8(00000000)            	call printf
  2612                                          LEAVE
    49 000019B9 C9                  <1>  leave
  2613 000019BA 488B3C24                	mov rdi, qword [rsp]
  2614 000019BE FF7701                  	push qword [rdi + 1]
  2615 000019C1 6A01                    	push 1
  2616 000019C3 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  2617 000019C7 E8BDFCFFFF              	call print_sexpr
  2618                                  .Lvector_loop:
  2619                                  	; [rsp] index
  2620                                  	; [rsp + 8*1] limit
  2621                                  	; [rsp + 8*2] vector
  2622 000019CC 488B0424                	mov rax, qword [rsp]
  2623 000019D0 483B442408              	cmp rax, qword [rsp + 8*1]
  2624 000019D5 7436                    	je .Lvector_end
  2625 000019D7 48BF-                   	mov rdi, fmt_space
  2625 000019D9 [1008000000000000] 
  2626 000019E1 B800000000              	mov rax, 0
  2627                                          ENTER
    44 000019E6 C8000000            <1>  enter 0, 0
    45 000019EA 4883E4F0            <1>  and rsp, ~15
  2628 000019EE E8(00000000)            	call printf
  2629                                          LEAVE
    49 000019F3 C9                  <1>  leave
  2630 000019F4 488B0424                	mov rax, qword [rsp]
  2631 000019F8 488B5C2410              	mov rbx, qword [rsp + 8*2]
  2632 000019FD 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  2633 00001A02 E882FCFFFF              	call print_sexpr
  2634 00001A07 48FF0424                	inc qword [rsp]
  2635 00001A0B EBBF                    	jmp .Lvector_loop
  2636                                  
  2637                                  .Lvector_end:
  2638 00001A0D 4883C418                	add rsp, 8*3
  2639 00001A11 48BF-                   	mov rdi, fmt_rparen
  2639 00001A13 [0E08000000000000] 
  2640 00001A1B E901020000              	jmp .Lemit	
  2641                                  
  2642                                  .Lvector_empty:
  2643 00001A20 48BF-                   	mov rdi, fmt_empty_vector
  2643 00001A22 [1208000000000000] 
  2644 00001A2A E9F2010000              	jmp .Lemit
  2645                                  
  2646                                  .Lreal:
  2647 00001A2F FF7701                  	push qword [rdi + 1]
  2648 00001A32 F20F100424              	movsd xmm0, qword [rsp]
  2649 00001A37 4883C408                	add rsp, 8*1
  2650 00001A3B 48BF-                   	mov rdi, fmt_real
  2650 00001A3D [1908000000000000] 
  2651 00001A45 B801000000              	mov rax, 1
  2652                                  	ENTER
    44 00001A4A C8000000            <1>  enter 0, 0
    45 00001A4E 4883E4F0            <1>  and rsp, ~15
  2653 00001A52 E8(00000000)            	call printf
  2654                                  	LEAVE
    49 00001A57 C9                  <1>  leave
  2655 00001A58 E9D9010000              	jmp .Lend
  2656                                  
  2657                                  .Lfraction:
  2658 00001A5D 488B7701                	mov rsi, qword [rdi + 1]
  2659 00001A61 488B5709                	mov rdx, qword [rdi + 1 + 8]
  2660 00001A65 4883FE00                	cmp rsi, 0
  2661 00001A69 7415                    	je .Lrat_zero
  2662 00001A6B 4883FA01                	cmp rdx, 1
  2663 00001A6F 741E                    	je .Lrat_int
  2664 00001A71 48BF-                   	mov rdi, fmt_fraction
  2664 00001A73 [1C08000000000000] 
  2665 00001A7B E9A1010000              	jmp .Lemit
  2666                                  
  2667                                  .Lrat_zero:
  2668 00001A80 48BF-                   	mov rdi, fmt_zero
  2668 00001A82 [2408000000000000] 
  2669 00001A8A E992010000              	jmp .Lemit
  2670                                  
  2671                                  .Lrat_int:
  2672 00001A8F 48BF-                   	mov rdi, fmt_int
  2672 00001A91 [2608000000000000] 
  2673 00001A99 E983010000              	jmp .Lemit
  2674                                  
  2675                                  .Linteger:
  2676 00001A9E 488B7701                	mov rsi, qword [rdi + 1]
  2677 00001AA2 48BF-                   	mov rdi, fmt_int
  2677 00001AA4 [2608000000000000] 
  2678 00001AAC E970010000              	jmp .Lemit
  2679                                  
  2680                                  .Lstring:
  2681 00001AB1 488D4709                	lea rax, [rdi + 1 + 8]
  2682 00001AB5 50                      	push rax
  2683 00001AB6 FF7701                  	push qword [rdi + 1]
  2684 00001AB9 48BF-                   	mov rdi, fmt_dquote
  2684 00001ABB [6F08000000000000] 
  2685 00001AC3 B800000000              	mov rax, 0
  2686                                  	ENTER
    44 00001AC8 C8000000            <1>  enter 0, 0
    45 00001ACC 4883E4F0            <1>  and rsp, ~15
  2687 00001AD0 E8(00000000)            	call printf
  2688                                  	LEAVE
    49 00001AD5 C9                  <1>  leave
  2689                                  .Lstring_loop:
  2690                                  	; qword [rsp]: limit
  2691                                  	; qword [rsp + 8*1]: char *
  2692 00001AD6 48833C2400              	cmp qword [rsp], 0
  2693 00001ADB 0F84FD000000            	je .Lstring_end
  2694 00001AE1 488B442408              	mov rax, qword [rsp + 8*1]
  2695 00001AE6 8A00                    	mov al, byte [rax]
  2696 00001AE8 4825FF000000            	and rax, 255
  2697 00001AEE 3C07                    	cmp al, 7
  2698 00001AF0 7468                            je .Lstring_char_7
  2699 00001AF2 3C08                            cmp al, 8
  2700 00001AF4 7470                            je .Lstring_char_8
  2701 00001AF6 3C09                            cmp al, 9
  2702 00001AF8 7478                            je .Lstring_char_9
  2703 00001AFA 3C0A                            cmp al, 10
  2704 00001AFC 0F847C000000                    je .Lstring_char_10
  2705 00001B02 3C0B                            cmp al, 11
  2706 00001B04 0F8480000000                    je .Lstring_char_11
  2707 00001B0A 3C0C                            cmp al, 12
  2708 00001B0C 0F8484000000                    je .Lstring_char_12
  2709 00001B12 3C0D                            cmp al, 13
  2710 00001B14 0F8488000000                    je .Lstring_char_13
  2711 00001B1A 3C22                            cmp al, 34
  2712 00001B1C 0F848C000000                    je .Lstring_char_34
  2713 00001B22 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  2715 00001B24 3C20                            cmp al, ' '
  2716 00001B26 0F8CA0000000                    jl .Lstring_char_hex
  2717 00001B2C 48BF-                           mov rdi, fmt_string_char
  2717 00001B2E [7108000000000000] 
  2718 00001B36 4889C6                          mov rsi, rax
  2719                                  .Lstring_char_emit:
  2720 00001B39 B800000000                      mov rax, 0
  2721                                          ENTER
    44 00001B3E C8000000            <1>  enter 0, 0
    45 00001B42 4883E4F0            <1>  and rsp, ~15
  2722 00001B46 E8(00000000)                    call printf
  2723                                          LEAVE
    49 00001B4B C9                  <1>  leave
  2724 00001B4C 48FF0C24                        dec qword [rsp]
  2725 00001B50 48FF442408                      inc qword [rsp + 8*1]
  2726 00001B55 E97CFFFFFF                      jmp .Lstring_loop
  2727                                  
  2728                                  .Lstring_char_7:
  2729 00001B5A 48BF-                           mov rdi, fmt_string_char_7
  2729 00001B5C [7408000000000000] 
  2730 00001B64 EBD3                            jmp .Lstring_char_emit
  2731                                  
  2732                                  .Lstring_char_8:
  2733 00001B66 48BF-                           mov rdi, fmt_string_char_8
  2733 00001B68 [7708000000000000] 
  2734 00001B70 EBC7                            jmp .Lstring_char_emit
  2735                                          
  2736                                  .Lstring_char_9:
  2737 00001B72 48BF-                           mov rdi, fmt_string_char_9
  2737 00001B74 [7A08000000000000] 
  2738 00001B7C EBBB                            jmp .Lstring_char_emit
  2739                                  
  2740                                  .Lstring_char_10:
  2741 00001B7E 48BF-                           mov rdi, fmt_string_char_10
  2741 00001B80 [7D08000000000000] 
  2742 00001B88 EBAF                            jmp .Lstring_char_emit
  2743                                  
  2744                                  .Lstring_char_11:
  2745 00001B8A 48BF-                           mov rdi, fmt_string_char_11
  2745 00001B8C [8008000000000000] 
  2746 00001B94 EBA3                            jmp .Lstring_char_emit
  2747                                  
  2748                                  .Lstring_char_12:
  2749 00001B96 48BF-                           mov rdi, fmt_string_char_12
  2749 00001B98 [8308000000000000] 
  2750 00001BA0 EB97                            jmp .Lstring_char_emit
  2751                                  
  2752                                  .Lstring_char_13:
  2753 00001BA2 48BF-                           mov rdi, fmt_string_char_13
  2753 00001BA4 [8608000000000000] 
  2754 00001BAC EB8B                            jmp .Lstring_char_emit
  2755                                  
  2756                                  .Lstring_char_34:
  2757 00001BAE 48BF-                           mov rdi, fmt_string_char_34
  2757 00001BB0 [8908000000000000] 
  2758 00001BB8 E97CFFFFFF                      jmp .Lstring_char_emit
  2759                                  
  2760                                  .Lstring_char_92:
  2761 00001BBD 48BF-                           mov rdi, fmt_string_char_92
  2761 00001BBF [8C08000000000000] 
  2762 00001BC7 E96DFFFFFF                      jmp .Lstring_char_emit
  2763                                  
  2764                                  .Lstring_char_hex:
  2765 00001BCC 48BF-                           mov rdi, fmt_string_char_hex
  2765 00001BCE [8F08000000000000] 
  2766 00001BD6 4889C6                          mov rsi, rax
  2767 00001BD9 E95BFFFFFF                      jmp .Lstring_char_emit        
  2768                                  
  2769                                  .Lstring_end:
  2770 00001BDE 4883C410                	add rsp, 8 * 2
  2771 00001BE2 48BF-                   	mov rdi, fmt_dquote
  2771 00001BE4 [6F08000000000000] 
  2772 00001BEC EB33                    	jmp .Lemit
  2773                                  
  2774                                  .Lunknown_sexpr_type:
  2775 00001BEE 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  2775 00001BF0 [2A08000000000000] 
  2776 00001BF8 4825FF000000            	and rax, 255
  2777 00001BFE 4889C2                  	mov rdx, rax
  2778 00001C01 4889F9                  	mov rcx, rdi
  2779 00001C04 488B3C25[00000000]      	mov rdi, qword [stderr]
  2780 00001C0C B800000000              	mov rax, 0
  2781                                          ENTER
    44 00001C11 C8000000            <1>  enter 0, 0
    45 00001C15 4883E4F0            <1>  and rsp, ~15
  2782 00001C19 E8(00000000)            	call fprintf
  2783                                          LEAVE
    49 00001C1E C9                  <1>  leave
  2784 00001C1F C9                              leave
  2785 00001C20 C3                              ret
  2786                                  
  2787                                  .Lemit:
  2788 00001C21 B800000000              	mov rax, 0
  2789                                          ENTER
    44 00001C26 C8000000            <1>  enter 0, 0
    45 00001C2A 4883E4F0            <1>  and rsp, ~15
  2790 00001C2E E8(00000000)            	call printf
  2791                                          LEAVE
    49 00001C33 C9                  <1>  leave
  2792 00001C34 EB00                    	jmp .Lend
  2793                                  
  2794                                  .Lend:
  2795                                  	LEAVE
    49 00001C36 C9                  <1>  leave
  2796 00001C37 C3                      	ret
  2797                                  
  2798                                  ;;; rdi: address of free variable
  2799                                  ;;; rsi: address of code-pointer
  2800                                  bind_primitive:
  2801 00001C38 C8000000                        enter 0, 0
  2802 00001C3C 57                              push rdi
  2803 00001C3D BF11000000                      mov rdi, (1 + 8 + 8)
  2804 00001C42 E8C1F7FFFF                      call malloc
  2805 00001C47 5F                              pop rdi
  2806 00001C48 C60004                          mov byte [rax], T_closure
  2807 00001C4B 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  2808 00001C53 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  2809 00001C57 488907                          mov qword [rdi], rax
  2810 00001C5A 48B8-                           mov rax, sob_void
  2810 00001C5C [0000000000000000] 
  2811 00001C64 C9                              leave
  2812 00001C65 C3                              ret
  2813                                  
  2814                                  L_code_ptr_ash:
  2815 00001C66 C8000000                        enter 0, 0
  2816 00001C6A 48837D1802                      cmp COUNT, 2
  2817 00001C6F 0F85CF140000                    jne L_error_arg_count_2
  2818 00001C75 488B7D20                        mov rdi, PARAM(0)
  2819                                          assert_integer(rdi)
    53 00001C79 803F11              <1>  cmp byte [%1], %2
    54 00001C7C 0F8561150000        <1>  jne L_error_incorrect_type
  2820 00001C82 488B4D28                        mov rcx, PARAM(1)
  2821                                          assert_integer(rcx)
    53 00001C86 803911              <1>  cmp byte [%1], %2
    54 00001C89 0F8554150000        <1>  jne L_error_incorrect_type
  2822 00001C8F 488B7F01                        mov rdi, qword [rdi + 1]
  2823 00001C93 488B4901                        mov rcx, qword [rcx + 1]
  2824 00001C97 4883F900                        cmp rcx, 0
  2825 00001C9B 7C0F                            jl .L_negative
  2826                                  .L_loop_positive:
  2827 00001C9D 4883F900                        cmp rcx, 0
  2828 00001CA1 741B                            je .L_exit
  2829 00001CA3 48D3E7                          sal rdi, cl
  2830 00001CA6 48C1E908                        shr rcx, 8
  2831 00001CAA EBF1                            jmp .L_loop_positive
  2832                                  .L_negative:
  2833 00001CAC 48F7D9                          neg rcx
  2834                                  .L_loop_negative:
  2835 00001CAF 4883F900                        cmp rcx, 0
  2836 00001CB3 7409                            je .L_exit
  2837 00001CB5 48D3FF                          sar rdi, cl
  2838 00001CB8 48C1E908                        shr rcx, 8
  2839 00001CBC EBF1                            jmp .L_loop_negative
  2840                                  .L_exit:
  2841 00001CBE E89B130000                      call make_integer
  2842 00001CC3 C9                              leave
  2843 00001CC4 C22000                          ret AND_KILL_FRAME(2)
  2844                                  
  2845                                  L_code_ptr_logand:
  2846 00001CC7 C8000000                        enter 0, 0
  2847 00001CCB 48837D1802                      cmp COUNT, 2
  2848 00001CD0 0F856E140000                    jne L_error_arg_count_2
  2849 00001CD6 4C8B4520                        mov r8, PARAM(0)
  2850                                          assert_integer(r8)
    53 00001CDA 41803811            <1>  cmp byte [%1], %2
    54 00001CDE 0F85FF140000        <1>  jne L_error_incorrect_type
  2851 00001CE4 4C8B4D28                        mov r9, PARAM(1)
  2852                                          assert_integer(r9)
    53 00001CE8 41803911            <1>  cmp byte [%1], %2
    54 00001CEC 0F85F1140000        <1>  jne L_error_incorrect_type
  2853 00001CF2 498B7801                        mov rdi, qword [r8 + 1]
  2854 00001CF6 49237901                        and rdi, qword [r9 + 1]
  2855 00001CFA E85F130000                      call make_integer
  2856 00001CFF C9                              leave
  2857 00001D00 C22000                          ret AND_KILL_FRAME(2)
  2858                                  
  2859                                  L_code_ptr_logor:
  2860 00001D03 C8000000                        enter 0, 0
  2861 00001D07 48837D1802                      cmp COUNT, 2
  2862 00001D0C 0F8532140000                    jne L_error_arg_count_2
  2863 00001D12 4C8B4520                        mov r8, PARAM(0)
  2864                                          assert_integer(r8)
    53 00001D16 41803811            <1>  cmp byte [%1], %2
    54 00001D1A 0F85C3140000        <1>  jne L_error_incorrect_type
  2865 00001D20 4C8B4D28                        mov r9, PARAM(1)
  2866                                          assert_integer(r9)
    53 00001D24 41803911            <1>  cmp byte [%1], %2
    54 00001D28 0F85B5140000        <1>  jne L_error_incorrect_type
  2867 00001D2E 498B7801                        mov rdi, qword [r8 + 1]
  2868 00001D32 490B7901                        or rdi, qword [r9 + 1]
  2869 00001D36 E823130000                      call make_integer
  2870 00001D3B C9                              leave
  2871 00001D3C C22000                          ret AND_KILL_FRAME(2)
  2872                                  
  2873                                  L_code_ptr_logxor:
  2874 00001D3F C8000000                        enter 0, 0
  2875 00001D43 48837D1802                      cmp COUNT, 2
  2876 00001D48 0F85F6130000                    jne L_error_arg_count_2
  2877 00001D4E 4C8B4520                        mov r8, PARAM(0)
  2878                                          assert_integer(r8)
    53 00001D52 41803811            <1>  cmp byte [%1], %2
    54 00001D56 0F8587140000        <1>  jne L_error_incorrect_type
  2879 00001D5C 4C8B4D28                        mov r9, PARAM(1)
  2880                                          assert_integer(r9)
    53 00001D60 41803911            <1>  cmp byte [%1], %2
    54 00001D64 0F8579140000        <1>  jne L_error_incorrect_type
  2881 00001D6A 498B7801                        mov rdi, qword [r8 + 1]
  2882 00001D6E 49337901                        xor rdi, qword [r9 + 1]
  2883 00001D72 E8E7120000                      call make_integer
  2884                                          LEAVE
    49 00001D77 C9                  <1>  leave
  2885 00001D78 C22000                          ret AND_KILL_FRAME(2)
  2886                                  
  2887                                  L_code_ptr_lognot:
  2888 00001D7B C8000000                        enter 0, 0
  2889 00001D7F 48837D1801                      cmp COUNT, 1
  2890 00001D84 0F8585130000                    jne L_error_arg_count_1
  2891 00001D8A 4C8B4520                        mov r8, PARAM(0)
  2892                                          assert_integer(r8)
    53 00001D8E 41803811            <1>  cmp byte [%1], %2
    54 00001D92 0F854B140000        <1>  jne L_error_incorrect_type
  2893 00001D98 498B7801                        mov rdi, qword [r8 + 1]
  2894 00001D9C 48F7D7                          not rdi
  2895 00001D9F E8BA120000                      call make_integer
  2896 00001DA4 C9                              leave
  2897 00001DA5 C21800                          ret AND_KILL_FRAME(1)
  2898                                  
  2899                                  
  2900                                  L_code_ptr_bin_apply:
  2901 00001DA8 C8000000                        enter 0, 0
  2902 00001DAC 48837D1802                      cmp COUNT, 2
  2903 00001DB1 0F8C8D130000                    jl L_error_arg_count_2    ; Need at least 2 arguments
  2904                                          
  2905 00001DB7 4C8B4518                        mov r8, COUNT             ; Save original argument count
  2906 00001DBB 49FFC8                          dec r8                    ; Last argument is the list
  2907 00001DBE 4E8B4CC520                      mov r9, PARAM(r8)         ; Get the list (last argument)
  2908 00001DC3 488B5D20                        mov rbx, PARAM(0)         ; Get the function (first argument)
  2909                                          ; Count elements in the list
  2910 00001DC7 41BA00000000                    mov r10, 0                ; List element counter
  2911 00001DCD 4D89CB                          mov r11, r9               ; List pointer for counting
  2912                                  
  2913                                          
  2914                                  .count_loop:
  2915 00001DD0 41803B01                        cmp byte [r11], T_nil
  2916 00001DD4 7413                            je .prepare_stack
  2917                                          assert_pair(r11)
    53 00001DD6 41803B21            <1>  cmp byte [%1], %2
    54 00001DDA 0F8503140000        <1>  jne L_error_incorrect_type
  2918 00001DE0 49FFC2                          inc r10                   ; Increment list element count
  2919 00001DE3 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
  2920 00001DE7 EBE7                            jmp .count_loop
  2921                                  
  2922                                  .prepare_stack:
  2923                                          ; Calculate total arguments (direct args + list elements)
  2924 00001DE9 41BB00000000                    mov r11, 0             ; Number of direct arguments
  2925 00001DEF 4D01D3                          add r11, r10            ; Add list elements count
  2926                                          
  2927                                          ; Allocate new frame
  2928 00001DF2 4C89D8                          mov rax, r11            ; Total argument count
  2929 00001DF5 48C1E003                        shl rax, 3              ; Multiply by 8 for byte count
  2930 00001DF9 4883C020                        add rax, 8*4            ; Add space for ret, env, old rbp, arg count
  2931 00001DFD 4989C4                          mov r12, rax            ; Save frame size
  2932                                          
  2933 00001E00 4C29E4                          sub rsp, r12            ; Allocate frame
  2934                                          
  2935                                          ; Copy direct arguments (excluding the list)
  2936 00001E03 4C89C1                          mov rcx, r8              ; Number of direct arguments
  2937 00001E06 48FFC9                          dec rcx                  ; Exclude the list
  2938 00001E09 BA00000000                      mov rdx, 0              ; Destination offset
  2939                                  
  2940                                  .copy_list:
  2941                                          ; Copy list elements
  2942 00001E0E 4D89CD                          mov r13, r9             ; List pointer
  2943                                  .copy_list_loop:
  2944 00001E11 41807D0001                      cmp byte [r13], T_nil
  2945 00001E16 7412                            je .finish_frame
  2946 00001E18 498B4501                        mov rax, SOB_PAIR_CAR(r13)    ; Get list element
  2947 00001E1C 488944D420                      mov [rsp + 8*4 + rdx*8], rax  ; Store in frame
  2948 00001E21 48FFC2                          inc rdx
  2949 00001E24 4D8B6D09                        mov r13, SOB_PAIR_CDR(r13)
  2950 00001E28 EBE7                            jmp .copy_list_loop
  2951                                  
  2952                                  .finish_frame:
  2953                                          ; Set up frame
  2954 00001E2A 4C89D8                          mov rax, r11            ; Total argument count
  2955 00001E2D 4889442418                      mov [rsp + 8*3], rax    ; Store argument count
  2956 00001E32 488B4510                        mov rax, [rbp + 8*2]    ; Get current env
  2957 00001E36 4889442410                      mov [rsp + 8*2], rax    ; Store env
  2958 00001E3B 488B4508                        mov rax, [rbp + 8*1]    ; Get return address
  2959 00001E3F 4889442408                      mov [rsp + 8*1], rax    ; Store return address
  2960 00001E44 4889E8                          mov rax, rbp            ; Get old rbp
  2961 00001E47 48890424                        mov [rsp], rax          ; Store old rbp
  2962                                          
  2963                                          ; Get the function
  2964 00001E4B 4889D8                          mov rax, rbx
  2965                                          assert_closure(rax)
    53 00001E4E 803804              <1>  cmp byte [%1], %2
    54 00001E51 0F858C130000        <1>  jne L_error_incorrect_type
  2966                                          
  2967                                          ; Set up for call
  2968 00001E57 4889E5                          mov rbp, rsp            ; Set new frame pointer
  2969 00001E5A 4889EC                          mov rsp, rbp            ; Align stack pointer
  2970                                          
  2971                                          ; Call the function
  2972 00001E5D FF7001                          push SOB_CLOSURE_ENV(rax)
  2973 00001E60 FF5009                          call SOB_CLOSURE_CODE(rax)
  2974                                                  
  2975 00001E63 C9                              leave
  2976 00001E64 C22000                          ret AND_KILL_FRAME(2)
  2977                                          
  2978                                  L_code_ptr_is_null:
  2979 00001E67 C8000000                        enter 0, 0
  2980 00001E6B 48837D1801                      cmp COUNT, 1
  2981 00001E70 0F8599120000                    jne L_error_arg_count_1
  2982 00001E76 488B4520                        mov rax, PARAM(0)
  2983 00001E7A 803801                          cmp byte [rax], T_nil
  2984 00001E7D 750C                            jne .L_false
  2985 00001E7F 48B8-                           mov rax, sob_boolean_true
  2985 00001E81 [0300000000000000] 
  2986 00001E89 EB0A                            jmp .L_end
  2987                                  .L_false:
  2988 00001E8B 48B8-                           mov rax, sob_boolean_false
  2988 00001E8D [0200000000000000] 
  2989                                  .L_end:
  2990 00001E95 C9                              leave
  2991 00001E96 C21800                          ret AND_KILL_FRAME(1)
  2992                                  
  2993                                  L_code_ptr_is_pair:
  2994 00001E99 C8000000                        enter 0, 0
  2995 00001E9D 48837D1801                      cmp COUNT, 1
  2996 00001EA2 0F8567120000                    jne L_error_arg_count_1
  2997 00001EA8 488B4520                        mov rax, PARAM(0)
  2998 00001EAC 803821                          cmp byte [rax], T_pair
  2999 00001EAF 750C                            jne .L_false
  3000 00001EB1 48B8-                           mov rax, sob_boolean_true
  3000 00001EB3 [0300000000000000] 
  3001 00001EBB EB0A                            jmp .L_end
  3002                                  .L_false:
  3003 00001EBD 48B8-                           mov rax, sob_boolean_false
  3003 00001EBF [0200000000000000] 
  3004                                  .L_end:
  3005 00001EC7 C9                              leave
  3006 00001EC8 C21800                          ret AND_KILL_FRAME(1)
  3007                                          
  3008                                  L_code_ptr_is_void:
  3009 00001ECB C8000000                        enter 0, 0
  3010 00001ECF 48837D1801                      cmp COUNT, 1
  3011 00001ED4 0F8535120000                    jne L_error_arg_count_1
  3012 00001EDA 488B4520                        mov rax, PARAM(0)
  3013 00001EDE 803800                          cmp byte [rax], T_void
  3014 00001EE1 750C                            jne .L_false
  3015 00001EE3 48B8-                           mov rax, sob_boolean_true
  3015 00001EE5 [0300000000000000] 
  3016 00001EED EB0A                            jmp .L_end
  3017                                  .L_false:
  3018 00001EEF 48B8-                           mov rax, sob_boolean_false
  3018 00001EF1 [0200000000000000] 
  3019                                  .L_end:
  3020 00001EF9 C9                              leave
  3021 00001EFA C21800                          ret AND_KILL_FRAME(1)
  3022                                  
  3023                                  L_code_ptr_is_char:
  3024 00001EFD C8000000                        enter 0, 0
  3025 00001F01 48837D1801                      cmp COUNT, 1
  3026 00001F06 0F8503120000                    jne L_error_arg_count_1
  3027 00001F0C 488B4520                        mov rax, PARAM(0)
  3028 00001F10 803802                          cmp byte [rax], T_char
  3029 00001F13 750C                            jne .L_false
  3030 00001F15 48B8-                           mov rax, sob_boolean_true
  3030 00001F17 [0300000000000000] 
  3031 00001F1F EB0A                            jmp .L_end
  3032                                  .L_false:
  3033 00001F21 48B8-                           mov rax, sob_boolean_false
  3033 00001F23 [0200000000000000] 
  3034                                  .L_end:
  3035 00001F2B C9                              leave
  3036 00001F2C C21800                          ret AND_KILL_FRAME(1)
  3037                                  
  3038                                  L_code_ptr_is_string:
  3039 00001F2F C8000000                        enter 0, 0
  3040 00001F33 48837D1801                      cmp COUNT, 1
  3041 00001F38 0F85D1110000                    jne L_error_arg_count_1
  3042 00001F3E 488B4520                        mov rax, PARAM(0)
  3043 00001F42 803803                          cmp byte [rax], T_string
  3044 00001F45 750C                            jne .L_false
  3045 00001F47 48B8-                           mov rax, sob_boolean_true
  3045 00001F49 [0300000000000000] 
  3046 00001F51 EB0A                            jmp .L_end
  3047                                  .L_false:
  3048 00001F53 48B8-                           mov rax, sob_boolean_false
  3048 00001F55 [0200000000000000] 
  3049                                  .L_end:
  3050 00001F5D C9                              leave
  3051 00001F5E C21800                          ret AND_KILL_FRAME(1)
  3052                                  
  3053                                  L_code_ptr_is_symbol:
  3054 00001F61 C8000000                        enter 0, 0
  3055 00001F65 48837D1801                      cmp COUNT, 1
  3056 00001F6A 0F859F110000                    jne L_error_arg_count_1
  3057 00001F70 4C8B4520                        mov r8, PARAM(0)
  3058 00001F74 41802040                        and byte [r8], T_symbol
  3059 00001F78 740C                            jz .L_false
  3060 00001F7A 48B8-                           mov rax, sob_boolean_true
  3060 00001F7C [0300000000000000] 
  3061 00001F84 EB0A                            jmp .L_exit
  3062                                  .L_false:
  3063 00001F86 48B8-                           mov rax, sob_boolean_false
  3063 00001F88 [0200000000000000] 
  3064                                  .L_exit:
  3065 00001F90 C9                              leave
  3066 00001F91 C21800                          ret AND_KILL_FRAME(1)
  3067                                  
  3068                                  L_code_ptr_is_uninterned_symbol:
  3069 00001F94 C8000000                        enter 0, 0
  3070 00001F98 48837D1801                      cmp COUNT, 1
  3071 00001F9D 0F856C110000                    jne L_error_arg_count_1
  3072 00001FA3 4C8B4520                        mov r8, PARAM(0)
  3073 00001FA7 41803842                        cmp byte [r8], T_uninterned_symbol
  3074 00001FAB 750C                            jne .L_false
  3075 00001FAD 48B8-                           mov rax, sob_boolean_true
  3075 00001FAF [0300000000000000] 
  3076 00001FB7 EB0A                            jmp .L_exit
  3077                                  .L_false:
  3078 00001FB9 48B8-                           mov rax, sob_boolean_false
  3078 00001FBB [0200000000000000] 
  3079                                  .L_exit:
  3080 00001FC3 C9                              leave
  3081 00001FC4 C21800                          ret AND_KILL_FRAME(1)
  3082                                  
  3083                                  L_code_ptr_is_interned_symbol:
  3084 00001FC7 C8000000                        enter 0, 0
  3085 00001FCB 48837D1801                      cmp COUNT, 1
  3086 00001FD0 0F8539110000                    jne L_error_arg_count_1
  3087 00001FD6 488B4520                        mov rax, PARAM(0)
  3088 00001FDA 803841                          cmp byte [rax], T_interned_symbol
  3089 00001FDD 750C                            jne .L_false
  3090 00001FDF 48B8-                           mov rax, sob_boolean_true
  3090 00001FE1 [0300000000000000] 
  3091 00001FE9 EB0A                            jmp .L_end
  3092                                  .L_false:
  3093 00001FEB 48B8-                           mov rax, sob_boolean_false
  3093 00001FED [0200000000000000] 
  3094                                  .L_end:
  3095 00001FF5 C9                              leave
  3096 00001FF6 C21800                          ret AND_KILL_FRAME(1)
  3097                                  
  3098                                  L_code_ptr_gensym:
  3099 00001FF9 C8000000                        enter 0, 0
  3100 00001FFD 48837D1800                      cmp COUNT, 0
  3101 00002002 0F85D2100000                    jne L_error_arg_count_0
  3102 00002008 48FF0425[95080000]              inc qword [gensym_count]
  3103 00002010 BF09000000                      mov rdi, (1 + 8)
  3104 00002015 E8EEF3FFFF                      call malloc
  3105 0000201A C60042                          mov byte [rax], T_uninterned_symbol
  3106 0000201D 488B0C25[95080000]              mov rcx, qword [gensym_count]
  3107 00002025 48894801                        mov qword [rax + 1], rcx
  3108 00002029 C9                              leave
  3109 0000202A C21000                          ret AND_KILL_FRAME(0)
  3110                                  
  3111                                  L_code_ptr_is_vector:
  3112 0000202D C8000000                        enter 0, 0
  3113 00002031 48837D1801                      cmp COUNT, 1
  3114 00002036 0F85D3100000                    jne L_error_arg_count_1
  3115 0000203C 488B4520                        mov rax, PARAM(0)
  3116 00002040 803822                          cmp byte [rax], T_vector
  3117 00002043 750C                            jne .L_false
  3118 00002045 48B8-                           mov rax, sob_boolean_true
  3118 00002047 [0300000000000000] 
  3119 0000204F EB0A                            jmp .L_end
  3120                                  .L_false:
  3121 00002051 48B8-                           mov rax, sob_boolean_false
  3121 00002053 [0200000000000000] 
  3122                                  .L_end:
  3123 0000205B C9                              leave
  3124 0000205C C21800                          ret AND_KILL_FRAME(1)
  3125                                  
  3126                                  L_code_ptr_is_closure:
  3127 0000205F C8000000                        enter 0, 0
  3128 00002063 48837D1801                      cmp COUNT, 1
  3129 00002068 0F85A1100000                    jne L_error_arg_count_1
  3130 0000206E 488B4520                        mov rax, PARAM(0)
  3131 00002072 803804                          cmp byte [rax], T_closure
  3132 00002075 750C                            jne .L_false
  3133 00002077 48B8-                           mov rax, sob_boolean_true
  3133 00002079 [0300000000000000] 
  3134 00002081 EB0A                            jmp .L_end
  3135                                  .L_false:
  3136 00002083 48B8-                           mov rax, sob_boolean_false
  3136 00002085 [0200000000000000] 
  3137                                  .L_end:
  3138 0000208D C9                              leave
  3139 0000208E C21800                          ret AND_KILL_FRAME(1)
  3140                                  
  3141                                  L_code_ptr_is_real:
  3142 00002091 C8000000                        enter 0, 0
  3143 00002095 48837D1801                      cmp COUNT, 1
  3144 0000209A 0F856F100000                    jne L_error_arg_count_1
  3145 000020A0 488B4520                        mov rax, PARAM(0)
  3146 000020A4 803813                          cmp byte [rax], T_real
  3147 000020A7 750C                            jne .L_false
  3148 000020A9 48B8-                           mov rax, sob_boolean_true
  3148 000020AB [0300000000000000] 
  3149 000020B3 EB0A                            jmp .L_end
  3150                                  .L_false:
  3151 000020B5 48B8-                           mov rax, sob_boolean_false
  3151 000020B7 [0200000000000000] 
  3152                                  .L_end:
  3153 000020BF C9                              leave
  3154 000020C0 C21800                          ret AND_KILL_FRAME(1)
  3155                                  
  3156                                  L_code_ptr_is_fraction:
  3157 000020C3 C8000000                        enter 0, 0
  3158 000020C7 48837D1801                      cmp COUNT, 1
  3159 000020CC 0F853D100000                    jne L_error_arg_count_1
  3160 000020D2 488B4520                        mov rax, PARAM(0)
  3161 000020D6 803812                          cmp byte [rax], T_fraction
  3162 000020D9 750C                            jne .L_false
  3163 000020DB 48B8-                           mov rax, sob_boolean_true
  3163 000020DD [0300000000000000] 
  3164 000020E5 EB0A                            jmp .L_end
  3165                                  .L_false:
  3166 000020E7 48B8-                           mov rax, sob_boolean_false
  3166 000020E9 [0200000000000000] 
  3167                                  .L_end:
  3168 000020F1 C9                              leave
  3169 000020F2 C21800                          ret AND_KILL_FRAME(1)
  3170                                  
  3171                                  L_code_ptr_is_boolean:
  3172 000020F5 C8000000                        enter 0, 0
  3173 000020F9 48837D1801                      cmp COUNT, 1
  3174 000020FE 0F850B100000                    jne L_error_arg_count_1
  3175 00002104 488B4520                        mov rax, PARAM(0)
  3176 00002108 8A18                            mov bl, byte [rax]
  3177 0000210A 80E308                          and bl, T_boolean
  3178 0000210D 740C                            je .L_false
  3179 0000210F 48B8-                           mov rax, sob_boolean_true
  3179 00002111 [0300000000000000] 
  3180 00002119 EB0A                            jmp .L_end
  3181                                  .L_false:
  3182 0000211B 48B8-                           mov rax, sob_boolean_false
  3182 0000211D [0200000000000000] 
  3183                                  .L_end:
  3184 00002125 C9                              leave
  3185 00002126 C21800                          ret AND_KILL_FRAME(1)
  3186                                          
  3187                                  L_code_ptr_is_boolean_false:
  3188 00002129 C8000000                        enter 0, 0
  3189 0000212D 48837D1801                      cmp COUNT, 1
  3190 00002132 0F85D70F0000                    jne L_error_arg_count_1
  3191 00002138 488B4520                        mov rax, PARAM(0)
  3192 0000213C 8A18                            mov bl, byte [rax]
  3193 0000213E 80FB09                          cmp bl, T_boolean_false
  3194 00002141 750C                            jne .L_false
  3195 00002143 48B8-                           mov rax, sob_boolean_true
  3195 00002145 [0300000000000000] 
  3196 0000214D EB0A                            jmp .L_end
  3197                                  .L_false:
  3198 0000214F 48B8-                           mov rax, sob_boolean_false
  3198 00002151 [0200000000000000] 
  3199                                  .L_end:
  3200 00002159 C9                              leave
  3201 0000215A C21800                          ret AND_KILL_FRAME(1)
  3202                                  
  3203                                  L_code_ptr_is_boolean_true:
  3204 0000215D C8000000                        enter 0, 0
  3205 00002161 48837D1801                      cmp COUNT, 1
  3206 00002166 0F85A30F0000                    jne L_error_arg_count_1
  3207 0000216C 488B4520                        mov rax, PARAM(0)
  3208 00002170 8A18                            mov bl, byte [rax]
  3209 00002172 80FB0A                          cmp bl, T_boolean_true
  3210 00002175 750C                            jne .L_false
  3211 00002177 48B8-                           mov rax, sob_boolean_true
  3211 00002179 [0300000000000000] 
  3212 00002181 EB0A                            jmp .L_end
  3213                                  .L_false:
  3214 00002183 48B8-                           mov rax, sob_boolean_false
  3214 00002185 [0200000000000000] 
  3215                                  .L_end:
  3216 0000218D C9                              leave
  3217 0000218E C21800                          ret AND_KILL_FRAME(1)
  3218                                  
  3219                                  L_code_ptr_is_number:
  3220 00002191 C8000000                        enter 0, 0
  3221 00002195 48837D1801                      cmp COUNT, 1
  3222 0000219A 0F856F0F0000                    jne L_error_arg_count_1
  3223 000021A0 488B4520                        mov rax, PARAM(0)
  3224 000021A4 8A18                            mov bl, byte [rax]
  3225 000021A6 80E310                          and bl, T_number
  3226 000021A9 740C                            jz .L_false
  3227 000021AB 48B8-                           mov rax, sob_boolean_true
  3227 000021AD [0300000000000000] 
  3228 000021B5 EB0A                            jmp .L_end
  3229                                  .L_false:
  3230 000021B7 48B8-                           mov rax, sob_boolean_false
  3230 000021B9 [0200000000000000] 
  3231                                  .L_end:
  3232 000021C1 C9                              leave
  3233 000021C2 C21800                          ret AND_KILL_FRAME(1)
  3234                                          
  3235                                  L_code_ptr_is_collection:
  3236 000021C5 C8000000                        enter 0, 0
  3237 000021C9 48837D1801                      cmp COUNT, 1
  3238 000021CE 0F853B0F0000                    jne L_error_arg_count_1
  3239 000021D4 488B4520                        mov rax, PARAM(0)
  3240 000021D8 8A18                            mov bl, byte [rax]
  3241 000021DA 80E320                          and bl, T_collection
  3242 000021DD 740C                            je .L_false
  3243 000021DF 48B8-                           mov rax, sob_boolean_true
  3243 000021E1 [0300000000000000] 
  3244 000021E9 EB0A                            jmp .L_end
  3245                                  .L_false:
  3246 000021EB 48B8-                           mov rax, sob_boolean_false
  3246 000021ED [0200000000000000] 
  3247                                  .L_end:
  3248 000021F5 C9                              leave
  3249 000021F6 C21800                          ret AND_KILL_FRAME(1)
  3250                                  
  3251                                  L_code_ptr_cons:
  3252 000021F9 C8000000                        enter 0, 0
  3253 000021FD 48837D1802                      cmp COUNT, 2
  3254 00002202 0F853C0F0000                    jne L_error_arg_count_2
  3255 00002208 BF11000000                      mov rdi, (1 + 8 + 8)
  3256 0000220D E8F6F1FFFF                      call malloc
  3257 00002212 C60021                          mov byte [rax], T_pair
  3258 00002215 488B5D20                        mov rbx, PARAM(0)
  3259 00002219 48895801                        mov SOB_PAIR_CAR(rax), rbx
  3260 0000221D 488B5D28                        mov rbx, PARAM(1)
  3261 00002221 48895809                        mov SOB_PAIR_CDR(rax), rbx
  3262 00002225 C9                              leave
  3263 00002226 C22000                          ret AND_KILL_FRAME(2)
  3264                                  
  3265                                  L_code_ptr_display_sexpr:
  3266 00002229 C8000000                        enter 0, 0
  3267 0000222D 48837D1801                      cmp COUNT, 1
  3268 00002232 0F85D70E0000                    jne L_error_arg_count_1
  3269 00002238 488B7D20                        mov rdi, PARAM(0)
  3270 0000223C E848F4FFFF                      call print_sexpr
  3271 00002241 48B8-                           mov rax, sob_void
  3271 00002243 [0000000000000000] 
  3272 0000224B C9                              leave
  3273 0000224C C21800                          ret AND_KILL_FRAME(1)
  3274                                  
  3275                                  L_code_ptr_write_char:
  3276 0000224F C8000000                        enter 0, 0
  3277 00002253 48837D1801                      cmp COUNT, 1
  3278 00002258 0F85B10E0000                    jne L_error_arg_count_1
  3279 0000225E 488B4520                        mov rax, PARAM(0)
  3280                                          assert_char(rax)
    53 00002262 803802              <1>  cmp byte [%1], %2
    54 00002265 0F85780F0000        <1>  jne L_error_incorrect_type
  3281 0000226B 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  3282 0000226E 4825FF000000                    and rax, 255
  3283 00002274 48BF-                           mov rdi, fmt_char
  3283 00002276 [9D08000000000000] 
  3284 0000227E 4889C6                          mov rsi, rax
  3285 00002281 B800000000                      mov rax, 0
  3286                                          ENTER
    44 00002286 C8000000            <1>  enter 0, 0
    45 0000228A 4883E4F0            <1>  and rsp, ~15
  3287 0000228E E8(00000000)                    call printf
  3288                                          LEAVE
    49 00002293 C9                  <1>  leave
  3289 00002294 48B8-                           mov rax, sob_void
  3289 00002296 [0000000000000000] 
  3290 0000229E C9                              leave
  3291 0000229F C21800                          ret AND_KILL_FRAME(1)
  3292                                  
  3293                                  L_code_ptr_car:
  3294 000022A2 C8000000                        enter 0, 0
  3295 000022A6 48837D1801                      cmp COUNT, 1
  3296 000022AB 0F855E0E0000                    jne L_error_arg_count_1
  3297 000022B1 488B4520                        mov rax, PARAM(0)
  3298                                          assert_pair(rax)
    53 000022B5 803821              <1>  cmp byte [%1], %2
    54 000022B8 0F85250F0000        <1>  jne L_error_incorrect_type
  3299 000022BE 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  3300 000022C2 C9                              leave
  3301 000022C3 C21800                          ret AND_KILL_FRAME(1)
  3302                                          
  3303                                  L_code_ptr_cdr:
  3304 000022C6 C8000000                        enter 0, 0
  3305 000022CA 48837D1801                      cmp COUNT, 1
  3306 000022CF 0F853A0E0000                    jne L_error_arg_count_1
  3307 000022D5 488B4520                        mov rax, PARAM(0)
  3308                                          assert_pair(rax)
    53 000022D9 803821              <1>  cmp byte [%1], %2
    54 000022DC 0F85010F0000        <1>  jne L_error_incorrect_type
  3309 000022E2 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  3310 000022E6 C9                              leave
  3311 000022E7 C21800                          ret AND_KILL_FRAME(1)
  3312                                          
  3313                                  L_code_ptr_string_length:
  3314 000022EA C8000000                        enter 0, 0
  3315 000022EE 48837D1801                      cmp COUNT, 1
  3316 000022F3 0F85160E0000                    jne L_error_arg_count_1
  3317 000022F9 488B4520                        mov rax, PARAM(0)
  3318                                          assert_string(rax)
    53 000022FD 803803              <1>  cmp byte [%1], %2
    54 00002300 0F85DD0E0000        <1>  jne L_error_incorrect_type
  3319 00002306 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  3320 0000230A E84F0D0000                      call make_integer
  3321 0000230F C9                              leave
  3322 00002310 C21800                          ret AND_KILL_FRAME(1)
  3323                                  
  3324                                  L_code_ptr_vector_length:
  3325 00002313 C8000000                        enter 0, 0
  3326 00002317 48837D1801                      cmp COUNT, 1
  3327 0000231C 0F85ED0D0000                    jne L_error_arg_count_1
  3328 00002322 488B4520                        mov rax, PARAM(0)
  3329                                          assert_vector(rax)
    53 00002326 803822              <1>  cmp byte [%1], %2
    54 00002329 0F85B40E0000        <1>  jne L_error_incorrect_type
  3330 0000232F 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  3331 00002333 E8260D0000                      call make_integer
  3332 00002338 C9                              leave
  3333 00002339 C21800                          ret AND_KILL_FRAME(1)
  3334                                  
  3335                                  L_code_ptr_real_to_integer:
  3336 0000233C C8000000                        enter 0, 0
  3337 00002340 48837D1801                      cmp COUNT, 1
  3338 00002345 0F85C40D0000                    jne L_error_arg_count_1
  3339 0000234B 488B5D20                        mov rbx, PARAM(0)
  3340                                          assert_real(rbx)
    53 0000234F 803B13              <1>  cmp byte [%1], %2
    54 00002352 0F858B0E0000        <1>  jne L_error_incorrect_type
  3341 00002358 F20F104301                      movsd xmm0, qword [rbx + 1]
  3342 0000235D F2480F2CF8                      cvttsd2si rdi, xmm0
  3343 00002362 E8F70C0000                      call make_integer
  3344 00002367 C9                              leave
  3345 00002368 C21800                          ret AND_KILL_FRAME(1)
  3346                                  
  3347                                  L_code_ptr_exit:
  3348 0000236B C8000000                        enter 0, 0
  3349 0000236F 48837D1800                      cmp COUNT, 0
  3350 00002374 0F85600D0000                    jne L_error_arg_count_0
  3351 0000237A B800000000                      mov rax, 0
  3352 0000237F E8(00000000)                    call exit
  3353                                  
  3354                                  L_code_ptr_integer_to_real:
  3355 00002384 C8000000                        enter 0, 0
  3356 00002388 48837D1801                      cmp COUNT, 1
  3357 0000238D 0F857C0D0000                    jne L_error_arg_count_1
  3358 00002393 488B4520                        mov rax, PARAM(0)
  3359                                          assert_integer(rax)
    53 00002397 803811              <1>  cmp byte [%1], %2
    54 0000239A 0F85430E0000        <1>  jne L_error_incorrect_type
  3360 000023A0 FF7001                          push qword [rax + 1]
  3361 000023A3 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  3362 000023A9 E8980C0000                      call make_real
  3363 000023AE C9                              leave
  3364 000023AF C21800                          ret AND_KILL_FRAME(1)
  3365                                  
  3366                                  L_code_ptr_fraction_to_real:
  3367 000023B2 C8000000                        enter 0, 0
  3368 000023B6 48837D1801                      cmp COUNT, 1
  3369 000023BB 0F854E0D0000                    jne L_error_arg_count_1
  3370 000023C1 488B4520                        mov rax, PARAM(0)
  3371                                          assert_fraction(rax)
    53 000023C5 803812              <1>  cmp byte [%1], %2
    54 000023C8 0F85150E0000        <1>  jne L_error_incorrect_type
  3372 000023CE FF7001                          push qword [rax + 1]
  3373 000023D1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  3374 000023D7 FF7009                          push qword [rax + 1 + 8]
  3375 000023DA F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  3376 000023E0 F20F5EC1                        divsd xmm0, xmm1
  3377 000023E4 E85D0C0000                      call make_real
  3378 000023E9 C9                              leave
  3379 000023EA C21800                          ret AND_KILL_FRAME(1)
  3380                                  
  3381                                  L_code_ptr_char_to_integer:
  3382 000023ED C8000000                        enter 0, 0
  3383 000023F1 48837D1801                      cmp COUNT, 1
  3384 000023F6 0F85130D0000                    jne L_error_arg_count_1
  3385 000023FC 488B4520                        mov rax, PARAM(0)
  3386                                          assert_char(rax)
    53 00002400 803802              <1>  cmp byte [%1], %2
    54 00002403 0F85DA0D0000        <1>  jne L_error_incorrect_type
  3387 00002409 8A4001                          mov al, byte [rax + 1]
  3388 0000240C 4825FF000000                    and rax, 255
  3389 00002412 4889C7                          mov rdi, rax
  3390 00002415 E8440C0000                      call make_integer
  3391 0000241A C9                              leave
  3392 0000241B C21800                          ret AND_KILL_FRAME(1)
  3393                                  
  3394                                  L_code_ptr_integer_to_fraction:
  3395 0000241E C8000000                        enter 0, 0
  3396 00002422 48837D1801                      cmp COUNT, 1
  3397 00002427 0F85E20C0000                    jne L_error_arg_count_1
  3398 0000242D 4C8B4520                        mov r8, PARAM(0)
  3399                                          assert_integer(r8)
    53 00002431 41803811            <1>  cmp byte [%1], %2
    54 00002435 0F85A80D0000        <1>  jne L_error_incorrect_type
  3400 0000243B BF11000000                      mov rdi, (1 + 8 + 8)
  3401 00002440 E8C3EFFFFF                      call malloc
  3402 00002445 498B5801                        mov rbx, qword [r8 + 1]
  3403 00002449 C60012                          mov byte [rax], T_fraction
  3404 0000244C 48895801                        mov qword [rax + 1], rbx
  3405 00002450 48C7400901000000                mov qword [rax + 1 + 8], 1
  3406 00002458 C9                              leave
  3407 00002459 C21800                          ret AND_KILL_FRAME(1)
  3408                                  
  3409                                  L_code_ptr_integer_to_char:
  3410 0000245C C8000000                        enter 0, 0
  3411 00002460 48837D1801                      cmp COUNT, 1
  3412 00002465 0F85A40C0000                    jne L_error_arg_count_1
  3413 0000246B 488B4520                        mov rax, PARAM(0)
  3414                                          assert_integer(rax)
    53 0000246F 803811              <1>  cmp byte [%1], %2
    54 00002472 0F856B0D0000        <1>  jne L_error_incorrect_type
  3415 00002478 488B5801                        mov rbx, qword [rax + 1]
  3416 0000247C 4883FB00                        cmp rbx, 0
  3417 00002480 0F8EF20B0000                    jle L_error_integer_range
  3418 00002486 4881FB00010000                  cmp rbx, 256
  3419 0000248D 0F8DE50B0000                    jge L_error_integer_range
  3420 00002493 BF02000000                      mov rdi, (1 + 1)
  3421 00002498 E86BEFFFFF                      call malloc
  3422 0000249D C60002                          mov byte [rax], T_char
  3423 000024A0 885801                          mov byte [rax + 1], bl
  3424 000024A3 C9                              leave
  3425 000024A4 C21800                          ret AND_KILL_FRAME(1)
  3426                                  
  3427                                  L_code_ptr_trng:
  3428 000024A7 C8000000                        enter 0, 0
  3429 000024AB 48837D1800                      cmp COUNT, 0
  3430 000024B0 0F85240C0000                    jne L_error_arg_count_0
  3431 000024B6 480FC7F7                        rdrand rdi
  3432 000024BA 48D1EF                          shr rdi, 1
  3433 000024BD E89C0B0000                      call make_integer
  3434 000024C2 C9                              leave
  3435 000024C3 C21000                          ret AND_KILL_FRAME(0)
  3436                                  
  3437                                  L_code_ptr_is_zero:
  3438 000024C6 C8000000                        enter 0, 0
  3439 000024CA 48837D1801                      cmp COUNT, 1
  3440 000024CF 0F853A0C0000                    jne L_error_arg_count_1
  3441 000024D5 488B4520                        mov rax, PARAM(0)
  3442 000024D9 803811                          cmp byte [rax], T_integer
  3443 000024DC 740F                            je .L_integer
  3444 000024DE 803812                          cmp byte [rax], T_fraction
  3445 000024E1 7413                            je .L_fraction
  3446 000024E3 803813                          cmp byte [rax], T_real
  3447 000024E6 7417                            je .L_real
  3448 000024E8 E9F60C0000                      jmp L_error_incorrect_type
  3449                                  .L_integer:
  3450 000024ED 4883780100                      cmp qword [rax + 1], 0
  3451 000024F2 7429                            je .L_zero
  3452 000024F4 EB1B                            jmp .L_not_zero
  3453                                  .L_fraction:
  3454 000024F6 4883780100                      cmp qword [rax + 1], 0
  3455 000024FB 7420                            je .L_zero
  3456 000024FD EB12                            jmp .L_not_zero
  3457                                  .L_real:
  3458 000024FF 660FEFC0                        pxor xmm0, xmm0
  3459 00002503 FF7001                          push qword [rax + 1]
  3460 00002506 F20F100C24                      movsd xmm1, qword [rsp]
  3461 0000250B 660F2EC1                        ucomisd xmm0, xmm1
  3462 0000250F 740C                            je .L_zero
  3463                                  .L_not_zero:
  3464 00002511 48B8-                           mov rax, sob_boolean_false
  3464 00002513 [0200000000000000] 
  3465 0000251B EB0A                            jmp .L_end
  3466                                  .L_zero:
  3467 0000251D 48B8-                           mov rax, sob_boolean_true
  3467 0000251F [0300000000000000] 
  3468                                  .L_end:
  3469 00002527 C9                              leave
  3470 00002528 C21800                          ret AND_KILL_FRAME(1)
  3471                                  
  3472                                  L_code_ptr_is_integer:
  3473 0000252B C8000000                        enter 0, 0
  3474 0000252F 48837D1801                      cmp COUNT, 1
  3475 00002534 0F85D50B0000                    jne L_error_arg_count_1
  3476 0000253A 488B4520                        mov rax, PARAM(0)
  3477 0000253E 803811                          cmp byte [rax], T_integer
  3478 00002541 750C                            jne .L_false
  3479 00002543 48B8-                           mov rax, sob_boolean_true
  3479 00002545 [0300000000000000] 
  3480 0000254D EB0A                            jmp .L_exit
  3481                                  .L_false:
  3482 0000254F 48B8-                           mov rax, sob_boolean_false
  3482 00002551 [0200000000000000] 
  3483                                  .L_exit:
  3484 00002559 C9                              leave
  3485 0000255A C21800                          ret AND_KILL_FRAME(1)
  3486                                  
  3487                                  L_code_ptr_raw_bin_add_rr:
  3488 0000255D C8000000                        enter 0, 0
  3489 00002561 48837D1802                      cmp COUNT, 2
  3490 00002566 0F85D80B0000                    jne L_error_arg_count_2
  3491 0000256C 488B5D20                        mov rbx, PARAM(0)
  3492                                          assert_real(rbx)
    53 00002570 803B13              <1>  cmp byte [%1], %2
    54 00002573 0F856A0C0000        <1>  jne L_error_incorrect_type
  3493 00002579 488B4D28                        mov rcx, PARAM(1)
  3494                                          assert_real(rcx)
    53 0000257D 803913              <1>  cmp byte [%1], %2
    54 00002580 0F855D0C0000        <1>  jne L_error_incorrect_type
  3495 00002586 F20F104301                      movsd xmm0, qword [rbx + 1]
  3496 0000258B F20F104901                      movsd xmm1, qword [rcx + 1]
  3497 00002590 F20F58C1                        addsd xmm0, xmm1
  3498 00002594 E8AD0A0000                      call make_real
  3499 00002599 C9                              leave
  3500 0000259A C22000                          ret AND_KILL_FRAME(2)
  3501                                  
  3502                                  L_code_ptr_raw_bin_sub_rr:
  3503 0000259D C8000000                        enter 0, 0
  3504 000025A1 48837D1802                      cmp COUNT, 2
  3505 000025A6 0F85980B0000                    jne L_error_arg_count_2
  3506 000025AC 488B5D20                        mov rbx, PARAM(0)
  3507                                          assert_real(rbx)
    53 000025B0 803B13              <1>  cmp byte [%1], %2
    54 000025B3 0F852A0C0000        <1>  jne L_error_incorrect_type
  3508 000025B9 488B4D28                        mov rcx, PARAM(1)
  3509                                          assert_real(rcx)
    53 000025BD 803913              <1>  cmp byte [%1], %2
    54 000025C0 0F851D0C0000        <1>  jne L_error_incorrect_type
  3510 000025C6 F20F104301                      movsd xmm0, qword [rbx + 1]
  3511 000025CB F20F104901                      movsd xmm1, qword [rcx + 1]
  3512 000025D0 F20F5CC1                        subsd xmm0, xmm1
  3513 000025D4 E86D0A0000                      call make_real
  3514 000025D9 C9                              leave
  3515 000025DA C22000                          ret AND_KILL_FRAME(2)
  3516                                  
  3517                                  L_code_ptr_raw_bin_mul_rr:
  3518 000025DD C8000000                        enter 0, 0
  3519 000025E1 48837D1802                      cmp COUNT, 2
  3520 000025E6 0F85580B0000                    jne L_error_arg_count_2
  3521 000025EC 488B5D20                        mov rbx, PARAM(0)
  3522                                          assert_real(rbx)
    53 000025F0 803B13              <1>  cmp byte [%1], %2
    54 000025F3 0F85EA0B0000        <1>  jne L_error_incorrect_type
  3523 000025F9 488B4D28                        mov rcx, PARAM(1)
  3524                                          assert_real(rcx)
    53 000025FD 803913              <1>  cmp byte [%1], %2
    54 00002600 0F85DD0B0000        <1>  jne L_error_incorrect_type
  3525 00002606 F20F104301                      movsd xmm0, qword [rbx + 1]
  3526 0000260B F20F104901                      movsd xmm1, qword [rcx + 1]
  3527 00002610 F20F59C1                        mulsd xmm0, xmm1
  3528 00002614 E82D0A0000                      call make_real
  3529 00002619 C9                              leave
  3530 0000261A C22000                          ret AND_KILL_FRAME(2)
  3531                                  
  3532                                  L_code_ptr_raw_bin_div_rr:
  3533 0000261D C8000000                        enter 0, 0
  3534 00002621 48837D1802                      cmp COUNT, 2
  3535 00002626 0F85180B0000                    jne L_error_arg_count_2
  3536 0000262C 488B5D20                        mov rbx, PARAM(0)
  3537                                          assert_real(rbx)
    53 00002630 803B13              <1>  cmp byte [%1], %2
    54 00002633 0F85AA0B0000        <1>  jne L_error_incorrect_type
  3538 00002639 488B4D28                        mov rcx, PARAM(1)
  3539                                          assert_real(rcx)
    53 0000263D 803913              <1>  cmp byte [%1], %2
    54 00002640 0F859D0B0000        <1>  jne L_error_incorrect_type
  3540 00002646 F20F104301                      movsd xmm0, qword [rbx + 1]
  3541 0000264B F20F104901                      movsd xmm1, qword [rcx + 1]
  3542 00002650 660FEFD2                        pxor xmm2, xmm2
  3543 00002654 660F2ECA                        ucomisd xmm1, xmm2
  3544 00002658 0F84B60B0000                    je L_error_division_by_zero
  3545 0000265E F20F5EC1                        divsd xmm0, xmm1
  3546 00002662 E8DF090000                      call make_real
  3547 00002667 C9                              leave
  3548 00002668 C22000                          ret AND_KILL_FRAME(2)
  3549                                  
  3550                                  L_code_ptr_raw_bin_add_zz:
  3551 0000266B C8000000                	enter 0, 0
  3552 0000266F 48837D1802              	cmp COUNT, 2
  3553 00002674 0F85CA0A0000            	jne L_error_arg_count_2
  3554 0000267A 4C8B4520                	mov r8, PARAM(0)
  3555                                  	assert_integer(r8)
    53 0000267E 41803811            <1>  cmp byte [%1], %2
    54 00002682 0F855B0B0000        <1>  jne L_error_incorrect_type
  3556 00002688 4C8B4D28                	mov r9, PARAM(1)
  3557                                  	assert_integer(r9)
    53 0000268C 41803911            <1>  cmp byte [%1], %2
    54 00002690 0F854D0B0000        <1>  jne L_error_incorrect_type
  3558 00002696 498B7801                	mov rdi, qword [r8 + 1]
  3559 0000269A 49037901                	add rdi, qword [r9 + 1]
  3560 0000269E E8BB090000              	call make_integer
  3561 000026A3 C9                      	leave
  3562 000026A4 C22000                  	ret AND_KILL_FRAME(2)
  3563                                  
  3564                                  L_code_ptr_raw_bin_add_qq:
  3565 000026A7 C8000000                        enter 0, 0
  3566 000026AB 48837D1802                      cmp COUNT, 2
  3567 000026B0 0F858E0A0000                    jne L_error_arg_count_2
  3568 000026B6 4C8B4520                        mov r8, PARAM(0)
  3569                                          assert_fraction(r8)
    53 000026BA 41803812            <1>  cmp byte [%1], %2
    54 000026BE 0F851F0B0000        <1>  jne L_error_incorrect_type
  3570 000026C4 4C8B4D28                        mov r9, PARAM(1)
  3571                                          assert_fraction(r9)
    53 000026C8 41803912            <1>  cmp byte [%1], %2
    54 000026CC 0F85110B0000        <1>  jne L_error_incorrect_type
  3572 000026D2 498B4001                        mov rax, qword [r8 + 1] ; num1
  3573 000026D6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  3574 000026DA 4899                            cqo
  3575 000026DC 48F7EB                          imul rbx
  3576 000026DF 4889C6                          mov rsi, rax
  3577 000026E2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  3578 000026E6 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  3579 000026EA 4899                            cqo
  3580 000026EC 48F7EB                          imul rbx
  3581 000026EF 4801C6                          add rsi, rax
  3582 000026F2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  3583 000026F6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  3584 000026FA 4899                            cqo
  3585 000026FC 48F7EB                          imul rbx
  3586 000026FF 4889C7                          mov rdi, rax
  3587 00002702 E8DE010000                      call normalize_fraction
  3588 00002707 C9                              leave
  3589 00002708 C22000                          ret AND_KILL_FRAME(2)
  3590                                  
  3591                                  L_code_ptr_raw_bin_sub_zz:
  3592 0000270B C8000000                	enter 0, 0
  3593 0000270F 48837D1802              	cmp COUNT, 2
  3594 00002714 0F852A0A0000            	jne L_error_arg_count_2
  3595 0000271A 4C8B4520                	mov r8, PARAM(0)
  3596                                  	assert_integer(r8)
    53 0000271E 41803811            <1>  cmp byte [%1], %2
    54 00002722 0F85BB0A0000        <1>  jne L_error_incorrect_type
  3597 00002728 4C8B4D28                	mov r9, PARAM(1)
  3598                                  	assert_integer(r9)
    53 0000272C 41803911            <1>  cmp byte [%1], %2
    54 00002730 0F85AD0A0000        <1>  jne L_error_incorrect_type
  3599 00002736 498B7801                	mov rdi, qword [r8 + 1]
  3600 0000273A 492B7901                	sub rdi, qword [r9 + 1]
  3601 0000273E E81B090000              	call make_integer
  3602 00002743 C9                      	leave
  3603 00002744 C22000                  	ret AND_KILL_FRAME(2)
  3604                                  
  3605                                  L_code_ptr_raw_bin_sub_qq:
  3606 00002747 C8000000                        enter 0, 0
  3607 0000274B 48837D1802                      cmp COUNT, 2
  3608 00002750 0F85EE090000                    jne L_error_arg_count_2
  3609 00002756 4C8B4520                        mov r8, PARAM(0)
  3610                                          assert_fraction(r8)
    53 0000275A 41803812            <1>  cmp byte [%1], %2
    54 0000275E 0F857F0A0000        <1>  jne L_error_incorrect_type
  3611 00002764 4C8B4D28                        mov r9, PARAM(1)
  3612                                          assert_fraction(r9)
    53 00002768 41803912            <1>  cmp byte [%1], %2
    54 0000276C 0F85710A0000        <1>  jne L_error_incorrect_type
  3613 00002772 498B4001                        mov rax, qword [r8 + 1] ; num1
  3614 00002776 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  3615 0000277A 4899                            cqo
  3616 0000277C 48F7EB                          imul rbx
  3617 0000277F 4889C6                          mov rsi, rax
  3618 00002782 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  3619 00002786 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  3620 0000278A 4899                            cqo
  3621 0000278C 48F7EB                          imul rbx
  3622 0000278F 4829C6                          sub rsi, rax
  3623 00002792 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  3624 00002796 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  3625 0000279A 4899                            cqo
  3626 0000279C 48F7EB                          imul rbx
  3627 0000279F 4889C7                          mov rdi, rax
  3628 000027A2 E83E010000                      call normalize_fraction
  3629 000027A7 C9                              leave
  3630 000027A8 C22000                          ret AND_KILL_FRAME(2)
  3631                                  
  3632                                  L_code_ptr_raw_bin_mul_zz:
  3633 000027AB C8000000                	enter 0, 0
  3634 000027AF 48837D1802              	cmp COUNT, 2
  3635 000027B4 0F858A090000            	jne L_error_arg_count_2
  3636 000027BA 4C8B4520                	mov r8, PARAM(0)
  3637                                  	assert_integer(r8)
    53 000027BE 41803811            <1>  cmp byte [%1], %2
    54 000027C2 0F851B0A0000        <1>  jne L_error_incorrect_type
  3638 000027C8 4C8B4D28                	mov r9, PARAM(1)
  3639                                  	assert_integer(r9)
    53 000027CC 41803911            <1>  cmp byte [%1], %2
    54 000027D0 0F850D0A0000        <1>  jne L_error_incorrect_type
  3640 000027D6 4899                    	cqo
  3641 000027D8 498B4001                	mov rax, qword [r8 + 1]
  3642 000027DC 49F76101                	mul qword [r9 + 1]
  3643 000027E0 4889C7                  	mov rdi, rax
  3644 000027E3 E876080000              	call make_integer
  3645 000027E8 C9                      	leave
  3646 000027E9 C22000                  	ret AND_KILL_FRAME(2)
  3647                                  
  3648                                  L_code_ptr_raw_bin_mul_qq:
  3649 000027EC C8000000                        enter 0, 0
  3650 000027F0 48837D1802                      cmp COUNT, 2
  3651 000027F5 0F8549090000                    jne L_error_arg_count_2
  3652 000027FB 4C8B4520                        mov r8, PARAM(0)
  3653                                          assert_fraction(r8)
    53 000027FF 41803812            <1>  cmp byte [%1], %2
    54 00002803 0F85DA090000        <1>  jne L_error_incorrect_type
  3654 00002809 4C8B4D28                        mov r9, PARAM(1)
  3655                                          assert_fraction(r9)
    53 0000280D 41803912            <1>  cmp byte [%1], %2
    54 00002811 0F85CC090000        <1>  jne L_error_incorrect_type
  3656 00002817 498B4001                        mov rax, qword [r8 + 1] ; num1
  3657 0000281B 498B5901                        mov rbx, qword [r9 + 1] ; num2
  3658 0000281F 4899                            cqo
  3659 00002821 48F7EB                          imul rbx
  3660 00002824 4889C6                          mov rsi, rax
  3661 00002827 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  3662 0000282B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  3663 0000282F 4899                            cqo
  3664 00002831 48F7EB                          imul rbx
  3665 00002834 4889C7                          mov rdi, rax
  3666 00002837 E8A9000000                      call normalize_fraction
  3667 0000283C C9                              leave
  3668 0000283D C22000                          ret AND_KILL_FRAME(2)
  3669                                          
  3670                                  L_code_ptr_raw_bin_div_zz:
  3671 00002840 C8000000                	enter 0, 0
  3672 00002844 48837D1802              	cmp COUNT, 2
  3673 00002849 0F85F5080000            	jne L_error_arg_count_2
  3674 0000284F 4C8B4520                	mov r8, PARAM(0)
  3675                                  	assert_integer(r8)
    53 00002853 41803811            <1>  cmp byte [%1], %2
    54 00002857 0F8586090000        <1>  jne L_error_incorrect_type
  3676 0000285D 4C8B4D28                	mov r9, PARAM(1)
  3677                                  	assert_integer(r9)
    53 00002861 41803911            <1>  cmp byte [%1], %2
    54 00002865 0F8578090000        <1>  jne L_error_incorrect_type
  3678 0000286B 498B7901                	mov rdi, qword [r9 + 1]
  3679 0000286F 4883FF00                	cmp rdi, 0
  3680 00002873 0F849B090000            	je L_error_division_by_zero
  3681 00002879 498B7001                	mov rsi, qword [r8 + 1]
  3682 0000287D E863000000              	call normalize_fraction
  3683 00002882 C9                      	leave
  3684 00002883 C22000                  	ret AND_KILL_FRAME(2)
  3685                                  
  3686                                  L_code_ptr_raw_bin_div_qq:
  3687 00002886 C8000000                        enter 0, 0
  3688 0000288A 48837D1802                      cmp COUNT, 2
  3689 0000288F 0F85AF080000                    jne L_error_arg_count_2
  3690 00002895 4C8B4520                        mov r8, PARAM(0)
  3691                                          assert_fraction(r8)
    53 00002899 41803812            <1>  cmp byte [%1], %2
    54 0000289D 0F8540090000        <1>  jne L_error_incorrect_type
  3692 000028A3 4C8B4D28                        mov r9, PARAM(1)
  3693                                          assert_fraction(r9)
    53 000028A7 41803912            <1>  cmp byte [%1], %2
    54 000028AB 0F8532090000        <1>  jne L_error_incorrect_type
  3694 000028B1 4983790100                      cmp qword [r9 + 1], 0
  3695 000028B6 0F8458090000                    je L_error_division_by_zero
  3696 000028BC 498B4001                        mov rax, qword [r8 + 1] ; num1
  3697 000028C0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  3698 000028C4 4899                            cqo
  3699 000028C6 48F7EB                          imul rbx
  3700 000028C9 4889C6                          mov rsi, rax
  3701 000028CC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  3702 000028D0 498B5901                        mov rbx, qword [r9 + 1] ; num2
  3703 000028D4 4899                            cqo
  3704 000028D6 48F7EB                          imul rbx
  3705 000028D9 4889C7                          mov rdi, rax
  3706 000028DC E804000000                      call normalize_fraction
  3707 000028E1 C9                              leave
  3708 000028E2 C22000                          ret AND_KILL_FRAME(2)
  3709                                          
  3710                                  normalize_fraction:
  3711 000028E5 56                              push rsi
  3712 000028E6 57                              push rdi
  3713 000028E7 E859000000                      call gcd
  3714 000028EC 4889C3                          mov rbx, rax
  3715 000028EF 58                              pop rax
  3716 000028F0 4899                            cqo
  3717 000028F2 48F7FB                          idiv rbx
  3718 000028F5 4989C0                          mov r8, rax
  3719 000028F8 58                              pop rax
  3720 000028F9 4899                            cqo
  3721 000028FB 48F7FB                          idiv rbx
  3722 000028FE 4989C1                          mov r9, rax
  3723 00002901 4983F900                        cmp r9, 0
  3724 00002905 741C                            je .L_zero
  3725 00002907 4983F801                        cmp r8, 1
  3726 0000290B 7421                            je .L_int
  3727 0000290D BF11000000                      mov rdi, (1 + 8 + 8)
  3728 00002912 E8F1EAFFFF                      call malloc
  3729 00002917 C60012                          mov byte [rax], T_fraction
  3730 0000291A 4C894801                        mov qword [rax + 1], r9
  3731 0000291E 4C894009                        mov qword [rax + 1 + 8], r8
  3732 00002922 C3                              ret
  3733                                  .L_zero:
  3734 00002923 BF00000000                      mov rdi, 0
  3735 00002928 E831070000                      call make_integer
  3736 0000292D C3                              ret
  3737                                  .L_int:
  3738 0000292E 4C89CF                          mov rdi, r9
  3739 00002931 E828070000                      call make_integer
  3740 00002936 C3                              ret
  3741                                  
  3742                                  iabs:
  3743 00002937 4889F8                          mov rax, rdi
  3744 0000293A 4883F800                        cmp rax, 0
  3745 0000293E 7C01                            jl .Lneg
  3746 00002940 C3                              ret
  3747                                  .Lneg:
  3748 00002941 48F7D8                          neg rax
  3749 00002944 C3                              ret
  3750                                  
  3751                                  gcd:
  3752 00002945 E8EDFFFFFF                      call iabs
  3753 0000294A 4889C3                          mov rbx, rax
  3754 0000294D 4889F7                          mov rdi, rsi
  3755 00002950 E8E2FFFFFF                      call iabs
  3756 00002955 4883F800                        cmp rax, 0
  3757 00002959 7502                            jne .L0
  3758 0000295B 4893                            xchg rax, rbx
  3759                                  .L0:
  3760 0000295D 4883FB00                        cmp rbx, 0
  3761 00002961 740C                            je .L1
  3762 00002963 4899                            cqo
  3763 00002965 48F7F3                          div rbx
  3764 00002968 4889D0                          mov rax, rdx
  3765 0000296B 4893                            xchg rax, rbx
  3766 0000296D EBEE                            jmp .L0
  3767                                  .L1:
  3768 0000296F C3                              ret
  3769                                  
  3770                                  L_code_ptr_error:
  3771 00002970 C8000000                        enter 0, 0
  3772 00002974 48837D1802                      cmp COUNT, 2
  3773 00002979 0F85C5070000                    jne L_error_arg_count_2
  3774 0000297F 488B7520                        mov rsi, PARAM(0)
  3775                                          assert_interned_symbol(rsi)
    53 00002983 803E41              <1>  cmp byte [%1], %2
    54 00002986 0F8557080000        <1>  jne L_error_incorrect_type
  3776 0000298C 488B7528                        mov rsi, PARAM(1)
  3777                                          assert_string(rsi)
    53 00002990 803E03              <1>  cmp byte [%1], %2
    54 00002993 0F854A080000        <1>  jne L_error_incorrect_type
  3778 00002999 48BF-                           mov rdi, fmt_scheme_error_part_1
  3778 0000299B [FB09000000000000] 
  3779 000029A3 B800000000                      mov rax, 0
  3780                                          ENTER
    44 000029A8 C8000000            <1>  enter 0, 0
    45 000029AC 4883E4F0            <1>  and rsp, ~15
  3781 000029B0 E8(00000000)                    call printf
  3782                                          LEAVE
    49 000029B5 C9                  <1>  leave
  3783 000029B6 488B7D20                        mov rdi, PARAM(0)
  3784 000029BA E8CAECFFFF                      call print_sexpr
  3785 000029BF 48BF-                           mov rdi, fmt_scheme_error_part_2
  3785 000029C1 [0F0A000000000000] 
  3786 000029C9 B800000000                      mov rax, 0
  3787                                          ENTER
    44 000029CE C8000000            <1>  enter 0, 0
    45 000029D2 4883E4F0            <1>  and rsp, ~15
  3788 000029D6 E8(00000000)                    call printf
  3789                                          LEAVE
    49 000029DB C9                  <1>  leave
  3790 000029DC 488B4528                        mov rax, PARAM(1)       ; sob_string
  3791 000029E0 BE01000000                      mov rsi, 1              ; size = 1 byte
  3792 000029E5 488B5001                        mov rdx, qword [rax + 1] ; length
  3793 000029E9 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  3794 000029ED 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  3795                                  	ENTER
    44 000029F5 C8000000            <1>  enter 0, 0
    45 000029F9 4883E4F0            <1>  and rsp, ~15
  3796 000029FD E8(00000000)                    call fwrite
  3797                                  	LEAVE
    49 00002A02 C9                  <1>  leave
  3798 00002A03 48BF-                           mov rdi, fmt_scheme_error_part_3
  3798 00002A05 [510A000000000000] 
  3799 00002A0D B800000000                      mov rax, 0
  3800                                          ENTER
    44 00002A12 C8000000            <1>  enter 0, 0
    45 00002A16 4883E4F0            <1>  and rsp, ~15
  3801 00002A1A E8(00000000)                    call printf
  3802                                          LEAVE
    49 00002A1F C9                  <1>  leave
  3803 00002A20 48C7C0F7FFFFFF                  mov rax, -9
  3804 00002A27 E8(00000000)                    call exit
  3805                                  
  3806                                  L_code_ptr_raw_less_than_rr:
  3807 00002A2C C8000000                        enter 0, 0
  3808 00002A30 48837D1802                      cmp COUNT, 2
  3809 00002A35 0F8509070000                    jne L_error_arg_count_2
  3810 00002A3B 488B7520                        mov rsi, PARAM(0)
  3811                                          assert_real(rsi)
    53 00002A3F 803E13              <1>  cmp byte [%1], %2
    54 00002A42 0F859B070000        <1>  jne L_error_incorrect_type
  3812 00002A48 488B7D28                        mov rdi, PARAM(1)
  3813                                          assert_real(rdi)
    53 00002A4C 803F13              <1>  cmp byte [%1], %2
    54 00002A4F 0F858E070000        <1>  jne L_error_incorrect_type
  3814 00002A55 F20F104601                      movsd xmm0, qword [rsi + 1]
  3815 00002A5A F20F104F01                      movsd xmm1, qword [rdi + 1]
  3816 00002A5F 660F2FC1                        comisd xmm0, xmm1
  3817 00002A63 730C                            jae .L_false
  3818 00002A65 48B8-                           mov rax, sob_boolean_true
  3818 00002A67 [0300000000000000] 
  3819 00002A6F EB0A                            jmp .L_exit
  3820                                  .L_false:
  3821 00002A71 48B8-                           mov rax, sob_boolean_false
  3821 00002A73 [0200000000000000] 
  3822                                  .L_exit:
  3823 00002A7B C9                              leave
  3824 00002A7C C22000                          ret AND_KILL_FRAME(2)
  3825                                          
  3826                                  L_code_ptr_raw_less_than_zz:
  3827 00002A7F C8000000                	enter 0, 0
  3828 00002A83 48837D1802              	cmp COUNT, 2
  3829 00002A88 0F85B6060000            	jne L_error_arg_count_2
  3830 00002A8E 4C8B4520                	mov r8, PARAM(0)
  3831                                  	assert_integer(r8)
    53 00002A92 41803811            <1>  cmp byte [%1], %2
    54 00002A96 0F8547070000        <1>  jne L_error_incorrect_type
  3832 00002A9C 4C8B4D28                	mov r9, PARAM(1)
  3833                                  	assert_integer(r9)
    53 00002AA0 41803911            <1>  cmp byte [%1], %2
    54 00002AA4 0F8539070000        <1>  jne L_error_incorrect_type
  3834 00002AAA 498B7801                	mov rdi, qword [r8 + 1]
  3835 00002AAE 493B7901                	cmp rdi, qword [r9 + 1]
  3836 00002AB2 7D0C                    	jge .L_false
  3837 00002AB4 48B8-                   	mov rax, sob_boolean_true
  3837 00002AB6 [0300000000000000] 
  3838 00002ABE EB0A                    	jmp .L_exit
  3839                                  .L_false:
  3840 00002AC0 48B8-                   	mov rax, sob_boolean_false
  3840 00002AC2 [0200000000000000] 
  3841                                  .L_exit:
  3842 00002ACA C9                      	leave
  3843 00002ACB C22000                  	ret AND_KILL_FRAME(2)
  3844                                  
  3845                                  L_code_ptr_raw_less_than_qq:
  3846 00002ACE C8000000                        enter 0, 0
  3847 00002AD2 48837D1802                      cmp COUNT, 2
  3848 00002AD7 0F8567060000                    jne L_error_arg_count_2
  3849 00002ADD 488B7520                        mov rsi, PARAM(0)
  3850                                          assert_fraction(rsi)
    53 00002AE1 803E12              <1>  cmp byte [%1], %2
    54 00002AE4 0F85F9060000        <1>  jne L_error_incorrect_type
  3851 00002AEA 488B7D28                        mov rdi, PARAM(1)
  3852                                          assert_fraction(rdi)
    53 00002AEE 803F12              <1>  cmp byte [%1], %2
    54 00002AF1 0F85EC060000        <1>  jne L_error_incorrect_type
  3853 00002AF7 488B4601                        mov rax, qword [rsi + 1] ; num1
  3854 00002AFB 4899                            cqo
  3855 00002AFD 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  3856 00002B01 4889C1                          mov rcx, rax
  3857 00002B04 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  3858 00002B08 4899                            cqo
  3859 00002B0A 48F76F01                        imul qword [rdi + 1]          ; num2
  3860 00002B0E 4829C1                          sub rcx, rax
  3861 00002B11 7D0C                            jge .L_false
  3862 00002B13 48B8-                           mov rax, sob_boolean_true
  3862 00002B15 [0300000000000000] 
  3863 00002B1D EB0A                            jmp .L_exit
  3864                                  .L_false:
  3865 00002B1F 48B8-                           mov rax, sob_boolean_false
  3865 00002B21 [0200000000000000] 
  3866                                  .L_exit:
  3867 00002B29 C9                              leave
  3868 00002B2A C22000                          ret AND_KILL_FRAME(2)
  3869                                  
  3870                                  L_code_ptr_raw_equal_rr:
  3871 00002B2D C8000000                        enter 0, 0
  3872 00002B31 48837D1802                      cmp COUNT, 2
  3873 00002B36 0F8508060000                    jne L_error_arg_count_2
  3874 00002B3C 488B7520                        mov rsi, PARAM(0)
  3875                                          assert_real(rsi)
    53 00002B40 803E13              <1>  cmp byte [%1], %2
    54 00002B43 0F859A060000        <1>  jne L_error_incorrect_type
  3876 00002B49 488B7D28                        mov rdi, PARAM(1)
  3877                                          assert_real(rdi)
    53 00002B4D 803F13              <1>  cmp byte [%1], %2
    54 00002B50 0F858D060000        <1>  jne L_error_incorrect_type
  3878 00002B56 F20F104601                      movsd xmm0, qword [rsi + 1]
  3879 00002B5B F20F104F01                      movsd xmm1, qword [rdi + 1]
  3880 00002B60 660F2FC1                        comisd xmm0, xmm1
  3881 00002B64 750C                            jne .L_false
  3882 00002B66 48B8-                           mov rax, sob_boolean_true
  3882 00002B68 [0300000000000000] 
  3883 00002B70 EB0A                            jmp .L_exit
  3884                                  .L_false:
  3885 00002B72 48B8-                           mov rax, sob_boolean_false
  3885 00002B74 [0200000000000000] 
  3886                                  .L_exit:
  3887 00002B7C C9                              leave
  3888 00002B7D C22000                          ret AND_KILL_FRAME(2)
  3889                                          
  3890                                  L_code_ptr_raw_equal_zz:
  3891 00002B80 C8000000                	enter 0, 0
  3892 00002B84 48837D1802              	cmp COUNT, 2
  3893 00002B89 0F85B5050000            	jne L_error_arg_count_2
  3894 00002B8F 4C8B4520                	mov r8, PARAM(0)
  3895                                  	assert_integer(r8)
    53 00002B93 41803811            <1>  cmp byte [%1], %2
    54 00002B97 0F8546060000        <1>  jne L_error_incorrect_type
  3896 00002B9D 4C8B4D28                	mov r9, PARAM(1)
  3897                                  	assert_integer(r9)
    53 00002BA1 41803911            <1>  cmp byte [%1], %2
    54 00002BA5 0F8538060000        <1>  jne L_error_incorrect_type
  3898 00002BAB 498B7801                	mov rdi, qword [r8 + 1]
  3899 00002BAF 493B7901                	cmp rdi, qword [r9 + 1]
  3900 00002BB3 750C                    	jne .L_false
  3901 00002BB5 48B8-                   	mov rax, sob_boolean_true
  3901 00002BB7 [0300000000000000] 
  3902 00002BBF EB0A                    	jmp .L_exit
  3903                                  .L_false:
  3904 00002BC1 48B8-                   	mov rax, sob_boolean_false
  3904 00002BC3 [0200000000000000] 
  3905                                  .L_exit:
  3906 00002BCB C9                      	leave
  3907 00002BCC C22000                  	ret AND_KILL_FRAME(2)
  3908                                  
  3909                                  L_code_ptr_raw_equal_qq:
  3910 00002BCF C8000000                        enter 0, 0
  3911 00002BD3 48837D1802                      cmp COUNT, 2
  3912 00002BD8 0F8566050000                    jne L_error_arg_count_2
  3913 00002BDE 488B7520                        mov rsi, PARAM(0)
  3914                                          assert_fraction(rsi)
    53 00002BE2 803E12              <1>  cmp byte [%1], %2
    54 00002BE5 0F85F8050000        <1>  jne L_error_incorrect_type
  3915 00002BEB 488B7D28                        mov rdi, PARAM(1)
  3916                                          assert_fraction(rdi)
    53 00002BEF 803F12              <1>  cmp byte [%1], %2
    54 00002BF2 0F85EB050000        <1>  jne L_error_incorrect_type
  3917 00002BF8 488B4601                        mov rax, qword [rsi + 1] ; num1
  3918 00002BFC 4899                            cqo
  3919 00002BFE 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  3920 00002C02 4889C1                          mov rcx, rax
  3921 00002C05 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  3922 00002C09 4899                            cqo
  3923 00002C0B 48F76F01                        imul qword [rdi + 1]          ; num2
  3924 00002C0F 4829C1                          sub rcx, rax
  3925 00002C12 750C                            jne .L_false
  3926 00002C14 48B8-                           mov rax, sob_boolean_true
  3926 00002C16 [0300000000000000] 
  3927 00002C1E EB0A                            jmp .L_exit
  3928                                  .L_false:
  3929 00002C20 48B8-                           mov rax, sob_boolean_false
  3929 00002C22 [0200000000000000] 
  3930                                  .L_exit:
  3931 00002C2A C9                              leave
  3932 00002C2B C22000                          ret AND_KILL_FRAME(2)
  3933                                  
  3934                                  L_code_ptr_quotient:
  3935 00002C2E C8000000                        enter 0, 0
  3936 00002C32 48837D1802                      cmp COUNT, 2
  3937 00002C37 0F8507050000                    jne L_error_arg_count_2
  3938 00002C3D 488B7520                        mov rsi, PARAM(0)
  3939                                          assert_integer(rsi)
    53 00002C41 803E11              <1>  cmp byte [%1], %2
    54 00002C44 0F8599050000        <1>  jne L_error_incorrect_type
  3940 00002C4A 488B7D28                        mov rdi, PARAM(1)
  3941                                          assert_integer(rdi)
    53 00002C4E 803F11              <1>  cmp byte [%1], %2
    54 00002C51 0F858C050000        <1>  jne L_error_incorrect_type
  3942 00002C57 488B4601                        mov rax, qword [rsi + 1]
  3943 00002C5B 488B5F01                        mov rbx, qword [rdi + 1]
  3944 00002C5F 4883FB00                        cmp rbx, 0
  3945 00002C63 0F84AB050000                    je L_error_division_by_zero
  3946 00002C69 4899                            cqo
  3947 00002C6B 48F7FB                          idiv rbx
  3948 00002C6E 4889C7                          mov rdi, rax
  3949 00002C71 E8E8030000                      call make_integer
  3950 00002C76 C9                              leave
  3951 00002C77 C22000                          ret AND_KILL_FRAME(2)
  3952                                          
  3953                                  L_code_ptr_remainder:
  3954 00002C7A C8000000                        enter 0, 0
  3955 00002C7E 48837D1802                      cmp COUNT, 2
  3956 00002C83 0F85BB040000                    jne L_error_arg_count_2
  3957 00002C89 488B7520                        mov rsi, PARAM(0)
  3958                                          assert_integer(rsi)
    53 00002C8D 803E11              <1>  cmp byte [%1], %2
    54 00002C90 0F854D050000        <1>  jne L_error_incorrect_type
  3959 00002C96 488B7D28                        mov rdi, PARAM(1)
  3960                                          assert_integer(rdi)
    53 00002C9A 803F11              <1>  cmp byte [%1], %2
    54 00002C9D 0F8540050000        <1>  jne L_error_incorrect_type
  3961 00002CA3 488B4601                        mov rax, qword [rsi + 1]
  3962 00002CA7 488B5F01                        mov rbx, qword [rdi + 1]
  3963 00002CAB 4883FB00                        cmp rbx, 0
  3964 00002CAF 0F845F050000                    je L_error_division_by_zero
  3965 00002CB5 4899                            cqo
  3966 00002CB7 48F7FB                          idiv rbx
  3967 00002CBA 4889D7                          mov rdi, rdx
  3968 00002CBD E89C030000                      call make_integer
  3969 00002CC2 C9                              leave
  3970 00002CC3 C22000                          ret AND_KILL_FRAME(2)
  3971                                  
  3972                                  L_code_ptr_set_car:
  3973 00002CC6 C8000000                        enter 0, 0
  3974 00002CCA 48837D1802                      cmp COUNT, 2
  3975 00002CCF 0F856F040000                    jne L_error_arg_count_2
  3976 00002CD5 488B4520                        mov rax, PARAM(0)
  3977                                          assert_pair(rax)
    53 00002CD9 803821              <1>  cmp byte [%1], %2
    54 00002CDC 0F8501050000        <1>  jne L_error_incorrect_type
  3978 00002CE2 488B5D28                        mov rbx, PARAM(1)
  3979 00002CE6 48895801                        mov SOB_PAIR_CAR(rax), rbx
  3980 00002CEA 48B8-                           mov rax, sob_void
  3980 00002CEC [0000000000000000] 
  3981 00002CF4 C9                              leave
  3982 00002CF5 C22000                          ret AND_KILL_FRAME(2)
  3983                                  
  3984                                  L_code_ptr_set_cdr:
  3985 00002CF8 C8000000                        enter 0, 0
  3986 00002CFC 48837D1802                      cmp COUNT, 2
  3987 00002D01 0F853D040000                    jne L_error_arg_count_2
  3988 00002D07 488B4520                        mov rax, PARAM(0)
  3989                                          assert_pair(rax)
    53 00002D0B 803821              <1>  cmp byte [%1], %2
    54 00002D0E 0F85CF040000        <1>  jne L_error_incorrect_type
  3990 00002D14 488B5D28                        mov rbx, PARAM(1)
  3991 00002D18 48895809                        mov SOB_PAIR_CDR(rax), rbx
  3992 00002D1C 48B8-                           mov rax, sob_void
  3992 00002D1E [0000000000000000] 
  3993 00002D26 C9                              leave
  3994 00002D27 C22000                          ret AND_KILL_FRAME(2)
  3995                                  
  3996                                  L_code_ptr_string_ref:
  3997 00002D2A C8000000                        enter 0, 0
  3998 00002D2E 48837D1802                      cmp COUNT, 2
  3999 00002D33 0F850B040000                    jne L_error_arg_count_2
  4000 00002D39 488B7D20                        mov rdi, PARAM(0)
  4001                                          assert_string(rdi)
    53 00002D3D 803F03              <1>  cmp byte [%1], %2
    54 00002D40 0F859D040000        <1>  jne L_error_incorrect_type
  4002 00002D46 488B7528                        mov rsi, PARAM(1)
  4003                                          assert_integer(rsi)
    53 00002D4A 803E11              <1>  cmp byte [%1], %2
    54 00002D4D 0F8590040000        <1>  jne L_error_incorrect_type
  4004 00002D53 488B5701                        mov rdx, qword [rdi + 1]
  4005 00002D57 488B4E01                        mov rcx, qword [rsi + 1]
  4006 00002D5B 4839D1                          cmp rcx, rdx
  4007 00002D5E 0F8D14030000                    jge L_error_integer_range
  4008 00002D64 4883F900                        cmp rcx, 0
  4009 00002D68 0F8C0A030000                    jl L_error_integer_range
  4010 00002D6E 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  4011 00002D72 BF02000000                      mov rdi, 2
  4012 00002D77 E88CE6FFFF                      call malloc
  4013 00002D7C C60002                          mov byte [rax], T_char
  4014 00002D7F 885801                          mov byte [rax + 1], bl
  4015 00002D82 C9                              leave
  4016 00002D83 C22000                          ret AND_KILL_FRAME(2)
  4017                                  
  4018                                  L_code_ptr_vector_ref:
  4019 00002D86 C8000000                        enter 0, 0
  4020 00002D8A 48837D1802                      cmp COUNT, 2
  4021 00002D8F 0F85AF030000                    jne L_error_arg_count_2
  4022 00002D95 488B7D20                        mov rdi, PARAM(0)
  4023                                          assert_vector(rdi)
    53 00002D99 803F22              <1>  cmp byte [%1], %2
    54 00002D9C 0F8541040000        <1>  jne L_error_incorrect_type
  4024 00002DA2 488B7528                        mov rsi, PARAM(1)
  4025                                          assert_integer(rsi)
    53 00002DA6 803E11              <1>  cmp byte [%1], %2
    54 00002DA9 0F8534040000        <1>  jne L_error_incorrect_type
  4026 00002DAF 488B5701                        mov rdx, qword [rdi + 1]
  4027 00002DB3 488B4E01                        mov rcx, qword [rsi + 1]
  4028 00002DB7 4839D1                          cmp rcx, rdx
  4029 00002DBA 0F8DB8020000                    jge L_error_integer_range
  4030 00002DC0 4883F900                        cmp rcx, 0
  4031 00002DC4 0F8CAE020000                    jl L_error_integer_range
  4032 00002DCA 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  4033 00002DCF C9                              leave
  4034 00002DD0 C22000                          ret AND_KILL_FRAME(2)
  4035                                  
  4036                                  L_code_ptr_vector_set:
  4037 00002DD3 C8000000                        enter 0, 0
  4038 00002DD7 48837D1803                      cmp COUNT, 3
  4039 00002DDC 0F85CC030000                    jne L_error_arg_count_3
  4040 00002DE2 488B7D20                        mov rdi, PARAM(0)
  4041                                          assert_vector(rdi)
    53 00002DE6 803F22              <1>  cmp byte [%1], %2
    54 00002DE9 0F85F4030000        <1>  jne L_error_incorrect_type
  4042 00002DEF 488B7528                        mov rsi, PARAM(1)
  4043                                          assert_integer(rsi)
    53 00002DF3 803E11              <1>  cmp byte [%1], %2
    54 00002DF6 0F85E7030000        <1>  jne L_error_incorrect_type
  4044 00002DFC 488B5701                        mov rdx, qword [rdi + 1]
  4045 00002E00 488B4E01                        mov rcx, qword [rsi + 1]
  4046 00002E04 4839D1                          cmp rcx, rdx
  4047 00002E07 0F8D6B020000                    jge L_error_integer_range
  4048 00002E0D 4883F900                        cmp rcx, 0
  4049 00002E11 0F8C61020000                    jl L_error_integer_range
  4050 00002E17 488B4530                        mov rax, PARAM(2)
  4051 00002E1B 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  4052 00002E20 48B8-                           mov rax, sob_void
  4052 00002E22 [0000000000000000] 
  4053 00002E2A C9                              leave
  4054 00002E2B C22800                          ret AND_KILL_FRAME(3)
  4055                                  
  4056                                  L_code_ptr_string_set:
  4057 00002E2E C8000000                        enter 0, 0
  4058 00002E32 48837D1803                      cmp COUNT, 3
  4059 00002E37 0F8571030000                    jne L_error_arg_count_3
  4060 00002E3D 488B7D20                        mov rdi, PARAM(0)
  4061                                          assert_string(rdi)
    53 00002E41 803F03              <1>  cmp byte [%1], %2
    54 00002E44 0F8599030000        <1>  jne L_error_incorrect_type
  4062 00002E4A 488B7528                        mov rsi, PARAM(1)
  4063                                          assert_integer(rsi)
    53 00002E4E 803E11              <1>  cmp byte [%1], %2
    54 00002E51 0F858C030000        <1>  jne L_error_incorrect_type
  4064 00002E57 488B5701                        mov rdx, qword [rdi + 1]
  4065 00002E5B 488B4E01                        mov rcx, qword [rsi + 1]
  4066 00002E5F 4839D1                          cmp rcx, rdx
  4067 00002E62 0F8D10020000                    jge L_error_integer_range
  4068 00002E68 4883F900                        cmp rcx, 0
  4069 00002E6C 0F8C06020000                    jl L_error_integer_range
  4070 00002E72 488B4530                        mov rax, PARAM(2)
  4071                                          assert_char(rax)
    53 00002E76 803802              <1>  cmp byte [%1], %2
    54 00002E79 0F8564030000        <1>  jne L_error_incorrect_type
  4072 00002E7F 8A4001                          mov al, byte [rax + 1]
  4073 00002E82 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  4074 00002E86 48B8-                           mov rax, sob_void
  4074 00002E88 [0000000000000000] 
  4075 00002E90 C9                              leave
  4076 00002E91 C22800                          ret AND_KILL_FRAME(3)
  4077                                  
  4078                                  L_code_ptr_make_vector:
  4079 00002E94 C8000000                        enter 0, 0
  4080 00002E98 48837D1802                      cmp COUNT, 2
  4081 00002E9D 0F85A1020000                    jne L_error_arg_count_2
  4082 00002EA3 488B4D20                        mov rcx, PARAM(0)
  4083                                          assert_integer(rcx)
    53 00002EA7 803911              <1>  cmp byte [%1], %2
    54 00002EAA 0F8533030000        <1>  jne L_error_incorrect_type
  4084 00002EB0 488B4901                        mov rcx, qword [rcx + 1]
  4085 00002EB4 4883F900                        cmp rcx, 0
  4086 00002EB8 0F8CBA010000                    jl L_error_integer_range
  4087 00002EBE 488B5528                        mov rdx, PARAM(1)
  4088 00002EC2 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  4089 00002ECA E839E5FFFF                      call malloc
  4090 00002ECF C60022                          mov byte [rax], T_vector
  4091 00002ED2 48894801                        mov qword [rax + 1], rcx
  4092 00002ED6 41B800000000                    mov r8, 0
  4093                                  .L0:
  4094 00002EDC 4939C8                          cmp r8, rcx
  4095 00002EDF 740A                            je .L1
  4096 00002EE1 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  4097 00002EE6 49FFC0                          inc r8
  4098 00002EE9 EBF1                            jmp .L0
  4099                                  .L1:
  4100 00002EEB C9                              leave
  4101 00002EEC C22000                          ret AND_KILL_FRAME(2)
  4102                                          
  4103                                  L_code_ptr_make_string:
  4104 00002EEF C8000000                        enter 0, 0
  4105 00002EF3 48837D1802                      cmp COUNT, 2
  4106 00002EF8 0F8546020000                    jne L_error_arg_count_2
  4107 00002EFE 488B4D20                        mov rcx, PARAM(0)
  4108                                          assert_integer(rcx)
    53 00002F02 803911              <1>  cmp byte [%1], %2
    54 00002F05 0F85D8020000        <1>  jne L_error_incorrect_type
  4109 00002F0B 488B4901                        mov rcx, qword [rcx + 1]
  4110 00002F0F 4883F900                        cmp rcx, 0
  4111 00002F13 0F8C5F010000                    jl L_error_integer_range
  4112 00002F19 488B5528                        mov rdx, PARAM(1)
  4113                                          assert_char(rdx)
    53 00002F1D 803A02              <1>  cmp byte [%1], %2
    54 00002F20 0F85BD020000        <1>  jne L_error_incorrect_type
  4114 00002F26 8A5201                          mov dl, byte [rdx + 1]
  4115 00002F29 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  4116 00002F2D E8D6E4FFFF                      call malloc
  4117 00002F32 C60003                          mov byte [rax], T_string
  4118 00002F35 48894801                        mov qword [rax + 1], rcx
  4119 00002F39 41B800000000                    mov r8, 0
  4120                                  .L0:
  4121 00002F3F 4939C8                          cmp r8, rcx
  4122 00002F42 740A                            je .L1
  4123 00002F44 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  4124 00002F49 49FFC0                          inc r8
  4125 00002F4C EBF1                            jmp .L0
  4126                                  .L1:
  4127 00002F4E C9                              leave
  4128 00002F4F C22000                          ret AND_KILL_FRAME(2)
  4129                                  
  4130                                  L_code_ptr_numerator:
  4131 00002F52 C8000000                        enter 0, 0
  4132 00002F56 48837D1801                      cmp COUNT, 1
  4133 00002F5B 0F85AE010000                    jne L_error_arg_count_1
  4134 00002F61 488B4520                        mov rax, PARAM(0)
  4135                                          assert_fraction(rax)
    53 00002F65 803812              <1>  cmp byte [%1], %2
    54 00002F68 0F8575020000        <1>  jne L_error_incorrect_type
  4136 00002F6E 488B7801                        mov rdi, qword [rax + 1]
  4137 00002F72 E8E7000000                      call make_integer
  4138 00002F77 C9                              leave
  4139 00002F78 C21800                          ret AND_KILL_FRAME(1)
  4140                                          
  4141                                  L_code_ptr_denominator:
  4142 00002F7B C8000000                        enter 0, 0
  4143 00002F7F 48837D1801                      cmp COUNT, 1
  4144 00002F84 0F8585010000                    jne L_error_arg_count_1
  4145 00002F8A 488B4520                        mov rax, PARAM(0)
  4146                                          assert_fraction(rax)
    53 00002F8E 803812              <1>  cmp byte [%1], %2
    54 00002F91 0F854C020000        <1>  jne L_error_incorrect_type
  4147 00002F97 488B7809                        mov rdi, qword [rax + 1 + 8]
  4148 00002F9B E8BE000000                      call make_integer
  4149 00002FA0 C9                              leave
  4150 00002FA1 C21800                          ret AND_KILL_FRAME(1)
  4151                                  
  4152                                  L_code_ptr_is_eq:
  4153 00002FA4 C8000000                	enter 0, 0
  4154 00002FA8 48837D1802              	cmp COUNT, 2
  4155 00002FAD 0F8591010000            	jne L_error_arg_count_2
  4156 00002FB3 488B7D20                	mov rdi, PARAM(0)
  4157 00002FB7 488B7528                	mov rsi, PARAM(1)
  4158 00002FBB 4839F7                  	cmp rdi, rsi
  4159 00002FBE 746C                    	je .L_eq_true
  4160 00002FC0 8A17                    	mov dl, byte [rdi]
  4161 00002FC2 3A16                    	cmp dl, byte [rsi]
  4162 00002FC4 7572                    	jne .L_eq_false
  4163 00002FC6 80FA02                  	cmp dl, T_char
  4164 00002FC9 7459                    	je .L_char
  4165 00002FCB 80FA41                  	cmp dl, T_interned_symbol
  4166 00002FCE 7440                    	je .L_interned_symbol
  4167 00002FD0 80FA42                          cmp dl, T_uninterned_symbol
  4168 00002FD3 7443                            je .L_uninterned_symbol
  4169 00002FD5 80FA13                  	cmp dl, T_real
  4170 00002FD8 742E                    	je .L_real
  4171 00002FDA 80FA12                  	cmp dl, T_fraction
  4172 00002FDD 7413                    	je .L_fraction
  4173 00002FDF 80FA11                          cmp dl, T_integer
  4174 00002FE2 7402                            je .L_integer
  4175 00002FE4 EB52                    	jmp .L_eq_false
  4176                                  .L_integer:
  4177 00002FE6 488B4601                        mov rax, qword [rsi + 1]
  4178 00002FEA 483B4701                        cmp rax, qword [rdi + 1]
  4179 00002FEE 7548                            jne .L_eq_false
  4180 00002FF0 EB3A                            jmp .L_eq_true
  4181                                  .L_fraction:
  4182 00002FF2 488B4601                	mov rax, qword [rsi + 1]
  4183 00002FF6 483B4701                	cmp rax, qword [rdi + 1]
  4184 00002FFA 753C                    	jne .L_eq_false
  4185 00002FFC 488B4609                	mov rax, qword [rsi + 1 + 8]
  4186 00003000 483B4709                	cmp rax, qword [rdi + 1 + 8]
  4187 00003004 7532                    	jne .L_eq_false
  4188 00003006 EB24                    	jmp .L_eq_true
  4189                                  .L_real:
  4190 00003008 488B4601                	mov rax, qword [rsi + 1]
  4191 0000300C 483B4701                	cmp rax, qword [rdi + 1]
  4192                                  .L_interned_symbol:
  4193                                  	; never reached, because interned_symbols are static!
  4194                                  	; but I'm keeping it in case, I'll ever change
  4195                                  	; the implementation
  4196 00003010 488B4601                	mov rax, qword [rsi + 1]
  4197 00003014 483B4701                	cmp rax, qword [rdi + 1]
  4198                                  .L_uninterned_symbol:
  4199 00003018 4C8B4701                        mov r8, qword [rdi + 1]
  4200 0000301C 4C3B4601                        cmp r8, qword [rsi + 1]
  4201 00003020 7516                            jne .L_eq_false
  4202 00003022 EB08                            jmp .L_eq_true
  4203                                  .L_char:
  4204 00003024 8A5E01                  	mov bl, byte [rsi + 1]
  4205 00003027 3A5F01                  	cmp bl, byte [rdi + 1]
  4206 0000302A 750C                    	jne .L_eq_false
  4207                                  .L_eq_true:
  4208 0000302C 48B8-                   	mov rax, sob_boolean_true
  4208 0000302E [0300000000000000] 
  4209 00003036 EB0A                    	jmp .L_eq_exit
  4210                                  .L_eq_false:
  4211 00003038 48B8-                   	mov rax, sob_boolean_false
  4211 0000303A [0200000000000000] 
  4212                                  .L_eq_exit:
  4213 00003042 C9                      	leave
  4214 00003043 C22000                  	ret AND_KILL_FRAME(2)
  4215                                  
  4216                                  make_real:
  4217 00003046 C8000000                        enter 0, 0
  4218 0000304A BF09000000                      mov rdi, (1 + 8)
  4219 0000304F E8B4E3FFFF                      call malloc
  4220 00003054 C60013                          mov byte [rax], T_real
  4221 00003057 F20F114001                      movsd qword [rax + 1], xmm0
  4222 0000305C C9                              leave 
  4223 0000305D C3                              ret
  4224                                          
  4225                                  make_integer:
  4226 0000305E C8000000                        enter 0, 0
  4227 00003062 4889FE                          mov rsi, rdi
  4228 00003065 BF09000000                      mov rdi, (1 + 8)
  4229 0000306A E899E3FFFF                      call malloc
  4230 0000306F C60011                          mov byte [rax], T_integer
  4231 00003072 48897001                        mov qword [rax + 1], rsi
  4232 00003076 C9                              leave
  4233 00003077 C3                              ret
  4234                                          
  4235                                  L_error_integer_range:
  4236 00003078 488B3C25[00000000]              mov rdi, qword [stderr]
  4237 00003080 48BE-                           mov rsi, fmt_integer_range
  4237 00003082 [C809000000000000] 
  4238 0000308A B800000000                      mov rax, 0
  4239                                          ENTER
    44 0000308F C8000000            <1>  enter 0, 0
    45 00003093 4883E4F0            <1>  and rsp, ~15
  4240 00003097 E8(00000000)                    call fprintf
  4241                                          LEAVE
    49 0000309C C9                  <1>  leave
  4242 0000309D 48C7C0FBFFFFFF                  mov rax, -5
  4243 000030A4 E8(00000000)                    call exit
  4244                                  
  4245                                  L_error_arg_negative:
  4246 000030A9 488B3C25[00000000]              mov rdi, qword [stderr]
  4247 000030B1 48BE-                           mov rsi, fmt_arg_negative
  4247 000030B3 [A008000000000000] 
  4248 000030BB B800000000                      mov rax, 0
  4249                                          ENTER
    44 000030C0 C8000000            <1>  enter 0, 0
    45 000030C4 4883E4F0            <1>  and rsp, ~15
  4250 000030C8 E8(00000000)                    call fprintf
  4251                                          LEAVE
    49 000030CD C9                  <1>  leave
  4252 000030CE 48C7C0FDFFFFFF                  mov rax, -3
  4253 000030D5 E8(00000000)                    call exit
  4254                                  
  4255                                  L_error_arg_count_0:
  4256 000030DA 488B3C25[00000000]              mov rdi, qword [stderr]
  4257 000030E2 48BE-                           mov rsi, fmt_arg_count_0
  4257 000030E4 [C608000000000000] 
  4258 000030EC 488B5518                        mov rdx, COUNT
  4259 000030F0 B800000000                      mov rax, 0
  4260                                          ENTER
    44 000030F5 C8000000            <1>  enter 0, 0
    45 000030F9 4883E4F0            <1>  and rsp, ~15
  4261 000030FD E8(00000000)                    call fprintf
  4262                                          LEAVE
    49 00003102 C9                  <1>  leave
  4263 00003103 48C7C0FDFFFFFF                  mov rax, -3
  4264 0000310A E8(00000000)                    call exit
  4265                                  
  4266                                  L_error_arg_count_1:
  4267 0000310F 488B3C25[00000000]              mov rdi, qword [stderr]
  4268 00003117 48BE-                           mov rsi, fmt_arg_count_1
  4268 00003119 [EE08000000000000] 
  4269 00003121 488B5518                        mov rdx, COUNT
  4270 00003125 B800000000                      mov rax, 0
  4271                                          ENTER
    44 0000312A C8000000            <1>  enter 0, 0
    45 0000312E 4883E4F0            <1>  and rsp, ~15
  4272 00003132 E8(00000000)                    call fprintf
  4273                                          LEAVE
    49 00003137 C9                  <1>  leave
  4274 00003138 48C7C0FDFFFFFF                  mov rax, -3
  4275 0000313F E8(00000000)                    call exit
  4276                                  
  4277                                  L_error_arg_count_2:
  4278 00003144 488B3C25[00000000]              mov rdi, qword [stderr]
  4279 0000314C 48BE-                           mov rsi, fmt_arg_count_2
  4279 0000314E [5409000000000000] 
  4280 00003156 488B5518                        mov rdx, COUNT
  4281 0000315A B800000000                      mov rax, 0
  4282                                          ENTER
    44 0000315F C8000000            <1>  enter 0, 0
    45 00003163 4883E4F0            <1>  and rsp, ~15
  4283 00003167 E8(00000000)                    call fprintf
  4284                                          LEAVE
    49 0000316C C9                  <1>  leave
  4285 0000316D 48C7C0FDFFFFFF                  mov rax, -3
  4286 00003174 E8(00000000)                    call exit
  4287                                  
  4288                                  L_error_arg_count_12:
  4289 00003179 488B3C25[00000000]              mov rdi, qword [stderr]
  4290 00003181 48BE-                           mov rsi, fmt_arg_count_12
  4290 00003183 [1409000000000000] 
  4291 0000318B 488B5518                        mov rdx, COUNT
  4292 0000318F B800000000                      mov rax, 0
  4293                                          ENTER
    44 00003194 C8000000            <1>  enter 0, 0
    45 00003198 4883E4F0            <1>  and rsp, ~15
  4294 0000319C E8(00000000)                    call fprintf
  4295                                          LEAVE
    49 000031A1 C9                  <1>  leave
  4296 000031A2 48C7C0FDFFFFFF                  mov rax, -3
  4297 000031A9 E8(00000000)                    call exit
  4298                                  
  4299                                  L_error_arg_count_3:
  4300 000031AE 488B3C25[00000000]              mov rdi, qword [stderr]
  4301 000031B6 48BE-                           mov rsi, fmt_arg_count_3
  4301 000031B8 [7B09000000000000] 
  4302 000031C0 488B5518                        mov rdx, COUNT
  4303 000031C4 B800000000                      mov rax, 0
  4304                                          ENTER
    44 000031C9 C8000000            <1>  enter 0, 0
    45 000031CD 4883E4F0            <1>  and rsp, ~15
  4305 000031D1 E8(00000000)                    call fprintf
  4306                                          LEAVE
    49 000031D6 C9                  <1>  leave
  4307 000031D7 48C7C0FDFFFFFF                  mov rax, -3
  4308 000031DE E8(00000000)                    call exit
  4309                                          
  4310                                  L_error_incorrect_type:
  4311 000031E3 488B3C25[00000000]              mov rdi, qword [stderr]
  4312 000031EB 48BE-                           mov rsi, fmt_type
  4312 000031ED [A409000000000000] 
  4313 000031F5 B800000000                      mov rax, 0
  4314                                          ENTER
    44 000031FA C8000000            <1>  enter 0, 0
    45 000031FE 4883E4F0            <1>  and rsp, ~15
  4315 00003202 E8(00000000)                    call fprintf
  4316                                          LEAVE
    49 00003207 C9                  <1>  leave
  4317 00003208 48C7C0FCFFFFFF                  mov rax, -4
  4318 0000320F E8(00000000)                    call exit
  4319                                  
  4320                                  L_error_division_by_zero:
  4321 00003214 488B3C25[00000000]              mov rdi, qword [stderr]
  4322 0000321C 48BE-                           mov rsi, fmt_division_by_zero
  4322 0000321E [E509000000000000] 
  4323 00003226 B800000000                      mov rax, 0
  4324                                          ENTER
    44 0000322B C8000000            <1>  enter 0, 0
    45 0000322F 4883E4F0            <1>  and rsp, ~15
  4325 00003233 E8(00000000)                    call fprintf
  4326                                          LEAVE
    49 00003238 C9                  <1>  leave
  4327 00003239 48C7C0F8FFFFFF                  mov rax, -8
  4328 00003240 E8(00000000)                    call exit
  4329                                  
  4330                                  section .data
  4331                                  gensym_count:
  4332 00000895 0000000000000000                dq 0
  4333                                  fmt_char:
  4334 0000089D 256300                          db `%c\0`
  4335                                  fmt_arg_negative:
  4336 000008A0 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
  4336 000008A9 7267756D656E742063-
  4336 000008B2 616E6E6F7420626520-
  4336 000008BB 6E656761746976652E-
  4336 000008C4 0A00               
  4337                                  fmt_arg_count_0:
  4338 000008C6 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  4338 000008CF 74696E67207A65726F-
  4338 000008D8 20617267756D656E74-
  4338 000008E1 732E20466F756E6420-
  4338 000008EA 25640A00           
  4339                                  fmt_arg_count_1:
  4340 000008EE 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  4340 000008F7 74696E67206F6E6520-
  4340 00000900 617267756D656E742E-
  4340 00000909 20466F756E64202564-
  4340 00000912 0A00               
  4341                                  fmt_arg_count_12:
  4342 00000914 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  4342 0000091D 74696E67206F6E6520-
  4342 00000926 726571756972656420-
  4342 0000092F 616E64206F6E65206F-
  4342 00000938 7074696F6E616C2061-
  4342 00000941 7267756D656E742E20-
  4342 0000094A 466F756E642025640A-
  4342 00000953 00                 
  4343                                  fmt_arg_count_2:
  4344 00000954 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  4344 0000095D 74696E672074776F20-
  4344 00000966 617267756D656E7473-
  4344 0000096F 2E20466F756E642025-
  4344 00000978 640A00             
  4345                                  fmt_arg_count_3:
  4346 0000097B 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  4346 00000984 74696E672074687265-
  4346 0000098D 6520617267756D656E-
  4346 00000996 74732E20466F756E64-
  4346 0000099F 2025640A00         
  4347                                  fmt_type:
  4348 000009A4 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  4348 000009AD 696F6E207061737365-
  4348 000009B6 6420696E636F727265-
  4348 000009BF 637420747970650A00 
  4349                                  fmt_integer_range:
  4350 000009C8 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  4350 000009D1 7265637420696E7465-
  4350 000009DA 6765722072616E6765-
  4350 000009E3 0A00               
  4351                                  fmt_division_by_zero:
  4352 000009E5 212121204469766973-             db `!!! Division by zero\n\0`
  4352 000009EE 696F6E206279207A65-
  4352 000009F7 726F0A00           
  4353                                  fmt_scheme_error_part_1:
  4354 000009FB 0A2121212054686520-             db `\n!!! The procedure \0`
  4354 00000A04 70726F636564757265-
  4354 00000A0D 2000               
  4355                                  fmt_scheme_error_part_2:
  4356 00000A0F 2061736B656420746F-             db ` asked to terminate the program\n`
  4356 00000A18 207465726D696E6174-
  4356 00000A21 65207468652070726F-
  4356 00000A2A 6772616D0A         
  4357 00000A2F 202020207769746820-             db `    with the following message:\n\n\0`
  4357 00000A38 74686520666F6C6C6F-
  4357 00000A41 77696E67206D657373-
  4357 00000A4A 6167653A0A0A00     
  4358                                  fmt_scheme_error_part_3:
  4359 00000A51 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  4359 00000A5A 210A0A00           
