     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "+"
   638 0000083B 0100000000000000        	dq 1
   639 00000843 2B                      	db 0x2B
   640                                  	; L_constants + 2116:
   641 00000844 11                      	db T_integer	; 0
   642 00000845 0000000000000000        	dq 0
   643                                  	; L_constants + 2125:
   644 0000084D 03                      	db T_string	; "__bin_integer_to_fr...
   645 0000084E 1900000000000000        	dq 25
   646 00000856 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   647 0000085E 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   648 00000866 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   649 0000086E 6E                      	db 0x6E
   650                                  	; L_constants + 2159:
   651 0000086F 41                      	db T_interned_symbol	; +
   652 00000870 [3A08000000000000]      	dq L_constants + 2106
   653                                  	; L_constants + 2168:
   654 00000878 03                      	db T_string	; "all arguments need ...
   655 00000879 2000000000000000        	dq 32
   656 00000881 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   657 00000889 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   658 00000891 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   659 00000899 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   660                                  	; L_constants + 2209:
   661 000008A1 11                      	db T_integer	; 1
   662 000008A2 0100000000000000        	dq 1
   663                                  	; L_constants + 2218:
   664 000008AA 11                      	db T_integer	; 2
   665 000008AB 0200000000000000        	dq 2
   666                                  free_var_0:	; location of +
   667 000008B3 [BB08000000000000]      	dq .undefined_object
   668                                  .undefined_object:
   669 000008BB 05                      	db T_undefined
   670 000008BC [3A08000000000000]      	dq L_constants + 2106
   671                                  
   672                                  free_var_1:	; location of __bin-add-qq
   673 000008C4 [CC08000000000000]      	dq .undefined_object
   674                                  .undefined_object:
   675 000008CC 05                      	db T_undefined
   676 000008CD [6902000000000000]      	dq L_constants + 617
   677                                  
   678                                  free_var_2:	; location of __bin-add-rr
   679 000008D5 [DD08000000000000]      	dq .undefined_object
   680                                  .undefined_object:
   681 000008DD 05                      	db T_undefined
   682 000008DE [1502000000000000]      	dq L_constants + 533
   683                                  
   684                                  free_var_3:	; location of __bin-add-zz
   685 000008E6 [EE08000000000000]      	dq .undefined_object
   686                                  .undefined_object:
   687 000008EE 05                      	db T_undefined
   688 000008EF [BD02000000000000]      	dq L_constants + 701
   689                                  
   690                                  free_var_4:	; location of __bin-apply
   691 000008F7 [FF08000000000000]      	dq .undefined_object
   692                                  .undefined_object:
   693 000008FF 05                      	db T_undefined
   694 00000900 [0102000000000000]      	dq L_constants + 513
   695                                  
   696                                  free_var_5:	; location of __bin_integer_to_fraction
   697 00000908 [1009000000000000]      	dq .undefined_object
   698                                  .undefined_object:
   699 00000910 05                      	db T_undefined
   700 00000911 [4D08000000000000]      	dq L_constants + 2125
   701                                  
   702                                  free_var_6:	; location of __integer-to-fraction
   703 00000919 [2109000000000000]      	dq .undefined_object
   704                                  .undefined_object:
   705 00000921 05                      	db T_undefined
   706 00000922 [A204000000000000]      	dq L_constants + 1186
   707                                  
   708                                  free_var_7:	; location of andmap
   709 0000092A [3209000000000000]      	dq .undefined_object
   710                                  .undefined_object:
   711 00000932 05                      	db T_undefined
   712 00000933 [FA07000000000000]      	dq L_constants + 2042
   713                                  
   714                                  free_var_8:	; location of append
   715 0000093B [4309000000000000]      	dq .undefined_object
   716                                  .undefined_object:
   717 00000943 05                      	db T_undefined
   718 00000944 [2B08000000000000]      	dq L_constants + 2091
   719                                  
   720                                  free_var_9:	; location of apply
   721 0000094C [5409000000000000]      	dq .undefined_object
   722                                  .undefined_object:
   723 00000954 05                      	db T_undefined
   724 00000955 [D207000000000000]      	dq L_constants + 2002
   725                                  
   726                                  free_var_10:	; location of caaaar
   727 0000095D [6509000000000000]      	dq .undefined_object
   728                                  .undefined_object:
   729 00000965 05                      	db T_undefined
   730 00000966 [8106000000000000]      	dq L_constants + 1665
   731                                  
   732                                  free_var_11:	; location of caaadr
   733 0000096E [7609000000000000]      	dq .undefined_object
   734                                  .undefined_object:
   735 00000976 05                      	db T_undefined
   736 00000977 [9006000000000000]      	dq L_constants + 1680
   737                                  
   738                                  free_var_12:	; location of caaar
   739 0000097F [8709000000000000]      	dq .undefined_object
   740                                  .undefined_object:
   741 00000987 05                      	db T_undefined
   742 00000988 [1106000000000000]      	dq L_constants + 1553
   743                                  
   744                                  free_var_13:	; location of caadar
   745 00000990 [9809000000000000]      	dq .undefined_object
   746                                  .undefined_object:
   747 00000998 05                      	db T_undefined
   748 00000999 [9F06000000000000]      	dq L_constants + 1695
   749                                  
   750                                  free_var_14:	; location of caaddr
   751 000009A1 [A909000000000000]      	dq .undefined_object
   752                                  .undefined_object:
   753 000009A9 05                      	db T_undefined
   754 000009AA [AE06000000000000]      	dq L_constants + 1710
   755                                  
   756                                  free_var_15:	; location of caadr
   757 000009B2 [BA09000000000000]      	dq .undefined_object
   758                                  .undefined_object:
   759 000009BA 05                      	db T_undefined
   760 000009BB [1F06000000000000]      	dq L_constants + 1567
   761                                  
   762                                  free_var_16:	; location of caar
   763 000009C3 [CB09000000000000]      	dq .undefined_object
   764                                  .undefined_object:
   765 000009CB 05                      	db T_undefined
   766 000009CC [DD05000000000000]      	dq L_constants + 1501
   767                                  
   768                                  free_var_17:	; location of cadaar
   769 000009D4 [DC09000000000000]      	dq .undefined_object
   770                                  .undefined_object:
   771 000009DC 05                      	db T_undefined
   772 000009DD [BD06000000000000]      	dq L_constants + 1725
   773                                  
   774                                  free_var_18:	; location of cadadr
   775 000009E5 [ED09000000000000]      	dq .undefined_object
   776                                  .undefined_object:
   777 000009ED 05                      	db T_undefined
   778 000009EE [CC06000000000000]      	dq L_constants + 1740
   779                                  
   780                                  free_var_19:	; location of cadar
   781 000009F6 [FE09000000000000]      	dq .undefined_object
   782                                  .undefined_object:
   783 000009FE 05                      	db T_undefined
   784 000009FF [2D06000000000000]      	dq L_constants + 1581
   785                                  
   786                                  free_var_20:	; location of caddar
   787 00000A07 [0F0A000000000000]      	dq .undefined_object
   788                                  .undefined_object:
   789 00000A0F 05                      	db T_undefined
   790 00000A10 [DB06000000000000]      	dq L_constants + 1755
   791                                  
   792                                  free_var_21:	; location of cadddr
   793 00000A18 [200A000000000000]      	dq .undefined_object
   794                                  .undefined_object:
   795 00000A20 05                      	db T_undefined
   796 00000A21 [EA06000000000000]      	dq L_constants + 1770
   797                                  
   798                                  free_var_22:	; location of caddr
   799 00000A29 [310A000000000000]      	dq .undefined_object
   800                                  .undefined_object:
   801 00000A31 05                      	db T_undefined
   802 00000A32 [3B06000000000000]      	dq L_constants + 1595
   803                                  
   804                                  free_var_23:	; location of cadr
   805 00000A3A [420A000000000000]      	dq .undefined_object
   806                                  .undefined_object:
   807 00000A42 05                      	db T_undefined
   808 00000A43 [EA05000000000000]      	dq L_constants + 1514
   809                                  
   810                                  free_var_24:	; location of car
   811 00000A4B [530A000000000000]      	dq .undefined_object
   812                                  .undefined_object:
   813 00000A53 05                      	db T_undefined
   814 00000A54 [1501000000000000]      	dq L_constants + 277
   815                                  
   816                                  free_var_25:	; location of cdaaar
   817 00000A5C [640A000000000000]      	dq .undefined_object
   818                                  .undefined_object:
   819 00000A64 05                      	db T_undefined
   820 00000A65 [F906000000000000]      	dq L_constants + 1785
   821                                  
   822                                  free_var_26:	; location of cdaadr
   823 00000A6D [750A000000000000]      	dq .undefined_object
   824                                  .undefined_object:
   825 00000A75 05                      	db T_undefined
   826 00000A76 [0807000000000000]      	dq L_constants + 1800
   827                                  
   828                                  free_var_27:	; location of cdaar
   829 00000A7E [860A000000000000]      	dq .undefined_object
   830                                  .undefined_object:
   831 00000A86 05                      	db T_undefined
   832 00000A87 [4906000000000000]      	dq L_constants + 1609
   833                                  
   834                                  free_var_28:	; location of cdadar
   835 00000A8F [970A000000000000]      	dq .undefined_object
   836                                  .undefined_object:
   837 00000A97 05                      	db T_undefined
   838 00000A98 [1707000000000000]      	dq L_constants + 1815
   839                                  
   840                                  free_var_29:	; location of cdaddr
   841 00000AA0 [A80A000000000000]      	dq .undefined_object
   842                                  .undefined_object:
   843 00000AA8 05                      	db T_undefined
   844 00000AA9 [2607000000000000]      	dq L_constants + 1830
   845                                  
   846                                  free_var_30:	; location of cdadr
   847 00000AB1 [B90A000000000000]      	dq .undefined_object
   848                                  .undefined_object:
   849 00000AB9 05                      	db T_undefined
   850 00000ABA [5706000000000000]      	dq L_constants + 1623
   851                                  
   852                                  free_var_31:	; location of cdar
   853 00000AC2 [CA0A000000000000]      	dq .undefined_object
   854                                  .undefined_object:
   855 00000ACA 05                      	db T_undefined
   856 00000ACB [F705000000000000]      	dq L_constants + 1527
   857                                  
   858                                  free_var_32:	; location of cddaar
   859 00000AD3 [DB0A000000000000]      	dq .undefined_object
   860                                  .undefined_object:
   861 00000ADB 05                      	db T_undefined
   862 00000ADC [3507000000000000]      	dq L_constants + 1845
   863                                  
   864                                  free_var_33:	; location of cddadr
   865 00000AE4 [EC0A000000000000]      	dq .undefined_object
   866                                  .undefined_object:
   867 00000AEC 05                      	db T_undefined
   868 00000AED [4407000000000000]      	dq L_constants + 1860
   869                                  
   870                                  free_var_34:	; location of cddar
   871 00000AF5 [FD0A000000000000]      	dq .undefined_object
   872                                  .undefined_object:
   873 00000AFD 05                      	db T_undefined
   874 00000AFE [6506000000000000]      	dq L_constants + 1637
   875                                  
   876                                  free_var_35:	; location of cdddar
   877 00000B06 [0E0B000000000000]      	dq .undefined_object
   878                                  .undefined_object:
   879 00000B0E 05                      	db T_undefined
   880 00000B0F [5307000000000000]      	dq L_constants + 1875
   881                                  
   882                                  free_var_36:	; location of cddddr
   883 00000B17 [1F0B000000000000]      	dq .undefined_object
   884                                  .undefined_object:
   885 00000B1F 05                      	db T_undefined
   886 00000B20 [6207000000000000]      	dq L_constants + 1890
   887                                  
   888                                  free_var_37:	; location of cdddr
   889 00000B28 [300B000000000000]      	dq .undefined_object
   890                                  .undefined_object:
   891 00000B30 05                      	db T_undefined
   892 00000B31 [7306000000000000]      	dq L_constants + 1651
   893                                  
   894                                  free_var_38:	; location of cddr
   895 00000B39 [410B000000000000]      	dq .undefined_object
   896                                  .undefined_object:
   897 00000B41 05                      	db T_undefined
   898 00000B42 [0406000000000000]      	dq L_constants + 1540
   899                                  
   900                                  free_var_39:	; location of cdr
   901 00000B4A [520B000000000000]      	dq .undefined_object
   902                                  .undefined_object:
   903 00000B52 05                      	db T_undefined
   904 00000B53 [2101000000000000]      	dq L_constants + 289
   905                                  
   906                                  free_var_40:	; location of cons
   907 00000B5B [630B000000000000]      	dq .undefined_object
   908                                  .undefined_object:
   909 00000B63 05                      	db T_undefined
   910 00000B64 [DF00000000000000]      	dq L_constants + 223
   911                                  
   912                                  free_var_41:	; location of error
   913 00000B6C [740B000000000000]      	dq .undefined_object
   914                                  .undefined_object:
   915 00000B74 05                      	db T_undefined
   916 00000B75 [1103000000000000]      	dq L_constants + 785
   917                                  
   918                                  free_var_42:	; location of fold-left
   919 00000B7D [850B000000000000]      	dq .undefined_object
   920                                  .undefined_object:
   921 00000B85 05                      	db T_undefined
   922 00000B86 [1908000000000000]      	dq L_constants + 2073
   923                                  
   924                                  free_var_43:	; location of fraction->real
   925 00000B8E [960B000000000000]      	dq .undefined_object
   926                                  .undefined_object:
   927 00000B96 05                      	db T_undefined
   928 00000B97 [9201000000000000]      	dq L_constants + 402
   929                                  
   930                                  free_var_44:	; location of fraction?
   931 00000B9F [A70B000000000000]      	dq .undefined_object
   932                                  .undefined_object:
   933 00000BA7 05                      	db T_undefined
   934 00000BA8 [9800000000000000]      	dq L_constants + 152
   935                                  
   936                                  free_var_45:	; location of integer->real
   937 00000BB0 [B80B000000000000]      	dq .undefined_object
   938                                  .undefined_object:
   939 00000BB8 05                      	db T_undefined
   940 00000BB9 [7C01000000000000]      	dq L_constants + 380
   941                                  
   942                                  free_var_46:	; location of integer?
   943 00000BC1 [C90B000000000000]      	dq .undefined_object
   944                                  .undefined_object:
   945 00000BC9 05                      	db T_undefined
   946 00000BCA [F001000000000000]      	dq L_constants + 496
   947                                  
   948                                  free_var_47:	; location of list
   949 00000BD2 [DA0B000000000000]      	dq .undefined_object
   950                                  .undefined_object:
   951 00000BDA 05                      	db T_undefined
   952 00000BDB [7F07000000000000]      	dq L_constants + 1919
   953                                  
   954                                  free_var_48:	; location of list*
   955 00000BE3 [EB0B000000000000]      	dq .undefined_object
   956                                  .undefined_object:
   957 00000BEB 05                      	db T_undefined
   958 00000BEC [AA07000000000000]      	dq L_constants + 1962
   959                                  
   960                                  free_var_49:	; location of list?
   961 00000BF4 [FC0B000000000000]      	dq .undefined_object
   962                                  .undefined_object:
   963 00000BFC 05                      	db T_undefined
   964 00000BFD [7107000000000000]      	dq L_constants + 1905
   965                                  
   966                                  free_var_50:	; location of map
   967 00000C05 [0D0C000000000000]      	dq .undefined_object
   968                                  .undefined_object:
   969 00000C0D 05                      	db T_undefined
   970 00000C0E [EE07000000000000]      	dq L_constants + 2030
   971                                  
   972                                  free_var_51:	; location of not
   973 00000C16 [1E0C000000000000]      	dq .undefined_object
   974                                  .undefined_object:
   975 00000C1E 05                      	db T_undefined
   976 00000C1F [8C07000000000000]      	dq L_constants + 1932
   977                                  
   978                                  free_var_52:	; location of null?
   979 00000C27 [2F0C000000000000]      	dq .undefined_object
   980                                  .undefined_object:
   981 00000C2F 05                      	db T_undefined
   982 00000C30 [0600000000000000]      	dq L_constants + 6
   983                                  
   984                                  free_var_53:	; location of ormap
   985 00000C38 [400C000000000000]      	dq .undefined_object
   986                                  .undefined_object:
   987 00000C40 05                      	db T_undefined
   988 00000C41 [E007000000000000]      	dq L_constants + 2016
   989                                  
   990                                  free_var_54:	; location of pair?
   991 00000C49 [510C000000000000]      	dq .undefined_object
   992                                  .undefined_object:
   993 00000C51 05                      	db T_undefined
   994 00000C52 [1400000000000000]      	dq L_constants + 20
   995                                  
   996                                  free_var_55:	; location of rational?
   997 00000C5A [620C000000000000]      	dq .undefined_object
   998                                  .undefined_object:
   999 00000C62 05                      	db T_undefined
  1000 00000C63 [9807000000000000]      	dq L_constants + 1944
  1001                                  
  1002                                  free_var_56:	; location of real?
  1003 00000C6B [730C000000000000]      	dq .undefined_object
  1004                                  .undefined_object:
  1005 00000C73 05                      	db T_undefined
  1006 00000C74 [8A00000000000000]      	dq L_constants + 138
  1007                                  
  1008                                  free_var_57:	; location of reverse
  1009 00000C7C [840C000000000000]      	dq .undefined_object
  1010                                  .undefined_object:
  1011 00000C84 05                      	db T_undefined
  1012 00000C85 [0908000000000000]      	dq L_constants + 2057
  1013                                  
  1014                                  
  1015                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  1016                                  global main
  1017                                  section .text
  1018                                  main:
  1019 00000000 C8000000                        enter 0, 0
  1020 00000004 6A00                            push 0
  1021 00000006 6A00                            push 0
  1022 00000008 68[57680000]                    push Lend
  1023 0000000D C8000000                        enter 0, 0
  1024                                  	; building closure for null?
  1025 00000011 48BF-                   	mov rdi, free_var_52
  1025 00000013 [270C000000000000] 
  1026 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  1026 0000001D [2174000000000000] 
  1027 00000025 E8C8710000              	call bind_primitive
  1028                                  
  1029                                  	; building closure for pair?
  1030 0000002A 48BF-                   	mov rdi, free_var_54
  1030 0000002C [490C000000000000] 
  1031 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  1031 00000036 [5374000000000000] 
  1032 0000003E E8AF710000              	call bind_primitive
  1033                                  
  1034                                  	; building closure for real?
  1035 00000043 48BF-                   	mov rdi, free_var_56
  1035 00000045 [6B0C000000000000] 
  1036 0000004D 48BE-                   	mov rsi, L_code_ptr_is_real
  1036 0000004F [4B76000000000000] 
  1037 00000057 E896710000              	call bind_primitive
  1038                                  
  1039                                  	; building closure for fraction?
  1040 0000005C 48BF-                   	mov rdi, free_var_44
  1040 0000005E [9F0B000000000000] 
  1041 00000066 48BE-                   	mov rsi, L_code_ptr_is_fraction
  1041 00000068 [7D76000000000000] 
  1042 00000070 E87D710000              	call bind_primitive
  1043                                  
  1044                                  	; building closure for cons
  1045 00000075 48BF-                   	mov rdi, free_var_40
  1045 00000077 [5B0B000000000000] 
  1046 0000007F 48BE-                   	mov rsi, L_code_ptr_cons
  1046 00000081 [B377000000000000] 
  1047 00000089 E864710000              	call bind_primitive
  1048                                  
  1049                                  	; building closure for car
  1050 0000008E 48BF-                   	mov rdi, free_var_24
  1050 00000090 [4B0A000000000000] 
  1051 00000098 48BE-                   	mov rsi, L_code_ptr_car
  1051 0000009A [5C78000000000000] 
  1052 000000A2 E84B710000              	call bind_primitive
  1053                                  
  1054                                  	; building closure for cdr
  1055 000000A7 48BF-                   	mov rdi, free_var_39
  1055 000000A9 [4A0B000000000000] 
  1056 000000B1 48BE-                   	mov rsi, L_code_ptr_cdr
  1056 000000B3 [8078000000000000] 
  1057 000000BB E832710000              	call bind_primitive
  1058                                  
  1059                                  	; building closure for integer->real
  1060 000000C0 48BF-                   	mov rdi, free_var_45
  1060 000000C2 [B00B000000000000] 
  1061 000000CA 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1061 000000CC [3E79000000000000] 
  1062 000000D4 E819710000              	call bind_primitive
  1063                                  
  1064                                  	; building closure for fraction->real
  1065 000000D9 48BF-                   	mov rdi, free_var_43
  1065 000000DB [8E0B000000000000] 
  1066 000000E3 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  1066 000000E5 [6C79000000000000] 
  1067 000000ED E800710000              	call bind_primitive
  1068                                  
  1069                                  	; building closure for integer?
  1070 000000F2 48BF-                   	mov rdi, free_var_46
  1070 000000F4 [C10B000000000000] 
  1071 000000FC 48BE-                   	mov rsi, L_code_ptr_is_integer
  1071 000000FE [E57A000000000000] 
  1072 00000106 E8E7700000              	call bind_primitive
  1073                                  
  1074                                  	; building closure for __bin-apply
  1075 0000010B 48BF-                   	mov rdi, free_var_4
  1075 0000010D [F708000000000000] 
  1076 00000115 48BE-                   	mov rsi, L_code_ptr_bin_apply
  1076 00000117 [6273000000000000] 
  1077 0000011F E8CE700000              	call bind_primitive
  1078                                  
  1079                                  	; building closure for __bin-add-rr
  1080 00000124 48BF-                   	mov rdi, free_var_2
  1080 00000126 [D508000000000000] 
  1081 0000012E 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  1081 00000130 [177B000000000000] 
  1082 00000138 E8B5700000              	call bind_primitive
  1083                                  
  1084                                  	; building closure for __bin-add-qq
  1085 0000013D 48BF-                   	mov rdi, free_var_1
  1085 0000013F [C408000000000000] 
  1086 00000147 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  1086 00000149 [617C000000000000] 
  1087 00000151 E89C700000              	call bind_primitive
  1088                                  
  1089                                  	; building closure for __bin-add-zz
  1090 00000156 48BF-                   	mov rdi, free_var_3
  1090 00000158 [E608000000000000] 
  1091 00000160 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  1091 00000162 [257C000000000000] 
  1092 0000016A E883700000              	call bind_primitive
  1093                                  
  1094                                  	; building closure for error
  1095 0000016F 48BF-                   	mov rdi, free_var_41
  1095 00000171 [6C0B000000000000] 
  1096 00000179 48BE-                   	mov rsi, L_code_ptr_error
  1096 0000017B [2A7F000000000000] 
  1097 00000183 E86A700000              	call bind_primitive
  1098                                  
  1099                                  	; building closure for __integer-to-fraction
  1100 00000188 48BF-                   	mov rdi, free_var_6
  1100 0000018A [1909000000000000] 
  1101 00000192 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  1101 00000194 [D879000000000000] 
  1102 0000019C E851700000              	call bind_primitive
  1103                                  
  1104 000001A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1105 000001A6 E817680000              	call malloc
  1106 000001AB 50                      	push rax
  1107 000001AC BF00000000              	mov rdi, 8 * 0	; new rib
  1108 000001B1 E80C680000              	call malloc
  1109 000001B6 50                      	push rax
  1110 000001B7 BF08000000              	mov rdi, 8 * 1	; extended env
  1111 000001BC E801680000              	call malloc
  1112 000001C1 488B7D10                	mov rdi, ENV
  1113 000001C5 BE00000000              	mov rsi, 0
  1114 000001CA BA01000000              	mov rdx, 1
  1115                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  1116 000001CF 4883FE00                	cmp rsi, 0
  1117 000001D3 7410                    	je .L_lambda_simple_env_end_0001
  1118 000001D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1119 000001D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1120 000001DD 48FFC6                  	inc rsi
  1121 000001E0 48FFC2                  	inc rdx
  1122 000001E3 EBEA                    	jmp .L_lambda_simple_env_loop_0001
  1123                                  .L_lambda_simple_env_end_0001:
  1124 000001E5 5B                      	pop rbx
  1125 000001E6 BE00000000              	mov rsi, 0
  1126                                  .L_lambda_simple_params_loop_0001:	; copy params
  1127 000001EB 4883FE00                	cmp rsi, 0
  1128 000001EF 740E                    	je .L_lambda_simple_params_end_0001
  1129 000001F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1130 000001F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1131 000001FA 48FFC6                  	inc rsi
  1132 000001FD EBEC                    	jmp .L_lambda_simple_params_loop_0001
  1133                                  .L_lambda_simple_params_end_0001:
  1134 000001FF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1135 00000202 4889C3                  	mov rbx, rax
  1136 00000205 58                      	pop rax
  1137 00000206 C60004                  	mov byte [rax], T_closure
  1138 00000209 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1139 0000020D 48C74009[1A020000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
  1140 00000215 E99C000000              	jmp .L_lambda_simple_end_0001
  1141                                  .L_lambda_simple_code_0001:	; lambda-simple body
  1142 0000021A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1143 00000220 740B                    	je .L_lambda_simple_arity_check_ok_0001
  1144 00000222 FF742410                	push qword [rsp + 8 * 2]
  1145 00000226 6A01                    	push 1
  1146 00000228 E94E670000              	jmp L_error_incorrect_arity_simple
  1147                                  .L_lambda_simple_arity_check_ok_0001:
  1148 0000022D C8000000                	enter 0, 0
  1149                                  	; preparing a tail-call
  1150                                  	; preparing a non-tail-call
  1151 00000231 488B4520                	mov rax, PARAM(0)	; param x
  1152 00000235 50                      	push rax
  1153 00000236 6A01                    	push 1	; arg count
  1154 00000238 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1155 00000240 803805                  	cmp byte [rax], T_undefined
  1156 00000243 0F844C660000            	je L_error_fvar_undefined
  1157 00000249 803804                  	cmp byte [rax], T_closure
  1158 0000024C 0F85C7660000            	jne L_error_non_closure
  1159 00000252 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1160 00000255 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1161 00000258 50                      	push rax
  1162 00000259 6A01                    	push 1	; arg count
  1163 0000025B 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1164 00000263 803805                  	cmp byte [rax], T_undefined
  1165 00000266 0F8429660000            	je L_error_fvar_undefined
  1166 0000026C 803804                  	cmp byte [rax], T_closure
  1167 0000026F 0F85A4660000            	jne L_error_non_closure
  1168 00000275 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1169 00000278 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1170 0000027B FF7500                  	push qword[rbp]
  1171 0000027E 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1172 00000283 48895D10                	mov qword[rbp + 8*2],rbx
  1173 00000287 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1174 0000028F BF00000000              	mov rdi,0
  1175 00000294 EB00                    	jmp .L_tc_recycle_frame_loop_0001
  1176                                  .L_tc_recycle_frame_loop_0001:
  1177 00000296 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1178 0000029A 740F                    	je .L_tc_recycle_frame_done_0001
  1179 0000029C 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1180 000002A1 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1181 000002A6 48FFC7                  	inc rdi
  1182 000002A9 EBEB                    	jmp .L_tc_recycle_frame_loop_0001
  1183                                  .L_tc_recycle_frame_done_0001:
  1184 000002AB 4889EC                  	mov rsp, rbp	; point to last argument
  1185 000002AE 5D                      	pop rbp
  1186 000002AF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1187 000002B2 C9                      	leave
  1188 000002B3 C21800                  	ret AND_KILL_FRAME(1)
  1189                                  .L_lambda_simple_end_0001:	; new closure is in rax
  1190 000002B6 48890425[C3090000]      	mov qword [free_var_16], rax
  1191 000002BE 48B8-                   	mov rax, sob_void
  1191 000002C0 [0000000000000000] 
  1192                                  
  1193 000002C8 4889C7                  	mov rdi, rax
  1194 000002CB E847690000              	call print_sexpr_if_not_void
  1195 000002D0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1196 000002D5 E8E8660000              	call malloc
  1197 000002DA 50                      	push rax
  1198 000002DB BF00000000              	mov rdi, 8 * 0	; new rib
  1199 000002E0 E8DD660000              	call malloc
  1200 000002E5 50                      	push rax
  1201 000002E6 BF08000000              	mov rdi, 8 * 1	; extended env
  1202 000002EB E8D2660000              	call malloc
  1203 000002F0 488B7D10                	mov rdi, ENV
  1204 000002F4 BE00000000              	mov rsi, 0
  1205 000002F9 BA01000000              	mov rdx, 1
  1206                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  1207 000002FE 4883FE00                	cmp rsi, 0
  1208 00000302 7410                    	je .L_lambda_simple_env_end_0002
  1209 00000304 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1210 00000308 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1211 0000030C 48FFC6                  	inc rsi
  1212 0000030F 48FFC2                  	inc rdx
  1213 00000312 EBEA                    	jmp .L_lambda_simple_env_loop_0002
  1214                                  .L_lambda_simple_env_end_0002:
  1215 00000314 5B                      	pop rbx
  1216 00000315 BE00000000              	mov rsi, 0
  1217                                  .L_lambda_simple_params_loop_0002:	; copy params
  1218 0000031A 4883FE00                	cmp rsi, 0
  1219 0000031E 740E                    	je .L_lambda_simple_params_end_0002
  1220 00000320 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1221 00000325 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1222 00000329 48FFC6                  	inc rsi
  1223 0000032C EBEC                    	jmp .L_lambda_simple_params_loop_0002
  1224                                  .L_lambda_simple_params_end_0002:
  1225 0000032E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1226 00000331 4889C3                  	mov rbx, rax
  1227 00000334 58                      	pop rax
  1228 00000335 C60004                  	mov byte [rax], T_closure
  1229 00000338 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1230 0000033C 48C74009[49030000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
  1231 00000344 E99C000000              	jmp .L_lambda_simple_end_0002
  1232                                  .L_lambda_simple_code_0002:	; lambda-simple body
  1233 00000349 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1234 0000034F 740B                    	je .L_lambda_simple_arity_check_ok_0002
  1235 00000351 FF742410                	push qword [rsp + 8 * 2]
  1236 00000355 6A01                    	push 1
  1237 00000357 E91F660000              	jmp L_error_incorrect_arity_simple
  1238                                  .L_lambda_simple_arity_check_ok_0002:
  1239 0000035C C8000000                	enter 0, 0
  1240                                  	; preparing a tail-call
  1241                                  	; preparing a non-tail-call
  1242 00000360 488B4520                	mov rax, PARAM(0)	; param x
  1243 00000364 50                      	push rax
  1244 00000365 6A01                    	push 1	; arg count
  1245 00000367 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  1246 0000036F 803805                  	cmp byte [rax], T_undefined
  1247 00000372 0F841D650000            	je L_error_fvar_undefined
  1248 00000378 803804                  	cmp byte [rax], T_closure
  1249 0000037B 0F8598650000            	jne L_error_non_closure
  1250 00000381 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1251 00000384 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1252 00000387 50                      	push rax
  1253 00000388 6A01                    	push 1	; arg count
  1254 0000038A 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1255 00000392 803805                  	cmp byte [rax], T_undefined
  1256 00000395 0F84FA640000            	je L_error_fvar_undefined
  1257 0000039B 803804                  	cmp byte [rax], T_closure
  1258 0000039E 0F8575650000            	jne L_error_non_closure
  1259 000003A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1260 000003A7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1261 000003AA FF7500                  	push qword[rbp]
  1262 000003AD 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1263 000003B2 48895D10                	mov qword[rbp + 8*2],rbx
  1264 000003B6 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1265 000003BE BF00000000              	mov rdi,0
  1266 000003C3 EB00                    	jmp .L_tc_recycle_frame_loop_0002
  1267                                  .L_tc_recycle_frame_loop_0002:
  1268 000003C5 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1269 000003C9 740F                    	je .L_tc_recycle_frame_done_0002
  1270 000003CB 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1271 000003D0 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1272 000003D5 48FFC7                  	inc rdi
  1273 000003D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0002
  1274                                  .L_tc_recycle_frame_done_0002:
  1275 000003DA 4889EC                  	mov rsp, rbp	; point to last argument
  1276 000003DD 5D                      	pop rbp
  1277 000003DE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1278 000003E1 C9                      	leave
  1279 000003E2 C21800                  	ret AND_KILL_FRAME(1)
  1280                                  .L_lambda_simple_end_0002:	; new closure is in rax
  1281 000003E5 48890425[3A0A0000]      	mov qword [free_var_23], rax
  1282 000003ED 48B8-                   	mov rax, sob_void
  1282 000003EF [0000000000000000] 
  1283                                  
  1284 000003F7 4889C7                  	mov rdi, rax
  1285 000003FA E818680000              	call print_sexpr_if_not_void
  1286 000003FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1287 00000404 E8B9650000              	call malloc
  1288 00000409 50                      	push rax
  1289 0000040A BF00000000              	mov rdi, 8 * 0	; new rib
  1290 0000040F E8AE650000              	call malloc
  1291 00000414 50                      	push rax
  1292 00000415 BF08000000              	mov rdi, 8 * 1	; extended env
  1293 0000041A E8A3650000              	call malloc
  1294 0000041F 488B7D10                	mov rdi, ENV
  1295 00000423 BE00000000              	mov rsi, 0
  1296 00000428 BA01000000              	mov rdx, 1
  1297                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  1298 0000042D 4883FE00                	cmp rsi, 0
  1299 00000431 7410                    	je .L_lambda_simple_env_end_0003
  1300 00000433 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1301 00000437 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1302 0000043B 48FFC6                  	inc rsi
  1303 0000043E 48FFC2                  	inc rdx
  1304 00000441 EBEA                    	jmp .L_lambda_simple_env_loop_0003
  1305                                  .L_lambda_simple_env_end_0003:
  1306 00000443 5B                      	pop rbx
  1307 00000444 BE00000000              	mov rsi, 0
  1308                                  .L_lambda_simple_params_loop_0003:	; copy params
  1309 00000449 4883FE00                	cmp rsi, 0
  1310 0000044D 740E                    	je .L_lambda_simple_params_end_0003
  1311 0000044F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1312 00000454 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1313 00000458 48FFC6                  	inc rsi
  1314 0000045B EBEC                    	jmp .L_lambda_simple_params_loop_0003
  1315                                  .L_lambda_simple_params_end_0003:
  1316 0000045D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1317 00000460 4889C3                  	mov rbx, rax
  1318 00000463 58                      	pop rax
  1319 00000464 C60004                  	mov byte [rax], T_closure
  1320 00000467 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1321 0000046B 48C74009[78040000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1322 00000473 E99C000000              	jmp .L_lambda_simple_end_0003
  1323                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1324 00000478 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1325 0000047E 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1326 00000480 FF742410                	push qword [rsp + 8 * 2]
  1327 00000484 6A01                    	push 1
  1328 00000486 E9F0640000              	jmp L_error_incorrect_arity_simple
  1329                                  .L_lambda_simple_arity_check_ok_0003:
  1330 0000048B C8000000                	enter 0, 0
  1331                                  	; preparing a tail-call
  1332                                  	; preparing a non-tail-call
  1333 0000048F 488B4520                	mov rax, PARAM(0)	; param x
  1334 00000493 50                      	push rax
  1335 00000494 6A01                    	push 1	; arg count
  1336 00000496 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1337 0000049E 803805                  	cmp byte [rax], T_undefined
  1338 000004A1 0F84EE630000            	je L_error_fvar_undefined
  1339 000004A7 803804                  	cmp byte [rax], T_closure
  1340 000004AA 0F8569640000            	jne L_error_non_closure
  1341 000004B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1342 000004B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1343 000004B6 50                      	push rax
  1344 000004B7 6A01                    	push 1	; arg count
  1345 000004B9 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  1346 000004C1 803805                  	cmp byte [rax], T_undefined
  1347 000004C4 0F84CB630000            	je L_error_fvar_undefined
  1348 000004CA 803804                  	cmp byte [rax], T_closure
  1349 000004CD 0F8546640000            	jne L_error_non_closure
  1350 000004D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1351 000004D6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1352 000004D9 FF7500                  	push qword[rbp]
  1353 000004DC 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1354 000004E1 48895D10                	mov qword[rbp + 8*2],rbx
  1355 000004E5 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1356 000004ED BF00000000              	mov rdi,0
  1357 000004F2 EB00                    	jmp .L_tc_recycle_frame_loop_0003
  1358                                  .L_tc_recycle_frame_loop_0003:
  1359 000004F4 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1360 000004F8 740F                    	je .L_tc_recycle_frame_done_0003
  1361 000004FA 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1362 000004FF 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1363 00000504 48FFC7                  	inc rdi
  1364 00000507 EBEB                    	jmp .L_tc_recycle_frame_loop_0003
  1365                                  .L_tc_recycle_frame_done_0003:
  1366 00000509 4889EC                  	mov rsp, rbp	; point to last argument
  1367 0000050C 5D                      	pop rbp
  1368 0000050D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1369 00000510 C9                      	leave
  1370 00000511 C21800                  	ret AND_KILL_FRAME(1)
  1371                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1372 00000514 48890425[C20A0000]      	mov qword [free_var_31], rax
  1373 0000051C 48B8-                   	mov rax, sob_void
  1373 0000051E [0000000000000000] 
  1374                                  
  1375 00000526 4889C7                  	mov rdi, rax
  1376 00000529 E8E9660000              	call print_sexpr_if_not_void
  1377 0000052E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1378 00000533 E88A640000              	call malloc
  1379 00000538 50                      	push rax
  1380 00000539 BF00000000              	mov rdi, 8 * 0	; new rib
  1381 0000053E E87F640000              	call malloc
  1382 00000543 50                      	push rax
  1383 00000544 BF08000000              	mov rdi, 8 * 1	; extended env
  1384 00000549 E874640000              	call malloc
  1385 0000054E 488B7D10                	mov rdi, ENV
  1386 00000552 BE00000000              	mov rsi, 0
  1387 00000557 BA01000000              	mov rdx, 1
  1388                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1389 0000055C 4883FE00                	cmp rsi, 0
  1390 00000560 7410                    	je .L_lambda_simple_env_end_0004
  1391 00000562 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1392 00000566 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1393 0000056A 48FFC6                  	inc rsi
  1394 0000056D 48FFC2                  	inc rdx
  1395 00000570 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1396                                  .L_lambda_simple_env_end_0004:
  1397 00000572 5B                      	pop rbx
  1398 00000573 BE00000000              	mov rsi, 0
  1399                                  .L_lambda_simple_params_loop_0004:	; copy params
  1400 00000578 4883FE00                	cmp rsi, 0
  1401 0000057C 740E                    	je .L_lambda_simple_params_end_0004
  1402 0000057E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1403 00000583 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1404 00000587 48FFC6                  	inc rsi
  1405 0000058A EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1406                                  .L_lambda_simple_params_end_0004:
  1407 0000058C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1408 0000058F 4889C3                  	mov rbx, rax
  1409 00000592 58                      	pop rax
  1410 00000593 C60004                  	mov byte [rax], T_closure
  1411 00000596 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1412 0000059A 48C74009[A7050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1413 000005A2 E99C000000              	jmp .L_lambda_simple_end_0004
  1414                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1415 000005A7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1416 000005AD 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1417 000005AF FF742410                	push qword [rsp + 8 * 2]
  1418 000005B3 6A01                    	push 1
  1419 000005B5 E9C1630000              	jmp L_error_incorrect_arity_simple
  1420                                  .L_lambda_simple_arity_check_ok_0004:
  1421 000005BA C8000000                	enter 0, 0
  1422                                  	; preparing a tail-call
  1423                                  	; preparing a non-tail-call
  1424 000005BE 488B4520                	mov rax, PARAM(0)	; param x
  1425 000005C2 50                      	push rax
  1426 000005C3 6A01                    	push 1	; arg count
  1427 000005C5 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  1428 000005CD 803805                  	cmp byte [rax], T_undefined
  1429 000005D0 0F84BF620000            	je L_error_fvar_undefined
  1430 000005D6 803804                  	cmp byte [rax], T_closure
  1431 000005D9 0F853A630000            	jne L_error_non_closure
  1432 000005DF FF7001                  	push SOB_CLOSURE_ENV(rax)
  1433 000005E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1434 000005E5 50                      	push rax
  1435 000005E6 6A01                    	push 1	; arg count
  1436 000005E8 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  1437 000005F0 803805                  	cmp byte [rax], T_undefined
  1438 000005F3 0F849C620000            	je L_error_fvar_undefined
  1439 000005F9 803804                  	cmp byte [rax], T_closure
  1440 000005FC 0F8517630000            	jne L_error_non_closure
  1441 00000602 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1442 00000605 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1443 00000608 FF7500                  	push qword[rbp]
  1444 0000060B 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1445 00000610 48895D10                	mov qword[rbp + 8*2],rbx
  1446 00000614 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1447 0000061C BF00000000              	mov rdi,0
  1448 00000621 EB00                    	jmp .L_tc_recycle_frame_loop_0004
  1449                                  .L_tc_recycle_frame_loop_0004:
  1450 00000623 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1451 00000627 740F                    	je .L_tc_recycle_frame_done_0004
  1452 00000629 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1453 0000062E 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1454 00000633 48FFC7                  	inc rdi
  1455 00000636 EBEB                    	jmp .L_tc_recycle_frame_loop_0004
  1456                                  .L_tc_recycle_frame_done_0004:
  1457 00000638 4889EC                  	mov rsp, rbp	; point to last argument
  1458 0000063B 5D                      	pop rbp
  1459 0000063C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1460 0000063F C9                      	leave
  1461 00000640 C21800                  	ret AND_KILL_FRAME(1)
  1462                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1463 00000643 48890425[390B0000]      	mov qword [free_var_38], rax
  1464 0000064B 48B8-                   	mov rax, sob_void
  1464 0000064D [0000000000000000] 
  1465                                  
  1466 00000655 4889C7                  	mov rdi, rax
  1467 00000658 E8BA650000              	call print_sexpr_if_not_void
  1468 0000065D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1469 00000662 E85B630000              	call malloc
  1470 00000667 50                      	push rax
  1471 00000668 BF00000000              	mov rdi, 8 * 0	; new rib
  1472 0000066D E850630000              	call malloc
  1473 00000672 50                      	push rax
  1474 00000673 BF08000000              	mov rdi, 8 * 1	; extended env
  1475 00000678 E845630000              	call malloc
  1476 0000067D 488B7D10                	mov rdi, ENV
  1477 00000681 BE00000000              	mov rsi, 0
  1478 00000686 BA01000000              	mov rdx, 1
  1479                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1480 0000068B 4883FE00                	cmp rsi, 0
  1481 0000068F 7410                    	je .L_lambda_simple_env_end_0005
  1482 00000691 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1483 00000695 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1484 00000699 48FFC6                  	inc rsi
  1485 0000069C 48FFC2                  	inc rdx
  1486 0000069F EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1487                                  .L_lambda_simple_env_end_0005:
  1488 000006A1 5B                      	pop rbx
  1489 000006A2 BE00000000              	mov rsi, 0
  1490                                  .L_lambda_simple_params_loop_0005:	; copy params
  1491 000006A7 4883FE00                	cmp rsi, 0
  1492 000006AB 740E                    	je .L_lambda_simple_params_end_0005
  1493 000006AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1494 000006B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1495 000006B6 48FFC6                  	inc rsi
  1496 000006B9 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1497                                  .L_lambda_simple_params_end_0005:
  1498 000006BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1499 000006BE 4889C3                  	mov rbx, rax
  1500 000006C1 58                      	pop rax
  1501 000006C2 C60004                  	mov byte [rax], T_closure
  1502 000006C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1503 000006C9 48C74009[D6060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1504 000006D1 E99C000000              	jmp .L_lambda_simple_end_0005
  1505                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1506 000006D6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1507 000006DC 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1508 000006DE FF742410                	push qword [rsp + 8 * 2]
  1509 000006E2 6A01                    	push 1
  1510 000006E4 E992620000              	jmp L_error_incorrect_arity_simple
  1511                                  .L_lambda_simple_arity_check_ok_0005:
  1512 000006E9 C8000000                	enter 0, 0
  1513                                  	; preparing a tail-call
  1514                                  	; preparing a non-tail-call
  1515 000006ED 488B4520                	mov rax, PARAM(0)	; param x
  1516 000006F1 50                      	push rax
  1517 000006F2 6A01                    	push 1	; arg count
  1518 000006F4 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  1519 000006FC 803805                  	cmp byte [rax], T_undefined
  1520 000006FF 0F8490610000            	je L_error_fvar_undefined
  1521 00000705 803804                  	cmp byte [rax], T_closure
  1522 00000708 0F850B620000            	jne L_error_non_closure
  1523 0000070E FF7001                  	push SOB_CLOSURE_ENV(rax)
  1524 00000711 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1525 00000714 50                      	push rax
  1526 00000715 6A01                    	push 1	; arg count
  1527 00000717 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1528 0000071F 803805                  	cmp byte [rax], T_undefined
  1529 00000722 0F846D610000            	je L_error_fvar_undefined
  1530 00000728 803804                  	cmp byte [rax], T_closure
  1531 0000072B 0F85E8610000            	jne L_error_non_closure
  1532 00000731 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1533 00000734 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1534 00000737 FF7500                  	push qword[rbp]
  1535 0000073A 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1536 0000073F 48895D10                	mov qword[rbp + 8*2],rbx
  1537 00000743 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1538 0000074B BF00000000              	mov rdi,0
  1539 00000750 EB00                    	jmp .L_tc_recycle_frame_loop_0005
  1540                                  .L_tc_recycle_frame_loop_0005:
  1541 00000752 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1542 00000756 740F                    	je .L_tc_recycle_frame_done_0005
  1543 00000758 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1544 0000075D 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1545 00000762 48FFC7                  	inc rdi
  1546 00000765 EBEB                    	jmp .L_tc_recycle_frame_loop_0005
  1547                                  .L_tc_recycle_frame_done_0005:
  1548 00000767 4889EC                  	mov rsp, rbp	; point to last argument
  1549 0000076A 5D                      	pop rbp
  1550 0000076B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1551 0000076E C9                      	leave
  1552 0000076F C21800                  	ret AND_KILL_FRAME(1)
  1553                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1554 00000772 48890425[7F090000]      	mov qword [free_var_12], rax
  1555 0000077A 48B8-                   	mov rax, sob_void
  1555 0000077C [0000000000000000] 
  1556                                  
  1557 00000784 4889C7                  	mov rdi, rax
  1558 00000787 E88B640000              	call print_sexpr_if_not_void
  1559 0000078C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1560 00000791 E82C620000              	call malloc
  1561 00000796 50                      	push rax
  1562 00000797 BF00000000              	mov rdi, 8 * 0	; new rib
  1563 0000079C E821620000              	call malloc
  1564 000007A1 50                      	push rax
  1565 000007A2 BF08000000              	mov rdi, 8 * 1	; extended env
  1566 000007A7 E816620000              	call malloc
  1567 000007AC 488B7D10                	mov rdi, ENV
  1568 000007B0 BE00000000              	mov rsi, 0
  1569 000007B5 BA01000000              	mov rdx, 1
  1570                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1571 000007BA 4883FE00                	cmp rsi, 0
  1572 000007BE 7410                    	je .L_lambda_simple_env_end_0006
  1573 000007C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1574 000007C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1575 000007C8 48FFC6                  	inc rsi
  1576 000007CB 48FFC2                  	inc rdx
  1577 000007CE EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1578                                  .L_lambda_simple_env_end_0006:
  1579 000007D0 5B                      	pop rbx
  1580 000007D1 BE00000000              	mov rsi, 0
  1581                                  .L_lambda_simple_params_loop_0006:	; copy params
  1582 000007D6 4883FE00                	cmp rsi, 0
  1583 000007DA 740E                    	je .L_lambda_simple_params_end_0006
  1584 000007DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1585 000007E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1586 000007E5 48FFC6                  	inc rsi
  1587 000007E8 EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1588                                  .L_lambda_simple_params_end_0006:
  1589 000007EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1590 000007ED 4889C3                  	mov rbx, rax
  1591 000007F0 58                      	pop rax
  1592 000007F1 C60004                  	mov byte [rax], T_closure
  1593 000007F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1594 000007F8 48C74009[05080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1595 00000800 E99C000000              	jmp .L_lambda_simple_end_0006
  1596                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1597 00000805 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1598 0000080B 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1599 0000080D FF742410                	push qword [rsp + 8 * 2]
  1600 00000811 6A01                    	push 1
  1601 00000813 E963610000              	jmp L_error_incorrect_arity_simple
  1602                                  .L_lambda_simple_arity_check_ok_0006:
  1603 00000818 C8000000                	enter 0, 0
  1604                                  	; preparing a tail-call
  1605                                  	; preparing a non-tail-call
  1606 0000081C 488B4520                	mov rax, PARAM(0)	; param x
  1607 00000820 50                      	push rax
  1608 00000821 6A01                    	push 1	; arg count
  1609 00000823 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  1610 0000082B 803805                  	cmp byte [rax], T_undefined
  1611 0000082E 0F8461600000            	je L_error_fvar_undefined
  1612 00000834 803804                  	cmp byte [rax], T_closure
  1613 00000837 0F85DC600000            	jne L_error_non_closure
  1614 0000083D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1615 00000840 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1616 00000843 50                      	push rax
  1617 00000844 6A01                    	push 1	; arg count
  1618 00000846 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1619 0000084E 803805                  	cmp byte [rax], T_undefined
  1620 00000851 0F843E600000            	je L_error_fvar_undefined
  1621 00000857 803804                  	cmp byte [rax], T_closure
  1622 0000085A 0F85B9600000            	jne L_error_non_closure
  1623 00000860 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1624 00000863 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1625 00000866 FF7500                  	push qword[rbp]
  1626 00000869 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1627 0000086E 48895D10                	mov qword[rbp + 8*2],rbx
  1628 00000872 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1629 0000087A BF00000000              	mov rdi,0
  1630 0000087F EB00                    	jmp .L_tc_recycle_frame_loop_0006
  1631                                  .L_tc_recycle_frame_loop_0006:
  1632 00000881 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1633 00000885 740F                    	je .L_tc_recycle_frame_done_0006
  1634 00000887 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1635 0000088C 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1636 00000891 48FFC7                  	inc rdi
  1637 00000894 EBEB                    	jmp .L_tc_recycle_frame_loop_0006
  1638                                  .L_tc_recycle_frame_done_0006:
  1639 00000896 4889EC                  	mov rsp, rbp	; point to last argument
  1640 00000899 5D                      	pop rbp
  1641 0000089A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1642 0000089D C9                      	leave
  1643 0000089E C21800                  	ret AND_KILL_FRAME(1)
  1644                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1645 000008A1 48890425[B2090000]      	mov qword [free_var_15], rax
  1646 000008A9 48B8-                   	mov rax, sob_void
  1646 000008AB [0000000000000000] 
  1647                                  
  1648 000008B3 4889C7                  	mov rdi, rax
  1649 000008B6 E85C630000              	call print_sexpr_if_not_void
  1650 000008BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1651 000008C0 E8FD600000              	call malloc
  1652 000008C5 50                      	push rax
  1653 000008C6 BF00000000              	mov rdi, 8 * 0	; new rib
  1654 000008CB E8F2600000              	call malloc
  1655 000008D0 50                      	push rax
  1656 000008D1 BF08000000              	mov rdi, 8 * 1	; extended env
  1657 000008D6 E8E7600000              	call malloc
  1658 000008DB 488B7D10                	mov rdi, ENV
  1659 000008DF BE00000000              	mov rsi, 0
  1660 000008E4 BA01000000              	mov rdx, 1
  1661                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1662 000008E9 4883FE00                	cmp rsi, 0
  1663 000008ED 7410                    	je .L_lambda_simple_env_end_0007
  1664 000008EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1665 000008F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1666 000008F7 48FFC6                  	inc rsi
  1667 000008FA 48FFC2                  	inc rdx
  1668 000008FD EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1669                                  .L_lambda_simple_env_end_0007:
  1670 000008FF 5B                      	pop rbx
  1671 00000900 BE00000000              	mov rsi, 0
  1672                                  .L_lambda_simple_params_loop_0007:	; copy params
  1673 00000905 4883FE00                	cmp rsi, 0
  1674 00000909 740E                    	je .L_lambda_simple_params_end_0007
  1675 0000090B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1676 00000910 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1677 00000914 48FFC6                  	inc rsi
  1678 00000917 EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1679                                  .L_lambda_simple_params_end_0007:
  1680 00000919 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1681 0000091C 4889C3                  	mov rbx, rax
  1682 0000091F 58                      	pop rax
  1683 00000920 C60004                  	mov byte [rax], T_closure
  1684 00000923 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1685 00000927 48C74009[34090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1686 0000092F E99C000000              	jmp .L_lambda_simple_end_0007
  1687                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1688 00000934 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1689 0000093A 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1690 0000093C FF742410                	push qword [rsp + 8 * 2]
  1691 00000940 6A01                    	push 1
  1692 00000942 E934600000              	jmp L_error_incorrect_arity_simple
  1693                                  .L_lambda_simple_arity_check_ok_0007:
  1694 00000947 C8000000                	enter 0, 0
  1695                                  	; preparing a tail-call
  1696                                  	; preparing a non-tail-call
  1697 0000094B 488B4520                	mov rax, PARAM(0)	; param x
  1698 0000094F 50                      	push rax
  1699 00000950 6A01                    	push 1	; arg count
  1700 00000952 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  1701 0000095A 803805                  	cmp byte [rax], T_undefined
  1702 0000095D 0F84325F0000            	je L_error_fvar_undefined
  1703 00000963 803804                  	cmp byte [rax], T_closure
  1704 00000966 0F85AD5F0000            	jne L_error_non_closure
  1705 0000096C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1706 0000096F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1707 00000972 50                      	push rax
  1708 00000973 6A01                    	push 1	; arg count
  1709 00000975 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1710 0000097D 803805                  	cmp byte [rax], T_undefined
  1711 00000980 0F840F5F0000            	je L_error_fvar_undefined
  1712 00000986 803804                  	cmp byte [rax], T_closure
  1713 00000989 0F858A5F0000            	jne L_error_non_closure
  1714 0000098F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1715 00000992 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1716 00000995 FF7500                  	push qword[rbp]
  1717 00000998 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1718 0000099D 48895D10                	mov qword[rbp + 8*2],rbx
  1719 000009A1 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1720 000009A9 BF00000000              	mov rdi,0
  1721 000009AE EB00                    	jmp .L_tc_recycle_frame_loop_0007
  1722                                  .L_tc_recycle_frame_loop_0007:
  1723 000009B0 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1724 000009B4 740F                    	je .L_tc_recycle_frame_done_0007
  1725 000009B6 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1726 000009BB 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1727 000009C0 48FFC7                  	inc rdi
  1728 000009C3 EBEB                    	jmp .L_tc_recycle_frame_loop_0007
  1729                                  .L_tc_recycle_frame_done_0007:
  1730 000009C5 4889EC                  	mov rsp, rbp	; point to last argument
  1731 000009C8 5D                      	pop rbp
  1732 000009C9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1733 000009CC C9                      	leave
  1734 000009CD C21800                  	ret AND_KILL_FRAME(1)
  1735                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1736 000009D0 48890425[F6090000]      	mov qword [free_var_19], rax
  1737 000009D8 48B8-                   	mov rax, sob_void
  1737 000009DA [0000000000000000] 
  1738                                  
  1739 000009E2 4889C7                  	mov rdi, rax
  1740 000009E5 E82D620000              	call print_sexpr_if_not_void
  1741 000009EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1742 000009EF E8CE5F0000              	call malloc
  1743 000009F4 50                      	push rax
  1744 000009F5 BF00000000              	mov rdi, 8 * 0	; new rib
  1745 000009FA E8C35F0000              	call malloc
  1746 000009FF 50                      	push rax
  1747 00000A00 BF08000000              	mov rdi, 8 * 1	; extended env
  1748 00000A05 E8B85F0000              	call malloc
  1749 00000A0A 488B7D10                	mov rdi, ENV
  1750 00000A0E BE00000000              	mov rsi, 0
  1751 00000A13 BA01000000              	mov rdx, 1
  1752                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1753 00000A18 4883FE00                	cmp rsi, 0
  1754 00000A1C 7410                    	je .L_lambda_simple_env_end_0008
  1755 00000A1E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1756 00000A22 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1757 00000A26 48FFC6                  	inc rsi
  1758 00000A29 48FFC2                  	inc rdx
  1759 00000A2C EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1760                                  .L_lambda_simple_env_end_0008:
  1761 00000A2E 5B                      	pop rbx
  1762 00000A2F BE00000000              	mov rsi, 0
  1763                                  .L_lambda_simple_params_loop_0008:	; copy params
  1764 00000A34 4883FE00                	cmp rsi, 0
  1765 00000A38 740E                    	je .L_lambda_simple_params_end_0008
  1766 00000A3A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1767 00000A3F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1768 00000A43 48FFC6                  	inc rsi
  1769 00000A46 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1770                                  .L_lambda_simple_params_end_0008:
  1771 00000A48 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1772 00000A4B 4889C3                  	mov rbx, rax
  1773 00000A4E 58                      	pop rax
  1774 00000A4F C60004                  	mov byte [rax], T_closure
  1775 00000A52 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1776 00000A56 48C74009[630A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1777 00000A5E E99C000000              	jmp .L_lambda_simple_end_0008
  1778                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1779 00000A63 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1780 00000A69 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1781 00000A6B FF742410                	push qword [rsp + 8 * 2]
  1782 00000A6F 6A01                    	push 1
  1783 00000A71 E9055F0000              	jmp L_error_incorrect_arity_simple
  1784                                  .L_lambda_simple_arity_check_ok_0008:
  1785 00000A76 C8000000                	enter 0, 0
  1786                                  	; preparing a tail-call
  1787                                  	; preparing a non-tail-call
  1788 00000A7A 488B4520                	mov rax, PARAM(0)	; param x
  1789 00000A7E 50                      	push rax
  1790 00000A7F 6A01                    	push 1	; arg count
  1791 00000A81 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  1792 00000A89 803805                  	cmp byte [rax], T_undefined
  1793 00000A8C 0F84035E0000            	je L_error_fvar_undefined
  1794 00000A92 803804                  	cmp byte [rax], T_closure
  1795 00000A95 0F857E5E0000            	jne L_error_non_closure
  1796 00000A9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1797 00000A9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1798 00000AA1 50                      	push rax
  1799 00000AA2 6A01                    	push 1	; arg count
  1800 00000AA4 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  1801 00000AAC 803805                  	cmp byte [rax], T_undefined
  1802 00000AAF 0F84E05D0000            	je L_error_fvar_undefined
  1803 00000AB5 803804                  	cmp byte [rax], T_closure
  1804 00000AB8 0F855B5E0000            	jne L_error_non_closure
  1805 00000ABE FF7001                  	push SOB_CLOSURE_ENV(rax)
  1806 00000AC1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1807 00000AC4 FF7500                  	push qword[rbp]
  1808 00000AC7 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1809 00000ACC 48895D10                	mov qword[rbp + 8*2],rbx
  1810 00000AD0 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1811 00000AD8 BF00000000              	mov rdi,0
  1812 00000ADD EB00                    	jmp .L_tc_recycle_frame_loop_0008
  1813                                  .L_tc_recycle_frame_loop_0008:
  1814 00000ADF 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1815 00000AE3 740F                    	je .L_tc_recycle_frame_done_0008
  1816 00000AE5 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1817 00000AEA 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1818 00000AEF 48FFC7                  	inc rdi
  1819 00000AF2 EBEB                    	jmp .L_tc_recycle_frame_loop_0008
  1820                                  .L_tc_recycle_frame_done_0008:
  1821 00000AF4 4889EC                  	mov rsp, rbp	; point to last argument
  1822 00000AF7 5D                      	pop rbp
  1823 00000AF8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1824 00000AFB C9                      	leave
  1825 00000AFC C21800                  	ret AND_KILL_FRAME(1)
  1826                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1827 00000AFF 48890425[290A0000]      	mov qword [free_var_22], rax
  1828 00000B07 48B8-                   	mov rax, sob_void
  1828 00000B09 [0000000000000000] 
  1829                                  
  1830 00000B11 4889C7                  	mov rdi, rax
  1831 00000B14 E8FE600000              	call print_sexpr_if_not_void
  1832 00000B19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1833 00000B1E E89F5E0000              	call malloc
  1834 00000B23 50                      	push rax
  1835 00000B24 BF00000000              	mov rdi, 8 * 0	; new rib
  1836 00000B29 E8945E0000              	call malloc
  1837 00000B2E 50                      	push rax
  1838 00000B2F BF08000000              	mov rdi, 8 * 1	; extended env
  1839 00000B34 E8895E0000              	call malloc
  1840 00000B39 488B7D10                	mov rdi, ENV
  1841 00000B3D BE00000000              	mov rsi, 0
  1842 00000B42 BA01000000              	mov rdx, 1
  1843                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1844 00000B47 4883FE00                	cmp rsi, 0
  1845 00000B4B 7410                    	je .L_lambda_simple_env_end_0009
  1846 00000B4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1847 00000B51 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1848 00000B55 48FFC6                  	inc rsi
  1849 00000B58 48FFC2                  	inc rdx
  1850 00000B5B EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1851                                  .L_lambda_simple_env_end_0009:
  1852 00000B5D 5B                      	pop rbx
  1853 00000B5E BE00000000              	mov rsi, 0
  1854                                  .L_lambda_simple_params_loop_0009:	; copy params
  1855 00000B63 4883FE00                	cmp rsi, 0
  1856 00000B67 740E                    	je .L_lambda_simple_params_end_0009
  1857 00000B69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1858 00000B6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1859 00000B72 48FFC6                  	inc rsi
  1860 00000B75 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1861                                  .L_lambda_simple_params_end_0009:
  1862 00000B77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1863 00000B7A 4889C3                  	mov rbx, rax
  1864 00000B7D 58                      	pop rax
  1865 00000B7E C60004                  	mov byte [rax], T_closure
  1866 00000B81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1867 00000B85 48C74009[920B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1868 00000B8D E99C000000              	jmp .L_lambda_simple_end_0009
  1869                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1870 00000B92 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1871 00000B98 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1872 00000B9A FF742410                	push qword [rsp + 8 * 2]
  1873 00000B9E 6A01                    	push 1
  1874 00000BA0 E9D65D0000              	jmp L_error_incorrect_arity_simple
  1875                                  .L_lambda_simple_arity_check_ok_0009:
  1876 00000BA5 C8000000                	enter 0, 0
  1877                                  	; preparing a tail-call
  1878                                  	; preparing a non-tail-call
  1879 00000BA9 488B4520                	mov rax, PARAM(0)	; param x
  1880 00000BAD 50                      	push rax
  1881 00000BAE 6A01                    	push 1	; arg count
  1882 00000BB0 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  1883 00000BB8 803805                  	cmp byte [rax], T_undefined
  1884 00000BBB 0F84D45C0000            	je L_error_fvar_undefined
  1885 00000BC1 803804                  	cmp byte [rax], T_closure
  1886 00000BC4 0F854F5D0000            	jne L_error_non_closure
  1887 00000BCA FF7001                  	push SOB_CLOSURE_ENV(rax)
  1888 00000BCD FF5009                  	call SOB_CLOSURE_CODE(rax)
  1889 00000BD0 50                      	push rax
  1890 00000BD1 6A01                    	push 1	; arg count
  1891 00000BD3 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  1892 00000BDB 803805                  	cmp byte [rax], T_undefined
  1893 00000BDE 0F84B15C0000            	je L_error_fvar_undefined
  1894 00000BE4 803804                  	cmp byte [rax], T_closure
  1895 00000BE7 0F852C5D0000            	jne L_error_non_closure
  1896 00000BED FF7001                  	push SOB_CLOSURE_ENV(rax)
  1897 00000BF0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1898 00000BF3 FF7500                  	push qword[rbp]
  1899 00000BF6 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1900 00000BFB 48895D10                	mov qword[rbp + 8*2],rbx
  1901 00000BFF 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1902 00000C07 BF00000000              	mov rdi,0
  1903 00000C0C EB00                    	jmp .L_tc_recycle_frame_loop_0009
  1904                                  .L_tc_recycle_frame_loop_0009:
  1905 00000C0E 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1906 00000C12 740F                    	je .L_tc_recycle_frame_done_0009
  1907 00000C14 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1908 00000C19 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  1909 00000C1E 48FFC7                  	inc rdi
  1910 00000C21 EBEB                    	jmp .L_tc_recycle_frame_loop_0009
  1911                                  .L_tc_recycle_frame_done_0009:
  1912 00000C23 4889EC                  	mov rsp, rbp	; point to last argument
  1913 00000C26 5D                      	pop rbp
  1914 00000C27 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1915 00000C2A C9                      	leave
  1916 00000C2B C21800                  	ret AND_KILL_FRAME(1)
  1917                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1918 00000C2E 48890425[7E0A0000]      	mov qword [free_var_27], rax
  1919 00000C36 48B8-                   	mov rax, sob_void
  1919 00000C38 [0000000000000000] 
  1920                                  
  1921 00000C40 4889C7                  	mov rdi, rax
  1922 00000C43 E8CF5F0000              	call print_sexpr_if_not_void
  1923 00000C48 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1924 00000C4D E8705D0000              	call malloc
  1925 00000C52 50                      	push rax
  1926 00000C53 BF00000000              	mov rdi, 8 * 0	; new rib
  1927 00000C58 E8655D0000              	call malloc
  1928 00000C5D 50                      	push rax
  1929 00000C5E BF08000000              	mov rdi, 8 * 1	; extended env
  1930 00000C63 E85A5D0000              	call malloc
  1931 00000C68 488B7D10                	mov rdi, ENV
  1932 00000C6C BE00000000              	mov rsi, 0
  1933 00000C71 BA01000000              	mov rdx, 1
  1934                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1935 00000C76 4883FE00                	cmp rsi, 0
  1936 00000C7A 7410                    	je .L_lambda_simple_env_end_000a
  1937 00000C7C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1938 00000C80 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1939 00000C84 48FFC6                  	inc rsi
  1940 00000C87 48FFC2                  	inc rdx
  1941 00000C8A EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1942                                  .L_lambda_simple_env_end_000a:
  1943 00000C8C 5B                      	pop rbx
  1944 00000C8D BE00000000              	mov rsi, 0
  1945                                  .L_lambda_simple_params_loop_000a:	; copy params
  1946 00000C92 4883FE00                	cmp rsi, 0
  1947 00000C96 740E                    	je .L_lambda_simple_params_end_000a
  1948 00000C98 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1949 00000C9D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1950 00000CA1 48FFC6                  	inc rsi
  1951 00000CA4 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1952                                  .L_lambda_simple_params_end_000a:
  1953 00000CA6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1954 00000CA9 4889C3                  	mov rbx, rax
  1955 00000CAC 58                      	pop rax
  1956 00000CAD C60004                  	mov byte [rax], T_closure
  1957 00000CB0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1958 00000CB4 48C74009[C10C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1959 00000CBC E99C000000              	jmp .L_lambda_simple_end_000a
  1960                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1961 00000CC1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1962 00000CC7 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1963 00000CC9 FF742410                	push qword [rsp + 8 * 2]
  1964 00000CCD 6A01                    	push 1
  1965 00000CCF E9A75C0000              	jmp L_error_incorrect_arity_simple
  1966                                  .L_lambda_simple_arity_check_ok_000a:
  1967 00000CD4 C8000000                	enter 0, 0
  1968                                  	; preparing a tail-call
  1969                                  	; preparing a non-tail-call
  1970 00000CD8 488B4520                	mov rax, PARAM(0)	; param x
  1971 00000CDC 50                      	push rax
  1972 00000CDD 6A01                    	push 1	; arg count
  1973 00000CDF 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  1974 00000CE7 803805                  	cmp byte [rax], T_undefined
  1975 00000CEA 0F84A55B0000            	je L_error_fvar_undefined
  1976 00000CF0 803804                  	cmp byte [rax], T_closure
  1977 00000CF3 0F85205C0000            	jne L_error_non_closure
  1978 00000CF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1979 00000CFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1980 00000CFF 50                      	push rax
  1981 00000D00 6A01                    	push 1	; arg count
  1982 00000D02 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  1983 00000D0A 803805                  	cmp byte [rax], T_undefined
  1984 00000D0D 0F84825B0000            	je L_error_fvar_undefined
  1985 00000D13 803804                  	cmp byte [rax], T_closure
  1986 00000D16 0F85FD5B0000            	jne L_error_non_closure
  1987 00000D1C FF7001                  	push SOB_CLOSURE_ENV(rax)
  1988 00000D1F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  1989 00000D22 FF7500                  	push qword[rbp]
  1990 00000D25 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  1991 00000D2A 48895D10                	mov qword[rbp + 8*2],rbx
  1992 00000D2E 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  1993 00000D36 BF00000000              	mov rdi,0
  1994 00000D3B EB00                    	jmp .L_tc_recycle_frame_loop_000a
  1995                                  .L_tc_recycle_frame_loop_000a:
  1996 00000D3D 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  1997 00000D41 740F                    	je .L_tc_recycle_frame_done_000a
  1998 00000D43 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  1999 00000D48 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2000 00000D4D 48FFC7                  	inc rdi
  2001 00000D50 EBEB                    	jmp .L_tc_recycle_frame_loop_000a
  2002                                  .L_tc_recycle_frame_done_000a:
  2003 00000D52 4889EC                  	mov rsp, rbp	; point to last argument
  2004 00000D55 5D                      	pop rbp
  2005 00000D56 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2006 00000D59 C9                      	leave
  2007 00000D5A C21800                  	ret AND_KILL_FRAME(1)
  2008                                  .L_lambda_simple_end_000a:	; new closure is in rax
  2009 00000D5D 48890425[B10A0000]      	mov qword [free_var_30], rax
  2010 00000D65 48B8-                   	mov rax, sob_void
  2010 00000D67 [0000000000000000] 
  2011                                  
  2012 00000D6F 4889C7                  	mov rdi, rax
  2013 00000D72 E8A05E0000              	call print_sexpr_if_not_void
  2014 00000D77 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2015 00000D7C E8415C0000              	call malloc
  2016 00000D81 50                      	push rax
  2017 00000D82 BF00000000              	mov rdi, 8 * 0	; new rib
  2018 00000D87 E8365C0000              	call malloc
  2019 00000D8C 50                      	push rax
  2020 00000D8D BF08000000              	mov rdi, 8 * 1	; extended env
  2021 00000D92 E82B5C0000              	call malloc
  2022 00000D97 488B7D10                	mov rdi, ENV
  2023 00000D9B BE00000000              	mov rsi, 0
  2024 00000DA0 BA01000000              	mov rdx, 1
  2025                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  2026 00000DA5 4883FE00                	cmp rsi, 0
  2027 00000DA9 7410                    	je .L_lambda_simple_env_end_000b
  2028 00000DAB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2029 00000DAF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2030 00000DB3 48FFC6                  	inc rsi
  2031 00000DB6 48FFC2                  	inc rdx
  2032 00000DB9 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  2033                                  .L_lambda_simple_env_end_000b:
  2034 00000DBB 5B                      	pop rbx
  2035 00000DBC BE00000000              	mov rsi, 0
  2036                                  .L_lambda_simple_params_loop_000b:	; copy params
  2037 00000DC1 4883FE00                	cmp rsi, 0
  2038 00000DC5 740E                    	je .L_lambda_simple_params_end_000b
  2039 00000DC7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2040 00000DCC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2041 00000DD0 48FFC6                  	inc rsi
  2042 00000DD3 EBEC                    	jmp .L_lambda_simple_params_loop_000b
  2043                                  .L_lambda_simple_params_end_000b:
  2044 00000DD5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2045 00000DD8 4889C3                  	mov rbx, rax
  2046 00000DDB 58                      	pop rax
  2047 00000DDC C60004                  	mov byte [rax], T_closure
  2048 00000DDF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2049 00000DE3 48C74009[F00D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  2050 00000DEB E99C000000              	jmp .L_lambda_simple_end_000b
  2051                                  .L_lambda_simple_code_000b:	; lambda-simple body
  2052 00000DF0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2053 00000DF6 740B                    	je .L_lambda_simple_arity_check_ok_000b
  2054 00000DF8 FF742410                	push qword [rsp + 8 * 2]
  2055 00000DFC 6A01                    	push 1
  2056 00000DFE E9785B0000              	jmp L_error_incorrect_arity_simple
  2057                                  .L_lambda_simple_arity_check_ok_000b:
  2058 00000E03 C8000000                	enter 0, 0
  2059                                  	; preparing a tail-call
  2060                                  	; preparing a non-tail-call
  2061 00000E07 488B4520                	mov rax, PARAM(0)	; param x
  2062 00000E0B 50                      	push rax
  2063 00000E0C 6A01                    	push 1	; arg count
  2064 00000E0E 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  2065 00000E16 803805                  	cmp byte [rax], T_undefined
  2066 00000E19 0F84765A0000            	je L_error_fvar_undefined
  2067 00000E1F 803804                  	cmp byte [rax], T_closure
  2068 00000E22 0F85F15A0000            	jne L_error_non_closure
  2069 00000E28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2070 00000E2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2071 00000E2E 50                      	push rax
  2072 00000E2F 6A01                    	push 1	; arg count
  2073 00000E31 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  2074 00000E39 803805                  	cmp byte [rax], T_undefined
  2075 00000E3C 0F84535A0000            	je L_error_fvar_undefined
  2076 00000E42 803804                  	cmp byte [rax], T_closure
  2077 00000E45 0F85CE5A0000            	jne L_error_non_closure
  2078 00000E4B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2079 00000E4E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2080 00000E51 FF7500                  	push qword[rbp]
  2081 00000E54 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2082 00000E59 48895D10                	mov qword[rbp + 8*2],rbx
  2083 00000E5D 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2084 00000E65 BF00000000              	mov rdi,0
  2085 00000E6A EB00                    	jmp .L_tc_recycle_frame_loop_000b
  2086                                  .L_tc_recycle_frame_loop_000b:
  2087 00000E6C 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2088 00000E70 740F                    	je .L_tc_recycle_frame_done_000b
  2089 00000E72 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2090 00000E77 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2091 00000E7C 48FFC7                  	inc rdi
  2092 00000E7F EBEB                    	jmp .L_tc_recycle_frame_loop_000b
  2093                                  .L_tc_recycle_frame_done_000b:
  2094 00000E81 4889EC                  	mov rsp, rbp	; point to last argument
  2095 00000E84 5D                      	pop rbp
  2096 00000E85 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2097 00000E88 C9                      	leave
  2098 00000E89 C21800                  	ret AND_KILL_FRAME(1)
  2099                                  .L_lambda_simple_end_000b:	; new closure is in rax
  2100 00000E8C 48890425[F50A0000]      	mov qword [free_var_34], rax
  2101 00000E94 48B8-                   	mov rax, sob_void
  2101 00000E96 [0000000000000000] 
  2102                                  
  2103 00000E9E 4889C7                  	mov rdi, rax
  2104 00000EA1 E8715D0000              	call print_sexpr_if_not_void
  2105 00000EA6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2106 00000EAB E8125B0000              	call malloc
  2107 00000EB0 50                      	push rax
  2108 00000EB1 BF00000000              	mov rdi, 8 * 0	; new rib
  2109 00000EB6 E8075B0000              	call malloc
  2110 00000EBB 50                      	push rax
  2111 00000EBC BF08000000              	mov rdi, 8 * 1	; extended env
  2112 00000EC1 E8FC5A0000              	call malloc
  2113 00000EC6 488B7D10                	mov rdi, ENV
  2114 00000ECA BE00000000              	mov rsi, 0
  2115 00000ECF BA01000000              	mov rdx, 1
  2116                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  2117 00000ED4 4883FE00                	cmp rsi, 0
  2118 00000ED8 7410                    	je .L_lambda_simple_env_end_000c
  2119 00000EDA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2120 00000EDE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2121 00000EE2 48FFC6                  	inc rsi
  2122 00000EE5 48FFC2                  	inc rdx
  2123 00000EE8 EBEA                    	jmp .L_lambda_simple_env_loop_000c
  2124                                  .L_lambda_simple_env_end_000c:
  2125 00000EEA 5B                      	pop rbx
  2126 00000EEB BE00000000              	mov rsi, 0
  2127                                  .L_lambda_simple_params_loop_000c:	; copy params
  2128 00000EF0 4883FE00                	cmp rsi, 0
  2129 00000EF4 740E                    	je .L_lambda_simple_params_end_000c
  2130 00000EF6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2131 00000EFB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2132 00000EFF 48FFC6                  	inc rsi
  2133 00000F02 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  2134                                  .L_lambda_simple_params_end_000c:
  2135 00000F04 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2136 00000F07 4889C3                  	mov rbx, rax
  2137 00000F0A 58                      	pop rax
  2138 00000F0B C60004                  	mov byte [rax], T_closure
  2139 00000F0E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2140 00000F12 48C74009[1F0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  2141 00000F1A E99C000000              	jmp .L_lambda_simple_end_000c
  2142                                  .L_lambda_simple_code_000c:	; lambda-simple body
  2143 00000F1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2144 00000F25 740B                    	je .L_lambda_simple_arity_check_ok_000c
  2145 00000F27 FF742410                	push qword [rsp + 8 * 2]
  2146 00000F2B 6A01                    	push 1
  2147 00000F2D E9495A0000              	jmp L_error_incorrect_arity_simple
  2148                                  .L_lambda_simple_arity_check_ok_000c:
  2149 00000F32 C8000000                	enter 0, 0
  2150                                  	; preparing a tail-call
  2151                                  	; preparing a non-tail-call
  2152 00000F36 488B4520                	mov rax, PARAM(0)	; param x
  2153 00000F3A 50                      	push rax
  2154 00000F3B 6A01                    	push 1	; arg count
  2155 00000F3D 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  2156 00000F45 803805                  	cmp byte [rax], T_undefined
  2157 00000F48 0F8447590000            	je L_error_fvar_undefined
  2158 00000F4E 803804                  	cmp byte [rax], T_closure
  2159 00000F51 0F85C2590000            	jne L_error_non_closure
  2160 00000F57 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2161 00000F5A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2162 00000F5D 50                      	push rax
  2163 00000F5E 6A01                    	push 1	; arg count
  2164 00000F60 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  2165 00000F68 803805                  	cmp byte [rax], T_undefined
  2166 00000F6B 0F8424590000            	je L_error_fvar_undefined
  2167 00000F71 803804                  	cmp byte [rax], T_closure
  2168 00000F74 0F859F590000            	jne L_error_non_closure
  2169 00000F7A FF7001                  	push SOB_CLOSURE_ENV(rax)
  2170 00000F7D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2171 00000F80 FF7500                  	push qword[rbp]
  2172 00000F83 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2173 00000F88 48895D10                	mov qword[rbp + 8*2],rbx
  2174 00000F8C 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2175 00000F94 BF00000000              	mov rdi,0
  2176 00000F99 EB00                    	jmp .L_tc_recycle_frame_loop_000c
  2177                                  .L_tc_recycle_frame_loop_000c:
  2178 00000F9B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2179 00000F9F 740F                    	je .L_tc_recycle_frame_done_000c
  2180 00000FA1 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2181 00000FA6 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2182 00000FAB 48FFC7                  	inc rdi
  2183 00000FAE EBEB                    	jmp .L_tc_recycle_frame_loop_000c
  2184                                  .L_tc_recycle_frame_done_000c:
  2185 00000FB0 4889EC                  	mov rsp, rbp	; point to last argument
  2186 00000FB3 5D                      	pop rbp
  2187 00000FB4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2188 00000FB7 C9                      	leave
  2189 00000FB8 C21800                  	ret AND_KILL_FRAME(1)
  2190                                  .L_lambda_simple_end_000c:	; new closure is in rax
  2191 00000FBB 48890425[280B0000]      	mov qword [free_var_37], rax
  2192 00000FC3 48B8-                   	mov rax, sob_void
  2192 00000FC5 [0000000000000000] 
  2193                                  
  2194 00000FCD 4889C7                  	mov rdi, rax
  2195 00000FD0 E8425C0000              	call print_sexpr_if_not_void
  2196 00000FD5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2197 00000FDA E8E3590000              	call malloc
  2198 00000FDF 50                      	push rax
  2199 00000FE0 BF00000000              	mov rdi, 8 * 0	; new rib
  2200 00000FE5 E8D8590000              	call malloc
  2201 00000FEA 50                      	push rax
  2202 00000FEB BF08000000              	mov rdi, 8 * 1	; extended env
  2203 00000FF0 E8CD590000              	call malloc
  2204 00000FF5 488B7D10                	mov rdi, ENV
  2205 00000FF9 BE00000000              	mov rsi, 0
  2206 00000FFE BA01000000              	mov rdx, 1
  2207                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  2208 00001003 4883FE00                	cmp rsi, 0
  2209 00001007 7410                    	je .L_lambda_simple_env_end_000d
  2210 00001009 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2211 0000100D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2212 00001011 48FFC6                  	inc rsi
  2213 00001014 48FFC2                  	inc rdx
  2214 00001017 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  2215                                  .L_lambda_simple_env_end_000d:
  2216 00001019 5B                      	pop rbx
  2217 0000101A BE00000000              	mov rsi, 0
  2218                                  .L_lambda_simple_params_loop_000d:	; copy params
  2219 0000101F 4883FE00                	cmp rsi, 0
  2220 00001023 740E                    	je .L_lambda_simple_params_end_000d
  2221 00001025 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2222 0000102A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2223 0000102E 48FFC6                  	inc rsi
  2224 00001031 EBEC                    	jmp .L_lambda_simple_params_loop_000d
  2225                                  .L_lambda_simple_params_end_000d:
  2226 00001033 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2227 00001036 4889C3                  	mov rbx, rax
  2228 00001039 58                      	pop rax
  2229 0000103A C60004                  	mov byte [rax], T_closure
  2230 0000103D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2231 00001041 48C74009[4E100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  2232 00001049 E99C000000              	jmp .L_lambda_simple_end_000d
  2233                                  .L_lambda_simple_code_000d:	; lambda-simple body
  2234 0000104E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2235 00001054 740B                    	je .L_lambda_simple_arity_check_ok_000d
  2236 00001056 FF742410                	push qword [rsp + 8 * 2]
  2237 0000105A 6A01                    	push 1
  2238 0000105C E91A590000              	jmp L_error_incorrect_arity_simple
  2239                                  .L_lambda_simple_arity_check_ok_000d:
  2240 00001061 C8000000                	enter 0, 0
  2241                                  	; preparing a tail-call
  2242                                  	; preparing a non-tail-call
  2243 00001065 488B4520                	mov rax, PARAM(0)	; param x
  2244 00001069 50                      	push rax
  2245 0000106A 6A01                    	push 1	; arg count
  2246 0000106C 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2247 00001074 803805                  	cmp byte [rax], T_undefined
  2248 00001077 0F8418580000            	je L_error_fvar_undefined
  2249 0000107D 803804                  	cmp byte [rax], T_closure
  2250 00001080 0F8593580000            	jne L_error_non_closure
  2251 00001086 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2252 00001089 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2253 0000108C 50                      	push rax
  2254 0000108D 6A01                    	push 1	; arg count
  2255 0000108F 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2256 00001097 803805                  	cmp byte [rax], T_undefined
  2257 0000109A 0F84F5570000            	je L_error_fvar_undefined
  2258 000010A0 803804                  	cmp byte [rax], T_closure
  2259 000010A3 0F8570580000            	jne L_error_non_closure
  2260 000010A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2261 000010AC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2262 000010AF FF7500                  	push qword[rbp]
  2263 000010B2 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2264 000010B7 48895D10                	mov qword[rbp + 8*2],rbx
  2265 000010BB 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2266 000010C3 BF00000000              	mov rdi,0
  2267 000010C8 EB00                    	jmp .L_tc_recycle_frame_loop_000d
  2268                                  .L_tc_recycle_frame_loop_000d:
  2269 000010CA 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2270 000010CE 740F                    	je .L_tc_recycle_frame_done_000d
  2271 000010D0 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2272 000010D5 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2273 000010DA 48FFC7                  	inc rdi
  2274 000010DD EBEB                    	jmp .L_tc_recycle_frame_loop_000d
  2275                                  .L_tc_recycle_frame_done_000d:
  2276 000010DF 4889EC                  	mov rsp, rbp	; point to last argument
  2277 000010E2 5D                      	pop rbp
  2278 000010E3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2279 000010E6 C9                      	leave
  2280 000010E7 C21800                  	ret AND_KILL_FRAME(1)
  2281                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2282 000010EA 48890425[5D090000]      	mov qword [free_var_10], rax
  2283 000010F2 48B8-                   	mov rax, sob_void
  2283 000010F4 [0000000000000000] 
  2284                                  
  2285 000010FC 4889C7                  	mov rdi, rax
  2286 000010FF E8135B0000              	call print_sexpr_if_not_void
  2287 00001104 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2288 00001109 E8B4580000              	call malloc
  2289 0000110E 50                      	push rax
  2290 0000110F BF00000000              	mov rdi, 8 * 0	; new rib
  2291 00001114 E8A9580000              	call malloc
  2292 00001119 50                      	push rax
  2293 0000111A BF08000000              	mov rdi, 8 * 1	; extended env
  2294 0000111F E89E580000              	call malloc
  2295 00001124 488B7D10                	mov rdi, ENV
  2296 00001128 BE00000000              	mov rsi, 0
  2297 0000112D BA01000000              	mov rdx, 1
  2298                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2299 00001132 4883FE00                	cmp rsi, 0
  2300 00001136 7410                    	je .L_lambda_simple_env_end_000e
  2301 00001138 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2302 0000113C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2303 00001140 48FFC6                  	inc rsi
  2304 00001143 48FFC2                  	inc rdx
  2305 00001146 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2306                                  .L_lambda_simple_env_end_000e:
  2307 00001148 5B                      	pop rbx
  2308 00001149 BE00000000              	mov rsi, 0
  2309                                  .L_lambda_simple_params_loop_000e:	; copy params
  2310 0000114E 4883FE00                	cmp rsi, 0
  2311 00001152 740E                    	je .L_lambda_simple_params_end_000e
  2312 00001154 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2313 00001159 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2314 0000115D 48FFC6                  	inc rsi
  2315 00001160 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2316                                  .L_lambda_simple_params_end_000e:
  2317 00001162 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2318 00001165 4889C3                  	mov rbx, rax
  2319 00001168 58                      	pop rax
  2320 00001169 C60004                  	mov byte [rax], T_closure
  2321 0000116C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2322 00001170 48C74009[7D110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2323 00001178 E99C000000              	jmp .L_lambda_simple_end_000e
  2324                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2325 0000117D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2326 00001183 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2327 00001185 FF742410                	push qword [rsp + 8 * 2]
  2328 00001189 6A01                    	push 1
  2329 0000118B E9EB570000              	jmp L_error_incorrect_arity_simple
  2330                                  .L_lambda_simple_arity_check_ok_000e:
  2331 00001190 C8000000                	enter 0, 0
  2332                                  	; preparing a tail-call
  2333                                  	; preparing a non-tail-call
  2334 00001194 488B4520                	mov rax, PARAM(0)	; param x
  2335 00001198 50                      	push rax
  2336 00001199 6A01                    	push 1	; arg count
  2337 0000119B 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  2338 000011A3 803805                  	cmp byte [rax], T_undefined
  2339 000011A6 0F84E9560000            	je L_error_fvar_undefined
  2340 000011AC 803804                  	cmp byte [rax], T_closure
  2341 000011AF 0F8564570000            	jne L_error_non_closure
  2342 000011B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2343 000011B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2344 000011BB 50                      	push rax
  2345 000011BC 6A01                    	push 1	; arg count
  2346 000011BE 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2347 000011C6 803805                  	cmp byte [rax], T_undefined
  2348 000011C9 0F84C6560000            	je L_error_fvar_undefined
  2349 000011CF 803804                  	cmp byte [rax], T_closure
  2350 000011D2 0F8541570000            	jne L_error_non_closure
  2351 000011D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2352 000011DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2353 000011DE FF7500                  	push qword[rbp]
  2354 000011E1 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2355 000011E6 48895D10                	mov qword[rbp + 8*2],rbx
  2356 000011EA 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2357 000011F2 BF00000000              	mov rdi,0
  2358 000011F7 EB00                    	jmp .L_tc_recycle_frame_loop_000e
  2359                                  .L_tc_recycle_frame_loop_000e:
  2360 000011F9 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2361 000011FD 740F                    	je .L_tc_recycle_frame_done_000e
  2362 000011FF 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2363 00001204 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2364 00001209 48FFC7                  	inc rdi
  2365 0000120C EBEB                    	jmp .L_tc_recycle_frame_loop_000e
  2366                                  .L_tc_recycle_frame_done_000e:
  2367 0000120E 4889EC                  	mov rsp, rbp	; point to last argument
  2368 00001211 5D                      	pop rbp
  2369 00001212 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2370 00001215 C9                      	leave
  2371 00001216 C21800                  	ret AND_KILL_FRAME(1)
  2372                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2373 00001219 48890425[6E090000]      	mov qword [free_var_11], rax
  2374 00001221 48B8-                   	mov rax, sob_void
  2374 00001223 [0000000000000000] 
  2375                                  
  2376 0000122B 4889C7                  	mov rdi, rax
  2377 0000122E E8E4590000              	call print_sexpr_if_not_void
  2378 00001233 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2379 00001238 E885570000              	call malloc
  2380 0000123D 50                      	push rax
  2381 0000123E BF00000000              	mov rdi, 8 * 0	; new rib
  2382 00001243 E87A570000              	call malloc
  2383 00001248 50                      	push rax
  2384 00001249 BF08000000              	mov rdi, 8 * 1	; extended env
  2385 0000124E E86F570000              	call malloc
  2386 00001253 488B7D10                	mov rdi, ENV
  2387 00001257 BE00000000              	mov rsi, 0
  2388 0000125C BA01000000              	mov rdx, 1
  2389                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2390 00001261 4883FE00                	cmp rsi, 0
  2391 00001265 7410                    	je .L_lambda_simple_env_end_000f
  2392 00001267 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2393 0000126B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2394 0000126F 48FFC6                  	inc rsi
  2395 00001272 48FFC2                  	inc rdx
  2396 00001275 EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2397                                  .L_lambda_simple_env_end_000f:
  2398 00001277 5B                      	pop rbx
  2399 00001278 BE00000000              	mov rsi, 0
  2400                                  .L_lambda_simple_params_loop_000f:	; copy params
  2401 0000127D 4883FE00                	cmp rsi, 0
  2402 00001281 740E                    	je .L_lambda_simple_params_end_000f
  2403 00001283 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2404 00001288 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2405 0000128C 48FFC6                  	inc rsi
  2406 0000128F EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2407                                  .L_lambda_simple_params_end_000f:
  2408 00001291 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2409 00001294 4889C3                  	mov rbx, rax
  2410 00001297 58                      	pop rax
  2411 00001298 C60004                  	mov byte [rax], T_closure
  2412 0000129B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2413 0000129F 48C74009[AC120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2414 000012A7 E99C000000              	jmp .L_lambda_simple_end_000f
  2415                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2416 000012AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2417 000012B2 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2418 000012B4 FF742410                	push qword [rsp + 8 * 2]
  2419 000012B8 6A01                    	push 1
  2420 000012BA E9BC560000              	jmp L_error_incorrect_arity_simple
  2421                                  .L_lambda_simple_arity_check_ok_000f:
  2422 000012BF C8000000                	enter 0, 0
  2423                                  	; preparing a tail-call
  2424                                  	; preparing a non-tail-call
  2425 000012C3 488B4520                	mov rax, PARAM(0)	; param x
  2426 000012C7 50                      	push rax
  2427 000012C8 6A01                    	push 1	; arg count
  2428 000012CA 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  2429 000012D2 803805                  	cmp byte [rax], T_undefined
  2430 000012D5 0F84BA550000            	je L_error_fvar_undefined
  2431 000012DB 803804                  	cmp byte [rax], T_closure
  2432 000012DE 0F8535560000            	jne L_error_non_closure
  2433 000012E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2434 000012E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2435 000012EA 50                      	push rax
  2436 000012EB 6A01                    	push 1	; arg count
  2437 000012ED 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2438 000012F5 803805                  	cmp byte [rax], T_undefined
  2439 000012F8 0F8497550000            	je L_error_fvar_undefined
  2440 000012FE 803804                  	cmp byte [rax], T_closure
  2441 00001301 0F8512560000            	jne L_error_non_closure
  2442 00001307 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2443 0000130A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2444 0000130D FF7500                  	push qword[rbp]
  2445 00001310 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2446 00001315 48895D10                	mov qword[rbp + 8*2],rbx
  2447 00001319 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2448 00001321 BF00000000              	mov rdi,0
  2449 00001326 EB00                    	jmp .L_tc_recycle_frame_loop_000f
  2450                                  .L_tc_recycle_frame_loop_000f:
  2451 00001328 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2452 0000132C 740F                    	je .L_tc_recycle_frame_done_000f
  2453 0000132E 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2454 00001333 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2455 00001338 48FFC7                  	inc rdi
  2456 0000133B EBEB                    	jmp .L_tc_recycle_frame_loop_000f
  2457                                  .L_tc_recycle_frame_done_000f:
  2458 0000133D 4889EC                  	mov rsp, rbp	; point to last argument
  2459 00001340 5D                      	pop rbp
  2460 00001341 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2461 00001344 C9                      	leave
  2462 00001345 C21800                  	ret AND_KILL_FRAME(1)
  2463                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2464 00001348 48890425[90090000]      	mov qword [free_var_13], rax
  2465 00001350 48B8-                   	mov rax, sob_void
  2465 00001352 [0000000000000000] 
  2466                                  
  2467 0000135A 4889C7                  	mov rdi, rax
  2468 0000135D E8B5580000              	call print_sexpr_if_not_void
  2469 00001362 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2470 00001367 E856560000              	call malloc
  2471 0000136C 50                      	push rax
  2472 0000136D BF00000000              	mov rdi, 8 * 0	; new rib
  2473 00001372 E84B560000              	call malloc
  2474 00001377 50                      	push rax
  2475 00001378 BF08000000              	mov rdi, 8 * 1	; extended env
  2476 0000137D E840560000              	call malloc
  2477 00001382 488B7D10                	mov rdi, ENV
  2478 00001386 BE00000000              	mov rsi, 0
  2479 0000138B BA01000000              	mov rdx, 1
  2480                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2481 00001390 4883FE00                	cmp rsi, 0
  2482 00001394 7410                    	je .L_lambda_simple_env_end_0010
  2483 00001396 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2484 0000139A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2485 0000139E 48FFC6                  	inc rsi
  2486 000013A1 48FFC2                  	inc rdx
  2487 000013A4 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2488                                  .L_lambda_simple_env_end_0010:
  2489 000013A6 5B                      	pop rbx
  2490 000013A7 BE00000000              	mov rsi, 0
  2491                                  .L_lambda_simple_params_loop_0010:	; copy params
  2492 000013AC 4883FE00                	cmp rsi, 0
  2493 000013B0 740E                    	je .L_lambda_simple_params_end_0010
  2494 000013B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2495 000013B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2496 000013BB 48FFC6                  	inc rsi
  2497 000013BE EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2498                                  .L_lambda_simple_params_end_0010:
  2499 000013C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2500 000013C3 4889C3                  	mov rbx, rax
  2501 000013C6 58                      	pop rax
  2502 000013C7 C60004                  	mov byte [rax], T_closure
  2503 000013CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2504 000013CE 48C74009[DB130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2505 000013D6 E99C000000              	jmp .L_lambda_simple_end_0010
  2506                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2507 000013DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2508 000013E1 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2509 000013E3 FF742410                	push qword [rsp + 8 * 2]
  2510 000013E7 6A01                    	push 1
  2511 000013E9 E98D550000              	jmp L_error_incorrect_arity_simple
  2512                                  .L_lambda_simple_arity_check_ok_0010:
  2513 000013EE C8000000                	enter 0, 0
  2514                                  	; preparing a tail-call
  2515                                  	; preparing a non-tail-call
  2516 000013F2 488B4520                	mov rax, PARAM(0)	; param x
  2517 000013F6 50                      	push rax
  2518 000013F7 6A01                    	push 1	; arg count
  2519 000013F9 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  2520 00001401 803805                  	cmp byte [rax], T_undefined
  2521 00001404 0F848B540000            	je L_error_fvar_undefined
  2522 0000140A 803804                  	cmp byte [rax], T_closure
  2523 0000140D 0F8506550000            	jne L_error_non_closure
  2524 00001413 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2525 00001416 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2526 00001419 50                      	push rax
  2527 0000141A 6A01                    	push 1	; arg count
  2528 0000141C 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2529 00001424 803805                  	cmp byte [rax], T_undefined
  2530 00001427 0F8468540000            	je L_error_fvar_undefined
  2531 0000142D 803804                  	cmp byte [rax], T_closure
  2532 00001430 0F85E3540000            	jne L_error_non_closure
  2533 00001436 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2534 00001439 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2535 0000143C FF7500                  	push qword[rbp]
  2536 0000143F 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2537 00001444 48895D10                	mov qword[rbp + 8*2],rbx
  2538 00001448 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2539 00001450 BF00000000              	mov rdi,0
  2540 00001455 EB00                    	jmp .L_tc_recycle_frame_loop_0010
  2541                                  .L_tc_recycle_frame_loop_0010:
  2542 00001457 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2543 0000145B 740F                    	je .L_tc_recycle_frame_done_0010
  2544 0000145D 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2545 00001462 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2546 00001467 48FFC7                  	inc rdi
  2547 0000146A EBEB                    	jmp .L_tc_recycle_frame_loop_0010
  2548                                  .L_tc_recycle_frame_done_0010:
  2549 0000146C 4889EC                  	mov rsp, rbp	; point to last argument
  2550 0000146F 5D                      	pop rbp
  2551 00001470 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2552 00001473 C9                      	leave
  2553 00001474 C21800                  	ret AND_KILL_FRAME(1)
  2554                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2555 00001477 48890425[A1090000]      	mov qword [free_var_14], rax
  2556 0000147F 48B8-                   	mov rax, sob_void
  2556 00001481 [0000000000000000] 
  2557                                  
  2558 00001489 4889C7                  	mov rdi, rax
  2559 0000148C E886570000              	call print_sexpr_if_not_void
  2560 00001491 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2561 00001496 E827550000              	call malloc
  2562 0000149B 50                      	push rax
  2563 0000149C BF00000000              	mov rdi, 8 * 0	; new rib
  2564 000014A1 E81C550000              	call malloc
  2565 000014A6 50                      	push rax
  2566 000014A7 BF08000000              	mov rdi, 8 * 1	; extended env
  2567 000014AC E811550000              	call malloc
  2568 000014B1 488B7D10                	mov rdi, ENV
  2569 000014B5 BE00000000              	mov rsi, 0
  2570 000014BA BA01000000              	mov rdx, 1
  2571                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2572 000014BF 4883FE00                	cmp rsi, 0
  2573 000014C3 7410                    	je .L_lambda_simple_env_end_0011
  2574 000014C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2575 000014C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2576 000014CD 48FFC6                  	inc rsi
  2577 000014D0 48FFC2                  	inc rdx
  2578 000014D3 EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2579                                  .L_lambda_simple_env_end_0011:
  2580 000014D5 5B                      	pop rbx
  2581 000014D6 BE00000000              	mov rsi, 0
  2582                                  .L_lambda_simple_params_loop_0011:	; copy params
  2583 000014DB 4883FE00                	cmp rsi, 0
  2584 000014DF 740E                    	je .L_lambda_simple_params_end_0011
  2585 000014E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2586 000014E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2587 000014EA 48FFC6                  	inc rsi
  2588 000014ED EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2589                                  .L_lambda_simple_params_end_0011:
  2590 000014EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2591 000014F2 4889C3                  	mov rbx, rax
  2592 000014F5 58                      	pop rax
  2593 000014F6 C60004                  	mov byte [rax], T_closure
  2594 000014F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2595 000014FD 48C74009[0A150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2596 00001505 E99C000000              	jmp .L_lambda_simple_end_0011
  2597                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2598 0000150A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2599 00001510 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2600 00001512 FF742410                	push qword [rsp + 8 * 2]
  2601 00001516 6A01                    	push 1
  2602 00001518 E95E540000              	jmp L_error_incorrect_arity_simple
  2603                                  .L_lambda_simple_arity_check_ok_0011:
  2604 0000151D C8000000                	enter 0, 0
  2605                                  	; preparing a tail-call
  2606                                  	; preparing a non-tail-call
  2607 00001521 488B4520                	mov rax, PARAM(0)	; param x
  2608 00001525 50                      	push rax
  2609 00001526 6A01                    	push 1	; arg count
  2610 00001528 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2611 00001530 803805                  	cmp byte [rax], T_undefined
  2612 00001533 0F845C530000            	je L_error_fvar_undefined
  2613 00001539 803804                  	cmp byte [rax], T_closure
  2614 0000153C 0F85D7530000            	jne L_error_non_closure
  2615 00001542 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2616 00001545 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2617 00001548 50                      	push rax
  2618 00001549 6A01                    	push 1	; arg count
  2619 0000154B 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  2620 00001553 803805                  	cmp byte [rax], T_undefined
  2621 00001556 0F8439530000            	je L_error_fvar_undefined
  2622 0000155C 803804                  	cmp byte [rax], T_closure
  2623 0000155F 0F85B4530000            	jne L_error_non_closure
  2624 00001565 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2625 00001568 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2626 0000156B FF7500                  	push qword[rbp]
  2627 0000156E 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2628 00001573 48895D10                	mov qword[rbp + 8*2],rbx
  2629 00001577 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2630 0000157F BF00000000              	mov rdi,0
  2631 00001584 EB00                    	jmp .L_tc_recycle_frame_loop_0011
  2632                                  .L_tc_recycle_frame_loop_0011:
  2633 00001586 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2634 0000158A 740F                    	je .L_tc_recycle_frame_done_0011
  2635 0000158C 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2636 00001591 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2637 00001596 48FFC7                  	inc rdi
  2638 00001599 EBEB                    	jmp .L_tc_recycle_frame_loop_0011
  2639                                  .L_tc_recycle_frame_done_0011:
  2640 0000159B 4889EC                  	mov rsp, rbp	; point to last argument
  2641 0000159E 5D                      	pop rbp
  2642 0000159F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2643 000015A2 C9                      	leave
  2644 000015A3 C21800                  	ret AND_KILL_FRAME(1)
  2645                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2646 000015A6 48890425[D4090000]      	mov qword [free_var_17], rax
  2647 000015AE 48B8-                   	mov rax, sob_void
  2647 000015B0 [0000000000000000] 
  2648                                  
  2649 000015B8 4889C7                  	mov rdi, rax
  2650 000015BB E857560000              	call print_sexpr_if_not_void
  2651 000015C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2652 000015C5 E8F8530000              	call malloc
  2653 000015CA 50                      	push rax
  2654 000015CB BF00000000              	mov rdi, 8 * 0	; new rib
  2655 000015D0 E8ED530000              	call malloc
  2656 000015D5 50                      	push rax
  2657 000015D6 BF08000000              	mov rdi, 8 * 1	; extended env
  2658 000015DB E8E2530000              	call malloc
  2659 000015E0 488B7D10                	mov rdi, ENV
  2660 000015E4 BE00000000              	mov rsi, 0
  2661 000015E9 BA01000000              	mov rdx, 1
  2662                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2663 000015EE 4883FE00                	cmp rsi, 0
  2664 000015F2 7410                    	je .L_lambda_simple_env_end_0012
  2665 000015F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2666 000015F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2667 000015FC 48FFC6                  	inc rsi
  2668 000015FF 48FFC2                  	inc rdx
  2669 00001602 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2670                                  .L_lambda_simple_env_end_0012:
  2671 00001604 5B                      	pop rbx
  2672 00001605 BE00000000              	mov rsi, 0
  2673                                  .L_lambda_simple_params_loop_0012:	; copy params
  2674 0000160A 4883FE00                	cmp rsi, 0
  2675 0000160E 740E                    	je .L_lambda_simple_params_end_0012
  2676 00001610 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2677 00001615 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2678 00001619 48FFC6                  	inc rsi
  2679 0000161C EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2680                                  .L_lambda_simple_params_end_0012:
  2681 0000161E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2682 00001621 4889C3                  	mov rbx, rax
  2683 00001624 58                      	pop rax
  2684 00001625 C60004                  	mov byte [rax], T_closure
  2685 00001628 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2686 0000162C 48C74009[39160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2687 00001634 E99C000000              	jmp .L_lambda_simple_end_0012
  2688                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2689 00001639 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2690 0000163F 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2691 00001641 FF742410                	push qword [rsp + 8 * 2]
  2692 00001645 6A01                    	push 1
  2693 00001647 E92F530000              	jmp L_error_incorrect_arity_simple
  2694                                  .L_lambda_simple_arity_check_ok_0012:
  2695 0000164C C8000000                	enter 0, 0
  2696                                  	; preparing a tail-call
  2697                                  	; preparing a non-tail-call
  2698 00001650 488B4520                	mov rax, PARAM(0)	; param x
  2699 00001654 50                      	push rax
  2700 00001655 6A01                    	push 1	; arg count
  2701 00001657 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  2702 0000165F 803805                  	cmp byte [rax], T_undefined
  2703 00001662 0F842D520000            	je L_error_fvar_undefined
  2704 00001668 803804                  	cmp byte [rax], T_closure
  2705 0000166B 0F85A8520000            	jne L_error_non_closure
  2706 00001671 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2707 00001674 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2708 00001677 50                      	push rax
  2709 00001678 6A01                    	push 1	; arg count
  2710 0000167A 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  2711 00001682 803805                  	cmp byte [rax], T_undefined
  2712 00001685 0F840A520000            	je L_error_fvar_undefined
  2713 0000168B 803804                  	cmp byte [rax], T_closure
  2714 0000168E 0F8585520000            	jne L_error_non_closure
  2715 00001694 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2716 00001697 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2717 0000169A FF7500                  	push qword[rbp]
  2718 0000169D 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2719 000016A2 48895D10                	mov qword[rbp + 8*2],rbx
  2720 000016A6 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2721 000016AE BF00000000              	mov rdi,0
  2722 000016B3 EB00                    	jmp .L_tc_recycle_frame_loop_0012
  2723                                  .L_tc_recycle_frame_loop_0012:
  2724 000016B5 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2725 000016B9 740F                    	je .L_tc_recycle_frame_done_0012
  2726 000016BB 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2727 000016C0 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2728 000016C5 48FFC7                  	inc rdi
  2729 000016C8 EBEB                    	jmp .L_tc_recycle_frame_loop_0012
  2730                                  .L_tc_recycle_frame_done_0012:
  2731 000016CA 4889EC                  	mov rsp, rbp	; point to last argument
  2732 000016CD 5D                      	pop rbp
  2733 000016CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2734 000016D1 C9                      	leave
  2735 000016D2 C21800                  	ret AND_KILL_FRAME(1)
  2736                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2737 000016D5 48890425[E5090000]      	mov qword [free_var_18], rax
  2738 000016DD 48B8-                   	mov rax, sob_void
  2738 000016DF [0000000000000000] 
  2739                                  
  2740 000016E7 4889C7                  	mov rdi, rax
  2741 000016EA E828550000              	call print_sexpr_if_not_void
  2742 000016EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2743 000016F4 E8C9520000              	call malloc
  2744 000016F9 50                      	push rax
  2745 000016FA BF00000000              	mov rdi, 8 * 0	; new rib
  2746 000016FF E8BE520000              	call malloc
  2747 00001704 50                      	push rax
  2748 00001705 BF08000000              	mov rdi, 8 * 1	; extended env
  2749 0000170A E8B3520000              	call malloc
  2750 0000170F 488B7D10                	mov rdi, ENV
  2751 00001713 BE00000000              	mov rsi, 0
  2752 00001718 BA01000000              	mov rdx, 1
  2753                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2754 0000171D 4883FE00                	cmp rsi, 0
  2755 00001721 7410                    	je .L_lambda_simple_env_end_0013
  2756 00001723 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2757 00001727 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2758 0000172B 48FFC6                  	inc rsi
  2759 0000172E 48FFC2                  	inc rdx
  2760 00001731 EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2761                                  .L_lambda_simple_env_end_0013:
  2762 00001733 5B                      	pop rbx
  2763 00001734 BE00000000              	mov rsi, 0
  2764                                  .L_lambda_simple_params_loop_0013:	; copy params
  2765 00001739 4883FE00                	cmp rsi, 0
  2766 0000173D 740E                    	je .L_lambda_simple_params_end_0013
  2767 0000173F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2768 00001744 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2769 00001748 48FFC6                  	inc rsi
  2770 0000174B EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2771                                  .L_lambda_simple_params_end_0013:
  2772 0000174D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2773 00001750 4889C3                  	mov rbx, rax
  2774 00001753 58                      	pop rax
  2775 00001754 C60004                  	mov byte [rax], T_closure
  2776 00001757 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2777 0000175B 48C74009[68170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2778 00001763 E99C000000              	jmp .L_lambda_simple_end_0013
  2779                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2780 00001768 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2781 0000176E 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2782 00001770 FF742410                	push qword [rsp + 8 * 2]
  2783 00001774 6A01                    	push 1
  2784 00001776 E900520000              	jmp L_error_incorrect_arity_simple
  2785                                  .L_lambda_simple_arity_check_ok_0013:
  2786 0000177B C8000000                	enter 0, 0
  2787                                  	; preparing a tail-call
  2788                                  	; preparing a non-tail-call
  2789 0000177F 488B4520                	mov rax, PARAM(0)	; param x
  2790 00001783 50                      	push rax
  2791 00001784 6A01                    	push 1	; arg count
  2792 00001786 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  2793 0000178E 803805                  	cmp byte [rax], T_undefined
  2794 00001791 0F84FE500000            	je L_error_fvar_undefined
  2795 00001797 803804                  	cmp byte [rax], T_closure
  2796 0000179A 0F8579510000            	jne L_error_non_closure
  2797 000017A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2798 000017A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2799 000017A6 50                      	push rax
  2800 000017A7 6A01                    	push 1	; arg count
  2801 000017A9 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  2802 000017B1 803805                  	cmp byte [rax], T_undefined
  2803 000017B4 0F84DB500000            	je L_error_fvar_undefined
  2804 000017BA 803804                  	cmp byte [rax], T_closure
  2805 000017BD 0F8556510000            	jne L_error_non_closure
  2806 000017C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2807 000017C6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2808 000017C9 FF7500                  	push qword[rbp]
  2809 000017CC 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2810 000017D1 48895D10                	mov qword[rbp + 8*2],rbx
  2811 000017D5 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2812 000017DD BF00000000              	mov rdi,0
  2813 000017E2 EB00                    	jmp .L_tc_recycle_frame_loop_0013
  2814                                  .L_tc_recycle_frame_loop_0013:
  2815 000017E4 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2816 000017E8 740F                    	je .L_tc_recycle_frame_done_0013
  2817 000017EA 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2818 000017EF 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2819 000017F4 48FFC7                  	inc rdi
  2820 000017F7 EBEB                    	jmp .L_tc_recycle_frame_loop_0013
  2821                                  .L_tc_recycle_frame_done_0013:
  2822 000017F9 4889EC                  	mov rsp, rbp	; point to last argument
  2823 000017FC 5D                      	pop rbp
  2824 000017FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2825 00001800 C9                      	leave
  2826 00001801 C21800                  	ret AND_KILL_FRAME(1)
  2827                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2828 00001804 48890425[070A0000]      	mov qword [free_var_20], rax
  2829 0000180C 48B8-                   	mov rax, sob_void
  2829 0000180E [0000000000000000] 
  2830                                  
  2831 00001816 4889C7                  	mov rdi, rax
  2832 00001819 E8F9530000              	call print_sexpr_if_not_void
  2833 0000181E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2834 00001823 E89A510000              	call malloc
  2835 00001828 50                      	push rax
  2836 00001829 BF00000000              	mov rdi, 8 * 0	; new rib
  2837 0000182E E88F510000              	call malloc
  2838 00001833 50                      	push rax
  2839 00001834 BF08000000              	mov rdi, 8 * 1	; extended env
  2840 00001839 E884510000              	call malloc
  2841 0000183E 488B7D10                	mov rdi, ENV
  2842 00001842 BE00000000              	mov rsi, 0
  2843 00001847 BA01000000              	mov rdx, 1
  2844                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2845 0000184C 4883FE00                	cmp rsi, 0
  2846 00001850 7410                    	je .L_lambda_simple_env_end_0014
  2847 00001852 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2848 00001856 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2849 0000185A 48FFC6                  	inc rsi
  2850 0000185D 48FFC2                  	inc rdx
  2851 00001860 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2852                                  .L_lambda_simple_env_end_0014:
  2853 00001862 5B                      	pop rbx
  2854 00001863 BE00000000              	mov rsi, 0
  2855                                  .L_lambda_simple_params_loop_0014:	; copy params
  2856 00001868 4883FE00                	cmp rsi, 0
  2857 0000186C 740E                    	je .L_lambda_simple_params_end_0014
  2858 0000186E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2859 00001873 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2860 00001877 48FFC6                  	inc rsi
  2861 0000187A EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2862                                  .L_lambda_simple_params_end_0014:
  2863 0000187C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2864 0000187F 4889C3                  	mov rbx, rax
  2865 00001882 58                      	pop rax
  2866 00001883 C60004                  	mov byte [rax], T_closure
  2867 00001886 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2868 0000188A 48C74009[97180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2869 00001892 E99C000000              	jmp .L_lambda_simple_end_0014
  2870                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2871 00001897 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2872 0000189D 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2873 0000189F FF742410                	push qword [rsp + 8 * 2]
  2874 000018A3 6A01                    	push 1
  2875 000018A5 E9D1500000              	jmp L_error_incorrect_arity_simple
  2876                                  .L_lambda_simple_arity_check_ok_0014:
  2877 000018AA C8000000                	enter 0, 0
  2878                                  	; preparing a tail-call
  2879                                  	; preparing a non-tail-call
  2880 000018AE 488B4520                	mov rax, PARAM(0)	; param x
  2881 000018B2 50                      	push rax
  2882 000018B3 6A01                    	push 1	; arg count
  2883 000018B5 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  2884 000018BD 803805                  	cmp byte [rax], T_undefined
  2885 000018C0 0F84CF4F0000            	je L_error_fvar_undefined
  2886 000018C6 803804                  	cmp byte [rax], T_closure
  2887 000018C9 0F854A500000            	jne L_error_non_closure
  2888 000018CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  2889 000018D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2890 000018D5 50                      	push rax
  2891 000018D6 6A01                    	push 1	; arg count
  2892 000018D8 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  2893 000018E0 803805                  	cmp byte [rax], T_undefined
  2894 000018E3 0F84AC4F0000            	je L_error_fvar_undefined
  2895 000018E9 803804                  	cmp byte [rax], T_closure
  2896 000018EC 0F8527500000            	jne L_error_non_closure
  2897 000018F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2898 000018F5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2899 000018F8 FF7500                  	push qword[rbp]
  2900 000018FB 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2901 00001900 48895D10                	mov qword[rbp + 8*2],rbx
  2902 00001904 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2903 0000190C BF00000000              	mov rdi,0
  2904 00001911 EB00                    	jmp .L_tc_recycle_frame_loop_0014
  2905                                  .L_tc_recycle_frame_loop_0014:
  2906 00001913 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2907 00001917 740F                    	je .L_tc_recycle_frame_done_0014
  2908 00001919 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  2909 0000191E 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  2910 00001923 48FFC7                  	inc rdi
  2911 00001926 EBEB                    	jmp .L_tc_recycle_frame_loop_0014
  2912                                  .L_tc_recycle_frame_done_0014:
  2913 00001928 4889EC                  	mov rsp, rbp	; point to last argument
  2914 0000192B 5D                      	pop rbp
  2915 0000192C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2916 0000192F C9                      	leave
  2917 00001930 C21800                  	ret AND_KILL_FRAME(1)
  2918                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2919 00001933 48890425[180A0000]      	mov qword [free_var_21], rax
  2920 0000193B 48B8-                   	mov rax, sob_void
  2920 0000193D [0000000000000000] 
  2921                                  
  2922 00001945 4889C7                  	mov rdi, rax
  2923 00001948 E8CA520000              	call print_sexpr_if_not_void
  2924 0000194D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2925 00001952 E86B500000              	call malloc
  2926 00001957 50                      	push rax
  2927 00001958 BF00000000              	mov rdi, 8 * 0	; new rib
  2928 0000195D E860500000              	call malloc
  2929 00001962 50                      	push rax
  2930 00001963 BF08000000              	mov rdi, 8 * 1	; extended env
  2931 00001968 E855500000              	call malloc
  2932 0000196D 488B7D10                	mov rdi, ENV
  2933 00001971 BE00000000              	mov rsi, 0
  2934 00001976 BA01000000              	mov rdx, 1
  2935                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  2936 0000197B 4883FE00                	cmp rsi, 0
  2937 0000197F 7410                    	je .L_lambda_simple_env_end_0015
  2938 00001981 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2939 00001985 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2940 00001989 48FFC6                  	inc rsi
  2941 0000198C 48FFC2                  	inc rdx
  2942 0000198F EBEA                    	jmp .L_lambda_simple_env_loop_0015
  2943                                  .L_lambda_simple_env_end_0015:
  2944 00001991 5B                      	pop rbx
  2945 00001992 BE00000000              	mov rsi, 0
  2946                                  .L_lambda_simple_params_loop_0015:	; copy params
  2947 00001997 4883FE00                	cmp rsi, 0
  2948 0000199B 740E                    	je .L_lambda_simple_params_end_0015
  2949 0000199D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2950 000019A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2951 000019A6 48FFC6                  	inc rsi
  2952 000019A9 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  2953                                  .L_lambda_simple_params_end_0015:
  2954 000019AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2955 000019AE 4889C3                  	mov rbx, rax
  2956 000019B1 58                      	pop rax
  2957 000019B2 C60004                  	mov byte [rax], T_closure
  2958 000019B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2959 000019B9 48C74009[C6190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  2960 000019C1 E99C000000              	jmp .L_lambda_simple_end_0015
  2961                                  .L_lambda_simple_code_0015:	; lambda-simple body
  2962 000019C6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2963 000019CC 740B                    	je .L_lambda_simple_arity_check_ok_0015
  2964 000019CE FF742410                	push qword [rsp + 8 * 2]
  2965 000019D2 6A01                    	push 1
  2966 000019D4 E9A24F0000              	jmp L_error_incorrect_arity_simple
  2967                                  .L_lambda_simple_arity_check_ok_0015:
  2968 000019D9 C8000000                	enter 0, 0
  2969                                  	; preparing a tail-call
  2970                                  	; preparing a non-tail-call
  2971 000019DD 488B4520                	mov rax, PARAM(0)	; param x
  2972 000019E1 50                      	push rax
  2973 000019E2 6A01                    	push 1	; arg count
  2974 000019E4 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  2975 000019EC 803805                  	cmp byte [rax], T_undefined
  2976 000019EF 0F84A04E0000            	je L_error_fvar_undefined
  2977 000019F5 803804                  	cmp byte [rax], T_closure
  2978 000019F8 0F851B4F0000            	jne L_error_non_closure
  2979 000019FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  2980 00001A01 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2981 00001A04 50                      	push rax
  2982 00001A05 6A01                    	push 1	; arg count
  2983 00001A07 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  2984 00001A0F 803805                  	cmp byte [rax], T_undefined
  2985 00001A12 0F847D4E0000            	je L_error_fvar_undefined
  2986 00001A18 803804                  	cmp byte [rax], T_closure
  2987 00001A1B 0F85F84E0000            	jne L_error_non_closure
  2988 00001A21 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2989 00001A24 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2990 00001A27 FF7500                  	push qword[rbp]
  2991 00001A2A 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  2992 00001A2F 48895D10                	mov qword[rbp + 8*2],rbx
  2993 00001A33 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  2994 00001A3B BF00000000              	mov rdi,0
  2995 00001A40 EB00                    	jmp .L_tc_recycle_frame_loop_0015
  2996                                  .L_tc_recycle_frame_loop_0015:
  2997 00001A42 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  2998 00001A46 740F                    	je .L_tc_recycle_frame_done_0015
  2999 00001A48 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3000 00001A4D 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3001 00001A52 48FFC7                  	inc rdi
  3002 00001A55 EBEB                    	jmp .L_tc_recycle_frame_loop_0015
  3003                                  .L_tc_recycle_frame_done_0015:
  3004 00001A57 4889EC                  	mov rsp, rbp	; point to last argument
  3005 00001A5A 5D                      	pop rbp
  3006 00001A5B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3007 00001A5E C9                      	leave
  3008 00001A5F C21800                  	ret AND_KILL_FRAME(1)
  3009                                  .L_lambda_simple_end_0015:	; new closure is in rax
  3010 00001A62 48890425[5C0A0000]      	mov qword [free_var_25], rax
  3011 00001A6A 48B8-                   	mov rax, sob_void
  3011 00001A6C [0000000000000000] 
  3012                                  
  3013 00001A74 4889C7                  	mov rdi, rax
  3014 00001A77 E89B510000              	call print_sexpr_if_not_void
  3015 00001A7C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3016 00001A81 E83C4F0000              	call malloc
  3017 00001A86 50                      	push rax
  3018 00001A87 BF00000000              	mov rdi, 8 * 0	; new rib
  3019 00001A8C E8314F0000              	call malloc
  3020 00001A91 50                      	push rax
  3021 00001A92 BF08000000              	mov rdi, 8 * 1	; extended env
  3022 00001A97 E8264F0000              	call malloc
  3023 00001A9C 488B7D10                	mov rdi, ENV
  3024 00001AA0 BE00000000              	mov rsi, 0
  3025 00001AA5 BA01000000              	mov rdx, 1
  3026                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  3027 00001AAA 4883FE00                	cmp rsi, 0
  3028 00001AAE 7410                    	je .L_lambda_simple_env_end_0016
  3029 00001AB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3030 00001AB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3031 00001AB8 48FFC6                  	inc rsi
  3032 00001ABB 48FFC2                  	inc rdx
  3033 00001ABE EBEA                    	jmp .L_lambda_simple_env_loop_0016
  3034                                  .L_lambda_simple_env_end_0016:
  3035 00001AC0 5B                      	pop rbx
  3036 00001AC1 BE00000000              	mov rsi, 0
  3037                                  .L_lambda_simple_params_loop_0016:	; copy params
  3038 00001AC6 4883FE00                	cmp rsi, 0
  3039 00001ACA 740E                    	je .L_lambda_simple_params_end_0016
  3040 00001ACC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3041 00001AD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3042 00001AD5 48FFC6                  	inc rsi
  3043 00001AD8 EBEC                    	jmp .L_lambda_simple_params_loop_0016
  3044                                  .L_lambda_simple_params_end_0016:
  3045 00001ADA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3046 00001ADD 4889C3                  	mov rbx, rax
  3047 00001AE0 58                      	pop rax
  3048 00001AE1 C60004                  	mov byte [rax], T_closure
  3049 00001AE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3050 00001AE8 48C74009[F51A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  3051 00001AF0 E99C000000              	jmp .L_lambda_simple_end_0016
  3052                                  .L_lambda_simple_code_0016:	; lambda-simple body
  3053 00001AF5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3054 00001AFB 740B                    	je .L_lambda_simple_arity_check_ok_0016
  3055 00001AFD FF742410                	push qword [rsp + 8 * 2]
  3056 00001B01 6A01                    	push 1
  3057 00001B03 E9734E0000              	jmp L_error_incorrect_arity_simple
  3058                                  .L_lambda_simple_arity_check_ok_0016:
  3059 00001B08 C8000000                	enter 0, 0
  3060                                  	; preparing a tail-call
  3061                                  	; preparing a non-tail-call
  3062 00001B0C 488B4520                	mov rax, PARAM(0)	; param x
  3063 00001B10 50                      	push rax
  3064 00001B11 6A01                    	push 1	; arg count
  3065 00001B13 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  3066 00001B1B 803805                  	cmp byte [rax], T_undefined
  3067 00001B1E 0F84714D0000            	je L_error_fvar_undefined
  3068 00001B24 803804                  	cmp byte [rax], T_closure
  3069 00001B27 0F85EC4D0000            	jne L_error_non_closure
  3070 00001B2D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3071 00001B30 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3072 00001B33 50                      	push rax
  3073 00001B34 6A01                    	push 1	; arg count
  3074 00001B36 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  3075 00001B3E 803805                  	cmp byte [rax], T_undefined
  3076 00001B41 0F844E4D0000            	je L_error_fvar_undefined
  3077 00001B47 803804                  	cmp byte [rax], T_closure
  3078 00001B4A 0F85C94D0000            	jne L_error_non_closure
  3079 00001B50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3080 00001B53 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3081 00001B56 FF7500                  	push qword[rbp]
  3082 00001B59 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3083 00001B5E 48895D10                	mov qword[rbp + 8*2],rbx
  3084 00001B62 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3085 00001B6A BF00000000              	mov rdi,0
  3086 00001B6F EB00                    	jmp .L_tc_recycle_frame_loop_0016
  3087                                  .L_tc_recycle_frame_loop_0016:
  3088 00001B71 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3089 00001B75 740F                    	je .L_tc_recycle_frame_done_0016
  3090 00001B77 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3091 00001B7C 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3092 00001B81 48FFC7                  	inc rdi
  3093 00001B84 EBEB                    	jmp .L_tc_recycle_frame_loop_0016
  3094                                  .L_tc_recycle_frame_done_0016:
  3095 00001B86 4889EC                  	mov rsp, rbp	; point to last argument
  3096 00001B89 5D                      	pop rbp
  3097 00001B8A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3098 00001B8D C9                      	leave
  3099 00001B8E C21800                  	ret AND_KILL_FRAME(1)
  3100                                  .L_lambda_simple_end_0016:	; new closure is in rax
  3101 00001B91 48890425[6D0A0000]      	mov qword [free_var_26], rax
  3102 00001B99 48B8-                   	mov rax, sob_void
  3102 00001B9B [0000000000000000] 
  3103                                  
  3104 00001BA3 4889C7                  	mov rdi, rax
  3105 00001BA6 E86C500000              	call print_sexpr_if_not_void
  3106 00001BAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3107 00001BB0 E80D4E0000              	call malloc
  3108 00001BB5 50                      	push rax
  3109 00001BB6 BF00000000              	mov rdi, 8 * 0	; new rib
  3110 00001BBB E8024E0000              	call malloc
  3111 00001BC0 50                      	push rax
  3112 00001BC1 BF08000000              	mov rdi, 8 * 1	; extended env
  3113 00001BC6 E8F74D0000              	call malloc
  3114 00001BCB 488B7D10                	mov rdi, ENV
  3115 00001BCF BE00000000              	mov rsi, 0
  3116 00001BD4 BA01000000              	mov rdx, 1
  3117                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  3118 00001BD9 4883FE00                	cmp rsi, 0
  3119 00001BDD 7410                    	je .L_lambda_simple_env_end_0017
  3120 00001BDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3121 00001BE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3122 00001BE7 48FFC6                  	inc rsi
  3123 00001BEA 48FFC2                  	inc rdx
  3124 00001BED EBEA                    	jmp .L_lambda_simple_env_loop_0017
  3125                                  .L_lambda_simple_env_end_0017:
  3126 00001BEF 5B                      	pop rbx
  3127 00001BF0 BE00000000              	mov rsi, 0
  3128                                  .L_lambda_simple_params_loop_0017:	; copy params
  3129 00001BF5 4883FE00                	cmp rsi, 0
  3130 00001BF9 740E                    	je .L_lambda_simple_params_end_0017
  3131 00001BFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3132 00001C00 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3133 00001C04 48FFC6                  	inc rsi
  3134 00001C07 EBEC                    	jmp .L_lambda_simple_params_loop_0017
  3135                                  .L_lambda_simple_params_end_0017:
  3136 00001C09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3137 00001C0C 4889C3                  	mov rbx, rax
  3138 00001C0F 58                      	pop rax
  3139 00001C10 C60004                  	mov byte [rax], T_closure
  3140 00001C13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3141 00001C17 48C74009[241C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  3142 00001C1F E99C000000              	jmp .L_lambda_simple_end_0017
  3143                                  .L_lambda_simple_code_0017:	; lambda-simple body
  3144 00001C24 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3145 00001C2A 740B                    	je .L_lambda_simple_arity_check_ok_0017
  3146 00001C2C FF742410                	push qword [rsp + 8 * 2]
  3147 00001C30 6A01                    	push 1
  3148 00001C32 E9444D0000              	jmp L_error_incorrect_arity_simple
  3149                                  .L_lambda_simple_arity_check_ok_0017:
  3150 00001C37 C8000000                	enter 0, 0
  3151                                  	; preparing a tail-call
  3152                                  	; preparing a non-tail-call
  3153 00001C3B 488B4520                	mov rax, PARAM(0)	; param x
  3154 00001C3F 50                      	push rax
  3155 00001C40 6A01                    	push 1	; arg count
  3156 00001C42 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  3157 00001C4A 803805                  	cmp byte [rax], T_undefined
  3158 00001C4D 0F84424C0000            	je L_error_fvar_undefined
  3159 00001C53 803804                  	cmp byte [rax], T_closure
  3160 00001C56 0F85BD4C0000            	jne L_error_non_closure
  3161 00001C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3162 00001C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3163 00001C62 50                      	push rax
  3164 00001C63 6A01                    	push 1	; arg count
  3165 00001C65 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  3166 00001C6D 803805                  	cmp byte [rax], T_undefined
  3167 00001C70 0F841F4C0000            	je L_error_fvar_undefined
  3168 00001C76 803804                  	cmp byte [rax], T_closure
  3169 00001C79 0F859A4C0000            	jne L_error_non_closure
  3170 00001C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3171 00001C82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3172 00001C85 FF7500                  	push qword[rbp]
  3173 00001C88 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3174 00001C8D 48895D10                	mov qword[rbp + 8*2],rbx
  3175 00001C91 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3176 00001C99 BF00000000              	mov rdi,0
  3177 00001C9E EB00                    	jmp .L_tc_recycle_frame_loop_0017
  3178                                  .L_tc_recycle_frame_loop_0017:
  3179 00001CA0 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3180 00001CA4 740F                    	je .L_tc_recycle_frame_done_0017
  3181 00001CA6 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3182 00001CAB 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3183 00001CB0 48FFC7                  	inc rdi
  3184 00001CB3 EBEB                    	jmp .L_tc_recycle_frame_loop_0017
  3185                                  .L_tc_recycle_frame_done_0017:
  3186 00001CB5 4889EC                  	mov rsp, rbp	; point to last argument
  3187 00001CB8 5D                      	pop rbp
  3188 00001CB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3189 00001CBC C9                      	leave
  3190 00001CBD C21800                  	ret AND_KILL_FRAME(1)
  3191                                  .L_lambda_simple_end_0017:	; new closure is in rax
  3192 00001CC0 48890425[8F0A0000]      	mov qword [free_var_28], rax
  3193 00001CC8 48B8-                   	mov rax, sob_void
  3193 00001CCA [0000000000000000] 
  3194                                  
  3195 00001CD2 4889C7                  	mov rdi, rax
  3196 00001CD5 E83D4F0000              	call print_sexpr_if_not_void
  3197 00001CDA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3198 00001CDF E8DE4C0000              	call malloc
  3199 00001CE4 50                      	push rax
  3200 00001CE5 BF00000000              	mov rdi, 8 * 0	; new rib
  3201 00001CEA E8D34C0000              	call malloc
  3202 00001CEF 50                      	push rax
  3203 00001CF0 BF08000000              	mov rdi, 8 * 1	; extended env
  3204 00001CF5 E8C84C0000              	call malloc
  3205 00001CFA 488B7D10                	mov rdi, ENV
  3206 00001CFE BE00000000              	mov rsi, 0
  3207 00001D03 BA01000000              	mov rdx, 1
  3208                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3209 00001D08 4883FE00                	cmp rsi, 0
  3210 00001D0C 7410                    	je .L_lambda_simple_env_end_0018
  3211 00001D0E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3212 00001D12 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3213 00001D16 48FFC6                  	inc rsi
  3214 00001D19 48FFC2                  	inc rdx
  3215 00001D1C EBEA                    	jmp .L_lambda_simple_env_loop_0018
  3216                                  .L_lambda_simple_env_end_0018:
  3217 00001D1E 5B                      	pop rbx
  3218 00001D1F BE00000000              	mov rsi, 0
  3219                                  .L_lambda_simple_params_loop_0018:	; copy params
  3220 00001D24 4883FE00                	cmp rsi, 0
  3221 00001D28 740E                    	je .L_lambda_simple_params_end_0018
  3222 00001D2A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3223 00001D2F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3224 00001D33 48FFC6                  	inc rsi
  3225 00001D36 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  3226                                  .L_lambda_simple_params_end_0018:
  3227 00001D38 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3228 00001D3B 4889C3                  	mov rbx, rax
  3229 00001D3E 58                      	pop rax
  3230 00001D3F C60004                  	mov byte [rax], T_closure
  3231 00001D42 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3232 00001D46 48C74009[531D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  3233 00001D4E E99C000000              	jmp .L_lambda_simple_end_0018
  3234                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3235 00001D53 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3236 00001D59 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3237 00001D5B FF742410                	push qword [rsp + 8 * 2]
  3238 00001D5F 6A01                    	push 1
  3239 00001D61 E9154C0000              	jmp L_error_incorrect_arity_simple
  3240                                  .L_lambda_simple_arity_check_ok_0018:
  3241 00001D66 C8000000                	enter 0, 0
  3242                                  	; preparing a tail-call
  3243                                  	; preparing a non-tail-call
  3244 00001D6A 488B4520                	mov rax, PARAM(0)	; param x
  3245 00001D6E 50                      	push rax
  3246 00001D6F 6A01                    	push 1	; arg count
  3247 00001D71 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  3248 00001D79 803805                  	cmp byte [rax], T_undefined
  3249 00001D7C 0F84134B0000            	je L_error_fvar_undefined
  3250 00001D82 803804                  	cmp byte [rax], T_closure
  3251 00001D85 0F858E4B0000            	jne L_error_non_closure
  3252 00001D8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3253 00001D8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3254 00001D91 50                      	push rax
  3255 00001D92 6A01                    	push 1	; arg count
  3256 00001D94 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  3257 00001D9C 803805                  	cmp byte [rax], T_undefined
  3258 00001D9F 0F84F04A0000            	je L_error_fvar_undefined
  3259 00001DA5 803804                  	cmp byte [rax], T_closure
  3260 00001DA8 0F856B4B0000            	jne L_error_non_closure
  3261 00001DAE FF7001                  	push SOB_CLOSURE_ENV(rax)
  3262 00001DB1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3263 00001DB4 FF7500                  	push qword[rbp]
  3264 00001DB7 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3265 00001DBC 48895D10                	mov qword[rbp + 8*2],rbx
  3266 00001DC0 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3267 00001DC8 BF00000000              	mov rdi,0
  3268 00001DCD EB00                    	jmp .L_tc_recycle_frame_loop_0018
  3269                                  .L_tc_recycle_frame_loop_0018:
  3270 00001DCF 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3271 00001DD3 740F                    	je .L_tc_recycle_frame_done_0018
  3272 00001DD5 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3273 00001DDA 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3274 00001DDF 48FFC7                  	inc rdi
  3275 00001DE2 EBEB                    	jmp .L_tc_recycle_frame_loop_0018
  3276                                  .L_tc_recycle_frame_done_0018:
  3277 00001DE4 4889EC                  	mov rsp, rbp	; point to last argument
  3278 00001DE7 5D                      	pop rbp
  3279 00001DE8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3280 00001DEB C9                      	leave
  3281 00001DEC C21800                  	ret AND_KILL_FRAME(1)
  3282                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3283 00001DEF 48890425[A00A0000]      	mov qword [free_var_29], rax
  3284 00001DF7 48B8-                   	mov rax, sob_void
  3284 00001DF9 [0000000000000000] 
  3285                                  
  3286 00001E01 4889C7                  	mov rdi, rax
  3287 00001E04 E80E4E0000              	call print_sexpr_if_not_void
  3288 00001E09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3289 00001E0E E8AF4B0000              	call malloc
  3290 00001E13 50                      	push rax
  3291 00001E14 BF00000000              	mov rdi, 8 * 0	; new rib
  3292 00001E19 E8A44B0000              	call malloc
  3293 00001E1E 50                      	push rax
  3294 00001E1F BF08000000              	mov rdi, 8 * 1	; extended env
  3295 00001E24 E8994B0000              	call malloc
  3296 00001E29 488B7D10                	mov rdi, ENV
  3297 00001E2D BE00000000              	mov rsi, 0
  3298 00001E32 BA01000000              	mov rdx, 1
  3299                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3300 00001E37 4883FE00                	cmp rsi, 0
  3301 00001E3B 7410                    	je .L_lambda_simple_env_end_0019
  3302 00001E3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3303 00001E41 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3304 00001E45 48FFC6                  	inc rsi
  3305 00001E48 48FFC2                  	inc rdx
  3306 00001E4B EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3307                                  .L_lambda_simple_env_end_0019:
  3308 00001E4D 5B                      	pop rbx
  3309 00001E4E BE00000000              	mov rsi, 0
  3310                                  .L_lambda_simple_params_loop_0019:	; copy params
  3311 00001E53 4883FE00                	cmp rsi, 0
  3312 00001E57 740E                    	je .L_lambda_simple_params_end_0019
  3313 00001E59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3314 00001E5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3315 00001E62 48FFC6                  	inc rsi
  3316 00001E65 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3317                                  .L_lambda_simple_params_end_0019:
  3318 00001E67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3319 00001E6A 4889C3                  	mov rbx, rax
  3320 00001E6D 58                      	pop rax
  3321 00001E6E C60004                  	mov byte [rax], T_closure
  3322 00001E71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3323 00001E75 48C74009[821E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3324 00001E7D E99C000000              	jmp .L_lambda_simple_end_0019
  3325                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3326 00001E82 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3327 00001E88 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3328 00001E8A FF742410                	push qword [rsp + 8 * 2]
  3329 00001E8E 6A01                    	push 1
  3330 00001E90 E9E64A0000              	jmp L_error_incorrect_arity_simple
  3331                                  .L_lambda_simple_arity_check_ok_0019:
  3332 00001E95 C8000000                	enter 0, 0
  3333                                  	; preparing a tail-call
  3334                                  	; preparing a non-tail-call
  3335 00001E99 488B4520                	mov rax, PARAM(0)	; param x
  3336 00001E9D 50                      	push rax
  3337 00001E9E 6A01                    	push 1	; arg count
  3338 00001EA0 488B0425[C3090000]      	mov rax, qword [free_var_16]	; free var caar
  3339 00001EA8 803805                  	cmp byte [rax], T_undefined
  3340 00001EAB 0F84E4490000            	je L_error_fvar_undefined
  3341 00001EB1 803804                  	cmp byte [rax], T_closure
  3342 00001EB4 0F855F4A0000            	jne L_error_non_closure
  3343 00001EBA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3344 00001EBD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3345 00001EC0 50                      	push rax
  3346 00001EC1 6A01                    	push 1	; arg count
  3347 00001EC3 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  3348 00001ECB 803805                  	cmp byte [rax], T_undefined
  3349 00001ECE 0F84C1490000            	je L_error_fvar_undefined
  3350 00001ED4 803804                  	cmp byte [rax], T_closure
  3351 00001ED7 0F853C4A0000            	jne L_error_non_closure
  3352 00001EDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3353 00001EE0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3354 00001EE3 FF7500                  	push qword[rbp]
  3355 00001EE6 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3356 00001EEB 48895D10                	mov qword[rbp + 8*2],rbx
  3357 00001EEF 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3358 00001EF7 BF00000000              	mov rdi,0
  3359 00001EFC EB00                    	jmp .L_tc_recycle_frame_loop_0019
  3360                                  .L_tc_recycle_frame_loop_0019:
  3361 00001EFE 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3362 00001F02 740F                    	je .L_tc_recycle_frame_done_0019
  3363 00001F04 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3364 00001F09 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3365 00001F0E 48FFC7                  	inc rdi
  3366 00001F11 EBEB                    	jmp .L_tc_recycle_frame_loop_0019
  3367                                  .L_tc_recycle_frame_done_0019:
  3368 00001F13 4889EC                  	mov rsp, rbp	; point to last argument
  3369 00001F16 5D                      	pop rbp
  3370 00001F17 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3371 00001F1A C9                      	leave
  3372 00001F1B C21800                  	ret AND_KILL_FRAME(1)
  3373                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3374 00001F1E 48890425[D30A0000]      	mov qword [free_var_32], rax
  3375 00001F26 48B8-                   	mov rax, sob_void
  3375 00001F28 [0000000000000000] 
  3376                                  
  3377 00001F30 4889C7                  	mov rdi, rax
  3378 00001F33 E8DF4C0000              	call print_sexpr_if_not_void
  3379 00001F38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3380 00001F3D E8804A0000              	call malloc
  3381 00001F42 50                      	push rax
  3382 00001F43 BF00000000              	mov rdi, 8 * 0	; new rib
  3383 00001F48 E8754A0000              	call malloc
  3384 00001F4D 50                      	push rax
  3385 00001F4E BF08000000              	mov rdi, 8 * 1	; extended env
  3386 00001F53 E86A4A0000              	call malloc
  3387 00001F58 488B7D10                	mov rdi, ENV
  3388 00001F5C BE00000000              	mov rsi, 0
  3389 00001F61 BA01000000              	mov rdx, 1
  3390                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3391 00001F66 4883FE00                	cmp rsi, 0
  3392 00001F6A 7410                    	je .L_lambda_simple_env_end_001a
  3393 00001F6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3394 00001F70 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3395 00001F74 48FFC6                  	inc rsi
  3396 00001F77 48FFC2                  	inc rdx
  3397 00001F7A EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3398                                  .L_lambda_simple_env_end_001a:
  3399 00001F7C 5B                      	pop rbx
  3400 00001F7D BE00000000              	mov rsi, 0
  3401                                  .L_lambda_simple_params_loop_001a:	; copy params
  3402 00001F82 4883FE00                	cmp rsi, 0
  3403 00001F86 740E                    	je .L_lambda_simple_params_end_001a
  3404 00001F88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3405 00001F8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3406 00001F91 48FFC6                  	inc rsi
  3407 00001F94 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3408                                  .L_lambda_simple_params_end_001a:
  3409 00001F96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3410 00001F99 4889C3                  	mov rbx, rax
  3411 00001F9C 58                      	pop rax
  3412 00001F9D C60004                  	mov byte [rax], T_closure
  3413 00001FA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3414 00001FA4 48C74009[B11F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3415 00001FAC E99C000000              	jmp .L_lambda_simple_end_001a
  3416                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3417 00001FB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3418 00001FB7 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3419 00001FB9 FF742410                	push qword [rsp + 8 * 2]
  3420 00001FBD 6A01                    	push 1
  3421 00001FBF E9B7490000              	jmp L_error_incorrect_arity_simple
  3422                                  .L_lambda_simple_arity_check_ok_001a:
  3423 00001FC4 C8000000                	enter 0, 0
  3424                                  	; preparing a tail-call
  3425                                  	; preparing a non-tail-call
  3426 00001FC8 488B4520                	mov rax, PARAM(0)	; param x
  3427 00001FCC 50                      	push rax
  3428 00001FCD 6A01                    	push 1	; arg count
  3429 00001FCF 488B0425[3A0A0000]      	mov rax, qword [free_var_23]	; free var cadr
  3430 00001FD7 803805                  	cmp byte [rax], T_undefined
  3431 00001FDA 0F84B5480000            	je L_error_fvar_undefined
  3432 00001FE0 803804                  	cmp byte [rax], T_closure
  3433 00001FE3 0F8530490000            	jne L_error_non_closure
  3434 00001FE9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3435 00001FEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3436 00001FEF 50                      	push rax
  3437 00001FF0 6A01                    	push 1	; arg count
  3438 00001FF2 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  3439 00001FFA 803805                  	cmp byte [rax], T_undefined
  3440 00001FFD 0F8492480000            	je L_error_fvar_undefined
  3441 00002003 803804                  	cmp byte [rax], T_closure
  3442 00002006 0F850D490000            	jne L_error_non_closure
  3443 0000200C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3444 0000200F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3445 00002012 FF7500                  	push qword[rbp]
  3446 00002015 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3447 0000201A 48895D10                	mov qword[rbp + 8*2],rbx
  3448 0000201E 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3449 00002026 BF00000000              	mov rdi,0
  3450 0000202B EB00                    	jmp .L_tc_recycle_frame_loop_001a
  3451                                  .L_tc_recycle_frame_loop_001a:
  3452 0000202D 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3453 00002031 740F                    	je .L_tc_recycle_frame_done_001a
  3454 00002033 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3455 00002038 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3456 0000203D 48FFC7                  	inc rdi
  3457 00002040 EBEB                    	jmp .L_tc_recycle_frame_loop_001a
  3458                                  .L_tc_recycle_frame_done_001a:
  3459 00002042 4889EC                  	mov rsp, rbp	; point to last argument
  3460 00002045 5D                      	pop rbp
  3461 00002046 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3462 00002049 C9                      	leave
  3463 0000204A C21800                  	ret AND_KILL_FRAME(1)
  3464                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3465 0000204D 48890425[E40A0000]      	mov qword [free_var_33], rax
  3466 00002055 48B8-                   	mov rax, sob_void
  3466 00002057 [0000000000000000] 
  3467                                  
  3468 0000205F 4889C7                  	mov rdi, rax
  3469 00002062 E8B04B0000              	call print_sexpr_if_not_void
  3470 00002067 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3471 0000206C E851490000              	call malloc
  3472 00002071 50                      	push rax
  3473 00002072 BF00000000              	mov rdi, 8 * 0	; new rib
  3474 00002077 E846490000              	call malloc
  3475 0000207C 50                      	push rax
  3476 0000207D BF08000000              	mov rdi, 8 * 1	; extended env
  3477 00002082 E83B490000              	call malloc
  3478 00002087 488B7D10                	mov rdi, ENV
  3479 0000208B BE00000000              	mov rsi, 0
  3480 00002090 BA01000000              	mov rdx, 1
  3481                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3482 00002095 4883FE00                	cmp rsi, 0
  3483 00002099 7410                    	je .L_lambda_simple_env_end_001b
  3484 0000209B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3485 0000209F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3486 000020A3 48FFC6                  	inc rsi
  3487 000020A6 48FFC2                  	inc rdx
  3488 000020A9 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3489                                  .L_lambda_simple_env_end_001b:
  3490 000020AB 5B                      	pop rbx
  3491 000020AC BE00000000              	mov rsi, 0
  3492                                  .L_lambda_simple_params_loop_001b:	; copy params
  3493 000020B1 4883FE00                	cmp rsi, 0
  3494 000020B5 740E                    	je .L_lambda_simple_params_end_001b
  3495 000020B7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3496 000020BC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3497 000020C0 48FFC6                  	inc rsi
  3498 000020C3 EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3499                                  .L_lambda_simple_params_end_001b:
  3500 000020C5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3501 000020C8 4889C3                  	mov rbx, rax
  3502 000020CB 58                      	pop rax
  3503 000020CC C60004                  	mov byte [rax], T_closure
  3504 000020CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3505 000020D3 48C74009[E0200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3506 000020DB E99C000000              	jmp .L_lambda_simple_end_001b
  3507                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3508 000020E0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3509 000020E6 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3510 000020E8 FF742410                	push qword [rsp + 8 * 2]
  3511 000020EC 6A01                    	push 1
  3512 000020EE E988480000              	jmp L_error_incorrect_arity_simple
  3513                                  .L_lambda_simple_arity_check_ok_001b:
  3514 000020F3 C8000000                	enter 0, 0
  3515                                  	; preparing a tail-call
  3516                                  	; preparing a non-tail-call
  3517 000020F7 488B4520                	mov rax, PARAM(0)	; param x
  3518 000020FB 50                      	push rax
  3519 000020FC 6A01                    	push 1	; arg count
  3520 000020FE 488B0425[C20A0000]      	mov rax, qword [free_var_31]	; free var cdar
  3521 00002106 803805                  	cmp byte [rax], T_undefined
  3522 00002109 0F8486470000            	je L_error_fvar_undefined
  3523 0000210F 803804                  	cmp byte [rax], T_closure
  3524 00002112 0F8501480000            	jne L_error_non_closure
  3525 00002118 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3526 0000211B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3527 0000211E 50                      	push rax
  3528 0000211F 6A01                    	push 1	; arg count
  3529 00002121 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  3530 00002129 803805                  	cmp byte [rax], T_undefined
  3531 0000212C 0F8463470000            	je L_error_fvar_undefined
  3532 00002132 803804                  	cmp byte [rax], T_closure
  3533 00002135 0F85DE470000            	jne L_error_non_closure
  3534 0000213B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3535 0000213E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3536 00002141 FF7500                  	push qword[rbp]
  3537 00002144 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3538 00002149 48895D10                	mov qword[rbp + 8*2],rbx
  3539 0000214D 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3540 00002155 BF00000000              	mov rdi,0
  3541 0000215A EB00                    	jmp .L_tc_recycle_frame_loop_001b
  3542                                  .L_tc_recycle_frame_loop_001b:
  3543 0000215C 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3544 00002160 740F                    	je .L_tc_recycle_frame_done_001b
  3545 00002162 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3546 00002167 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3547 0000216C 48FFC7                  	inc rdi
  3548 0000216F EBEB                    	jmp .L_tc_recycle_frame_loop_001b
  3549                                  .L_tc_recycle_frame_done_001b:
  3550 00002171 4889EC                  	mov rsp, rbp	; point to last argument
  3551 00002174 5D                      	pop rbp
  3552 00002175 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3553 00002178 C9                      	leave
  3554 00002179 C21800                  	ret AND_KILL_FRAME(1)
  3555                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3556 0000217C 48890425[060B0000]      	mov qword [free_var_35], rax
  3557 00002184 48B8-                   	mov rax, sob_void
  3557 00002186 [0000000000000000] 
  3558                                  
  3559 0000218E 4889C7                  	mov rdi, rax
  3560 00002191 E8814A0000              	call print_sexpr_if_not_void
  3561 00002196 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3562 0000219B E822480000              	call malloc
  3563 000021A0 50                      	push rax
  3564 000021A1 BF00000000              	mov rdi, 8 * 0	; new rib
  3565 000021A6 E817480000              	call malloc
  3566 000021AB 50                      	push rax
  3567 000021AC BF08000000              	mov rdi, 8 * 1	; extended env
  3568 000021B1 E80C480000              	call malloc
  3569 000021B6 488B7D10                	mov rdi, ENV
  3570 000021BA BE00000000              	mov rsi, 0
  3571 000021BF BA01000000              	mov rdx, 1
  3572                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3573 000021C4 4883FE00                	cmp rsi, 0
  3574 000021C8 7410                    	je .L_lambda_simple_env_end_001c
  3575 000021CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3576 000021CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3577 000021D2 48FFC6                  	inc rsi
  3578 000021D5 48FFC2                  	inc rdx
  3579 000021D8 EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3580                                  .L_lambda_simple_env_end_001c:
  3581 000021DA 5B                      	pop rbx
  3582 000021DB BE00000000              	mov rsi, 0
  3583                                  .L_lambda_simple_params_loop_001c:	; copy params
  3584 000021E0 4883FE00                	cmp rsi, 0
  3585 000021E4 740E                    	je .L_lambda_simple_params_end_001c
  3586 000021E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3587 000021EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3588 000021EF 48FFC6                  	inc rsi
  3589 000021F2 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3590                                  .L_lambda_simple_params_end_001c:
  3591 000021F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3592 000021F7 4889C3                  	mov rbx, rax
  3593 000021FA 58                      	pop rax
  3594 000021FB C60004                  	mov byte [rax], T_closure
  3595 000021FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3596 00002202 48C74009[0F220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3597 0000220A E99C000000              	jmp .L_lambda_simple_end_001c
  3598                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3599 0000220F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3600 00002215 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3601 00002217 FF742410                	push qword [rsp + 8 * 2]
  3602 0000221B 6A01                    	push 1
  3603 0000221D E959470000              	jmp L_error_incorrect_arity_simple
  3604                                  .L_lambda_simple_arity_check_ok_001c:
  3605 00002222 C8000000                	enter 0, 0
  3606                                  	; preparing a tail-call
  3607                                  	; preparing a non-tail-call
  3608 00002226 488B4520                	mov rax, PARAM(0)	; param x
  3609 0000222A 50                      	push rax
  3610 0000222B 6A01                    	push 1	; arg count
  3611 0000222D 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  3612 00002235 803805                  	cmp byte [rax], T_undefined
  3613 00002238 0F8457460000            	je L_error_fvar_undefined
  3614 0000223E 803804                  	cmp byte [rax], T_closure
  3615 00002241 0F85D2460000            	jne L_error_non_closure
  3616 00002247 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3617 0000224A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3618 0000224D 50                      	push rax
  3619 0000224E 6A01                    	push 1	; arg count
  3620 00002250 488B0425[390B0000]      	mov rax, qword [free_var_38]	; free var cddr
  3621 00002258 803805                  	cmp byte [rax], T_undefined
  3622 0000225B 0F8434460000            	je L_error_fvar_undefined
  3623 00002261 803804                  	cmp byte [rax], T_closure
  3624 00002264 0F85AF460000            	jne L_error_non_closure
  3625 0000226A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3626 0000226D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3627 00002270 FF7500                  	push qword[rbp]
  3628 00002273 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3629 00002278 48895D10                	mov qword[rbp + 8*2],rbx
  3630 0000227C 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3631 00002284 BF00000000              	mov rdi,0
  3632 00002289 EB00                    	jmp .L_tc_recycle_frame_loop_001c
  3633                                  .L_tc_recycle_frame_loop_001c:
  3634 0000228B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3635 0000228F 740F                    	je .L_tc_recycle_frame_done_001c
  3636 00002291 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3637 00002296 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3638 0000229B 48FFC7                  	inc rdi
  3639 0000229E EBEB                    	jmp .L_tc_recycle_frame_loop_001c
  3640                                  .L_tc_recycle_frame_done_001c:
  3641 000022A0 4889EC                  	mov rsp, rbp	; point to last argument
  3642 000022A3 5D                      	pop rbp
  3643 000022A4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3644 000022A7 C9                      	leave
  3645 000022A8 C21800                  	ret AND_KILL_FRAME(1)
  3646                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3647 000022AB 48890425[170B0000]      	mov qword [free_var_36], rax
  3648 000022B3 48B8-                   	mov rax, sob_void
  3648 000022B5 [0000000000000000] 
  3649                                  
  3650 000022BD 4889C7                  	mov rdi, rax
  3651 000022C0 E852490000              	call print_sexpr_if_not_void
  3652 000022C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3653 000022CA E8F3460000              	call malloc
  3654 000022CF 50                      	push rax
  3655 000022D0 BF00000000              	mov rdi, 8 * 0	; new rib
  3656 000022D5 E8E8460000              	call malloc
  3657 000022DA 50                      	push rax
  3658 000022DB BF08000000              	mov rdi, 8 * 1	; extended env
  3659 000022E0 E8DD460000              	call malloc
  3660 000022E5 488B7D10                	mov rdi, ENV
  3661 000022E9 BE00000000              	mov rsi, 0
  3662 000022EE BA01000000              	mov rdx, 1
  3663                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3664 000022F3 4883FE00                	cmp rsi, 0
  3665 000022F7 7410                    	je .L_lambda_simple_env_end_001d
  3666 000022F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3667 000022FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3668 00002301 48FFC6                  	inc rsi
  3669 00002304 48FFC2                  	inc rdx
  3670 00002307 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3671                                  .L_lambda_simple_env_end_001d:
  3672 00002309 5B                      	pop rbx
  3673 0000230A BE00000000              	mov rsi, 0
  3674                                  .L_lambda_simple_params_loop_001d:	; copy params
  3675 0000230F 4883FE00                	cmp rsi, 0
  3676 00002313 740E                    	je .L_lambda_simple_params_end_001d
  3677 00002315 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3678 0000231A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3679 0000231E 48FFC6                  	inc rsi
  3680 00002321 EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3681                                  .L_lambda_simple_params_end_001d:
  3682 00002323 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3683 00002326 4889C3                  	mov rbx, rax
  3684 00002329 58                      	pop rax
  3685 0000232A C60004                  	mov byte [rax], T_closure
  3686 0000232D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3687 00002331 48C74009[3E230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3688 00002339 E90E010000              	jmp .L_lambda_simple_end_001d
  3689                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3690 0000233E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3691 00002344 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3692 00002346 FF742410                	push qword [rsp + 8 * 2]
  3693 0000234A 6A01                    	push 1
  3694 0000234C E92A460000              	jmp L_error_incorrect_arity_simple
  3695                                  .L_lambda_simple_arity_check_ok_001d:
  3696 00002351 C8000000                	enter 0, 0
  3697                                  	; preparing a non-tail-call
  3698 00002355 488B4520                	mov rax, PARAM(0)	; param e
  3699 00002359 50                      	push rax
  3700 0000235A 6A01                    	push 1	; arg count
  3701 0000235C 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  3702 00002364 803805                  	cmp byte [rax], T_undefined
  3703 00002367 0F8428450000            	je L_error_fvar_undefined
  3704 0000236D 803804                  	cmp byte [rax], T_closure
  3705 00002370 0F85A3450000            	jne L_error_non_closure
  3706 00002376 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3707 00002379 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3708 0000237C 483D[02000000]          	cmp rax, sob_boolean_false
  3709 00002382 0F85C0000000            	jne .L_or_end_0001
  3710                                  	; preparing a non-tail-call
  3711 00002388 488B4520                	mov rax, PARAM(0)	; param e
  3712 0000238C 50                      	push rax
  3713 0000238D 6A01                    	push 1	; arg count
  3714 0000238F 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  3715 00002397 803805                  	cmp byte [rax], T_undefined
  3716 0000239A 0F84F5440000            	je L_error_fvar_undefined
  3717 000023A0 803804                  	cmp byte [rax], T_closure
  3718 000023A3 0F8570450000            	jne L_error_non_closure
  3719 000023A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3720 000023AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3721 000023AF 483D[02000000]          	cmp rax, sob_boolean_false
  3722 000023B5 0F8483000000            	je .L_if_else_0001
  3723                                  	; preparing a tail-call
  3724                                  	; preparing a non-tail-call
  3725 000023BB 488B4520                	mov rax, PARAM(0)	; param e
  3726 000023BF 50                      	push rax
  3727 000023C0 6A01                    	push 1	; arg count
  3728 000023C2 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  3729 000023CA 803805                  	cmp byte [rax], T_undefined
  3730 000023CD 0F84C2440000            	je L_error_fvar_undefined
  3731 000023D3 803804                  	cmp byte [rax], T_closure
  3732 000023D6 0F853D450000            	jne L_error_non_closure
  3733 000023DC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3734 000023DF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3735 000023E2 50                      	push rax
  3736 000023E3 6A01                    	push 1	; arg count
  3737 000023E5 488B0425[F40B0000]      	mov rax, qword [free_var_49]	; free var list?
  3738 000023ED 803805                  	cmp byte [rax], T_undefined
  3739 000023F0 0F849F440000            	je L_error_fvar_undefined
  3740 000023F6 803804                  	cmp byte [rax], T_closure
  3741 000023F9 0F851A450000            	jne L_error_non_closure
  3742 000023FF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3743 00002402 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3744 00002405 FF7500                  	push qword[rbp]
  3745 00002408 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  3746 0000240D 48895D10                	mov qword[rbp + 8*2],rbx
  3747 00002411 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  3748 00002419 BF00000000              	mov rdi,0
  3749 0000241E EB00                    	jmp .L_tc_recycle_frame_loop_001d
  3750                                  .L_tc_recycle_frame_loop_001d:
  3751 00002420 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  3752 00002424 740F                    	je .L_tc_recycle_frame_done_001d
  3753 00002426 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  3754 0000242B 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  3755 00002430 48FFC7                  	inc rdi
  3756 00002433 EBEB                    	jmp .L_tc_recycle_frame_loop_001d
  3757                                  .L_tc_recycle_frame_done_001d:
  3758 00002435 4889EC                  	mov rsp, rbp	; point to last argument
  3759 00002438 5D                      	pop rbp
  3760 00002439 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3761 0000243C EB0A                    	jmp .L_if_end_0001
  3762                                  .L_if_else_0001:
  3763 0000243E 48B8-                   	mov rax, L_constants + 2
  3763 00002440 [0200000000000000] 
  3764                                  .L_if_end_0001:
  3765                                  .L_or_end_0001:
  3766 00002448 C9                      	leave
  3767 00002449 C21800                  	ret AND_KILL_FRAME(1)
  3768                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3769 0000244C 48890425[F40B0000]      	mov qword [free_var_49], rax
  3770 00002454 48B8-                   	mov rax, sob_void
  3770 00002456 [0000000000000000] 
  3771                                  
  3772 0000245E 4889C7                  	mov rdi, rax
  3773 00002461 E8B1470000              	call print_sexpr_if_not_void
  3774 00002466 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3775 0000246B E852450000              	call malloc
  3776 00002470 50                      	push rax
  3777 00002471 BF00000000              	mov rdi, 8 * 0	; new rib
  3778 00002476 E847450000              	call malloc
  3779 0000247B 50                      	push rax
  3780 0000247C BF08000000              	mov rdi, 8 * 1	; extended env
  3781 00002481 E83C450000              	call malloc
  3782 00002486 488B7D10                	mov rdi, ENV
  3783 0000248A BE00000000              	mov rsi, 0
  3784 0000248F BA01000000              	mov rdx, 1
  3785                                  .L_lambda_opt_env_loop_0001:	; ext_env[i + 1] <-- env[i]
  3786 00002494 4883FE00                	cmp rsi, 0
  3787 00002498 7410                    	je .L_lambda_opt_env_end_0001
  3788 0000249A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3789 0000249E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3790 000024A2 48FFC6                  	inc rsi
  3791 000024A5 48FFC2                  	inc rdx
  3792 000024A8 EBEA                    	jmp .L_lambda_opt_env_loop_0001
  3793                                  .L_lambda_opt_env_end_0001:
  3794 000024AA 5B                      	pop rbx
  3795 000024AB BE00000000              	mov rsi, 0
  3796                                  .L_lambda_opt_params_loop_0001:	; copy params
  3797 000024B0 4883FE00                	cmp rsi, 0
  3798 000024B4 740E                    	je .L_lambda_opt_params_end_0001
  3799 000024B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3800 000024BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3801 000024BF 48FFC6                  	inc rsi
  3802 000024C2 EBEC                    	jmp .L_lambda_opt_params_loop_0001
  3803                                  .L_lambda_opt_params_end_0001:
  3804 000024C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3805 000024C7 4889C3                  	mov rbx, rax
  3806 000024CA 58                      	pop rax
  3807 000024CB C60004                  	mov byte [rax], T_closure
  3808 000024CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3809 000024D2 48C74009[DF240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  3810 000024DA E9FA000000              	jmp .L_lambda_opt_end_0001
  3811                                  .L_lambda_opt_code_0001:	; lambda-opt body
  3812 000024DF 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3813 000024E5 740D                    	je .L_lambda_opt_arity_check_exact_0001
  3814 000024E7 7F4C                    	jg .L_lambda_opt_arity_check_more_0001
  3815 000024E9 FF742410                	push qword [rsp + 8 * 2]
  3816 000024ED 6A00                    	push 0
  3817 000024EF E99B440000              	jmp L_error_incorrect_arity_opt
  3818                                  .L_lambda_opt_arity_check_exact_0001:
  3819 000024F4 4883EC08                	sub rsp, 8
  3820 000024F8 488B442408              	mov rax, qword[rsp + 8 *1]
  3821 000024FD 48890424                	mov qword[rsp], rax  
  3822 00002501 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  3823 00002506 4889442408              	mov qword[rsp + 8 * 1], rax
  3824 0000250B B801000000              	mov rax, 1
  3825 00002510 4889442410              	mov qword[rsp + 8 *2], rax
  3826 00002515 48B8-                   	mov rax, sob_nil
  3826 00002517 [0100000000000000] 
  3827 0000251F 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  3828 00002524 C8000000                	enter 0, 0
  3829 00002528 488B4520                	mov rax, PARAM(0)	; param args
  3830 0000252C C9                      	leave
  3831 0000252D C21800                  	ret AND_KILL_FRAME(1)
  3832 00002530 E9A4000000              	jmp .L_lambda_opt_end_0001	; new closure is in rax
  3833                                  .L_lambda_opt_arity_check_more_0001:
  3834 00002535 488B442410              	mov rax, qword[rsp + 2 * 8]
  3835 0000253A 4889C7                  	mov rdi, rax
  3836 0000253D 49B9-                   	mov r9, sob_nil
  3836 0000253F [0100000000000000] 
  3837 00002547 4C8B442410              	mov r8, qword[rsp+2*8]
  3838                                  .L_lambda_opt_stack_shrink_loop_0001:
  3839 0000254C 4983F800                	cmp r8, 0
  3840 00002550 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  3841 00002552 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  3842 00002557 BF11000000              	mov rdi, 1+8+8	;for pair
  3843 0000255C E861440000              	call malloc	 ;to create the pair in the stack
  3844 00002561 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  3845 00002564 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  3846 00002568 4C894809                 	mov qword[rax+1+8],r9
  3847 0000256C 4989C1                  	mov r9 , rax	 ; for the recursion 
  3848 0000256F 49FFC8                  	dec r8
  3849 00002572 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  3850                                  .L_lambda_opt_stack_shrink_loop_exit_0001:
  3851 00002574 488B442410              	mov rax, qword[rsp + 2 * 8]
  3852 00002579 BF01000000              	mov rdi, 1
  3853 0000257E 4829F8                  	sub rax, rdi
  3854 00002581 4889C7                  	mov rdi, rax
  3855 00002584 486BC008                	imul rax,8
  3856 00002588 4801C4                  	add rsp, rax
  3857 0000258B 4889E0                  	mov rax, rsp
  3858 0000258E 4989F8                  	mov r8, rdi
  3859 00002591 4D6BC008                	imul r8, 8
  3860 00002595 4C29C0                  	sub rax, r8
  3861 00002598 4989C2                  	mov r10, rax	; holds the original ret in the stack
  3862 0000259B 4983C218                	add r10, 8*3
  3863 0000259F 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  3864 000025A3 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  3865 000025A6 4D6BC008                	imul r8,8
  3866 000025AA 4C01C0                  	add rax, r8
  3867 000025AD 4C8908                  	mov qword[rax] ,r9
  3868 000025B0 4983EA18                 	sub r10, 8*3
  3869 000025B4 48C744241001000000      	mov qword [rsp+2*8], 1
  3870 000025BD 498B4208                	mov rax, qword[r10 + 1 * 8]
  3871 000025C1 4889442408              	mov qword[rsp + 1*8] ,rax
  3872 000025C6 498B02                  	mov rax, qword[r10]
  3873 000025C9 48890424                	mov qword[rsp], rax
  3874 000025CD C8000000                	enter 0, 0
  3875 000025D1 488B4520                	mov rax, PARAM(0)	; param args
  3876 000025D5 C9                      	leave
  3877 000025D6 C21800                  	ret AND_KILL_FRAME(1)
  3878                                  .L_lambda_opt_end_0001:	; new closure is in rax
  3879 000025D9 48890425[D20B0000]      	mov qword [free_var_47], rax
  3880 000025E1 48B8-                   	mov rax, sob_void
  3880 000025E3 [0000000000000000] 
  3881                                  
  3882 000025EB 4889C7                  	mov rdi, rax
  3883 000025EE E824460000              	call print_sexpr_if_not_void
  3884 000025F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3885 000025F8 E8C5430000              	call malloc
  3886 000025FD 50                      	push rax
  3887 000025FE BF00000000              	mov rdi, 8 * 0	; new rib
  3888 00002603 E8BA430000              	call malloc
  3889 00002608 50                      	push rax
  3890 00002609 BF08000000              	mov rdi, 8 * 1	; extended env
  3891 0000260E E8AF430000              	call malloc
  3892 00002613 488B7D10                	mov rdi, ENV
  3893 00002617 BE00000000              	mov rsi, 0
  3894 0000261C BA01000000              	mov rdx, 1
  3895                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3896 00002621 4883FE00                	cmp rsi, 0
  3897 00002625 7410                    	je .L_lambda_simple_env_end_001e
  3898 00002627 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3899 0000262B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3900 0000262F 48FFC6                  	inc rsi
  3901 00002632 48FFC2                  	inc rdx
  3902 00002635 EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3903                                  .L_lambda_simple_env_end_001e:
  3904 00002637 5B                      	pop rbx
  3905 00002638 BE00000000              	mov rsi, 0
  3906                                  .L_lambda_simple_params_loop_001e:	; copy params
  3907 0000263D 4883FE00                	cmp rsi, 0
  3908 00002641 740E                    	je .L_lambda_simple_params_end_001e
  3909 00002643 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3910 00002648 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3911 0000264C 48FFC6                  	inc rsi
  3912 0000264F EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3913                                  .L_lambda_simple_params_end_001e:
  3914 00002651 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3915 00002654 4889C3                  	mov rbx, rax
  3916 00002657 58                      	pop rax
  3917 00002658 C60004                  	mov byte [rax], T_closure
  3918 0000265B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3919 0000265F 48C74009[69260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3920 00002667 EB3D                    	jmp .L_lambda_simple_end_001e
  3921                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3922 00002669 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3923 0000266F 740B                    	je .L_lambda_simple_arity_check_ok_001e
  3924 00002671 FF742410                	push qword [rsp + 8 * 2]
  3925 00002675 6A01                    	push 1
  3926 00002677 E9FF420000              	jmp L_error_incorrect_arity_simple
  3927                                  .L_lambda_simple_arity_check_ok_001e:
  3928 0000267C C8000000                	enter 0, 0
  3929 00002680 488B4520                	mov rax, PARAM(0)	; param x
  3930 00002684 483D[02000000]          	cmp rax, sob_boolean_false
  3931 0000268A 740C                    	je .L_if_else_0002
  3932 0000268C 48B8-                   	mov rax, L_constants + 2
  3932 0000268E [0200000000000000] 
  3933 00002696 EB0A                    	jmp .L_if_end_0002
  3934                                  .L_if_else_0002:
  3935 00002698 48B8-                   	mov rax, L_constants + 3
  3935 0000269A [0300000000000000] 
  3936                                  .L_if_end_0002:
  3937 000026A2 C9                      	leave
  3938 000026A3 C21800                  	ret AND_KILL_FRAME(1)
  3939                                  .L_lambda_simple_end_001e:	; new closure is in rax
  3940 000026A6 48890425[160C0000]      	mov qword [free_var_51], rax
  3941 000026AE 48B8-                   	mov rax, sob_void
  3941 000026B0 [0000000000000000] 
  3942                                  
  3943 000026B8 4889C7                  	mov rdi, rax
  3944 000026BB E857450000              	call print_sexpr_if_not_void
  3945 000026C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3946 000026C5 E8F8420000              	call malloc
  3947 000026CA 50                      	push rax
  3948 000026CB BF00000000              	mov rdi, 8 * 0	; new rib
  3949 000026D0 E8ED420000              	call malloc
  3950 000026D5 50                      	push rax
  3951 000026D6 BF08000000              	mov rdi, 8 * 1	; extended env
  3952 000026DB E8E2420000              	call malloc
  3953 000026E0 488B7D10                	mov rdi, ENV
  3954 000026E4 BE00000000              	mov rsi, 0
  3955 000026E9 BA01000000              	mov rdx, 1
  3956                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  3957 000026EE 4883FE00                	cmp rsi, 0
  3958 000026F2 7410                    	je .L_lambda_simple_env_end_001f
  3959 000026F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3960 000026F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3961 000026FC 48FFC6                  	inc rsi
  3962 000026FF 48FFC2                  	inc rdx
  3963 00002702 EBEA                    	jmp .L_lambda_simple_env_loop_001f
  3964                                  .L_lambda_simple_env_end_001f:
  3965 00002704 5B                      	pop rbx
  3966 00002705 BE00000000              	mov rsi, 0
  3967                                  .L_lambda_simple_params_loop_001f:	; copy params
  3968 0000270A 4883FE00                	cmp rsi, 0
  3969 0000270E 740E                    	je .L_lambda_simple_params_end_001f
  3970 00002710 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3971 00002715 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3972 00002719 48FFC6                  	inc rsi
  3973 0000271C EBEC                    	jmp .L_lambda_simple_params_loop_001f
  3974                                  .L_lambda_simple_params_end_001f:
  3975 0000271E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3976 00002721 4889C3                  	mov rbx, rax
  3977 00002724 58                      	pop rax
  3978 00002725 C60004                  	mov byte [rax], T_closure
  3979 00002728 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3980 0000272C 48C74009[39270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  3981 00002734 E9A8000000              	jmp .L_lambda_simple_end_001f
  3982                                  .L_lambda_simple_code_001f:	; lambda-simple body
  3983 00002739 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3984 0000273F 740B                    	je .L_lambda_simple_arity_check_ok_001f
  3985 00002741 FF742410                	push qword [rsp + 8 * 2]
  3986 00002745 6A01                    	push 1
  3987 00002747 E92F420000              	jmp L_error_incorrect_arity_simple
  3988                                  .L_lambda_simple_arity_check_ok_001f:
  3989 0000274C C8000000                	enter 0, 0
  3990                                  	; preparing a non-tail-call
  3991 00002750 488B4520                	mov rax, PARAM(0)	; param q
  3992 00002754 50                      	push rax
  3993 00002755 6A01                    	push 1	; arg count
  3994 00002757 488B0425[C10B0000]      	mov rax, qword [free_var_46]	; free var integer?
  3995 0000275F 803805                  	cmp byte [rax], T_undefined
  3996 00002762 0F842D410000            	je L_error_fvar_undefined
  3997 00002768 803804                  	cmp byte [rax], T_closure
  3998 0000276B 0F85A8410000            	jne L_error_non_closure
  3999 00002771 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4000 00002774 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4001 00002777 483D[02000000]          	cmp rax, sob_boolean_false
  4002 0000277D 755E                    	jne .L_or_end_0002
  4003                                  	; preparing a tail-call
  4004 0000277F 488B4520                	mov rax, PARAM(0)	; param q
  4005 00002783 50                      	push rax
  4006 00002784 6A01                    	push 1	; arg count
  4007 00002786 488B0425[9F0B0000]      	mov rax, qword [free_var_44]	; free var fraction?
  4008 0000278E 803805                  	cmp byte [rax], T_undefined
  4009 00002791 0F84FE400000            	je L_error_fvar_undefined
  4010 00002797 803804                  	cmp byte [rax], T_closure
  4011 0000279A 0F8579410000            	jne L_error_non_closure
  4012 000027A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4013 000027A3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4014 000027A6 FF7500                  	push qword[rbp]
  4015 000027A9 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4016 000027AE 48895D10                	mov qword[rbp + 8*2],rbx
  4017 000027B2 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  4018 000027BA BF00000000              	mov rdi,0
  4019 000027BF EB00                    	jmp .L_tc_recycle_frame_loop_001e
  4020                                  .L_tc_recycle_frame_loop_001e:
  4021 000027C1 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4022 000027C5 740F                    	je .L_tc_recycle_frame_done_001e
  4023 000027C7 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4024 000027CC 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4025 000027D1 48FFC7                  	inc rdi
  4026 000027D4 EBEB                    	jmp .L_tc_recycle_frame_loop_001e
  4027                                  .L_tc_recycle_frame_done_001e:
  4028 000027D6 4889EC                  	mov rsp, rbp	; point to last argument
  4029 000027D9 5D                      	pop rbp
  4030 000027DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4031                                  .L_or_end_0002:
  4032 000027DD C9                      	leave
  4033 000027DE C21800                  	ret AND_KILL_FRAME(1)
  4034                                  .L_lambda_simple_end_001f:	; new closure is in rax
  4035 000027E1 48890425[5A0C0000]      	mov qword [free_var_55], rax
  4036 000027E9 48B8-                   	mov rax, sob_void
  4036 000027EB [0000000000000000] 
  4037                                  
  4038 000027F3 4889C7                  	mov rdi, rax
  4039 000027F6 E81C440000              	call print_sexpr_if_not_void
  4040                                  	; preparing a non-tail-call
  4041 000027FB 48B8-                   	mov rax, L_constants + 1993
  4041 000027FD [C907000000000000] 
  4042 00002805 50                      	push rax
  4043 00002806 6A01                    	push 1	; arg count
  4044 00002808 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4045 0000280D E8B0410000              	call malloc
  4046 00002812 50                      	push rax
  4047 00002813 BF00000000              	mov rdi, 8 * 0	; new rib
  4048 00002818 E8A5410000              	call malloc
  4049 0000281D 50                      	push rax
  4050 0000281E BF08000000              	mov rdi, 8 * 1	; extended env
  4051 00002823 E89A410000              	call malloc
  4052 00002828 488B7D10                	mov rdi, ENV
  4053 0000282C BE00000000              	mov rsi, 0
  4054 00002831 BA01000000              	mov rdx, 1
  4055                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  4056 00002836 4883FE00                	cmp rsi, 0
  4057 0000283A 7410                    	je .L_lambda_simple_env_end_0020
  4058 0000283C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4059 00002840 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4060 00002844 48FFC6                  	inc rsi
  4061 00002847 48FFC2                  	inc rdx
  4062 0000284A EBEA                    	jmp .L_lambda_simple_env_loop_0020
  4063                                  .L_lambda_simple_env_end_0020:
  4064 0000284C 5B                      	pop rbx
  4065 0000284D BE00000000              	mov rsi, 0
  4066                                  .L_lambda_simple_params_loop_0020:	; copy params
  4067 00002852 4883FE00                	cmp rsi, 0
  4068 00002856 740E                    	je .L_lambda_simple_params_end_0020
  4069 00002858 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4070 0000285D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4071 00002861 48FFC6                  	inc rsi
  4072 00002864 EBEC                    	jmp .L_lambda_simple_params_loop_0020
  4073                                  .L_lambda_simple_params_end_0020:
  4074 00002866 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4075 00002869 4889C3                  	mov rbx, rax
  4076 0000286C 58                      	pop rax
  4077 0000286D C60004                  	mov byte [rax], T_closure
  4078 00002870 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4079 00002874 48C74009[81280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  4080 0000287C E911040000              	jmp .L_lambda_simple_end_0020
  4081                                  .L_lambda_simple_code_0020:	; lambda-simple body
  4082 00002881 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4083 00002887 740B                    	je .L_lambda_simple_arity_check_ok_0020
  4084 00002889 FF742410                	push qword [rsp + 8 * 2]
  4085 0000288D 6A01                    	push 1
  4086 0000288F E9E7400000              	jmp L_error_incorrect_arity_simple
  4087                                  .L_lambda_simple_arity_check_ok_0020:
  4088 00002894 C8000000                	enter 0, 0
  4089 00002898 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  4090 0000289C 488903                  	mov qword [rbx], rax
  4091                                  
  4092 0000289F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4093 000028A4 E819410000              	call malloc
  4094 000028A9 50                      	push rax
  4095 000028AA BF08000000              	mov rdi, 8 * 1	; new rib
  4096 000028AF E80E410000              	call malloc
  4097 000028B4 50                      	push rax
  4098 000028B5 BF10000000              	mov rdi, 8 * 2	; extended env
  4099 000028BA E803410000              	call malloc
  4100 000028BF 488B7D10                	mov rdi, ENV
  4101 000028C3 BE00000000              	mov rsi, 0
  4102 000028C8 BA01000000              	mov rdx, 1
  4103                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  4104 000028CD 4883FE01                	cmp rsi, 1
  4105 000028D1 7410                    	je .L_lambda_simple_env_end_0021
  4106 000028D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4107 000028D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4108 000028DB 48FFC6                  	inc rsi
  4109 000028DE 48FFC2                  	inc rdx
  4110 000028E1 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  4111                                  .L_lambda_simple_env_end_0021:
  4112 000028E3 5B                      	pop rbx
  4113 000028E4 BE00000000              	mov rsi, 0
  4114                                  .L_lambda_simple_params_loop_0021:	; copy params
  4115 000028E9 4883FE01                	cmp rsi, 1
  4116 000028ED 740E                    	je .L_lambda_simple_params_end_0021
  4117 000028EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4118 000028F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4119 000028F8 48FFC6                  	inc rsi
  4120 000028FB EBEC                    	jmp .L_lambda_simple_params_loop_0021
  4121                                  .L_lambda_simple_params_end_0021:
  4122 000028FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4123 00002900 4889C3                  	mov rbx, rax
  4124 00002903 58                      	pop rax
  4125 00002904 C60004                  	mov byte [rax], T_closure
  4126 00002907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4127 0000290B 48C74009[18290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  4128 00002913 E920010000              	jmp .L_lambda_simple_end_0021
  4129                                  .L_lambda_simple_code_0021:	; lambda-simple body
  4130 00002918 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4131 0000291E 740B                    	je .L_lambda_simple_arity_check_ok_0021
  4132 00002920 FF742410                	push qword [rsp + 8 * 2]
  4133 00002924 6A02                    	push 2
  4134 00002926 E950400000              	jmp L_error_incorrect_arity_simple
  4135                                  .L_lambda_simple_arity_check_ok_0021:
  4136 0000292B C8000000                	enter 0, 0
  4137                                  	; preparing a non-tail-call
  4138 0000292F 488B4528                	mov rax, PARAM(1)	; param s
  4139 00002933 50                      	push rax
  4140 00002934 6A01                    	push 1	; arg count
  4141 00002936 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  4142 0000293E 803805                  	cmp byte [rax], T_undefined
  4143 00002941 0F844E3F0000            	je L_error_fvar_undefined
  4144 00002947 803804                  	cmp byte [rax], T_closure
  4145 0000294A 0F85C93F0000            	jne L_error_non_closure
  4146 00002950 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4147 00002953 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4148 00002956 483D[02000000]          	cmp rax, sob_boolean_false
  4149 0000295C 7409                    	je .L_if_else_0003
  4150 0000295E 488B4520                	mov rax, PARAM(0)	; param a
  4151 00002962 E9CD000000              	jmp .L_if_end_0003
  4152                                  .L_if_else_0003:
  4153                                  	; preparing a tail-call
  4154                                  	; preparing a non-tail-call
  4155                                  	; preparing a non-tail-call
  4156 00002967 488B4528                	mov rax, PARAM(1)	; param s
  4157 0000296B 50                      	push rax
  4158 0000296C 6A01                    	push 1	; arg count
  4159 0000296E 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  4160 00002976 803805                  	cmp byte [rax], T_undefined
  4161 00002979 0F84163F0000            	je L_error_fvar_undefined
  4162 0000297F 803804                  	cmp byte [rax], T_closure
  4163 00002982 0F85913F0000            	jne L_error_non_closure
  4164 00002988 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4165 0000298B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4166 0000298E 50                      	push rax
  4167                                  	; preparing a non-tail-call
  4168 0000298F 488B4528                	mov rax, PARAM(1)	; param s
  4169 00002993 50                      	push rax
  4170 00002994 6A01                    	push 1	; arg count
  4171 00002996 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  4172 0000299E 803805                  	cmp byte [rax], T_undefined
  4173 000029A1 0F84EE3E0000            	je L_error_fvar_undefined
  4174 000029A7 803804                  	cmp byte [rax], T_closure
  4175 000029AA 0F85693F0000            	jne L_error_non_closure
  4176 000029B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4177 000029B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4178 000029B6 50                      	push rax
  4179 000029B7 6A02                    	push 2	; arg count
  4180 000029B9 488B4510                	mov rax, ENV
  4181 000029BD 488B00                  	mov rax, qword [rax + 8 * 0]
  4182 000029C0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4183 000029C3 488B00                  	mov rax, qword [rax]
  4184 000029C6 803804                  	cmp byte [rax], T_closure
  4185 000029C9 0F854A3F0000            	jne L_error_non_closure
  4186 000029CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  4187 000029D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4188 000029D5 50                      	push rax
  4189 000029D6 488B4520                	mov rax, PARAM(0)	; param a
  4190 000029DA 50                      	push rax
  4191 000029DB 6A02                    	push 2	; arg count
  4192 000029DD 488B0425[5B0B0000]      	mov rax, qword [free_var_40]	; free var cons
  4193 000029E5 803805                  	cmp byte [rax], T_undefined
  4194 000029E8 0F84A73E0000            	je L_error_fvar_undefined
  4195 000029EE 803804                  	cmp byte [rax], T_closure
  4196 000029F1 0F85223F0000            	jne L_error_non_closure
  4197 000029F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4198 000029FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4199 000029FD FF7500                  	push qword[rbp]
  4200 00002A00 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4201 00002A05 48895D10                	mov qword[rbp + 8*2],rbx
  4202 00002A09 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  4203 00002A11 BF00000000              	mov rdi,0
  4204 00002A16 EB00                    	jmp .L_tc_recycle_frame_loop_001f
  4205                                  .L_tc_recycle_frame_loop_001f:
  4206 00002A18 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4207 00002A1C 740F                    	je .L_tc_recycle_frame_done_001f
  4208 00002A1E 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4209 00002A23 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4210 00002A28 48FFC7                  	inc rdi
  4211 00002A2B EBEB                    	jmp .L_tc_recycle_frame_loop_001f
  4212                                  .L_tc_recycle_frame_done_001f:
  4213 00002A2D 4889EC                  	mov rsp, rbp	; point to last argument
  4214 00002A30 5D                      	pop rbp
  4215 00002A31 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4216                                  .L_if_end_0003:
  4217 00002A34 C9                      	leave
  4218 00002A35 C22000                  	ret AND_KILL_FRAME(2)
  4219                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4220 00002A38 50                      	push rax
  4221 00002A39 488B4520                	mov rax, PARAM(0)	; param run
  4222 00002A3D 8F00                    	pop qword [rax]
  4223 00002A3F 48B8-                   	mov rax, sob_void
  4223 00002A41 [0000000000000000] 
  4224                                  
  4225 00002A49 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4226 00002A4E E86F3F0000              	call malloc
  4227 00002A53 50                      	push rax
  4228 00002A54 BF08000000              	mov rdi, 8 * 1	; new rib
  4229 00002A59 E8643F0000              	call malloc
  4230 00002A5E 50                      	push rax
  4231 00002A5F BF10000000              	mov rdi, 8 * 2	; extended env
  4232 00002A64 E8593F0000              	call malloc
  4233 00002A69 488B7D10                	mov rdi, ENV
  4234 00002A6D BE00000000              	mov rsi, 0
  4235 00002A72 BA01000000              	mov rdx, 1
  4236                                  .L_lambda_opt_env_loop_0002:	; ext_env[i + 1] <-- env[i]
  4237 00002A77 4883FE01                	cmp rsi, 1
  4238 00002A7B 7410                    	je .L_lambda_opt_env_end_0002
  4239 00002A7D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4240 00002A81 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4241 00002A85 48FFC6                  	inc rsi
  4242 00002A88 48FFC2                  	inc rdx
  4243 00002A8B EBEA                    	jmp .L_lambda_opt_env_loop_0002
  4244                                  .L_lambda_opt_env_end_0002:
  4245 00002A8D 5B                      	pop rbx
  4246 00002A8E BE00000000              	mov rsi, 0
  4247                                  .L_lambda_opt_params_loop_0002:	; copy params
  4248 00002A93 4883FE01                	cmp rsi, 1
  4249 00002A97 740E                    	je .L_lambda_opt_params_end_0002
  4250 00002A99 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4251 00002A9E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4252 00002AA2 48FFC6                  	inc rsi
  4253 00002AA5 EBEC                    	jmp .L_lambda_opt_params_loop_0002
  4254                                  .L_lambda_opt_params_end_0002:
  4255 00002AA7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4256 00002AAA 4889C3                  	mov rbx, rax
  4257 00002AAD 58                      	pop rax
  4258 00002AAE C60004                  	mov byte [rax], T_closure
  4259 00002AB1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4260 00002AB5 48C74009[C22A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  4261 00002ABD E9CC010000              	jmp .L_lambda_opt_end_0002
  4262                                  .L_lambda_opt_code_0002:	; lambda-opt body
  4263 00002AC2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4264 00002AC8 7411                    	je .L_lambda_opt_arity_check_exact_0002
  4265 00002ACA 0F8FB1000000            	jg .L_lambda_opt_arity_check_more_0002
  4266 00002AD0 FF742410                	push qword [rsp + 8 * 2]
  4267 00002AD4 6A01                    	push 1
  4268 00002AD6 E9B43E0000              	jmp L_error_incorrect_arity_opt
  4269                                  .L_lambda_opt_arity_check_exact_0002:
  4270 00002ADB 4883EC08                	sub rsp, 8
  4271 00002ADF 488B442408              	mov rax, qword[rsp + 8 *1]
  4272 00002AE4 48890424                	mov qword[rsp], rax  
  4273 00002AE8 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4274 00002AED 4889442408              	mov qword[rsp + 8 * 1], rax
  4275 00002AF2 B802000000              	mov rax, 2
  4276 00002AF7 4889442410              	mov qword[rsp + 8 *2], rax
  4277 00002AFC 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4278 00002B01 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4279 00002B06 48B8-                   	mov rax, sob_nil
  4279 00002B08 [0100000000000000] 
  4280 00002B10 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4281 00002B15 C8000000                	enter 0, 0
  4282                                  	; preparing a tail-call
  4283 00002B19 488B4528                	mov rax, PARAM(1)	; param s
  4284 00002B1D 50                      	push rax
  4285 00002B1E 488B4520                	mov rax, PARAM(0)	; param a
  4286 00002B22 50                      	push rax
  4287 00002B23 6A02                    	push 2	; arg count
  4288 00002B25 488B4510                	mov rax, ENV
  4289 00002B29 488B00                  	mov rax, qword [rax + 8 * 0]
  4290 00002B2C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4291 00002B2F 488B00                  	mov rax, qword [rax]
  4292 00002B32 803804                  	cmp byte [rax], T_closure
  4293 00002B35 0F85DE3D0000            	jne L_error_non_closure
  4294 00002B3B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4295 00002B3E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4296 00002B41 FF7500                  	push qword[rbp]
  4297 00002B44 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4298 00002B49 48895D10                	mov qword[rbp + 8*2],rbx
  4299 00002B4D 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  4300 00002B55 BF00000000              	mov rdi,0
  4301 00002B5A EB00                    	jmp .L_tc_recycle_frame_loop_0021
  4302                                  .L_tc_recycle_frame_loop_0021:
  4303 00002B5C 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4304 00002B60 740F                    	je .L_tc_recycle_frame_done_0021
  4305 00002B62 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4306 00002B67 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4307 00002B6C 48FFC7                  	inc rdi
  4308 00002B6F EBEB                    	jmp .L_tc_recycle_frame_loop_0021
  4309                                  .L_tc_recycle_frame_done_0021:
  4310 00002B71 4889EC                  	mov rsp, rbp	; point to last argument
  4311 00002B74 5D                      	pop rbp
  4312 00002B75 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4313 00002B78 C9                      	leave
  4314 00002B79 C22000                  	ret AND_KILL_FRAME(2)
  4315 00002B7C E90D010000              	jmp .L_lambda_opt_end_0002	; new closure is in rax
  4316                                  .L_lambda_opt_arity_check_more_0002:
  4317 00002B81 488B442410              	mov rax, qword[rsp + 2 * 8]
  4318 00002B86 4889C7                  	mov rdi, rax
  4319 00002B89 49B9-                   	mov r9, sob_nil
  4319 00002B8B [0100000000000000] 
  4320 00002B93 4C8B442410              	mov r8, qword[rsp+2*8]
  4321                                  .L_lambda_opt_stack_shrink_loop_0002:
  4322 00002B98 4983F801                	cmp r8, 1
  4323 00002B9C 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  4324 00002B9E 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  4325 00002BA3 BF11000000              	mov rdi, 1+8+8	;for pair
  4326 00002BA8 E8153E0000              	call malloc	 ;to create the pair in the stack
  4327 00002BAD C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  4328 00002BB0 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  4329 00002BB4 4C894809                 	mov qword[rax+1+8],r9
  4330 00002BB8 4989C1                  	mov r9 , rax	 ; for the recursion 
  4331 00002BBB 49FFC8                  	dec r8
  4332 00002BBE EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  4333                                  .L_lambda_opt_stack_shrink_loop_exit_0002:
  4334 00002BC0 488B442410              	mov rax, qword[rsp + 2 * 8]
  4335 00002BC5 BF02000000              	mov rdi, 2
  4336 00002BCA 4829F8                  	sub rax, rdi
  4337 00002BCD 4889C7                  	mov rdi, rax
  4338 00002BD0 486BC008                	imul rax,8
  4339 00002BD4 4801C4                  	add rsp, rax
  4340 00002BD7 4889E0                  	mov rax, rsp
  4341 00002BDA 4989F8                  	mov r8, rdi
  4342 00002BDD 4D6BC008                	imul r8, 8
  4343 00002BE1 4C29C0                  	sub rax, r8
  4344 00002BE4 4989C2                  	mov r10, rax	; holds the original ret in the stack
  4345 00002BE7 4983C218                	add r10, 8*3
  4346 00002BEB 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  4347 00002BEF 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  4348 00002BF2 4D6BC008                	imul r8,8
  4349 00002BF6 4C01C0                  	add rax, r8
  4350 00002BF9 4C8908                  	mov qword[rax] ,r9
  4351 00002BFC 4D89D0                   	mov r8, r10
  4352 00002BFF 4983C000                	add r8, 8 * 0
  4353 00002C03 4D8B08                  	mov r9,qword[r8]
  4354 00002C06 4D890CF8                	mov qword [r8 + rdi * 8], r9
  4355 00002C0A 4983EA18                	sub r10, 8*3
  4356 00002C0E 48C744241002000000      	mov qword [rsp+2*8], 2
  4357 00002C17 498B4208                	mov rax, qword[r10 + 1 * 8]
  4358 00002C1B 4889442408              	mov qword[rsp + 1*8] ,rax
  4359 00002C20 498B02                  	mov rax, qword[r10]
  4360 00002C23 48890424                	mov qword[rsp], rax
  4361 00002C27 C8000000                	enter 0, 0
  4362                                  	; preparing a tail-call
  4363 00002C2B 488B4528                	mov rax, PARAM(1)	; param s
  4364 00002C2F 50                      	push rax
  4365 00002C30 488B4520                	mov rax, PARAM(0)	; param a
  4366 00002C34 50                      	push rax
  4367 00002C35 6A02                    	push 2	; arg count
  4368 00002C37 488B4510                	mov rax, ENV
  4369 00002C3B 488B00                  	mov rax, qword [rax + 8 * 0]
  4370 00002C3E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4371 00002C41 488B00                  	mov rax, qword [rax]
  4372 00002C44 803804                  	cmp byte [rax], T_closure
  4373 00002C47 0F85CC3C0000            	jne L_error_non_closure
  4374 00002C4D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4375 00002C50 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4376 00002C53 FF7500                  	push qword[rbp]
  4377 00002C56 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4378 00002C5B 48895D10                	mov qword[rbp + 8*2],rbx
  4379 00002C5F 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  4380 00002C67 BF00000000              	mov rdi,0
  4381 00002C6C EB00                    	jmp .L_tc_recycle_frame_loop_0020
  4382                                  .L_tc_recycle_frame_loop_0020:
  4383 00002C6E 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4384 00002C72 740F                    	je .L_tc_recycle_frame_done_0020
  4385 00002C74 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4386 00002C79 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4387 00002C7E 48FFC7                  	inc rdi
  4388 00002C81 EBEB                    	jmp .L_tc_recycle_frame_loop_0020
  4389                                  .L_tc_recycle_frame_done_0020:
  4390 00002C83 4889EC                  	mov rsp, rbp	; point to last argument
  4391 00002C86 5D                      	pop rbp
  4392 00002C87 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4393 00002C8A C9                      	leave
  4394 00002C8B C22000                  	ret AND_KILL_FRAME(2)
  4395                                  .L_lambda_opt_end_0002:	; new closure is in rax
  4396 00002C8E C9                      	leave
  4397 00002C8F C21800                  	ret AND_KILL_FRAME(1)
  4398                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4399 00002C92 803804                  	cmp byte [rax], T_closure
  4400 00002C95 0F857E3C0000            	jne L_error_non_closure
  4401 00002C9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4402 00002C9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4403 00002CA1 48890425[E30B0000]      	mov qword [free_var_48], rax
  4404 00002CA9 48B8-                   	mov rax, sob_void
  4404 00002CAB [0000000000000000] 
  4405                                  
  4406 00002CB3 4889C7                  	mov rdi, rax
  4407 00002CB6 E85C3F0000              	call print_sexpr_if_not_void
  4408                                  	; preparing a non-tail-call
  4409 00002CBB 48B8-                   	mov rax, L_constants + 1993
  4409 00002CBD [C907000000000000] 
  4410 00002CC5 50                      	push rax
  4411 00002CC6 6A01                    	push 1	; arg count
  4412 00002CC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4413 00002CCD E8F03C0000              	call malloc
  4414 00002CD2 50                      	push rax
  4415 00002CD3 BF00000000              	mov rdi, 8 * 0	; new rib
  4416 00002CD8 E8E53C0000              	call malloc
  4417 00002CDD 50                      	push rax
  4418 00002CDE BF08000000              	mov rdi, 8 * 1	; extended env
  4419 00002CE3 E8DA3C0000              	call malloc
  4420 00002CE8 488B7D10                	mov rdi, ENV
  4421 00002CEC BE00000000              	mov rsi, 0
  4422 00002CF1 BA01000000              	mov rdx, 1
  4423                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4424 00002CF6 4883FE00                	cmp rsi, 0
  4425 00002CFA 7410                    	je .L_lambda_simple_env_end_0022
  4426 00002CFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4427 00002D00 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4428 00002D04 48FFC6                  	inc rsi
  4429 00002D07 48FFC2                  	inc rdx
  4430 00002D0A EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4431                                  .L_lambda_simple_env_end_0022:
  4432 00002D0C 5B                      	pop rbx
  4433 00002D0D BE00000000              	mov rsi, 0
  4434                                  .L_lambda_simple_params_loop_0022:	; copy params
  4435 00002D12 4883FE00                	cmp rsi, 0
  4436 00002D16 740E                    	je .L_lambda_simple_params_end_0022
  4437 00002D18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4438 00002D1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4439 00002D21 48FFC6                  	inc rsi
  4440 00002D24 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4441                                  .L_lambda_simple_params_end_0022:
  4442 00002D26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4443 00002D29 4889C3                  	mov rbx, rax
  4444 00002D2C 58                      	pop rax
  4445 00002D2D C60004                  	mov byte [rax], T_closure
  4446 00002D30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4447 00002D34 48C74009[412D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4448 00002D3C E9EE040000              	jmp .L_lambda_simple_end_0022
  4449                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4450 00002D41 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4451 00002D47 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4452 00002D49 FF742410                	push qword [rsp + 8 * 2]
  4453 00002D4D 6A01                    	push 1
  4454 00002D4F E9273C0000              	jmp L_error_incorrect_arity_simple
  4455                                  .L_lambda_simple_arity_check_ok_0022:
  4456 00002D54 C8000000                	enter 0, 0
  4457 00002D58 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  4458 00002D5C 488903                  	mov qword [rbx], rax
  4459                                  
  4460 00002D5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4461 00002D64 E8593C0000              	call malloc
  4462 00002D69 50                      	push rax
  4463 00002D6A BF08000000              	mov rdi, 8 * 1	; new rib
  4464 00002D6F E84E3C0000              	call malloc
  4465 00002D74 50                      	push rax
  4466 00002D75 BF10000000              	mov rdi, 8 * 2	; extended env
  4467 00002D7A E8433C0000              	call malloc
  4468 00002D7F 488B7D10                	mov rdi, ENV
  4469 00002D83 BE00000000              	mov rsi, 0
  4470 00002D88 BA01000000              	mov rdx, 1
  4471                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4472 00002D8D 4883FE01                	cmp rsi, 1
  4473 00002D91 7410                    	je .L_lambda_simple_env_end_0023
  4474 00002D93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4475 00002D97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4476 00002D9B 48FFC6                  	inc rsi
  4477 00002D9E 48FFC2                  	inc rdx
  4478 00002DA1 EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4479                                  .L_lambda_simple_env_end_0023:
  4480 00002DA3 5B                      	pop rbx
  4481 00002DA4 BE00000000              	mov rsi, 0
  4482                                  .L_lambda_simple_params_loop_0023:	; copy params
  4483 00002DA9 4883FE01                	cmp rsi, 1
  4484 00002DAD 740E                    	je .L_lambda_simple_params_end_0023
  4485 00002DAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4486 00002DB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4487 00002DB8 48FFC6                  	inc rsi
  4488 00002DBB EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4489                                  .L_lambda_simple_params_end_0023:
  4490 00002DBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4491 00002DC0 4889C3                  	mov rbx, rax
  4492 00002DC3 58                      	pop rax
  4493 00002DC4 C60004                  	mov byte [rax], T_closure
  4494 00002DC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4495 00002DCB 48C74009[D82D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4496 00002DD3 E921010000              	jmp .L_lambda_simple_end_0023
  4497                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4498 00002DD8 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4499 00002DDE 740B                    	je .L_lambda_simple_arity_check_ok_0023
  4500 00002DE0 FF742410                	push qword [rsp + 8 * 2]
  4501 00002DE4 6A02                    	push 2
  4502 00002DE6 E9903B0000              	jmp L_error_incorrect_arity_simple
  4503                                  .L_lambda_simple_arity_check_ok_0023:
  4504 00002DEB C8000000                	enter 0, 0
  4505                                  	; preparing a non-tail-call
  4506 00002DEF 488B4528                	mov rax, PARAM(1)	; param s
  4507 00002DF3 50                      	push rax
  4508 00002DF4 6A01                    	push 1	; arg count
  4509 00002DF6 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  4510 00002DFE 803805                  	cmp byte [rax], T_undefined
  4511 00002E01 0F848E3A0000            	je L_error_fvar_undefined
  4512 00002E07 803804                  	cmp byte [rax], T_closure
  4513 00002E0A 0F85093B0000            	jne L_error_non_closure
  4514 00002E10 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4515 00002E13 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4516 00002E16 483D[02000000]          	cmp rax, sob_boolean_false
  4517 00002E1C 0F84CF000000            	je .L_if_else_0004
  4518                                  	; preparing a tail-call
  4519                                  	; preparing a non-tail-call
  4520                                  	; preparing a non-tail-call
  4521 00002E22 488B4528                	mov rax, PARAM(1)	; param s
  4522 00002E26 50                      	push rax
  4523 00002E27 6A01                    	push 1	; arg count
  4524 00002E29 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  4525 00002E31 803805                  	cmp byte [rax], T_undefined
  4526 00002E34 0F845B3A0000            	je L_error_fvar_undefined
  4527 00002E3A 803804                  	cmp byte [rax], T_closure
  4528 00002E3D 0F85D63A0000            	jne L_error_non_closure
  4529 00002E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4530 00002E46 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4531 00002E49 50                      	push rax
  4532                                  	; preparing a non-tail-call
  4533 00002E4A 488B4528                	mov rax, PARAM(1)	; param s
  4534 00002E4E 50                      	push rax
  4535 00002E4F 6A01                    	push 1	; arg count
  4536 00002E51 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  4537 00002E59 803805                  	cmp byte [rax], T_undefined
  4538 00002E5C 0F84333A0000            	je L_error_fvar_undefined
  4539 00002E62 803804                  	cmp byte [rax], T_closure
  4540 00002E65 0F85AE3A0000            	jne L_error_non_closure
  4541 00002E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4542 00002E6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4543 00002E71 50                      	push rax
  4544 00002E72 6A02                    	push 2	; arg count
  4545 00002E74 488B4510                	mov rax, ENV
  4546 00002E78 488B00                  	mov rax, qword [rax + 8 * 0]
  4547 00002E7B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4548 00002E7E 488B00                  	mov rax, qword [rax]
  4549 00002E81 803804                  	cmp byte [rax], T_closure
  4550 00002E84 0F858F3A0000            	jne L_error_non_closure
  4551 00002E8A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4552 00002E8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4553 00002E90 50                      	push rax
  4554 00002E91 488B4520                	mov rax, PARAM(0)	; param a
  4555 00002E95 50                      	push rax
  4556 00002E96 6A02                    	push 2	; arg count
  4557 00002E98 488B0425[5B0B0000]      	mov rax, qword [free_var_40]	; free var cons
  4558 00002EA0 803805                  	cmp byte [rax], T_undefined
  4559 00002EA3 0F84EC390000            	je L_error_fvar_undefined
  4560 00002EA9 803804                  	cmp byte [rax], T_closure
  4561 00002EAC 0F85673A0000            	jne L_error_non_closure
  4562 00002EB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4563 00002EB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4564 00002EB8 FF7500                  	push qword[rbp]
  4565 00002EBB 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4566 00002EC0 48895D10                	mov qword[rbp + 8*2],rbx
  4567 00002EC4 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  4568 00002ECC BF00000000              	mov rdi,0
  4569 00002ED1 EB00                    	jmp .L_tc_recycle_frame_loop_0022
  4570                                  .L_tc_recycle_frame_loop_0022:
  4571 00002ED3 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4572 00002ED7 740F                    	je .L_tc_recycle_frame_done_0022
  4573 00002ED9 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4574 00002EDE 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4575 00002EE3 48FFC7                  	inc rdi
  4576 00002EE6 EBEB                    	jmp .L_tc_recycle_frame_loop_0022
  4577                                  .L_tc_recycle_frame_done_0022:
  4578 00002EE8 4889EC                  	mov rsp, rbp	; point to last argument
  4579 00002EEB 5D                      	pop rbp
  4580 00002EEC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4581 00002EEF EB04                    	jmp .L_if_end_0004
  4582                                  .L_if_else_0004:
  4583 00002EF1 488B4520                	mov rax, PARAM(0)	; param a
  4584                                  .L_if_end_0004:
  4585 00002EF5 C9                      	leave
  4586 00002EF6 C22000                  	ret AND_KILL_FRAME(2)
  4587                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4588 00002EF9 50                      	push rax
  4589 00002EFA 488B4520                	mov rax, PARAM(0)	; param run
  4590 00002EFE 8F00                    	pop qword [rax]
  4591 00002F00 48B8-                   	mov rax, sob_void
  4591 00002F02 [0000000000000000] 
  4592                                  
  4593 00002F0A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4594 00002F0F E8AE3A0000              	call malloc
  4595 00002F14 50                      	push rax
  4596 00002F15 BF08000000              	mov rdi, 8 * 1	; new rib
  4597 00002F1A E8A33A0000              	call malloc
  4598 00002F1F 50                      	push rax
  4599 00002F20 BF10000000              	mov rdi, 8 * 2	; extended env
  4600 00002F25 E8983A0000              	call malloc
  4601 00002F2A 488B7D10                	mov rdi, ENV
  4602 00002F2E BE00000000              	mov rsi, 0
  4603 00002F33 BA01000000              	mov rdx, 1
  4604                                  .L_lambda_opt_env_loop_0003:	; ext_env[i + 1] <-- env[i]
  4605 00002F38 4883FE01                	cmp rsi, 1
  4606 00002F3C 7410                    	je .L_lambda_opt_env_end_0003
  4607 00002F3E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4608 00002F42 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4609 00002F46 48FFC6                  	inc rsi
  4610 00002F49 48FFC2                  	inc rdx
  4611 00002F4C EBEA                    	jmp .L_lambda_opt_env_loop_0003
  4612                                  .L_lambda_opt_env_end_0003:
  4613 00002F4E 5B                      	pop rbx
  4614 00002F4F BE00000000              	mov rsi, 0
  4615                                  .L_lambda_opt_params_loop_0003:	; copy params
  4616 00002F54 4883FE01                	cmp rsi, 1
  4617 00002F58 740E                    	je .L_lambda_opt_params_end_0003
  4618 00002F5A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4619 00002F5F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4620 00002F63 48FFC6                  	inc rsi
  4621 00002F66 EBEC                    	jmp .L_lambda_opt_params_loop_0003
  4622                                  .L_lambda_opt_params_end_0003:
  4623 00002F68 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4624 00002F6B 4889C3                  	mov rbx, rax
  4625 00002F6E 58                      	pop rax
  4626 00002F6F C60004                  	mov byte [rax], T_closure
  4627 00002F72 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4628 00002F76 48C74009[832F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  4629 00002F7E E9A8020000              	jmp .L_lambda_opt_end_0003
  4630                                  .L_lambda_opt_code_0003:	; lambda-opt body
  4631 00002F83 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4632 00002F89 7411                    	je .L_lambda_opt_arity_check_exact_0003
  4633 00002F8B 0F8F1F010000            	jg .L_lambda_opt_arity_check_more_0003
  4634 00002F91 FF742410                	push qword [rsp + 8 * 2]
  4635 00002F95 6A01                    	push 1
  4636 00002F97 E9F3390000              	jmp L_error_incorrect_arity_opt
  4637                                  .L_lambda_opt_arity_check_exact_0003:
  4638 00002F9C 4883EC08                	sub rsp, 8
  4639 00002FA0 488B442408              	mov rax, qword[rsp + 8 *1]
  4640 00002FA5 48890424                	mov qword[rsp], rax  
  4641 00002FA9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4642 00002FAE 4889442408              	mov qword[rsp + 8 * 1], rax
  4643 00002FB3 B802000000              	mov rax, 2
  4644 00002FB8 4889442410              	mov qword[rsp + 8 *2], rax
  4645 00002FBD 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4646 00002FC2 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4647 00002FC7 48B8-                   	mov rax, sob_nil
  4647 00002FC9 [0100000000000000] 
  4648 00002FD1 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4649 00002FD6 C8000000                	enter 0, 0
  4650                                  	; preparing a tail-call
  4651                                  	; preparing a non-tail-call
  4652                                  	; preparing a non-tail-call
  4653 00002FDA 488B4528                	mov rax, PARAM(1)	; param s
  4654 00002FDE 50                      	push rax
  4655 00002FDF 6A01                    	push 1	; arg count
  4656 00002FE1 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  4657 00002FE9 803805                  	cmp byte [rax], T_undefined
  4658 00002FEC 0F84A3380000            	je L_error_fvar_undefined
  4659 00002FF2 803804                  	cmp byte [rax], T_closure
  4660 00002FF5 0F851E390000            	jne L_error_non_closure
  4661 00002FFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  4662 00002FFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4663 00003001 50                      	push rax
  4664                                  	; preparing a non-tail-call
  4665 00003002 488B4528                	mov rax, PARAM(1)	; param s
  4666 00003006 50                      	push rax
  4667 00003007 6A01                    	push 1	; arg count
  4668 00003009 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  4669 00003011 803805                  	cmp byte [rax], T_undefined
  4670 00003014 0F847B380000            	je L_error_fvar_undefined
  4671 0000301A 803804                  	cmp byte [rax], T_closure
  4672 0000301D 0F85F6380000            	jne L_error_non_closure
  4673 00003023 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4674 00003026 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4675 00003029 50                      	push rax
  4676 0000302A 6A02                    	push 2	; arg count
  4677 0000302C 488B4510                	mov rax, ENV
  4678 00003030 488B00                  	mov rax, qword [rax + 8 * 0]
  4679 00003033 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4680 00003036 488B00                  	mov rax, qword [rax]
  4681 00003039 803804                  	cmp byte [rax], T_closure
  4682 0000303C 0F85D7380000            	jne L_error_non_closure
  4683 00003042 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4684 00003045 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4685 00003048 50                      	push rax
  4686 00003049 488B4520                	mov rax, PARAM(0)	; param f
  4687 0000304D 50                      	push rax
  4688 0000304E 6A02                    	push 2	; arg count
  4689 00003050 488B0425[F7080000]      	mov rax, qword [free_var_4]	; free var __bin-apply
  4690 00003058 803805                  	cmp byte [rax], T_undefined
  4691 0000305B 0F8434380000            	je L_error_fvar_undefined
  4692 00003061 803804                  	cmp byte [rax], T_closure
  4693 00003064 0F85AF380000            	jne L_error_non_closure
  4694 0000306A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4695 0000306D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4696 00003070 FF7500                  	push qword[rbp]
  4697 00003073 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4698 00003078 48895D10                	mov qword[rbp + 8*2],rbx
  4699 0000307C 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  4700 00003084 BF00000000              	mov rdi,0
  4701 00003089 EB00                    	jmp .L_tc_recycle_frame_loop_0024
  4702                                  .L_tc_recycle_frame_loop_0024:
  4703 0000308B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4704 0000308F 740F                    	je .L_tc_recycle_frame_done_0024
  4705 00003091 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4706 00003096 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4707 0000309B 48FFC7                  	inc rdi
  4708 0000309E EBEB                    	jmp .L_tc_recycle_frame_loop_0024
  4709                                  .L_tc_recycle_frame_done_0024:
  4710 000030A0 4889EC                  	mov rsp, rbp	; point to last argument
  4711 000030A3 5D                      	pop rbp
  4712 000030A4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4713 000030A7 C9                      	leave
  4714 000030A8 C22000                  	ret AND_KILL_FRAME(2)
  4715 000030AB E97B010000              	jmp .L_lambda_opt_end_0003	; new closure is in rax
  4716                                  .L_lambda_opt_arity_check_more_0003:
  4717 000030B0 488B442410              	mov rax, qword[rsp + 2 * 8]
  4718 000030B5 4889C7                  	mov rdi, rax
  4719 000030B8 49B9-                   	mov r9, sob_nil
  4719 000030BA [0100000000000000] 
  4720 000030C2 4C8B442410              	mov r8, qword[rsp+2*8]
  4721                                  .L_lambda_opt_stack_shrink_loop_0003:
  4722 000030C7 4983F801                	cmp r8, 1
  4723 000030CB 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  4724 000030CD 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  4725 000030D2 BF11000000              	mov rdi, 1+8+8	;for pair
  4726 000030D7 E8E6380000              	call malloc	 ;to create the pair in the stack
  4727 000030DC C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  4728 000030DF 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  4729 000030E3 4C894809                 	mov qword[rax+1+8],r9
  4730 000030E7 4989C1                  	mov r9 , rax	 ; for the recursion 
  4731 000030EA 49FFC8                  	dec r8
  4732 000030ED EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  4733                                  .L_lambda_opt_stack_shrink_loop_exit_0003:
  4734 000030EF 488B442410              	mov rax, qword[rsp + 2 * 8]
  4735 000030F4 BF02000000              	mov rdi, 2
  4736 000030F9 4829F8                  	sub rax, rdi
  4737 000030FC 4889C7                  	mov rdi, rax
  4738 000030FF 486BC008                	imul rax,8
  4739 00003103 4801C4                  	add rsp, rax
  4740 00003106 4889E0                  	mov rax, rsp
  4741 00003109 4989F8                  	mov r8, rdi
  4742 0000310C 4D6BC008                	imul r8, 8
  4743 00003110 4C29C0                  	sub rax, r8
  4744 00003113 4989C2                  	mov r10, rax	; holds the original ret in the stack
  4745 00003116 4983C218                	add r10, 8*3
  4746 0000311A 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  4747 0000311E 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  4748 00003121 4D6BC008                	imul r8,8
  4749 00003125 4C01C0                  	add rax, r8
  4750 00003128 4C8908                  	mov qword[rax] ,r9
  4751 0000312B 4D89D0                   	mov r8, r10
  4752 0000312E 4983C000                	add r8, 8 * 0
  4753 00003132 4D8B08                  	mov r9,qword[r8]
  4754 00003135 4D890CF8                	mov qword [r8 + rdi * 8], r9
  4755 00003139 4983EA18                	sub r10, 8*3
  4756 0000313D 48C744241002000000      	mov qword [rsp+2*8], 2
  4757 00003146 498B4208                	mov rax, qword[r10 + 1 * 8]
  4758 0000314A 4889442408              	mov qword[rsp + 1*8] ,rax
  4759 0000314F 498B02                  	mov rax, qword[r10]
  4760 00003152 48890424                	mov qword[rsp], rax
  4761 00003156 C8000000                	enter 0, 0
  4762                                  	; preparing a tail-call
  4763                                  	; preparing a non-tail-call
  4764                                  	; preparing a non-tail-call
  4765 0000315A 488B4528                	mov rax, PARAM(1)	; param s
  4766 0000315E 50                      	push rax
  4767 0000315F 6A01                    	push 1	; arg count
  4768 00003161 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  4769 00003169 803805                  	cmp byte [rax], T_undefined
  4770 0000316C 0F8423370000            	je L_error_fvar_undefined
  4771 00003172 803804                  	cmp byte [rax], T_closure
  4772 00003175 0F859E370000            	jne L_error_non_closure
  4773 0000317B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4774 0000317E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4775 00003181 50                      	push rax
  4776                                  	; preparing a non-tail-call
  4777 00003182 488B4528                	mov rax, PARAM(1)	; param s
  4778 00003186 50                      	push rax
  4779 00003187 6A01                    	push 1	; arg count
  4780 00003189 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  4781 00003191 803805                  	cmp byte [rax], T_undefined
  4782 00003194 0F84FB360000            	je L_error_fvar_undefined
  4783 0000319A 803804                  	cmp byte [rax], T_closure
  4784 0000319D 0F8576370000            	jne L_error_non_closure
  4785 000031A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4786 000031A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4787 000031A9 50                      	push rax
  4788 000031AA 6A02                    	push 2	; arg count
  4789 000031AC 488B4510                	mov rax, ENV
  4790 000031B0 488B00                  	mov rax, qword [rax + 8 * 0]
  4791 000031B3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  4792 000031B6 488B00                  	mov rax, qword [rax]
  4793 000031B9 803804                  	cmp byte [rax], T_closure
  4794 000031BC 0F8557370000            	jne L_error_non_closure
  4795 000031C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4796 000031C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4797 000031C8 50                      	push rax
  4798 000031C9 488B4520                	mov rax, PARAM(0)	; param f
  4799 000031CD 50                      	push rax
  4800 000031CE 6A02                    	push 2	; arg count
  4801 000031D0 488B0425[F7080000]      	mov rax, qword [free_var_4]	; free var __bin-apply
  4802 000031D8 803805                  	cmp byte [rax], T_undefined
  4803 000031DB 0F84B4360000            	je L_error_fvar_undefined
  4804 000031E1 803804                  	cmp byte [rax], T_closure
  4805 000031E4 0F852F370000            	jne L_error_non_closure
  4806 000031EA FF7001                  	push SOB_CLOSURE_ENV(rax)
  4807 000031ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4808 000031F0 FF7500                  	push qword[rbp]
  4809 000031F3 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  4810 000031F8 48895D10                	mov qword[rbp + 8*2],rbx
  4811 000031FC 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  4812 00003204 BF00000000              	mov rdi,0
  4813 00003209 EB00                    	jmp .L_tc_recycle_frame_loop_0023
  4814                                  .L_tc_recycle_frame_loop_0023:
  4815 0000320B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  4816 0000320F 740F                    	je .L_tc_recycle_frame_done_0023
  4817 00003211 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  4818 00003216 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  4819 0000321B 48FFC7                  	inc rdi
  4820 0000321E EBEB                    	jmp .L_tc_recycle_frame_loop_0023
  4821                                  .L_tc_recycle_frame_done_0023:
  4822 00003220 4889EC                  	mov rsp, rbp	; point to last argument
  4823 00003223 5D                      	pop rbp
  4824 00003224 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4825 00003227 C9                      	leave
  4826 00003228 C22000                  	ret AND_KILL_FRAME(2)
  4827                                  .L_lambda_opt_end_0003:	; new closure is in rax
  4828 0000322B C9                      	leave
  4829 0000322C C21800                  	ret AND_KILL_FRAME(1)
  4830                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4831 0000322F 803804                  	cmp byte [rax], T_closure
  4832 00003232 0F85E1360000            	jne L_error_non_closure
  4833 00003238 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4834 0000323B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4835 0000323E 48890425[4C090000]      	mov qword [free_var_9], rax
  4836 00003246 48B8-                   	mov rax, sob_void
  4836 00003248 [0000000000000000] 
  4837                                  
  4838 00003250 4889C7                  	mov rdi, rax
  4839 00003253 E8BF390000              	call print_sexpr_if_not_void
  4840 00003258 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4841 0000325D E860370000              	call malloc
  4842 00003262 50                      	push rax
  4843 00003263 BF00000000              	mov rdi, 8 * 0	; new rib
  4844 00003268 E855370000              	call malloc
  4845 0000326D 50                      	push rax
  4846 0000326E BF08000000              	mov rdi, 8 * 1	; extended env
  4847 00003273 E84A370000              	call malloc
  4848 00003278 488B7D10                	mov rdi, ENV
  4849 0000327C BE00000000              	mov rsi, 0
  4850 00003281 BA01000000              	mov rdx, 1
  4851                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  4852 00003286 4883FE00                	cmp rsi, 0
  4853 0000328A 7410                    	je .L_lambda_opt_env_end_0004
  4854 0000328C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4855 00003290 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4856 00003294 48FFC6                  	inc rsi
  4857 00003297 48FFC2                  	inc rdx
  4858 0000329A EBEA                    	jmp .L_lambda_opt_env_loop_0004
  4859                                  .L_lambda_opt_env_end_0004:
  4860 0000329C 5B                      	pop rbx
  4861 0000329D BE00000000              	mov rsi, 0
  4862                                  .L_lambda_opt_params_loop_0004:	; copy params
  4863 000032A2 4883FE00                	cmp rsi, 0
  4864 000032A6 740E                    	je .L_lambda_opt_params_end_0004
  4865 000032A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4866 000032AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4867 000032B1 48FFC6                  	inc rsi
  4868 000032B4 EBEC                    	jmp .L_lambda_opt_params_loop_0004
  4869                                  .L_lambda_opt_params_end_0004:
  4870 000032B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4871 000032B9 4889C3                  	mov rbx, rax
  4872 000032BC 58                      	pop rax
  4873 000032BD C60004                  	mov byte [rax], T_closure
  4874 000032C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4875 000032C4 48C74009[D1320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  4876 000032CC E938080000              	jmp .L_lambda_opt_end_0004
  4877                                  .L_lambda_opt_code_0004:	; lambda-opt body
  4878 000032D1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4879 000032D7 7411                    	je .L_lambda_opt_arity_check_exact_0004
  4880 000032D9 0F8FE7030000            	jg .L_lambda_opt_arity_check_more_0004
  4881 000032DF FF742410                	push qword [rsp + 8 * 2]
  4882 000032E3 6A01                    	push 1
  4883 000032E5 E9A5360000              	jmp L_error_incorrect_arity_opt
  4884                                  .L_lambda_opt_arity_check_exact_0004:
  4885 000032EA 4883EC08                	sub rsp, 8
  4886 000032EE 488B442408              	mov rax, qword[rsp + 8 *1]
  4887 000032F3 48890424                	mov qword[rsp], rax  
  4888 000032F7 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  4889 000032FC 4889442408              	mov qword[rsp + 8 * 1], rax
  4890 00003301 B802000000              	mov rax, 2
  4891 00003306 4889442410              	mov qword[rsp + 8 *2], rax
  4892 0000330B 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  4893 00003310 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  4894 00003315 48B8-                   	mov rax, sob_nil
  4894 00003317 [0100000000000000] 
  4895 0000331F 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  4896 00003324 C8000000                	enter 0, 0
  4897                                  	; preparing a tail-call
  4898 00003328 48B8-                   	mov rax, L_constants + 1993
  4898 0000332A [C907000000000000] 
  4899 00003332 50                      	push rax
  4900 00003333 6A01                    	push 1	; arg count
  4901 00003335 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4902 0000333A E883360000              	call malloc
  4903 0000333F 50                      	push rax
  4904 00003340 BF10000000              	mov rdi, 8 * 2	; new rib
  4905 00003345 E878360000              	call malloc
  4906 0000334A 50                      	push rax
  4907 0000334B BF10000000              	mov rdi, 8 * 2	; extended env
  4908 00003350 E86D360000              	call malloc
  4909 00003355 488B7D10                	mov rdi, ENV
  4910 00003359 BE00000000              	mov rsi, 0
  4911 0000335E BA01000000              	mov rdx, 1
  4912                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  4913 00003363 4883FE01                	cmp rsi, 1
  4914 00003367 7410                    	je .L_lambda_simple_env_end_0026
  4915 00003369 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4916 0000336D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4917 00003371 48FFC6                  	inc rsi
  4918 00003374 48FFC2                  	inc rdx
  4919 00003377 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  4920                                  .L_lambda_simple_env_end_0026:
  4921 00003379 5B                      	pop rbx
  4922 0000337A BE00000000              	mov rsi, 0
  4923                                  .L_lambda_simple_params_loop_0026:	; copy params
  4924 0000337F 4883FE02                	cmp rsi, 2
  4925 00003383 740E                    	je .L_lambda_simple_params_end_0026
  4926 00003385 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4927 0000338A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4928 0000338E 48FFC6                  	inc rsi
  4929 00003391 EBEC                    	jmp .L_lambda_simple_params_loop_0026
  4930                                  .L_lambda_simple_params_end_0026:
  4931 00003393 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4932 00003396 4889C3                  	mov rbx, rax
  4933 00003399 58                      	pop rax
  4934 0000339A C60004                  	mov byte [rax], T_closure
  4935 0000339D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4936 000033A1 48C74009[AE330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  4937 000033A9 E9C9020000              	jmp .L_lambda_simple_end_0026
  4938                                  .L_lambda_simple_code_0026:	; lambda-simple body
  4939 000033AE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4940 000033B4 740B                    	je .L_lambda_simple_arity_check_ok_0026
  4941 000033B6 FF742410                	push qword [rsp + 8 * 2]
  4942 000033BA 6A01                    	push 1
  4943 000033BC E9BA350000              	jmp L_error_incorrect_arity_simple
  4944                                  .L_lambda_simple_arity_check_ok_0026:
  4945 000033C1 C8000000                	enter 0, 0
  4946 000033C5 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  4947 000033C9 488903                  	mov qword [rbx], rax
  4948                                  
  4949 000033CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4950 000033D1 E8EC350000              	call malloc
  4951 000033D6 50                      	push rax
  4952 000033D7 BF08000000              	mov rdi, 8 * 1	; new rib
  4953 000033DC E8E1350000              	call malloc
  4954 000033E1 50                      	push rax
  4955 000033E2 BF18000000              	mov rdi, 8 * 3	; extended env
  4956 000033E7 E8D6350000              	call malloc
  4957 000033EC 488B7D10                	mov rdi, ENV
  4958 000033F0 BE00000000              	mov rsi, 0
  4959 000033F5 BA01000000              	mov rdx, 1
  4960                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  4961 000033FA 4883FE02                	cmp rsi, 2
  4962 000033FE 7410                    	je .L_lambda_simple_env_end_0027
  4963 00003400 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4964 00003404 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4965 00003408 48FFC6                  	inc rsi
  4966 0000340B 48FFC2                  	inc rdx
  4967 0000340E EBEA                    	jmp .L_lambda_simple_env_loop_0027
  4968                                  .L_lambda_simple_env_end_0027:
  4969 00003410 5B                      	pop rbx
  4970 00003411 BE00000000              	mov rsi, 0
  4971                                  .L_lambda_simple_params_loop_0027:	; copy params
  4972 00003416 4883FE01                	cmp rsi, 1
  4973 0000341A 740E                    	je .L_lambda_simple_params_end_0027
  4974 0000341C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4975 00003421 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4976 00003425 48FFC6                  	inc rsi
  4977 00003428 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  4978                                  .L_lambda_simple_params_end_0027:
  4979 0000342A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4980 0000342D 4889C3                  	mov rbx, rax
  4981 00003430 58                      	pop rax
  4982 00003431 C60004                  	mov byte [rax], T_closure
  4983 00003434 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4984 00003438 48C74009[45340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  4985 00003440 E980010000              	jmp .L_lambda_simple_end_0027
  4986                                  .L_lambda_simple_code_0027:	; lambda-simple body
  4987 00003445 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4988 0000344B 740B                    	je .L_lambda_simple_arity_check_ok_0027
  4989 0000344D FF742410                	push qword [rsp + 8 * 2]
  4990 00003451 6A01                    	push 1
  4991 00003453 E923350000              	jmp L_error_incorrect_arity_simple
  4992                                  .L_lambda_simple_arity_check_ok_0027:
  4993 00003458 C8000000                	enter 0, 0
  4994                                  	; preparing a non-tail-call
  4995                                  	; preparing a non-tail-call
  4996 0000345C 488B4520                	mov rax, PARAM(0)	; param s
  4997 00003460 50                      	push rax
  4998 00003461 6A01                    	push 1	; arg count
  4999 00003463 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  5000 0000346B 803805                  	cmp byte [rax], T_undefined
  5001 0000346E 0F8421340000            	je L_error_fvar_undefined
  5002 00003474 803804                  	cmp byte [rax], T_closure
  5003 00003477 0F859C340000            	jne L_error_non_closure
  5004 0000347D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5005 00003480 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5006 00003483 50                      	push rax
  5007 00003484 6A01                    	push 1	; arg count
  5008 00003486 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  5009 0000348E 803805                  	cmp byte [rax], T_undefined
  5010 00003491 0F84FE330000            	je L_error_fvar_undefined
  5011 00003497 803804                  	cmp byte [rax], T_closure
  5012 0000349A 0F8579340000            	jne L_error_non_closure
  5013 000034A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5014 000034A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5015 000034A6 483D[02000000]          	cmp rax, sob_boolean_false
  5016 000034AC 0F8405010000            	je .L_if_else_0007
  5017                                  	; preparing a non-tail-call
  5018                                  	; preparing a non-tail-call
  5019 000034B2 488B4520                	mov rax, PARAM(0)	; param s
  5020 000034B6 50                      	push rax
  5021 000034B7 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  5022 000034BF 803805                  	cmp byte [rax], T_undefined
  5023 000034C2 0F84CD330000            	je L_error_fvar_undefined
  5024 000034C8 50                      	push rax
  5025 000034C9 6A02                    	push 2	; arg count
  5026 000034CB 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  5027 000034D3 803805                  	cmp byte [rax], T_undefined
  5028 000034D6 0F84B9330000            	je L_error_fvar_undefined
  5029 000034DC 803804                  	cmp byte [rax], T_closure
  5030 000034DF 0F8534340000            	jne L_error_non_closure
  5031 000034E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5032 000034E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5033 000034EB 50                      	push rax
  5034 000034EC 488B4510                	mov rax, ENV
  5035 000034F0 488B4008                	mov rax, qword [rax + 8 * 1]
  5036 000034F4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5037 000034F7 50                      	push rax
  5038 000034F8 6A02                    	push 2	; arg count
  5039 000034FA 488B0425[4C090000]      	mov rax, qword [free_var_9]	; free var apply
  5040 00003502 803805                  	cmp byte [rax], T_undefined
  5041 00003505 0F848A330000            	je L_error_fvar_undefined
  5042 0000350B 803804                  	cmp byte [rax], T_closure
  5043 0000350E 0F8505340000            	jne L_error_non_closure
  5044 00003514 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5045 00003517 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5046 0000351A 483D[02000000]          	cmp rax, sob_boolean_false
  5047 00003520 0F858F000000            	jne .L_or_end_0004
  5048                                  	; preparing a tail-call
  5049                                  	; preparing a non-tail-call
  5050 00003526 488B4520                	mov rax, PARAM(0)	; param s
  5051 0000352A 50                      	push rax
  5052 0000352B 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  5053 00003533 803805                  	cmp byte [rax], T_undefined
  5054 00003536 0F8459330000            	je L_error_fvar_undefined
  5055 0000353C 50                      	push rax
  5056 0000353D 6A02                    	push 2	; arg count
  5057 0000353F 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  5058 00003547 803805                  	cmp byte [rax], T_undefined
  5059 0000354A 0F8445330000            	je L_error_fvar_undefined
  5060 00003550 803804                  	cmp byte [rax], T_closure
  5061 00003553 0F85C0330000            	jne L_error_non_closure
  5062 00003559 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5063 0000355C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5064 0000355F 50                      	push rax
  5065 00003560 6A01                    	push 1	; arg count
  5066 00003562 488B4510                	mov rax, ENV
  5067 00003566 488B00                  	mov rax, qword [rax + 8 * 0]
  5068 00003569 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5069 0000356C 488B00                  	mov rax, qword [rax]
  5070 0000356F 803804                  	cmp byte [rax], T_closure
  5071 00003572 0F85A1330000            	jne L_error_non_closure
  5072 00003578 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5073 0000357B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5074 0000357E FF7500                  	push qword[rbp]
  5075 00003581 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5076 00003586 48895D10                	mov qword[rbp + 8*2],rbx
  5077 0000358A 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5078 00003592 BF00000000              	mov rdi,0
  5079 00003597 EB00                    	jmp .L_tc_recycle_frame_loop_0028
  5080                                  .L_tc_recycle_frame_loop_0028:
  5081 00003599 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5082 0000359D 740F                    	je .L_tc_recycle_frame_done_0028
  5083 0000359F 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5084 000035A4 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5085 000035A9 48FFC7                  	inc rdi
  5086 000035AC EBEB                    	jmp .L_tc_recycle_frame_loop_0028
  5087                                  .L_tc_recycle_frame_done_0028:
  5088 000035AE 4889EC                  	mov rsp, rbp	; point to last argument
  5089 000035B1 5D                      	pop rbp
  5090 000035B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5091                                  .L_or_end_0004:
  5092 000035B5 EB0A                    	jmp .L_if_end_0007
  5093                                  .L_if_else_0007:
  5094 000035B7 48B8-                   	mov rax, L_constants + 2
  5094 000035B9 [0200000000000000] 
  5095                                  .L_if_end_0007:
  5096 000035C1 C9                      	leave
  5097 000035C2 C21800                  	ret AND_KILL_FRAME(1)
  5098                                  .L_lambda_simple_end_0027:	; new closure is in rax
  5099 000035C5 50                      	push rax
  5100 000035C6 488B4520                	mov rax, PARAM(0)	; param loop
  5101 000035CA 8F00                    	pop qword [rax]
  5102 000035CC 48B8-                   	mov rax, sob_void
  5102 000035CE [0000000000000000] 
  5103                                  
  5104                                  	; preparing a non-tail-call
  5105 000035D6 488B4510                	mov rax, ENV
  5106 000035DA 488B00                  	mov rax, qword [rax + 8 * 0]
  5107 000035DD 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5108 000035E1 50                      	push rax
  5109 000035E2 6A01                    	push 1	; arg count
  5110 000035E4 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  5111 000035EC 803805                  	cmp byte [rax], T_undefined
  5112 000035EF 0F84A0320000            	je L_error_fvar_undefined
  5113 000035F5 803804                  	cmp byte [rax], T_closure
  5114 000035F8 0F851B330000            	jne L_error_non_closure
  5115 000035FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5116 00003601 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5117 00003604 483D[02000000]          	cmp rax, sob_boolean_false
  5118 0000360A 745D                    	je .L_if_else_0008
  5119                                  	; preparing a tail-call
  5120 0000360C 488B4510                	mov rax, ENV
  5121 00003610 488B00                  	mov rax, qword [rax + 8 * 0]
  5122 00003613 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5123 00003617 50                      	push rax
  5124 00003618 6A01                    	push 1	; arg count
  5125 0000361A 488B4520                	mov rax, PARAM(0)	; param loop
  5126 0000361E 488B00                  	mov rax, qword [rax]
  5127 00003621 803804                  	cmp byte [rax], T_closure
  5128 00003624 0F85EF320000            	jne L_error_non_closure
  5129 0000362A FF7001                  	push SOB_CLOSURE_ENV(rax)
  5130 0000362D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5131 00003630 FF7500                  	push qword[rbp]
  5132 00003633 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5133 00003638 48895D10                	mov qword[rbp + 8*2],rbx
  5134 0000363C 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5135 00003644 BF00000000              	mov rdi,0
  5136 00003649 EB00                    	jmp .L_tc_recycle_frame_loop_0029
  5137                                  .L_tc_recycle_frame_loop_0029:
  5138 0000364B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5139 0000364F 740F                    	je .L_tc_recycle_frame_done_0029
  5140 00003651 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5141 00003656 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5142 0000365B 48FFC7                  	inc rdi
  5143 0000365E EBEB                    	jmp .L_tc_recycle_frame_loop_0029
  5144                                  .L_tc_recycle_frame_done_0029:
  5145 00003660 4889EC                  	mov rsp, rbp	; point to last argument
  5146 00003663 5D                      	pop rbp
  5147 00003664 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5148 00003667 EB0A                    	jmp .L_if_end_0008
  5149                                  .L_if_else_0008:
  5150 00003669 48B8-                   	mov rax, L_constants + 2
  5150 0000366B [0200000000000000] 
  5151                                  .L_if_end_0008:
  5152 00003673 C9                      	leave
  5153 00003674 C21800                  	ret AND_KILL_FRAME(1)
  5154                                  .L_lambda_simple_end_0026:	; new closure is in rax
  5155 00003677 803804                  	cmp byte [rax], T_closure
  5156 0000367A 0F8599320000            	jne L_error_non_closure
  5157 00003680 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5158 00003683 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5159 00003686 FF7500                  	push qword[rbp]
  5160 00003689 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5161 0000368E 48895D10                	mov qword[rbp + 8*2],rbx
  5162 00003692 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5163 0000369A BF00000000              	mov rdi,0
  5164 0000369F EB00                    	jmp .L_tc_recycle_frame_loop_002a
  5165                                  .L_tc_recycle_frame_loop_002a:
  5166 000036A1 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5167 000036A5 740F                    	je .L_tc_recycle_frame_done_002a
  5168 000036A7 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5169 000036AC 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5170 000036B1 48FFC7                  	inc rdi
  5171 000036B4 EBEB                    	jmp .L_tc_recycle_frame_loop_002a
  5172                                  .L_tc_recycle_frame_done_002a:
  5173 000036B6 4889EC                  	mov rsp, rbp	; point to last argument
  5174 000036B9 5D                      	pop rbp
  5175 000036BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5176 000036BD C9                      	leave
  5177 000036BE C22000                  	ret AND_KILL_FRAME(2)
  5178 000036C1 E943040000              	jmp .L_lambda_opt_end_0004	; new closure is in rax
  5179                                  .L_lambda_opt_arity_check_more_0004:
  5180 000036C6 488B442410              	mov rax, qword[rsp + 2 * 8]
  5181 000036CB 4889C7                  	mov rdi, rax
  5182 000036CE 49B9-                   	mov r9, sob_nil
  5182 000036D0 [0100000000000000] 
  5183 000036D8 4C8B442410              	mov r8, qword[rsp+2*8]
  5184                                  .L_lambda_opt_stack_shrink_loop_0004:
  5185 000036DD 4983F801                	cmp r8, 1
  5186 000036E1 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  5187 000036E3 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  5188 000036E8 BF11000000              	mov rdi, 1+8+8	;for pair
  5189 000036ED E8D0320000              	call malloc	 ;to create the pair in the stack
  5190 000036F2 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5191 000036F5 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  5192 000036F9 4C894809                 	mov qword[rax+1+8],r9
  5193 000036FD 4989C1                  	mov r9 , rax	 ; for the recursion 
  5194 00003700 49FFC8                  	dec r8
  5195 00003703 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  5196                                  .L_lambda_opt_stack_shrink_loop_exit_0004:
  5197 00003705 488B442410              	mov rax, qword[rsp + 2 * 8]
  5198 0000370A BF02000000              	mov rdi, 2
  5199 0000370F 4829F8                  	sub rax, rdi
  5200 00003712 4889C7                  	mov rdi, rax
  5201 00003715 486BC008                	imul rax,8
  5202 00003719 4801C4                  	add rsp, rax
  5203 0000371C 4889E0                  	mov rax, rsp
  5204 0000371F 4989F8                  	mov r8, rdi
  5205 00003722 4D6BC008                	imul r8, 8
  5206 00003726 4C29C0                  	sub rax, r8
  5207 00003729 4989C2                  	mov r10, rax	; holds the original ret in the stack
  5208 0000372C 4983C218                	add r10, 8*3
  5209 00003730 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  5210 00003734 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  5211 00003737 4D6BC008                	imul r8,8
  5212 0000373B 4C01C0                  	add rax, r8
  5213 0000373E 4C8908                  	mov qword[rax] ,r9
  5214 00003741 4D89D0                   	mov r8, r10
  5215 00003744 4983C000                	add r8, 8 * 0
  5216 00003748 4D8B08                  	mov r9,qword[r8]
  5217 0000374B 4D890CF8                	mov qword [r8 + rdi * 8], r9
  5218 0000374F 4983EA18                	sub r10, 8*3
  5219 00003753 48C744241002000000      	mov qword [rsp+2*8], 2
  5220 0000375C 498B4208                	mov rax, qword[r10 + 1 * 8]
  5221 00003760 4889442408              	mov qword[rsp + 1*8] ,rax
  5222 00003765 498B02                  	mov rax, qword[r10]
  5223 00003768 48890424                	mov qword[rsp], rax
  5224 0000376C C8000000                	enter 0, 0
  5225                                  	; preparing a tail-call
  5226 00003770 48B8-                   	mov rax, L_constants + 1993
  5226 00003772 [C907000000000000] 
  5227 0000377A 50                      	push rax
  5228 0000377B 6A01                    	push 1	; arg count
  5229 0000377D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5230 00003782 E83B320000              	call malloc
  5231 00003787 50                      	push rax
  5232 00003788 BF10000000              	mov rdi, 8 * 2	; new rib
  5233 0000378D E830320000              	call malloc
  5234 00003792 50                      	push rax
  5235 00003793 BF10000000              	mov rdi, 8 * 2	; extended env
  5236 00003798 E825320000              	call malloc
  5237 0000379D 488B7D10                	mov rdi, ENV
  5238 000037A1 BE00000000              	mov rsi, 0
  5239 000037A6 BA01000000              	mov rdx, 1
  5240                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  5241 000037AB 4883FE01                	cmp rsi, 1
  5242 000037AF 7410                    	je .L_lambda_simple_env_end_0024
  5243 000037B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5244 000037B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5245 000037B9 48FFC6                  	inc rsi
  5246 000037BC 48FFC2                  	inc rdx
  5247 000037BF EBEA                    	jmp .L_lambda_simple_env_loop_0024
  5248                                  .L_lambda_simple_env_end_0024:
  5249 000037C1 5B                      	pop rbx
  5250 000037C2 BE00000000              	mov rsi, 0
  5251                                  .L_lambda_simple_params_loop_0024:	; copy params
  5252 000037C7 4883FE02                	cmp rsi, 2
  5253 000037CB 740E                    	je .L_lambda_simple_params_end_0024
  5254 000037CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5255 000037D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5256 000037D6 48FFC6                  	inc rsi
  5257 000037D9 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  5258                                  .L_lambda_simple_params_end_0024:
  5259 000037DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5260 000037DE 4889C3                  	mov rbx, rax
  5261 000037E1 58                      	pop rax
  5262 000037E2 C60004                  	mov byte [rax], T_closure
  5263 000037E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5264 000037E9 48C74009[F6370000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  5265 000037F1 E9C9020000              	jmp .L_lambda_simple_end_0024
  5266                                  .L_lambda_simple_code_0024:	; lambda-simple body
  5267 000037F6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5268 000037FC 740B                    	je .L_lambda_simple_arity_check_ok_0024
  5269 000037FE FF742410                	push qword [rsp + 8 * 2]
  5270 00003802 6A01                    	push 1
  5271 00003804 E972310000              	jmp L_error_incorrect_arity_simple
  5272                                  .L_lambda_simple_arity_check_ok_0024:
  5273 00003809 C8000000                	enter 0, 0
  5274 0000380D 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  5275 00003811 488903                  	mov qword [rbx], rax
  5276                                  
  5277 00003814 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5278 00003819 E8A4310000              	call malloc
  5279 0000381E 50                      	push rax
  5280 0000381F BF08000000              	mov rdi, 8 * 1	; new rib
  5281 00003824 E899310000              	call malloc
  5282 00003829 50                      	push rax
  5283 0000382A BF18000000              	mov rdi, 8 * 3	; extended env
  5284 0000382F E88E310000              	call malloc
  5285 00003834 488B7D10                	mov rdi, ENV
  5286 00003838 BE00000000              	mov rsi, 0
  5287 0000383D BA01000000              	mov rdx, 1
  5288                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  5289 00003842 4883FE02                	cmp rsi, 2
  5290 00003846 7410                    	je .L_lambda_simple_env_end_0025
  5291 00003848 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5292 0000384C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5293 00003850 48FFC6                  	inc rsi
  5294 00003853 48FFC2                  	inc rdx
  5295 00003856 EBEA                    	jmp .L_lambda_simple_env_loop_0025
  5296                                  .L_lambda_simple_env_end_0025:
  5297 00003858 5B                      	pop rbx
  5298 00003859 BE00000000              	mov rsi, 0
  5299                                  .L_lambda_simple_params_loop_0025:	; copy params
  5300 0000385E 4883FE01                	cmp rsi, 1
  5301 00003862 740E                    	je .L_lambda_simple_params_end_0025
  5302 00003864 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5303 00003869 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5304 0000386D 48FFC6                  	inc rsi
  5305 00003870 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  5306                                  .L_lambda_simple_params_end_0025:
  5307 00003872 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5308 00003875 4889C3                  	mov rbx, rax
  5309 00003878 58                      	pop rax
  5310 00003879 C60004                  	mov byte [rax], T_closure
  5311 0000387C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5312 00003880 48C74009[8D380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  5313 00003888 E980010000              	jmp .L_lambda_simple_end_0025
  5314                                  .L_lambda_simple_code_0025:	; lambda-simple body
  5315 0000388D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5316 00003893 740B                    	je .L_lambda_simple_arity_check_ok_0025
  5317 00003895 FF742410                	push qword [rsp + 8 * 2]
  5318 00003899 6A01                    	push 1
  5319 0000389B E9DB300000              	jmp L_error_incorrect_arity_simple
  5320                                  .L_lambda_simple_arity_check_ok_0025:
  5321 000038A0 C8000000                	enter 0, 0
  5322                                  	; preparing a non-tail-call
  5323                                  	; preparing a non-tail-call
  5324 000038A4 488B4520                	mov rax, PARAM(0)	; param s
  5325 000038A8 50                      	push rax
  5326 000038A9 6A01                    	push 1	; arg count
  5327 000038AB 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  5328 000038B3 803805                  	cmp byte [rax], T_undefined
  5329 000038B6 0F84D92F0000            	je L_error_fvar_undefined
  5330 000038BC 803804                  	cmp byte [rax], T_closure
  5331 000038BF 0F8554300000            	jne L_error_non_closure
  5332 000038C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5333 000038C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5334 000038CB 50                      	push rax
  5335 000038CC 6A01                    	push 1	; arg count
  5336 000038CE 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  5337 000038D6 803805                  	cmp byte [rax], T_undefined
  5338 000038D9 0F84B62F0000            	je L_error_fvar_undefined
  5339 000038DF 803804                  	cmp byte [rax], T_closure
  5340 000038E2 0F8531300000            	jne L_error_non_closure
  5341 000038E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5342 000038EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5343 000038EE 483D[02000000]          	cmp rax, sob_boolean_false
  5344 000038F4 0F8405010000            	je .L_if_else_0005
  5345                                  	; preparing a non-tail-call
  5346                                  	; preparing a non-tail-call
  5347 000038FA 488B4520                	mov rax, PARAM(0)	; param s
  5348 000038FE 50                      	push rax
  5349 000038FF 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  5350 00003907 803805                  	cmp byte [rax], T_undefined
  5351 0000390A 0F84852F0000            	je L_error_fvar_undefined
  5352 00003910 50                      	push rax
  5353 00003911 6A02                    	push 2	; arg count
  5354 00003913 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  5355 0000391B 803805                  	cmp byte [rax], T_undefined
  5356 0000391E 0F84712F0000            	je L_error_fvar_undefined
  5357 00003924 803804                  	cmp byte [rax], T_closure
  5358 00003927 0F85EC2F0000            	jne L_error_non_closure
  5359 0000392D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5360 00003930 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5361 00003933 50                      	push rax
  5362 00003934 488B4510                	mov rax, ENV
  5363 00003938 488B4008                	mov rax, qword [rax + 8 * 1]
  5364 0000393C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5365 0000393F 50                      	push rax
  5366 00003940 6A02                    	push 2	; arg count
  5367 00003942 488B0425[4C090000]      	mov rax, qword [free_var_9]	; free var apply
  5368 0000394A 803805                  	cmp byte [rax], T_undefined
  5369 0000394D 0F84422F0000            	je L_error_fvar_undefined
  5370 00003953 803804                  	cmp byte [rax], T_closure
  5371 00003956 0F85BD2F0000            	jne L_error_non_closure
  5372 0000395C FF7001                  	push SOB_CLOSURE_ENV(rax)
  5373 0000395F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5374 00003962 483D[02000000]          	cmp rax, sob_boolean_false
  5375 00003968 0F858F000000            	jne .L_or_end_0003
  5376                                  	; preparing a tail-call
  5377                                  	; preparing a non-tail-call
  5378 0000396E 488B4520                	mov rax, PARAM(0)	; param s
  5379 00003972 50                      	push rax
  5380 00003973 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  5381 0000397B 803805                  	cmp byte [rax], T_undefined
  5382 0000397E 0F84112F0000            	je L_error_fvar_undefined
  5383 00003984 50                      	push rax
  5384 00003985 6A02                    	push 2	; arg count
  5385 00003987 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  5386 0000398F 803805                  	cmp byte [rax], T_undefined
  5387 00003992 0F84FD2E0000            	je L_error_fvar_undefined
  5388 00003998 803804                  	cmp byte [rax], T_closure
  5389 0000399B 0F85782F0000            	jne L_error_non_closure
  5390 000039A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5391 000039A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5392 000039A7 50                      	push rax
  5393 000039A8 6A01                    	push 1	; arg count
  5394 000039AA 488B4510                	mov rax, ENV
  5395 000039AE 488B00                  	mov rax, qword [rax + 8 * 0]
  5396 000039B1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5397 000039B4 488B00                  	mov rax, qword [rax]
  5398 000039B7 803804                  	cmp byte [rax], T_closure
  5399 000039BA 0F85592F0000            	jne L_error_non_closure
  5400 000039C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5401 000039C3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5402 000039C6 FF7500                  	push qword[rbp]
  5403 000039C9 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5404 000039CE 48895D10                	mov qword[rbp + 8*2],rbx
  5405 000039D2 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5406 000039DA BF00000000              	mov rdi,0
  5407 000039DF EB00                    	jmp .L_tc_recycle_frame_loop_0025
  5408                                  .L_tc_recycle_frame_loop_0025:
  5409 000039E1 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5410 000039E5 740F                    	je .L_tc_recycle_frame_done_0025
  5411 000039E7 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5412 000039EC 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5413 000039F1 48FFC7                  	inc rdi
  5414 000039F4 EBEB                    	jmp .L_tc_recycle_frame_loop_0025
  5415                                  .L_tc_recycle_frame_done_0025:
  5416 000039F6 4889EC                  	mov rsp, rbp	; point to last argument
  5417 000039F9 5D                      	pop rbp
  5418 000039FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5419                                  .L_or_end_0003:
  5420 000039FD EB0A                    	jmp .L_if_end_0005
  5421                                  .L_if_else_0005:
  5422 000039FF 48B8-                   	mov rax, L_constants + 2
  5422 00003A01 [0200000000000000] 
  5423                                  .L_if_end_0005:
  5424 00003A09 C9                      	leave
  5425 00003A0A C21800                  	ret AND_KILL_FRAME(1)
  5426                                  .L_lambda_simple_end_0025:	; new closure is in rax
  5427 00003A0D 50                      	push rax
  5428 00003A0E 488B4520                	mov rax, PARAM(0)	; param loop
  5429 00003A12 8F00                    	pop qword [rax]
  5430 00003A14 48B8-                   	mov rax, sob_void
  5430 00003A16 [0000000000000000] 
  5431                                  
  5432                                  	; preparing a non-tail-call
  5433 00003A1E 488B4510                	mov rax, ENV
  5434 00003A22 488B00                  	mov rax, qword [rax + 8 * 0]
  5435 00003A25 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5436 00003A29 50                      	push rax
  5437 00003A2A 6A01                    	push 1	; arg count
  5438 00003A2C 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  5439 00003A34 803805                  	cmp byte [rax], T_undefined
  5440 00003A37 0F84582E0000            	je L_error_fvar_undefined
  5441 00003A3D 803804                  	cmp byte [rax], T_closure
  5442 00003A40 0F85D32E0000            	jne L_error_non_closure
  5443 00003A46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5444 00003A49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5445 00003A4C 483D[02000000]          	cmp rax, sob_boolean_false
  5446 00003A52 745D                    	je .L_if_else_0006
  5447                                  	; preparing a tail-call
  5448 00003A54 488B4510                	mov rax, ENV
  5449 00003A58 488B00                  	mov rax, qword [rax + 8 * 0]
  5450 00003A5B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5451 00003A5F 50                      	push rax
  5452 00003A60 6A01                    	push 1	; arg count
  5453 00003A62 488B4520                	mov rax, PARAM(0)	; param loop
  5454 00003A66 488B00                  	mov rax, qword [rax]
  5455 00003A69 803804                  	cmp byte [rax], T_closure
  5456 00003A6C 0F85A72E0000            	jne L_error_non_closure
  5457 00003A72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5458 00003A75 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5459 00003A78 FF7500                  	push qword[rbp]
  5460 00003A7B 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5461 00003A80 48895D10                	mov qword[rbp + 8*2],rbx
  5462 00003A84 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5463 00003A8C BF00000000              	mov rdi,0
  5464 00003A91 EB00                    	jmp .L_tc_recycle_frame_loop_0026
  5465                                  .L_tc_recycle_frame_loop_0026:
  5466 00003A93 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5467 00003A97 740F                    	je .L_tc_recycle_frame_done_0026
  5468 00003A99 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5469 00003A9E 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5470 00003AA3 48FFC7                  	inc rdi
  5471 00003AA6 EBEB                    	jmp .L_tc_recycle_frame_loop_0026
  5472                                  .L_tc_recycle_frame_done_0026:
  5473 00003AA8 4889EC                  	mov rsp, rbp	; point to last argument
  5474 00003AAB 5D                      	pop rbp
  5475 00003AAC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5476 00003AAF EB0A                    	jmp .L_if_end_0006
  5477                                  .L_if_else_0006:
  5478 00003AB1 48B8-                   	mov rax, L_constants + 2
  5478 00003AB3 [0200000000000000] 
  5479                                  .L_if_end_0006:
  5480 00003ABB C9                      	leave
  5481 00003ABC C21800                  	ret AND_KILL_FRAME(1)
  5482                                  .L_lambda_simple_end_0024:	; new closure is in rax
  5483 00003ABF 803804                  	cmp byte [rax], T_closure
  5484 00003AC2 0F85512E0000            	jne L_error_non_closure
  5485 00003AC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5486 00003ACB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5487 00003ACE FF7500                  	push qword[rbp]
  5488 00003AD1 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5489 00003AD6 48895D10                	mov qword[rbp + 8*2],rbx
  5490 00003ADA 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5491 00003AE2 BF00000000              	mov rdi,0
  5492 00003AE7 EB00                    	jmp .L_tc_recycle_frame_loop_0027
  5493                                  .L_tc_recycle_frame_loop_0027:
  5494 00003AE9 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5495 00003AED 740F                    	je .L_tc_recycle_frame_done_0027
  5496 00003AEF 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5497 00003AF4 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5498 00003AF9 48FFC7                  	inc rdi
  5499 00003AFC EBEB                    	jmp .L_tc_recycle_frame_loop_0027
  5500                                  .L_tc_recycle_frame_done_0027:
  5501 00003AFE 4889EC                  	mov rsp, rbp	; point to last argument
  5502 00003B01 5D                      	pop rbp
  5503 00003B02 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5504 00003B05 C9                      	leave
  5505 00003B06 C22000                  	ret AND_KILL_FRAME(2)
  5506                                  .L_lambda_opt_end_0004:	; new closure is in rax
  5507 00003B09 48890425[380C0000]      	mov qword [free_var_53], rax
  5508 00003B11 48B8-                   	mov rax, sob_void
  5508 00003B13 [0000000000000000] 
  5509                                  
  5510 00003B1B 4889C7                  	mov rdi, rax
  5511 00003B1E E8F4300000              	call print_sexpr_if_not_void
  5512 00003B23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5513 00003B28 E8952E0000              	call malloc
  5514 00003B2D 50                      	push rax
  5515 00003B2E BF00000000              	mov rdi, 8 * 0	; new rib
  5516 00003B33 E88A2E0000              	call malloc
  5517 00003B38 50                      	push rax
  5518 00003B39 BF08000000              	mov rdi, 8 * 1	; extended env
  5519 00003B3E E87F2E0000              	call malloc
  5520 00003B43 488B7D10                	mov rdi, ENV
  5521 00003B47 BE00000000              	mov rsi, 0
  5522 00003B4C BA01000000              	mov rdx, 1
  5523                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  5524 00003B51 4883FE00                	cmp rsi, 0
  5525 00003B55 7410                    	je .L_lambda_opt_env_end_0005
  5526 00003B57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5527 00003B5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5528 00003B5F 48FFC6                  	inc rsi
  5529 00003B62 48FFC2                  	inc rdx
  5530 00003B65 EBEA                    	jmp .L_lambda_opt_env_loop_0005
  5531                                  .L_lambda_opt_env_end_0005:
  5532 00003B67 5B                      	pop rbx
  5533 00003B68 BE00000000              	mov rsi, 0
  5534                                  .L_lambda_opt_params_loop_0005:	; copy params
  5535 00003B6D 4883FE00                	cmp rsi, 0
  5536 00003B71 740E                    	je .L_lambda_opt_params_end_0005
  5537 00003B73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5538 00003B78 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5539 00003B7C 48FFC6                  	inc rsi
  5540 00003B7F EBEC                    	jmp .L_lambda_opt_params_loop_0005
  5541                                  .L_lambda_opt_params_end_0005:
  5542 00003B81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5543 00003B84 4889C3                  	mov rbx, rax
  5544 00003B87 58                      	pop rax
  5545 00003B88 C60004                  	mov byte [rax], T_closure
  5546 00003B8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5547 00003B8F 48C74009[9C3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  5548 00003B97 E9AC080000              	jmp .L_lambda_opt_end_0005
  5549                                  .L_lambda_opt_code_0005:	; lambda-opt body
  5550 00003B9C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5551 00003BA2 7411                    	je .L_lambda_opt_arity_check_exact_0005
  5552 00003BA4 0F8F21040000            	jg .L_lambda_opt_arity_check_more_0005
  5553 00003BAA FF742410                	push qword [rsp + 8 * 2]
  5554 00003BAE 6A01                    	push 1
  5555 00003BB0 E9DA2D0000              	jmp L_error_incorrect_arity_opt
  5556                                  .L_lambda_opt_arity_check_exact_0005:
  5557 00003BB5 4883EC08                	sub rsp, 8
  5558 00003BB9 488B442408              	mov rax, qword[rsp + 8 *1]
  5559 00003BBE 48890424                	mov qword[rsp], rax  
  5560 00003BC2 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5561 00003BC7 4889442408              	mov qword[rsp + 8 * 1], rax
  5562 00003BCC B802000000              	mov rax, 2
  5563 00003BD1 4889442410              	mov qword[rsp + 8 *2], rax
  5564 00003BD6 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5565 00003BDB 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5566 00003BE0 48B8-                   	mov rax, sob_nil
  5566 00003BE2 [0100000000000000] 
  5567 00003BEA 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5568 00003BEF C8000000                	enter 0, 0
  5569                                  	; preparing a tail-call
  5570 00003BF3 48B8-                   	mov rax, L_constants + 1993
  5570 00003BF5 [C907000000000000] 
  5571 00003BFD 50                      	push rax
  5572 00003BFE 6A01                    	push 1	; arg count
  5573 00003C00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5574 00003C05 E8B82D0000              	call malloc
  5575 00003C0A 50                      	push rax
  5576 00003C0B BF10000000              	mov rdi, 8 * 2	; new rib
  5577 00003C10 E8AD2D0000              	call malloc
  5578 00003C15 50                      	push rax
  5579 00003C16 BF10000000              	mov rdi, 8 * 2	; extended env
  5580 00003C1B E8A22D0000              	call malloc
  5581 00003C20 488B7D10                	mov rdi, ENV
  5582 00003C24 BE00000000              	mov rsi, 0
  5583 00003C29 BA01000000              	mov rdx, 1
  5584                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  5585 00003C2E 4883FE01                	cmp rsi, 1
  5586 00003C32 7410                    	je .L_lambda_simple_env_end_002a
  5587 00003C34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5588 00003C38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5589 00003C3C 48FFC6                  	inc rsi
  5590 00003C3F 48FFC2                  	inc rdx
  5591 00003C42 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  5592                                  .L_lambda_simple_env_end_002a:
  5593 00003C44 5B                      	pop rbx
  5594 00003C45 BE00000000              	mov rsi, 0
  5595                                  .L_lambda_simple_params_loop_002a:	; copy params
  5596 00003C4A 4883FE02                	cmp rsi, 2
  5597 00003C4E 740E                    	je .L_lambda_simple_params_end_002a
  5598 00003C50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5599 00003C55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5600 00003C59 48FFC6                  	inc rsi
  5601 00003C5C EBEC                    	jmp .L_lambda_simple_params_loop_002a
  5602                                  .L_lambda_simple_params_end_002a:
  5603 00003C5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5604 00003C61 4889C3                  	mov rbx, rax
  5605 00003C64 58                      	pop rax
  5606 00003C65 C60004                  	mov byte [rax], T_closure
  5607 00003C68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5608 00003C6C 48C74009[793C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  5609 00003C74 E903030000              	jmp .L_lambda_simple_end_002a
  5610                                  .L_lambda_simple_code_002a:	; lambda-simple body
  5611 00003C79 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5612 00003C7F 740B                    	je .L_lambda_simple_arity_check_ok_002a
  5613 00003C81 FF742410                	push qword [rsp + 8 * 2]
  5614 00003C85 6A01                    	push 1
  5615 00003C87 E9EF2C0000              	jmp L_error_incorrect_arity_simple
  5616                                  .L_lambda_simple_arity_check_ok_002a:
  5617 00003C8C C8000000                	enter 0, 0
  5618 00003C90 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  5619 00003C94 488903                  	mov qword [rbx], rax
  5620                                  
  5621 00003C97 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5622 00003C9C E8212D0000              	call malloc
  5623 00003CA1 50                      	push rax
  5624 00003CA2 BF08000000              	mov rdi, 8 * 1	; new rib
  5625 00003CA7 E8162D0000              	call malloc
  5626 00003CAC 50                      	push rax
  5627 00003CAD BF18000000              	mov rdi, 8 * 3	; extended env
  5628 00003CB2 E80B2D0000              	call malloc
  5629 00003CB7 488B7D10                	mov rdi, ENV
  5630 00003CBB BE00000000              	mov rsi, 0
  5631 00003CC0 BA01000000              	mov rdx, 1
  5632                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  5633 00003CC5 4883FE02                	cmp rsi, 2
  5634 00003CC9 7410                    	je .L_lambda_simple_env_end_002b
  5635 00003CCB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5636 00003CCF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5637 00003CD3 48FFC6                  	inc rsi
  5638 00003CD6 48FFC2                  	inc rdx
  5639 00003CD9 EBEA                    	jmp .L_lambda_simple_env_loop_002b
  5640                                  .L_lambda_simple_env_end_002b:
  5641 00003CDB 5B                      	pop rbx
  5642 00003CDC BE00000000              	mov rsi, 0
  5643                                  .L_lambda_simple_params_loop_002b:	; copy params
  5644 00003CE1 4883FE01                	cmp rsi, 1
  5645 00003CE5 740E                    	je .L_lambda_simple_params_end_002b
  5646 00003CE7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5647 00003CEC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5648 00003CF0 48FFC6                  	inc rsi
  5649 00003CF3 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  5650                                  .L_lambda_simple_params_end_002b:
  5651 00003CF5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5652 00003CF8 4889C3                  	mov rbx, rax
  5653 00003CFB 58                      	pop rax
  5654 00003CFC C60004                  	mov byte [rax], T_closure
  5655 00003CFF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5656 00003D03 48C74009[103D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  5657 00003D0B E980010000              	jmp .L_lambda_simple_end_002b
  5658                                  .L_lambda_simple_code_002b:	; lambda-simple body
  5659 00003D10 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5660 00003D16 740B                    	je .L_lambda_simple_arity_check_ok_002b
  5661 00003D18 FF742410                	push qword [rsp + 8 * 2]
  5662 00003D1C 6A01                    	push 1
  5663 00003D1E E9582C0000              	jmp L_error_incorrect_arity_simple
  5664                                  .L_lambda_simple_arity_check_ok_002b:
  5665 00003D23 C8000000                	enter 0, 0
  5666                                  	; preparing a non-tail-call
  5667                                  	; preparing a non-tail-call
  5668 00003D27 488B4520                	mov rax, PARAM(0)	; param s
  5669 00003D2B 50                      	push rax
  5670 00003D2C 6A01                    	push 1	; arg count
  5671 00003D2E 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  5672 00003D36 803805                  	cmp byte [rax], T_undefined
  5673 00003D39 0F84562B0000            	je L_error_fvar_undefined
  5674 00003D3F 803804                  	cmp byte [rax], T_closure
  5675 00003D42 0F85D12B0000            	jne L_error_non_closure
  5676 00003D48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5677 00003D4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5678 00003D4E 50                      	push rax
  5679 00003D4F 6A01                    	push 1	; arg count
  5680 00003D51 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  5681 00003D59 803805                  	cmp byte [rax], T_undefined
  5682 00003D5C 0F84332B0000            	je L_error_fvar_undefined
  5683 00003D62 803804                  	cmp byte [rax], T_closure
  5684 00003D65 0F85AE2B0000            	jne L_error_non_closure
  5685 00003D6B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5686 00003D6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5687 00003D71 483D[02000000]          	cmp rax, sob_boolean_false
  5688 00003D77 0F850F010000            	jne .L_or_end_0007
  5689                                  	; preparing a non-tail-call
  5690                                  	; preparing a non-tail-call
  5691 00003D7D 488B4520                	mov rax, PARAM(0)	; param s
  5692 00003D81 50                      	push rax
  5693 00003D82 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  5694 00003D8A 803805                  	cmp byte [rax], T_undefined
  5695 00003D8D 0F84022B0000            	je L_error_fvar_undefined
  5696 00003D93 50                      	push rax
  5697 00003D94 6A02                    	push 2	; arg count
  5698 00003D96 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  5699 00003D9E 803805                  	cmp byte [rax], T_undefined
  5700 00003DA1 0F84EE2A0000            	je L_error_fvar_undefined
  5701 00003DA7 803804                  	cmp byte [rax], T_closure
  5702 00003DAA 0F85692B0000            	jne L_error_non_closure
  5703 00003DB0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5704 00003DB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5705 00003DB6 50                      	push rax
  5706 00003DB7 488B4510                	mov rax, ENV
  5707 00003DBB 488B4008                	mov rax, qword [rax + 8 * 1]
  5708 00003DBF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  5709 00003DC2 50                      	push rax
  5710 00003DC3 6A02                    	push 2	; arg count
  5711 00003DC5 488B0425[4C090000]      	mov rax, qword [free_var_9]	; free var apply
  5712 00003DCD 803805                  	cmp byte [rax], T_undefined
  5713 00003DD0 0F84BF2A0000            	je L_error_fvar_undefined
  5714 00003DD6 803804                  	cmp byte [rax], T_closure
  5715 00003DD9 0F853A2B0000            	jne L_error_non_closure
  5716 00003DDF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5717 00003DE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5718 00003DE5 483D[02000000]          	cmp rax, sob_boolean_false
  5719 00003DEB 0F8491000000            	je .L_if_else_000b
  5720                                  	; preparing a tail-call
  5721                                  	; preparing a non-tail-call
  5722 00003DF1 488B4520                	mov rax, PARAM(0)	; param s
  5723 00003DF5 50                      	push rax
  5724 00003DF6 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  5725 00003DFE 803805                  	cmp byte [rax], T_undefined
  5726 00003E01 0F848E2A0000            	je L_error_fvar_undefined
  5727 00003E07 50                      	push rax
  5728 00003E08 6A02                    	push 2	; arg count
  5729 00003E0A 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  5730 00003E12 803805                  	cmp byte [rax], T_undefined
  5731 00003E15 0F847A2A0000            	je L_error_fvar_undefined
  5732 00003E1B 803804                  	cmp byte [rax], T_closure
  5733 00003E1E 0F85F52A0000            	jne L_error_non_closure
  5734 00003E24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5735 00003E27 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5736 00003E2A 50                      	push rax
  5737 00003E2B 6A01                    	push 1	; arg count
  5738 00003E2D 488B4510                	mov rax, ENV
  5739 00003E31 488B00                  	mov rax, qword [rax + 8 * 0]
  5740 00003E34 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  5741 00003E37 488B00                  	mov rax, qword [rax]
  5742 00003E3A 803804                  	cmp byte [rax], T_closure
  5743 00003E3D 0F85D62A0000            	jne L_error_non_closure
  5744 00003E43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5745 00003E46 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5746 00003E49 FF7500                  	push qword[rbp]
  5747 00003E4C 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5748 00003E51 48895D10                	mov qword[rbp + 8*2],rbx
  5749 00003E55 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5750 00003E5D BF00000000              	mov rdi,0
  5751 00003E62 EB00                    	jmp .L_tc_recycle_frame_loop_002e
  5752                                  .L_tc_recycle_frame_loop_002e:
  5753 00003E64 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5754 00003E68 740F                    	je .L_tc_recycle_frame_done_002e
  5755 00003E6A 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5756 00003E6F 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5757 00003E74 48FFC7                  	inc rdi
  5758 00003E77 EBEB                    	jmp .L_tc_recycle_frame_loop_002e
  5759                                  .L_tc_recycle_frame_done_002e:
  5760 00003E79 4889EC                  	mov rsp, rbp	; point to last argument
  5761 00003E7C 5D                      	pop rbp
  5762 00003E7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5763 00003E80 EB0A                    	jmp .L_if_end_000b
  5764                                  .L_if_else_000b:
  5765 00003E82 48B8-                   	mov rax, L_constants + 2
  5765 00003E84 [0200000000000000] 
  5766                                  .L_if_end_000b:
  5767                                  .L_or_end_0007:
  5768 00003E8C C9                      	leave
  5769 00003E8D C21800                  	ret AND_KILL_FRAME(1)
  5770                                  .L_lambda_simple_end_002b:	; new closure is in rax
  5771 00003E90 50                      	push rax
  5772 00003E91 488B4520                	mov rax, PARAM(0)	; param loop
  5773 00003E95 8F00                    	pop qword [rax]
  5774 00003E97 48B8-                   	mov rax, sob_void
  5774 00003E99 [0000000000000000] 
  5775                                  
  5776                                  	; preparing a non-tail-call
  5777 00003EA1 488B4510                	mov rax, ENV
  5778 00003EA5 488B00                  	mov rax, qword [rax + 8 * 0]
  5779 00003EA8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5780 00003EAC 50                      	push rax
  5781 00003EAD 6A01                    	push 1	; arg count
  5782 00003EAF 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  5783 00003EB7 803805                  	cmp byte [rax], T_undefined
  5784 00003EBA 0F84D5290000            	je L_error_fvar_undefined
  5785 00003EC0 803804                  	cmp byte [rax], T_closure
  5786 00003EC3 0F85502A0000            	jne L_error_non_closure
  5787 00003EC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5788 00003ECC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5789 00003ECF 483D[02000000]          	cmp rax, sob_boolean_false
  5790 00003ED5 0F859D000000            	jne .L_or_end_0008
  5791                                  	; preparing a non-tail-call
  5792 00003EDB 488B4510                	mov rax, ENV
  5793 00003EDF 488B00                  	mov rax, qword [rax + 8 * 0]
  5794 00003EE2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5795 00003EE6 50                      	push rax
  5796 00003EE7 6A01                    	push 1	; arg count
  5797 00003EE9 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  5798 00003EF1 803805                  	cmp byte [rax], T_undefined
  5799 00003EF4 0F849B290000            	je L_error_fvar_undefined
  5800 00003EFA 803804                  	cmp byte [rax], T_closure
  5801 00003EFD 0F85162A0000            	jne L_error_non_closure
  5802 00003F03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5803 00003F06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5804 00003F09 483D[02000000]          	cmp rax, sob_boolean_false
  5805 00003F0F 745D                    	je .L_if_else_000c
  5806                                  	; preparing a tail-call
  5807 00003F11 488B4510                	mov rax, ENV
  5808 00003F15 488B00                  	mov rax, qword [rax + 8 * 0]
  5809 00003F18 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  5810 00003F1C 50                      	push rax
  5811 00003F1D 6A01                    	push 1	; arg count
  5812 00003F1F 488B4520                	mov rax, PARAM(0)	; param loop
  5813 00003F23 488B00                  	mov rax, qword [rax]
  5814 00003F26 803804                  	cmp byte [rax], T_closure
  5815 00003F29 0F85EA290000            	jne L_error_non_closure
  5816 00003F2F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5817 00003F32 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5818 00003F35 FF7500                  	push qword[rbp]
  5819 00003F38 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5820 00003F3D 48895D10                	mov qword[rbp + 8*2],rbx
  5821 00003F41 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5822 00003F49 BF00000000              	mov rdi,0
  5823 00003F4E EB00                    	jmp .L_tc_recycle_frame_loop_002f
  5824                                  .L_tc_recycle_frame_loop_002f:
  5825 00003F50 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5826 00003F54 740F                    	je .L_tc_recycle_frame_done_002f
  5827 00003F56 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5828 00003F5B 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5829 00003F60 48FFC7                  	inc rdi
  5830 00003F63 EBEB                    	jmp .L_tc_recycle_frame_loop_002f
  5831                                  .L_tc_recycle_frame_done_002f:
  5832 00003F65 4889EC                  	mov rsp, rbp	; point to last argument
  5833 00003F68 5D                      	pop rbp
  5834 00003F69 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5835 00003F6C EB0A                    	jmp .L_if_end_000c
  5836                                  .L_if_else_000c:
  5837 00003F6E 48B8-                   	mov rax, L_constants + 2
  5837 00003F70 [0200000000000000] 
  5838                                  .L_if_end_000c:
  5839                                  .L_or_end_0008:
  5840 00003F78 C9                      	leave
  5841 00003F79 C21800                  	ret AND_KILL_FRAME(1)
  5842                                  .L_lambda_simple_end_002a:	; new closure is in rax
  5843 00003F7C 803804                  	cmp byte [rax], T_closure
  5844 00003F7F 0F8594290000            	jne L_error_non_closure
  5845 00003F85 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5846 00003F88 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5847 00003F8B FF7500                  	push qword[rbp]
  5848 00003F8E 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  5849 00003F93 48895D10                	mov qword[rbp + 8*2],rbx
  5850 00003F97 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  5851 00003F9F BF00000000              	mov rdi,0
  5852 00003FA4 EB00                    	jmp .L_tc_recycle_frame_loop_0030
  5853                                  .L_tc_recycle_frame_loop_0030:
  5854 00003FA6 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  5855 00003FAA 740F                    	je .L_tc_recycle_frame_done_0030
  5856 00003FAC 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  5857 00003FB1 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  5858 00003FB6 48FFC7                  	inc rdi
  5859 00003FB9 EBEB                    	jmp .L_tc_recycle_frame_loop_0030
  5860                                  .L_tc_recycle_frame_done_0030:
  5861 00003FBB 4889EC                  	mov rsp, rbp	; point to last argument
  5862 00003FBE 5D                      	pop rbp
  5863 00003FBF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5864 00003FC2 C9                      	leave
  5865 00003FC3 C22000                  	ret AND_KILL_FRAME(2)
  5866 00003FC6 E97D040000              	jmp .L_lambda_opt_end_0005	; new closure is in rax
  5867                                  .L_lambda_opt_arity_check_more_0005:
  5868 00003FCB 488B442410              	mov rax, qword[rsp + 2 * 8]
  5869 00003FD0 4889C7                  	mov rdi, rax
  5870 00003FD3 49B9-                   	mov r9, sob_nil
  5870 00003FD5 [0100000000000000] 
  5871 00003FDD 4C8B442410              	mov r8, qword[rsp+2*8]
  5872                                  .L_lambda_opt_stack_shrink_loop_0005:
  5873 00003FE2 4983F801                	cmp r8, 1
  5874 00003FE6 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  5875 00003FE8 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  5876 00003FED BF11000000              	mov rdi, 1+8+8	;for pair
  5877 00003FF2 E8CB290000              	call malloc	 ;to create the pair in the stack
  5878 00003FF7 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  5879 00003FFA 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  5880 00003FFE 4C894809                 	mov qword[rax+1+8],r9
  5881 00004002 4989C1                  	mov r9 , rax	 ; for the recursion 
  5882 00004005 49FFC8                  	dec r8
  5883 00004008 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  5884                                  .L_lambda_opt_stack_shrink_loop_exit_0005:
  5885 0000400A 488B442410              	mov rax, qword[rsp + 2 * 8]
  5886 0000400F BF02000000              	mov rdi, 2
  5887 00004014 4829F8                  	sub rax, rdi
  5888 00004017 4889C7                  	mov rdi, rax
  5889 0000401A 486BC008                	imul rax,8
  5890 0000401E 4801C4                  	add rsp, rax
  5891 00004021 4889E0                  	mov rax, rsp
  5892 00004024 4989F8                  	mov r8, rdi
  5893 00004027 4D6BC008                	imul r8, 8
  5894 0000402B 4C29C0                  	sub rax, r8
  5895 0000402E 4989C2                  	mov r10, rax	; holds the original ret in the stack
  5896 00004031 4983C218                	add r10, 8*3
  5897 00004035 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  5898 00004039 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  5899 0000403C 4D6BC008                	imul r8,8
  5900 00004040 4C01C0                  	add rax, r8
  5901 00004043 4C8908                  	mov qword[rax] ,r9
  5902 00004046 4D89D0                   	mov r8, r10
  5903 00004049 4983C000                	add r8, 8 * 0
  5904 0000404D 4D8B08                  	mov r9,qword[r8]
  5905 00004050 4D890CF8                	mov qword [r8 + rdi * 8], r9
  5906 00004054 4983EA18                	sub r10, 8*3
  5907 00004058 48C744241002000000      	mov qword [rsp+2*8], 2
  5908 00004061 498B4208                	mov rax, qword[r10 + 1 * 8]
  5909 00004065 4889442408              	mov qword[rsp + 1*8] ,rax
  5910 0000406A 498B02                  	mov rax, qword[r10]
  5911 0000406D 48890424                	mov qword[rsp], rax
  5912 00004071 C8000000                	enter 0, 0
  5913                                  	; preparing a tail-call
  5914 00004075 48B8-                   	mov rax, L_constants + 1993
  5914 00004077 [C907000000000000] 
  5915 0000407F 50                      	push rax
  5916 00004080 6A01                    	push 1	; arg count
  5917 00004082 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5918 00004087 E836290000              	call malloc
  5919 0000408C 50                      	push rax
  5920 0000408D BF10000000              	mov rdi, 8 * 2	; new rib
  5921 00004092 E82B290000              	call malloc
  5922 00004097 50                      	push rax
  5923 00004098 BF10000000              	mov rdi, 8 * 2	; extended env
  5924 0000409D E820290000              	call malloc
  5925 000040A2 488B7D10                	mov rdi, ENV
  5926 000040A6 BE00000000              	mov rsi, 0
  5927 000040AB BA01000000              	mov rdx, 1
  5928                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  5929 000040B0 4883FE01                	cmp rsi, 1
  5930 000040B4 7410                    	je .L_lambda_simple_env_end_0028
  5931 000040B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5932 000040BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5933 000040BE 48FFC6                  	inc rsi
  5934 000040C1 48FFC2                  	inc rdx
  5935 000040C4 EBEA                    	jmp .L_lambda_simple_env_loop_0028
  5936                                  .L_lambda_simple_env_end_0028:
  5937 000040C6 5B                      	pop rbx
  5938 000040C7 BE00000000              	mov rsi, 0
  5939                                  .L_lambda_simple_params_loop_0028:	; copy params
  5940 000040CC 4883FE02                	cmp rsi, 2
  5941 000040D0 740E                    	je .L_lambda_simple_params_end_0028
  5942 000040D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5943 000040D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5944 000040DB 48FFC6                  	inc rsi
  5945 000040DE EBEC                    	jmp .L_lambda_simple_params_loop_0028
  5946                                  .L_lambda_simple_params_end_0028:
  5947 000040E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5948 000040E3 4889C3                  	mov rbx, rax
  5949 000040E6 58                      	pop rax
  5950 000040E7 C60004                  	mov byte [rax], T_closure
  5951 000040EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5952 000040EE 48C74009[FB400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  5953 000040F6 E903030000              	jmp .L_lambda_simple_end_0028
  5954                                  .L_lambda_simple_code_0028:	; lambda-simple body
  5955 000040FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5956 00004101 740B                    	je .L_lambda_simple_arity_check_ok_0028
  5957 00004103 FF742410                	push qword [rsp + 8 * 2]
  5958 00004107 6A01                    	push 1
  5959 00004109 E96D280000              	jmp L_error_incorrect_arity_simple
  5960                                  .L_lambda_simple_arity_check_ok_0028:
  5961 0000410E C8000000                	enter 0, 0
  5962 00004112 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  5963 00004116 488903                  	mov qword [rbx], rax
  5964                                  
  5965 00004119 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5966 0000411E E89F280000              	call malloc
  5967 00004123 50                      	push rax
  5968 00004124 BF08000000              	mov rdi, 8 * 1	; new rib
  5969 00004129 E894280000              	call malloc
  5970 0000412E 50                      	push rax
  5971 0000412F BF18000000              	mov rdi, 8 * 3	; extended env
  5972 00004134 E889280000              	call malloc
  5973 00004139 488B7D10                	mov rdi, ENV
  5974 0000413D BE00000000              	mov rsi, 0
  5975 00004142 BA01000000              	mov rdx, 1
  5976                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  5977 00004147 4883FE02                	cmp rsi, 2
  5978 0000414B 7410                    	je .L_lambda_simple_env_end_0029
  5979 0000414D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5980 00004151 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5981 00004155 48FFC6                  	inc rsi
  5982 00004158 48FFC2                  	inc rdx
  5983 0000415B EBEA                    	jmp .L_lambda_simple_env_loop_0029
  5984                                  .L_lambda_simple_env_end_0029:
  5985 0000415D 5B                      	pop rbx
  5986 0000415E BE00000000              	mov rsi, 0
  5987                                  .L_lambda_simple_params_loop_0029:	; copy params
  5988 00004163 4883FE01                	cmp rsi, 1
  5989 00004167 740E                    	je .L_lambda_simple_params_end_0029
  5990 00004169 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5991 0000416E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5992 00004172 48FFC6                  	inc rsi
  5993 00004175 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  5994                                  .L_lambda_simple_params_end_0029:
  5995 00004177 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5996 0000417A 4889C3                  	mov rbx, rax
  5997 0000417D 58                      	pop rax
  5998 0000417E C60004                  	mov byte [rax], T_closure
  5999 00004181 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6000 00004185 48C74009[92410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  6001 0000418D E980010000              	jmp .L_lambda_simple_end_0029
  6002                                  .L_lambda_simple_code_0029:	; lambda-simple body
  6003 00004192 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6004 00004198 740B                    	je .L_lambda_simple_arity_check_ok_0029
  6005 0000419A FF742410                	push qword [rsp + 8 * 2]
  6006 0000419E 6A01                    	push 1
  6007 000041A0 E9D6270000              	jmp L_error_incorrect_arity_simple
  6008                                  .L_lambda_simple_arity_check_ok_0029:
  6009 000041A5 C8000000                	enter 0, 0
  6010                                  	; preparing a non-tail-call
  6011                                  	; preparing a non-tail-call
  6012 000041A9 488B4520                	mov rax, PARAM(0)	; param s
  6013 000041AD 50                      	push rax
  6014 000041AE 6A01                    	push 1	; arg count
  6015 000041B0 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  6016 000041B8 803805                  	cmp byte [rax], T_undefined
  6017 000041BB 0F84D4260000            	je L_error_fvar_undefined
  6018 000041C1 803804                  	cmp byte [rax], T_closure
  6019 000041C4 0F854F270000            	jne L_error_non_closure
  6020 000041CA FF7001                  	push SOB_CLOSURE_ENV(rax)
  6021 000041CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6022 000041D0 50                      	push rax
  6023 000041D1 6A01                    	push 1	; arg count
  6024 000041D3 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  6025 000041DB 803805                  	cmp byte [rax], T_undefined
  6026 000041DE 0F84B1260000            	je L_error_fvar_undefined
  6027 000041E4 803804                  	cmp byte [rax], T_closure
  6028 000041E7 0F852C270000            	jne L_error_non_closure
  6029 000041ED FF7001                  	push SOB_CLOSURE_ENV(rax)
  6030 000041F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6031 000041F3 483D[02000000]          	cmp rax, sob_boolean_false
  6032 000041F9 0F850F010000            	jne .L_or_end_0005
  6033                                  	; preparing a non-tail-call
  6034                                  	; preparing a non-tail-call
  6035 000041FF 488B4520                	mov rax, PARAM(0)	; param s
  6036 00004203 50                      	push rax
  6037 00004204 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  6038 0000420C 803805                  	cmp byte [rax], T_undefined
  6039 0000420F 0F8480260000            	je L_error_fvar_undefined
  6040 00004215 50                      	push rax
  6041 00004216 6A02                    	push 2	; arg count
  6042 00004218 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  6043 00004220 803805                  	cmp byte [rax], T_undefined
  6044 00004223 0F846C260000            	je L_error_fvar_undefined
  6045 00004229 803804                  	cmp byte [rax], T_closure
  6046 0000422C 0F85E7260000            	jne L_error_non_closure
  6047 00004232 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6048 00004235 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6049 00004238 50                      	push rax
  6050 00004239 488B4510                	mov rax, ENV
  6051 0000423D 488B4008                	mov rax, qword [rax + 8 * 1]
  6052 00004241 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6053 00004244 50                      	push rax
  6054 00004245 6A02                    	push 2	; arg count
  6055 00004247 488B0425[4C090000]      	mov rax, qword [free_var_9]	; free var apply
  6056 0000424F 803805                  	cmp byte [rax], T_undefined
  6057 00004252 0F843D260000            	je L_error_fvar_undefined
  6058 00004258 803804                  	cmp byte [rax], T_closure
  6059 0000425B 0F85B8260000            	jne L_error_non_closure
  6060 00004261 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6061 00004264 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6062 00004267 483D[02000000]          	cmp rax, sob_boolean_false
  6063 0000426D 0F8491000000            	je .L_if_else_0009
  6064                                  	; preparing a tail-call
  6065                                  	; preparing a non-tail-call
  6066 00004273 488B4520                	mov rax, PARAM(0)	; param s
  6067 00004277 50                      	push rax
  6068 00004278 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  6069 00004280 803805                  	cmp byte [rax], T_undefined
  6070 00004283 0F840C260000            	je L_error_fvar_undefined
  6071 00004289 50                      	push rax
  6072 0000428A 6A02                    	push 2	; arg count
  6073 0000428C 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  6074 00004294 803805                  	cmp byte [rax], T_undefined
  6075 00004297 0F84F8250000            	je L_error_fvar_undefined
  6076 0000429D 803804                  	cmp byte [rax], T_closure
  6077 000042A0 0F8573260000            	jne L_error_non_closure
  6078 000042A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6079 000042A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6080 000042AC 50                      	push rax
  6081 000042AD 6A01                    	push 1	; arg count
  6082 000042AF 488B4510                	mov rax, ENV
  6083 000042B3 488B00                  	mov rax, qword [rax + 8 * 0]
  6084 000042B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6085 000042B9 488B00                  	mov rax, qword [rax]
  6086 000042BC 803804                  	cmp byte [rax], T_closure
  6087 000042BF 0F8554260000            	jne L_error_non_closure
  6088 000042C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6089 000042C8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6090 000042CB FF7500                  	push qword[rbp]
  6091 000042CE 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6092 000042D3 48895D10                	mov qword[rbp + 8*2],rbx
  6093 000042D7 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  6094 000042DF BF00000000              	mov rdi,0
  6095 000042E4 EB00                    	jmp .L_tc_recycle_frame_loop_002b
  6096                                  .L_tc_recycle_frame_loop_002b:
  6097 000042E6 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6098 000042EA 740F                    	je .L_tc_recycle_frame_done_002b
  6099 000042EC 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6100 000042F1 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6101 000042F6 48FFC7                  	inc rdi
  6102 000042F9 EBEB                    	jmp .L_tc_recycle_frame_loop_002b
  6103                                  .L_tc_recycle_frame_done_002b:
  6104 000042FB 4889EC                  	mov rsp, rbp	; point to last argument
  6105 000042FE 5D                      	pop rbp
  6106 000042FF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6107 00004302 EB0A                    	jmp .L_if_end_0009
  6108                                  .L_if_else_0009:
  6109 00004304 48B8-                   	mov rax, L_constants + 2
  6109 00004306 [0200000000000000] 
  6110                                  .L_if_end_0009:
  6111                                  .L_or_end_0005:
  6112 0000430E C9                      	leave
  6113 0000430F C21800                  	ret AND_KILL_FRAME(1)
  6114                                  .L_lambda_simple_end_0029:	; new closure is in rax
  6115 00004312 50                      	push rax
  6116 00004313 488B4520                	mov rax, PARAM(0)	; param loop
  6117 00004317 8F00                    	pop qword [rax]
  6118 00004319 48B8-                   	mov rax, sob_void
  6118 0000431B [0000000000000000] 
  6119                                  
  6120                                  	; preparing a non-tail-call
  6121 00004323 488B4510                	mov rax, ENV
  6122 00004327 488B00                  	mov rax, qword [rax + 8 * 0]
  6123 0000432A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6124 0000432E 50                      	push rax
  6125 0000432F 6A01                    	push 1	; arg count
  6126 00004331 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  6127 00004339 803805                  	cmp byte [rax], T_undefined
  6128 0000433C 0F8453250000            	je L_error_fvar_undefined
  6129 00004342 803804                  	cmp byte [rax], T_closure
  6130 00004345 0F85CE250000            	jne L_error_non_closure
  6131 0000434B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6132 0000434E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6133 00004351 483D[02000000]          	cmp rax, sob_boolean_false
  6134 00004357 0F859D000000            	jne .L_or_end_0006
  6135                                  	; preparing a non-tail-call
  6136 0000435D 488B4510                	mov rax, ENV
  6137 00004361 488B00                  	mov rax, qword [rax + 8 * 0]
  6138 00004364 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6139 00004368 50                      	push rax
  6140 00004369 6A01                    	push 1	; arg count
  6141 0000436B 488B0425[490C0000]      	mov rax, qword [free_var_54]	; free var pair?
  6142 00004373 803805                  	cmp byte [rax], T_undefined
  6143 00004376 0F8419250000            	je L_error_fvar_undefined
  6144 0000437C 803804                  	cmp byte [rax], T_closure
  6145 0000437F 0F8594250000            	jne L_error_non_closure
  6146 00004385 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6147 00004388 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6148 0000438B 483D[02000000]          	cmp rax, sob_boolean_false
  6149 00004391 745D                    	je .L_if_else_000a
  6150                                  	; preparing a tail-call
  6151 00004393 488B4510                	mov rax, ENV
  6152 00004397 488B00                  	mov rax, qword [rax + 8 * 0]
  6153 0000439A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6154 0000439E 50                      	push rax
  6155 0000439F 6A01                    	push 1	; arg count
  6156 000043A1 488B4520                	mov rax, PARAM(0)	; param loop
  6157 000043A5 488B00                  	mov rax, qword [rax]
  6158 000043A8 803804                  	cmp byte [rax], T_closure
  6159 000043AB 0F8568250000            	jne L_error_non_closure
  6160 000043B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6161 000043B4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6162 000043B7 FF7500                  	push qword[rbp]
  6163 000043BA 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6164 000043BF 48895D10                	mov qword[rbp + 8*2],rbx
  6165 000043C3 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  6166 000043CB BF00000000              	mov rdi,0
  6167 000043D0 EB00                    	jmp .L_tc_recycle_frame_loop_002c
  6168                                  .L_tc_recycle_frame_loop_002c:
  6169 000043D2 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6170 000043D6 740F                    	je .L_tc_recycle_frame_done_002c
  6171 000043D8 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6172 000043DD 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6173 000043E2 48FFC7                  	inc rdi
  6174 000043E5 EBEB                    	jmp .L_tc_recycle_frame_loop_002c
  6175                                  .L_tc_recycle_frame_done_002c:
  6176 000043E7 4889EC                  	mov rsp, rbp	; point to last argument
  6177 000043EA 5D                      	pop rbp
  6178 000043EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6179 000043EE EB0A                    	jmp .L_if_end_000a
  6180                                  .L_if_else_000a:
  6181 000043F0 48B8-                   	mov rax, L_constants + 2
  6181 000043F2 [0200000000000000] 
  6182                                  .L_if_end_000a:
  6183                                  .L_or_end_0006:
  6184 000043FA C9                      	leave
  6185 000043FB C21800                  	ret AND_KILL_FRAME(1)
  6186                                  .L_lambda_simple_end_0028:	; new closure is in rax
  6187 000043FE 803804                  	cmp byte [rax], T_closure
  6188 00004401 0F8512250000            	jne L_error_non_closure
  6189 00004407 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6190 0000440A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6191 0000440D FF7500                  	push qword[rbp]
  6192 00004410 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6193 00004415 48895D10                	mov qword[rbp + 8*2],rbx
  6194 00004419 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  6195 00004421 BF00000000              	mov rdi,0
  6196 00004426 EB00                    	jmp .L_tc_recycle_frame_loop_002d
  6197                                  .L_tc_recycle_frame_loop_002d:
  6198 00004428 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6199 0000442C 740F                    	je .L_tc_recycle_frame_done_002d
  6200 0000442E 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6201 00004433 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6202 00004438 48FFC7                  	inc rdi
  6203 0000443B EBEB                    	jmp .L_tc_recycle_frame_loop_002d
  6204                                  .L_tc_recycle_frame_done_002d:
  6205 0000443D 4889EC                  	mov rsp, rbp	; point to last argument
  6206 00004440 5D                      	pop rbp
  6207 00004441 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6208 00004444 C9                      	leave
  6209 00004445 C22000                  	ret AND_KILL_FRAME(2)
  6210                                  .L_lambda_opt_end_0005:	; new closure is in rax
  6211 00004448 48890425[2A090000]      	mov qword [free_var_7], rax
  6212 00004450 48B8-                   	mov rax, sob_void
  6212 00004452 [0000000000000000] 
  6213                                  
  6214 0000445A 4889C7                  	mov rdi, rax
  6215 0000445D E8B5270000              	call print_sexpr_if_not_void
  6216                                  	; preparing a non-tail-call
  6217 00004462 48B8-                   	mov rax, L_constants + 1993
  6217 00004464 [C907000000000000] 
  6218 0000446C 50                      	push rax
  6219 0000446D 48B8-                   	mov rax, L_constants + 1993
  6219 0000446F [C907000000000000] 
  6220 00004477 50                      	push rax
  6221 00004478 6A02                    	push 2	; arg count
  6222 0000447A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6223 0000447F E83E250000              	call malloc
  6224 00004484 50                      	push rax
  6225 00004485 BF00000000              	mov rdi, 8 * 0	; new rib
  6226 0000448A E833250000              	call malloc
  6227 0000448F 50                      	push rax
  6228 00004490 BF08000000              	mov rdi, 8 * 1	; extended env
  6229 00004495 E828250000              	call malloc
  6230 0000449A 488B7D10                	mov rdi, ENV
  6231 0000449E BE00000000              	mov rsi, 0
  6232 000044A3 BA01000000              	mov rdx, 1
  6233                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  6234 000044A8 4883FE00                	cmp rsi, 0
  6235 000044AC 7410                    	je .L_lambda_simple_env_end_002c
  6236 000044AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6237 000044B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6238 000044B6 48FFC6                  	inc rsi
  6239 000044B9 48FFC2                  	inc rdx
  6240 000044BC EBEA                    	jmp .L_lambda_simple_env_loop_002c
  6241                                  .L_lambda_simple_env_end_002c:
  6242 000044BE 5B                      	pop rbx
  6243 000044BF BE00000000              	mov rsi, 0
  6244                                  .L_lambda_simple_params_loop_002c:	; copy params
  6245 000044C4 4883FE00                	cmp rsi, 0
  6246 000044C8 740E                    	je .L_lambda_simple_params_end_002c
  6247 000044CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6248 000044CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6249 000044D3 48FFC6                  	inc rsi
  6250 000044D6 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  6251                                  .L_lambda_simple_params_end_002c:
  6252 000044D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6253 000044DB 4889C3                  	mov rbx, rax
  6254 000044DE 58                      	pop rax
  6255 000044DF C60004                  	mov byte [rax], T_closure
  6256 000044E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6257 000044E6 48C74009[F3440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  6258 000044EE E9C4060000              	jmp .L_lambda_simple_end_002c
  6259                                  .L_lambda_simple_code_002c:	; lambda-simple body
  6260 000044F3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6261 000044F9 740B                    	je .L_lambda_simple_arity_check_ok_002c
  6262 000044FB FF742410                	push qword [rsp + 8 * 2]
  6263 000044FF 6A02                    	push 2
  6264 00004501 E975240000              	jmp L_error_incorrect_arity_simple
  6265                                  .L_lambda_simple_arity_check_ok_002c:
  6266 00004506 C8000000                	enter 0, 0
  6267 0000450A 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  6268 0000450E 488903                  	mov qword [rbx], rax
  6269                                  
  6270 00004511 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
  6271 00004515 488903                  	mov qword [rbx], rax
  6272                                  
  6273 00004518 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6274 0000451D E8A0240000              	call malloc
  6275 00004522 50                      	push rax
  6276 00004523 BF10000000              	mov rdi, 8 * 2	; new rib
  6277 00004528 E895240000              	call malloc
  6278 0000452D 50                      	push rax
  6279 0000452E BF10000000              	mov rdi, 8 * 2	; extended env
  6280 00004533 E88A240000              	call malloc
  6281 00004538 488B7D10                	mov rdi, ENV
  6282 0000453C BE00000000              	mov rsi, 0
  6283 00004541 BA01000000              	mov rdx, 1
  6284                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  6285 00004546 4883FE01                	cmp rsi, 1
  6286 0000454A 7410                    	je .L_lambda_simple_env_end_002d
  6287 0000454C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6288 00004550 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6289 00004554 48FFC6                  	inc rsi
  6290 00004557 48FFC2                  	inc rdx
  6291 0000455A EBEA                    	jmp .L_lambda_simple_env_loop_002d
  6292                                  .L_lambda_simple_env_end_002d:
  6293 0000455C 5B                      	pop rbx
  6294 0000455D BE00000000              	mov rsi, 0
  6295                                  .L_lambda_simple_params_loop_002d:	; copy params
  6296 00004562 4883FE02                	cmp rsi, 2
  6297 00004566 740E                    	je .L_lambda_simple_params_end_002d
  6298 00004568 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6299 0000456D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6300 00004571 48FFC6                  	inc rsi
  6301 00004574 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  6302                                  .L_lambda_simple_params_end_002d:
  6303 00004576 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6304 00004579 4889C3                  	mov rbx, rax
  6305 0000457C 58                      	pop rax
  6306 0000457D C60004                  	mov byte [rax], T_closure
  6307 00004580 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6308 00004584 48C74009[91450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  6309 0000458C E93C010000              	jmp .L_lambda_simple_end_002d
  6310                                  .L_lambda_simple_code_002d:	; lambda-simple body
  6311 00004591 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6312 00004597 740B                    	je .L_lambda_simple_arity_check_ok_002d
  6313 00004599 FF742410                	push qword [rsp + 8 * 2]
  6314 0000459D 6A02                    	push 2
  6315 0000459F E9D7230000              	jmp L_error_incorrect_arity_simple
  6316                                  .L_lambda_simple_arity_check_ok_002d:
  6317 000045A4 C8000000                	enter 0, 0
  6318                                  	; preparing a non-tail-call
  6319 000045A8 488B4528                	mov rax, PARAM(1)	; param s
  6320 000045AC 50                      	push rax
  6321 000045AD 6A01                    	push 1	; arg count
  6322 000045AF 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  6323 000045B7 803805                  	cmp byte [rax], T_undefined
  6324 000045BA 0F84D5220000            	je L_error_fvar_undefined
  6325 000045C0 803804                  	cmp byte [rax], T_closure
  6326 000045C3 0F8550230000            	jne L_error_non_closure
  6327 000045C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6328 000045CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6329 000045CF 483D[02000000]          	cmp rax, sob_boolean_false
  6330 000045D5 740F                    	je .L_if_else_000d
  6331 000045D7 48B8-                   	mov rax, L_constants + 1
  6331 000045D9 [0100000000000000] 
  6332 000045E1 E9E3000000              	jmp .L_if_end_000d
  6333                                  .L_if_else_000d:
  6334                                  	; preparing a tail-call
  6335                                  	; preparing a non-tail-call
  6336                                  	; preparing a non-tail-call
  6337 000045E6 488B4528                	mov rax, PARAM(1)	; param s
  6338 000045EA 50                      	push rax
  6339 000045EB 6A01                    	push 1	; arg count
  6340 000045ED 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  6341 000045F5 803805                  	cmp byte [rax], T_undefined
  6342 000045F8 0F8497220000            	je L_error_fvar_undefined
  6343 000045FE 803804                  	cmp byte [rax], T_closure
  6344 00004601 0F8512230000            	jne L_error_non_closure
  6345 00004607 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6346 0000460A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6347 0000460D 50                      	push rax
  6348 0000460E 488B4520                	mov rax, PARAM(0)	; param f
  6349 00004612 50                      	push rax
  6350 00004613 6A02                    	push 2	; arg count
  6351 00004615 488B4510                	mov rax, ENV
  6352 00004619 488B00                  	mov rax, qword [rax + 8 * 0]
  6353 0000461C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6354 0000461F 488B00                  	mov rax, qword [rax]
  6355 00004622 803804                  	cmp byte [rax], T_closure
  6356 00004625 0F85EE220000            	jne L_error_non_closure
  6357 0000462B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6358 0000462E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6359 00004631 50                      	push rax
  6360                                  	; preparing a non-tail-call
  6361                                  	; preparing a non-tail-call
  6362 00004632 488B4528                	mov rax, PARAM(1)	; param s
  6363 00004636 50                      	push rax
  6364 00004637 6A01                    	push 1	; arg count
  6365 00004639 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  6366 00004641 803805                  	cmp byte [rax], T_undefined
  6367 00004644 0F844B220000            	je L_error_fvar_undefined
  6368 0000464A 803804                  	cmp byte [rax], T_closure
  6369 0000464D 0F85C6220000            	jne L_error_non_closure
  6370 00004653 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6371 00004656 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6372 00004659 50                      	push rax
  6373 0000465A 6A01                    	push 1	; arg count
  6374 0000465C 488B4520                	mov rax, PARAM(0)	; param f
  6375 00004660 803804                  	cmp byte [rax], T_closure
  6376 00004663 0F85B0220000            	jne L_error_non_closure
  6377 00004669 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6378 0000466C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6379 0000466F 50                      	push rax
  6380 00004670 6A02                    	push 2	; arg count
  6381 00004672 488B0425[5B0B0000]      	mov rax, qword [free_var_40]	; free var cons
  6382 0000467A 803805                  	cmp byte [rax], T_undefined
  6383 0000467D 0F8412220000            	je L_error_fvar_undefined
  6384 00004683 803804                  	cmp byte [rax], T_closure
  6385 00004686 0F858D220000            	jne L_error_non_closure
  6386 0000468C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6387 0000468F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6388 00004692 FF7500                  	push qword[rbp]
  6389 00004695 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6390 0000469A 48895D10                	mov qword[rbp + 8*2],rbx
  6391 0000469E 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  6392 000046A6 BF00000000              	mov rdi,0
  6393 000046AB EB00                    	jmp .L_tc_recycle_frame_loop_0031
  6394                                  .L_tc_recycle_frame_loop_0031:
  6395 000046AD 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6396 000046B1 740F                    	je .L_tc_recycle_frame_done_0031
  6397 000046B3 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6398 000046B8 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6399 000046BD 48FFC7                  	inc rdi
  6400 000046C0 EBEB                    	jmp .L_tc_recycle_frame_loop_0031
  6401                                  .L_tc_recycle_frame_done_0031:
  6402 000046C2 4889EC                  	mov rsp, rbp	; point to last argument
  6403 000046C5 5D                      	pop rbp
  6404 000046C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6405                                  .L_if_end_000d:
  6406 000046C9 C9                      	leave
  6407 000046CA C22000                  	ret AND_KILL_FRAME(2)
  6408                                  .L_lambda_simple_end_002d:	; new closure is in rax
  6409 000046CD 50                      	push rax
  6410 000046CE 488B4520                	mov rax, PARAM(0)	; param map1
  6411 000046D2 8F00                    	pop qword [rax]
  6412 000046D4 48B8-                   	mov rax, sob_void
  6412 000046D6 [0000000000000000] 
  6413                                  
  6414 000046DE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6415 000046E3 E8DA220000              	call malloc
  6416 000046E8 50                      	push rax
  6417 000046E9 BF10000000              	mov rdi, 8 * 2	; new rib
  6418 000046EE E8CF220000              	call malloc
  6419 000046F3 50                      	push rax
  6420 000046F4 BF10000000              	mov rdi, 8 * 2	; extended env
  6421 000046F9 E8C4220000              	call malloc
  6422 000046FE 488B7D10                	mov rdi, ENV
  6423 00004702 BE00000000              	mov rsi, 0
  6424 00004707 BA01000000              	mov rdx, 1
  6425                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  6426 0000470C 4883FE01                	cmp rsi, 1
  6427 00004710 7410                    	je .L_lambda_simple_env_end_002e
  6428 00004712 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6429 00004716 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6430 0000471A 48FFC6                  	inc rsi
  6431 0000471D 48FFC2                  	inc rdx
  6432 00004720 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  6433                                  .L_lambda_simple_env_end_002e:
  6434 00004722 5B                      	pop rbx
  6435 00004723 BE00000000              	mov rsi, 0
  6436                                  .L_lambda_simple_params_loop_002e:	; copy params
  6437 00004728 4883FE02                	cmp rsi, 2
  6438 0000472C 740E                    	je .L_lambda_simple_params_end_002e
  6439 0000472E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6440 00004733 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6441 00004737 48FFC6                  	inc rsi
  6442 0000473A EBEC                    	jmp .L_lambda_simple_params_loop_002e
  6443                                  .L_lambda_simple_params_end_002e:
  6444 0000473C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6445 0000473F 4889C3                  	mov rbx, rax
  6446 00004742 58                      	pop rax
  6447 00004743 C60004                  	mov byte [rax], T_closure
  6448 00004746 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6449 0000474A 48C74009[57470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  6450 00004752 E98E010000              	jmp .L_lambda_simple_end_002e
  6451                                  .L_lambda_simple_code_002e:	; lambda-simple body
  6452 00004757 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6453 0000475D 740B                    	je .L_lambda_simple_arity_check_ok_002e
  6454 0000475F FF742410                	push qword [rsp + 8 * 2]
  6455 00004763 6A02                    	push 2
  6456 00004765 E911220000              	jmp L_error_incorrect_arity_simple
  6457                                  .L_lambda_simple_arity_check_ok_002e:
  6458 0000476A C8000000                	enter 0, 0
  6459                                  	; preparing a non-tail-call
  6460                                  	; preparing a non-tail-call
  6461 0000476E 488B4528                	mov rax, PARAM(1)	; param s
  6462 00004772 50                      	push rax
  6463 00004773 6A01                    	push 1	; arg count
  6464 00004775 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  6465 0000477D 803805                  	cmp byte [rax], T_undefined
  6466 00004780 0F840F210000            	je L_error_fvar_undefined
  6467 00004786 803804                  	cmp byte [rax], T_closure
  6468 00004789 0F858A210000            	jne L_error_non_closure
  6469 0000478F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6470 00004792 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6471 00004795 50                      	push rax
  6472 00004796 6A01                    	push 1	; arg count
  6473 00004798 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  6474 000047A0 803805                  	cmp byte [rax], T_undefined
  6475 000047A3 0F84EC200000            	je L_error_fvar_undefined
  6476 000047A9 803804                  	cmp byte [rax], T_closure
  6477 000047AC 0F8567210000            	jne L_error_non_closure
  6478 000047B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6479 000047B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6480 000047B8 483D[02000000]          	cmp rax, sob_boolean_false
  6481 000047BE 740F                    	je .L_if_else_000e
  6482 000047C0 48B8-                   	mov rax, L_constants + 1
  6482 000047C2 [0100000000000000] 
  6483 000047CA E912010000              	jmp .L_if_end_000e
  6484                                  .L_if_else_000e:
  6485                                  	; preparing a tail-call
  6486                                  	; preparing a non-tail-call
  6487                                  	; preparing a non-tail-call
  6488 000047CF 488B4528                	mov rax, PARAM(1)	; param s
  6489 000047D3 50                      	push rax
  6490 000047D4 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  6491 000047DC 803805                  	cmp byte [rax], T_undefined
  6492 000047DF 0F84B0200000            	je L_error_fvar_undefined
  6493 000047E5 50                      	push rax
  6494 000047E6 6A02                    	push 2	; arg count
  6495 000047E8 488B4510                	mov rax, ENV
  6496 000047EC 488B00                  	mov rax, qword [rax + 8 * 0]
  6497 000047EF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6498 000047F2 488B00                  	mov rax, qword [rax]
  6499 000047F5 803804                  	cmp byte [rax], T_closure
  6500 000047F8 0F851B210000            	jne L_error_non_closure
  6501 000047FE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6502 00004801 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6503 00004804 50                      	push rax
  6504 00004805 488B4520                	mov rax, PARAM(0)	; param f
  6505 00004809 50                      	push rax
  6506 0000480A 6A02                    	push 2	; arg count
  6507 0000480C 488B4510                	mov rax, ENV
  6508 00004810 488B00                  	mov rax, qword [rax + 8 * 0]
  6509 00004813 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6510 00004817 488B00                  	mov rax, qword [rax]
  6511 0000481A 803804                  	cmp byte [rax], T_closure
  6512 0000481D 0F85F6200000            	jne L_error_non_closure
  6513 00004823 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6514 00004826 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6515 00004829 50                      	push rax
  6516                                  	; preparing a non-tail-call
  6517                                  	; preparing a non-tail-call
  6518 0000482A 488B4528                	mov rax, PARAM(1)	; param s
  6519 0000482E 50                      	push rax
  6520 0000482F 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  6521 00004837 803805                  	cmp byte [rax], T_undefined
  6522 0000483A 0F8455200000            	je L_error_fvar_undefined
  6523 00004840 50                      	push rax
  6524 00004841 6A02                    	push 2	; arg count
  6525 00004843 488B4510                	mov rax, ENV
  6526 00004847 488B00                  	mov rax, qword [rax + 8 * 0]
  6527 0000484A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  6528 0000484D 488B00                  	mov rax, qword [rax]
  6529 00004850 803804                  	cmp byte [rax], T_closure
  6530 00004853 0F85C0200000            	jne L_error_non_closure
  6531 00004859 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6532 0000485C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6533 0000485F 50                      	push rax
  6534 00004860 488B4520                	mov rax, PARAM(0)	; param f
  6535 00004864 50                      	push rax
  6536 00004865 6A02                    	push 2	; arg count
  6537 00004867 488B0425[4C090000]      	mov rax, qword [free_var_9]	; free var apply
  6538 0000486F 803805                  	cmp byte [rax], T_undefined
  6539 00004872 0F841D200000            	je L_error_fvar_undefined
  6540 00004878 803804                  	cmp byte [rax], T_closure
  6541 0000487B 0F8598200000            	jne L_error_non_closure
  6542 00004881 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6543 00004884 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6544 00004887 50                      	push rax
  6545 00004888 6A02                    	push 2	; arg count
  6546 0000488A 488B0425[5B0B0000]      	mov rax, qword [free_var_40]	; free var cons
  6547 00004892 803805                  	cmp byte [rax], T_undefined
  6548 00004895 0F84FA1F0000            	je L_error_fvar_undefined
  6549 0000489B 803804                  	cmp byte [rax], T_closure
  6550 0000489E 0F8575200000            	jne L_error_non_closure
  6551 000048A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6552 000048A7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6553 000048AA FF7500                  	push qword[rbp]
  6554 000048AD 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6555 000048B2 48895D10                	mov qword[rbp + 8*2],rbx
  6556 000048B6 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  6557 000048BE BF00000000              	mov rdi,0
  6558 000048C3 EB00                    	jmp .L_tc_recycle_frame_loop_0032
  6559                                  .L_tc_recycle_frame_loop_0032:
  6560 000048C5 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6561 000048C9 740F                    	je .L_tc_recycle_frame_done_0032
  6562 000048CB 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6563 000048D0 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6564 000048D5 48FFC7                  	inc rdi
  6565 000048D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0032
  6566                                  .L_tc_recycle_frame_done_0032:
  6567 000048DA 4889EC                  	mov rsp, rbp	; point to last argument
  6568 000048DD 5D                      	pop rbp
  6569 000048DE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6570                                  .L_if_end_000e:
  6571 000048E1 C9                      	leave
  6572 000048E2 C22000                  	ret AND_KILL_FRAME(2)
  6573                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6574 000048E5 50                      	push rax
  6575 000048E6 488B4528                	mov rax, PARAM(1)	; param map-list
  6576 000048EA 8F00                    	pop qword [rax]
  6577 000048EC 48B8-                   	mov rax, sob_void
  6577 000048EE [0000000000000000] 
  6578                                  
  6579 000048F6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6580 000048FB E8C2200000              	call malloc
  6581 00004900 50                      	push rax
  6582 00004901 BF10000000              	mov rdi, 8 * 2	; new rib
  6583 00004906 E8B7200000              	call malloc
  6584 0000490B 50                      	push rax
  6585 0000490C BF10000000              	mov rdi, 8 * 2	; extended env
  6586 00004911 E8AC200000              	call malloc
  6587 00004916 488B7D10                	mov rdi, ENV
  6588 0000491A BE00000000              	mov rsi, 0
  6589 0000491F BA01000000              	mov rdx, 1
  6590                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  6591 00004924 4883FE01                	cmp rsi, 1
  6592 00004928 7410                    	je .L_lambda_opt_env_end_0006
  6593 0000492A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6594 0000492E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6595 00004932 48FFC6                  	inc rsi
  6596 00004935 48FFC2                  	inc rdx
  6597 00004938 EBEA                    	jmp .L_lambda_opt_env_loop_0006
  6598                                  .L_lambda_opt_env_end_0006:
  6599 0000493A 5B                      	pop rbx
  6600 0000493B BE00000000              	mov rsi, 0
  6601                                  .L_lambda_opt_params_loop_0006:	; copy params
  6602 00004940 4883FE02                	cmp rsi, 2
  6603 00004944 740E                    	je .L_lambda_opt_params_end_0006
  6604 00004946 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6605 0000494B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6606 0000494F 48FFC6                  	inc rsi
  6607 00004952 EBEC                    	jmp .L_lambda_opt_params_loop_0006
  6608                                  .L_lambda_opt_params_end_0006:
  6609 00004954 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6610 00004957 4889C3                  	mov rbx, rax
  6611 0000495A 58                      	pop rax
  6612 0000495B C60004                  	mov byte [rax], T_closure
  6613 0000495E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6614 00004962 48C74009[6F490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  6615 0000496A E944020000              	jmp .L_lambda_opt_end_0006
  6616                                  .L_lambda_opt_code_0006:	; lambda-opt body
  6617 0000496F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6618 00004975 7411                    	je .L_lambda_opt_arity_check_exact_0006
  6619 00004977 0F8FED000000            	jg .L_lambda_opt_arity_check_more_0006
  6620 0000497D FF742410                	push qword [rsp + 8 * 2]
  6621 00004981 6A01                    	push 1
  6622 00004983 E907200000              	jmp L_error_incorrect_arity_opt
  6623                                  .L_lambda_opt_arity_check_exact_0006:
  6624 00004988 4883EC08                	sub rsp, 8
  6625 0000498C 488B442408              	mov rax, qword[rsp + 8 *1]
  6626 00004991 48890424                	mov qword[rsp], rax  
  6627 00004995 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6628 0000499A 4889442408              	mov qword[rsp + 8 * 1], rax
  6629 0000499F B802000000              	mov rax, 2
  6630 000049A4 4889442410              	mov qword[rsp + 8 *2], rax
  6631 000049A9 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6632 000049AE 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6633 000049B3 48B8-                   	mov rax, sob_nil
  6633 000049B5 [0100000000000000] 
  6634 000049BD 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6635 000049C2 C8000000                	enter 0, 0
  6636                                  	; preparing a non-tail-call
  6637 000049C6 488B4528                	mov rax, PARAM(1)	; param s
  6638 000049CA 50                      	push rax
  6639 000049CB 6A01                    	push 1	; arg count
  6640 000049CD 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  6641 000049D5 803805                  	cmp byte [rax], T_undefined
  6642 000049D8 0F84B71E0000            	je L_error_fvar_undefined
  6643 000049DE 803804                  	cmp byte [rax], T_closure
  6644 000049E1 0F85321F0000            	jne L_error_non_closure
  6645 000049E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6646 000049EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  6647 000049ED 483D[02000000]          	cmp rax, sob_boolean_false
  6648 000049F3 740C                    	je .L_if_else_0010
  6649 000049F5 48B8-                   	mov rax, L_constants + 1
  6649 000049F7 [0100000000000000] 
  6650 000049FF EB60                    	jmp .L_if_end_0010
  6651                                  .L_if_else_0010:
  6652                                  	; preparing a tail-call
  6653 00004A01 488B4528                	mov rax, PARAM(1)	; param s
  6654 00004A05 50                      	push rax
  6655 00004A06 488B4520                	mov rax, PARAM(0)	; param f
  6656 00004A0A 50                      	push rax
  6657 00004A0B 6A02                    	push 2	; arg count
  6658 00004A0D 488B4510                	mov rax, ENV
  6659 00004A11 488B00                  	mov rax, qword [rax + 8 * 0]
  6660 00004A14 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6661 00004A18 488B00                  	mov rax, qword [rax]
  6662 00004A1B 803804                  	cmp byte [rax], T_closure
  6663 00004A1E 0F85F51E0000            	jne L_error_non_closure
  6664 00004A24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6665 00004A27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6666 00004A2A FF7500                  	push qword[rbp]
  6667 00004A2D 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6668 00004A32 48895D10                	mov qword[rbp + 8*2],rbx
  6669 00004A36 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  6670 00004A3E BF00000000              	mov rdi,0
  6671 00004A43 EB00                    	jmp .L_tc_recycle_frame_loop_0034
  6672                                  .L_tc_recycle_frame_loop_0034:
  6673 00004A45 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6674 00004A49 740F                    	je .L_tc_recycle_frame_done_0034
  6675 00004A4B 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6676 00004A50 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6677 00004A55 48FFC7                  	inc rdi
  6678 00004A58 EBEB                    	jmp .L_tc_recycle_frame_loop_0034
  6679                                  .L_tc_recycle_frame_done_0034:
  6680 00004A5A 4889EC                  	mov rsp, rbp	; point to last argument
  6681 00004A5D 5D                      	pop rbp
  6682 00004A5E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6683                                  .L_if_end_0010:
  6684 00004A61 C9                      	leave
  6685 00004A62 C22000                  	ret AND_KILL_FRAME(2)
  6686 00004A65 E949010000              	jmp .L_lambda_opt_end_0006	; new closure is in rax
  6687                                  .L_lambda_opt_arity_check_more_0006:
  6688 00004A6A 488B442410              	mov rax, qword[rsp + 2 * 8]
  6689 00004A6F 4889C7                  	mov rdi, rax
  6690 00004A72 49B9-                   	mov r9, sob_nil
  6690 00004A74 [0100000000000000] 
  6691 00004A7C 4C8B442410              	mov r8, qword[rsp+2*8]
  6692                                  .L_lambda_opt_stack_shrink_loop_0006:
  6693 00004A81 4983F801                	cmp r8, 1
  6694 00004A85 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  6695 00004A87 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  6696 00004A8C BF11000000              	mov rdi, 1+8+8	;for pair
  6697 00004A91 E82C1F0000              	call malloc	 ;to create the pair in the stack
  6698 00004A96 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  6699 00004A99 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  6700 00004A9D 4C894809                 	mov qword[rax+1+8],r9
  6701 00004AA1 4989C1                  	mov r9 , rax	 ; for the recursion 
  6702 00004AA4 49FFC8                  	dec r8
  6703 00004AA7 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  6704                                  .L_lambda_opt_stack_shrink_loop_exit_0006:
  6705 00004AA9 488B442410              	mov rax, qword[rsp + 2 * 8]
  6706 00004AAE BF02000000              	mov rdi, 2
  6707 00004AB3 4829F8                  	sub rax, rdi
  6708 00004AB6 4889C7                  	mov rdi, rax
  6709 00004AB9 486BC008                	imul rax,8
  6710 00004ABD 4801C4                  	add rsp, rax
  6711 00004AC0 4889E0                  	mov rax, rsp
  6712 00004AC3 4989F8                  	mov r8, rdi
  6713 00004AC6 4D6BC008                	imul r8, 8
  6714 00004ACA 4C29C0                  	sub rax, r8
  6715 00004ACD 4989C2                  	mov r10, rax	; holds the original ret in the stack
  6716 00004AD0 4983C218                	add r10, 8*3
  6717 00004AD4 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  6718 00004AD8 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  6719 00004ADB 4D6BC008                	imul r8,8
  6720 00004ADF 4C01C0                  	add rax, r8
  6721 00004AE2 4C8908                  	mov qword[rax] ,r9
  6722 00004AE5 4D89D0                   	mov r8, r10
  6723 00004AE8 4983C000                	add r8, 8 * 0
  6724 00004AEC 4D8B08                  	mov r9,qword[r8]
  6725 00004AEF 4D890CF8                	mov qword [r8 + rdi * 8], r9
  6726 00004AF3 4983EA18                	sub r10, 8*3
  6727 00004AF7 48C744241002000000      	mov qword [rsp+2*8], 2
  6728 00004B00 498B4208                	mov rax, qword[r10 + 1 * 8]
  6729 00004B04 4889442408              	mov qword[rsp + 1*8] ,rax
  6730 00004B09 498B02                  	mov rax, qword[r10]
  6731 00004B0C 48890424                	mov qword[rsp], rax
  6732 00004B10 C8000000                	enter 0, 0
  6733                                  	; preparing a non-tail-call
  6734 00004B14 488B4528                	mov rax, PARAM(1)	; param s
  6735 00004B18 50                      	push rax
  6736 00004B19 6A01                    	push 1	; arg count
  6737 00004B1B 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  6738 00004B23 803805                  	cmp byte [rax], T_undefined
  6739 00004B26 0F84691D0000            	je L_error_fvar_undefined
  6740 00004B2C 803804                  	cmp byte [rax], T_closure
  6741 00004B2F 0F85E41D0000            	jne L_error_non_closure
  6742 00004B35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6743 00004B38 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6744 00004B3B 483D[02000000]          	cmp rax, sob_boolean_false
  6745 00004B41 740C                    	je .L_if_else_000f
  6746 00004B43 48B8-                   	mov rax, L_constants + 1
  6746 00004B45 [0100000000000000] 
  6747 00004B4D EB60                    	jmp .L_if_end_000f
  6748                                  .L_if_else_000f:
  6749                                  	; preparing a tail-call
  6750 00004B4F 488B4528                	mov rax, PARAM(1)	; param s
  6751 00004B53 50                      	push rax
  6752 00004B54 488B4520                	mov rax, PARAM(0)	; param f
  6753 00004B58 50                      	push rax
  6754 00004B59 6A02                    	push 2	; arg count
  6755 00004B5B 488B4510                	mov rax, ENV
  6756 00004B5F 488B00                  	mov rax, qword [rax + 8 * 0]
  6757 00004B62 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  6758 00004B66 488B00                  	mov rax, qword [rax]
  6759 00004B69 803804                  	cmp byte [rax], T_closure
  6760 00004B6C 0F85A71D0000            	jne L_error_non_closure
  6761 00004B72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6762 00004B75 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6763 00004B78 FF7500                  	push qword[rbp]
  6764 00004B7B 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6765 00004B80 48895D10                	mov qword[rbp + 8*2],rbx
  6766 00004B84 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  6767 00004B8C BF00000000              	mov rdi,0
  6768 00004B91 EB00                    	jmp .L_tc_recycle_frame_loop_0033
  6769                                  .L_tc_recycle_frame_loop_0033:
  6770 00004B93 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6771 00004B97 740F                    	je .L_tc_recycle_frame_done_0033
  6772 00004B99 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6773 00004B9E 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6774 00004BA3 48FFC7                  	inc rdi
  6775 00004BA6 EBEB                    	jmp .L_tc_recycle_frame_loop_0033
  6776                                  .L_tc_recycle_frame_done_0033:
  6777 00004BA8 4889EC                  	mov rsp, rbp	; point to last argument
  6778 00004BAB 5D                      	pop rbp
  6779 00004BAC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6780                                  .L_if_end_000f:
  6781 00004BAF C9                      	leave
  6782 00004BB0 C22000                  	ret AND_KILL_FRAME(2)
  6783                                  .L_lambda_opt_end_0006:	; new closure is in rax
  6784 00004BB3 C9                      	leave
  6785 00004BB4 C22000                  	ret AND_KILL_FRAME(2)
  6786                                  .L_lambda_simple_end_002c:	; new closure is in rax
  6787 00004BB7 803804                  	cmp byte [rax], T_closure
  6788 00004BBA 0F85591D0000            	jne L_error_non_closure
  6789 00004BC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6790 00004BC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6791 00004BC6 48890425[050C0000]      	mov qword [free_var_50], rax
  6792 00004BCE 48B8-                   	mov rax, sob_void
  6792 00004BD0 [0000000000000000] 
  6793                                  
  6794 00004BD8 4889C7                  	mov rdi, rax
  6795 00004BDB E837200000              	call print_sexpr_if_not_void
  6796 00004BE0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6797 00004BE5 E8D81D0000              	call malloc
  6798 00004BEA 50                      	push rax
  6799 00004BEB BF00000000              	mov rdi, 8 * 0	; new rib
  6800 00004BF0 E8CD1D0000              	call malloc
  6801 00004BF5 50                      	push rax
  6802 00004BF6 BF08000000              	mov rdi, 8 * 1	; extended env
  6803 00004BFB E8C21D0000              	call malloc
  6804 00004C00 488B7D10                	mov rdi, ENV
  6805 00004C04 BE00000000              	mov rsi, 0
  6806 00004C09 BA01000000              	mov rdx, 1
  6807                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  6808 00004C0E 4883FE00                	cmp rsi, 0
  6809 00004C12 7410                    	je .L_lambda_simple_env_end_002f
  6810 00004C14 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6811 00004C18 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6812 00004C1C 48FFC6                  	inc rsi
  6813 00004C1F 48FFC2                  	inc rdx
  6814 00004C22 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  6815                                  .L_lambda_simple_env_end_002f:
  6816 00004C24 5B                      	pop rbx
  6817 00004C25 BE00000000              	mov rsi, 0
  6818                                  .L_lambda_simple_params_loop_002f:	; copy params
  6819 00004C2A 4883FE00                	cmp rsi, 0
  6820 00004C2E 740E                    	je .L_lambda_simple_params_end_002f
  6821 00004C30 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6822 00004C35 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6823 00004C39 48FFC6                  	inc rsi
  6824 00004C3C EBEC                    	jmp .L_lambda_simple_params_loop_002f
  6825                                  .L_lambda_simple_params_end_002f:
  6826 00004C3E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6827 00004C41 4889C3                  	mov rbx, rax
  6828 00004C44 58                      	pop rax
  6829 00004C45 C60004                  	mov byte [rax], T_closure
  6830 00004C48 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6831 00004C4C 48C74009[594C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  6832 00004C54 E97C010000              	jmp .L_lambda_simple_end_002f
  6833                                  .L_lambda_simple_code_002f:	; lambda-simple body
  6834 00004C59 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6835 00004C5F 740B                    	je .L_lambda_simple_arity_check_ok_002f
  6836 00004C61 FF742410                	push qword [rsp + 8 * 2]
  6837 00004C65 6A01                    	push 1
  6838 00004C67 E90F1D0000              	jmp L_error_incorrect_arity_simple
  6839                                  .L_lambda_simple_arity_check_ok_002f:
  6840 00004C6C C8000000                	enter 0, 0
  6841                                  	; preparing a tail-call
  6842 00004C70 488B4520                	mov rax, PARAM(0)	; param s
  6843 00004C74 50                      	push rax
  6844 00004C75 48B8-                   	mov rax, L_constants + 1
  6844 00004C77 [0100000000000000] 
  6845 00004C7F 50                      	push rax
  6846 00004C80 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6847 00004C85 E8381D0000              	call malloc
  6848 00004C8A 50                      	push rax
  6849 00004C8B BF08000000              	mov rdi, 8 * 1	; new rib
  6850 00004C90 E82D1D0000              	call malloc
  6851 00004C95 50                      	push rax
  6852 00004C96 BF10000000              	mov rdi, 8 * 2	; extended env
  6853 00004C9B E8221D0000              	call malloc
  6854 00004CA0 488B7D10                	mov rdi, ENV
  6855 00004CA4 BE00000000              	mov rsi, 0
  6856 00004CA9 BA01000000              	mov rdx, 1
  6857                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  6858 00004CAE 4883FE01                	cmp rsi, 1
  6859 00004CB2 7410                    	je .L_lambda_simple_env_end_0030
  6860 00004CB4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6861 00004CB8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6862 00004CBC 48FFC6                  	inc rsi
  6863 00004CBF 48FFC2                  	inc rdx
  6864 00004CC2 EBEA                    	jmp .L_lambda_simple_env_loop_0030
  6865                                  .L_lambda_simple_env_end_0030:
  6866 00004CC4 5B                      	pop rbx
  6867 00004CC5 BE00000000              	mov rsi, 0
  6868                                  .L_lambda_simple_params_loop_0030:	; copy params
  6869 00004CCA 4883FE01                	cmp rsi, 1
  6870 00004CCE 740E                    	je .L_lambda_simple_params_end_0030
  6871 00004CD0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6872 00004CD5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6873 00004CD9 48FFC6                  	inc rsi
  6874 00004CDC EBEC                    	jmp .L_lambda_simple_params_loop_0030
  6875                                  .L_lambda_simple_params_end_0030:
  6876 00004CDE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6877 00004CE1 4889C3                  	mov rbx, rax
  6878 00004CE4 58                      	pop rax
  6879 00004CE5 C60004                  	mov byte [rax], T_closure
  6880 00004CE8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6881 00004CEC 48C74009[F94C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  6882 00004CF4 E97E000000              	jmp .L_lambda_simple_end_0030
  6883                                  .L_lambda_simple_code_0030:	; lambda-simple body
  6884 00004CF9 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6885 00004CFF 740B                    	je .L_lambda_simple_arity_check_ok_0030
  6886 00004D01 FF742410                	push qword [rsp + 8 * 2]
  6887 00004D05 6A02                    	push 2
  6888 00004D07 E96F1C0000              	jmp L_error_incorrect_arity_simple
  6889                                  .L_lambda_simple_arity_check_ok_0030:
  6890 00004D0C C8000000                	enter 0, 0
  6891                                  	; preparing a tail-call
  6892 00004D10 488B4520                	mov rax, PARAM(0)	; param r
  6893 00004D14 50                      	push rax
  6894 00004D15 488B4528                	mov rax, PARAM(1)	; param a
  6895 00004D19 50                      	push rax
  6896 00004D1A 6A02                    	push 2	; arg count
  6897 00004D1C 488B0425[5B0B0000]      	mov rax, qword [free_var_40]	; free var cons
  6898 00004D24 803805                  	cmp byte [rax], T_undefined
  6899 00004D27 0F84681B0000            	je L_error_fvar_undefined
  6900 00004D2D 803804                  	cmp byte [rax], T_closure
  6901 00004D30 0F85E31B0000            	jne L_error_non_closure
  6902 00004D36 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6903 00004D39 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6904 00004D3C FF7500                  	push qword[rbp]
  6905 00004D3F 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6906 00004D44 48895D10                	mov qword[rbp + 8*2],rbx
  6907 00004D48 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  6908 00004D50 BF00000000              	mov rdi,0
  6909 00004D55 EB00                    	jmp .L_tc_recycle_frame_loop_0035
  6910                                  .L_tc_recycle_frame_loop_0035:
  6911 00004D57 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6912 00004D5B 740F                    	je .L_tc_recycle_frame_done_0035
  6913 00004D5D 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6914 00004D62 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6915 00004D67 48FFC7                  	inc rdi
  6916 00004D6A EBEB                    	jmp .L_tc_recycle_frame_loop_0035
  6917                                  .L_tc_recycle_frame_done_0035:
  6918 00004D6C 4889EC                  	mov rsp, rbp	; point to last argument
  6919 00004D6F 5D                      	pop rbp
  6920 00004D70 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6921 00004D73 C9                      	leave
  6922 00004D74 C22000                  	ret AND_KILL_FRAME(2)
  6923                                  .L_lambda_simple_end_0030:	; new closure is in rax
  6924 00004D77 50                      	push rax
  6925 00004D78 6A03                    	push 3	; arg count
  6926 00004D7A 488B0425[7D0B0000]      	mov rax, qword [free_var_42]	; free var fold-left
  6927 00004D82 803805                  	cmp byte [rax], T_undefined
  6928 00004D85 0F840A1B0000            	je L_error_fvar_undefined
  6929 00004D8B 803804                  	cmp byte [rax], T_closure
  6930 00004D8E 0F85851B0000            	jne L_error_non_closure
  6931 00004D94 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6932 00004D97 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6933 00004D9A FF7500                  	push qword[rbp]
  6934 00004D9D 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  6935 00004DA2 48895D10                	mov qword[rbp + 8*2],rbx
  6936 00004DA6 48C7451803000000        	mov qword[rbp + 8*3], 3	 ;n turns to m
  6937 00004DAE BF00000000              	mov rdi,0
  6938 00004DB3 EB00                    	jmp .L_tc_recycle_frame_loop_0036
  6939                                  .L_tc_recycle_frame_loop_0036:
  6940 00004DB5 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  6941 00004DB9 740F                    	je .L_tc_recycle_frame_done_0036
  6942 00004DBB 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  6943 00004DC0 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  6944 00004DC5 48FFC7                  	inc rdi
  6945 00004DC8 EBEB                    	jmp .L_tc_recycle_frame_loop_0036
  6946                                  .L_tc_recycle_frame_done_0036:
  6947 00004DCA 4889EC                  	mov rsp, rbp	; point to last argument
  6948 00004DCD 5D                      	pop rbp
  6949 00004DCE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6950 00004DD1 C9                      	leave
  6951 00004DD2 C21800                  	ret AND_KILL_FRAME(1)
  6952                                  .L_lambda_simple_end_002f:	; new closure is in rax
  6953 00004DD5 48890425[7C0C0000]      	mov qword [free_var_57], rax
  6954 00004DDD 48B8-                   	mov rax, sob_void
  6954 00004DDF [0000000000000000] 
  6955                                  
  6956 00004DE7 4889C7                  	mov rdi, rax
  6957 00004DEA E8281E0000              	call print_sexpr_if_not_void
  6958                                  	; preparing a non-tail-call
  6959 00004DEF 48B8-                   	mov rax, L_constants + 1993
  6959 00004DF1 [C907000000000000] 
  6960 00004DF9 50                      	push rax
  6961 00004DFA 48B8-                   	mov rax, L_constants + 1993
  6961 00004DFC [C907000000000000] 
  6962 00004E04 50                      	push rax
  6963 00004E05 6A02                    	push 2	; arg count
  6964 00004E07 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6965 00004E0C E8B11B0000              	call malloc
  6966 00004E11 50                      	push rax
  6967 00004E12 BF00000000              	mov rdi, 8 * 0	; new rib
  6968 00004E17 E8A61B0000              	call malloc
  6969 00004E1C 50                      	push rax
  6970 00004E1D BF08000000              	mov rdi, 8 * 1	; extended env
  6971 00004E22 E89B1B0000              	call malloc
  6972 00004E27 488B7D10                	mov rdi, ENV
  6973 00004E2B BE00000000              	mov rsi, 0
  6974 00004E30 BA01000000              	mov rdx, 1
  6975                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  6976 00004E35 4883FE00                	cmp rsi, 0
  6977 00004E39 7410                    	je .L_lambda_simple_env_end_0031
  6978 00004E3B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6979 00004E3F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6980 00004E43 48FFC6                  	inc rsi
  6981 00004E46 48FFC2                  	inc rdx
  6982 00004E49 EBEA                    	jmp .L_lambda_simple_env_loop_0031
  6983                                  .L_lambda_simple_env_end_0031:
  6984 00004E4B 5B                      	pop rbx
  6985 00004E4C BE00000000              	mov rsi, 0
  6986                                  .L_lambda_simple_params_loop_0031:	; copy params
  6987 00004E51 4883FE00                	cmp rsi, 0
  6988 00004E55 740E                    	je .L_lambda_simple_params_end_0031
  6989 00004E57 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6990 00004E5C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6991 00004E60 48FFC6                  	inc rsi
  6992 00004E63 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  6993                                  .L_lambda_simple_params_end_0031:
  6994 00004E65 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6995 00004E68 4889C3                  	mov rbx, rax
  6996 00004E6B 58                      	pop rax
  6997 00004E6C C60004                  	mov byte [rax], T_closure
  6998 00004E6F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6999 00004E73 48C74009[804E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  7000 00004E7B E9B0060000              	jmp .L_lambda_simple_end_0031
  7001                                  .L_lambda_simple_code_0031:	; lambda-simple body
  7002 00004E80 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7003 00004E86 740B                    	je .L_lambda_simple_arity_check_ok_0031
  7004 00004E88 FF742410                	push qword [rsp + 8 * 2]
  7005 00004E8C 6A02                    	push 2
  7006 00004E8E E9E81A0000              	jmp L_error_incorrect_arity_simple
  7007                                  .L_lambda_simple_arity_check_ok_0031:
  7008 00004E93 C8000000                	enter 0, 0
  7009 00004E97 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  7010 00004E9B 488903                  	mov qword [rbx], rax
  7011                                  
  7012 00004E9E 488B5D28                	mov rbx, qword [rbp + 8 * (4 + 1)]
  7013 00004EA2 488903                  	mov qword [rbx], rax
  7014                                  
  7015 00004EA5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7016 00004EAA E8131B0000              	call malloc
  7017 00004EAF 50                      	push rax
  7018 00004EB0 BF10000000              	mov rdi, 8 * 2	; new rib
  7019 00004EB5 E8081B0000              	call malloc
  7020 00004EBA 50                      	push rax
  7021 00004EBB BF10000000              	mov rdi, 8 * 2	; extended env
  7022 00004EC0 E8FD1A0000              	call malloc
  7023 00004EC5 488B7D10                	mov rdi, ENV
  7024 00004EC9 BE00000000              	mov rsi, 0
  7025 00004ECE BA01000000              	mov rdx, 1
  7026                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  7027 00004ED3 4883FE01                	cmp rsi, 1
  7028 00004ED7 7410                    	je .L_lambda_simple_env_end_0032
  7029 00004ED9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7030 00004EDD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7031 00004EE1 48FFC6                  	inc rsi
  7032 00004EE4 48FFC2                  	inc rdx
  7033 00004EE7 EBEA                    	jmp .L_lambda_simple_env_loop_0032
  7034                                  .L_lambda_simple_env_end_0032:
  7035 00004EE9 5B                      	pop rbx
  7036 00004EEA BE00000000              	mov rsi, 0
  7037                                  .L_lambda_simple_params_loop_0032:	; copy params
  7038 00004EEF 4883FE02                	cmp rsi, 2
  7039 00004EF3 740E                    	je .L_lambda_simple_params_end_0032
  7040 00004EF5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7041 00004EFA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7042 00004EFE 48FFC6                  	inc rsi
  7043 00004F01 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  7044                                  .L_lambda_simple_params_end_0032:
  7045 00004F03 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7046 00004F06 4889C3                  	mov rbx, rax
  7047 00004F09 58                      	pop rax
  7048 00004F0A C60004                  	mov byte [rax], T_closure
  7049 00004F0D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7050 00004F11 48C74009[1E4F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  7051 00004F19 E91D010000              	jmp .L_lambda_simple_end_0032
  7052                                  .L_lambda_simple_code_0032:	; lambda-simple body
  7053 00004F1E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7054 00004F24 740B                    	je .L_lambda_simple_arity_check_ok_0032
  7055 00004F26 FF742410                	push qword [rsp + 8 * 2]
  7056 00004F2A 6A02                    	push 2
  7057 00004F2C E94A1A0000              	jmp L_error_incorrect_arity_simple
  7058                                  .L_lambda_simple_arity_check_ok_0032:
  7059 00004F31 C8000000                	enter 0, 0
  7060                                  	; preparing a non-tail-call
  7061 00004F35 488B4528                	mov rax, PARAM(1)	; param sr
  7062 00004F39 50                      	push rax
  7063 00004F3A 6A01                    	push 1	; arg count
  7064 00004F3C 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  7065 00004F44 803805                  	cmp byte [rax], T_undefined
  7066 00004F47 0F8448190000            	je L_error_fvar_undefined
  7067 00004F4D 803804                  	cmp byte [rax], T_closure
  7068 00004F50 0F85C3190000            	jne L_error_non_closure
  7069 00004F56 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7070 00004F59 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7071 00004F5C 483D[02000000]          	cmp rax, sob_boolean_false
  7072 00004F62 7409                    	je .L_if_else_0011
  7073 00004F64 488B4520                	mov rax, PARAM(0)	; param s1
  7074 00004F68 E9CA000000              	jmp .L_if_end_0011
  7075                                  .L_if_else_0011:
  7076                                  	; preparing a tail-call
  7077                                  	; preparing a non-tail-call
  7078                                  	; preparing a non-tail-call
  7079 00004F6D 488B4528                	mov rax, PARAM(1)	; param sr
  7080 00004F71 50                      	push rax
  7081 00004F72 6A01                    	push 1	; arg count
  7082 00004F74 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  7083 00004F7C 803805                  	cmp byte [rax], T_undefined
  7084 00004F7F 0F8410190000            	je L_error_fvar_undefined
  7085 00004F85 803804                  	cmp byte [rax], T_closure
  7086 00004F88 0F858B190000            	jne L_error_non_closure
  7087 00004F8E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7088 00004F91 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7089 00004F94 50                      	push rax
  7090                                  	; preparing a non-tail-call
  7091 00004F95 488B4528                	mov rax, PARAM(1)	; param sr
  7092 00004F99 50                      	push rax
  7093 00004F9A 6A01                    	push 1	; arg count
  7094 00004F9C 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  7095 00004FA4 803805                  	cmp byte [rax], T_undefined
  7096 00004FA7 0F84E8180000            	je L_error_fvar_undefined
  7097 00004FAD 803804                  	cmp byte [rax], T_closure
  7098 00004FB0 0F8563190000            	jne L_error_non_closure
  7099 00004FB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7100 00004FB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7101 00004FBC 50                      	push rax
  7102 00004FBD 6A02                    	push 2	; arg count
  7103 00004FBF 488B4510                	mov rax, ENV
  7104 00004FC3 488B00                  	mov rax, qword [rax + 8 * 0]
  7105 00004FC6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7106 00004FC9 488B00                  	mov rax, qword [rax]
  7107 00004FCC 803804                  	cmp byte [rax], T_closure
  7108 00004FCF 0F8544190000            	jne L_error_non_closure
  7109 00004FD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7110 00004FD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7111 00004FDB 50                      	push rax
  7112 00004FDC 488B4520                	mov rax, PARAM(0)	; param s1
  7113 00004FE0 50                      	push rax
  7114 00004FE1 6A02                    	push 2	; arg count
  7115 00004FE3 488B4510                	mov rax, ENV
  7116 00004FE7 488B00                  	mov rax, qword [rax + 8 * 0]
  7117 00004FEA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7118 00004FEE 488B00                  	mov rax, qword [rax]
  7119 00004FF1 803804                  	cmp byte [rax], T_closure
  7120 00004FF4 0F851F190000            	jne L_error_non_closure
  7121 00004FFA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7122 00004FFD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7123 00005000 FF7500                  	push qword[rbp]
  7124 00005003 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7125 00005008 48895D10                	mov qword[rbp + 8*2],rbx
  7126 0000500C 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  7127 00005014 BF00000000              	mov rdi,0
  7128 00005019 EB00                    	jmp .L_tc_recycle_frame_loop_0037
  7129                                  .L_tc_recycle_frame_loop_0037:
  7130 0000501B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7131 0000501F 740F                    	je .L_tc_recycle_frame_done_0037
  7132 00005021 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7133 00005026 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7134 0000502B 48FFC7                  	inc rdi
  7135 0000502E EBEB                    	jmp .L_tc_recycle_frame_loop_0037
  7136                                  .L_tc_recycle_frame_done_0037:
  7137 00005030 4889EC                  	mov rsp, rbp	; point to last argument
  7138 00005033 5D                      	pop rbp
  7139 00005034 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7140                                  .L_if_end_0011:
  7141 00005037 C9                      	leave
  7142 00005038 C22000                  	ret AND_KILL_FRAME(2)
  7143                                  .L_lambda_simple_end_0032:	; new closure is in rax
  7144 0000503B 50                      	push rax
  7145 0000503C 488B4520                	mov rax, PARAM(0)	; param run-1
  7146 00005040 8F00                    	pop qword [rax]
  7147 00005042 48B8-                   	mov rax, sob_void
  7147 00005044 [0000000000000000] 
  7148                                  
  7149 0000504C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7150 00005051 E86C190000              	call malloc
  7151 00005056 50                      	push rax
  7152 00005057 BF10000000              	mov rdi, 8 * 2	; new rib
  7153 0000505C E861190000              	call malloc
  7154 00005061 50                      	push rax
  7155 00005062 BF10000000              	mov rdi, 8 * 2	; extended env
  7156 00005067 E856190000              	call malloc
  7157 0000506C 488B7D10                	mov rdi, ENV
  7158 00005070 BE00000000              	mov rsi, 0
  7159 00005075 BA01000000              	mov rdx, 1
  7160                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  7161 0000507A 4883FE01                	cmp rsi, 1
  7162 0000507E 7410                    	je .L_lambda_simple_env_end_0033
  7163 00005080 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7164 00005084 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7165 00005088 48FFC6                  	inc rsi
  7166 0000508B 48FFC2                  	inc rdx
  7167 0000508E EBEA                    	jmp .L_lambda_simple_env_loop_0033
  7168                                  .L_lambda_simple_env_end_0033:
  7169 00005090 5B                      	pop rbx
  7170 00005091 BE00000000              	mov rsi, 0
  7171                                  .L_lambda_simple_params_loop_0033:	; copy params
  7172 00005096 4883FE02                	cmp rsi, 2
  7173 0000509A 740E                    	je .L_lambda_simple_params_end_0033
  7174 0000509C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7175 000050A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7176 000050A5 48FFC6                  	inc rsi
  7177 000050A8 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  7178                                  .L_lambda_simple_params_end_0033:
  7179 000050AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7180 000050AD 4889C3                  	mov rbx, rax
  7181 000050B0 58                      	pop rax
  7182 000050B1 C60004                  	mov byte [rax], T_closure
  7183 000050B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7184 000050B8 48C74009[C5500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  7185 000050C0 E921010000              	jmp .L_lambda_simple_end_0033
  7186                                  .L_lambda_simple_code_0033:	; lambda-simple body
  7187 000050C5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7188 000050CB 740B                    	je .L_lambda_simple_arity_check_ok_0033
  7189 000050CD FF742410                	push qword [rsp + 8 * 2]
  7190 000050D1 6A02                    	push 2
  7191 000050D3 E9A3180000              	jmp L_error_incorrect_arity_simple
  7192                                  .L_lambda_simple_arity_check_ok_0033:
  7193 000050D8 C8000000                	enter 0, 0
  7194                                  	; preparing a non-tail-call
  7195 000050DC 488B4520                	mov rax, PARAM(0)	; param s1
  7196 000050E0 50                      	push rax
  7197 000050E1 6A01                    	push 1	; arg count
  7198 000050E3 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  7199 000050EB 803805                  	cmp byte [rax], T_undefined
  7200 000050EE 0F84A1170000            	je L_error_fvar_undefined
  7201 000050F4 803804                  	cmp byte [rax], T_closure
  7202 000050F7 0F851C180000            	jne L_error_non_closure
  7203 000050FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7204 00005100 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7205 00005103 483D[02000000]          	cmp rax, sob_boolean_false
  7206 00005109 7409                    	je .L_if_else_0012
  7207 0000510B 488B4528                	mov rax, PARAM(1)	; param s2
  7208 0000510F E9CE000000              	jmp .L_if_end_0012
  7209                                  .L_if_else_0012:
  7210                                  	; preparing a tail-call
  7211                                  	; preparing a non-tail-call
  7212 00005114 488B4528                	mov rax, PARAM(1)	; param s2
  7213 00005118 50                      	push rax
  7214                                  	; preparing a non-tail-call
  7215 00005119 488B4520                	mov rax, PARAM(0)	; param s1
  7216 0000511D 50                      	push rax
  7217 0000511E 6A01                    	push 1	; arg count
  7218 00005120 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  7219 00005128 803805                  	cmp byte [rax], T_undefined
  7220 0000512B 0F8464170000            	je L_error_fvar_undefined
  7221 00005131 803804                  	cmp byte [rax], T_closure
  7222 00005134 0F85DF170000            	jne L_error_non_closure
  7223 0000513A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7224 0000513D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7225 00005140 50                      	push rax
  7226 00005141 6A02                    	push 2	; arg count
  7227 00005143 488B4510                	mov rax, ENV
  7228 00005147 488B00                  	mov rax, qword [rax + 8 * 0]
  7229 0000514A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  7230 0000514E 488B00                  	mov rax, qword [rax]
  7231 00005151 803804                  	cmp byte [rax], T_closure
  7232 00005154 0F85BF170000            	jne L_error_non_closure
  7233 0000515A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7234 0000515D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7235 00005160 50                      	push rax
  7236                                  	; preparing a non-tail-call
  7237 00005161 488B4520                	mov rax, PARAM(0)	; param s1
  7238 00005165 50                      	push rax
  7239 00005166 6A01                    	push 1	; arg count
  7240 00005168 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  7241 00005170 803805                  	cmp byte [rax], T_undefined
  7242 00005173 0F841C170000            	je L_error_fvar_undefined
  7243 00005179 803804                  	cmp byte [rax], T_closure
  7244 0000517C 0F8597170000            	jne L_error_non_closure
  7245 00005182 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7246 00005185 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7247 00005188 50                      	push rax
  7248 00005189 6A02                    	push 2	; arg count
  7249 0000518B 488B0425[5B0B0000]      	mov rax, qword [free_var_40]	; free var cons
  7250 00005193 803805                  	cmp byte [rax], T_undefined
  7251 00005196 0F84F9160000            	je L_error_fvar_undefined
  7252 0000519C 803804                  	cmp byte [rax], T_closure
  7253 0000519F 0F8574170000            	jne L_error_non_closure
  7254 000051A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7255 000051A8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7256 000051AB FF7500                  	push qword[rbp]
  7257 000051AE 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7258 000051B3 48895D10                	mov qword[rbp + 8*2],rbx
  7259 000051B7 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  7260 000051BF BF00000000              	mov rdi,0
  7261 000051C4 EB00                    	jmp .L_tc_recycle_frame_loop_0038
  7262                                  .L_tc_recycle_frame_loop_0038:
  7263 000051C6 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7264 000051CA 740F                    	je .L_tc_recycle_frame_done_0038
  7265 000051CC 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7266 000051D1 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7267 000051D6 48FFC7                  	inc rdi
  7268 000051D9 EBEB                    	jmp .L_tc_recycle_frame_loop_0038
  7269                                  .L_tc_recycle_frame_done_0038:
  7270 000051DB 4889EC                  	mov rsp, rbp	; point to last argument
  7271 000051DE 5D                      	pop rbp
  7272 000051DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7273                                  .L_if_end_0012:
  7274 000051E2 C9                      	leave
  7275 000051E3 C22000                  	ret AND_KILL_FRAME(2)
  7276                                  .L_lambda_simple_end_0033:	; new closure is in rax
  7277 000051E6 50                      	push rax
  7278 000051E7 488B4528                	mov rax, PARAM(1)	; param run-2
  7279 000051EB 8F00                    	pop qword [rax]
  7280 000051ED 48B8-                   	mov rax, sob_void
  7280 000051EF [0000000000000000] 
  7281                                  
  7282 000051F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7283 000051FC E8C1170000              	call malloc
  7284 00005201 50                      	push rax
  7285 00005202 BF10000000              	mov rdi, 8 * 2	; new rib
  7286 00005207 E8B6170000              	call malloc
  7287 0000520C 50                      	push rax
  7288 0000520D BF10000000              	mov rdi, 8 * 2	; extended env
  7289 00005212 E8AB170000              	call malloc
  7290 00005217 488B7D10                	mov rdi, ENV
  7291 0000521B BE00000000              	mov rsi, 0
  7292 00005220 BA01000000              	mov rdx, 1
  7293                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  7294 00005225 4883FE01                	cmp rsi, 1
  7295 00005229 7410                    	je .L_lambda_opt_env_end_0007
  7296 0000522B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7297 0000522F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7298 00005233 48FFC6                  	inc rsi
  7299 00005236 48FFC2                  	inc rdx
  7300 00005239 EBEA                    	jmp .L_lambda_opt_env_loop_0007
  7301                                  .L_lambda_opt_env_end_0007:
  7302 0000523B 5B                      	pop rbx
  7303 0000523C BE00000000              	mov rsi, 0
  7304                                  .L_lambda_opt_params_loop_0007:	; copy params
  7305 00005241 4883FE02                	cmp rsi, 2
  7306 00005245 740E                    	je .L_lambda_opt_params_end_0007
  7307 00005247 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7308 0000524C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7309 00005250 48FFC6                  	inc rsi
  7310 00005253 EBEC                    	jmp .L_lambda_opt_params_loop_0007
  7311                                  .L_lambda_opt_params_end_0007:
  7312 00005255 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7313 00005258 4889C3                  	mov rbx, rax
  7314 0000525B 58                      	pop rax
  7315 0000525C C60004                  	mov byte [rax], T_closure
  7316 0000525F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7317 00005263 48C74009[70520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  7318 0000526B E9BC020000              	jmp .L_lambda_opt_end_0007
  7319                                  .L_lambda_opt_code_0007:	; lambda-opt body
  7320 00005270 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7321 00005276 7411                    	je .L_lambda_opt_arity_check_exact_0007
  7322 00005278 0F8F2B010000            	jg .L_lambda_opt_arity_check_more_0007
  7323 0000527E FF742410                	push qword [rsp + 8 * 2]
  7324 00005282 6A00                    	push 0
  7325 00005284 E906170000              	jmp L_error_incorrect_arity_opt
  7326                                  .L_lambda_opt_arity_check_exact_0007:
  7327 00005289 4883EC08                	sub rsp, 8
  7328 0000528D 488B442408              	mov rax, qword[rsp + 8 *1]
  7329 00005292 48890424                	mov qword[rsp], rax  
  7330 00005296 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  7331 0000529B 4889442408              	mov qword[rsp + 8 * 1], rax
  7332 000052A0 B801000000              	mov rax, 1
  7333 000052A5 4889442410              	mov qword[rsp + 8 *2], rax
  7334 000052AA 48B8-                   	mov rax, sob_nil
  7334 000052AC [0100000000000000] 
  7335 000052B4 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  7336 000052B9 C8000000                	enter 0, 0
  7337                                  	; preparing a non-tail-call
  7338 000052BD 488B4520                	mov rax, PARAM(0)	; param s
  7339 000052C1 50                      	push rax
  7340 000052C2 6A01                    	push 1	; arg count
  7341 000052C4 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  7342 000052CC 803805                  	cmp byte [rax], T_undefined
  7343 000052CF 0F84C0150000            	je L_error_fvar_undefined
  7344 000052D5 803804                  	cmp byte [rax], T_closure
  7345 000052D8 0F853B160000            	jne L_error_non_closure
  7346 000052DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  7347 000052E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7348 000052E4 483D[02000000]          	cmp rax, sob_boolean_false
  7349 000052EA 740F                    	je .L_if_else_0014
  7350 000052EC 48B8-                   	mov rax, L_constants + 1
  7350 000052EE [0100000000000000] 
  7351 000052F6 E9A5000000              	jmp .L_if_end_0014
  7352                                  .L_if_else_0014:
  7353                                  	; preparing a tail-call
  7354                                  	; preparing a non-tail-call
  7355 000052FB 488B4520                	mov rax, PARAM(0)	; param s
  7356 000052FF 50                      	push rax
  7357 00005300 6A01                    	push 1	; arg count
  7358 00005302 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  7359 0000530A 803805                  	cmp byte [rax], T_undefined
  7360 0000530D 0F8482150000            	je L_error_fvar_undefined
  7361 00005313 803804                  	cmp byte [rax], T_closure
  7362 00005316 0F85FD150000            	jne L_error_non_closure
  7363 0000531C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7364 0000531F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7365 00005322 50                      	push rax
  7366                                  	; preparing a non-tail-call
  7367 00005323 488B4520                	mov rax, PARAM(0)	; param s
  7368 00005327 50                      	push rax
  7369 00005328 6A01                    	push 1	; arg count
  7370 0000532A 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  7371 00005332 803805                  	cmp byte [rax], T_undefined
  7372 00005335 0F845A150000            	je L_error_fvar_undefined
  7373 0000533B 803804                  	cmp byte [rax], T_closure
  7374 0000533E 0F85D5150000            	jne L_error_non_closure
  7375 00005344 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7376 00005347 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7377 0000534A 50                      	push rax
  7378 0000534B 6A02                    	push 2	; arg count
  7379 0000534D 488B4510                	mov rax, ENV
  7380 00005351 488B00                  	mov rax, qword [rax + 8 * 0]
  7381 00005354 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7382 00005357 488B00                  	mov rax, qword [rax]
  7383 0000535A 803804                  	cmp byte [rax], T_closure
  7384 0000535D 0F85B6150000            	jne L_error_non_closure
  7385 00005363 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7386 00005366 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7387 00005369 FF7500                  	push qword[rbp]
  7388 0000536C 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7389 00005371 48895D10                	mov qword[rbp + 8*2],rbx
  7390 00005375 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  7391 0000537D BF00000000              	mov rdi,0
  7392 00005382 EB00                    	jmp .L_tc_recycle_frame_loop_003a
  7393                                  .L_tc_recycle_frame_loop_003a:
  7394 00005384 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7395 00005388 740F                    	je .L_tc_recycle_frame_done_003a
  7396 0000538A 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7397 0000538F 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7398 00005394 48FFC7                  	inc rdi
  7399 00005397 EBEB                    	jmp .L_tc_recycle_frame_loop_003a
  7400                                  .L_tc_recycle_frame_done_003a:
  7401 00005399 4889EC                  	mov rsp, rbp	; point to last argument
  7402 0000539C 5D                      	pop rbp
  7403 0000539D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7404                                  .L_if_end_0014:
  7405 000053A0 C9                      	leave
  7406 000053A1 C21800                  	ret AND_KILL_FRAME(1)
  7407 000053A4 E983010000              	jmp .L_lambda_opt_end_0007	; new closure is in rax
  7408                                  .L_lambda_opt_arity_check_more_0007:
  7409 000053A9 488B442410              	mov rax, qword[rsp + 2 * 8]
  7410 000053AE 4889C7                  	mov rdi, rax
  7411 000053B1 49B9-                   	mov r9, sob_nil
  7411 000053B3 [0100000000000000] 
  7412 000053BB 4C8B442410              	mov r8, qword[rsp+2*8]
  7413                                  .L_lambda_opt_stack_shrink_loop_0007:
  7414 000053C0 4983F800                	cmp r8, 0
  7415 000053C4 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  7416 000053C6 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  7417 000053CB BF11000000              	mov rdi, 1+8+8	;for pair
  7418 000053D0 E8ED150000              	call malloc	 ;to create the pair in the stack
  7419 000053D5 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  7420 000053D8 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  7421 000053DC 4C894809                 	mov qword[rax+1+8],r9
  7422 000053E0 4989C1                  	mov r9 , rax	 ; for the recursion 
  7423 000053E3 49FFC8                  	dec r8
  7424 000053E6 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  7425                                  .L_lambda_opt_stack_shrink_loop_exit_0007:
  7426 000053E8 488B442410              	mov rax, qword[rsp + 2 * 8]
  7427 000053ED BF01000000              	mov rdi, 1
  7428 000053F2 4829F8                  	sub rax, rdi
  7429 000053F5 4889C7                  	mov rdi, rax
  7430 000053F8 486BC008                	imul rax,8
  7431 000053FC 4801C4                  	add rsp, rax
  7432 000053FF 4889E0                  	mov rax, rsp
  7433 00005402 4989F8                  	mov r8, rdi
  7434 00005405 4D6BC008                	imul r8, 8
  7435 00005409 4C29C0                  	sub rax, r8
  7436 0000540C 4989C2                  	mov r10, rax	; holds the original ret in the stack
  7437 0000540F 4983C218                	add r10, 8*3
  7438 00005413 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  7439 00005417 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  7440 0000541A 4D6BC008                	imul r8,8
  7441 0000541E 4C01C0                  	add rax, r8
  7442 00005421 4C8908                  	mov qword[rax] ,r9
  7443 00005424 4983EA18                 	sub r10, 8*3
  7444 00005428 48C744241001000000      	mov qword [rsp+2*8], 1
  7445 00005431 498B4208                	mov rax, qword[r10 + 1 * 8]
  7446 00005435 4889442408              	mov qword[rsp + 1*8] ,rax
  7447 0000543A 498B02                  	mov rax, qword[r10]
  7448 0000543D 48890424                	mov qword[rsp], rax
  7449 00005441 C8000000                	enter 0, 0
  7450                                  	; preparing a non-tail-call
  7451 00005445 488B4520                	mov rax, PARAM(0)	; param s
  7452 00005449 50                      	push rax
  7453 0000544A 6A01                    	push 1	; arg count
  7454 0000544C 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  7455 00005454 803805                  	cmp byte [rax], T_undefined
  7456 00005457 0F8438140000            	je L_error_fvar_undefined
  7457 0000545D 803804                  	cmp byte [rax], T_closure
  7458 00005460 0F85B3140000            	jne L_error_non_closure
  7459 00005466 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7460 00005469 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7461 0000546C 483D[02000000]          	cmp rax, sob_boolean_false
  7462 00005472 740F                    	je .L_if_else_0013
  7463 00005474 48B8-                   	mov rax, L_constants + 1
  7463 00005476 [0100000000000000] 
  7464 0000547E E9A5000000              	jmp .L_if_end_0013
  7465                                  .L_if_else_0013:
  7466                                  	; preparing a tail-call
  7467                                  	; preparing a non-tail-call
  7468 00005483 488B4520                	mov rax, PARAM(0)	; param s
  7469 00005487 50                      	push rax
  7470 00005488 6A01                    	push 1	; arg count
  7471 0000548A 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  7472 00005492 803805                  	cmp byte [rax], T_undefined
  7473 00005495 0F84FA130000            	je L_error_fvar_undefined
  7474 0000549B 803804                  	cmp byte [rax], T_closure
  7475 0000549E 0F8575140000            	jne L_error_non_closure
  7476 000054A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7477 000054A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7478 000054AA 50                      	push rax
  7479                                  	; preparing a non-tail-call
  7480 000054AB 488B4520                	mov rax, PARAM(0)	; param s
  7481 000054AF 50                      	push rax
  7482 000054B0 6A01                    	push 1	; arg count
  7483 000054B2 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  7484 000054BA 803805                  	cmp byte [rax], T_undefined
  7485 000054BD 0F84D2130000            	je L_error_fvar_undefined
  7486 000054C3 803804                  	cmp byte [rax], T_closure
  7487 000054C6 0F854D140000            	jne L_error_non_closure
  7488 000054CC FF7001                  	push SOB_CLOSURE_ENV(rax)
  7489 000054CF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7490 000054D2 50                      	push rax
  7491 000054D3 6A02                    	push 2	; arg count
  7492 000054D5 488B4510                	mov rax, ENV
  7493 000054D9 488B00                  	mov rax, qword [rax + 8 * 0]
  7494 000054DC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  7495 000054DF 488B00                  	mov rax, qword [rax]
  7496 000054E2 803804                  	cmp byte [rax], T_closure
  7497 000054E5 0F852E140000            	jne L_error_non_closure
  7498 000054EB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7499 000054EE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7500 000054F1 FF7500                  	push qword[rbp]
  7501 000054F4 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7502 000054F9 48895D10                	mov qword[rbp + 8*2],rbx
  7503 000054FD 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  7504 00005505 BF00000000              	mov rdi,0
  7505 0000550A EB00                    	jmp .L_tc_recycle_frame_loop_0039
  7506                                  .L_tc_recycle_frame_loop_0039:
  7507 0000550C 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7508 00005510 740F                    	je .L_tc_recycle_frame_done_0039
  7509 00005512 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7510 00005517 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7511 0000551C 48FFC7                  	inc rdi
  7512 0000551F EBEB                    	jmp .L_tc_recycle_frame_loop_0039
  7513                                  .L_tc_recycle_frame_done_0039:
  7514 00005521 4889EC                  	mov rsp, rbp	; point to last argument
  7515 00005524 5D                      	pop rbp
  7516 00005525 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7517                                  .L_if_end_0013:
  7518 00005528 C9                      	leave
  7519 00005529 C21800                  	ret AND_KILL_FRAME(1)
  7520                                  .L_lambda_opt_end_0007:	; new closure is in rax
  7521 0000552C C9                      	leave
  7522 0000552D C22000                  	ret AND_KILL_FRAME(2)
  7523                                  .L_lambda_simple_end_0031:	; new closure is in rax
  7524 00005530 803804                  	cmp byte [rax], T_closure
  7525 00005533 0F85E0130000            	jne L_error_non_closure
  7526 00005539 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7527 0000553C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7528 0000553F 48890425[3B090000]      	mov qword [free_var_8], rax
  7529 00005547 48B8-                   	mov rax, sob_void
  7529 00005549 [0000000000000000] 
  7530                                  
  7531 00005551 4889C7                  	mov rdi, rax
  7532 00005554 E8BE160000              	call print_sexpr_if_not_void
  7533                                  	; preparing a non-tail-call
  7534 00005559 48B8-                   	mov rax, L_constants + 1993
  7534 0000555B [C907000000000000] 
  7535 00005563 50                      	push rax
  7536 00005564 6A01                    	push 1	; arg count
  7537 00005566 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7538 0000556B E852140000              	call malloc
  7539 00005570 50                      	push rax
  7540 00005571 BF00000000              	mov rdi, 8 * 0	; new rib
  7541 00005576 E847140000              	call malloc
  7542 0000557B 50                      	push rax
  7543 0000557C BF08000000              	mov rdi, 8 * 1	; extended env
  7544 00005581 E83C140000              	call malloc
  7545 00005586 488B7D10                	mov rdi, ENV
  7546 0000558A BE00000000              	mov rsi, 0
  7547 0000558F BA01000000              	mov rdx, 1
  7548                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  7549 00005594 4883FE00                	cmp rsi, 0
  7550 00005598 7410                    	je .L_lambda_simple_env_end_0034
  7551 0000559A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7552 0000559E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7553 000055A2 48FFC6                  	inc rsi
  7554 000055A5 48FFC2                  	inc rdx
  7555 000055A8 EBEA                    	jmp .L_lambda_simple_env_loop_0034
  7556                                  .L_lambda_simple_env_end_0034:
  7557 000055AA 5B                      	pop rbx
  7558 000055AB BE00000000              	mov rsi, 0
  7559                                  .L_lambda_simple_params_loop_0034:	; copy params
  7560 000055B0 4883FE00                	cmp rsi, 0
  7561 000055B4 740E                    	je .L_lambda_simple_params_end_0034
  7562 000055B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7563 000055BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7564 000055BF 48FFC6                  	inc rsi
  7565 000055C2 EBEC                    	jmp .L_lambda_simple_params_loop_0034
  7566                                  .L_lambda_simple_params_end_0034:
  7567 000055C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7568 000055C7 4889C3                  	mov rbx, rax
  7569 000055CA 58                      	pop rax
  7570 000055CB C60004                  	mov byte [rax], T_closure
  7571 000055CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7572 000055D2 48C74009[DF550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  7573 000055DA E973040000              	jmp .L_lambda_simple_end_0034
  7574                                  .L_lambda_simple_code_0034:	; lambda-simple body
  7575 000055DF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7576 000055E5 740B                    	je .L_lambda_simple_arity_check_ok_0034
  7577 000055E7 FF742410                	push qword [rsp + 8 * 2]
  7578 000055EB 6A01                    	push 1
  7579 000055ED E989130000              	jmp L_error_incorrect_arity_simple
  7580                                  .L_lambda_simple_arity_check_ok_0034:
  7581 000055F2 C8000000                	enter 0, 0
  7582 000055F6 488B5D20                	mov rbx, qword [rbp + 8 * (4 + 0)]
  7583 000055FA 488903                  	mov qword [rbx], rax
  7584                                  
  7585 000055FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7586 00005602 E8BB130000              	call malloc
  7587 00005607 50                      	push rax
  7588 00005608 BF08000000              	mov rdi, 8 * 1	; new rib
  7589 0000560D E8B0130000              	call malloc
  7590 00005612 50                      	push rax
  7591 00005613 BF10000000              	mov rdi, 8 * 2	; extended env
  7592 00005618 E8A5130000              	call malloc
  7593 0000561D 488B7D10                	mov rdi, ENV
  7594 00005621 BE00000000              	mov rsi, 0
  7595 00005626 BA01000000              	mov rdx, 1
  7596                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  7597 0000562B 4883FE01                	cmp rsi, 1
  7598 0000562F 7410                    	je .L_lambda_simple_env_end_0035
  7599 00005631 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7600 00005635 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7601 00005639 48FFC6                  	inc rsi
  7602 0000563C 48FFC2                  	inc rdx
  7603 0000563F EBEA                    	jmp .L_lambda_simple_env_loop_0035
  7604                                  .L_lambda_simple_env_end_0035:
  7605 00005641 5B                      	pop rbx
  7606 00005642 BE00000000              	mov rsi, 0
  7607                                  .L_lambda_simple_params_loop_0035:	; copy params
  7608 00005647 4883FE01                	cmp rsi, 1
  7609 0000564B 740E                    	je .L_lambda_simple_params_end_0035
  7610 0000564D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7611 00005652 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7612 00005656 48FFC6                  	inc rsi
  7613 00005659 EBEC                    	jmp .L_lambda_simple_params_loop_0035
  7614                                  .L_lambda_simple_params_end_0035:
  7615 0000565B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7616 0000565E 4889C3                  	mov rbx, rax
  7617 00005661 58                      	pop rax
  7618 00005662 C60004                  	mov byte [rax], T_closure
  7619 00005665 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7620 00005669 48C74009[76560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  7621 00005671 E960010000              	jmp .L_lambda_simple_end_0035
  7622                                  .L_lambda_simple_code_0035:	; lambda-simple body
  7623 00005676 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7624 0000567C 740B                    	je .L_lambda_simple_arity_check_ok_0035
  7625 0000567E FF742410                	push qword [rsp + 8 * 2]
  7626 00005682 6A03                    	push 3
  7627 00005684 E9F2120000              	jmp L_error_incorrect_arity_simple
  7628                                  .L_lambda_simple_arity_check_ok_0035:
  7629 00005689 C8000000                	enter 0, 0
  7630                                  	; preparing a non-tail-call
  7631 0000568D 488B4530                	mov rax, PARAM(2)	; param ss
  7632 00005691 50                      	push rax
  7633 00005692 488B0425[270C0000]      	mov rax, qword [free_var_52]	; free var null?
  7634 0000569A 803805                  	cmp byte [rax], T_undefined
  7635 0000569D 0F84F2110000            	je L_error_fvar_undefined
  7636 000056A3 50                      	push rax
  7637 000056A4 6A02                    	push 2	; arg count
  7638 000056A6 488B0425[380C0000]      	mov rax, qword [free_var_53]	; free var ormap
  7639 000056AE 803805                  	cmp byte [rax], T_undefined
  7640 000056B1 0F84DE110000            	je L_error_fvar_undefined
  7641 000056B7 803804                  	cmp byte [rax], T_closure
  7642 000056BA 0F8559120000            	jne L_error_non_closure
  7643 000056C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7644 000056C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7645 000056C6 483D[02000000]          	cmp rax, sob_boolean_false
  7646 000056CC 7409                    	je .L_if_else_0015
  7647 000056CE 488B4528                	mov rax, PARAM(1)	; param unit
  7648 000056D2 E9FB000000              	jmp .L_if_end_0015
  7649                                  .L_if_else_0015:
  7650                                  	; preparing a tail-call
  7651                                  	; preparing a non-tail-call
  7652 000056D7 488B4530                	mov rax, PARAM(2)	; param ss
  7653 000056DB 50                      	push rax
  7654 000056DC 488B0425[4A0B0000]      	mov rax, qword [free_var_39]	; free var cdr
  7655 000056E4 803805                  	cmp byte [rax], T_undefined
  7656 000056E7 0F84A8110000            	je L_error_fvar_undefined
  7657 000056ED 50                      	push rax
  7658 000056EE 6A02                    	push 2	; arg count
  7659 000056F0 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  7660 000056F8 803805                  	cmp byte [rax], T_undefined
  7661 000056FB 0F8494110000            	je L_error_fvar_undefined
  7662 00005701 803804                  	cmp byte [rax], T_closure
  7663 00005704 0F850F120000            	jne L_error_non_closure
  7664 0000570A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7665 0000570D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7666 00005710 50                      	push rax
  7667                                  	; preparing a non-tail-call
  7668                                  	; preparing a non-tail-call
  7669 00005711 488B4530                	mov rax, PARAM(2)	; param ss
  7670 00005715 50                      	push rax
  7671 00005716 488B0425[4B0A0000]      	mov rax, qword [free_var_24]	; free var car
  7672 0000571E 803805                  	cmp byte [rax], T_undefined
  7673 00005721 0F846E110000            	je L_error_fvar_undefined
  7674 00005727 50                      	push rax
  7675 00005728 6A02                    	push 2	; arg count
  7676 0000572A 488B0425[050C0000]      	mov rax, qword [free_var_50]	; free var map
  7677 00005732 803805                  	cmp byte [rax], T_undefined
  7678 00005735 0F845A110000            	je L_error_fvar_undefined
  7679 0000573B 803804                  	cmp byte [rax], T_closure
  7680 0000573E 0F85D5110000            	jne L_error_non_closure
  7681 00005744 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7682 00005747 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7683 0000574A 50                      	push rax
  7684 0000574B 488B4528                	mov rax, PARAM(1)	; param unit
  7685 0000574F 50                      	push rax
  7686 00005750 488B4520                	mov rax, PARAM(0)	; param f
  7687 00005754 50                      	push rax
  7688 00005755 6A03                    	push 3	; arg count
  7689 00005757 488B0425[4C090000]      	mov rax, qword [free_var_9]	; free var apply
  7690 0000575F 803805                  	cmp byte [rax], T_undefined
  7691 00005762 0F842D110000            	je L_error_fvar_undefined
  7692 00005768 803804                  	cmp byte [rax], T_closure
  7693 0000576B 0F85A8110000            	jne L_error_non_closure
  7694 00005771 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7695 00005774 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7696 00005777 50                      	push rax
  7697 00005778 488B4520                	mov rax, PARAM(0)	; param f
  7698 0000577C 50                      	push rax
  7699 0000577D 6A03                    	push 3	; arg count
  7700 0000577F 488B4510                	mov rax, ENV
  7701 00005783 488B00                  	mov rax, qword [rax + 8 * 0]
  7702 00005786 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7703 00005789 488B00                  	mov rax, qword [rax]
  7704 0000578C 803804                  	cmp byte [rax], T_closure
  7705 0000578F 0F8584110000            	jne L_error_non_closure
  7706 00005795 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7707 00005798 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7708 0000579B FF7500                  	push qword[rbp]
  7709 0000579E 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7710 000057A3 48895D10                	mov qword[rbp + 8*2],rbx
  7711 000057A7 48C7451803000000        	mov qword[rbp + 8*3], 3	 ;n turns to m
  7712 000057AF BF00000000              	mov rdi,0
  7713 000057B4 EB00                    	jmp .L_tc_recycle_frame_loop_003b
  7714                                  .L_tc_recycle_frame_loop_003b:
  7715 000057B6 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7716 000057BA 740F                    	je .L_tc_recycle_frame_done_003b
  7717 000057BC 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7718 000057C1 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7719 000057C6 48FFC7                  	inc rdi
  7720 000057C9 EBEB                    	jmp .L_tc_recycle_frame_loop_003b
  7721                                  .L_tc_recycle_frame_done_003b:
  7722 000057CB 4889EC                  	mov rsp, rbp	; point to last argument
  7723 000057CE 5D                      	pop rbp
  7724 000057CF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7725                                  .L_if_end_0015:
  7726 000057D2 C9                      	leave
  7727 000057D3 C22800                  	ret AND_KILL_FRAME(3)
  7728                                  .L_lambda_simple_end_0035:	; new closure is in rax
  7729 000057D6 50                      	push rax
  7730 000057D7 488B4520                	mov rax, PARAM(0)	; param run
  7731 000057DB 8F00                    	pop qword [rax]
  7732 000057DD 48B8-                   	mov rax, sob_void
  7732 000057DF [0000000000000000] 
  7733                                  
  7734 000057E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7735 000057EC E8D1110000              	call malloc
  7736 000057F1 50                      	push rax
  7737 000057F2 BF08000000              	mov rdi, 8 * 1	; new rib
  7738 000057F7 E8C6110000              	call malloc
  7739 000057FC 50                      	push rax
  7740 000057FD BF10000000              	mov rdi, 8 * 2	; extended env
  7741 00005802 E8BB110000              	call malloc
  7742 00005807 488B7D10                	mov rdi, ENV
  7743 0000580B BE00000000              	mov rsi, 0
  7744 00005810 BA01000000              	mov rdx, 1
  7745                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  7746 00005815 4883FE01                	cmp rsi, 1
  7747 00005819 7410                    	je .L_lambda_opt_env_end_0008
  7748 0000581B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7749 0000581F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7750 00005823 48FFC6                  	inc rsi
  7751 00005826 48FFC2                  	inc rdx
  7752 00005829 EBEA                    	jmp .L_lambda_opt_env_loop_0008
  7753                                  .L_lambda_opt_env_end_0008:
  7754 0000582B 5B                      	pop rbx
  7755 0000582C BE00000000              	mov rsi, 0
  7756                                  .L_lambda_opt_params_loop_0008:	; copy params
  7757 00005831 4883FE01                	cmp rsi, 1
  7758 00005835 740E                    	je .L_lambda_opt_params_end_0008
  7759 00005837 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7760 0000583C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7761 00005840 48FFC6                  	inc rsi
  7762 00005843 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  7763                                  .L_lambda_opt_params_end_0008:
  7764 00005845 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7765 00005848 4889C3                  	mov rbx, rax
  7766 0000584B 58                      	pop rax
  7767 0000584C C60004                  	mov byte [rax], T_closure
  7768 0000584F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7769 00005853 48C74009[60580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  7770 0000585B E9EE010000              	jmp .L_lambda_opt_end_0008
  7771                                  .L_lambda_opt_code_0008:	; lambda-opt body
  7772 00005860 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7773 00005866 7411                    	je .L_lambda_opt_arity_check_exact_0008
  7774 00005868 0F8FC0000000            	jg .L_lambda_opt_arity_check_more_0008
  7775 0000586E FF742410                	push qword [rsp + 8 * 2]
  7776 00005872 6A02                    	push 2
  7777 00005874 E916110000              	jmp L_error_incorrect_arity_opt
  7778                                  .L_lambda_opt_arity_check_exact_0008:
  7779 00005879 4883EC08                	sub rsp, 8
  7780 0000587D 488B442408              	mov rax, qword[rsp + 8 *1]
  7781 00005882 48890424                	mov qword[rsp], rax  
  7782 00005886 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  7783 0000588B 4889442408              	mov qword[rsp + 8 * 1], rax
  7784 00005890 B803000000              	mov rax, 3
  7785 00005895 4889442410              	mov qword[rsp + 8 *2], rax
  7786 0000589A 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  7787 0000589F 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  7788 000058A4 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  7789 000058A9 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  7790 000058AE 48B8-                   	mov rax, sob_nil
  7790 000058B0 [0100000000000000] 
  7791 000058B8 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  7792 000058BD C8000000                	enter 0, 0
  7793                                  	; preparing a tail-call
  7794 000058C1 488B4530                	mov rax, PARAM(2)	; param ss
  7795 000058C5 50                      	push rax
  7796 000058C6 488B4528                	mov rax, PARAM(1)	; param unit
  7797 000058CA 50                      	push rax
  7798 000058CB 488B4520                	mov rax, PARAM(0)	; param f
  7799 000058CF 50                      	push rax
  7800 000058D0 6A03                    	push 3	; arg count
  7801 000058D2 488B4510                	mov rax, ENV
  7802 000058D6 488B00                  	mov rax, qword [rax + 8 * 0]
  7803 000058D9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7804 000058DC 488B00                  	mov rax, qword [rax]
  7805 000058DF 803804                  	cmp byte [rax], T_closure
  7806 000058E2 0F8531100000            	jne L_error_non_closure
  7807 000058E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7808 000058EB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7809 000058EE FF7500                  	push qword[rbp]
  7810 000058F1 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7811 000058F6 48895D10                	mov qword[rbp + 8*2],rbx
  7812 000058FA 48C7451803000000        	mov qword[rbp + 8*3], 3	 ;n turns to m
  7813 00005902 BF00000000              	mov rdi,0
  7814 00005907 EB00                    	jmp .L_tc_recycle_frame_loop_003d
  7815                                  .L_tc_recycle_frame_loop_003d:
  7816 00005909 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7817 0000590D 740F                    	je .L_tc_recycle_frame_done_003d
  7818 0000590F 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7819 00005914 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7820 00005919 48FFC7                  	inc rdi
  7821 0000591C EBEB                    	jmp .L_tc_recycle_frame_loop_003d
  7822                                  .L_tc_recycle_frame_done_003d:
  7823 0000591E 4889EC                  	mov rsp, rbp	; point to last argument
  7824 00005921 5D                      	pop rbp
  7825 00005922 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7826 00005925 C9                      	leave
  7827 00005926 C22800                  	ret AND_KILL_FRAME(3)
  7828 00005929 E920010000              	jmp .L_lambda_opt_end_0008	; new closure is in rax
  7829                                  .L_lambda_opt_arity_check_more_0008:
  7830 0000592E 488B442410              	mov rax, qword[rsp + 2 * 8]
  7831 00005933 4889C7                  	mov rdi, rax
  7832 00005936 49B9-                   	mov r9, sob_nil
  7832 00005938 [0100000000000000] 
  7833 00005940 4C8B442410              	mov r8, qword[rsp+2*8]
  7834                                  .L_lambda_opt_stack_shrink_loop_0008:
  7835 00005945 4983F802                	cmp r8, 2
  7836 00005949 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  7837 0000594B 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  7838 00005950 BF11000000              	mov rdi, 1+8+8	;for pair
  7839 00005955 E868100000              	call malloc	 ;to create the pair in the stack
  7840 0000595A C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  7841 0000595D 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  7842 00005961 4C894809                 	mov qword[rax+1+8],r9
  7843 00005965 4989C1                  	mov r9 , rax	 ; for the recursion 
  7844 00005968 49FFC8                  	dec r8
  7845 0000596B EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  7846                                  .L_lambda_opt_stack_shrink_loop_exit_0008:
  7847 0000596D 488B442410              	mov rax, qword[rsp + 2 * 8]
  7848 00005972 BF03000000              	mov rdi, 3
  7849 00005977 4829F8                  	sub rax, rdi
  7850 0000597A 4889C7                  	mov rdi, rax
  7851 0000597D 486BC008                	imul rax,8
  7852 00005981 4801C4                  	add rsp, rax
  7853 00005984 4889E0                  	mov rax, rsp
  7854 00005987 4989F8                  	mov r8, rdi
  7855 0000598A 4D6BC008                	imul r8, 8
  7856 0000598E 4C29C0                  	sub rax, r8
  7857 00005991 4989C2                  	mov r10, rax	; holds the original ret in the stack
  7858 00005994 4983C218                	add r10, 8*3
  7859 00005998 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  7860 0000599C 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  7861 0000599F 4D6BC008                	imul r8,8
  7862 000059A3 4C01C0                  	add rax, r8
  7863 000059A6 4C8908                  	mov qword[rax] ,r9
  7864 000059A9 4D89D0                   	mov r8, r10
  7865 000059AC 4983C008                	add r8, 8 * 1
  7866 000059B0 4D8B08                  	mov r9,qword[r8]
  7867 000059B3 4D890CF8                	mov qword [r8 + rdi * 8], r9
  7868 000059B7 4D89D0                  	mov r8, r10
  7869 000059BA 4983C000                	add r8, 8 * 0
  7870 000059BE 4D8B08                  	mov r9,qword[r8]
  7871 000059C1 4D890CF8                	mov qword [r8 + rdi * 8], r9
  7872 000059C5 4983EA18                	sub r10, 8*3
  7873 000059C9 48C744241003000000      	mov qword [rsp+2*8], 3
  7874 000059D2 498B4208                	mov rax, qword[r10 + 1 * 8]
  7875 000059D6 4889442408              	mov qword[rsp + 1*8] ,rax
  7876 000059DB 498B02                  	mov rax, qword[r10]
  7877 000059DE 48890424                	mov qword[rsp], rax
  7878 000059E2 C8000000                	enter 0, 0
  7879                                  	; preparing a tail-call
  7880 000059E6 488B4530                	mov rax, PARAM(2)	; param ss
  7881 000059EA 50                      	push rax
  7882 000059EB 488B4528                	mov rax, PARAM(1)	; param unit
  7883 000059EF 50                      	push rax
  7884 000059F0 488B4520                	mov rax, PARAM(0)	; param f
  7885 000059F4 50                      	push rax
  7886 000059F5 6A03                    	push 3	; arg count
  7887 000059F7 488B4510                	mov rax, ENV
  7888 000059FB 488B00                  	mov rax, qword [rax + 8 * 0]
  7889 000059FE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  7890 00005A01 488B00                  	mov rax, qword [rax]
  7891 00005A04 803804                  	cmp byte [rax], T_closure
  7892 00005A07 0F850C0F0000            	jne L_error_non_closure
  7893 00005A0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7894 00005A10 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7895 00005A13 FF7500                  	push qword[rbp]
  7896 00005A16 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7897 00005A1B 48895D10                	mov qword[rbp + 8*2],rbx
  7898 00005A1F 48C7451803000000        	mov qword[rbp + 8*3], 3	 ;n turns to m
  7899 00005A27 BF00000000              	mov rdi,0
  7900 00005A2C EB00                    	jmp .L_tc_recycle_frame_loop_003c
  7901                                  .L_tc_recycle_frame_loop_003c:
  7902 00005A2E 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7903 00005A32 740F                    	je .L_tc_recycle_frame_done_003c
  7904 00005A34 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7905 00005A39 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7906 00005A3E 48FFC7                  	inc rdi
  7907 00005A41 EBEB                    	jmp .L_tc_recycle_frame_loop_003c
  7908                                  .L_tc_recycle_frame_done_003c:
  7909 00005A43 4889EC                  	mov rsp, rbp	; point to last argument
  7910 00005A46 5D                      	pop rbp
  7911 00005A47 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7912 00005A4A C9                      	leave
  7913 00005A4B C22800                  	ret AND_KILL_FRAME(3)
  7914                                  .L_lambda_opt_end_0008:	; new closure is in rax
  7915 00005A4E C9                      	leave
  7916 00005A4F C21800                  	ret AND_KILL_FRAME(1)
  7917                                  .L_lambda_simple_end_0034:	; new closure is in rax
  7918 00005A52 803804                  	cmp byte [rax], T_closure
  7919 00005A55 0F85BE0E0000            	jne L_error_non_closure
  7920 00005A5B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7921 00005A5E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7922 00005A61 48890425[7D0B0000]      	mov qword [free_var_42], rax
  7923 00005A69 48B8-                   	mov rax, sob_void
  7923 00005A6B [0000000000000000] 
  7924                                  
  7925 00005A73 4889C7                  	mov rdi, rax
  7926 00005A76 E89C110000              	call print_sexpr_if_not_void
  7927                                  	; preparing a non-tail-call
  7928 00005A7B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7929 00005A80 E83D0F0000              	call malloc
  7930 00005A85 50                      	push rax
  7931 00005A86 BF00000000              	mov rdi, 8 * 0	; new rib
  7932 00005A8B E8320F0000              	call malloc
  7933 00005A90 50                      	push rax
  7934 00005A91 BF08000000              	mov rdi, 8 * 1	; extended env
  7935 00005A96 E8270F0000              	call malloc
  7936 00005A9B 488B7D10                	mov rdi, ENV
  7937 00005A9F BE00000000              	mov rsi, 0
  7938 00005AA4 BA01000000              	mov rdx, 1
  7939                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  7940 00005AA9 4883FE00                	cmp rsi, 0
  7941 00005AAD 7410                    	je .L_lambda_simple_env_end_0036
  7942 00005AAF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7943 00005AB3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7944 00005AB7 48FFC6                  	inc rsi
  7945 00005ABA 48FFC2                  	inc rdx
  7946 00005ABD EBEA                    	jmp .L_lambda_simple_env_loop_0036
  7947                                  .L_lambda_simple_env_end_0036:
  7948 00005ABF 5B                      	pop rbx
  7949 00005AC0 BE00000000              	mov rsi, 0
  7950                                  .L_lambda_simple_params_loop_0036:	; copy params
  7951 00005AC5 4883FE00                	cmp rsi, 0
  7952 00005AC9 740E                    	je .L_lambda_simple_params_end_0036
  7953 00005ACB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7954 00005AD0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7955 00005AD4 48FFC6                  	inc rsi
  7956 00005AD7 EBEC                    	jmp .L_lambda_simple_params_loop_0036
  7957                                  .L_lambda_simple_params_end_0036:
  7958 00005AD9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7959 00005ADC 4889C3                  	mov rbx, rax
  7960 00005ADF 58                      	pop rax
  7961 00005AE0 C60004                  	mov byte [rax], T_closure
  7962 00005AE3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7963 00005AE7 48C74009[F45A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  7964 00005AEF E98A000000              	jmp .L_lambda_simple_end_0036
  7965                                  .L_lambda_simple_code_0036:	; lambda-simple body
  7966 00005AF4 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7967 00005AFA 740B                    	je .L_lambda_simple_arity_check_ok_0036
  7968 00005AFC FF742410                	push qword [rsp + 8 * 2]
  7969 00005B00 6A00                    	push 0
  7970 00005B02 E9740E0000              	jmp L_error_incorrect_arity_simple
  7971                                  .L_lambda_simple_arity_check_ok_0036:
  7972 00005B07 C8000000                	enter 0, 0
  7973                                  	; preparing a tail-call
  7974 00005B0B 48B8-                   	mov rax, L_constants + 2168
  7974 00005B0D [7808000000000000] 
  7975 00005B15 50                      	push rax
  7976 00005B16 48B8-                   	mov rax, L_constants + 2159
  7976 00005B18 [6F08000000000000] 
  7977 00005B20 50                      	push rax
  7978 00005B21 6A02                    	push 2	; arg count
  7979 00005B23 488B0425[6C0B0000]      	mov rax, qword [free_var_41]	; free var error
  7980 00005B2B 803805                  	cmp byte [rax], T_undefined
  7981 00005B2E 0F84610D0000            	je L_error_fvar_undefined
  7982 00005B34 803804                  	cmp byte [rax], T_closure
  7983 00005B37 0F85DC0D0000            	jne L_error_non_closure
  7984 00005B3D FF7001                  	push SOB_CLOSURE_ENV(rax)
  7985 00005B40 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7986 00005B43 FF7500                  	push qword[rbp]
  7987 00005B46 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  7988 00005B4B 48895D10                	mov qword[rbp + 8*2],rbx
  7989 00005B4F 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  7990 00005B57 BF00000000              	mov rdi,0
  7991 00005B5C EB00                    	jmp .L_tc_recycle_frame_loop_003e
  7992                                  .L_tc_recycle_frame_loop_003e:
  7993 00005B5E 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  7994 00005B62 740F                    	je .L_tc_recycle_frame_done_003e
  7995 00005B64 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  7996 00005B69 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  7997 00005B6E 48FFC7                  	inc rdi
  7998 00005B71 EBEB                    	jmp .L_tc_recycle_frame_loop_003e
  7999                                  .L_tc_recycle_frame_done_003e:
  8000 00005B73 4889EC                  	mov rsp, rbp	; point to last argument
  8001 00005B76 5D                      	pop rbp
  8002 00005B77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8003 00005B7A C9                      	leave
  8004 00005B7B C21000                  	ret AND_KILL_FRAME(0)
  8005                                  .L_lambda_simple_end_0036:	; new closure is in rax
  8006 00005B7E 50                      	push rax
  8007 00005B7F 6A01                    	push 1	; arg count
  8008 00005B81 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8009 00005B86 E8370E0000              	call malloc
  8010 00005B8B 50                      	push rax
  8011 00005B8C BF00000000              	mov rdi, 8 * 0	; new rib
  8012 00005B91 E82C0E0000              	call malloc
  8013 00005B96 50                      	push rax
  8014 00005B97 BF08000000              	mov rdi, 8 * 1	; extended env
  8015 00005B9C E8210E0000              	call malloc
  8016 00005BA1 488B7D10                	mov rdi, ENV
  8017 00005BA5 BE00000000              	mov rsi, 0
  8018 00005BAA BA01000000              	mov rdx, 1
  8019                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  8020 00005BAF 4883FE00                	cmp rsi, 0
  8021 00005BB3 7410                    	je .L_lambda_simple_env_end_0037
  8022 00005BB5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8023 00005BB9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8024 00005BBD 48FFC6                  	inc rsi
  8025 00005BC0 48FFC2                  	inc rdx
  8026 00005BC3 EBEA                    	jmp .L_lambda_simple_env_loop_0037
  8027                                  .L_lambda_simple_env_end_0037:
  8028 00005BC5 5B                      	pop rbx
  8029 00005BC6 BE00000000              	mov rsi, 0
  8030                                  .L_lambda_simple_params_loop_0037:	; copy params
  8031 00005BCB 4883FE00                	cmp rsi, 0
  8032 00005BCF 740E                    	je .L_lambda_simple_params_end_0037
  8033 00005BD1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8034 00005BD6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8035 00005BDA 48FFC6                  	inc rsi
  8036 00005BDD EBEC                    	jmp .L_lambda_simple_params_loop_0037
  8037                                  .L_lambda_simple_params_end_0037:
  8038 00005BDF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8039 00005BE2 4889C3                  	mov rbx, rax
  8040 00005BE5 58                      	pop rax
  8041 00005BE6 C60004                  	mov byte [rax], T_closure
  8042 00005BE9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8043 00005BED 48C74009[FA5B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  8044 00005BF5 E9000C0000              	jmp .L_lambda_simple_end_0037
  8045                                  .L_lambda_simple_code_0037:	; lambda-simple body
  8046 00005BFA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8047 00005C00 740B                    	je .L_lambda_simple_arity_check_ok_0037
  8048 00005C02 FF742410                	push qword [rsp + 8 * 2]
  8049 00005C06 6A01                    	push 1
  8050 00005C08 E96E0D0000              	jmp L_error_incorrect_arity_simple
  8051                                  .L_lambda_simple_arity_check_ok_0037:
  8052 00005C0D C8000000                	enter 0, 0
  8053                                  	; preparing a tail-call
  8054 00005C11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8055 00005C16 E8A70D0000              	call malloc
  8056 00005C1B 50                      	push rax
  8057 00005C1C BF08000000              	mov rdi, 8 * 1	; new rib
  8058 00005C21 E89C0D0000              	call malloc
  8059 00005C26 50                      	push rax
  8060 00005C27 BF10000000              	mov rdi, 8 * 2	; extended env
  8061 00005C2C E8910D0000              	call malloc
  8062 00005C31 488B7D10                	mov rdi, ENV
  8063 00005C35 BE00000000              	mov rsi, 0
  8064 00005C3A BA01000000              	mov rdx, 1
  8065                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  8066 00005C3F 4883FE01                	cmp rsi, 1
  8067 00005C43 7410                    	je .L_lambda_simple_env_end_0038
  8068 00005C45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8069 00005C49 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8070 00005C4D 48FFC6                  	inc rsi
  8071 00005C50 48FFC2                  	inc rdx
  8072 00005C53 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  8073                                  .L_lambda_simple_env_end_0038:
  8074 00005C55 5B                      	pop rbx
  8075 00005C56 BE00000000              	mov rsi, 0
  8076                                  .L_lambda_simple_params_loop_0038:	; copy params
  8077 00005C5B 4883FE01                	cmp rsi, 1
  8078 00005C5F 740E                    	je .L_lambda_simple_params_end_0038
  8079 00005C61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8080 00005C66 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8081 00005C6A 48FFC6                  	inc rsi
  8082 00005C6D EBEC                    	jmp .L_lambda_simple_params_loop_0038
  8083                                  .L_lambda_simple_params_end_0038:
  8084 00005C6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8085 00005C72 4889C3                  	mov rbx, rax
  8086 00005C75 58                      	pop rax
  8087 00005C76 C60004                  	mov byte [rax], T_closure
  8088 00005C79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8089 00005C7D 48C74009[8A5C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  8090 00005C85 E938080000              	jmp .L_lambda_simple_end_0038
  8091                                  .L_lambda_simple_code_0038:	; lambda-simple body
  8092 00005C8A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8093 00005C90 740B                    	je .L_lambda_simple_arity_check_ok_0038
  8094 00005C92 FF742410                	push qword [rsp + 8 * 2]
  8095 00005C96 6A02                    	push 2
  8096 00005C98 E9DE0C0000              	jmp L_error_incorrect_arity_simple
  8097                                  .L_lambda_simple_arity_check_ok_0038:
  8098 00005C9D C8000000                	enter 0, 0
  8099                                  	; preparing a non-tail-call
  8100 00005CA1 488B4520                	mov rax, PARAM(0)	; param a
  8101 00005CA5 50                      	push rax
  8102 00005CA6 6A01                    	push 1	; arg count
  8103 00005CA8 488B0425[C10B0000]      	mov rax, qword [free_var_46]	; free var integer?
  8104 00005CB0 803805                  	cmp byte [rax], T_undefined
  8105 00005CB3 0F84DC0B0000            	je L_error_fvar_undefined
  8106 00005CB9 803804                  	cmp byte [rax], T_closure
  8107 00005CBC 0F85570C0000            	jne L_error_non_closure
  8108 00005CC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8109 00005CC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8110 00005CC8 483D[02000000]          	cmp rax, sob_boolean_false
  8111 00005CCE 0F8467020000            	je .L_if_else_0021
  8112                                  	; preparing a non-tail-call
  8113 00005CD4 488B4528                	mov rax, PARAM(1)	; param b
  8114 00005CD8 50                      	push rax
  8115 00005CD9 6A01                    	push 1	; arg count
  8116 00005CDB 488B0425[C10B0000]      	mov rax, qword [free_var_46]	; free var integer?
  8117 00005CE3 803805                  	cmp byte [rax], T_undefined
  8118 00005CE6 0F84A90B0000            	je L_error_fvar_undefined
  8119 00005CEC 803804                  	cmp byte [rax], T_closure
  8120 00005CEF 0F85240C0000            	jne L_error_non_closure
  8121 00005CF5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8122 00005CF8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8123 00005CFB 483D[02000000]          	cmp rax, sob_boolean_false
  8124 00005D01 7468                    	je .L_if_else_0018
  8125                                  	; preparing a tail-call
  8126 00005D03 488B4528                	mov rax, PARAM(1)	; param b
  8127 00005D07 50                      	push rax
  8128 00005D08 488B4520                	mov rax, PARAM(0)	; param a
  8129 00005D0C 50                      	push rax
  8130 00005D0D 6A02                    	push 2	; arg count
  8131 00005D0F 488B0425[E6080000]      	mov rax, qword [free_var_3]	; free var __bin-add-zz
  8132 00005D17 803805                  	cmp byte [rax], T_undefined
  8133 00005D1A 0F84750B0000            	je L_error_fvar_undefined
  8134 00005D20 803804                  	cmp byte [rax], T_closure
  8135 00005D23 0F85F00B0000            	jne L_error_non_closure
  8136 00005D29 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8137 00005D2C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8138 00005D2F FF7500                  	push qword[rbp]
  8139 00005D32 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8140 00005D37 48895D10                	mov qword[rbp + 8*2],rbx
  8141 00005D3B 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8142 00005D43 BF00000000              	mov rdi,0
  8143 00005D48 EB00                    	jmp .L_tc_recycle_frame_loop_003f
  8144                                  .L_tc_recycle_frame_loop_003f:
  8145 00005D4A 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8146 00005D4E 740F                    	je .L_tc_recycle_frame_done_003f
  8147 00005D50 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8148 00005D55 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8149 00005D5A 48FFC7                  	inc rdi
  8150 00005D5D EBEB                    	jmp .L_tc_recycle_frame_loop_003f
  8151                                  .L_tc_recycle_frame_done_003f:
  8152 00005D5F 4889EC                  	mov rsp, rbp	; point to last argument
  8153 00005D62 5D                      	pop rbp
  8154 00005D63 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8155 00005D66 E9CB010000              	jmp .L_if_end_0018
  8156                                  .L_if_else_0018:
  8157                                  	; preparing a non-tail-call
  8158 00005D6B 488B4528                	mov rax, PARAM(1)	; param b
  8159 00005D6F 50                      	push rax
  8160 00005D70 6A01                    	push 1	; arg count
  8161 00005D72 488B0425[9F0B0000]      	mov rax, qword [free_var_44]	; free var fraction?
  8162 00005D7A 803805                  	cmp byte [rax], T_undefined
  8163 00005D7D 0F84120B0000            	je L_error_fvar_undefined
  8164 00005D83 803804                  	cmp byte [rax], T_closure
  8165 00005D86 0F858D0B0000            	jne L_error_non_closure
  8166 00005D8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8167 00005D8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8168 00005D92 483D[02000000]          	cmp rax, sob_boolean_false
  8169 00005D98 0F848B000000            	je .L_if_else_0017
  8170                                  	; preparing a tail-call
  8171 00005D9E 488B4528                	mov rax, PARAM(1)	; param b
  8172 00005DA2 50                      	push rax
  8173                                  	; preparing a non-tail-call
  8174 00005DA3 488B4520                	mov rax, PARAM(0)	; param a
  8175 00005DA7 50                      	push rax
  8176 00005DA8 6A01                    	push 1	; arg count
  8177 00005DAA 488B0425[19090000]      	mov rax, qword [free_var_6]	; free var __integer-to-fraction
  8178 00005DB2 803805                  	cmp byte [rax], T_undefined
  8179 00005DB5 0F84DA0A0000            	je L_error_fvar_undefined
  8180 00005DBB 803804                  	cmp byte [rax], T_closure
  8181 00005DBE 0F85550B0000            	jne L_error_non_closure
  8182 00005DC4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8183 00005DC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8184 00005DCA 50                      	push rax
  8185 00005DCB 6A02                    	push 2	; arg count
  8186 00005DCD 488B0425[C4080000]      	mov rax, qword [free_var_1]	; free var __bin-add-qq
  8187 00005DD5 803805                  	cmp byte [rax], T_undefined
  8188 00005DD8 0F84B70A0000            	je L_error_fvar_undefined
  8189 00005DDE 803804                  	cmp byte [rax], T_closure
  8190 00005DE1 0F85320B0000            	jne L_error_non_closure
  8191 00005DE7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8192 00005DEA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8193 00005DED FF7500                  	push qword[rbp]
  8194 00005DF0 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8195 00005DF5 48895D10                	mov qword[rbp + 8*2],rbx
  8196 00005DF9 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8197 00005E01 BF00000000              	mov rdi,0
  8198 00005E06 EB00                    	jmp .L_tc_recycle_frame_loop_0040
  8199                                  .L_tc_recycle_frame_loop_0040:
  8200 00005E08 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8201 00005E0C 740F                    	je .L_tc_recycle_frame_done_0040
  8202 00005E0E 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8203 00005E13 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8204 00005E18 48FFC7                  	inc rdi
  8205 00005E1B EBEB                    	jmp .L_tc_recycle_frame_loop_0040
  8206                                  .L_tc_recycle_frame_done_0040:
  8207 00005E1D 4889EC                  	mov rsp, rbp	; point to last argument
  8208 00005E20 5D                      	pop rbp
  8209 00005E21 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8210 00005E24 E90D010000              	jmp .L_if_end_0017
  8211                                  .L_if_else_0017:
  8212                                  	; preparing a non-tail-call
  8213 00005E29 488B4528                	mov rax, PARAM(1)	; param b
  8214 00005E2D 50                      	push rax
  8215 00005E2E 6A01                    	push 1	; arg count
  8216 00005E30 488B0425[6B0C0000]      	mov rax, qword [free_var_56]	; free var real?
  8217 00005E38 803805                  	cmp byte [rax], T_undefined
  8218 00005E3B 0F84540A0000            	je L_error_fvar_undefined
  8219 00005E41 803804                  	cmp byte [rax], T_closure
  8220 00005E44 0F85CF0A0000            	jne L_error_non_closure
  8221 00005E4A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8222 00005E4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8223 00005E50 483D[02000000]          	cmp rax, sob_boolean_false
  8224 00005E56 0F8488000000            	je .L_if_else_0016
  8225                                  	; preparing a tail-call
  8226 00005E5C 488B4528                	mov rax, PARAM(1)	; param b
  8227 00005E60 50                      	push rax
  8228                                  	; preparing a non-tail-call
  8229 00005E61 488B4520                	mov rax, PARAM(0)	; param a
  8230 00005E65 50                      	push rax
  8231 00005E66 6A01                    	push 1	; arg count
  8232 00005E68 488B0425[B00B0000]      	mov rax, qword [free_var_45]	; free var integer->real
  8233 00005E70 803805                  	cmp byte [rax], T_undefined
  8234 00005E73 0F841C0A0000            	je L_error_fvar_undefined
  8235 00005E79 803804                  	cmp byte [rax], T_closure
  8236 00005E7C 0F85970A0000            	jne L_error_non_closure
  8237 00005E82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8238 00005E85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8239 00005E88 50                      	push rax
  8240 00005E89 6A02                    	push 2	; arg count
  8241 00005E8B 488B0425[D5080000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8242 00005E93 803805                  	cmp byte [rax], T_undefined
  8243 00005E96 0F84F9090000            	je L_error_fvar_undefined
  8244 00005E9C 803804                  	cmp byte [rax], T_closure
  8245 00005E9F 0F85740A0000            	jne L_error_non_closure
  8246 00005EA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8247 00005EA8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8248 00005EAB FF7500                  	push qword[rbp]
  8249 00005EAE 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8250 00005EB3 48895D10                	mov qword[rbp + 8*2],rbx
  8251 00005EB7 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8252 00005EBF BF00000000              	mov rdi,0
  8253 00005EC4 EB00                    	jmp .L_tc_recycle_frame_loop_0041
  8254                                  .L_tc_recycle_frame_loop_0041:
  8255 00005EC6 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8256 00005ECA 740F                    	je .L_tc_recycle_frame_done_0041
  8257 00005ECC 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8258 00005ED1 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8259 00005ED6 48FFC7                  	inc rdi
  8260 00005ED9 EBEB                    	jmp .L_tc_recycle_frame_loop_0041
  8261                                  .L_tc_recycle_frame_done_0041:
  8262 00005EDB 4889EC                  	mov rsp, rbp	; point to last argument
  8263 00005EDE 5D                      	pop rbp
  8264 00005EDF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8265 00005EE2 EB52                    	jmp .L_if_end_0016
  8266                                  .L_if_else_0016:
  8267                                  	; preparing a tail-call
  8268 00005EE4 6A00                    	push 0	; arg count
  8269 00005EE6 488B4510                	mov rax, ENV
  8270 00005EEA 488B00                  	mov rax, qword [rax + 8 * 0]
  8271 00005EED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8272 00005EF0 803804                  	cmp byte [rax], T_closure
  8273 00005EF3 0F85200A0000            	jne L_error_non_closure
  8274 00005EF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8275 00005EFC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8276 00005EFF FF7500                  	push qword[rbp]
  8277 00005F02 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8278 00005F07 48895D10                	mov qword[rbp + 8*2],rbx
  8279 00005F0B 48C7451800000000        	mov qword[rbp + 8*3], 0	 ;n turns to m
  8280 00005F13 BF00000000              	mov rdi,0
  8281 00005F18 EB00                    	jmp .L_tc_recycle_frame_loop_0042
  8282                                  .L_tc_recycle_frame_loop_0042:
  8283 00005F1A 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8284 00005F1E 740F                    	je .L_tc_recycle_frame_done_0042
  8285 00005F20 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8286 00005F25 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8287 00005F2A 48FFC7                  	inc rdi
  8288 00005F2D EBEB                    	jmp .L_tc_recycle_frame_loop_0042
  8289                                  .L_tc_recycle_frame_done_0042:
  8290 00005F2F 4889EC                  	mov rsp, rbp	; point to last argument
  8291 00005F32 5D                      	pop rbp
  8292 00005F33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8293                                  .L_if_end_0016:
  8294                                  .L_if_end_0017:
  8295                                  .L_if_end_0018:
  8296 00005F36 E983050000              	jmp .L_if_end_0021
  8297                                  .L_if_else_0021:
  8298                                  	; preparing a non-tail-call
  8299 00005F3B 488B4520                	mov rax, PARAM(0)	; param a
  8300 00005F3F 50                      	push rax
  8301 00005F40 6A01                    	push 1	; arg count
  8302 00005F42 488B0425[9F0B0000]      	mov rax, qword [free_var_44]	; free var fraction?
  8303 00005F4A 803805                  	cmp byte [rax], T_undefined
  8304 00005F4D 0F8442090000            	je L_error_fvar_undefined
  8305 00005F53 803804                  	cmp byte [rax], T_closure
  8306 00005F56 0F85BD090000            	jne L_error_non_closure
  8307 00005F5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8308 00005F5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8309 00005F62 483D[02000000]          	cmp rax, sob_boolean_false
  8310 00005F68 0F8467020000            	je .L_if_else_0020
  8311                                  	; preparing a non-tail-call
  8312 00005F6E 488B4528                	mov rax, PARAM(1)	; param b
  8313 00005F72 50                      	push rax
  8314 00005F73 6A01                    	push 1	; arg count
  8315 00005F75 488B0425[C10B0000]      	mov rax, qword [free_var_46]	; free var integer?
  8316 00005F7D 803805                  	cmp byte [rax], T_undefined
  8317 00005F80 0F840F090000            	je L_error_fvar_undefined
  8318 00005F86 803804                  	cmp byte [rax], T_closure
  8319 00005F89 0F858A090000            	jne L_error_non_closure
  8320 00005F8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8321 00005F92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8322 00005F95 483D[02000000]          	cmp rax, sob_boolean_false
  8323 00005F9B 0F848B000000            	je .L_if_else_001b
  8324                                  	; preparing a tail-call
  8325                                  	; preparing a non-tail-call
  8326 00005FA1 488B4528                	mov rax, PARAM(1)	; param b
  8327 00005FA5 50                      	push rax
  8328 00005FA6 6A01                    	push 1	; arg count
  8329 00005FA8 488B0425[08090000]      	mov rax, qword [free_var_5]	; free var __bin_integer_to_fraction
  8330 00005FB0 803805                  	cmp byte [rax], T_undefined
  8331 00005FB3 0F84DC080000            	je L_error_fvar_undefined
  8332 00005FB9 803804                  	cmp byte [rax], T_closure
  8333 00005FBC 0F8557090000            	jne L_error_non_closure
  8334 00005FC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8335 00005FC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8336 00005FC8 50                      	push rax
  8337 00005FC9 488B4520                	mov rax, PARAM(0)	; param a
  8338 00005FCD 50                      	push rax
  8339 00005FCE 6A02                    	push 2	; arg count
  8340 00005FD0 488B0425[C4080000]      	mov rax, qword [free_var_1]	; free var __bin-add-qq
  8341 00005FD8 803805                  	cmp byte [rax], T_undefined
  8342 00005FDB 0F84B4080000            	je L_error_fvar_undefined
  8343 00005FE1 803804                  	cmp byte [rax], T_closure
  8344 00005FE4 0F852F090000            	jne L_error_non_closure
  8345 00005FEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8346 00005FED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8347 00005FF0 FF7500                  	push qword[rbp]
  8348 00005FF3 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8349 00005FF8 48895D10                	mov qword[rbp + 8*2],rbx
  8350 00005FFC 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8351 00006004 BF00000000              	mov rdi,0
  8352 00006009 EB00                    	jmp .L_tc_recycle_frame_loop_0043
  8353                                  .L_tc_recycle_frame_loop_0043:
  8354 0000600B 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8355 0000600F 740F                    	je .L_tc_recycle_frame_done_0043
  8356 00006011 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8357 00006016 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8358 0000601B 48FFC7                  	inc rdi
  8359 0000601E EBEB                    	jmp .L_tc_recycle_frame_loop_0043
  8360                                  .L_tc_recycle_frame_done_0043:
  8361 00006020 4889EC                  	mov rsp, rbp	; point to last argument
  8362 00006023 5D                      	pop rbp
  8363 00006024 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8364 00006027 E9A4010000              	jmp .L_if_end_001b
  8365                                  .L_if_else_001b:
  8366                                  	; preparing a non-tail-call
  8367 0000602C 488B4528                	mov rax, PARAM(1)	; param b
  8368 00006030 50                      	push rax
  8369 00006031 6A01                    	push 1	; arg count
  8370 00006033 488B0425[9F0B0000]      	mov rax, qword [free_var_44]	; free var fraction?
  8371 0000603B 803805                  	cmp byte [rax], T_undefined
  8372 0000603E 0F8451080000            	je L_error_fvar_undefined
  8373 00006044 803804                  	cmp byte [rax], T_closure
  8374 00006047 0F85CC080000            	jne L_error_non_closure
  8375 0000604D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8376 00006050 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8377 00006053 483D[02000000]          	cmp rax, sob_boolean_false
  8378 00006059 7468                    	je .L_if_else_001a
  8379                                  	; preparing a tail-call
  8380 0000605B 488B4528                	mov rax, PARAM(1)	; param b
  8381 0000605F 50                      	push rax
  8382 00006060 488B4520                	mov rax, PARAM(0)	; param a
  8383 00006064 50                      	push rax
  8384 00006065 6A02                    	push 2	; arg count
  8385 00006067 488B0425[C4080000]      	mov rax, qword [free_var_1]	; free var __bin-add-qq
  8386 0000606F 803805                  	cmp byte [rax], T_undefined
  8387 00006072 0F841D080000            	je L_error_fvar_undefined
  8388 00006078 803804                  	cmp byte [rax], T_closure
  8389 0000607B 0F8598080000            	jne L_error_non_closure
  8390 00006081 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8391 00006084 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8392 00006087 FF7500                  	push qword[rbp]
  8393 0000608A 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8394 0000608F 48895D10                	mov qword[rbp + 8*2],rbx
  8395 00006093 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8396 0000609B BF00000000              	mov rdi,0
  8397 000060A0 EB00                    	jmp .L_tc_recycle_frame_loop_0044
  8398                                  .L_tc_recycle_frame_loop_0044:
  8399 000060A2 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8400 000060A6 740F                    	je .L_tc_recycle_frame_done_0044
  8401 000060A8 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8402 000060AD 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8403 000060B2 48FFC7                  	inc rdi
  8404 000060B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0044
  8405                                  .L_tc_recycle_frame_done_0044:
  8406 000060B7 4889EC                  	mov rsp, rbp	; point to last argument
  8407 000060BA 5D                      	pop rbp
  8408 000060BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8409 000060BE E90D010000              	jmp .L_if_end_001a
  8410                                  .L_if_else_001a:
  8411                                  	; preparing a non-tail-call
  8412 000060C3 488B4528                	mov rax, PARAM(1)	; param b
  8413 000060C7 50                      	push rax
  8414 000060C8 6A01                    	push 1	; arg count
  8415 000060CA 488B0425[6B0C0000]      	mov rax, qword [free_var_56]	; free var real?
  8416 000060D2 803805                  	cmp byte [rax], T_undefined
  8417 000060D5 0F84BA070000            	je L_error_fvar_undefined
  8418 000060DB 803804                  	cmp byte [rax], T_closure
  8419 000060DE 0F8535080000            	jne L_error_non_closure
  8420 000060E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8421 000060E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8422 000060EA 483D[02000000]          	cmp rax, sob_boolean_false
  8423 000060F0 0F8488000000            	je .L_if_else_0019
  8424                                  	; preparing a tail-call
  8425 000060F6 488B4528                	mov rax, PARAM(1)	; param b
  8426 000060FA 50                      	push rax
  8427                                  	; preparing a non-tail-call
  8428 000060FB 488B4520                	mov rax, PARAM(0)	; param a
  8429 000060FF 50                      	push rax
  8430 00006100 6A01                    	push 1	; arg count
  8431 00006102 488B0425[8E0B0000]      	mov rax, qword [free_var_43]	; free var fraction->real
  8432 0000610A 803805                  	cmp byte [rax], T_undefined
  8433 0000610D 0F8482070000            	je L_error_fvar_undefined
  8434 00006113 803804                  	cmp byte [rax], T_closure
  8435 00006116 0F85FD070000            	jne L_error_non_closure
  8436 0000611C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8437 0000611F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8438 00006122 50                      	push rax
  8439 00006123 6A02                    	push 2	; arg count
  8440 00006125 488B0425[D5080000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8441 0000612D 803805                  	cmp byte [rax], T_undefined
  8442 00006130 0F845F070000            	je L_error_fvar_undefined
  8443 00006136 803804                  	cmp byte [rax], T_closure
  8444 00006139 0F85DA070000            	jne L_error_non_closure
  8445 0000613F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8446 00006142 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8447 00006145 FF7500                  	push qword[rbp]
  8448 00006148 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8449 0000614D 48895D10                	mov qword[rbp + 8*2],rbx
  8450 00006151 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8451 00006159 BF00000000              	mov rdi,0
  8452 0000615E EB00                    	jmp .L_tc_recycle_frame_loop_0045
  8453                                  .L_tc_recycle_frame_loop_0045:
  8454 00006160 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8455 00006164 740F                    	je .L_tc_recycle_frame_done_0045
  8456 00006166 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8457 0000616B 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8458 00006170 48FFC7                  	inc rdi
  8459 00006173 EBEB                    	jmp .L_tc_recycle_frame_loop_0045
  8460                                  .L_tc_recycle_frame_done_0045:
  8461 00006175 4889EC                  	mov rsp, rbp	; point to last argument
  8462 00006178 5D                      	pop rbp
  8463 00006179 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8464 0000617C EB52                    	jmp .L_if_end_0019
  8465                                  .L_if_else_0019:
  8466                                  	; preparing a tail-call
  8467 0000617E 6A00                    	push 0	; arg count
  8468 00006180 488B4510                	mov rax, ENV
  8469 00006184 488B00                  	mov rax, qword [rax + 8 * 0]
  8470 00006187 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8471 0000618A 803804                  	cmp byte [rax], T_closure
  8472 0000618D 0F8586070000            	jne L_error_non_closure
  8473 00006193 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8474 00006196 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8475 00006199 FF7500                  	push qword[rbp]
  8476 0000619C 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8477 000061A1 48895D10                	mov qword[rbp + 8*2],rbx
  8478 000061A5 48C7451800000000        	mov qword[rbp + 8*3], 0	 ;n turns to m
  8479 000061AD BF00000000              	mov rdi,0
  8480 000061B2 EB00                    	jmp .L_tc_recycle_frame_loop_0046
  8481                                  .L_tc_recycle_frame_loop_0046:
  8482 000061B4 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8483 000061B8 740F                    	je .L_tc_recycle_frame_done_0046
  8484 000061BA 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8485 000061BF 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8486 000061C4 48FFC7                  	inc rdi
  8487 000061C7 EBEB                    	jmp .L_tc_recycle_frame_loop_0046
  8488                                  .L_tc_recycle_frame_done_0046:
  8489 000061C9 4889EC                  	mov rsp, rbp	; point to last argument
  8490 000061CC 5D                      	pop rbp
  8491 000061CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8492                                  .L_if_end_0019:
  8493                                  .L_if_end_001a:
  8494                                  .L_if_end_001b:
  8495 000061D0 E9E9020000              	jmp .L_if_end_0020
  8496                                  .L_if_else_0020:
  8497                                  	; preparing a non-tail-call
  8498 000061D5 488B4520                	mov rax, PARAM(0)	; param a
  8499 000061D9 50                      	push rax
  8500 000061DA 6A01                    	push 1	; arg count
  8501 000061DC 488B0425[6B0C0000]      	mov rax, qword [free_var_56]	; free var real?
  8502 000061E4 803805                  	cmp byte [rax], T_undefined
  8503 000061E7 0F84A8060000            	je L_error_fvar_undefined
  8504 000061ED 803804                  	cmp byte [rax], T_closure
  8505 000061F0 0F8523070000            	jne L_error_non_closure
  8506 000061F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8507 000061F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8508 000061FC 483D[02000000]          	cmp rax, sob_boolean_false
  8509 00006202 0F8464020000            	je .L_if_else_001f
  8510                                  	; preparing a non-tail-call
  8511 00006208 488B4528                	mov rax, PARAM(1)	; param b
  8512 0000620C 50                      	push rax
  8513 0000620D 6A01                    	push 1	; arg count
  8514 0000620F 488B0425[C10B0000]      	mov rax, qword [free_var_46]	; free var integer?
  8515 00006217 803805                  	cmp byte [rax], T_undefined
  8516 0000621A 0F8475060000            	je L_error_fvar_undefined
  8517 00006220 803804                  	cmp byte [rax], T_closure
  8518 00006223 0F85F0060000            	jne L_error_non_closure
  8519 00006229 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8520 0000622C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8521 0000622F 483D[02000000]          	cmp rax, sob_boolean_false
  8522 00006235 0F848B000000            	je .L_if_else_001e
  8523                                  	; preparing a tail-call
  8524                                  	; preparing a non-tail-call
  8525 0000623B 488B4528                	mov rax, PARAM(1)	; param b
  8526 0000623F 50                      	push rax
  8527 00006240 6A01                    	push 1	; arg count
  8528 00006242 488B0425[B00B0000]      	mov rax, qword [free_var_45]	; free var integer->real
  8529 0000624A 803805                  	cmp byte [rax], T_undefined
  8530 0000624D 0F8442060000            	je L_error_fvar_undefined
  8531 00006253 803804                  	cmp byte [rax], T_closure
  8532 00006256 0F85BD060000            	jne L_error_non_closure
  8533 0000625C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8534 0000625F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8535 00006262 50                      	push rax
  8536 00006263 488B4520                	mov rax, PARAM(0)	; param a
  8537 00006267 50                      	push rax
  8538 00006268 6A02                    	push 2	; arg count
  8539 0000626A 488B0425[D5080000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8540 00006272 803805                  	cmp byte [rax], T_undefined
  8541 00006275 0F841A060000            	je L_error_fvar_undefined
  8542 0000627B 803804                  	cmp byte [rax], T_closure
  8543 0000627E 0F8595060000            	jne L_error_non_closure
  8544 00006284 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8545 00006287 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8546 0000628A FF7500                  	push qword[rbp]
  8547 0000628D 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8548 00006292 48895D10                	mov qword[rbp + 8*2],rbx
  8549 00006296 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8550 0000629E BF00000000              	mov rdi,0
  8551 000062A3 EB00                    	jmp .L_tc_recycle_frame_loop_0047
  8552                                  .L_tc_recycle_frame_loop_0047:
  8553 000062A5 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8554 000062A9 740F                    	je .L_tc_recycle_frame_done_0047
  8555 000062AB 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8556 000062B0 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8557 000062B5 48FFC7                  	inc rdi
  8558 000062B8 EBEB                    	jmp .L_tc_recycle_frame_loop_0047
  8559                                  .L_tc_recycle_frame_done_0047:
  8560 000062BA 4889EC                  	mov rsp, rbp	; point to last argument
  8561 000062BD 5D                      	pop rbp
  8562 000062BE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8563 000062C1 E9A4010000              	jmp .L_if_end_001e
  8564                                  .L_if_else_001e:
  8565                                  	; preparing a non-tail-call
  8566 000062C6 488B4528                	mov rax, PARAM(1)	; param b
  8567 000062CA 50                      	push rax
  8568 000062CB 6A01                    	push 1	; arg count
  8569 000062CD 488B0425[9F0B0000]      	mov rax, qword [free_var_44]	; free var fraction?
  8570 000062D5 803805                  	cmp byte [rax], T_undefined
  8571 000062D8 0F84B7050000            	je L_error_fvar_undefined
  8572 000062DE 803804                  	cmp byte [rax], T_closure
  8573 000062E1 0F8532060000            	jne L_error_non_closure
  8574 000062E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8575 000062EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  8576 000062ED 483D[02000000]          	cmp rax, sob_boolean_false
  8577 000062F3 0F848B000000            	je .L_if_else_001d
  8578                                  	; preparing a tail-call
  8579                                  	; preparing a non-tail-call
  8580 000062F9 488B4528                	mov rax, PARAM(1)	; param b
  8581 000062FD 50                      	push rax
  8582 000062FE 6A01                    	push 1	; arg count
  8583 00006300 488B0425[8E0B0000]      	mov rax, qword [free_var_43]	; free var fraction->real
  8584 00006308 803805                  	cmp byte [rax], T_undefined
  8585 0000630B 0F8484050000            	je L_error_fvar_undefined
  8586 00006311 803804                  	cmp byte [rax], T_closure
  8587 00006314 0F85FF050000            	jne L_error_non_closure
  8588 0000631A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8589 0000631D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8590 00006320 50                      	push rax
  8591 00006321 488B4520                	mov rax, PARAM(0)	; param a
  8592 00006325 50                      	push rax
  8593 00006326 6A02                    	push 2	; arg count
  8594 00006328 488B0425[D5080000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8595 00006330 803805                  	cmp byte [rax], T_undefined
  8596 00006333 0F845C050000            	je L_error_fvar_undefined
  8597 00006339 803804                  	cmp byte [rax], T_closure
  8598 0000633C 0F85D7050000            	jne L_error_non_closure
  8599 00006342 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8600 00006345 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8601 00006348 FF7500                  	push qword[rbp]
  8602 0000634B 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8603 00006350 48895D10                	mov qword[rbp + 8*2],rbx
  8604 00006354 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8605 0000635C BF00000000              	mov rdi,0
  8606 00006361 EB00                    	jmp .L_tc_recycle_frame_loop_0048
  8607                                  .L_tc_recycle_frame_loop_0048:
  8608 00006363 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8609 00006367 740F                    	je .L_tc_recycle_frame_done_0048
  8610 00006369 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8611 0000636E 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8612 00006373 48FFC7                  	inc rdi
  8613 00006376 EBEB                    	jmp .L_tc_recycle_frame_loop_0048
  8614                                  .L_tc_recycle_frame_done_0048:
  8615 00006378 4889EC                  	mov rsp, rbp	; point to last argument
  8616 0000637B 5D                      	pop rbp
  8617 0000637C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8618 0000637F E9E6000000              	jmp .L_if_end_001d
  8619                                  .L_if_else_001d:
  8620                                  	; preparing a non-tail-call
  8621 00006384 488B4528                	mov rax, PARAM(1)	; param b
  8622 00006388 50                      	push rax
  8623 00006389 6A01                    	push 1	; arg count
  8624 0000638B 488B0425[6B0C0000]      	mov rax, qword [free_var_56]	; free var real?
  8625 00006393 803805                  	cmp byte [rax], T_undefined
  8626 00006396 0F84F9040000            	je L_error_fvar_undefined
  8627 0000639C 803804                  	cmp byte [rax], T_closure
  8628 0000639F 0F8574050000            	jne L_error_non_closure
  8629 000063A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8630 000063A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8631 000063AB 483D[02000000]          	cmp rax, sob_boolean_false
  8632 000063B1 7465                    	je .L_if_else_001c
  8633                                  	; preparing a tail-call
  8634 000063B3 488B4528                	mov rax, PARAM(1)	; param b
  8635 000063B7 50                      	push rax
  8636 000063B8 488B4520                	mov rax, PARAM(0)	; param a
  8637 000063BC 50                      	push rax
  8638 000063BD 6A02                    	push 2	; arg count
  8639 000063BF 488B0425[D5080000]      	mov rax, qword [free_var_2]	; free var __bin-add-rr
  8640 000063C7 803805                  	cmp byte [rax], T_undefined
  8641 000063CA 0F84C5040000            	je L_error_fvar_undefined
  8642 000063D0 803804                  	cmp byte [rax], T_closure
  8643 000063D3 0F8540050000            	jne L_error_non_closure
  8644 000063D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8645 000063DC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8646 000063DF FF7500                  	push qword[rbp]
  8647 000063E2 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8648 000063E7 48895D10                	mov qword[rbp + 8*2],rbx
  8649 000063EB 48C7451802000000        	mov qword[rbp + 8*3], 2	 ;n turns to m
  8650 000063F3 BF00000000              	mov rdi,0
  8651 000063F8 EB00                    	jmp .L_tc_recycle_frame_loop_0049
  8652                                  .L_tc_recycle_frame_loop_0049:
  8653 000063FA 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8654 000063FE 740F                    	je .L_tc_recycle_frame_done_0049
  8655 00006400 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8656 00006405 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8657 0000640A 48FFC7                  	inc rdi
  8658 0000640D EBEB                    	jmp .L_tc_recycle_frame_loop_0049
  8659                                  .L_tc_recycle_frame_done_0049:
  8660 0000640F 4889EC                  	mov rsp, rbp	; point to last argument
  8661 00006412 5D                      	pop rbp
  8662 00006413 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8663 00006416 EB52                    	jmp .L_if_end_001c
  8664                                  .L_if_else_001c:
  8665                                  	; preparing a tail-call
  8666 00006418 6A00                    	push 0	; arg count
  8667 0000641A 488B4510                	mov rax, ENV
  8668 0000641E 488B00                  	mov rax, qword [rax + 8 * 0]
  8669 00006421 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8670 00006424 803804                  	cmp byte [rax], T_closure
  8671 00006427 0F85EC040000            	jne L_error_non_closure
  8672 0000642D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8673 00006430 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8674 00006433 FF7500                  	push qword[rbp]
  8675 00006436 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8676 0000643B 48895D10                	mov qword[rbp + 8*2],rbx
  8677 0000643F 48C7451800000000        	mov qword[rbp + 8*3], 0	 ;n turns to m
  8678 00006447 BF00000000              	mov rdi,0
  8679 0000644C EB00                    	jmp .L_tc_recycle_frame_loop_004a
  8680                                  .L_tc_recycle_frame_loop_004a:
  8681 0000644E 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8682 00006452 740F                    	je .L_tc_recycle_frame_done_004a
  8683 00006454 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8684 00006459 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8685 0000645E 48FFC7                  	inc rdi
  8686 00006461 EBEB                    	jmp .L_tc_recycle_frame_loop_004a
  8687                                  .L_tc_recycle_frame_done_004a:
  8688 00006463 4889EC                  	mov rsp, rbp	; point to last argument
  8689 00006466 5D                      	pop rbp
  8690 00006467 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8691                                  .L_if_end_001c:
  8692                                  .L_if_end_001d:
  8693                                  .L_if_end_001e:
  8694 0000646A EB52                    	jmp .L_if_end_001f
  8695                                  .L_if_else_001f:
  8696                                  	; preparing a tail-call
  8697 0000646C 6A00                    	push 0	; arg count
  8698 0000646E 488B4510                	mov rax, ENV
  8699 00006472 488B00                  	mov rax, qword [rax + 8 * 0]
  8700 00006475 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
  8701 00006478 803804                  	cmp byte [rax], T_closure
  8702 0000647B 0F8598040000            	jne L_error_non_closure
  8703 00006481 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8704 00006484 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8705 00006487 FF7500                  	push qword[rbp]
  8706 0000648A 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8707 0000648F 48895D10                	mov qword[rbp + 8*2],rbx
  8708 00006493 48C7451800000000        	mov qword[rbp + 8*3], 0	 ;n turns to m
  8709 0000649B BF00000000              	mov rdi,0
  8710 000064A0 EB00                    	jmp .L_tc_recycle_frame_loop_004b
  8711                                  .L_tc_recycle_frame_loop_004b:
  8712 000064A2 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8713 000064A6 740F                    	je .L_tc_recycle_frame_done_004b
  8714 000064A8 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8715 000064AD 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8716 000064B2 48FFC7                  	inc rdi
  8717 000064B5 EBEB                    	jmp .L_tc_recycle_frame_loop_004b
  8718                                  .L_tc_recycle_frame_done_004b:
  8719 000064B7 4889EC                  	mov rsp, rbp	; point to last argument
  8720 000064BA 5D                      	pop rbp
  8721 000064BB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8722                                  .L_if_end_001f:
  8723                                  .L_if_end_0020:
  8724                                  .L_if_end_0021:
  8725 000064BE C9                      	leave
  8726 000064BF C22000                  	ret AND_KILL_FRAME(2)
  8727                                  .L_lambda_simple_end_0038:	; new closure is in rax
  8728 000064C2 50                      	push rax
  8729 000064C3 6A01                    	push 1	; arg count
  8730 000064C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8731 000064CA E8F3040000              	call malloc
  8732 000064CF 50                      	push rax
  8733 000064D0 BF08000000              	mov rdi, 8 * 1	; new rib
  8734 000064D5 E8E8040000              	call malloc
  8735 000064DA 50                      	push rax
  8736 000064DB BF10000000              	mov rdi, 8 * 2	; extended env
  8737 000064E0 E8DD040000              	call malloc
  8738 000064E5 488B7D10                	mov rdi, ENV
  8739 000064E9 BE00000000              	mov rsi, 0
  8740 000064EE BA01000000              	mov rdx, 1
  8741                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  8742 000064F3 4883FE01                	cmp rsi, 1
  8743 000064F7 7410                    	je .L_lambda_simple_env_end_0039
  8744 000064F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8745 000064FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8746 00006501 48FFC6                  	inc rsi
  8747 00006504 48FFC2                  	inc rdx
  8748 00006507 EBEA                    	jmp .L_lambda_simple_env_loop_0039
  8749                                  .L_lambda_simple_env_end_0039:
  8750 00006509 5B                      	pop rbx
  8751 0000650A BE00000000              	mov rsi, 0
  8752                                  .L_lambda_simple_params_loop_0039:	; copy params
  8753 0000650F 4883FE01                	cmp rsi, 1
  8754 00006513 740E                    	je .L_lambda_simple_params_end_0039
  8755 00006515 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8756 0000651A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8757 0000651E 48FFC6                  	inc rsi
  8758 00006521 EBEC                    	jmp .L_lambda_simple_params_loop_0039
  8759                                  .L_lambda_simple_params_end_0039:
  8760 00006523 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8761 00006526 4889C3                  	mov rbx, rax
  8762 00006529 58                      	pop rax
  8763 0000652A C60004                  	mov byte [rax], T_closure
  8764 0000652D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8765 00006531 48C74009[3E650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  8766 00006539 E972020000              	jmp .L_lambda_simple_end_0039
  8767                                  .L_lambda_simple_code_0039:	; lambda-simple body
  8768 0000653E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8769 00006544 740B                    	je .L_lambda_simple_arity_check_ok_0039
  8770 00006546 FF742410                	push qword [rsp + 8 * 2]
  8771 0000654A 6A01                    	push 1
  8772 0000654C E92A040000              	jmp L_error_incorrect_arity_simple
  8773                                  .L_lambda_simple_arity_check_ok_0039:
  8774 00006551 C8000000                	enter 0, 0
  8775 00006555 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8776 0000655A E863040000              	call malloc
  8777 0000655F 50                      	push rax
  8778 00006560 BF08000000              	mov rdi, 8 * 1	; new rib
  8779 00006565 E858040000              	call malloc
  8780 0000656A 50                      	push rax
  8781 0000656B BF18000000              	mov rdi, 8 * 3	; extended env
  8782 00006570 E84D040000              	call malloc
  8783 00006575 488B7D10                	mov rdi, ENV
  8784 00006579 BE00000000              	mov rsi, 0
  8785 0000657E BA01000000              	mov rdx, 1
  8786                                  .L_lambda_opt_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  8787 00006583 4883FE02                	cmp rsi, 2
  8788 00006587 7410                    	je .L_lambda_opt_env_end_0009
  8789 00006589 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8790 0000658D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8791 00006591 48FFC6                  	inc rsi
  8792 00006594 48FFC2                  	inc rdx
  8793 00006597 EBEA                    	jmp .L_lambda_opt_env_loop_0009
  8794                                  .L_lambda_opt_env_end_0009:
  8795 00006599 5B                      	pop rbx
  8796 0000659A BE00000000              	mov rsi, 0
  8797                                  .L_lambda_opt_params_loop_0009:	; copy params
  8798 0000659F 4883FE01                	cmp rsi, 1
  8799 000065A3 740E                    	je .L_lambda_opt_params_end_0009
  8800 000065A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8801 000065AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8802 000065AE 48FFC6                  	inc rsi
  8803 000065B1 EBEC                    	jmp .L_lambda_opt_params_loop_0009
  8804                                  .L_lambda_opt_params_end_0009:
  8805 000065B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8806 000065B6 4889C3                  	mov rbx, rax
  8807 000065B9 58                      	pop rax
  8808 000065BA C60004                  	mov byte [rax], T_closure
  8809 000065BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8810 000065C1 48C74009[CE650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  8811 000065C9 E9DE010000              	jmp .L_lambda_opt_end_0009
  8812                                  .L_lambda_opt_code_0009:	; lambda-opt body
  8813 000065CE 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8814 000065D4 7411                    	je .L_lambda_opt_arity_check_exact_0009
  8815 000065D6 0F8FBC000000            	jg .L_lambda_opt_arity_check_more_0009
  8816 000065DC FF742410                	push qword [rsp + 8 * 2]
  8817 000065E0 6A00                    	push 0
  8818 000065E2 E9A8030000              	jmp L_error_incorrect_arity_opt
  8819                                  .L_lambda_opt_arity_check_exact_0009:
  8820 000065E7 4883EC08                	sub rsp, 8
  8821 000065EB 488B442408              	mov rax, qword[rsp + 8 *1]
  8822 000065F0 48890424                	mov qword[rsp], rax  
  8823 000065F4 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8824 000065F9 4889442408              	mov qword[rsp + 8 * 1], rax
  8825 000065FE B801000000              	mov rax, 1
  8826 00006603 4889442410              	mov qword[rsp + 8 *2], rax
  8827 00006608 48B8-                   	mov rax, sob_nil
  8827 0000660A [0100000000000000] 
  8828 00006612 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8829 00006617 C8000000                	enter 0, 0
  8830                                  	; preparing a tail-call
  8831 0000661B 488B4520                	mov rax, PARAM(0)	; param s
  8832 0000661F 50                      	push rax
  8833 00006620 48B8-                   	mov rax, L_constants + 2116
  8833 00006622 [4408000000000000] 
  8834 0000662A 50                      	push rax
  8835 0000662B 488B4510                	mov rax, ENV
  8836 0000662F 488B00                  	mov rax, qword [rax + 8 * 0]
  8837 00006632 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  8838 00006635 50                      	push rax
  8839 00006636 6A03                    	push 3	; arg count
  8840 00006638 488B0425[7D0B0000]      	mov rax, qword [free_var_42]	; free var fold-left
  8841 00006640 803805                  	cmp byte [rax], T_undefined
  8842 00006643 0F844C020000            	je L_error_fvar_undefined
  8843 00006649 803804                  	cmp byte [rax], T_closure
  8844 0000664C 0F85C7020000            	jne L_error_non_closure
  8845 00006652 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8846 00006655 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8847 00006658 FF7500                  	push qword[rbp]
  8848 0000665B 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8849 00006660 48895D10                	mov qword[rbp + 8*2],rbx
  8850 00006664 48C7451803000000        	mov qword[rbp + 8*3], 3	 ;n turns to m
  8851 0000666C BF00000000              	mov rdi,0
  8852 00006671 EB00                    	jmp .L_tc_recycle_frame_loop_004d
  8853                                  .L_tc_recycle_frame_loop_004d:
  8854 00006673 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8855 00006677 740F                    	je .L_tc_recycle_frame_done_004d
  8856 00006679 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8857 0000667E 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8858 00006683 48FFC7                  	inc rdi
  8859 00006686 EBEB                    	jmp .L_tc_recycle_frame_loop_004d
  8860                                  .L_tc_recycle_frame_done_004d:
  8861 00006688 4889EC                  	mov rsp, rbp	; point to last argument
  8862 0000668B 5D                      	pop rbp
  8863 0000668C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8864 0000668F C9                      	leave
  8865 00006690 C21800                  	ret AND_KILL_FRAME(1)
  8866 00006693 E914010000              	jmp .L_lambda_opt_end_0009	; new closure is in rax
  8867                                  .L_lambda_opt_arity_check_more_0009:
  8868 00006698 488B442410              	mov rax, qword[rsp + 2 * 8]
  8869 0000669D 4889C7                  	mov rdi, rax
  8870 000066A0 49B9-                   	mov r9, sob_nil
  8870 000066A2 [0100000000000000] 
  8871 000066AA 4C8B442410              	mov r8, qword[rsp+2*8]
  8872                                  .L_lambda_opt_stack_shrink_loop_0009:
  8873 000066AF 4983F800                	cmp r8, 0
  8874 000066B3 7422                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  8875 000066B5 4A8B5CC410              	mov rbx, qword[rsp + 8 * (2 + r8)]
  8876 000066BA BF11000000              	mov rdi, 1+8+8	;for pair
  8877 000066BF E8FE020000              	call malloc	 ;to create the pair in the stack
  8878 000066C4 C60021                  	mov byte [rax], T_pair	 ; to make it a pair
  8879 000066C7 48895801                	mov qword[rax+1],rbx	 ;put the car in the last (not inside of the list yet) in the pair
  8880 000066CB 4C894809                 	mov qword[rax+1+8],r9
  8881 000066CF 4989C1                  	mov r9 , rax	 ; for the recursion 
  8882 000066D2 49FFC8                  	dec r8
  8883 000066D5 EBD8                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  8884                                  .L_lambda_opt_stack_shrink_loop_exit_0009:
  8885 000066D7 488B442410              	mov rax, qword[rsp + 2 * 8]
  8886 000066DC BF01000000              	mov rdi, 1
  8887 000066E1 4829F8                  	sub rax, rdi
  8888 000066E4 4889C7                  	mov rdi, rax
  8889 000066E7 486BC008                	imul rax,8
  8890 000066EB 4801C4                  	add rsp, rax
  8891 000066EE 4889E0                  	mov rax, rsp
  8892 000066F1 4989F8                  	mov r8, rdi
  8893 000066F4 4D6BC008                	imul r8, 8
  8894 000066F8 4C29C0                  	sub rax, r8
  8895 000066FB 4989C2                  	mov r10, rax	; holds the original ret in the stack
  8896 000066FE 4983C218                	add r10, 8*3
  8897 00006702 4883C010                	add rax, 2* 8	; rax holds arg count [rsp+ 2*8] in the original 
  8898 00006706 4C8B00                  	mov r8, qword[rax] ;arg count = r8
  8899 00006709 4D6BC008                	imul r8,8
  8900 0000670D 4C01C0                  	add rax, r8
  8901 00006710 4C8908                  	mov qword[rax] ,r9
  8902 00006713 4983EA18                 	sub r10, 8*3
  8903 00006717 48C744241001000000      	mov qword [rsp+2*8], 1
  8904 00006720 498B4208                	mov rax, qword[r10 + 1 * 8]
  8905 00006724 4889442408              	mov qword[rsp + 1*8] ,rax
  8906 00006729 498B02                  	mov rax, qword[r10]
  8907 0000672C 48890424                	mov qword[rsp], rax
  8908 00006730 C8000000                	enter 0, 0
  8909                                  	; preparing a tail-call
  8910 00006734 488B4520                	mov rax, PARAM(0)	; param s
  8911 00006738 50                      	push rax
  8912 00006739 48B8-                   	mov rax, L_constants + 2116
  8912 0000673B [4408000000000000] 
  8913 00006743 50                      	push rax
  8914 00006744 488B4510                	mov rax, ENV
  8915 00006748 488B00                  	mov rax, qword [rax + 8 * 0]
  8916 0000674B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
  8917 0000674E 50                      	push rax
  8918 0000674F 6A03                    	push 3	; arg count
  8919 00006751 488B0425[7D0B0000]      	mov rax, qword [free_var_42]	; free var fold-left
  8920 00006759 803805                  	cmp byte [rax], T_undefined
  8921 0000675C 0F8433010000            	je L_error_fvar_undefined
  8922 00006762 803804                  	cmp byte [rax], T_closure
  8923 00006765 0F85AE010000            	jne L_error_non_closure
  8924 0000676B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8925 0000676E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8926 00006771 FF7500                  	push qword[rbp]
  8927 00006774 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8928 00006779 48895D10                	mov qword[rbp + 8*2],rbx
  8929 0000677D 48C7451803000000        	mov qword[rbp + 8*3], 3	 ;n turns to m
  8930 00006785 BF00000000              	mov rdi,0
  8931 0000678A EB00                    	jmp .L_tc_recycle_frame_loop_004c
  8932                                  .L_tc_recycle_frame_loop_004c:
  8933 0000678C 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8934 00006790 740F                    	je .L_tc_recycle_frame_done_004c
  8935 00006792 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8936 00006797 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8937 0000679C 48FFC7                  	inc rdi
  8938 0000679F EBEB                    	jmp .L_tc_recycle_frame_loop_004c
  8939                                  .L_tc_recycle_frame_done_004c:
  8940 000067A1 4889EC                  	mov rsp, rbp	; point to last argument
  8941 000067A4 5D                      	pop rbp
  8942 000067A5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8943 000067A8 C9                      	leave
  8944 000067A9 C21800                  	ret AND_KILL_FRAME(1)
  8945                                  .L_lambda_opt_end_0009:	; new closure is in rax
  8946 000067AC C9                      	leave
  8947 000067AD C21800                  	ret AND_KILL_FRAME(1)
  8948                                  .L_lambda_simple_end_0039:	; new closure is in rax
  8949 000067B0 803804                  	cmp byte [rax], T_closure
  8950 000067B3 0F8560010000            	jne L_error_non_closure
  8951 000067B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8952 000067BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8953 000067BF FF7500                  	push qword[rbp]
  8954 000067C2 488B5C2410              	mov rbx, qword[rsp+8*2]	 ;rbx holds the lexical enviroment of h
  8955 000067C7 48895D10                	mov qword[rbp + 8*2],rbx
  8956 000067CB 48C7451801000000        	mov qword[rbp + 8*3], 1	 ;n turns to m
  8957 000067D3 BF00000000              	mov rdi,0
  8958 000067D8 EB00                    	jmp .L_tc_recycle_frame_loop_004e
  8959                                  .L_tc_recycle_frame_loop_004e:
  8960 000067DA 483B7D18                	cmp rdi, qword[rbp + 8*3]	 ;if rdi is equal to the number of parans - we donec
  8961 000067DE 740F                    	je .L_tc_recycle_frame_done_004e
  8962 000067E0 488B5CFC20              	mov rbx, qword[rsp + 8 * (4 + rdi)]
  8963 000067E5 48895CFD20              	mov qword[rbp + 8 * (4 + rdi)],rbx
  8964 000067EA 48FFC7                  	inc rdi
  8965 000067ED EBEB                    	jmp .L_tc_recycle_frame_loop_004e
  8966                                  .L_tc_recycle_frame_done_004e:
  8967 000067EF 4889EC                  	mov rsp, rbp	; point to last argument
  8968 000067F2 5D                      	pop rbp
  8969 000067F3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8970 000067F6 C9                      	leave
  8971 000067F7 C21800                  	ret AND_KILL_FRAME(1)
  8972                                  .L_lambda_simple_end_0037:	; new closure is in rax
  8973 000067FA 803804                  	cmp byte [rax], T_closure
  8974 000067FD 0F8516010000            	jne L_error_non_closure
  8975 00006803 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8976 00006806 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8977 00006809 48890425[B3080000]      	mov qword [free_var_0], rax
  8978 00006811 48B8-                   	mov rax, sob_void
  8978 00006813 [0000000000000000] 
  8979                                  
  8980 0000681B 4889C7                  	mov rdi, rax
  8981 0000681E E8F4030000              	call print_sexpr_if_not_void
  8982                                  	; preparing a non-tail-call
  8983 00006823 48B8-                   	mov rax, L_constants + 2218
  8983 00006825 [AA08000000000000] 
  8984 0000682D 50                      	push rax
  8985 0000682E 48B8-                   	mov rax, L_constants + 2209
  8985 00006830 [A108000000000000] 
  8986 00006838 50                      	push rax
  8987 00006839 6A02                    	push 2	; arg count
  8988 0000683B 488B0425[B3080000]      	mov rax, qword [free_var_0]	; free var +
  8989 00006843 803805                  	cmp byte [rax], T_undefined
  8990 00006846 744D                    	je L_error_fvar_undefined
  8991 00006848 803804                  	cmp byte [rax], T_closure
  8992 0000684B 0F85C8000000            	jne L_error_non_closure
  8993 00006851 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8994 00006854 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8995                                  Lend:
  8996 00006857 4889C7                  	mov rdi, rax
  8997 0000685A E8B8030000              	call print_sexpr_if_not_void
  8998                                  
  8999 0000685F 48BF-                           mov rdi, fmt_memory_usage
  8999 00006861 [250D000000000000] 
  9000 00006869 488B3425[AB0D0000]              mov rsi, qword [top_of_memory]
  9001 00006871 4881EE[00000000]                sub rsi, memory
  9002 00006878 B800000000                      mov rax, 0
  9003                                          ENTER
    44 0000687D C8000000            <1>  enter 0, 0
    45 00006881 4883E4F0            <1>  and rsp, ~15
  9004 00006885 E8(00000000)                    call printf
  9005                                          LEAVE
    49 0000688A C9                  <1>  leave
  9006 0000688B B800000000                      mov rax, 0
  9007 00006890 E8(00000000)                    call exit
  9008                                  
  9009                                  L_error_fvar_undefined:
  9010 00006895 50                              push rax
  9011 00006896 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  9012 0000689E 48BE-                           mov rsi, fmt_undefined_free_var_1
  9012 000068A0 [8D0C000000000000] 
  9013 000068A8 B800000000                      mov rax, 0
  9014                                          ENTER
    44 000068AD C8000000            <1>  enter 0, 0
    45 000068B1 4883E4F0            <1>  and rsp, ~15
  9015 000068B5 E8(00000000)                    call fprintf
  9016                                          LEAVE
    49 000068BA C9                  <1>  leave
  9017 000068BB 58                              pop rax
  9018 000068BC 488B4001                        mov rax, qword [rax + 1] ; string
  9019 000068C0 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  9020 000068C4 BE01000000                      mov rsi, 1               ; sizeof(char)
  9021 000068C9 488B5001                        mov rdx, qword [rax + 1] ; string-length
  9022 000068CD 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  9023 000068D5 B800000000                      mov rax, 0
  9024                                          ENTER
    44 000068DA C8000000            <1>  enter 0, 0
    45 000068DE 4883E4F0            <1>  and rsp, ~15
  9025 000068E2 E8(00000000)                    call fwrite
  9026                                          LEAVE
    49 000068E7 C9                  <1>  leave
  9027 000068E8 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  9028 000068F0 48BE-                           mov rsi, fmt_undefined_free_var_2
  9028 000068F2 [A40C000000000000] 
  9029 000068FA B800000000                      mov rax, 0
  9030                                          ENTER
    44 000068FF C8000000            <1>  enter 0, 0
    45 00006903 4883E4F0            <1>  and rsp, ~15
  9031 00006907 E8(00000000)                    call fprintf
  9032                                          LEAVE
    49 0000690C C9                  <1>  leave
  9033 0000690D 48C7C0F6FFFFFF                  mov rax, -10
  9034 00006914 E8(00000000)                    call exit
  9035                                  
  9036                                  L_error_non_closure:
  9037 00006919 488B3C25[00000000]              mov rdi, qword [stderr]
  9038 00006921 48BE-                           mov rsi, fmt_non_closure
  9038 00006923 [5B0D000000000000] 
  9039 0000692B B800000000                      mov rax, 0
  9040                                          ENTER
    44 00006930 C8000000            <1>  enter 0, 0
    45 00006934 4883E4F0            <1>  and rsp, ~15
  9041 00006938 E8(00000000)                    call fprintf
  9042                                          LEAVE
    49 0000693D C9                  <1>  leave
  9043 0000693E 48C7C0FEFFFFFF                  mov rax, -2
  9044 00006945 E8(00000000)                    call exit
  9045                                  
  9046                                  L_error_improper_list:
  9047 0000694A 488B3C25[00000000]      	mov rdi, qword [stderr]
  9048 00006952 48BE-                   	mov rsi, fmt_error_improper_list
  9048 00006954 [830D000000000000] 
  9049 0000695C B800000000              	mov rax, 0
  9050                                          ENTER
    44 00006961 C8000000            <1>  enter 0, 0
    45 00006965 4883E4F0            <1>  and rsp, ~15
  9051 00006969 E8(00000000)            	call fprintf
  9052                                          LEAVE
    49 0000696E C9                  <1>  leave
  9053 0000696F 48C7C0F9FFFFFF          	mov rax, -7
  9054 00006976 E8(00000000)            	call exit
  9055                                  
  9056                                  L_error_incorrect_arity_simple:
  9057 0000697B 488B3C25[00000000]              mov rdi, qword [stderr]
  9058 00006983 48BE-                           mov rsi, fmt_incorrect_arity_simple
  9058 00006985 [C60C000000000000] 
  9059 0000698D EB12                            jmp L_error_incorrect_arity_common
  9060                                  L_error_incorrect_arity_opt:
  9061 0000698F 488B3C25[00000000]              mov rdi, qword [stderr]
  9062 00006997 48BE-                           mov rsi, fmt_incorrect_arity_opt
  9062 00006999 [F10C000000000000] 
  9063                                  L_error_incorrect_arity_common:
  9064 000069A1 5A                              pop rdx
  9065 000069A2 59                              pop rcx
  9066 000069A3 B800000000                      mov rax, 0
  9067                                          ENTER
    44 000069A8 C8000000            <1>  enter 0, 0
    45 000069AC 4883E4F0            <1>  and rsp, ~15
  9068 000069B0 E8(00000000)                    call fprintf
  9069                                          LEAVE
    49 000069B5 C9                  <1>  leave
  9070 000069B6 48C7C0FAFFFFFF                  mov rax, -6
  9071 000069BD E8(00000000)                    call exit
  9072                                  
  9073                                  section .data
  9074                                  fmt_undefined_free_var_1:
  9075 00000C8D 212121205468652066-             db `!!! The free variable \0`
  9075 00000C96 726565207661726961-
  9075 00000C9F 626C652000         
  9076                                  fmt_undefined_free_var_2:
  9077 00000CA4 207761732075736564-             db ` was used before it was defined.\n\0`
  9077 00000CAD 206265666F72652069-
  9077 00000CB6 742077617320646566-
  9077 00000CBF 696E65642E0A00     
  9078                                  fmt_incorrect_arity_simple:
  9079 00000CC6 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  9079 00000CCF 74656420256C642061-
  9079 00000CD8 7267756D656E74732C-
  9079 00000CE1 206275742067697665-
  9079 00000CEA 6E20256C640A00     
  9080                                  fmt_incorrect_arity_opt:
  9081 00000CF1 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  9081 00000CFA 746564206174206C65-
  9081 00000D03 61737420256C642061-
  9081 00000D0C 7267756D656E74732C-
  9081 00000D15 206275742067697665-
  9081 00000D1E 6E20256C640A00     
  9082                                  fmt_memory_usage:
  9083 00000D25 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  9083 00000D2E 20256C642062797465-
  9083 00000D37 73206F662064796E61-
  9083 00000D40 6D6963616C6C792D61-
  9083 00000D49 6C6C6F636174656420-
  9083 00000D52 6D656D6F72790A0A00 
  9084                                  fmt_non_closure:
  9085 00000D5B 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  9085 00000D64 7074696E6720746F20-
  9085 00000D6D 6170706C792061206E-
  9085 00000D76 6F6E2D636C6F737572-
  9085 00000D7F 65210A00           
  9086                                  fmt_error_improper_list:
  9087 00000D83 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  9087 00000D8C 7267756D656E742069-
  9087 00000D95 73206E6F7420612070-
  9087 00000D9E 726F706572206C6973-
  9087 00000DA7 74210A00           
  9088                                  
  9089                                  section .bss
  9090                                  memory:
  9091 00000000 <res 40000000h>         	resb gbytes(1)
  9092                                  
  9093                                  section .data
  9094                                  top_of_memory:
  9095 00000DAB [0000000000000000]              dq memory
  9096                                  
  9097                                  section .text
  9098                                  malloc:
  9099 000069C2 488B0425[AB0D0000]              mov rax, qword [top_of_memory]
  9100 000069CA 48013C25[AB0D0000]              add qword [top_of_memory], rdi
  9101 000069D2 C3                              ret
  9102                                  
  9103                                  L_code_ptr_return:
  9104 000069D3 48837C241002            	cmp qword [rsp + 8*2], 2
  9105 000069D9 0F851F1D0000            	jne L_error_arg_count_2
  9106 000069DF 488B4C2418              	mov rcx, qword [rsp + 8*3]
  9107                                  	assert_integer(rcx)
    53 000069E4 803911              <1>  cmp byte [%1], %2
    54 000069E7 0F85B01D0000        <1>  jne L_error_incorrect_type
  9108 000069ED 488B4901                	mov rcx, qword [rcx + 1]
  9109 000069F1 4883F900                	cmp rcx, 0
  9110 000069F5 0F8C371C0000            	jl L_error_integer_range
  9111 000069FB 488B442420              	mov rax, qword [rsp + 8*4]
  9112                                  .L0:
  9113 00006A00 4883F900                        cmp rcx, 0
  9114 00006A04 7409                            je .L1
  9115 00006A06 488B6D00                	mov rbp, qword [rbp]
  9116 00006A0A 48FFC9                  	dec rcx
  9117 00006A0D 7FF1                    	jg .L0
  9118                                  .L1:
  9119 00006A0F 4889EC                  	mov rsp, rbp
  9120 00006A12 5D                      	pop rbp
  9121 00006A13 5B                              pop rbx
  9122 00006A14 488B4C2408                      mov rcx, qword [rsp + 8*1]
  9123 00006A19 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
  9124 00006A1E FFE3                    	jmp rbx
  9125                                  
  9126                                  L_code_ptr_make_list:
  9127 00006A20 C8000000                	enter 0, 0
  9128 00006A24 48837D1801                      cmp COUNT, 1
  9129 00006A29 740C                            je .L0
  9130 00006A2B 48837D1802                      cmp COUNT, 2
  9131 00006A30 7411                            je .L1
  9132 00006A32 E9FC1C0000                      jmp L_error_arg_count_12
  9133                                  .L0:
  9134 00006A37 49B9-                           mov r9, sob_void
  9134 00006A39 [0000000000000000] 
  9135 00006A41 EB04                            jmp .L2
  9136                                  .L1:
  9137 00006A43 4C8B4D28                        mov r9, PARAM(1)
  9138                                  .L2:
  9139 00006A47 488B4D20                        mov rcx, PARAM(0)
  9140                                          assert_integer(rcx)
    53 00006A4B 803911              <1>  cmp byte [%1], %2
    54 00006A4E 0F85491D0000        <1>  jne L_error_incorrect_type
  9141 00006A54 488B4901                        mov rcx, qword [rcx + 1]
  9142 00006A58 4883F900                        cmp rcx, 0
  9143 00006A5C 0F8C011C0000                    jl L_error_arg_negative
  9144 00006A62 49B8-                           mov r8, sob_nil
  9144 00006A64 [0100000000000000] 
  9145                                  .L3:
  9146 00006A6C 4883F900                        cmp rcx, 0
  9147 00006A70 7E1D                            jle .L4
  9148 00006A72 BF11000000                      mov rdi, 1 + 8 + 8
  9149 00006A77 E846FFFFFF                      call malloc
  9150 00006A7C C60021                          mov byte [rax], T_pair
  9151 00006A7F 4C894801                        mov qword [rax + 1], r9
  9152 00006A83 4C894009                        mov qword [rax + 1 + 8], r8
  9153 00006A87 4989C0                          mov r8, rax
  9154 00006A8A 48FFC9                          dec rcx
  9155 00006A8D EBDD                            jmp .L3
  9156                                  .L4:
  9157 00006A8F 4C89C0                          mov rax, r8
  9158 00006A92 48837D1802                      cmp COUNT, 2
  9159 00006A97 7404                            je .L5
  9160 00006A99 C9                              leave
  9161 00006A9A C21800                          ret AND_KILL_FRAME(1)
  9162                                  .L5:
  9163 00006A9D C9                      	leave
  9164 00006A9E C22000                  	ret AND_KILL_FRAME(2)
  9165                                  
  9166                                  L_code_ptr_is_primitive:
  9167 00006AA1 C8000000                	enter 0, 0
  9168 00006AA5 48837D1801              	cmp COUNT, 1
  9169 00006AAA 0F85191C0000            	jne L_error_arg_count_1
  9170 00006AB0 488B4520                	mov rax, PARAM(0)
  9171                                  	assert_closure(rax)
    53 00006AB4 803804              <1>  cmp byte [%1], %2
    54 00006AB7 0F85E01C0000        <1>  jne L_error_incorrect_type
  9172 00006ABD 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
  9173 00006AC2 750C                    	jne .L_false
  9174 00006AC4 48B8-                   	mov rax, sob_boolean_true
  9174 00006AC6 [0300000000000000] 
  9175 00006ACE EB0A                    	jmp .L_end
  9176                                  .L_false:
  9177 00006AD0 48B8-                   	mov rax, sob_boolean_false
  9177 00006AD2 [0200000000000000] 
  9178                                  .L_end:
  9179 00006ADA C9                      	leave
  9180 00006ADB C21800                  	ret AND_KILL_FRAME(1)
  9181                                  
  9182                                  L_code_ptr_length:
  9183 00006ADE C8000000                	enter 0, 0
  9184 00006AE2 48837D1801              	cmp COUNT, 1
  9185 00006AE7 0F85DC1B0000            	jne L_error_arg_count_1
  9186 00006AED 488B5D20                	mov rbx, PARAM(0)
  9187 00006AF1 BF00000000              	mov rdi, 0
  9188                                  .L:
  9189 00006AF6 803B01                  	cmp byte [rbx], T_nil
  9190 00006AF9 7412                    	je .L_end
  9191                                  	assert_pair(rbx)
    53 00006AFB 803B21              <1>  cmp byte [%1], %2
    54 00006AFE 0F85991C0000        <1>  jne L_error_incorrect_type
  9192 00006B04 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
  9193 00006B08 48FFC7                  	inc rdi
  9194 00006B0B EBE9                    	jmp .L
  9195                                  .L_end:
  9196 00006B0D E8061B0000              	call make_integer
  9197 00006B12 C9                      	leave
  9198 00006B13 C21800                  	ret AND_KILL_FRAME(1)
  9199                                  
  9200                                  L_code_ptr_break:
  9201 00006B16 48837C241000                    cmp qword [rsp + 8 * 2], 0
  9202 00006B1C 0F85721B0000                    jne L_error_arg_count_0
  9203 00006B22 CC                              int3
  9204 00006B23 48B8-                           mov rax, sob_void
  9204 00006B25 [0000000000000000] 
  9205 00006B2D C21000                          ret AND_KILL_FRAME(0)        
  9206                                  
  9207                                  L_code_ptr_frame:
  9208 00006B30 C8000000                        enter 0, 0
  9209 00006B34 48837D1800                      cmp COUNT, 0
  9210 00006B39 0F85551B0000                    jne L_error_arg_count_0
  9211                                  
  9212 00006B3F 48BF-                           mov rdi, fmt_frame
  9212 00006B41 [B30D000000000000] 
  9213 00006B49 488B7500                        mov rsi, qword [rbp]    ; old rbp
  9214 00006B4D 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  9215 00006B51 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  9216 00006B55 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  9217 00006B59 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  9218 00006B5D 6A00                            push 0
  9219 00006B5F 4151                            push r9
  9220 00006B61 4150                            push r8                   ; we'll use it when printing the params
  9221 00006B63 B800000000                      mov rax, 0
  9222                                          
  9223                                          ENTER
    44 00006B68 C8000000            <1>  enter 0, 0
    45 00006B6C 4883E4F0            <1>  and rsp, ~15
  9224 00006B70 E8(00000000)                    call printf
  9225                                          LEAVE
    49 00006B75 C9                  <1>  leave
  9226                                  
  9227                                  .L:
  9228 00006B76 488B0C24                        mov rcx, qword [rsp]
  9229 00006B7A 4883F900                        cmp rcx, 0
  9230 00006B7E 7467                            je .L_out
  9231 00006B80 48BF-                           mov rdi, fmt_frame_param_prefix
  9231 00006B82 [EC0D000000000000] 
  9232 00006B8A 488B742410                      mov rsi, qword [rsp + 8*2]
  9233 00006B8F B800000000                      mov rax, 0
  9234                                          
  9235                                          ENTER
    44 00006B94 C8000000            <1>  enter 0, 0
    45 00006B98 4883E4F0            <1>  and rsp, ~15
  9236 00006B9C E8(00000000)                    call printf
  9237                                          LEAVE
    49 00006BA1 C9                  <1>  leave
  9238                                  
  9239 00006BA2 488B0C24                        mov rcx, qword [rsp]
  9240 00006BA6 48FFC9                          dec rcx
  9241 00006BA9 48890C24                        mov qword [rsp], rcx    ; dec arg count
  9242 00006BAD 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  9243 00006BB2 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  9244 00006BB7 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  9245 00006BBB 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  9246 00006BC0 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  9247 00006BC3 E87B000000                      call print_sexpr
  9248 00006BC8 48BF-                           mov rdi, fmt_newline
  9248 00006BCA [180E000000000000] 
  9249 00006BD2 B800000000                      mov rax, 0
  9250                                          ENTER
    44 00006BD7 C8000000            <1>  enter 0, 0
    45 00006BDB 4883E4F0            <1>  and rsp, ~15
  9251 00006BDF E8(00000000)                    call printf
  9252                                          LEAVE
    49 00006BE4 C9                  <1>  leave
  9253 00006BE5 EB8F                            jmp .L
  9254                                  .L_out:
  9255 00006BE7 48BF-                           mov rdi, fmt_frame_continue
  9255 00006BE9 [FD0D000000000000] 
  9256 00006BF1 B800000000                      mov rax, 0
  9257                                          ENTER
    44 00006BF6 C8000000            <1>  enter 0, 0
    45 00006BFA 4883E4F0            <1>  and rsp, ~15
  9258 00006BFE E8(00000000)                    call printf
  9259 00006C03 E8(00000000)                    call getchar
  9260                                          LEAVE
    49 00006C08 C9                  <1>  leave
  9261                                          
  9262 00006C09 48B8-                           mov rax, sob_void
  9262 00006C0B [0000000000000000] 
  9263 00006C13 C9                              leave
  9264 00006C14 C21000                          ret AND_KILL_FRAME(0)
  9265                                          
  9266                                  print_sexpr_if_not_void:
  9267 00006C17 4881FF[00000000]        	cmp rdi, sob_void
  9268 00006C1E 7422                    	je .done
  9269 00006C20 E81E000000              	call print_sexpr
  9270 00006C25 48BF-                   	mov rdi, fmt_newline
  9270 00006C27 [180E000000000000] 
  9271 00006C2F B800000000              	mov rax, 0
  9272                                  	ENTER
    44 00006C34 C8000000            <1>  enter 0, 0
    45 00006C38 4883E4F0            <1>  and rsp, ~15
  9273 00006C3C E8(00000000)            	call printf
  9274                                  	LEAVE
    49 00006C41 C9                  <1>  leave
  9275                                  .done:
  9276 00006C42 C3                      	ret
  9277                                  
  9278                                  section .data
  9279                                  fmt_frame:
  9280 00000DB3 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  9280 00000DBC 207265742061646472-
  9280 00000DC5 203D2025703B206C65-
  9280 00000DCE 7820656E76203D2025-
  9280 00000DD7 703B20706172616D20-
  9280 00000DE0 636F756E74203D2025-
  9280 00000DE9 640A00             
  9281                                  fmt_frame_param_prefix:
  9282 00000DEC 3D3D5B706172616D20-             db `==[param %d]==> \0`
  9282 00000DF5 25645D3D3D3E2000   
  9283                                  fmt_frame_continue:
  9284 00000DFD 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  9284 00000E06 723E20746F20636F6E-
  9284 00000E0F 74696E75652E2E2E00 
  9285                                  fmt_newline:
  9286 00000E18 0A00                    	db `\n\0`
  9287                                  fmt_void:
  9288 00000E1A 233C766F69643E00        	db `#<void>\0`
  9289                                  fmt_nil:
  9290 00000E22 282900                  	db `()\0`
  9291                                  fmt_boolean_false:
  9292 00000E25 236600                  	db `#f\0`
  9293                                  fmt_boolean_true:
  9294 00000E28 237400                  	db `#t\0`
  9295                                  fmt_char_backslash:
  9296 00000E2B 235C5C00                	db `#\\\\\0`
  9297                                  fmt_char_dquote:
  9298 00000E2F 235C2200                	db `#\\"\0`
  9299                                  fmt_char_simple:
  9300 00000E33 235C256300              	db `#\\%c\0`
  9301                                  fmt_char_null:
  9302 00000E38 235C6E756C00            	db `#\\nul\0`
  9303                                  fmt_char_bell:
  9304 00000E3E 235C62656C6C00          	db `#\\bell\0`
  9305                                  fmt_char_backspace:
  9306 00000E45 235C6261636B737061-     	db `#\\backspace\0`
  9306 00000E4E 636500             
  9307                                  fmt_char_tab:
  9308 00000E51 235C74616200            	db `#\\tab\0`
  9309                                  fmt_char_newline:
  9310 00000E57 235C6E65776C696E65-     	db `#\\newline\0`
  9310 00000E60 00                 
  9311                                  fmt_char_formfeed:
  9312 00000E61 235C7061676500          	db `#\\page\0`
  9313                                  fmt_char_return:
  9314 00000E68 235C72657475726E00      	db `#\\return\0`
  9315                                  fmt_char_escape:
  9316 00000E71 235C65736300            	db `#\\esc\0`
  9317                                  fmt_char_space:
  9318 00000E77 235C737061636500        	db `#\\space\0`
  9319                                  fmt_char_hex:
  9320 00000E7F 235C782530325800        	db `#\\x%02X\0`
  9321                                  fmt_gensym:
  9322 00000E87 47256C6400                      db `G%ld\0`
  9323                                  fmt_closure:
  9324 00000E8C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  9324 00000E95 206174203078253038-
  9324 00000E9E 5820656E763D307825-
  9324 00000EA7 30385820636F64653D-
  9324 00000EB0 3078253038583E00   
  9325                                  fmt_lparen:
  9326 00000EB8 2800                    	db `(\0`
  9327                                  fmt_dotted_pair:
  9328 00000EBA 202E2000                	db ` . \0`
  9329                                  fmt_rparen:
  9330 00000EBE 2900                    	db `)\0`
  9331                                  fmt_space:
  9332 00000EC0 2000                    	db ` \0`
  9333                                  fmt_empty_vector:
  9334 00000EC2 23282900                	db `#()\0`
  9335                                  fmt_vector:
  9336 00000EC6 232800                  	db `#(\0`
  9337                                  fmt_real:
  9338 00000EC9 256600                  	db `%f\0`
  9339                                  fmt_fraction:
  9340 00000ECC 256C642F256C6400        	db `%ld/%ld\0`
  9341                                  fmt_zero:
  9342 00000ED4 3000                    	db `0\0`
  9343                                  fmt_int:
  9344 00000ED6 256C6400                	db `%ld\0`
  9345                                  fmt_unknown_scheme_object_error:
  9346 00000EDA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  9346 00000EE3 6F723A20556E6B6E6F-
  9346 00000EEC 776E20536368656D65-
  9346 00000EF5 2D6F626A6563742028-
  9346 00000EFE 525454492030782530-
  9346 00000F07 32582920           
  9347 00000F0B 617420616464726573-     	db `at address 0x%08X\n\n\0`
  9347 00000F14 73203078253038580A-
  9347 00000F1D 0A00               
  9348                                  fmt_dquote:
  9349 00000F1F 2200                    	db `\"\0`
  9350                                  fmt_string_char:
  9351 00000F21 256300                          db `%c\0`
  9352                                  fmt_string_char_7:
  9353 00000F24 5C6100                          db `\\a\0`
  9354                                  fmt_string_char_8:
  9355 00000F27 5C6200                          db `\\b\0`
  9356                                  fmt_string_char_9:
  9357 00000F2A 5C7400                          db `\\t\0`
  9358                                  fmt_string_char_10:
  9359 00000F2D 5C6E00                          db `\\n\0`
  9360                                  fmt_string_char_11:
  9361 00000F30 5C7600                          db `\\v\0`
  9362                                  fmt_string_char_12:
  9363 00000F33 5C6600                          db `\\f\0`
  9364                                  fmt_string_char_13:
  9365 00000F36 5C7200                          db `\\r\0`
  9366                                  fmt_string_char_34:
  9367 00000F39 5C2200                          db `\\"\0`
  9368                                  fmt_string_char_92:
  9369 00000F3C 5C5C00                          db `\\\\\0`
  9370                                  fmt_string_char_hex:
  9371 00000F3F 5C7825583B00                    db `\\x%X;\0`
  9372                                  
  9373                                  section .text
  9374                                  
  9375                                  print_sexpr:
  9376 00006C43 C8000000                	enter 0, 0
  9377 00006C47 8A07                    	mov al, byte [rdi]
  9378 00006C49 3C00                    	cmp al, T_void
  9379 00006C4B 7465                    	je .Lvoid
  9380 00006C4D 3C01                    	cmp al, T_nil
  9381 00006C4F 7470                    	je .Lnil
  9382 00006C51 3C09                    	cmp al, T_boolean_false
  9383 00006C53 747B                    	je .Lboolean_false
  9384 00006C55 3C0A                    	cmp al, T_boolean_true
  9385 00006C57 0F8482000000            	je .Lboolean_true
  9386 00006C5D 3C02                    	cmp al, T_char
  9387 00006C5F 0F8489000000            	je .Lchar
  9388 00006C65 3C41                    	cmp al, T_interned_symbol
  9389 00006C67 0F84CB010000            	je .Linterned_symbol
  9390 00006C6D 3C42                            cmp al, T_uninterned_symbol
  9391 00006C6F 0F84EF010000                    je .Luninterned_symbol
  9392 00006C75 3C21                    	cmp al, T_pair
  9393 00006C77 0F84FA010000            	je .Lpair
  9394 00006C7D 3C22                    	cmp al, T_vector
  9395 00006C7F 0F84C3020000            	je .Lvector
  9396 00006C85 3C04                    	cmp al, T_closure
  9397 00006C87 0F8491010000            	je .Lclosure
  9398 00006C8D 3C13                    	cmp al, T_real
  9399 00006C8F 0F8454030000            	je .Lreal
  9400 00006C95 3C12                    	cmp al, T_fraction
  9401 00006C97 0F847A030000            	je .Lfraction
  9402 00006C9D 3C11                    	cmp al, T_integer
  9403 00006C9F 0F84B3030000            	je .Linteger
  9404 00006CA5 3C03                    	cmp al, T_string
  9405 00006CA7 0F84BE030000            	je .Lstring
  9406                                  
  9407 00006CAD E9F6040000              	jmp .Lunknown_sexpr_type
  9408                                  
  9409                                  .Lvoid:
  9410 00006CB2 48BF-                   	mov rdi, fmt_void
  9410 00006CB4 [1A0E000000000000] 
  9411 00006CBC E91A050000              	jmp .Lemit
  9412                                  
  9413                                  .Lnil:
  9414 00006CC1 48BF-                   	mov rdi, fmt_nil
  9414 00006CC3 [220E000000000000] 
  9415 00006CCB E90B050000              	jmp .Lemit
  9416                                  
  9417                                  .Lboolean_false:
  9418 00006CD0 48BF-                   	mov rdi, fmt_boolean_false
  9418 00006CD2 [250E000000000000] 
  9419 00006CDA E9FC040000              	jmp .Lemit
  9420                                  
  9421                                  .Lboolean_true:
  9422 00006CDF 48BF-                   	mov rdi, fmt_boolean_true
  9422 00006CE1 [280E000000000000] 
  9423 00006CE9 E9ED040000              	jmp .Lemit
  9424                                  
  9425                                  .Lchar:
  9426 00006CEE 8A4701                  	mov al, byte [rdi + 1]
  9427 00006CF1 3C20                    	cmp al, ' '
  9428 00006CF3 7E28                    	jle .Lchar_whitespace
  9429 00006CF5 3C5C                    	cmp al, 92 		; backslash
  9430 00006CF7 0F847C000000            	je .Lchar_backslash
  9431 00006CFD 3C22                    	cmp al, '"'
  9432 00006CFF 0F8483000000            	je .Lchar_dquote
  9433 00006D05 4825FF000000            	and rax, 255
  9434 00006D0B 48BF-                   	mov rdi, fmt_char_simple
  9434 00006D0D [330E000000000000] 
  9435 00006D15 4889C6                  	mov rsi, rax
  9436 00006D18 E9BE040000              	jmp .Lemit
  9437                                  
  9438                                  .Lchar_whitespace:
  9439 00006D1D 3C00                    	cmp al, 0
  9440 00006D1F 7476                    	je .Lchar_null
  9441 00006D21 3C07                    	cmp al, 7
  9442 00006D23 0F847D000000            	je .Lchar_bell
  9443 00006D29 3C08                    	cmp al, 8
  9444 00006D2B 0F8484000000            	je .Lchar_backspace
  9445 00006D31 3C09                    	cmp al, 9
  9446 00006D33 0F848B000000            	je .Lchar_tab
  9447 00006D39 3C0A                    	cmp al, 10
  9448 00006D3B 0F8492000000            	je .Lchar_newline
  9449 00006D41 3C0C                    	cmp al, 12
  9450 00006D43 0F8499000000            	je .Lchar_formfeed
  9451 00006D49 3C0D                    	cmp al, 13
  9452 00006D4B 0F84A0000000            	je .Lchar_return
  9453 00006D51 3C1B                    	cmp al, 27
  9454 00006D53 0F84A7000000            	je .Lchar_escape
  9455 00006D59 4825FF000000            	and rax, 255
  9456 00006D5F 3C20                    	cmp al, ' '
  9457 00006D61 0F84A8000000            	je .Lchar_space
  9458 00006D67 48BF-                   	mov rdi, fmt_char_hex
  9458 00006D69 [7F0E000000000000] 
  9459 00006D71 4889C6                  	mov rsi, rax
  9460 00006D74 E962040000              	jmp .Lemit	
  9461                                  
  9462                                  .Lchar_backslash:
  9463 00006D79 48BF-                   	mov rdi, fmt_char_backslash
  9463 00006D7B [2B0E000000000000] 
  9464 00006D83 E953040000              	jmp .Lemit
  9465                                  
  9466                                  .Lchar_dquote:
  9467 00006D88 48BF-                   	mov rdi, fmt_char_dquote
  9467 00006D8A [2F0E000000000000] 
  9468 00006D92 E944040000              	jmp .Lemit
  9469                                  
  9470                                  .Lchar_null:
  9471 00006D97 48BF-                   	mov rdi, fmt_char_null
  9471 00006D99 [380E000000000000] 
  9472 00006DA1 E935040000              	jmp .Lemit
  9473                                  
  9474                                  .Lchar_bell:
  9475 00006DA6 48BF-                   	mov rdi, fmt_char_bell
  9475 00006DA8 [3E0E000000000000] 
  9476 00006DB0 E926040000              	jmp .Lemit
  9477                                  
  9478                                  .Lchar_backspace:
  9479 00006DB5 48BF-                   	mov rdi, fmt_char_backspace
  9479 00006DB7 [450E000000000000] 
  9480 00006DBF E917040000              	jmp .Lemit
  9481                                  
  9482                                  .Lchar_tab:
  9483 00006DC4 48BF-                   	mov rdi, fmt_char_tab
  9483 00006DC6 [510E000000000000] 
  9484 00006DCE E908040000              	jmp .Lemit
  9485                                  
  9486                                  .Lchar_newline:
  9487 00006DD3 48BF-                   	mov rdi, fmt_char_newline
  9487 00006DD5 [570E000000000000] 
  9488 00006DDD E9F9030000              	jmp .Lemit
  9489                                  
  9490                                  .Lchar_formfeed:
  9491 00006DE2 48BF-                   	mov rdi, fmt_char_formfeed
  9491 00006DE4 [610E000000000000] 
  9492 00006DEC E9EA030000              	jmp .Lemit
  9493                                  
  9494                                  .Lchar_return:
  9495 00006DF1 48BF-                   	mov rdi, fmt_char_return
  9495 00006DF3 [680E000000000000] 
  9496 00006DFB E9DB030000              	jmp .Lemit
  9497                                  
  9498                                  .Lchar_escape:
  9499 00006E00 48BF-                   	mov rdi, fmt_char_escape
  9499 00006E02 [710E000000000000] 
  9500 00006E0A E9CC030000              	jmp .Lemit
  9501                                  
  9502                                  .Lchar_space:
  9503 00006E0F 48BF-                   	mov rdi, fmt_char_space
  9503 00006E11 [770E000000000000] 
  9504 00006E19 E9BD030000              	jmp .Lemit
  9505                                  
  9506                                  .Lclosure:
  9507 00006E1E 4889FE                  	mov rsi, qword rdi
  9508 00006E21 48BF-                   	mov rdi, fmt_closure
  9508 00006E23 [8C0E000000000000] 
  9509 00006E2B 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  9510 00006E2F 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  9511 00006E33 E9A3030000              	jmp .Lemit
  9512                                  
  9513                                  .Linterned_symbol:
  9514 00006E38 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  9515 00006E3C BE01000000              	mov rsi, 1		 ; size = 1 byte
  9516 00006E41 488B5701                	mov rdx, qword [rdi + 1] ; length
  9517 00006E45 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  9518 00006E49 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  9519                                  	ENTER
    44 00006E51 C8000000            <1>  enter 0, 0
    45 00006E55 4883E4F0            <1>  and rsp, ~15
  9520 00006E59 E8(00000000)            	call fwrite
  9521                                  	LEAVE
    49 00006E5E C9                  <1>  leave
  9522 00006E5F E98C030000              	jmp .Lend
  9523                                  
  9524                                  .Luninterned_symbol:
  9525 00006E64 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  9526 00006E68 48BF-                           mov rdi, fmt_gensym
  9526 00006E6A [870E000000000000] 
  9527 00006E72 E964030000                      jmp .Lemit
  9528                                  	
  9529                                  .Lpair:
  9530 00006E77 57                      	push rdi
  9531 00006E78 48BF-                   	mov rdi, fmt_lparen
  9531 00006E7A [B80E000000000000] 
  9532 00006E82 B800000000              	mov rax, 0
  9533                                          ENTER
    44 00006E87 C8000000            <1>  enter 0, 0
    45 00006E8B 4883E4F0            <1>  and rsp, ~15
  9534 00006E8F E8(00000000)            	call printf
  9535                                          LEAVE
    49 00006E94 C9                  <1>  leave
  9536 00006E95 488B3C24                	mov rdi, qword [rsp] 	; pair
  9537 00006E99 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9538 00006E9D E8A1FDFFFF              	call print_sexpr
  9539 00006EA2 5F                      	pop rdi 		; pair
  9540 00006EA3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9541                                  .Lcdr:
  9542 00006EA7 8A07                    	mov al, byte [rdi]
  9543 00006EA9 3C01                    	cmp al, T_nil
  9544 00006EAB 7447                    	je .Lcdr_nil
  9545 00006EAD 3C21                    	cmp al, T_pair
  9546 00006EAF 7462                    	je .Lcdr_pair
  9547 00006EB1 57                      	push rdi
  9548 00006EB2 48BF-                   	mov rdi, fmt_dotted_pair
  9548 00006EB4 [BA0E000000000000] 
  9549 00006EBC B800000000              	mov rax, 0
  9550                                          ENTER
    44 00006EC1 C8000000            <1>  enter 0, 0
    45 00006EC5 4883E4F0            <1>  and rsp, ~15
  9551 00006EC9 E8(00000000)            	call printf
  9552                                          LEAVE
    49 00006ECE C9                  <1>  leave
  9553 00006ECF 5F                      	pop rdi
  9554 00006ED0 E86EFDFFFF              	call print_sexpr
  9555 00006ED5 48BF-                   	mov rdi, fmt_rparen
  9555 00006ED7 [BE0E000000000000] 
  9556 00006EDF B800000000              	mov rax, 0
  9557                                          ENTER
    44 00006EE4 C8000000            <1>  enter 0, 0
    45 00006EE8 4883E4F0            <1>  and rsp, ~15
  9558 00006EEC E8(00000000)            	call printf
  9559                                          LEAVE
    49 00006EF1 C9                  <1>  leave
  9560 00006EF2 C9                      	leave
  9561 00006EF3 C3                      	ret
  9562                                  
  9563                                  .Lcdr_nil:
  9564 00006EF4 48BF-                   	mov rdi, fmt_rparen
  9564 00006EF6 [BE0E000000000000] 
  9565 00006EFE B800000000              	mov rax, 0
  9566                                          ENTER
    44 00006F03 C8000000            <1>  enter 0, 0
    45 00006F07 4883E4F0            <1>  and rsp, ~15
  9567 00006F0B E8(00000000)            	call printf
  9568                                          LEAVE
    49 00006F10 C9                  <1>  leave
  9569 00006F11 C9                      	leave
  9570 00006F12 C3                      	ret
  9571                                  
  9572                                  .Lcdr_pair:
  9573 00006F13 57                      	push rdi
  9574 00006F14 48BF-                   	mov rdi, fmt_space
  9574 00006F16 [C00E000000000000] 
  9575 00006F1E B800000000              	mov rax, 0
  9576                                          ENTER
    44 00006F23 C8000000            <1>  enter 0, 0
    45 00006F27 4883E4F0            <1>  and rsp, ~15
  9577 00006F2B E8(00000000)            	call printf
  9578                                          LEAVE
    49 00006F30 C9                  <1>  leave
  9579 00006F31 488B3C24                	mov rdi, qword [rsp]
  9580 00006F35 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9581 00006F39 E805FDFFFF              	call print_sexpr
  9582 00006F3E 5F                      	pop rdi
  9583 00006F3F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9584 00006F43 E95FFFFFFF              	jmp .Lcdr
  9585                                  
  9586                                  .Lvector:
  9587 00006F48 488B4701                	mov rax, qword [rdi + 1] ; length
  9588 00006F4C 4883F800                	cmp rax, 0
  9589 00006F50 0F8484000000            	je .Lvector_empty
  9590 00006F56 57                      	push rdi
  9591 00006F57 48BF-                   	mov rdi, fmt_vector
  9591 00006F59 [C60E000000000000] 
  9592 00006F61 B800000000              	mov rax, 0
  9593                                          ENTER
    44 00006F66 C8000000            <1>  enter 0, 0
    45 00006F6A 4883E4F0            <1>  and rsp, ~15
  9594 00006F6E E8(00000000)            	call printf
  9595                                          LEAVE
    49 00006F73 C9                  <1>  leave
  9596 00006F74 488B3C24                	mov rdi, qword [rsp]
  9597 00006F78 FF7701                  	push qword [rdi + 1]
  9598 00006F7B 6A01                    	push 1
  9599 00006F7D 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  9600 00006F81 E8BDFCFFFF              	call print_sexpr
  9601                                  .Lvector_loop:
  9602                                  	; [rsp] index
  9603                                  	; [rsp + 8*1] limit
  9604                                  	; [rsp + 8*2] vector
  9605 00006F86 488B0424                	mov rax, qword [rsp]
  9606 00006F8A 483B442408              	cmp rax, qword [rsp + 8*1]
  9607 00006F8F 7436                    	je .Lvector_end
  9608 00006F91 48BF-                   	mov rdi, fmt_space
  9608 00006F93 [C00E000000000000] 
  9609 00006F9B B800000000              	mov rax, 0
  9610                                          ENTER
    44 00006FA0 C8000000            <1>  enter 0, 0
    45 00006FA4 4883E4F0            <1>  and rsp, ~15
  9611 00006FA8 E8(00000000)            	call printf
  9612                                          LEAVE
    49 00006FAD C9                  <1>  leave
  9613 00006FAE 488B0424                	mov rax, qword [rsp]
  9614 00006FB2 488B5C2410              	mov rbx, qword [rsp + 8*2]
  9615 00006FB7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  9616 00006FBC E882FCFFFF              	call print_sexpr
  9617 00006FC1 48FF0424                	inc qword [rsp]
  9618 00006FC5 EBBF                    	jmp .Lvector_loop
  9619                                  
  9620                                  .Lvector_end:
  9621 00006FC7 4883C418                	add rsp, 8*3
  9622 00006FCB 48BF-                   	mov rdi, fmt_rparen
  9622 00006FCD [BE0E000000000000] 
  9623 00006FD5 E901020000              	jmp .Lemit	
  9624                                  
  9625                                  .Lvector_empty:
  9626 00006FDA 48BF-                   	mov rdi, fmt_empty_vector
  9626 00006FDC [C20E000000000000] 
  9627 00006FE4 E9F2010000              	jmp .Lemit
  9628                                  
  9629                                  .Lreal:
  9630 00006FE9 FF7701                  	push qword [rdi + 1]
  9631 00006FEC F20F100424              	movsd xmm0, qword [rsp]
  9632 00006FF1 4883C408                	add rsp, 8*1
  9633 00006FF5 48BF-                   	mov rdi, fmt_real
  9633 00006FF7 [C90E000000000000] 
  9634 00006FFF B801000000              	mov rax, 1
  9635                                  	ENTER
    44 00007004 C8000000            <1>  enter 0, 0
    45 00007008 4883E4F0            <1>  and rsp, ~15
  9636 0000700C E8(00000000)            	call printf
  9637                                  	LEAVE
    49 00007011 C9                  <1>  leave
  9638 00007012 E9D9010000              	jmp .Lend
  9639                                  
  9640                                  .Lfraction:
  9641 00007017 488B7701                	mov rsi, qword [rdi + 1]
  9642 0000701B 488B5709                	mov rdx, qword [rdi + 1 + 8]
  9643 0000701F 4883FE00                	cmp rsi, 0
  9644 00007023 7415                    	je .Lrat_zero
  9645 00007025 4883FA01                	cmp rdx, 1
  9646 00007029 741E                    	je .Lrat_int
  9647 0000702B 48BF-                   	mov rdi, fmt_fraction
  9647 0000702D [CC0E000000000000] 
  9648 00007035 E9A1010000              	jmp .Lemit
  9649                                  
  9650                                  .Lrat_zero:
  9651 0000703A 48BF-                   	mov rdi, fmt_zero
  9651 0000703C [D40E000000000000] 
  9652 00007044 E992010000              	jmp .Lemit
  9653                                  
  9654                                  .Lrat_int:
  9655 00007049 48BF-                   	mov rdi, fmt_int
  9655 0000704B [D60E000000000000] 
  9656 00007053 E983010000              	jmp .Lemit
  9657                                  
  9658                                  .Linteger:
  9659 00007058 488B7701                	mov rsi, qword [rdi + 1]
  9660 0000705C 48BF-                   	mov rdi, fmt_int
  9660 0000705E [D60E000000000000] 
  9661 00007066 E970010000              	jmp .Lemit
  9662                                  
  9663                                  .Lstring:
  9664 0000706B 488D4709                	lea rax, [rdi + 1 + 8]
  9665 0000706F 50                      	push rax
  9666 00007070 FF7701                  	push qword [rdi + 1]
  9667 00007073 48BF-                   	mov rdi, fmt_dquote
  9667 00007075 [1F0F000000000000] 
  9668 0000707D B800000000              	mov rax, 0
  9669                                  	ENTER
    44 00007082 C8000000            <1>  enter 0, 0
    45 00007086 4883E4F0            <1>  and rsp, ~15
  9670 0000708A E8(00000000)            	call printf
  9671                                  	LEAVE
    49 0000708F C9                  <1>  leave
  9672                                  .Lstring_loop:
  9673                                  	; qword [rsp]: limit
  9674                                  	; qword [rsp + 8*1]: char *
  9675 00007090 48833C2400              	cmp qword [rsp], 0
  9676 00007095 0F84FD000000            	je .Lstring_end
  9677 0000709B 488B442408              	mov rax, qword [rsp + 8*1]
  9678 000070A0 8A00                    	mov al, byte [rax]
  9679 000070A2 4825FF000000            	and rax, 255
  9680 000070A8 3C07                    	cmp al, 7
  9681 000070AA 7468                            je .Lstring_char_7
  9682 000070AC 3C08                            cmp al, 8
  9683 000070AE 7470                            je .Lstring_char_8
  9684 000070B0 3C09                            cmp al, 9
  9685 000070B2 7478                            je .Lstring_char_9
  9686 000070B4 3C0A                            cmp al, 10
  9687 000070B6 0F847C000000                    je .Lstring_char_10
  9688 000070BC 3C0B                            cmp al, 11
  9689 000070BE 0F8480000000                    je .Lstring_char_11
  9690 000070C4 3C0C                            cmp al, 12
  9691 000070C6 0F8484000000                    je .Lstring_char_12
  9692 000070CC 3C0D                            cmp al, 13
  9693 000070CE 0F8488000000                    je .Lstring_char_13
  9694 000070D4 3C22                            cmp al, 34
  9695 000070D6 0F848C000000                    je .Lstring_char_34
  9696 000070DC 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  9698 000070DE 3C20                            cmp al, ' '
  9699 000070E0 0F8CA0000000                    jl .Lstring_char_hex
  9700 000070E6 48BF-                           mov rdi, fmt_string_char
  9700 000070E8 [210F000000000000] 
  9701 000070F0 4889C6                          mov rsi, rax
  9702                                  .Lstring_char_emit:
  9703 000070F3 B800000000                      mov rax, 0
  9704                                          ENTER
    44 000070F8 C8000000            <1>  enter 0, 0
    45 000070FC 4883E4F0            <1>  and rsp, ~15
  9705 00007100 E8(00000000)                    call printf
  9706                                          LEAVE
    49 00007105 C9                  <1>  leave
  9707 00007106 48FF0C24                        dec qword [rsp]
  9708 0000710A 48FF442408                      inc qword [rsp + 8*1]
  9709 0000710F E97CFFFFFF                      jmp .Lstring_loop
  9710                                  
  9711                                  .Lstring_char_7:
  9712 00007114 48BF-                           mov rdi, fmt_string_char_7
  9712 00007116 [240F000000000000] 
  9713 0000711E EBD3                            jmp .Lstring_char_emit
  9714                                  
  9715                                  .Lstring_char_8:
  9716 00007120 48BF-                           mov rdi, fmt_string_char_8
  9716 00007122 [270F000000000000] 
  9717 0000712A EBC7                            jmp .Lstring_char_emit
  9718                                          
  9719                                  .Lstring_char_9:
  9720 0000712C 48BF-                           mov rdi, fmt_string_char_9
  9720 0000712E [2A0F000000000000] 
  9721 00007136 EBBB                            jmp .Lstring_char_emit
  9722                                  
  9723                                  .Lstring_char_10:
  9724 00007138 48BF-                           mov rdi, fmt_string_char_10
  9724 0000713A [2D0F000000000000] 
  9725 00007142 EBAF                            jmp .Lstring_char_emit
  9726                                  
  9727                                  .Lstring_char_11:
  9728 00007144 48BF-                           mov rdi, fmt_string_char_11
  9728 00007146 [300F000000000000] 
  9729 0000714E EBA3                            jmp .Lstring_char_emit
  9730                                  
  9731                                  .Lstring_char_12:
  9732 00007150 48BF-                           mov rdi, fmt_string_char_12
  9732 00007152 [330F000000000000] 
  9733 0000715A EB97                            jmp .Lstring_char_emit
  9734                                  
  9735                                  .Lstring_char_13:
  9736 0000715C 48BF-                           mov rdi, fmt_string_char_13
  9736 0000715E [360F000000000000] 
  9737 00007166 EB8B                            jmp .Lstring_char_emit
  9738                                  
  9739                                  .Lstring_char_34:
  9740 00007168 48BF-                           mov rdi, fmt_string_char_34
  9740 0000716A [390F000000000000] 
  9741 00007172 E97CFFFFFF                      jmp .Lstring_char_emit
  9742                                  
  9743                                  .Lstring_char_92:
  9744 00007177 48BF-                           mov rdi, fmt_string_char_92
  9744 00007179 [3C0F000000000000] 
  9745 00007181 E96DFFFFFF                      jmp .Lstring_char_emit
  9746                                  
  9747                                  .Lstring_char_hex:
  9748 00007186 48BF-                           mov rdi, fmt_string_char_hex
  9748 00007188 [3F0F000000000000] 
  9749 00007190 4889C6                          mov rsi, rax
  9750 00007193 E95BFFFFFF                      jmp .Lstring_char_emit        
  9751                                  
  9752                                  .Lstring_end:
  9753 00007198 4883C410                	add rsp, 8 * 2
  9754 0000719C 48BF-                   	mov rdi, fmt_dquote
  9754 0000719E [1F0F000000000000] 
  9755 000071A6 EB33                    	jmp .Lemit
  9756                                  
  9757                                  .Lunknown_sexpr_type:
  9758 000071A8 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  9758 000071AA [DA0E000000000000] 
  9759 000071B2 4825FF000000            	and rax, 255
  9760 000071B8 4889C2                  	mov rdx, rax
  9761 000071BB 4889F9                  	mov rcx, rdi
  9762 000071BE 488B3C25[00000000]      	mov rdi, qword [stderr]
  9763 000071C6 B800000000              	mov rax, 0
  9764                                          ENTER
    44 000071CB C8000000            <1>  enter 0, 0
    45 000071CF 4883E4F0            <1>  and rsp, ~15
  9765 000071D3 E8(00000000)            	call fprintf
  9766                                          LEAVE
    49 000071D8 C9                  <1>  leave
  9767 000071D9 C9                              leave
  9768 000071DA C3                              ret
  9769                                  
  9770                                  .Lemit:
  9771 000071DB B800000000              	mov rax, 0
  9772                                          ENTER
    44 000071E0 C8000000            <1>  enter 0, 0
    45 000071E4 4883E4F0            <1>  and rsp, ~15
  9773 000071E8 E8(00000000)            	call printf
  9774                                          LEAVE
    49 000071ED C9                  <1>  leave
  9775 000071EE EB00                    	jmp .Lend
  9776                                  
  9777                                  .Lend:
  9778                                  	LEAVE
    49 000071F0 C9                  <1>  leave
  9779 000071F1 C3                      	ret
  9780                                  
  9781                                  ;;; rdi: address of free variable
  9782                                  ;;; rsi: address of code-pointer
  9783                                  bind_primitive:
  9784 000071F2 C8000000                        enter 0, 0
  9785 000071F6 57                              push rdi
  9786 000071F7 BF11000000                      mov rdi, (1 + 8 + 8)
  9787 000071FC E8C1F7FFFF                      call malloc
  9788 00007201 5F                              pop rdi
  9789 00007202 C60004                          mov byte [rax], T_closure
  9790 00007205 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  9791 0000720D 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  9792 00007211 488907                          mov qword [rdi], rax
  9793 00007214 48B8-                           mov rax, sob_void
  9793 00007216 [0000000000000000] 
  9794 0000721E C9                              leave
  9795 0000721F C3                              ret
  9796                                  
  9797                                  L_code_ptr_ash:
  9798 00007220 C8000000                        enter 0, 0
  9799 00007224 48837D1802                      cmp COUNT, 2
  9800 00007229 0F85CF140000                    jne L_error_arg_count_2
  9801 0000722F 488B7D20                        mov rdi, PARAM(0)
  9802                                          assert_integer(rdi)
    53 00007233 803F11              <1>  cmp byte [%1], %2
    54 00007236 0F8561150000        <1>  jne L_error_incorrect_type
  9803 0000723C 488B4D28                        mov rcx, PARAM(1)
  9804                                          assert_integer(rcx)
    53 00007240 803911              <1>  cmp byte [%1], %2
    54 00007243 0F8554150000        <1>  jne L_error_incorrect_type
  9805 00007249 488B7F01                        mov rdi, qword [rdi + 1]
  9806 0000724D 488B4901                        mov rcx, qword [rcx + 1]
  9807 00007251 4883F900                        cmp rcx, 0
  9808 00007255 7C0F                            jl .L_negative
  9809                                  .L_loop_positive:
  9810 00007257 4883F900                        cmp rcx, 0
  9811 0000725B 741B                            je .L_exit
  9812 0000725D 48D3E7                          sal rdi, cl
  9813 00007260 48C1E908                        shr rcx, 8
  9814 00007264 EBF1                            jmp .L_loop_positive
  9815                                  .L_negative:
  9816 00007266 48F7D9                          neg rcx
  9817                                  .L_loop_negative:
  9818 00007269 4883F900                        cmp rcx, 0
  9819 0000726D 7409                            je .L_exit
  9820 0000726F 48D3FF                          sar rdi, cl
  9821 00007272 48C1E908                        shr rcx, 8
  9822 00007276 EBF1                            jmp .L_loop_negative
  9823                                  .L_exit:
  9824 00007278 E89B130000                      call make_integer
  9825 0000727D C9                              leave
  9826 0000727E C22000                          ret AND_KILL_FRAME(2)
  9827                                  
  9828                                  L_code_ptr_logand:
  9829 00007281 C8000000                        enter 0, 0
  9830 00007285 48837D1802                      cmp COUNT, 2
  9831 0000728A 0F856E140000                    jne L_error_arg_count_2
  9832 00007290 4C8B4520                        mov r8, PARAM(0)
  9833                                          assert_integer(r8)
    53 00007294 41803811            <1>  cmp byte [%1], %2
    54 00007298 0F85FF140000        <1>  jne L_error_incorrect_type
  9834 0000729E 4C8B4D28                        mov r9, PARAM(1)
  9835                                          assert_integer(r9)
    53 000072A2 41803911            <1>  cmp byte [%1], %2
    54 000072A6 0F85F1140000        <1>  jne L_error_incorrect_type
  9836 000072AC 498B7801                        mov rdi, qword [r8 + 1]
  9837 000072B0 49237901                        and rdi, qword [r9 + 1]
  9838 000072B4 E85F130000                      call make_integer
  9839 000072B9 C9                              leave
  9840 000072BA C22000                          ret AND_KILL_FRAME(2)
  9841                                  
  9842                                  L_code_ptr_logor:
  9843 000072BD C8000000                        enter 0, 0
  9844 000072C1 48837D1802                      cmp COUNT, 2
  9845 000072C6 0F8532140000                    jne L_error_arg_count_2
  9846 000072CC 4C8B4520                        mov r8, PARAM(0)
  9847                                          assert_integer(r8)
    53 000072D0 41803811            <1>  cmp byte [%1], %2
    54 000072D4 0F85C3140000        <1>  jne L_error_incorrect_type
  9848 000072DA 4C8B4D28                        mov r9, PARAM(1)
  9849                                          assert_integer(r9)
    53 000072DE 41803911            <1>  cmp byte [%1], %2
    54 000072E2 0F85B5140000        <1>  jne L_error_incorrect_type
  9850 000072E8 498B7801                        mov rdi, qword [r8 + 1]
  9851 000072EC 490B7901                        or rdi, qword [r9 + 1]
  9852 000072F0 E823130000                      call make_integer
  9853 000072F5 C9                              leave
  9854 000072F6 C22000                          ret AND_KILL_FRAME(2)
  9855                                  
  9856                                  L_code_ptr_logxor:
  9857 000072F9 C8000000                        enter 0, 0
  9858 000072FD 48837D1802                      cmp COUNT, 2
  9859 00007302 0F85F6130000                    jne L_error_arg_count_2
  9860 00007308 4C8B4520                        mov r8, PARAM(0)
  9861                                          assert_integer(r8)
    53 0000730C 41803811            <1>  cmp byte [%1], %2
    54 00007310 0F8587140000        <1>  jne L_error_incorrect_type
  9862 00007316 4C8B4D28                        mov r9, PARAM(1)
  9863                                          assert_integer(r9)
    53 0000731A 41803911            <1>  cmp byte [%1], %2
    54 0000731E 0F8579140000        <1>  jne L_error_incorrect_type
  9864 00007324 498B7801                        mov rdi, qword [r8 + 1]
  9865 00007328 49337901                        xor rdi, qword [r9 + 1]
  9866 0000732C E8E7120000                      call make_integer
  9867                                          LEAVE
    49 00007331 C9                  <1>  leave
  9868 00007332 C22000                          ret AND_KILL_FRAME(2)
  9869                                  
  9870                                  L_code_ptr_lognot:
  9871 00007335 C8000000                        enter 0, 0
  9872 00007339 48837D1801                      cmp COUNT, 1
  9873 0000733E 0F8585130000                    jne L_error_arg_count_1
  9874 00007344 4C8B4520                        mov r8, PARAM(0)
  9875                                          assert_integer(r8)
    53 00007348 41803811            <1>  cmp byte [%1], %2
    54 0000734C 0F854B140000        <1>  jne L_error_incorrect_type
  9876 00007352 498B7801                        mov rdi, qword [r8 + 1]
  9877 00007356 48F7D7                          not rdi
  9878 00007359 E8BA120000                      call make_integer
  9879 0000735E C9                              leave
  9880 0000735F C21800                          ret AND_KILL_FRAME(1)
  9881                                  
  9882                                  
  9883                                  L_code_ptr_bin_apply:
  9884 00007362 C8000000                        enter 0, 0
  9885 00007366 48837D1802                      cmp COUNT, 2
  9886 0000736B 0F8C8D130000                    jl L_error_arg_count_2    ; Need at least 2 arguments
  9887                                          
  9888 00007371 4C8B4518                        mov r8, COUNT             ; Save original argument count
  9889 00007375 49FFC8                          dec r8                    ; Last argument is the list
  9890 00007378 4E8B4CC520                      mov r9, PARAM(r8)         ; Get the list (last argument)
  9891 0000737D 488B5D20                        mov rbx, PARAM(0)         ; Get the function (first argument)
  9892                                          ; Count elements in the list
  9893 00007381 41BA00000000                    mov r10, 0                ; List element counter
  9894 00007387 4D89CB                          mov r11, r9               ; List pointer for counting
  9895                                  
  9896                                          
  9897                                  .count_loop:
  9898 0000738A 41803B01                        cmp byte [r11], T_nil
  9899 0000738E 7413                            je .prepare_stack
  9900                                          assert_pair(r11)
    53 00007390 41803B21            <1>  cmp byte [%1], %2
    54 00007394 0F8503140000        <1>  jne L_error_incorrect_type
  9901 0000739A 49FFC2                          inc r10                   ; Increment list element count
  9902 0000739D 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
  9903 000073A1 EBE7                            jmp .count_loop
  9904                                  
  9905                                  .prepare_stack:
  9906                                          ; Calculate total arguments (direct args + list elements)
  9907 000073A3 41BB00000000                    mov r11, 0             ; Number of direct arguments
  9908 000073A9 4D01D3                          add r11, r10            ; Add list elements count
  9909                                          
  9910                                          ; Allocate new frame
  9911 000073AC 4C89D8                          mov rax, r11            ; Total argument count
  9912 000073AF 48C1E003                        shl rax, 3              ; Multiply by 8 for byte count
  9913 000073B3 4883C020                        add rax, 8*4            ; Add space for ret, env, old rbp, arg count
  9914 000073B7 4989C4                          mov r12, rax            ; Save frame size
  9915                                          
  9916 000073BA 4C29E4                          sub rsp, r12            ; Allocate frame
  9917                                          
  9918                                          ; Copy direct arguments (excluding the list)
  9919 000073BD 4C89C1                          mov rcx, r8              ; Number of direct arguments
  9920 000073C0 48FFC9                          dec rcx                  ; Exclude the list
  9921 000073C3 BA00000000                      mov rdx, 0              ; Destination offset
  9922                                  
  9923                                  .copy_list:
  9924                                          ; Copy list elements
  9925 000073C8 4D89CD                          mov r13, r9             ; List pointer
  9926                                  .copy_list_loop:
  9927 000073CB 41807D0001                      cmp byte [r13], T_nil
  9928 000073D0 7412                            je .finish_frame
  9929 000073D2 498B4501                        mov rax, SOB_PAIR_CAR(r13)    ; Get list element
  9930 000073D6 488944D420                      mov [rsp + 8*4 + rdx*8], rax  ; Store in frame
  9931 000073DB 48FFC2                          inc rdx
  9932 000073DE 4D8B6D09                        mov r13, SOB_PAIR_CDR(r13)
  9933 000073E2 EBE7                            jmp .copy_list_loop
  9934                                  
  9935                                  .finish_frame:
  9936                                          ; Set up frame
  9937 000073E4 4C89D8                          mov rax, r11            ; Total argument count
  9938 000073E7 4889442418                      mov [rsp + 8*3], rax    ; Store argument count
  9939 000073EC 488B4510                        mov rax, [rbp + 8*2]    ; Get current env
  9940 000073F0 4889442410                      mov [rsp + 8*2], rax    ; Store env
  9941 000073F5 488B4508                        mov rax, [rbp + 8*1]    ; Get return address
  9942 000073F9 4889442408                      mov [rsp + 8*1], rax    ; Store return address
  9943 000073FE 4889E8                          mov rax, rbp            ; Get old rbp
  9944 00007401 48890424                        mov [rsp], rax          ; Store old rbp
  9945                                          
  9946                                          ; Get the function
  9947 00007405 4889D8                          mov rax, rbx
  9948                                          assert_closure(rax)
    53 00007408 803804              <1>  cmp byte [%1], %2
    54 0000740B 0F858C130000        <1>  jne L_error_incorrect_type
  9949                                          
  9950                                          ; Set up for call
  9951 00007411 4889E5                          mov rbp, rsp            ; Set new frame pointer
  9952 00007414 4889EC                          mov rsp, rbp            ; Align stack pointer
  9953                                          
  9954                                          ; Call the function
  9955 00007417 FF7001                          push SOB_CLOSURE_ENV(rax)
  9956 0000741A FF5009                          call SOB_CLOSURE_CODE(rax)
  9957                                                  
  9958 0000741D C9                              leave
  9959 0000741E C22000                          ret AND_KILL_FRAME(2)
  9960                                          
  9961                                  L_code_ptr_is_null:
  9962 00007421 C8000000                        enter 0, 0
  9963 00007425 48837D1801                      cmp COUNT, 1
  9964 0000742A 0F8599120000                    jne L_error_arg_count_1
  9965 00007430 488B4520                        mov rax, PARAM(0)
  9966 00007434 803801                          cmp byte [rax], T_nil
  9967 00007437 750C                            jne .L_false
  9968 00007439 48B8-                           mov rax, sob_boolean_true
  9968 0000743B [0300000000000000] 
  9969 00007443 EB0A                            jmp .L_end
  9970                                  .L_false:
  9971 00007445 48B8-                           mov rax, sob_boolean_false
  9971 00007447 [0200000000000000] 
  9972                                  .L_end:
  9973 0000744F C9                              leave
  9974 00007450 C21800                          ret AND_KILL_FRAME(1)
  9975                                  
  9976                                  L_code_ptr_is_pair:
  9977 00007453 C8000000                        enter 0, 0
  9978 00007457 48837D1801                      cmp COUNT, 1
  9979 0000745C 0F8567120000                    jne L_error_arg_count_1
  9980 00007462 488B4520                        mov rax, PARAM(0)
  9981 00007466 803821                          cmp byte [rax], T_pair
  9982 00007469 750C                            jne .L_false
  9983 0000746B 48B8-                           mov rax, sob_boolean_true
  9983 0000746D [0300000000000000] 
  9984 00007475 EB0A                            jmp .L_end
  9985                                  .L_false:
  9986 00007477 48B8-                           mov rax, sob_boolean_false
  9986 00007479 [0200000000000000] 
  9987                                  .L_end:
  9988 00007481 C9                              leave
  9989 00007482 C21800                          ret AND_KILL_FRAME(1)
  9990                                          
  9991                                  L_code_ptr_is_void:
  9992 00007485 C8000000                        enter 0, 0
  9993 00007489 48837D1801                      cmp COUNT, 1
  9994 0000748E 0F8535120000                    jne L_error_arg_count_1
  9995 00007494 488B4520                        mov rax, PARAM(0)
  9996 00007498 803800                          cmp byte [rax], T_void
  9997 0000749B 750C                            jne .L_false
  9998 0000749D 48B8-                           mov rax, sob_boolean_true
  9998 0000749F [0300000000000000] 
  9999 000074A7 EB0A                            jmp .L_end
 10000                                  .L_false:
 10001 000074A9 48B8-                           mov rax, sob_boolean_false
 10001 000074AB [0200000000000000] 
 10002                                  .L_end:
 10003 000074B3 C9                              leave
 10004 000074B4 C21800                          ret AND_KILL_FRAME(1)
 10005                                  
 10006                                  L_code_ptr_is_char:
 10007 000074B7 C8000000                        enter 0, 0
 10008 000074BB 48837D1801                      cmp COUNT, 1
 10009 000074C0 0F8503120000                    jne L_error_arg_count_1
 10010 000074C6 488B4520                        mov rax, PARAM(0)
 10011 000074CA 803802                          cmp byte [rax], T_char
 10012 000074CD 750C                            jne .L_false
 10013 000074CF 48B8-                           mov rax, sob_boolean_true
 10013 000074D1 [0300000000000000] 
 10014 000074D9 EB0A                            jmp .L_end
 10015                                  .L_false:
 10016 000074DB 48B8-                           mov rax, sob_boolean_false
 10016 000074DD [0200000000000000] 
 10017                                  .L_end:
 10018 000074E5 C9                              leave
 10019 000074E6 C21800                          ret AND_KILL_FRAME(1)
 10020                                  
 10021                                  L_code_ptr_is_string:
 10022 000074E9 C8000000                        enter 0, 0
 10023 000074ED 48837D1801                      cmp COUNT, 1
 10024 000074F2 0F85D1110000                    jne L_error_arg_count_1
 10025 000074F8 488B4520                        mov rax, PARAM(0)
 10026 000074FC 803803                          cmp byte [rax], T_string
 10027 000074FF 750C                            jne .L_false
 10028 00007501 48B8-                           mov rax, sob_boolean_true
 10028 00007503 [0300000000000000] 
 10029 0000750B EB0A                            jmp .L_end
 10030                                  .L_false:
 10031 0000750D 48B8-                           mov rax, sob_boolean_false
 10031 0000750F [0200000000000000] 
 10032                                  .L_end:
 10033 00007517 C9                              leave
 10034 00007518 C21800                          ret AND_KILL_FRAME(1)
 10035                                  
 10036                                  L_code_ptr_is_symbol:
 10037 0000751B C8000000                        enter 0, 0
 10038 0000751F 48837D1801                      cmp COUNT, 1
 10039 00007524 0F859F110000                    jne L_error_arg_count_1
 10040 0000752A 4C8B4520                        mov r8, PARAM(0)
 10041 0000752E 41802040                        and byte [r8], T_symbol
 10042 00007532 740C                            jz .L_false
 10043 00007534 48B8-                           mov rax, sob_boolean_true
 10043 00007536 [0300000000000000] 
 10044 0000753E EB0A                            jmp .L_exit
 10045                                  .L_false:
 10046 00007540 48B8-                           mov rax, sob_boolean_false
 10046 00007542 [0200000000000000] 
 10047                                  .L_exit:
 10048 0000754A C9                              leave
 10049 0000754B C21800                          ret AND_KILL_FRAME(1)
 10050                                  
 10051                                  L_code_ptr_is_uninterned_symbol:
 10052 0000754E C8000000                        enter 0, 0
 10053 00007552 48837D1801                      cmp COUNT, 1
 10054 00007557 0F856C110000                    jne L_error_arg_count_1
 10055 0000755D 4C8B4520                        mov r8, PARAM(0)
 10056 00007561 41803842                        cmp byte [r8], T_uninterned_symbol
 10057 00007565 750C                            jne .L_false
 10058 00007567 48B8-                           mov rax, sob_boolean_true
 10058 00007569 [0300000000000000] 
 10059 00007571 EB0A                            jmp .L_exit
 10060                                  .L_false:
 10061 00007573 48B8-                           mov rax, sob_boolean_false
 10061 00007575 [0200000000000000] 
 10062                                  .L_exit:
 10063 0000757D C9                              leave
 10064 0000757E C21800                          ret AND_KILL_FRAME(1)
 10065                                  
 10066                                  L_code_ptr_is_interned_symbol:
 10067 00007581 C8000000                        enter 0, 0
 10068 00007585 48837D1801                      cmp COUNT, 1
 10069 0000758A 0F8539110000                    jne L_error_arg_count_1
 10070 00007590 488B4520                        mov rax, PARAM(0)
 10071 00007594 803841                          cmp byte [rax], T_interned_symbol
 10072 00007597 750C                            jne .L_false
 10073 00007599 48B8-                           mov rax, sob_boolean_true
 10073 0000759B [0300000000000000] 
 10074 000075A3 EB0A                            jmp .L_end
 10075                                  .L_false:
 10076 000075A5 48B8-                           mov rax, sob_boolean_false
 10076 000075A7 [0200000000000000] 
 10077                                  .L_end:
 10078 000075AF C9                              leave
 10079 000075B0 C21800                          ret AND_KILL_FRAME(1)
 10080                                  
 10081                                  L_code_ptr_gensym:
 10082 000075B3 C8000000                        enter 0, 0
 10083 000075B7 48837D1800                      cmp COUNT, 0
 10084 000075BC 0F85D2100000                    jne L_error_arg_count_0
 10085 000075C2 48FF0425[450F0000]              inc qword [gensym_count]
 10086 000075CA BF09000000                      mov rdi, (1 + 8)
 10087 000075CF E8EEF3FFFF                      call malloc
 10088 000075D4 C60042                          mov byte [rax], T_uninterned_symbol
 10089 000075D7 488B0C25[450F0000]              mov rcx, qword [gensym_count]
 10090 000075DF 48894801                        mov qword [rax + 1], rcx
 10091 000075E3 C9                              leave
 10092 000075E4 C21000                          ret AND_KILL_FRAME(0)
 10093                                  
 10094                                  L_code_ptr_is_vector:
 10095 000075E7 C8000000                        enter 0, 0
 10096 000075EB 48837D1801                      cmp COUNT, 1
 10097 000075F0 0F85D3100000                    jne L_error_arg_count_1
 10098 000075F6 488B4520                        mov rax, PARAM(0)
 10099 000075FA 803822                          cmp byte [rax], T_vector
 10100 000075FD 750C                            jne .L_false
 10101 000075FF 48B8-                           mov rax, sob_boolean_true
 10101 00007601 [0300000000000000] 
 10102 00007609 EB0A                            jmp .L_end
 10103                                  .L_false:
 10104 0000760B 48B8-                           mov rax, sob_boolean_false
 10104 0000760D [0200000000000000] 
 10105                                  .L_end:
 10106 00007615 C9                              leave
 10107 00007616 C21800                          ret AND_KILL_FRAME(1)
 10108                                  
 10109                                  L_code_ptr_is_closure:
 10110 00007619 C8000000                        enter 0, 0
 10111 0000761D 48837D1801                      cmp COUNT, 1
 10112 00007622 0F85A1100000                    jne L_error_arg_count_1
 10113 00007628 488B4520                        mov rax, PARAM(0)
 10114 0000762C 803804                          cmp byte [rax], T_closure
 10115 0000762F 750C                            jne .L_false
 10116 00007631 48B8-                           mov rax, sob_boolean_true
 10116 00007633 [0300000000000000] 
 10117 0000763B EB0A                            jmp .L_end
 10118                                  .L_false:
 10119 0000763D 48B8-                           mov rax, sob_boolean_false
 10119 0000763F [0200000000000000] 
 10120                                  .L_end:
 10121 00007647 C9                              leave
 10122 00007648 C21800                          ret AND_KILL_FRAME(1)
 10123                                  
 10124                                  L_code_ptr_is_real:
 10125 0000764B C8000000                        enter 0, 0
 10126 0000764F 48837D1801                      cmp COUNT, 1
 10127 00007654 0F856F100000                    jne L_error_arg_count_1
 10128 0000765A 488B4520                        mov rax, PARAM(0)
 10129 0000765E 803813                          cmp byte [rax], T_real
 10130 00007661 750C                            jne .L_false
 10131 00007663 48B8-                           mov rax, sob_boolean_true
 10131 00007665 [0300000000000000] 
 10132 0000766D EB0A                            jmp .L_end
 10133                                  .L_false:
 10134 0000766F 48B8-                           mov rax, sob_boolean_false
 10134 00007671 [0200000000000000] 
 10135                                  .L_end:
 10136 00007679 C9                              leave
 10137 0000767A C21800                          ret AND_KILL_FRAME(1)
 10138                                  
 10139                                  L_code_ptr_is_fraction:
 10140 0000767D C8000000                        enter 0, 0
 10141 00007681 48837D1801                      cmp COUNT, 1
 10142 00007686 0F853D100000                    jne L_error_arg_count_1
 10143 0000768C 488B4520                        mov rax, PARAM(0)
 10144 00007690 803812                          cmp byte [rax], T_fraction
 10145 00007693 750C                            jne .L_false
 10146 00007695 48B8-                           mov rax, sob_boolean_true
 10146 00007697 [0300000000000000] 
 10147 0000769F EB0A                            jmp .L_end
 10148                                  .L_false:
 10149 000076A1 48B8-                           mov rax, sob_boolean_false
 10149 000076A3 [0200000000000000] 
 10150                                  .L_end:
 10151 000076AB C9                              leave
 10152 000076AC C21800                          ret AND_KILL_FRAME(1)
 10153                                  
 10154                                  L_code_ptr_is_boolean:
 10155 000076AF C8000000                        enter 0, 0
 10156 000076B3 48837D1801                      cmp COUNT, 1
 10157 000076B8 0F850B100000                    jne L_error_arg_count_1
 10158 000076BE 488B4520                        mov rax, PARAM(0)
 10159 000076C2 8A18                            mov bl, byte [rax]
 10160 000076C4 80E308                          and bl, T_boolean
 10161 000076C7 740C                            je .L_false
 10162 000076C9 48B8-                           mov rax, sob_boolean_true
 10162 000076CB [0300000000000000] 
 10163 000076D3 EB0A                            jmp .L_end
 10164                                  .L_false:
 10165 000076D5 48B8-                           mov rax, sob_boolean_false
 10165 000076D7 [0200000000000000] 
 10166                                  .L_end:
 10167 000076DF C9                              leave
 10168 000076E0 C21800                          ret AND_KILL_FRAME(1)
 10169                                          
 10170                                  L_code_ptr_is_boolean_false:
 10171 000076E3 C8000000                        enter 0, 0
 10172 000076E7 48837D1801                      cmp COUNT, 1
 10173 000076EC 0F85D70F0000                    jne L_error_arg_count_1
 10174 000076F2 488B4520                        mov rax, PARAM(0)
 10175 000076F6 8A18                            mov bl, byte [rax]
 10176 000076F8 80FB09                          cmp bl, T_boolean_false
 10177 000076FB 750C                            jne .L_false
 10178 000076FD 48B8-                           mov rax, sob_boolean_true
 10178 000076FF [0300000000000000] 
 10179 00007707 EB0A                            jmp .L_end
 10180                                  .L_false:
 10181 00007709 48B8-                           mov rax, sob_boolean_false
 10181 0000770B [0200000000000000] 
 10182                                  .L_end:
 10183 00007713 C9                              leave
 10184 00007714 C21800                          ret AND_KILL_FRAME(1)
 10185                                  
 10186                                  L_code_ptr_is_boolean_true:
 10187 00007717 C8000000                        enter 0, 0
 10188 0000771B 48837D1801                      cmp COUNT, 1
 10189 00007720 0F85A30F0000                    jne L_error_arg_count_1
 10190 00007726 488B4520                        mov rax, PARAM(0)
 10191 0000772A 8A18                            mov bl, byte [rax]
 10192 0000772C 80FB0A                          cmp bl, T_boolean_true
 10193 0000772F 750C                            jne .L_false
 10194 00007731 48B8-                           mov rax, sob_boolean_true
 10194 00007733 [0300000000000000] 
 10195 0000773B EB0A                            jmp .L_end
 10196                                  .L_false:
 10197 0000773D 48B8-                           mov rax, sob_boolean_false
 10197 0000773F [0200000000000000] 
 10198                                  .L_end:
 10199 00007747 C9                              leave
 10200 00007748 C21800                          ret AND_KILL_FRAME(1)
 10201                                  
 10202                                  L_code_ptr_is_number:
 10203 0000774B C8000000                        enter 0, 0
 10204 0000774F 48837D1801                      cmp COUNT, 1
 10205 00007754 0F856F0F0000                    jne L_error_arg_count_1
 10206 0000775A 488B4520                        mov rax, PARAM(0)
 10207 0000775E 8A18                            mov bl, byte [rax]
 10208 00007760 80E310                          and bl, T_number
 10209 00007763 740C                            jz .L_false
 10210 00007765 48B8-                           mov rax, sob_boolean_true
 10210 00007767 [0300000000000000] 
 10211 0000776F EB0A                            jmp .L_end
 10212                                  .L_false:
 10213 00007771 48B8-                           mov rax, sob_boolean_false
 10213 00007773 [0200000000000000] 
 10214                                  .L_end:
 10215 0000777B C9                              leave
 10216 0000777C C21800                          ret AND_KILL_FRAME(1)
 10217                                          
 10218                                  L_code_ptr_is_collection:
 10219 0000777F C8000000                        enter 0, 0
 10220 00007783 48837D1801                      cmp COUNT, 1
 10221 00007788 0F853B0F0000                    jne L_error_arg_count_1
 10222 0000778E 488B4520                        mov rax, PARAM(0)
 10223 00007792 8A18                            mov bl, byte [rax]
 10224 00007794 80E320                          and bl, T_collection
 10225 00007797 740C                            je .L_false
 10226 00007799 48B8-                           mov rax, sob_boolean_true
 10226 0000779B [0300000000000000] 
 10227 000077A3 EB0A                            jmp .L_end
 10228                                  .L_false:
 10229 000077A5 48B8-                           mov rax, sob_boolean_false
 10229 000077A7 [0200000000000000] 
 10230                                  .L_end:
 10231 000077AF C9                              leave
 10232 000077B0 C21800                          ret AND_KILL_FRAME(1)
 10233                                  
 10234                                  L_code_ptr_cons:
 10235 000077B3 C8000000                        enter 0, 0
 10236 000077B7 48837D1802                      cmp COUNT, 2
 10237 000077BC 0F853C0F0000                    jne L_error_arg_count_2
 10238 000077C2 BF11000000                      mov rdi, (1 + 8 + 8)
 10239 000077C7 E8F6F1FFFF                      call malloc
 10240 000077CC C60021                          mov byte [rax], T_pair
 10241 000077CF 488B5D20                        mov rbx, PARAM(0)
 10242 000077D3 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10243 000077D7 488B5D28                        mov rbx, PARAM(1)
 10244 000077DB 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10245 000077DF C9                              leave
 10246 000077E0 C22000                          ret AND_KILL_FRAME(2)
 10247                                  
 10248                                  L_code_ptr_display_sexpr:
 10249 000077E3 C8000000                        enter 0, 0
 10250 000077E7 48837D1801                      cmp COUNT, 1
 10251 000077EC 0F85D70E0000                    jne L_error_arg_count_1
 10252 000077F2 488B7D20                        mov rdi, PARAM(0)
 10253 000077F6 E848F4FFFF                      call print_sexpr
 10254 000077FB 48B8-                           mov rax, sob_void
 10254 000077FD [0000000000000000] 
 10255 00007805 C9                              leave
 10256 00007806 C21800                          ret AND_KILL_FRAME(1)
 10257                                  
 10258                                  L_code_ptr_write_char:
 10259 00007809 C8000000                        enter 0, 0
 10260 0000780D 48837D1801                      cmp COUNT, 1
 10261 00007812 0F85B10E0000                    jne L_error_arg_count_1
 10262 00007818 488B4520                        mov rax, PARAM(0)
 10263                                          assert_char(rax)
    53 0000781C 803802              <1>  cmp byte [%1], %2
    54 0000781F 0F85780F0000        <1>  jne L_error_incorrect_type
 10264 00007825 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 10265 00007828 4825FF000000                    and rax, 255
 10266 0000782E 48BF-                           mov rdi, fmt_char
 10266 00007830 [4D0F000000000000] 
 10267 00007838 4889C6                          mov rsi, rax
 10268 0000783B B800000000                      mov rax, 0
 10269                                          ENTER
    44 00007840 C8000000            <1>  enter 0, 0
    45 00007844 4883E4F0            <1>  and rsp, ~15
 10270 00007848 E8(00000000)                    call printf
 10271                                          LEAVE
    49 0000784D C9                  <1>  leave
 10272 0000784E 48B8-                           mov rax, sob_void
 10272 00007850 [0000000000000000] 
 10273 00007858 C9                              leave
 10274 00007859 C21800                          ret AND_KILL_FRAME(1)
 10275                                  
 10276                                  L_code_ptr_car:
 10277 0000785C C8000000                        enter 0, 0
 10278 00007860 48837D1801                      cmp COUNT, 1
 10279 00007865 0F855E0E0000                    jne L_error_arg_count_1
 10280 0000786B 488B4520                        mov rax, PARAM(0)
 10281                                          assert_pair(rax)
    53 0000786F 803821              <1>  cmp byte [%1], %2
    54 00007872 0F85250F0000        <1>  jne L_error_incorrect_type
 10282 00007878 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 10283 0000787C C9                              leave
 10284 0000787D C21800                          ret AND_KILL_FRAME(1)
 10285                                          
 10286                                  L_code_ptr_cdr:
 10287 00007880 C8000000                        enter 0, 0
 10288 00007884 48837D1801                      cmp COUNT, 1
 10289 00007889 0F853A0E0000                    jne L_error_arg_count_1
 10290 0000788F 488B4520                        mov rax, PARAM(0)
 10291                                          assert_pair(rax)
    53 00007893 803821              <1>  cmp byte [%1], %2
    54 00007896 0F85010F0000        <1>  jne L_error_incorrect_type
 10292 0000789C 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 10293 000078A0 C9                              leave
 10294 000078A1 C21800                          ret AND_KILL_FRAME(1)
 10295                                          
 10296                                  L_code_ptr_string_length:
 10297 000078A4 C8000000                        enter 0, 0
 10298 000078A8 48837D1801                      cmp COUNT, 1
 10299 000078AD 0F85160E0000                    jne L_error_arg_count_1
 10300 000078B3 488B4520                        mov rax, PARAM(0)
 10301                                          assert_string(rax)
    53 000078B7 803803              <1>  cmp byte [%1], %2
    54 000078BA 0F85DD0E0000        <1>  jne L_error_incorrect_type
 10302 000078C0 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 10303 000078C4 E84F0D0000                      call make_integer
 10304 000078C9 C9                              leave
 10305 000078CA C21800                          ret AND_KILL_FRAME(1)
 10306                                  
 10307                                  L_code_ptr_vector_length:
 10308 000078CD C8000000                        enter 0, 0
 10309 000078D1 48837D1801                      cmp COUNT, 1
 10310 000078D6 0F85ED0D0000                    jne L_error_arg_count_1
 10311 000078DC 488B4520                        mov rax, PARAM(0)
 10312                                          assert_vector(rax)
    53 000078E0 803822              <1>  cmp byte [%1], %2
    54 000078E3 0F85B40E0000        <1>  jne L_error_incorrect_type
 10313 000078E9 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 10314 000078ED E8260D0000                      call make_integer
 10315 000078F2 C9                              leave
 10316 000078F3 C21800                          ret AND_KILL_FRAME(1)
 10317                                  
 10318                                  L_code_ptr_real_to_integer:
 10319 000078F6 C8000000                        enter 0, 0
 10320 000078FA 48837D1801                      cmp COUNT, 1
 10321 000078FF 0F85C40D0000                    jne L_error_arg_count_1
 10322 00007905 488B5D20                        mov rbx, PARAM(0)
 10323                                          assert_real(rbx)
    53 00007909 803B13              <1>  cmp byte [%1], %2
    54 0000790C 0F858B0E0000        <1>  jne L_error_incorrect_type
 10324 00007912 F20F104301                      movsd xmm0, qword [rbx + 1]
 10325 00007917 F2480F2CF8                      cvttsd2si rdi, xmm0
 10326 0000791C E8F70C0000                      call make_integer
 10327 00007921 C9                              leave
 10328 00007922 C21800                          ret AND_KILL_FRAME(1)
 10329                                  
 10330                                  L_code_ptr_exit:
 10331 00007925 C8000000                        enter 0, 0
 10332 00007929 48837D1800                      cmp COUNT, 0
 10333 0000792E 0F85600D0000                    jne L_error_arg_count_0
 10334 00007934 B800000000                      mov rax, 0
 10335 00007939 E8(00000000)                    call exit
 10336                                  
 10337                                  L_code_ptr_integer_to_real:
 10338 0000793E C8000000                        enter 0, 0
 10339 00007942 48837D1801                      cmp COUNT, 1
 10340 00007947 0F857C0D0000                    jne L_error_arg_count_1
 10341 0000794D 488B4520                        mov rax, PARAM(0)
 10342                                          assert_integer(rax)
    53 00007951 803811              <1>  cmp byte [%1], %2
    54 00007954 0F85430E0000        <1>  jne L_error_incorrect_type
 10343 0000795A FF7001                          push qword [rax + 1]
 10344 0000795D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10345 00007963 E8980C0000                      call make_real
 10346 00007968 C9                              leave
 10347 00007969 C21800                          ret AND_KILL_FRAME(1)
 10348                                  
 10349                                  L_code_ptr_fraction_to_real:
 10350 0000796C C8000000                        enter 0, 0
 10351 00007970 48837D1801                      cmp COUNT, 1
 10352 00007975 0F854E0D0000                    jne L_error_arg_count_1
 10353 0000797B 488B4520                        mov rax, PARAM(0)
 10354                                          assert_fraction(rax)
    53 0000797F 803812              <1>  cmp byte [%1], %2
    54 00007982 0F85150E0000        <1>  jne L_error_incorrect_type
 10355 00007988 FF7001                          push qword [rax + 1]
 10356 0000798B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10357 00007991 FF7009                          push qword [rax + 1 + 8]
 10358 00007994 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 10359 0000799A F20F5EC1                        divsd xmm0, xmm1
 10360 0000799E E85D0C0000                      call make_real
 10361 000079A3 C9                              leave
 10362 000079A4 C21800                          ret AND_KILL_FRAME(1)
 10363                                  
 10364                                  L_code_ptr_char_to_integer:
 10365 000079A7 C8000000                        enter 0, 0
 10366 000079AB 48837D1801                      cmp COUNT, 1
 10367 000079B0 0F85130D0000                    jne L_error_arg_count_1
 10368 000079B6 488B4520                        mov rax, PARAM(0)
 10369                                          assert_char(rax)
    53 000079BA 803802              <1>  cmp byte [%1], %2
    54 000079BD 0F85DA0D0000        <1>  jne L_error_incorrect_type
 10370 000079C3 8A4001                          mov al, byte [rax + 1]
 10371 000079C6 4825FF000000                    and rax, 255
 10372 000079CC 4889C7                          mov rdi, rax
 10373 000079CF E8440C0000                      call make_integer
 10374 000079D4 C9                              leave
 10375 000079D5 C21800                          ret AND_KILL_FRAME(1)
 10376                                  
 10377                                  L_code_ptr_integer_to_fraction:
 10378 000079D8 C8000000                        enter 0, 0
 10379 000079DC 48837D1801                      cmp COUNT, 1
 10380 000079E1 0F85E20C0000                    jne L_error_arg_count_1
 10381 000079E7 4C8B4520                        mov r8, PARAM(0)
 10382                                          assert_integer(r8)
    53 000079EB 41803811            <1>  cmp byte [%1], %2
    54 000079EF 0F85A80D0000        <1>  jne L_error_incorrect_type
 10383 000079F5 BF11000000                      mov rdi, (1 + 8 + 8)
 10384 000079FA E8C3EFFFFF                      call malloc
 10385 000079FF 498B5801                        mov rbx, qword [r8 + 1]
 10386 00007A03 C60012                          mov byte [rax], T_fraction
 10387 00007A06 48895801                        mov qword [rax + 1], rbx
 10388 00007A0A 48C7400901000000                mov qword [rax + 1 + 8], 1
 10389 00007A12 C9                              leave
 10390 00007A13 C21800                          ret AND_KILL_FRAME(1)
 10391                                  
 10392                                  L_code_ptr_integer_to_char:
 10393 00007A16 C8000000                        enter 0, 0
 10394 00007A1A 48837D1801                      cmp COUNT, 1
 10395 00007A1F 0F85A40C0000                    jne L_error_arg_count_1
 10396 00007A25 488B4520                        mov rax, PARAM(0)
 10397                                          assert_integer(rax)
    53 00007A29 803811              <1>  cmp byte [%1], %2
    54 00007A2C 0F856B0D0000        <1>  jne L_error_incorrect_type
 10398 00007A32 488B5801                        mov rbx, qword [rax + 1]
 10399 00007A36 4883FB00                        cmp rbx, 0
 10400 00007A3A 0F8EF20B0000                    jle L_error_integer_range
 10401 00007A40 4881FB00010000                  cmp rbx, 256
 10402 00007A47 0F8DE50B0000                    jge L_error_integer_range
 10403 00007A4D BF02000000                      mov rdi, (1 + 1)
 10404 00007A52 E86BEFFFFF                      call malloc
 10405 00007A57 C60002                          mov byte [rax], T_char
 10406 00007A5A 885801                          mov byte [rax + 1], bl
 10407 00007A5D C9                              leave
 10408 00007A5E C21800                          ret AND_KILL_FRAME(1)
 10409                                  
 10410                                  L_code_ptr_trng:
 10411 00007A61 C8000000                        enter 0, 0
 10412 00007A65 48837D1800                      cmp COUNT, 0
 10413 00007A6A 0F85240C0000                    jne L_error_arg_count_0
 10414 00007A70 480FC7F7                        rdrand rdi
 10415 00007A74 48D1EF                          shr rdi, 1
 10416 00007A77 E89C0B0000                      call make_integer
 10417 00007A7C C9                              leave
 10418 00007A7D C21000                          ret AND_KILL_FRAME(0)
 10419                                  
 10420                                  L_code_ptr_is_zero:
 10421 00007A80 C8000000                        enter 0, 0
 10422 00007A84 48837D1801                      cmp COUNT, 1
 10423 00007A89 0F853A0C0000                    jne L_error_arg_count_1
 10424 00007A8F 488B4520                        mov rax, PARAM(0)
 10425 00007A93 803811                          cmp byte [rax], T_integer
 10426 00007A96 740F                            je .L_integer
 10427 00007A98 803812                          cmp byte [rax], T_fraction
 10428 00007A9B 7413                            je .L_fraction
 10429 00007A9D 803813                          cmp byte [rax], T_real
 10430 00007AA0 7417                            je .L_real
 10431 00007AA2 E9F60C0000                      jmp L_error_incorrect_type
 10432                                  .L_integer:
 10433 00007AA7 4883780100                      cmp qword [rax + 1], 0
 10434 00007AAC 7429                            je .L_zero
 10435 00007AAE EB1B                            jmp .L_not_zero
 10436                                  .L_fraction:
 10437 00007AB0 4883780100                      cmp qword [rax + 1], 0
 10438 00007AB5 7420                            je .L_zero
 10439 00007AB7 EB12                            jmp .L_not_zero
 10440                                  .L_real:
 10441 00007AB9 660FEFC0                        pxor xmm0, xmm0
 10442 00007ABD FF7001                          push qword [rax + 1]
 10443 00007AC0 F20F100C24                      movsd xmm1, qword [rsp]
 10444 00007AC5 660F2EC1                        ucomisd xmm0, xmm1
 10445 00007AC9 740C                            je .L_zero
 10446                                  .L_not_zero:
 10447 00007ACB 48B8-                           mov rax, sob_boolean_false
 10447 00007ACD [0200000000000000] 
 10448 00007AD5 EB0A                            jmp .L_end
 10449                                  .L_zero:
 10450 00007AD7 48B8-                           mov rax, sob_boolean_true
 10450 00007AD9 [0300000000000000] 
 10451                                  .L_end:
 10452 00007AE1 C9                              leave
 10453 00007AE2 C21800                          ret AND_KILL_FRAME(1)
 10454                                  
 10455                                  L_code_ptr_is_integer:
 10456 00007AE5 C8000000                        enter 0, 0
 10457 00007AE9 48837D1801                      cmp COUNT, 1
 10458 00007AEE 0F85D50B0000                    jne L_error_arg_count_1
 10459 00007AF4 488B4520                        mov rax, PARAM(0)
 10460 00007AF8 803811                          cmp byte [rax], T_integer
 10461 00007AFB 750C                            jne .L_false
 10462 00007AFD 48B8-                           mov rax, sob_boolean_true
 10462 00007AFF [0300000000000000] 
 10463 00007B07 EB0A                            jmp .L_exit
 10464                                  .L_false:
 10465 00007B09 48B8-                           mov rax, sob_boolean_false
 10465 00007B0B [0200000000000000] 
 10466                                  .L_exit:
 10467 00007B13 C9                              leave
 10468 00007B14 C21800                          ret AND_KILL_FRAME(1)
 10469                                  
 10470                                  L_code_ptr_raw_bin_add_rr:
 10471 00007B17 C8000000                        enter 0, 0
 10472 00007B1B 48837D1802                      cmp COUNT, 2
 10473 00007B20 0F85D80B0000                    jne L_error_arg_count_2
 10474 00007B26 488B5D20                        mov rbx, PARAM(0)
 10475                                          assert_real(rbx)
    53 00007B2A 803B13              <1>  cmp byte [%1], %2
    54 00007B2D 0F856A0C0000        <1>  jne L_error_incorrect_type
 10476 00007B33 488B4D28                        mov rcx, PARAM(1)
 10477                                          assert_real(rcx)
    53 00007B37 803913              <1>  cmp byte [%1], %2
    54 00007B3A 0F855D0C0000        <1>  jne L_error_incorrect_type
 10478 00007B40 F20F104301                      movsd xmm0, qword [rbx + 1]
 10479 00007B45 F20F104901                      movsd xmm1, qword [rcx + 1]
 10480 00007B4A F20F58C1                        addsd xmm0, xmm1
 10481 00007B4E E8AD0A0000                      call make_real
 10482 00007B53 C9                              leave
 10483 00007B54 C22000                          ret AND_KILL_FRAME(2)
 10484                                  
 10485                                  L_code_ptr_raw_bin_sub_rr:
 10486 00007B57 C8000000                        enter 0, 0
 10487 00007B5B 48837D1802                      cmp COUNT, 2
 10488 00007B60 0F85980B0000                    jne L_error_arg_count_2
 10489 00007B66 488B5D20                        mov rbx, PARAM(0)
 10490                                          assert_real(rbx)
    53 00007B6A 803B13              <1>  cmp byte [%1], %2
    54 00007B6D 0F852A0C0000        <1>  jne L_error_incorrect_type
 10491 00007B73 488B4D28                        mov rcx, PARAM(1)
 10492                                          assert_real(rcx)
    53 00007B77 803913              <1>  cmp byte [%1], %2
    54 00007B7A 0F851D0C0000        <1>  jne L_error_incorrect_type
 10493 00007B80 F20F104301                      movsd xmm0, qword [rbx + 1]
 10494 00007B85 F20F104901                      movsd xmm1, qword [rcx + 1]
 10495 00007B8A F20F5CC1                        subsd xmm0, xmm1
 10496 00007B8E E86D0A0000                      call make_real
 10497 00007B93 C9                              leave
 10498 00007B94 C22000                          ret AND_KILL_FRAME(2)
 10499                                  
 10500                                  L_code_ptr_raw_bin_mul_rr:
 10501 00007B97 C8000000                        enter 0, 0
 10502 00007B9B 48837D1802                      cmp COUNT, 2
 10503 00007BA0 0F85580B0000                    jne L_error_arg_count_2
 10504 00007BA6 488B5D20                        mov rbx, PARAM(0)
 10505                                          assert_real(rbx)
    53 00007BAA 803B13              <1>  cmp byte [%1], %2
    54 00007BAD 0F85EA0B0000        <1>  jne L_error_incorrect_type
 10506 00007BB3 488B4D28                        mov rcx, PARAM(1)
 10507                                          assert_real(rcx)
    53 00007BB7 803913              <1>  cmp byte [%1], %2
    54 00007BBA 0F85DD0B0000        <1>  jne L_error_incorrect_type
 10508 00007BC0 F20F104301                      movsd xmm0, qword [rbx + 1]
 10509 00007BC5 F20F104901                      movsd xmm1, qword [rcx + 1]
 10510 00007BCA F20F59C1                        mulsd xmm0, xmm1
 10511 00007BCE E82D0A0000                      call make_real
 10512 00007BD3 C9                              leave
 10513 00007BD4 C22000                          ret AND_KILL_FRAME(2)
 10514                                  
 10515                                  L_code_ptr_raw_bin_div_rr:
 10516 00007BD7 C8000000                        enter 0, 0
 10517 00007BDB 48837D1802                      cmp COUNT, 2
 10518 00007BE0 0F85180B0000                    jne L_error_arg_count_2
 10519 00007BE6 488B5D20                        mov rbx, PARAM(0)
 10520                                          assert_real(rbx)
    53 00007BEA 803B13              <1>  cmp byte [%1], %2
    54 00007BED 0F85AA0B0000        <1>  jne L_error_incorrect_type
 10521 00007BF3 488B4D28                        mov rcx, PARAM(1)
 10522                                          assert_real(rcx)
    53 00007BF7 803913              <1>  cmp byte [%1], %2
    54 00007BFA 0F859D0B0000        <1>  jne L_error_incorrect_type
 10523 00007C00 F20F104301                      movsd xmm0, qword [rbx + 1]
 10524 00007C05 F20F104901                      movsd xmm1, qword [rcx + 1]
 10525 00007C0A 660FEFD2                        pxor xmm2, xmm2
 10526 00007C0E 660F2ECA                        ucomisd xmm1, xmm2
 10527 00007C12 0F84B60B0000                    je L_error_division_by_zero
 10528 00007C18 F20F5EC1                        divsd xmm0, xmm1
 10529 00007C1C E8DF090000                      call make_real
 10530 00007C21 C9                              leave
 10531 00007C22 C22000                          ret AND_KILL_FRAME(2)
 10532                                  
 10533                                  L_code_ptr_raw_bin_add_zz:
 10534 00007C25 C8000000                	enter 0, 0
 10535 00007C29 48837D1802              	cmp COUNT, 2
 10536 00007C2E 0F85CA0A0000            	jne L_error_arg_count_2
 10537 00007C34 4C8B4520                	mov r8, PARAM(0)
 10538                                  	assert_integer(r8)
    53 00007C38 41803811            <1>  cmp byte [%1], %2
    54 00007C3C 0F855B0B0000        <1>  jne L_error_incorrect_type
 10539 00007C42 4C8B4D28                	mov r9, PARAM(1)
 10540                                  	assert_integer(r9)
    53 00007C46 41803911            <1>  cmp byte [%1], %2
    54 00007C4A 0F854D0B0000        <1>  jne L_error_incorrect_type
 10541 00007C50 498B7801                	mov rdi, qword [r8 + 1]
 10542 00007C54 49037901                	add rdi, qword [r9 + 1]
 10543 00007C58 E8BB090000              	call make_integer
 10544 00007C5D C9                      	leave
 10545 00007C5E C22000                  	ret AND_KILL_FRAME(2)
 10546                                  
 10547                                  L_code_ptr_raw_bin_add_qq:
 10548 00007C61 C8000000                        enter 0, 0
 10549 00007C65 48837D1802                      cmp COUNT, 2
 10550 00007C6A 0F858E0A0000                    jne L_error_arg_count_2
 10551 00007C70 4C8B4520                        mov r8, PARAM(0)
 10552                                          assert_fraction(r8)
    53 00007C74 41803812            <1>  cmp byte [%1], %2
    54 00007C78 0F851F0B0000        <1>  jne L_error_incorrect_type
 10553 00007C7E 4C8B4D28                        mov r9, PARAM(1)
 10554                                          assert_fraction(r9)
    53 00007C82 41803912            <1>  cmp byte [%1], %2
    54 00007C86 0F85110B0000        <1>  jne L_error_incorrect_type
 10555 00007C8C 498B4001                        mov rax, qword [r8 + 1] ; num1
 10556 00007C90 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10557 00007C94 4899                            cqo
 10558 00007C96 48F7EB                          imul rbx
 10559 00007C99 4889C6                          mov rsi, rax
 10560 00007C9C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10561 00007CA0 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10562 00007CA4 4899                            cqo
 10563 00007CA6 48F7EB                          imul rbx
 10564 00007CA9 4801C6                          add rsi, rax
 10565 00007CAC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10566 00007CB0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10567 00007CB4 4899                            cqo
 10568 00007CB6 48F7EB                          imul rbx
 10569 00007CB9 4889C7                          mov rdi, rax
 10570 00007CBC E8DE010000                      call normalize_fraction
 10571 00007CC1 C9                              leave
 10572 00007CC2 C22000                          ret AND_KILL_FRAME(2)
 10573                                  
 10574                                  L_code_ptr_raw_bin_sub_zz:
 10575 00007CC5 C8000000                	enter 0, 0
 10576 00007CC9 48837D1802              	cmp COUNT, 2
 10577 00007CCE 0F852A0A0000            	jne L_error_arg_count_2
 10578 00007CD4 4C8B4520                	mov r8, PARAM(0)
 10579                                  	assert_integer(r8)
    53 00007CD8 41803811            <1>  cmp byte [%1], %2
    54 00007CDC 0F85BB0A0000        <1>  jne L_error_incorrect_type
 10580 00007CE2 4C8B4D28                	mov r9, PARAM(1)
 10581                                  	assert_integer(r9)
    53 00007CE6 41803911            <1>  cmp byte [%1], %2
    54 00007CEA 0F85AD0A0000        <1>  jne L_error_incorrect_type
 10582 00007CF0 498B7801                	mov rdi, qword [r8 + 1]
 10583 00007CF4 492B7901                	sub rdi, qword [r9 + 1]
 10584 00007CF8 E81B090000              	call make_integer
 10585 00007CFD C9                      	leave
 10586 00007CFE C22000                  	ret AND_KILL_FRAME(2)
 10587                                  
 10588                                  L_code_ptr_raw_bin_sub_qq:
 10589 00007D01 C8000000                        enter 0, 0
 10590 00007D05 48837D1802                      cmp COUNT, 2
 10591 00007D0A 0F85EE090000                    jne L_error_arg_count_2
 10592 00007D10 4C8B4520                        mov r8, PARAM(0)
 10593                                          assert_fraction(r8)
    53 00007D14 41803812            <1>  cmp byte [%1], %2
    54 00007D18 0F857F0A0000        <1>  jne L_error_incorrect_type
 10594 00007D1E 4C8B4D28                        mov r9, PARAM(1)
 10595                                          assert_fraction(r9)
    53 00007D22 41803912            <1>  cmp byte [%1], %2
    54 00007D26 0F85710A0000        <1>  jne L_error_incorrect_type
 10596 00007D2C 498B4001                        mov rax, qword [r8 + 1] ; num1
 10597 00007D30 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10598 00007D34 4899                            cqo
 10599 00007D36 48F7EB                          imul rbx
 10600 00007D39 4889C6                          mov rsi, rax
 10601 00007D3C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10602 00007D40 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10603 00007D44 4899                            cqo
 10604 00007D46 48F7EB                          imul rbx
 10605 00007D49 4829C6                          sub rsi, rax
 10606 00007D4C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10607 00007D50 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10608 00007D54 4899                            cqo
 10609 00007D56 48F7EB                          imul rbx
 10610 00007D59 4889C7                          mov rdi, rax
 10611 00007D5C E83E010000                      call normalize_fraction
 10612 00007D61 C9                              leave
 10613 00007D62 C22000                          ret AND_KILL_FRAME(2)
 10614                                  
 10615                                  L_code_ptr_raw_bin_mul_zz:
 10616 00007D65 C8000000                	enter 0, 0
 10617 00007D69 48837D1802              	cmp COUNT, 2
 10618 00007D6E 0F858A090000            	jne L_error_arg_count_2
 10619 00007D74 4C8B4520                	mov r8, PARAM(0)
 10620                                  	assert_integer(r8)
    53 00007D78 41803811            <1>  cmp byte [%1], %2
    54 00007D7C 0F851B0A0000        <1>  jne L_error_incorrect_type
 10621 00007D82 4C8B4D28                	mov r9, PARAM(1)
 10622                                  	assert_integer(r9)
    53 00007D86 41803911            <1>  cmp byte [%1], %2
    54 00007D8A 0F850D0A0000        <1>  jne L_error_incorrect_type
 10623 00007D90 4899                    	cqo
 10624 00007D92 498B4001                	mov rax, qword [r8 + 1]
 10625 00007D96 49F76101                	mul qword [r9 + 1]
 10626 00007D9A 4889C7                  	mov rdi, rax
 10627 00007D9D E876080000              	call make_integer
 10628 00007DA2 C9                      	leave
 10629 00007DA3 C22000                  	ret AND_KILL_FRAME(2)
 10630                                  
 10631                                  L_code_ptr_raw_bin_mul_qq:
 10632 00007DA6 C8000000                        enter 0, 0
 10633 00007DAA 48837D1802                      cmp COUNT, 2
 10634 00007DAF 0F8549090000                    jne L_error_arg_count_2
 10635 00007DB5 4C8B4520                        mov r8, PARAM(0)
 10636                                          assert_fraction(r8)
    53 00007DB9 41803812            <1>  cmp byte [%1], %2
    54 00007DBD 0F85DA090000        <1>  jne L_error_incorrect_type
 10637 00007DC3 4C8B4D28                        mov r9, PARAM(1)
 10638                                          assert_fraction(r9)
    53 00007DC7 41803912            <1>  cmp byte [%1], %2
    54 00007DCB 0F85CC090000        <1>  jne L_error_incorrect_type
 10639 00007DD1 498B4001                        mov rax, qword [r8 + 1] ; num1
 10640 00007DD5 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10641 00007DD9 4899                            cqo
 10642 00007DDB 48F7EB                          imul rbx
 10643 00007DDE 4889C6                          mov rsi, rax
 10644 00007DE1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10645 00007DE5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10646 00007DE9 4899                            cqo
 10647 00007DEB 48F7EB                          imul rbx
 10648 00007DEE 4889C7                          mov rdi, rax
 10649 00007DF1 E8A9000000                      call normalize_fraction
 10650 00007DF6 C9                              leave
 10651 00007DF7 C22000                          ret AND_KILL_FRAME(2)
 10652                                          
 10653                                  L_code_ptr_raw_bin_div_zz:
 10654 00007DFA C8000000                	enter 0, 0
 10655 00007DFE 48837D1802              	cmp COUNT, 2
 10656 00007E03 0F85F5080000            	jne L_error_arg_count_2
 10657 00007E09 4C8B4520                	mov r8, PARAM(0)
 10658                                  	assert_integer(r8)
    53 00007E0D 41803811            <1>  cmp byte [%1], %2
    54 00007E11 0F8586090000        <1>  jne L_error_incorrect_type
 10659 00007E17 4C8B4D28                	mov r9, PARAM(1)
 10660                                  	assert_integer(r9)
    53 00007E1B 41803911            <1>  cmp byte [%1], %2
    54 00007E1F 0F8578090000        <1>  jne L_error_incorrect_type
 10661 00007E25 498B7901                	mov rdi, qword [r9 + 1]
 10662 00007E29 4883FF00                	cmp rdi, 0
 10663 00007E2D 0F849B090000            	je L_error_division_by_zero
 10664 00007E33 498B7001                	mov rsi, qword [r8 + 1]
 10665 00007E37 E863000000              	call normalize_fraction
 10666 00007E3C C9                      	leave
 10667 00007E3D C22000                  	ret AND_KILL_FRAME(2)
 10668                                  
 10669                                  L_code_ptr_raw_bin_div_qq:
 10670 00007E40 C8000000                        enter 0, 0
 10671 00007E44 48837D1802                      cmp COUNT, 2
 10672 00007E49 0F85AF080000                    jne L_error_arg_count_2
 10673 00007E4F 4C8B4520                        mov r8, PARAM(0)
 10674                                          assert_fraction(r8)
    53 00007E53 41803812            <1>  cmp byte [%1], %2
    54 00007E57 0F8540090000        <1>  jne L_error_incorrect_type
 10675 00007E5D 4C8B4D28                        mov r9, PARAM(1)
 10676                                          assert_fraction(r9)
    53 00007E61 41803912            <1>  cmp byte [%1], %2
    54 00007E65 0F8532090000        <1>  jne L_error_incorrect_type
 10677 00007E6B 4983790100                      cmp qword [r9 + 1], 0
 10678 00007E70 0F8458090000                    je L_error_division_by_zero
 10679 00007E76 498B4001                        mov rax, qword [r8 + 1] ; num1
 10680 00007E7A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10681 00007E7E 4899                            cqo
 10682 00007E80 48F7EB                          imul rbx
 10683 00007E83 4889C6                          mov rsi, rax
 10684 00007E86 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10685 00007E8A 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10686 00007E8E 4899                            cqo
 10687 00007E90 48F7EB                          imul rbx
 10688 00007E93 4889C7                          mov rdi, rax
 10689 00007E96 E804000000                      call normalize_fraction
 10690 00007E9B C9                              leave
 10691 00007E9C C22000                          ret AND_KILL_FRAME(2)
 10692                                          
 10693                                  normalize_fraction:
 10694 00007E9F 56                              push rsi
 10695 00007EA0 57                              push rdi
 10696 00007EA1 E859000000                      call gcd
 10697 00007EA6 4889C3                          mov rbx, rax
 10698 00007EA9 58                              pop rax
 10699 00007EAA 4899                            cqo
 10700 00007EAC 48F7FB                          idiv rbx
 10701 00007EAF 4989C0                          mov r8, rax
 10702 00007EB2 58                              pop rax
 10703 00007EB3 4899                            cqo
 10704 00007EB5 48F7FB                          idiv rbx
 10705 00007EB8 4989C1                          mov r9, rax
 10706 00007EBB 4983F900                        cmp r9, 0
 10707 00007EBF 741C                            je .L_zero
 10708 00007EC1 4983F801                        cmp r8, 1
 10709 00007EC5 7421                            je .L_int
 10710 00007EC7 BF11000000                      mov rdi, (1 + 8 + 8)
 10711 00007ECC E8F1EAFFFF                      call malloc
 10712 00007ED1 C60012                          mov byte [rax], T_fraction
 10713 00007ED4 4C894801                        mov qword [rax + 1], r9
 10714 00007ED8 4C894009                        mov qword [rax + 1 + 8], r8
 10715 00007EDC C3                              ret
 10716                                  .L_zero:
 10717 00007EDD BF00000000                      mov rdi, 0
 10718 00007EE2 E831070000                      call make_integer
 10719 00007EE7 C3                              ret
 10720                                  .L_int:
 10721 00007EE8 4C89CF                          mov rdi, r9
 10722 00007EEB E828070000                      call make_integer
 10723 00007EF0 C3                              ret
 10724                                  
 10725                                  iabs:
 10726 00007EF1 4889F8                          mov rax, rdi
 10727 00007EF4 4883F800                        cmp rax, 0
 10728 00007EF8 7C01                            jl .Lneg
 10729 00007EFA C3                              ret
 10730                                  .Lneg:
 10731 00007EFB 48F7D8                          neg rax
 10732 00007EFE C3                              ret
 10733                                  
 10734                                  gcd:
 10735 00007EFF E8EDFFFFFF                      call iabs
 10736 00007F04 4889C3                          mov rbx, rax
 10737 00007F07 4889F7                          mov rdi, rsi
 10738 00007F0A E8E2FFFFFF                      call iabs
 10739 00007F0F 4883F800                        cmp rax, 0
 10740 00007F13 7502                            jne .L0
 10741 00007F15 4893                            xchg rax, rbx
 10742                                  .L0:
 10743 00007F17 4883FB00                        cmp rbx, 0
 10744 00007F1B 740C                            je .L1
 10745 00007F1D 4899                            cqo
 10746 00007F1F 48F7F3                          div rbx
 10747 00007F22 4889D0                          mov rax, rdx
 10748 00007F25 4893                            xchg rax, rbx
 10749 00007F27 EBEE                            jmp .L0
 10750                                  .L1:
 10751 00007F29 C3                              ret
 10752                                  
 10753                                  L_code_ptr_error:
 10754 00007F2A C8000000                        enter 0, 0
 10755 00007F2E 48837D1802                      cmp COUNT, 2
 10756 00007F33 0F85C5070000                    jne L_error_arg_count_2
 10757 00007F39 488B7520                        mov rsi, PARAM(0)
 10758                                          assert_interned_symbol(rsi)
    53 00007F3D 803E41              <1>  cmp byte [%1], %2
    54 00007F40 0F8557080000        <1>  jne L_error_incorrect_type
 10759 00007F46 488B7528                        mov rsi, PARAM(1)
 10760                                          assert_string(rsi)
    53 00007F4A 803E03              <1>  cmp byte [%1], %2
    54 00007F4D 0F854A080000        <1>  jne L_error_incorrect_type
 10761 00007F53 48BF-                           mov rdi, fmt_scheme_error_part_1
 10761 00007F55 [AB10000000000000] 
 10762 00007F5D B800000000                      mov rax, 0
 10763                                          ENTER
    44 00007F62 C8000000            <1>  enter 0, 0
    45 00007F66 4883E4F0            <1>  and rsp, ~15
 10764 00007F6A E8(00000000)                    call printf
 10765                                          LEAVE
    49 00007F6F C9                  <1>  leave
 10766 00007F70 488B7D20                        mov rdi, PARAM(0)
 10767 00007F74 E8CAECFFFF                      call print_sexpr
 10768 00007F79 48BF-                           mov rdi, fmt_scheme_error_part_2
 10768 00007F7B [BF10000000000000] 
 10769 00007F83 B800000000                      mov rax, 0
 10770                                          ENTER
    44 00007F88 C8000000            <1>  enter 0, 0
    45 00007F8C 4883E4F0            <1>  and rsp, ~15
 10771 00007F90 E8(00000000)                    call printf
 10772                                          LEAVE
    49 00007F95 C9                  <1>  leave
 10773 00007F96 488B4528                        mov rax, PARAM(1)       ; sob_string
 10774 00007F9A BE01000000                      mov rsi, 1              ; size = 1 byte
 10775 00007F9F 488B5001                        mov rdx, qword [rax + 1] ; length
 10776 00007FA3 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 10777 00007FA7 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 10778                                  	ENTER
    44 00007FAF C8000000            <1>  enter 0, 0
    45 00007FB3 4883E4F0            <1>  and rsp, ~15
 10779 00007FB7 E8(00000000)                    call fwrite
 10780                                  	LEAVE
    49 00007FBC C9                  <1>  leave
 10781 00007FBD 48BF-                           mov rdi, fmt_scheme_error_part_3
 10781 00007FBF [0111000000000000] 
 10782 00007FC7 B800000000                      mov rax, 0
 10783                                          ENTER
    44 00007FCC C8000000            <1>  enter 0, 0
    45 00007FD0 4883E4F0            <1>  and rsp, ~15
 10784 00007FD4 E8(00000000)                    call printf
 10785                                          LEAVE
    49 00007FD9 C9                  <1>  leave
 10786 00007FDA 48C7C0F7FFFFFF                  mov rax, -9
 10787 00007FE1 E8(00000000)                    call exit
 10788                                  
 10789                                  L_code_ptr_raw_less_than_rr:
 10790 00007FE6 C8000000                        enter 0, 0
 10791 00007FEA 48837D1802                      cmp COUNT, 2
 10792 00007FEF 0F8509070000                    jne L_error_arg_count_2
 10793 00007FF5 488B7520                        mov rsi, PARAM(0)
 10794                                          assert_real(rsi)
    53 00007FF9 803E13              <1>  cmp byte [%1], %2
    54 00007FFC 0F859B070000        <1>  jne L_error_incorrect_type
 10795 00008002 488B7D28                        mov rdi, PARAM(1)
 10796                                          assert_real(rdi)
    53 00008006 803F13              <1>  cmp byte [%1], %2
    54 00008009 0F858E070000        <1>  jne L_error_incorrect_type
 10797 0000800F F20F104601                      movsd xmm0, qword [rsi + 1]
 10798 00008014 F20F104F01                      movsd xmm1, qword [rdi + 1]
 10799 00008019 660F2FC1                        comisd xmm0, xmm1
 10800 0000801D 730C                            jae .L_false
 10801 0000801F 48B8-                           mov rax, sob_boolean_true
 10801 00008021 [0300000000000000] 
 10802 00008029 EB0A                            jmp .L_exit
 10803                                  .L_false:
 10804 0000802B 48B8-                           mov rax, sob_boolean_false
 10804 0000802D [0200000000000000] 
 10805                                  .L_exit:
 10806 00008035 C9                              leave
 10807 00008036 C22000                          ret AND_KILL_FRAME(2)
 10808                                          
 10809                                  L_code_ptr_raw_less_than_zz:
 10810 00008039 C8000000                	enter 0, 0
 10811 0000803D 48837D1802              	cmp COUNT, 2
 10812 00008042 0F85B6060000            	jne L_error_arg_count_2
 10813 00008048 4C8B4520                	mov r8, PARAM(0)
 10814                                  	assert_integer(r8)
    53 0000804C 41803811            <1>  cmp byte [%1], %2
    54 00008050 0F8547070000        <1>  jne L_error_incorrect_type
 10815 00008056 4C8B4D28                	mov r9, PARAM(1)
 10816                                  	assert_integer(r9)
    53 0000805A 41803911            <1>  cmp byte [%1], %2
    54 0000805E 0F8539070000        <1>  jne L_error_incorrect_type
 10817 00008064 498B7801                	mov rdi, qword [r8 + 1]
 10818 00008068 493B7901                	cmp rdi, qword [r9 + 1]
 10819 0000806C 7D0C                    	jge .L_false
 10820 0000806E 48B8-                   	mov rax, sob_boolean_true
 10820 00008070 [0300000000000000] 
 10821 00008078 EB0A                    	jmp .L_exit
 10822                                  .L_false:
 10823 0000807A 48B8-                   	mov rax, sob_boolean_false
 10823 0000807C [0200000000000000] 
 10824                                  .L_exit:
 10825 00008084 C9                      	leave
 10826 00008085 C22000                  	ret AND_KILL_FRAME(2)
 10827                                  
 10828                                  L_code_ptr_raw_less_than_qq:
 10829 00008088 C8000000                        enter 0, 0
 10830 0000808C 48837D1802                      cmp COUNT, 2
 10831 00008091 0F8567060000                    jne L_error_arg_count_2
 10832 00008097 488B7520                        mov rsi, PARAM(0)
 10833                                          assert_fraction(rsi)
    53 0000809B 803E12              <1>  cmp byte [%1], %2
    54 0000809E 0F85F9060000        <1>  jne L_error_incorrect_type
 10834 000080A4 488B7D28                        mov rdi, PARAM(1)
 10835                                          assert_fraction(rdi)
    53 000080A8 803F12              <1>  cmp byte [%1], %2
    54 000080AB 0F85EC060000        <1>  jne L_error_incorrect_type
 10836 000080B1 488B4601                        mov rax, qword [rsi + 1] ; num1
 10837 000080B5 4899                            cqo
 10838 000080B7 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 10839 000080BB 4889C1                          mov rcx, rax
 10840 000080BE 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 10841 000080C2 4899                            cqo
 10842 000080C4 48F76F01                        imul qword [rdi + 1]          ; num2
 10843 000080C8 4829C1                          sub rcx, rax
 10844 000080CB 7D0C                            jge .L_false
 10845 000080CD 48B8-                           mov rax, sob_boolean_true
 10845 000080CF [0300000000000000] 
 10846 000080D7 EB0A                            jmp .L_exit
 10847                                  .L_false:
 10848 000080D9 48B8-                           mov rax, sob_boolean_false
 10848 000080DB [0200000000000000] 
 10849                                  .L_exit:
 10850 000080E3 C9                              leave
 10851 000080E4 C22000                          ret AND_KILL_FRAME(2)
 10852                                  
 10853                                  L_code_ptr_raw_equal_rr:
 10854 000080E7 C8000000                        enter 0, 0
 10855 000080EB 48837D1802                      cmp COUNT, 2
 10856 000080F0 0F8508060000                    jne L_error_arg_count_2
 10857 000080F6 488B7520                        mov rsi, PARAM(0)
 10858                                          assert_real(rsi)
    53 000080FA 803E13              <1>  cmp byte [%1], %2
    54 000080FD 0F859A060000        <1>  jne L_error_incorrect_type
 10859 00008103 488B7D28                        mov rdi, PARAM(1)
 10860                                          assert_real(rdi)
    53 00008107 803F13              <1>  cmp byte [%1], %2
    54 0000810A 0F858D060000        <1>  jne L_error_incorrect_type
 10861 00008110 F20F104601                      movsd xmm0, qword [rsi + 1]
 10862 00008115 F20F104F01                      movsd xmm1, qword [rdi + 1]
 10863 0000811A 660F2FC1                        comisd xmm0, xmm1
 10864 0000811E 750C                            jne .L_false
 10865 00008120 48B8-                           mov rax, sob_boolean_true
 10865 00008122 [0300000000000000] 
 10866 0000812A EB0A                            jmp .L_exit
 10867                                  .L_false:
 10868 0000812C 48B8-                           mov rax, sob_boolean_false
 10868 0000812E [0200000000000000] 
 10869                                  .L_exit:
 10870 00008136 C9                              leave
 10871 00008137 C22000                          ret AND_KILL_FRAME(2)
 10872                                          
 10873                                  L_code_ptr_raw_equal_zz:
 10874 0000813A C8000000                	enter 0, 0
 10875 0000813E 48837D1802              	cmp COUNT, 2
 10876 00008143 0F85B5050000            	jne L_error_arg_count_2
 10877 00008149 4C8B4520                	mov r8, PARAM(0)
 10878                                  	assert_integer(r8)
    53 0000814D 41803811            <1>  cmp byte [%1], %2
    54 00008151 0F8546060000        <1>  jne L_error_incorrect_type
 10879 00008157 4C8B4D28                	mov r9, PARAM(1)
 10880                                  	assert_integer(r9)
    53 0000815B 41803911            <1>  cmp byte [%1], %2
    54 0000815F 0F8538060000        <1>  jne L_error_incorrect_type
 10881 00008165 498B7801                	mov rdi, qword [r8 + 1]
 10882 00008169 493B7901                	cmp rdi, qword [r9 + 1]
 10883 0000816D 750C                    	jne .L_false
 10884 0000816F 48B8-                   	mov rax, sob_boolean_true
 10884 00008171 [0300000000000000] 
 10885 00008179 EB0A                    	jmp .L_exit
 10886                                  .L_false:
 10887 0000817B 48B8-                   	mov rax, sob_boolean_false
 10887 0000817D [0200000000000000] 
 10888                                  .L_exit:
 10889 00008185 C9                      	leave
 10890 00008186 C22000                  	ret AND_KILL_FRAME(2)
 10891                                  
 10892                                  L_code_ptr_raw_equal_qq:
 10893 00008189 C8000000                        enter 0, 0
 10894 0000818D 48837D1802                      cmp COUNT, 2
 10895 00008192 0F8566050000                    jne L_error_arg_count_2
 10896 00008198 488B7520                        mov rsi, PARAM(0)
 10897                                          assert_fraction(rsi)
    53 0000819C 803E12              <1>  cmp byte [%1], %2
    54 0000819F 0F85F8050000        <1>  jne L_error_incorrect_type
 10898 000081A5 488B7D28                        mov rdi, PARAM(1)
 10899                                          assert_fraction(rdi)
    53 000081A9 803F12              <1>  cmp byte [%1], %2
    54 000081AC 0F85EB050000        <1>  jne L_error_incorrect_type
 10900 000081B2 488B4601                        mov rax, qword [rsi + 1] ; num1
 10901 000081B6 4899                            cqo
 10902 000081B8 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 10903 000081BC 4889C1                          mov rcx, rax
 10904 000081BF 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 10905 000081C3 4899                            cqo
 10906 000081C5 48F76F01                        imul qword [rdi + 1]          ; num2
 10907 000081C9 4829C1                          sub rcx, rax
 10908 000081CC 750C                            jne .L_false
 10909 000081CE 48B8-                           mov rax, sob_boolean_true
 10909 000081D0 [0300000000000000] 
 10910 000081D8 EB0A                            jmp .L_exit
 10911                                  .L_false:
 10912 000081DA 48B8-                           mov rax, sob_boolean_false
 10912 000081DC [0200000000000000] 
 10913                                  .L_exit:
 10914 000081E4 C9                              leave
 10915 000081E5 C22000                          ret AND_KILL_FRAME(2)
 10916                                  
 10917                                  L_code_ptr_quotient:
 10918 000081E8 C8000000                        enter 0, 0
 10919 000081EC 48837D1802                      cmp COUNT, 2
 10920 000081F1 0F8507050000                    jne L_error_arg_count_2
 10921 000081F7 488B7520                        mov rsi, PARAM(0)
 10922                                          assert_integer(rsi)
    53 000081FB 803E11              <1>  cmp byte [%1], %2
    54 000081FE 0F8599050000        <1>  jne L_error_incorrect_type
 10923 00008204 488B7D28                        mov rdi, PARAM(1)
 10924                                          assert_integer(rdi)
    53 00008208 803F11              <1>  cmp byte [%1], %2
    54 0000820B 0F858C050000        <1>  jne L_error_incorrect_type
 10925 00008211 488B4601                        mov rax, qword [rsi + 1]
 10926 00008215 488B5F01                        mov rbx, qword [rdi + 1]
 10927 00008219 4883FB00                        cmp rbx, 0
 10928 0000821D 0F84AB050000                    je L_error_division_by_zero
 10929 00008223 4899                            cqo
 10930 00008225 48F7FB                          idiv rbx
 10931 00008228 4889C7                          mov rdi, rax
 10932 0000822B E8E8030000                      call make_integer
 10933 00008230 C9                              leave
 10934 00008231 C22000                          ret AND_KILL_FRAME(2)
 10935                                          
 10936                                  L_code_ptr_remainder:
 10937 00008234 C8000000                        enter 0, 0
 10938 00008238 48837D1802                      cmp COUNT, 2
 10939 0000823D 0F85BB040000                    jne L_error_arg_count_2
 10940 00008243 488B7520                        mov rsi, PARAM(0)
 10941                                          assert_integer(rsi)
    53 00008247 803E11              <1>  cmp byte [%1], %2
    54 0000824A 0F854D050000        <1>  jne L_error_incorrect_type
 10942 00008250 488B7D28                        mov rdi, PARAM(1)
 10943                                          assert_integer(rdi)
    53 00008254 803F11              <1>  cmp byte [%1], %2
    54 00008257 0F8540050000        <1>  jne L_error_incorrect_type
 10944 0000825D 488B4601                        mov rax, qword [rsi + 1]
 10945 00008261 488B5F01                        mov rbx, qword [rdi + 1]
 10946 00008265 4883FB00                        cmp rbx, 0
 10947 00008269 0F845F050000                    je L_error_division_by_zero
 10948 0000826F 4899                            cqo
 10949 00008271 48F7FB                          idiv rbx
 10950 00008274 4889D7                          mov rdi, rdx
 10951 00008277 E89C030000                      call make_integer
 10952 0000827C C9                              leave
 10953 0000827D C22000                          ret AND_KILL_FRAME(2)
 10954                                  
 10955                                  L_code_ptr_set_car:
 10956 00008280 C8000000                        enter 0, 0
 10957 00008284 48837D1802                      cmp COUNT, 2
 10958 00008289 0F856F040000                    jne L_error_arg_count_2
 10959 0000828F 488B4520                        mov rax, PARAM(0)
 10960                                          assert_pair(rax)
    53 00008293 803821              <1>  cmp byte [%1], %2
    54 00008296 0F8501050000        <1>  jne L_error_incorrect_type
 10961 0000829C 488B5D28                        mov rbx, PARAM(1)
 10962 000082A0 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10963 000082A4 48B8-                           mov rax, sob_void
 10963 000082A6 [0000000000000000] 
 10964 000082AE C9                              leave
 10965 000082AF C22000                          ret AND_KILL_FRAME(2)
 10966                                  
 10967                                  L_code_ptr_set_cdr:
 10968 000082B2 C8000000                        enter 0, 0
 10969 000082B6 48837D1802                      cmp COUNT, 2
 10970 000082BB 0F853D040000                    jne L_error_arg_count_2
 10971 000082C1 488B4520                        mov rax, PARAM(0)
 10972                                          assert_pair(rax)
    53 000082C5 803821              <1>  cmp byte [%1], %2
    54 000082C8 0F85CF040000        <1>  jne L_error_incorrect_type
 10973 000082CE 488B5D28                        mov rbx, PARAM(1)
 10974 000082D2 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10975 000082D6 48B8-                           mov rax, sob_void
 10975 000082D8 [0000000000000000] 
 10976 000082E0 C9                              leave
 10977 000082E1 C22000                          ret AND_KILL_FRAME(2)
 10978                                  
 10979                                  L_code_ptr_string_ref:
 10980 000082E4 C8000000                        enter 0, 0
 10981 000082E8 48837D1802                      cmp COUNT, 2
 10982 000082ED 0F850B040000                    jne L_error_arg_count_2
 10983 000082F3 488B7D20                        mov rdi, PARAM(0)
 10984                                          assert_string(rdi)
    53 000082F7 803F03              <1>  cmp byte [%1], %2
    54 000082FA 0F859D040000        <1>  jne L_error_incorrect_type
 10985 00008300 488B7528                        mov rsi, PARAM(1)
 10986                                          assert_integer(rsi)
    53 00008304 803E11              <1>  cmp byte [%1], %2
    54 00008307 0F8590040000        <1>  jne L_error_incorrect_type
 10987 0000830D 488B5701                        mov rdx, qword [rdi + 1]
 10988 00008311 488B4E01                        mov rcx, qword [rsi + 1]
 10989 00008315 4839D1                          cmp rcx, rdx
 10990 00008318 0F8D14030000                    jge L_error_integer_range
 10991 0000831E 4883F900                        cmp rcx, 0
 10992 00008322 0F8C0A030000                    jl L_error_integer_range
 10993 00008328 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 10994 0000832C BF02000000                      mov rdi, 2
 10995 00008331 E88CE6FFFF                      call malloc
 10996 00008336 C60002                          mov byte [rax], T_char
 10997 00008339 885801                          mov byte [rax + 1], bl
 10998 0000833C C9                              leave
 10999 0000833D C22000                          ret AND_KILL_FRAME(2)
 11000                                  
 11001                                  L_code_ptr_vector_ref:
 11002 00008340 C8000000                        enter 0, 0
 11003 00008344 48837D1802                      cmp COUNT, 2
 11004 00008349 0F85AF030000                    jne L_error_arg_count_2
 11005 0000834F 488B7D20                        mov rdi, PARAM(0)
 11006                                          assert_vector(rdi)
    53 00008353 803F22              <1>  cmp byte [%1], %2
    54 00008356 0F8541040000        <1>  jne L_error_incorrect_type
 11007 0000835C 488B7528                        mov rsi, PARAM(1)
 11008                                          assert_integer(rsi)
    53 00008360 803E11              <1>  cmp byte [%1], %2
    54 00008363 0F8534040000        <1>  jne L_error_incorrect_type
 11009 00008369 488B5701                        mov rdx, qword [rdi + 1]
 11010 0000836D 488B4E01                        mov rcx, qword [rsi + 1]
 11011 00008371 4839D1                          cmp rcx, rdx
 11012 00008374 0F8DB8020000                    jge L_error_integer_range
 11013 0000837A 4883F900                        cmp rcx, 0
 11014 0000837E 0F8CAE020000                    jl L_error_integer_range
 11015 00008384 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 11016 00008389 C9                              leave
 11017 0000838A C22000                          ret AND_KILL_FRAME(2)
 11018                                  
 11019                                  L_code_ptr_vector_set:
 11020 0000838D C8000000                        enter 0, 0
 11021 00008391 48837D1803                      cmp COUNT, 3
 11022 00008396 0F85CC030000                    jne L_error_arg_count_3
 11023 0000839C 488B7D20                        mov rdi, PARAM(0)
 11024                                          assert_vector(rdi)
    53 000083A0 803F22              <1>  cmp byte [%1], %2
    54 000083A3 0F85F4030000        <1>  jne L_error_incorrect_type
 11025 000083A9 488B7528                        mov rsi, PARAM(1)
 11026                                          assert_integer(rsi)
    53 000083AD 803E11              <1>  cmp byte [%1], %2
    54 000083B0 0F85E7030000        <1>  jne L_error_incorrect_type
 11027 000083B6 488B5701                        mov rdx, qword [rdi + 1]
 11028 000083BA 488B4E01                        mov rcx, qword [rsi + 1]
 11029 000083BE 4839D1                          cmp rcx, rdx
 11030 000083C1 0F8D6B020000                    jge L_error_integer_range
 11031 000083C7 4883F900                        cmp rcx, 0
 11032 000083CB 0F8C61020000                    jl L_error_integer_range
 11033 000083D1 488B4530                        mov rax, PARAM(2)
 11034 000083D5 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 11035 000083DA 48B8-                           mov rax, sob_void
 11035 000083DC [0000000000000000] 
 11036 000083E4 C9                              leave
 11037 000083E5 C22800                          ret AND_KILL_FRAME(3)
 11038                                  
 11039                                  L_code_ptr_string_set:
 11040 000083E8 C8000000                        enter 0, 0
 11041 000083EC 48837D1803                      cmp COUNT, 3
 11042 000083F1 0F8571030000                    jne L_error_arg_count_3
 11043 000083F7 488B7D20                        mov rdi, PARAM(0)
 11044                                          assert_string(rdi)
    53 000083FB 803F03              <1>  cmp byte [%1], %2
    54 000083FE 0F8599030000        <1>  jne L_error_incorrect_type
 11045 00008404 488B7528                        mov rsi, PARAM(1)
 11046                                          assert_integer(rsi)
    53 00008408 803E11              <1>  cmp byte [%1], %2
    54 0000840B 0F858C030000        <1>  jne L_error_incorrect_type
 11047 00008411 488B5701                        mov rdx, qword [rdi + 1]
 11048 00008415 488B4E01                        mov rcx, qword [rsi + 1]
 11049 00008419 4839D1                          cmp rcx, rdx
 11050 0000841C 0F8D10020000                    jge L_error_integer_range
 11051 00008422 4883F900                        cmp rcx, 0
 11052 00008426 0F8C06020000                    jl L_error_integer_range
 11053 0000842C 488B4530                        mov rax, PARAM(2)
 11054                                          assert_char(rax)
    53 00008430 803802              <1>  cmp byte [%1], %2
    54 00008433 0F8564030000        <1>  jne L_error_incorrect_type
 11055 00008439 8A4001                          mov al, byte [rax + 1]
 11056 0000843C 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 11057 00008440 48B8-                           mov rax, sob_void
 11057 00008442 [0000000000000000] 
 11058 0000844A C9                              leave
 11059 0000844B C22800                          ret AND_KILL_FRAME(3)
 11060                                  
 11061                                  L_code_ptr_make_vector:
 11062 0000844E C8000000                        enter 0, 0
 11063 00008452 48837D1802                      cmp COUNT, 2
 11064 00008457 0F85A1020000                    jne L_error_arg_count_2
 11065 0000845D 488B4D20                        mov rcx, PARAM(0)
 11066                                          assert_integer(rcx)
    53 00008461 803911              <1>  cmp byte [%1], %2
    54 00008464 0F8533030000        <1>  jne L_error_incorrect_type
 11067 0000846A 488B4901                        mov rcx, qword [rcx + 1]
 11068 0000846E 4883F900                        cmp rcx, 0
 11069 00008472 0F8CBA010000                    jl L_error_integer_range
 11070 00008478 488B5528                        mov rdx, PARAM(1)
 11071 0000847C 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 11072 00008484 E839E5FFFF                      call malloc
 11073 00008489 C60022                          mov byte [rax], T_vector
 11074 0000848C 48894801                        mov qword [rax + 1], rcx
 11075 00008490 41B800000000                    mov r8, 0
 11076                                  .L0:
 11077 00008496 4939C8                          cmp r8, rcx
 11078 00008499 740A                            je .L1
 11079 0000849B 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 11080 000084A0 49FFC0                          inc r8
 11081 000084A3 EBF1                            jmp .L0
 11082                                  .L1:
 11083 000084A5 C9                              leave
 11084 000084A6 C22000                          ret AND_KILL_FRAME(2)
 11085                                          
 11086                                  L_code_ptr_make_string:
 11087 000084A9 C8000000                        enter 0, 0
 11088 000084AD 48837D1802                      cmp COUNT, 2
 11089 000084B2 0F8546020000                    jne L_error_arg_count_2
 11090 000084B8 488B4D20                        mov rcx, PARAM(0)
 11091                                          assert_integer(rcx)
    53 000084BC 803911              <1>  cmp byte [%1], %2
    54 000084BF 0F85D8020000        <1>  jne L_error_incorrect_type
 11092 000084C5 488B4901                        mov rcx, qword [rcx + 1]
 11093 000084C9 4883F900                        cmp rcx, 0
 11094 000084CD 0F8C5F010000                    jl L_error_integer_range
 11095 000084D3 488B5528                        mov rdx, PARAM(1)
 11096                                          assert_char(rdx)
    53 000084D7 803A02              <1>  cmp byte [%1], %2
    54 000084DA 0F85BD020000        <1>  jne L_error_incorrect_type
 11097 000084E0 8A5201                          mov dl, byte [rdx + 1]
 11098 000084E3 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 11099 000084E7 E8D6E4FFFF                      call malloc
 11100 000084EC C60003                          mov byte [rax], T_string
 11101 000084EF 48894801                        mov qword [rax + 1], rcx
 11102 000084F3 41B800000000                    mov r8, 0
 11103                                  .L0:
 11104 000084F9 4939C8                          cmp r8, rcx
 11105 000084FC 740A                            je .L1
 11106 000084FE 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 11107 00008503 49FFC0                          inc r8
 11108 00008506 EBF1                            jmp .L0
 11109                                  .L1:
 11110 00008508 C9                              leave
 11111 00008509 C22000                          ret AND_KILL_FRAME(2)
 11112                                  
 11113                                  L_code_ptr_numerator:
 11114 0000850C C8000000                        enter 0, 0
 11115 00008510 48837D1801                      cmp COUNT, 1
 11116 00008515 0F85AE010000                    jne L_error_arg_count_1
 11117 0000851B 488B4520                        mov rax, PARAM(0)
 11118                                          assert_fraction(rax)
    53 0000851F 803812              <1>  cmp byte [%1], %2
    54 00008522 0F8575020000        <1>  jne L_error_incorrect_type
 11119 00008528 488B7801                        mov rdi, qword [rax + 1]
 11120 0000852C E8E7000000                      call make_integer
 11121 00008531 C9                              leave
 11122 00008532 C21800                          ret AND_KILL_FRAME(1)
 11123                                          
 11124                                  L_code_ptr_denominator:
 11125 00008535 C8000000                        enter 0, 0
 11126 00008539 48837D1801                      cmp COUNT, 1
 11127 0000853E 0F8585010000                    jne L_error_arg_count_1
 11128 00008544 488B4520                        mov rax, PARAM(0)
 11129                                          assert_fraction(rax)
    53 00008548 803812              <1>  cmp byte [%1], %2
    54 0000854B 0F854C020000        <1>  jne L_error_incorrect_type
 11130 00008551 488B7809                        mov rdi, qword [rax + 1 + 8]
 11131 00008555 E8BE000000                      call make_integer
 11132 0000855A C9                              leave
 11133 0000855B C21800                          ret AND_KILL_FRAME(1)
 11134                                  
 11135                                  L_code_ptr_is_eq:
 11136 0000855E C8000000                	enter 0, 0
 11137 00008562 48837D1802              	cmp COUNT, 2
 11138 00008567 0F8591010000            	jne L_error_arg_count_2
 11139 0000856D 488B7D20                	mov rdi, PARAM(0)
 11140 00008571 488B7528                	mov rsi, PARAM(1)
 11141 00008575 4839F7                  	cmp rdi, rsi
 11142 00008578 746C                    	je .L_eq_true
 11143 0000857A 8A17                    	mov dl, byte [rdi]
 11144 0000857C 3A16                    	cmp dl, byte [rsi]
 11145 0000857E 7572                    	jne .L_eq_false
 11146 00008580 80FA02                  	cmp dl, T_char
 11147 00008583 7459                    	je .L_char
 11148 00008585 80FA41                  	cmp dl, T_interned_symbol
 11149 00008588 7440                    	je .L_interned_symbol
 11150 0000858A 80FA42                          cmp dl, T_uninterned_symbol
 11151 0000858D 7443                            je .L_uninterned_symbol
 11152 0000858F 80FA13                  	cmp dl, T_real
 11153 00008592 742E                    	je .L_real
 11154 00008594 80FA12                  	cmp dl, T_fraction
 11155 00008597 7413                    	je .L_fraction
 11156 00008599 80FA11                          cmp dl, T_integer
 11157 0000859C 7402                            je .L_integer
 11158 0000859E EB52                    	jmp .L_eq_false
 11159                                  .L_integer:
 11160 000085A0 488B4601                        mov rax, qword [rsi + 1]
 11161 000085A4 483B4701                        cmp rax, qword [rdi + 1]
 11162 000085A8 7548                            jne .L_eq_false
 11163 000085AA EB3A                            jmp .L_eq_true
 11164                                  .L_fraction:
 11165 000085AC 488B4601                	mov rax, qword [rsi + 1]
 11166 000085B0 483B4701                	cmp rax, qword [rdi + 1]
 11167 000085B4 753C                    	jne .L_eq_false
 11168 000085B6 488B4609                	mov rax, qword [rsi + 1 + 8]
 11169 000085BA 483B4709                	cmp rax, qword [rdi + 1 + 8]
 11170 000085BE 7532                    	jne .L_eq_false
 11171 000085C0 EB24                    	jmp .L_eq_true
 11172                                  .L_real:
 11173 000085C2 488B4601                	mov rax, qword [rsi + 1]
 11174 000085C6 483B4701                	cmp rax, qword [rdi + 1]
 11175                                  .L_interned_symbol:
 11176                                  	; never reached, because interned_symbols are static!
 11177                                  	; but I'm keeping it in case, I'll ever change
 11178                                  	; the implementation
 11179 000085CA 488B4601                	mov rax, qword [rsi + 1]
 11180 000085CE 483B4701                	cmp rax, qword [rdi + 1]
 11181                                  .L_uninterned_symbol:
 11182 000085D2 4C8B4701                        mov r8, qword [rdi + 1]
 11183 000085D6 4C3B4601                        cmp r8, qword [rsi + 1]
 11184 000085DA 7516                            jne .L_eq_false
 11185 000085DC EB08                            jmp .L_eq_true
 11186                                  .L_char:
 11187 000085DE 8A5E01                  	mov bl, byte [rsi + 1]
 11188 000085E1 3A5F01                  	cmp bl, byte [rdi + 1]
 11189 000085E4 750C                    	jne .L_eq_false
 11190                                  .L_eq_true:
 11191 000085E6 48B8-                   	mov rax, sob_boolean_true
 11191 000085E8 [0300000000000000] 
 11192 000085F0 EB0A                    	jmp .L_eq_exit
 11193                                  .L_eq_false:
 11194 000085F2 48B8-                   	mov rax, sob_boolean_false
 11194 000085F4 [0200000000000000] 
 11195                                  .L_eq_exit:
 11196 000085FC C9                      	leave
 11197 000085FD C22000                  	ret AND_KILL_FRAME(2)
 11198                                  
 11199                                  make_real:
 11200 00008600 C8000000                        enter 0, 0
 11201 00008604 BF09000000                      mov rdi, (1 + 8)
 11202 00008609 E8B4E3FFFF                      call malloc
 11203 0000860E C60013                          mov byte [rax], T_real
 11204 00008611 F20F114001                      movsd qword [rax + 1], xmm0
 11205 00008616 C9                              leave 
 11206 00008617 C3                              ret
 11207                                          
 11208                                  make_integer:
 11209 00008618 C8000000                        enter 0, 0
 11210 0000861C 4889FE                          mov rsi, rdi
 11211 0000861F BF09000000                      mov rdi, (1 + 8)
 11212 00008624 E899E3FFFF                      call malloc
 11213 00008629 C60011                          mov byte [rax], T_integer
 11214 0000862C 48897001                        mov qword [rax + 1], rsi
 11215 00008630 C9                              leave
 11216 00008631 C3                              ret
 11217                                          
 11218                                  L_error_integer_range:
 11219 00008632 488B3C25[00000000]              mov rdi, qword [stderr]
 11220 0000863A 48BE-                           mov rsi, fmt_integer_range
 11220 0000863C [7810000000000000] 
 11221 00008644 B800000000                      mov rax, 0
 11222                                          ENTER
    44 00008649 C8000000            <1>  enter 0, 0
    45 0000864D 4883E4F0            <1>  and rsp, ~15
 11223 00008651 E8(00000000)                    call fprintf
 11224                                          LEAVE
    49 00008656 C9                  <1>  leave
 11225 00008657 48C7C0FBFFFFFF                  mov rax, -5
 11226 0000865E E8(00000000)                    call exit
 11227                                  
 11228                                  L_error_arg_negative:
 11229 00008663 488B3C25[00000000]              mov rdi, qword [stderr]
 11230 0000866B 48BE-                           mov rsi, fmt_arg_negative
 11230 0000866D [500F000000000000] 
 11231 00008675 B800000000                      mov rax, 0
 11232                                          ENTER
    44 0000867A C8000000            <1>  enter 0, 0
    45 0000867E 4883E4F0            <1>  and rsp, ~15
 11233 00008682 E8(00000000)                    call fprintf
 11234                                          LEAVE
    49 00008687 C9                  <1>  leave
 11235 00008688 48C7C0FDFFFFFF                  mov rax, -3
 11236 0000868F E8(00000000)                    call exit
 11237                                  
 11238                                  L_error_arg_count_0:
 11239 00008694 488B3C25[00000000]              mov rdi, qword [stderr]
 11240 0000869C 48BE-                           mov rsi, fmt_arg_count_0
 11240 0000869E [760F000000000000] 
 11241 000086A6 488B5518                        mov rdx, COUNT
 11242 000086AA B800000000                      mov rax, 0
 11243                                          ENTER
    44 000086AF C8000000            <1>  enter 0, 0
    45 000086B3 4883E4F0            <1>  and rsp, ~15
 11244 000086B7 E8(00000000)                    call fprintf
 11245                                          LEAVE
    49 000086BC C9                  <1>  leave
 11246 000086BD 48C7C0FDFFFFFF                  mov rax, -3
 11247 000086C4 E8(00000000)                    call exit
 11248                                  
 11249                                  L_error_arg_count_1:
 11250 000086C9 488B3C25[00000000]              mov rdi, qword [stderr]
 11251 000086D1 48BE-                           mov rsi, fmt_arg_count_1
 11251 000086D3 [9E0F000000000000] 
 11252 000086DB 488B5518                        mov rdx, COUNT
 11253 000086DF B800000000                      mov rax, 0
 11254                                          ENTER
    44 000086E4 C8000000            <1>  enter 0, 0
    45 000086E8 4883E4F0            <1>  and rsp, ~15
 11255 000086EC E8(00000000)                    call fprintf
 11256                                          LEAVE
    49 000086F1 C9                  <1>  leave
 11257 000086F2 48C7C0FDFFFFFF                  mov rax, -3
 11258 000086F9 E8(00000000)                    call exit
 11259                                  
 11260                                  L_error_arg_count_2:
 11261 000086FE 488B3C25[00000000]              mov rdi, qword [stderr]
 11262 00008706 48BE-                           mov rsi, fmt_arg_count_2
 11262 00008708 [0410000000000000] 
 11263 00008710 488B5518                        mov rdx, COUNT
 11264 00008714 B800000000                      mov rax, 0
 11265                                          ENTER
    44 00008719 C8000000            <1>  enter 0, 0
    45 0000871D 4883E4F0            <1>  and rsp, ~15
 11266 00008721 E8(00000000)                    call fprintf
 11267                                          LEAVE
    49 00008726 C9                  <1>  leave
 11268 00008727 48C7C0FDFFFFFF                  mov rax, -3
 11269 0000872E E8(00000000)                    call exit
 11270                                  
 11271                                  L_error_arg_count_12:
 11272 00008733 488B3C25[00000000]              mov rdi, qword [stderr]
 11273 0000873B 48BE-                           mov rsi, fmt_arg_count_12
 11273 0000873D [C40F000000000000] 
 11274 00008745 488B5518                        mov rdx, COUNT
 11275 00008749 B800000000                      mov rax, 0
 11276                                          ENTER
    44 0000874E C8000000            <1>  enter 0, 0
    45 00008752 4883E4F0            <1>  and rsp, ~15
 11277 00008756 E8(00000000)                    call fprintf
 11278                                          LEAVE
    49 0000875B C9                  <1>  leave
 11279 0000875C 48C7C0FDFFFFFF                  mov rax, -3
 11280 00008763 E8(00000000)                    call exit
 11281                                  
 11282                                  L_error_arg_count_3:
 11283 00008768 488B3C25[00000000]              mov rdi, qword [stderr]
 11284 00008770 48BE-                           mov rsi, fmt_arg_count_3
 11284 00008772 [2B10000000000000] 
 11285 0000877A 488B5518                        mov rdx, COUNT
 11286 0000877E B800000000                      mov rax, 0
 11287                                          ENTER
    44 00008783 C8000000            <1>  enter 0, 0
    45 00008787 4883E4F0            <1>  and rsp, ~15
 11288 0000878B E8(00000000)                    call fprintf
 11289                                          LEAVE
    49 00008790 C9                  <1>  leave
 11290 00008791 48C7C0FDFFFFFF                  mov rax, -3
 11291 00008798 E8(00000000)                    call exit
 11292                                          
 11293                                  L_error_incorrect_type:
 11294 0000879D 488B3C25[00000000]              mov rdi, qword [stderr]
 11295 000087A5 48BE-                           mov rsi, fmt_type
 11295 000087A7 [5410000000000000] 
 11296 000087AF B800000000                      mov rax, 0
 11297                                          ENTER
    44 000087B4 C8000000            <1>  enter 0, 0
    45 000087B8 4883E4F0            <1>  and rsp, ~15
 11298 000087BC E8(00000000)                    call fprintf
 11299                                          LEAVE
    49 000087C1 C9                  <1>  leave
 11300 000087C2 48C7C0FCFFFFFF                  mov rax, -4
 11301 000087C9 E8(00000000)                    call exit
 11302                                  
 11303                                  L_error_division_by_zero:
 11304 000087CE 488B3C25[00000000]              mov rdi, qword [stderr]
 11305 000087D6 48BE-                           mov rsi, fmt_division_by_zero
 11305 000087D8 [9510000000000000] 
 11306 000087E0 B800000000                      mov rax, 0
 11307                                          ENTER
    44 000087E5 C8000000            <1>  enter 0, 0
    45 000087E9 4883E4F0            <1>  and rsp, ~15
 11308 000087ED E8(00000000)                    call fprintf
 11309                                          LEAVE
    49 000087F2 C9                  <1>  leave
 11310 000087F3 48C7C0F8FFFFFF                  mov rax, -8
 11311 000087FA E8(00000000)                    call exit
 11312                                  
 11313                                  section .data
 11314                                  gensym_count:
 11315 00000F45 0000000000000000                dq 0
 11316                                  fmt_char:
 11317 00000F4D 256300                          db `%c\0`
 11318                                  fmt_arg_negative:
 11319 00000F50 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 11319 00000F59 7267756D656E742063-
 11319 00000F62 616E6E6F7420626520-
 11319 00000F6B 6E656761746976652E-
 11319 00000F74 0A00               
 11320                                  fmt_arg_count_0:
 11321 00000F76 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 11321 00000F7F 74696E67207A65726F-
 11321 00000F88 20617267756D656E74-
 11321 00000F91 732E20466F756E6420-
 11321 00000F9A 25640A00           
 11322                                  fmt_arg_count_1:
 11323 00000F9E 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 11323 00000FA7 74696E67206F6E6520-
 11323 00000FB0 617267756D656E742E-
 11323 00000FB9 20466F756E64202564-
 11323 00000FC2 0A00               
 11324                                  fmt_arg_count_12:
 11325 00000FC4 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 11325 00000FCD 74696E67206F6E6520-
 11325 00000FD6 726571756972656420-
 11325 00000FDF 616E64206F6E65206F-
 11325 00000FE8 7074696F6E616C2061-
 11325 00000FF1 7267756D656E742E20-
 11325 00000FFA 466F756E642025640A-
 11325 00001003 00                 
 11326                                  fmt_arg_count_2:
 11327 00001004 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 11327 0000100D 74696E672074776F20-
 11327 00001016 617267756D656E7473-
 11327 0000101F 2E20466F756E642025-
 11327 00001028 640A00             
 11328                                  fmt_arg_count_3:
 11329 0000102B 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 11329 00001034 74696E672074687265-
 11329 0000103D 6520617267756D656E-
 11329 00001046 74732E20466F756E64-
 11329 0000104F 2025640A00         
 11330                                  fmt_type:
 11331 00001054 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 11331 0000105D 696F6E207061737365-
 11331 00001066 6420696E636F727265-
 11331 0000106F 637420747970650A00 
 11332                                  fmt_integer_range:
 11333 00001078 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 11333 00001081 7265637420696E7465-
 11333 0000108A 6765722072616E6765-
 11333 00001093 0A00               
 11334                                  fmt_division_by_zero:
 11335 00001095 212121204469766973-             db `!!! Division by zero\n\0`
 11335 0000109E 696F6E206279207A65-
 11335 000010A7 726F0A00           
 11336                                  fmt_scheme_error_part_1:
 11337 000010AB 0A2121212054686520-             db `\n!!! The procedure \0`
 11337 000010B4 70726F636564757265-
 11337 000010BD 2000               
 11338                                  fmt_scheme_error_part_2:
 11339 000010BF 2061736B656420746F-             db ` asked to terminate the program\n`
 11339 000010C8 207465726D696E6174-
 11339 000010D1 65207468652070726F-
 11339 000010DA 6772616D0A         
 11340 000010DF 202020207769746820-             db `    with the following message:\n\n\0`
 11340 000010E8 74686520666F6C6C6F-
 11340 000010F1 77696E67206D657373-
 11340 000010FA 6167653A0A0A00     
 11341                                  fmt_scheme_error_part_3:
 11342 00001101 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 11342 0000110A 210A0A00           
