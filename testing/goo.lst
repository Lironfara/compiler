     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RBP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "boolean-false?"
   441 0000056E 0E00000000000000        	dq 14
   442 00000576 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   443 0000057E 66616C73653F            	db 0x66, 0x61, 0x6C, 0x73, 0x65, 0x3F
   444                                  	; L_constants + 1412:
   445 00000584 03                      	db T_string	; "boolean-true?"
   446 00000585 0D00000000000000        	dq 13
   447 0000058D 626F6F6C65616E2D        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x2D
   448 00000595 747275653F              	db 0x74, 0x72, 0x75, 0x65, 0x3F
   449                                  	; L_constants + 1434:
   450 0000059A 03                      	db T_string	; "primitive?"
   451 0000059B 0A00000000000000        	dq 10
   452 000005A3 7072696D69746976        	db 0x70, 0x72, 0x69, 0x6D, 0x69, 0x74, 0x69, 0x76
   453 000005AB 653F                    	db 0x65, 0x3F
   454                                  	; L_constants + 1453:
   455 000005AD 03                      	db T_string	; "length"
   456 000005AE 0600000000000000        	dq 6
   457 000005B6 6C656E677468            	db 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   458                                  	; L_constants + 1468:
   459 000005BC 03                      	db T_string	; "make-list"
   460 000005BD 0900000000000000        	dq 9
   461 000005C5 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   462 000005CD 74                      	db 0x74
   463                                  	; L_constants + 1486:
   464 000005CE 03                      	db T_string	; "return"
   465 000005CF 0600000000000000        	dq 6
   466 000005D7 72657475726E            	db 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E
   467                                  	; L_constants + 1501:
   468 000005DD 03                      	db T_string	; "caar"
   469 000005DE 0400000000000000        	dq 4
   470 000005E6 63616172                	db 0x63, 0x61, 0x61, 0x72
   471                                  	; L_constants + 1514:
   472 000005EA 03                      	db T_string	; "cadr"
   473 000005EB 0400000000000000        	dq 4
   474 000005F3 63616472                	db 0x63, 0x61, 0x64, 0x72
   475                                  	; L_constants + 1527:
   476 000005F7 03                      	db T_string	; "cdar"
   477 000005F8 0400000000000000        	dq 4
   478 00000600 63646172                	db 0x63, 0x64, 0x61, 0x72
   479                                  	; L_constants + 1540:
   480 00000604 03                      	db T_string	; "cddr"
   481 00000605 0400000000000000        	dq 4
   482 0000060D 63646472                	db 0x63, 0x64, 0x64, 0x72
   483                                  	; L_constants + 1553:
   484 00000611 03                      	db T_string	; "caaar"
   485 00000612 0500000000000000        	dq 5
   486 0000061A 6361616172              	db 0x63, 0x61, 0x61, 0x61, 0x72
   487                                  	; L_constants + 1567:
   488 0000061F 03                      	db T_string	; "caadr"
   489 00000620 0500000000000000        	dq 5
   490 00000628 6361616472              	db 0x63, 0x61, 0x61, 0x64, 0x72
   491                                  	; L_constants + 1581:
   492 0000062D 03                      	db T_string	; "cadar"
   493 0000062E 0500000000000000        	dq 5
   494 00000636 6361646172              	db 0x63, 0x61, 0x64, 0x61, 0x72
   495                                  	; L_constants + 1595:
   496 0000063B 03                      	db T_string	; "caddr"
   497 0000063C 0500000000000000        	dq 5
   498 00000644 6361646472              	db 0x63, 0x61, 0x64, 0x64, 0x72
   499                                  	; L_constants + 1609:
   500 00000649 03                      	db T_string	; "cdaar"
   501 0000064A 0500000000000000        	dq 5
   502 00000652 6364616172              	db 0x63, 0x64, 0x61, 0x61, 0x72
   503                                  	; L_constants + 1623:
   504 00000657 03                      	db T_string	; "cdadr"
   505 00000658 0500000000000000        	dq 5
   506 00000660 6364616472              	db 0x63, 0x64, 0x61, 0x64, 0x72
   507                                  	; L_constants + 1637:
   508 00000665 03                      	db T_string	; "cddar"
   509 00000666 0500000000000000        	dq 5
   510 0000066E 6364646172              	db 0x63, 0x64, 0x64, 0x61, 0x72
   511                                  	; L_constants + 1651:
   512 00000673 03                      	db T_string	; "cdddr"
   513 00000674 0500000000000000        	dq 5
   514 0000067C 6364646472              	db 0x63, 0x64, 0x64, 0x64, 0x72
   515                                  	; L_constants + 1665:
   516 00000681 03                      	db T_string	; "caaaar"
   517 00000682 0600000000000000        	dq 6
   518 0000068A 636161616172            	db 0x63, 0x61, 0x61, 0x61, 0x61, 0x72
   519                                  	; L_constants + 1680:
   520 00000690 03                      	db T_string	; "caaadr"
   521 00000691 0600000000000000        	dq 6
   522 00000699 636161616472            	db 0x63, 0x61, 0x61, 0x61, 0x64, 0x72
   523                                  	; L_constants + 1695:
   524 0000069F 03                      	db T_string	; "caadar"
   525 000006A0 0600000000000000        	dq 6
   526 000006A8 636161646172            	db 0x63, 0x61, 0x61, 0x64, 0x61, 0x72
   527                                  	; L_constants + 1710:
   528 000006AE 03                      	db T_string	; "caaddr"
   529 000006AF 0600000000000000        	dq 6
   530 000006B7 636161646472            	db 0x63, 0x61, 0x61, 0x64, 0x64, 0x72
   531                                  	; L_constants + 1725:
   532 000006BD 03                      	db T_string	; "cadaar"
   533 000006BE 0600000000000000        	dq 6
   534 000006C6 636164616172            	db 0x63, 0x61, 0x64, 0x61, 0x61, 0x72
   535                                  	; L_constants + 1740:
   536 000006CC 03                      	db T_string	; "cadadr"
   537 000006CD 0600000000000000        	dq 6
   538 000006D5 636164616472            	db 0x63, 0x61, 0x64, 0x61, 0x64, 0x72
   539                                  	; L_constants + 1755:
   540 000006DB 03                      	db T_string	; "caddar"
   541 000006DC 0600000000000000        	dq 6
   542 000006E4 636164646172            	db 0x63, 0x61, 0x64, 0x64, 0x61, 0x72
   543                                  	; L_constants + 1770:
   544 000006EA 03                      	db T_string	; "cadddr"
   545 000006EB 0600000000000000        	dq 6
   546 000006F3 636164646472            	db 0x63, 0x61, 0x64, 0x64, 0x64, 0x72
   547                                  	; L_constants + 1785:
   548 000006F9 03                      	db T_string	; "cdaaar"
   549 000006FA 0600000000000000        	dq 6
   550 00000702 636461616172            	db 0x63, 0x64, 0x61, 0x61, 0x61, 0x72
   551                                  	; L_constants + 1800:
   552 00000708 03                      	db T_string	; "cdaadr"
   553 00000709 0600000000000000        	dq 6
   554 00000711 636461616472            	db 0x63, 0x64, 0x61, 0x61, 0x64, 0x72
   555                                  	; L_constants + 1815:
   556 00000717 03                      	db T_string	; "cdadar"
   557 00000718 0600000000000000        	dq 6
   558 00000720 636461646172            	db 0x63, 0x64, 0x61, 0x64, 0x61, 0x72
   559                                  	; L_constants + 1830:
   560 00000726 03                      	db T_string	; "cdaddr"
   561 00000727 0600000000000000        	dq 6
   562 0000072F 636461646472            	db 0x63, 0x64, 0x61, 0x64, 0x64, 0x72
   563                                  	; L_constants + 1845:
   564 00000735 03                      	db T_string	; "cddaar"
   565 00000736 0600000000000000        	dq 6
   566 0000073E 636464616172            	db 0x63, 0x64, 0x64, 0x61, 0x61, 0x72
   567                                  	; L_constants + 1860:
   568 00000744 03                      	db T_string	; "cddadr"
   569 00000745 0600000000000000        	dq 6
   570 0000074D 636464616472            	db 0x63, 0x64, 0x64, 0x61, 0x64, 0x72
   571                                  	; L_constants + 1875:
   572 00000753 03                      	db T_string	; "cdddar"
   573 00000754 0600000000000000        	dq 6
   574 0000075C 636464646172            	db 0x63, 0x64, 0x64, 0x64, 0x61, 0x72
   575                                  	; L_constants + 1890:
   576 00000762 03                      	db T_string	; "cddddr"
   577 00000763 0600000000000000        	dq 6
   578 0000076B 636464646472            	db 0x63, 0x64, 0x64, 0x64, 0x64, 0x72
   579                                  	; L_constants + 1905:
   580 00000771 03                      	db T_string	; "list?"
   581 00000772 0500000000000000        	dq 5
   582 0000077A 6C6973743F              	db 0x6C, 0x69, 0x73, 0x74, 0x3F
   583                                  	; L_constants + 1919:
   584 0000077F 03                      	db T_string	; "list"
   585 00000780 0400000000000000        	dq 4
   586 00000788 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   587                                  	; L_constants + 1932:
   588 0000078C 03                      	db T_string	; "not"
   589 0000078D 0300000000000000        	dq 3
   590 00000795 6E6F74                  	db 0x6E, 0x6F, 0x74
   591                                  	; L_constants + 1944:
   592 00000798 03                      	db T_string	; "rational?"
   593 00000799 0900000000000000        	dq 9
   594 000007A1 726174696F6E616C        	db 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C
   595 000007A9 3F                      	db 0x3F
   596                                  	; L_constants + 1962:
   597 000007AA 03                      	db T_string	; "list*"
   598 000007AB 0500000000000000        	dq 5
   599 000007B3 6C6973742A              	db 0x6C, 0x69, 0x73, 0x74, 0x2A
   600                                  	; L_constants + 1976:
   601 000007B8 03                      	db T_string	; "whatever"
   602 000007B9 0800000000000000        	dq 8
   603 000007C1 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
   604                                  	; L_constants + 1993:
   605 000007C9 41                      	db T_interned_symbol	; whatever
   606 000007CA [B807000000000000]      	dq L_constants + 1976
   607                                  	; L_constants + 2002:
   608 000007D2 03                      	db T_string	; "apply"
   609 000007D3 0500000000000000        	dq 5
   610 000007DB 6170706C79              	db 0x61, 0x70, 0x70, 0x6C, 0x79
   611                                  	; L_constants + 2016:
   612 000007E0 03                      	db T_string	; "ormap"
   613 000007E1 0500000000000000        	dq 5
   614 000007E9 6F726D6170              	db 0x6F, 0x72, 0x6D, 0x61, 0x70
   615                                  	; L_constants + 2030:
   616 000007EE 03                      	db T_string	; "map"
   617 000007EF 0300000000000000        	dq 3
   618 000007F7 6D6170                  	db 0x6D, 0x61, 0x70
   619                                  	; L_constants + 2042:
   620 000007FA 03                      	db T_string	; "andmap"
   621 000007FB 0600000000000000        	dq 6
   622 00000803 616E646D6170            	db 0x61, 0x6E, 0x64, 0x6D, 0x61, 0x70
   623                                  	; L_constants + 2057:
   624 00000809 03                      	db T_string	; "reverse"
   625 0000080A 0700000000000000        	dq 7
   626 00000812 72657665727365          	db 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   627                                  	; L_constants + 2073:
   628 00000819 03                      	db T_string	; "fold-left"
   629 0000081A 0900000000000000        	dq 9
   630 00000822 666F6C642D6C6566        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x6C, 0x65, 0x66
   631 0000082A 74                      	db 0x74
   632                                  	; L_constants + 2091:
   633 0000082B 03                      	db T_string	; "append"
   634 0000082C 0600000000000000        	dq 6
   635 00000834 617070656E64            	db 0x61, 0x70, 0x70, 0x65, 0x6E, 0x64
   636                                  	; L_constants + 2106:
   637 0000083A 03                      	db T_string	; "fold-right"
   638 0000083B 0A00000000000000        	dq 10
   639 00000843 666F6C642D726967        	db 0x66, 0x6F, 0x6C, 0x64, 0x2D, 0x72, 0x69, 0x67
   640 0000084B 6874                    	db 0x68, 0x74
   641                                  	; L_constants + 2125:
   642 0000084D 03                      	db T_string	; "+"
   643 0000084E 0100000000000000        	dq 1
   644 00000856 2B                      	db 0x2B
   645                                  	; L_constants + 2135:
   646 00000857 11                      	db T_integer	; 0
   647 00000858 0000000000000000        	dq 0
   648                                  	; L_constants + 2144:
   649 00000860 03                      	db T_string	; "__bin_integer_to_fr...
   650 00000861 1900000000000000        	dq 25
   651 00000869 5F5F62696E5F696E        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x5F, 0x69, 0x6E
   652 00000871 74656765725F746F        	db 0x74, 0x65, 0x67, 0x65, 0x72, 0x5F, 0x74, 0x6F
   653 00000879 5F6672616374696F        	db 0x5F, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F
   654 00000881 6E                      	db 0x6E
   655                                  	; L_constants + 2178:
   656 00000882 41                      	db T_interned_symbol	; +
   657 00000883 [4D08000000000000]      	dq L_constants + 2125
   658                                  	; L_constants + 2187:
   659 0000088B 03                      	db T_string	; "all arguments need ...
   660 0000088C 2000000000000000        	dq 32
   661 00000894 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
   662 0000089C 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
   663 000008A4 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   664 000008AC 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   665                                  	; L_constants + 2228:
   666 000008B4 03                      	db T_string	; "-"
   667 000008B5 0100000000000000        	dq 1
   668 000008BD 2D                      	db 0x2D
   669                                  	; L_constants + 2238:
   670 000008BE 03                      	db T_string	; "real"
   671 000008BF 0400000000000000        	dq 4
   672 000008C7 7265616C                	db 0x72, 0x65, 0x61, 0x6C
   673                                  	; L_constants + 2251:
   674 000008CB 41                      	db T_interned_symbol	; -
   675 000008CC [B408000000000000]      	dq L_constants + 2228
   676                                  	; L_constants + 2260:
   677 000008D4 03                      	db T_string	; "*"
   678 000008D5 0100000000000000        	dq 1
   679 000008DD 2A                      	db 0x2A
   680                                  	; L_constants + 2270:
   681 000008DE 11                      	db T_integer	; 1
   682 000008DF 0100000000000000        	dq 1
   683                                  	; L_constants + 2279:
   684 000008E7 41                      	db T_interned_symbol	; *
   685 000008E8 [D408000000000000]      	dq L_constants + 2260
   686                                  	; L_constants + 2288:
   687 000008F0 03                      	db T_string	; "/"
   688 000008F1 0100000000000000        	dq 1
   689 000008F9 2F                      	db 0x2F
   690                                  	; L_constants + 2298:
   691 000008FA 41                      	db T_interned_symbol	; /
   692 000008FB [F008000000000000]      	dq L_constants + 2288
   693                                  	; L_constants + 2307:
   694 00000903 03                      	db T_string	; "fact"
   695 00000904 0400000000000000        	dq 4
   696 0000090C 66616374                	db 0x66, 0x61, 0x63, 0x74
   697                                  	; L_constants + 2320:
   698 00000910 03                      	db T_string	; "<"
   699 00000911 0100000000000000        	dq 1
   700 00000919 3C                      	db 0x3C
   701                                  	; L_constants + 2330:
   702 0000091A 03                      	db T_string	; "<="
   703 0000091B 0200000000000000        	dq 2
   704 00000923 3C3D                    	db 0x3C, 0x3D
   705                                  	; L_constants + 2341:
   706 00000925 03                      	db T_string	; ">"
   707 00000926 0100000000000000        	dq 1
   708 0000092E 3E                      	db 0x3E
   709                                  	; L_constants + 2351:
   710 0000092F 03                      	db T_string	; ">="
   711 00000930 0200000000000000        	dq 2
   712 00000938 3E3D                    	db 0x3E, 0x3D
   713                                  	; L_constants + 2362:
   714 0000093A 03                      	db T_string	; "="
   715 0000093B 0100000000000000        	dq 1
   716 00000943 3D                      	db 0x3D
   717                                  	; L_constants + 2372:
   718 00000944 03                      	db T_string	; "generic-comparator"
   719 00000945 1200000000000000        	dq 18
   720 0000094D 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   721 00000955 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   722 0000095D 6F72                    	db 0x6F, 0x72
   723                                  	; L_constants + 2399:
   724 0000095F 41                      	db T_interned_symbol	; generic-comparator
   725 00000960 [4409000000000000]      	dq L_constants + 2372
   726                                  	; L_constants + 2408:
   727 00000968 03                      	db T_string	; "all the arguments m...
   728 00000969 2100000000000000        	dq 33
   729 00000971 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   730 00000979 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   731 00000981 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   732 00000989 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   733 00000991 73                      	db 0x73
   734                                  	; L_constants + 2450:
   735 00000992 03                      	db T_string	; "char<?"
   736 00000993 0600000000000000        	dq 6
   737 0000099B 636861723C3F            	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3F
   738                                  	; L_constants + 2465:
   739 000009A1 03                      	db T_string	; "char<=?"
   740 000009A2 0700000000000000        	dq 7
   741 000009AA 636861723C3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3C, 0x3D, 0x3F
   742                                  	; L_constants + 2481:
   743 000009B1 03                      	db T_string	; "char=?"
   744 000009B2 0600000000000000        	dq 6
   745 000009BA 636861723D3F            	db 0x63, 0x68, 0x61, 0x72, 0x3D, 0x3F
   746                                  	; L_constants + 2496:
   747 000009C0 03                      	db T_string	; "char>?"
   748 000009C1 0600000000000000        	dq 6
   749 000009C9 636861723E3F            	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3F
   750                                  	; L_constants + 2511:
   751 000009CF 03                      	db T_string	; "char>=?"
   752 000009D0 0700000000000000        	dq 7
   753 000009D8 636861723E3D3F          	db 0x63, 0x68, 0x61, 0x72, 0x3E, 0x3D, 0x3F
   754                                  	; L_constants + 2527:
   755 000009DF 03                      	db T_string	; "char-downcase"
   756 000009E0 0D00000000000000        	dq 13
   757 000009E8 636861722D646F77        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x64, 0x6F, 0x77
   758 000009F0 6E63617365              	db 0x6E, 0x63, 0x61, 0x73, 0x65
   759                                  	; L_constants + 2549:
   760 000009F5 03                      	db T_string	; "char-upcase"
   761 000009F6 0B00000000000000        	dq 11
   762 000009FE 636861722D757063        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x75, 0x70, 0x63
   763 00000A06 617365                  	db 0x61, 0x73, 0x65
   764                                  	; L_constants + 2569:
   765 00000A09 0241                    	db T_char, 0x41	; #\A
   766                                  	; L_constants + 2571:
   767 00000A0B 025A                    	db T_char, 0x5A	; #\Z
   768                                  	; L_constants + 2573:
   769 00000A0D 0261                    	db T_char, 0x61	; #\a
   770                                  	; L_constants + 2575:
   771 00000A0F 027A                    	db T_char, 0x7A	; #\z
   772                                  	; L_constants + 2577:
   773 00000A11 03                      	db T_string	; "char-ci<?"
   774 00000A12 0900000000000000        	dq 9
   775 00000A1A 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   776 00000A22 3F                      	db 0x3F
   777                                  	; L_constants + 2595:
   778 00000A23 03                      	db T_string	; "char-ci<=?"
   779 00000A24 0A00000000000000        	dq 10
   780 00000A2C 636861722D63693C        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3C
   781 00000A34 3D3F                    	db 0x3D, 0x3F
   782                                  	; L_constants + 2614:
   783 00000A36 03                      	db T_string	; "char-ci=?"
   784 00000A37 0900000000000000        	dq 9
   785 00000A3F 636861722D63693D        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3D
   786 00000A47 3F                      	db 0x3F
   787                                  	; L_constants + 2632:
   788 00000A48 03                      	db T_string	; "char-ci>?"
   789 00000A49 0900000000000000        	dq 9
   790 00000A51 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   791 00000A59 3F                      	db 0x3F
   792                                  	; L_constants + 2650:
   793 00000A5A 03                      	db T_string	; "char-ci>=?"
   794 00000A5B 0A00000000000000        	dq 10
   795 00000A63 636861722D63693E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x63, 0x69, 0x3E
   796 00000A6B 3D3F                    	db 0x3D, 0x3F
   797                                  	; L_constants + 2669:
   798 00000A6D 03                      	db T_string	; "string-downcase"
   799 00000A6E 0F00000000000000        	dq 15
   800 00000A76 737472696E672D64        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x64
   801 00000A7E 6F776E63617365          	db 0x6F, 0x77, 0x6E, 0x63, 0x61, 0x73, 0x65
   802                                  	; L_constants + 2693:
   803 00000A85 03                      	db T_string	; "string-upcase"
   804 00000A86 0D00000000000000        	dq 13
   805 00000A8E 737472696E672D75        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x75
   806 00000A96 7063617365              	db 0x70, 0x63, 0x61, 0x73, 0x65
   807                                  	; L_constants + 2715:
   808 00000A9B 03                      	db T_string	; "list->string"
   809 00000A9C 0C00000000000000        	dq 12
   810 00000AA4 6C6973742D3E7374        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x73, 0x74
   811 00000AAC 72696E67                	db 0x72, 0x69, 0x6E, 0x67
   812                                  	; L_constants + 2736:
   813 00000AB0 03                      	db T_string	; "string->list"
   814 00000AB1 0C00000000000000        	dq 12
   815 00000AB9 737472696E672D3E        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x3E
   816 00000AC1 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   817                                  	; L_constants + 2757:
   818 00000AC5 03                      	db T_string	; "string<?"
   819 00000AC6 0800000000000000        	dq 8
   820 00000ACE 737472696E673C3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3F
   821                                  	; L_constants + 2774:
   822 00000AD6 03                      	db T_string	; "string<=?"
   823 00000AD7 0900000000000000        	dq 9
   824 00000ADF 737472696E673C3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3C, 0x3D
   825 00000AE7 3F                      	db 0x3F
   826                                  	; L_constants + 2792:
   827 00000AE8 03                      	db T_string	; "string=?"
   828 00000AE9 0800000000000000        	dq 8
   829 00000AF1 737472696E673D3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3D, 0x3F
   830                                  	; L_constants + 2809:
   831 00000AF9 03                      	db T_string	; "string>=?"
   832 00000AFA 0900000000000000        	dq 9
   833 00000B02 737472696E673E3D        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3D
   834 00000B0A 3F                      	db 0x3F
   835                                  	; L_constants + 2827:
   836 00000B0B 03                      	db T_string	; "string>?"
   837 00000B0C 0800000000000000        	dq 8
   838 00000B14 737472696E673E3F        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3E, 0x3F
   839                                  	; L_constants + 2844:
   840 00000B1C 03                      	db T_string	; "string-ci<?"
   841 00000B1D 0B00000000000000        	dq 11
   842 00000B25 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   843 00000B2D 693C3F                  	db 0x69, 0x3C, 0x3F
   844                                  	; L_constants + 2864:
   845 00000B30 03                      	db T_string	; "string-ci<=?"
   846 00000B31 0C00000000000000        	dq 12
   847 00000B39 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   848 00000B41 693C3D3F                	db 0x69, 0x3C, 0x3D, 0x3F
   849                                  	; L_constants + 2885:
   850 00000B45 03                      	db T_string	; "string-ci=?"
   851 00000B46 0B00000000000000        	dq 11
   852 00000B4E 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   853 00000B56 693D3F                  	db 0x69, 0x3D, 0x3F
   854                                  	; L_constants + 2905:
   855 00000B59 03                      	db T_string	; "string-ci>=?"
   856 00000B5A 0C00000000000000        	dq 12
   857 00000B62 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   858 00000B6A 693E3D3F                	db 0x69, 0x3E, 0x3D, 0x3F
   859                                  	; L_constants + 2926:
   860 00000B6E 03                      	db T_string	; "string-ci>?"
   861 00000B6F 0B00000000000000        	dq 11
   862 00000B77 737472696E672D63        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x63
   863 00000B7F 693E3F                  	db 0x69, 0x3E, 0x3F
   864                                  	; L_constants + 2946:
   865 00000B82 41                      	db T_interned_symbol	; make-vector
   866 00000B83 [4804000000000000]      	dq L_constants + 1096
   867                                  	; L_constants + 2955:
   868 00000B8B 03                      	db T_string	; "Usage: (make-vector...
   869 00000B8C 2B00000000000000        	dq 43
   870 00000B94 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   871 00000B9C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   872 00000BA4 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   873 00000BAC 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   874 00000BB4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   875 00000BBC 6C7429                  	db 0x6C, 0x74, 0x29
   876                                  	; L_constants + 3007:
   877 00000BBF 41                      	db T_interned_symbol	; make-string
   878 00000BC0 [5C04000000000000]      	dq L_constants + 1116
   879                                  	; L_constants + 3016:
   880 00000BC8 03                      	db T_string	; "Usage: (make-string...
   881 00000BC9 2B00000000000000        	dq 43
   882 00000BD1 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   883 00000BD9 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   884 00000BE1 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   885 00000BE9 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   886 00000BF1 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   887 00000BF9 6C7429                  	db 0x6C, 0x74, 0x29
   888                                  	; L_constants + 3068:
   889 00000BFC 03                      	db T_string	; "list->vector"
   890 00000BFD 0C00000000000000        	dq 12
   891 00000C05 6C6973742D3E7665        	db 0x6C, 0x69, 0x73, 0x74, 0x2D, 0x3E, 0x76, 0x65
   892 00000C0D 63746F72                	db 0x63, 0x74, 0x6F, 0x72
   893                                  	; L_constants + 3089:
   894 00000C11 03                      	db T_string	; "vector"
   895 00000C12 0600000000000000        	dq 6
   896 00000C1A 766563746F72            	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72
   897                                  	; L_constants + 3104:
   898 00000C20 03                      	db T_string	; "vector->list"
   899 00000C21 0C00000000000000        	dq 12
   900 00000C29 766563746F722D3E        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x3E
   901 00000C31 6C697374                	db 0x6C, 0x69, 0x73, 0x74
   902                                  	; L_constants + 3125:
   903 00000C35 03                      	db T_string	; "random"
   904 00000C36 0600000000000000        	dq 6
   905 00000C3E 72616E646F6D            	db 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D
   906                                  	; L_constants + 3140:
   907 00000C44 03                      	db T_string	; "positive?"
   908 00000C45 0900000000000000        	dq 9
   909 00000C4D 706F736974697665        	db 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65
   910 00000C55 3F                      	db 0x3F
   911                                  	; L_constants + 3158:
   912 00000C56 03                      	db T_string	; "negative?"
   913 00000C57 0900000000000000        	dq 9
   914 00000C5F 6E65676174697665        	db 0x6E, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65
   915 00000C67 3F                      	db 0x3F
   916                                  	; L_constants + 3176:
   917 00000C68 03                      	db T_string	; "even?"
   918 00000C69 0500000000000000        	dq 5
   919 00000C71 6576656E3F              	db 0x65, 0x76, 0x65, 0x6E, 0x3F
   920                                  	; L_constants + 3190:
   921 00000C76 11                      	db T_integer	; 2
   922 00000C77 0200000000000000        	dq 2
   923                                  	; L_constants + 3199:
   924 00000C7F 03                      	db T_string	; "odd?"
   925 00000C80 0400000000000000        	dq 4
   926 00000C88 6F64643F                	db 0x6F, 0x64, 0x64, 0x3F
   927                                  	; L_constants + 3212:
   928 00000C8C 03                      	db T_string	; "abs"
   929 00000C8D 0300000000000000        	dq 3
   930 00000C95 616273                  	db 0x61, 0x62, 0x73
   931                                  	; L_constants + 3224:
   932 00000C98 03                      	db T_string	; "equal?"
   933 00000C99 0600000000000000        	dq 6
   934 00000CA1 657175616C3F            	db 0x65, 0x71, 0x75, 0x61, 0x6C, 0x3F
   935                                  	; L_constants + 3239:
   936 00000CA7 03                      	db T_string	; "assoc"
   937 00000CA8 0500000000000000        	dq 5
   938 00000CB0 6173736F63              	db 0x61, 0x73, 0x73, 0x6F, 0x63
   939                                  	; L_constants + 3253:
   940 00000CB5 03                      	db T_string	; "string-append"
   941 00000CB6 0D00000000000000        	dq 13
   942 00000CBE 737472696E672D61        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x61
   943 00000CC6 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   944                                  	; L_constants + 3275:
   945 00000CCB 03                      	db T_string	; "vector-append"
   946 00000CCC 0D00000000000000        	dq 13
   947 00000CD4 766563746F722D61        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x61
   948 00000CDC 7070656E64              	db 0x70, 0x70, 0x65, 0x6E, 0x64
   949                                  	; L_constants + 3297:
   950 00000CE1 03                      	db T_string	; "string-reverse"
   951 00000CE2 0E00000000000000        	dq 14
   952 00000CEA 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   953 00000CF2 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   954                                  	; L_constants + 3320:
   955 00000CF8 03                      	db T_string	; "vector-reverse"
   956 00000CF9 0E00000000000000        	dq 14
   957 00000D01 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   958 00000D09 657665727365            	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65
   959                                  	; L_constants + 3343:
   960 00000D0F 03                      	db T_string	; "string-reverse!"
   961 00000D10 0F00000000000000        	dq 15
   962 00000D18 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   963 00000D20 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   964                                  	; L_constants + 3367:
   965 00000D27 03                      	db T_string	; "vector-reverse!"
   966 00000D28 0F00000000000000        	dq 15
   967 00000D30 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   968 00000D38 65766572736521          	db 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x21
   969                                  	; L_constants + 3391:
   970 00000D3F 03                      	db T_string	; "make-list-thunk"
   971 00000D40 0F00000000000000        	dq 15
   972 00000D48 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   973 00000D50 742D7468756E6B          	db 0x74, 0x2D, 0x74, 0x68, 0x75, 0x6E, 0x6B
   974                                  	; L_constants + 3415:
   975 00000D57 03                      	db T_string	; "make-string-thunk"
   976 00000D58 1100000000000000        	dq 17
   977 00000D60 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   978 00000D68 696E672D7468756E        	db 0x69, 0x6E, 0x67, 0x2D, 0x74, 0x68, 0x75, 0x6E
   979 00000D70 6B                      	db 0x6B
   980                                  	; L_constants + 3441:
   981 00000D71 03                      	db T_string	; "make-vector-thunk"
   982 00000D72 1100000000000000        	dq 17
   983 00000D7A 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   984 00000D82 746F722D7468756E        	db 0x74, 0x6F, 0x72, 0x2D, 0x74, 0x68, 0x75, 0x6E
   985 00000D8A 6B                      	db 0x6B
   986                                  	; L_constants + 3467:
   987 00000D8B 03                      	db T_string	; "logarithm"
   988 00000D8C 0900000000000000        	dq 9
   989 00000D94 6C6F676172697468        	db 0x6C, 0x6F, 0x67, 0x61, 0x72, 0x69, 0x74, 0x68
   990 00000D9C 6D                      	db 0x6D
   991                                  	; L_constants + 3485:
   992 00000D9D 13                      	db T_real	; 1.000000
   993 00000D9E 000000000000F03F        	dq 1.000000
   994                                  	; L_constants + 3494:
   995 00000DA6 03                      	db T_string	; "newline"
   996 00000DA7 0700000000000000        	dq 7
   997 00000DAF 6E65776C696E65          	db 0x6E, 0x65, 0x77, 0x6C, 0x69, 0x6E, 0x65
   998                                  	; L_constants + 3510:
   999 00000DB6 020A                    	db T_char, 0x0A	; #\newline
  1000                                  	; L_constants + 3512:
  1001 00000DB8 03                      	db T_string	; "void"
  1002 00000DB9 0400000000000000        	dq 4
  1003 00000DC1 766F6964                	db 0x76, 0x6F, 0x69, 0x64
  1004                                  	; L_constants + 3525:
  1005 00000DC5 03                      	db T_string	; "test"
  1006 00000DC6 0400000000000000        	dq 4
  1007 00000DCE 74657374                	db 0x74, 0x65, 0x73, 0x74
  1008                                  	; L_constants + 3538:
  1009 00000DD2 03                      	db T_string	; "a"
  1010 00000DD3 0100000000000000        	dq 1
  1011 00000DDB 61                      	db 0x61
  1012                                  	; L_constants + 3548:
  1013 00000DDC 41                      	db T_interned_symbol	; a
  1014 00000DDD [D20D000000000000]      	dq L_constants + 3538
  1015                                  	; L_constants + 3557:
  1016 00000DE5 03                      	db T_string	; "b"
  1017 00000DE6 0100000000000000        	dq 1
  1018 00000DEE 62                      	db 0x62
  1019                                  	; L_constants + 3567:
  1020 00000DEF 41                      	db T_interned_symbol	; b
  1021 00000DF0 [E50D000000000000]      	dq L_constants + 3557
  1022                                  	; L_constants + 3576:
  1023 00000DF8 03                      	db T_string	; "c"
  1024 00000DF9 0100000000000000        	dq 1
  1025 00000E01 63                      	db 0x63
  1026                                  	; L_constants + 3586:
  1027 00000E02 41                      	db T_interned_symbol	; c
  1028 00000E03 [F80D000000000000]      	dq L_constants + 3576
  1029                                  	; L_constants + 3595:
  1030 00000E0B 03                      	db T_string	; "d"
  1031 00000E0C 0100000000000000        	dq 1
  1032 00000E14 64                      	db 0x64
  1033                                  	; L_constants + 3605:
  1034 00000E15 41                      	db T_interned_symbol	; d
  1035 00000E16 [0B0E000000000000]      	dq L_constants + 3595
  1036                                  	; L_constants + 3614:
  1037 00000E1E 03                      	db T_string	; "e"
  1038 00000E1F 0100000000000000        	dq 1
  1039 00000E27 65                      	db 0x65
  1040                                  	; L_constants + 3624:
  1041 00000E28 41                      	db T_interned_symbol	; e
  1042 00000E29 [1E0E000000000000]      	dq L_constants + 3614
  1043                                  	; L_constants + 3633:
  1044 00000E31 03                      	db T_string	; "f"
  1045 00000E32 0100000000000000        	dq 1
  1046 00000E3A 66                      	db 0x66
  1047                                  	; L_constants + 3643:
  1048 00000E3B 41                      	db T_interned_symbol	; f
  1049 00000E3C [310E000000000000]      	dq L_constants + 3633
  1050                                  	; L_constants + 3652:
  1051 00000E44 03                      	db T_string	; "g"
  1052 00000E45 0100000000000000        	dq 1
  1053 00000E4D 67                      	db 0x67
  1054                                  	; L_constants + 3662:
  1055 00000E4E 41                      	db T_interned_symbol	; g
  1056 00000E4F [440E000000000000]      	dq L_constants + 3652
  1057                                  	; L_constants + 3671:
  1058 00000E57 03                      	db T_string	; "h"
  1059 00000E58 0100000000000000        	dq 1
  1060 00000E60 68                      	db 0x68
  1061                                  	; L_constants + 3681:
  1062 00000E61 41                      	db T_interned_symbol	; h
  1063 00000E62 [570E000000000000]      	dq L_constants + 3671
  1064                                  	; L_constants + 3690:
  1065 00000E6A 03                      	db T_string	; "i"
  1066 00000E6B 0100000000000000        	dq 1
  1067 00000E73 69                      	db 0x69
  1068                                  	; L_constants + 3700:
  1069 00000E74 41                      	db T_interned_symbol	; i
  1070 00000E75 [6A0E000000000000]      	dq L_constants + 3690
  1071                                  	; L_constants + 3709:
  1072 00000E7D 03                      	db T_string	; "j"
  1073 00000E7E 0100000000000000        	dq 1
  1074 00000E86 6A                      	db 0x6A
  1075                                  	; L_constants + 3719:
  1076 00000E87 41                      	db T_interned_symbol	; j
  1077 00000E88 [7D0E000000000000]      	dq L_constants + 3709
  1078                                  	; L_constants + 3728:
  1079 00000E90 21                      	db T_pair	; (j)
  1080 00000E91 [870E000000000000]-     	dq L_constants + 3719, L_constants + 1
  1080 00000E99 [0100000000000000] 
  1081                                  	; L_constants + 3745:
  1082 00000EA1 21                      	db T_pair	; (i j)
  1083 00000EA2 [740E000000000000]-     	dq L_constants + 3700, L_constants + 3728
  1083 00000EAA [900E000000000000] 
  1084                                  	; L_constants + 3762:
  1085 00000EB2 21                      	db T_pair	; (h i j)
  1086 00000EB3 [610E000000000000]-     	dq L_constants + 3681, L_constants + 3745
  1086 00000EBB [A10E000000000000] 
  1087                                  	; L_constants + 3779:
  1088 00000EC3 21                      	db T_pair	; (g h i j)
  1089 00000EC4 [4E0E000000000000]-     	dq L_constants + 3662, L_constants + 3762
  1089 00000ECC [B20E000000000000] 
  1090                                  	; L_constants + 3796:
  1091 00000ED4 21                      	db T_pair	; (f g h i j)
  1092 00000ED5 [3B0E000000000000]-     	dq L_constants + 3643, L_constants + 3779
  1092 00000EDD [C30E000000000000] 
  1093                                  	; L_constants + 3813:
  1094 00000EE5 21                      	db T_pair	; (e f g h i j)
  1095 00000EE6 [280E000000000000]-     	dq L_constants + 3624, L_constants + 3796
  1095 00000EEE [D40E000000000000] 
  1096                                  	; L_constants + 3830:
  1097 00000EF6 21                      	db T_pair	; (d e f g h i j)
  1098 00000EF7 [150E000000000000]-     	dq L_constants + 3605, L_constants + 3813
  1098 00000EFF [E50E000000000000] 
  1099                                  	; L_constants + 3847:
  1100 00000F07 21                      	db T_pair	; (c d e f g h i j)
  1101 00000F08 [020E000000000000]-     	dq L_constants + 3586, L_constants + 3830
  1101 00000F10 [F60E000000000000] 
  1102                                  	; L_constants + 3864:
  1103 00000F18 21                      	db T_pair	; (b c d e f g h i j)
  1104 00000F19 [EF0D000000000000]-     	dq L_constants + 3567, L_constants + 3847
  1104 00000F21 [070F000000000000] 
  1105                                  	; L_constants + 3881:
  1106 00000F29 21                      	db T_pair	; (a b c d e f g h i j...
  1107 00000F2A [DC0D000000000000]-     	dq L_constants + 3548, L_constants + 3864
  1107 00000F32 [180F000000000000] 
  1108                                  free_var_0:	; location of *
  1109 00000F3A [420F000000000000]      	dq .undefined_object
  1110                                  .undefined_object:
  1111 00000F42 05                      	db T_undefined
  1112 00000F43 [D408000000000000]      	dq L_constants + 2260
  1113                                  
  1114                                  free_var_1:	; location of +
  1115 00000F4B [530F000000000000]      	dq .undefined_object
  1116                                  .undefined_object:
  1117 00000F53 05                      	db T_undefined
  1118 00000F54 [4D08000000000000]      	dq L_constants + 2125
  1119                                  
  1120                                  free_var_2:	; location of -
  1121 00000F5C [640F000000000000]      	dq .undefined_object
  1122                                  .undefined_object:
  1123 00000F64 05                      	db T_undefined
  1124 00000F65 [B408000000000000]      	dq L_constants + 2228
  1125                                  
  1126                                  free_var_3:	; location of /
  1127 00000F6D [750F000000000000]      	dq .undefined_object
  1128                                  .undefined_object:
  1129 00000F75 05                      	db T_undefined
  1130 00000F76 [F008000000000000]      	dq L_constants + 2288
  1131                                  
  1132                                  free_var_4:	; location of <
  1133 00000F7E [860F000000000000]      	dq .undefined_object
  1134                                  .undefined_object:
  1135 00000F86 05                      	db T_undefined
  1136 00000F87 [1009000000000000]      	dq L_constants + 2320
  1137                                  
  1138                                  free_var_5:	; location of <=
  1139 00000F8F [970F000000000000]      	dq .undefined_object
  1140                                  .undefined_object:
  1141 00000F97 05                      	db T_undefined
  1142 00000F98 [1A09000000000000]      	dq L_constants + 2330
  1143                                  
  1144                                  free_var_6:	; location of =
  1145 00000FA0 [A80F000000000000]      	dq .undefined_object
  1146                                  .undefined_object:
  1147 00000FA8 05                      	db T_undefined
  1148 00000FA9 [3A09000000000000]      	dq L_constants + 2362
  1149                                  
  1150                                  free_var_7:	; location of >
  1151 00000FB1 [B90F000000000000]      	dq .undefined_object
  1152                                  .undefined_object:
  1153 00000FB9 05                      	db T_undefined
  1154 00000FBA [2509000000000000]      	dq L_constants + 2341
  1155                                  
  1156                                  free_var_8:	; location of >=
  1157 00000FC2 [CA0F000000000000]      	dq .undefined_object
  1158                                  .undefined_object:
  1159 00000FCA 05                      	db T_undefined
  1160 00000FCB [2F09000000000000]      	dq L_constants + 2351
  1161                                  
  1162                                  free_var_9:	; location of __bin-add-qq
  1163 00000FD3 [DB0F000000000000]      	dq .undefined_object
  1164                                  .undefined_object:
  1165 00000FDB 05                      	db T_undefined
  1166 00000FDC [6902000000000000]      	dq L_constants + 617
  1167                                  
  1168                                  free_var_10:	; location of __bin-add-rr
  1169 00000FE4 [EC0F000000000000]      	dq .undefined_object
  1170                                  .undefined_object:
  1171 00000FEC 05                      	db T_undefined
  1172 00000FED [1502000000000000]      	dq L_constants + 533
  1173                                  
  1174                                  free_var_11:	; location of __bin-add-zz
  1175 00000FF5 [FD0F000000000000]      	dq .undefined_object
  1176                                  .undefined_object:
  1177 00000FFD 05                      	db T_undefined
  1178 00000FFE [BD02000000000000]      	dq L_constants + 701
  1179                                  
  1180                                  free_var_12:	; location of __bin-apply
  1181 00001006 [0E10000000000000]      	dq .undefined_object
  1182                                  .undefined_object:
  1183 0000100E 05                      	db T_undefined
  1184 0000100F [0102000000000000]      	dq L_constants + 513
  1185                                  
  1186                                  free_var_13:	; location of __bin-div-qq
  1187 00001017 [1F10000000000000]      	dq .undefined_object
  1188                                  .undefined_object:
  1189 0000101F 05                      	db T_undefined
  1190 00001020 [A802000000000000]      	dq L_constants + 680
  1191                                  
  1192                                  free_var_14:	; location of __bin-div-rr
  1193 00001028 [3010000000000000]      	dq .undefined_object
  1194                                  .undefined_object:
  1195 00001030 05                      	db T_undefined
  1196 00001031 [5402000000000000]      	dq L_constants + 596
  1197                                  
  1198                                  free_var_15:	; location of __bin-div-zz
  1199 00001039 [4110000000000000]      	dq .undefined_object
  1200                                  .undefined_object:
  1201 00001041 05                      	db T_undefined
  1202 00001042 [FC02000000000000]      	dq L_constants + 764
  1203                                  
  1204                                  free_var_16:	; location of __bin-equal-qq
  1205 0000104A [5210000000000000]      	dq .undefined_object
  1206                                  .undefined_object:
  1207 00001052 05                      	db T_undefined
  1208 00001053 [8703000000000000]      	dq L_constants + 903
  1209                                  
  1210                                  free_var_17:	; location of __bin-equal-rr
  1211 0000105B [6310000000000000]      	dq .undefined_object
  1212                                  .undefined_object:
  1213 00001063 05                      	db T_undefined
  1214 00001064 [7003000000000000]      	dq L_constants + 880
  1215                                  
  1216                                  free_var_18:	; location of __bin-equal-zz
  1217 0000106C [7410000000000000]      	dq .undefined_object
  1218                                  .undefined_object:
  1219 00001074 05                      	db T_undefined
  1220 00001075 [9E03000000000000]      	dq L_constants + 926
  1221                                  
  1222                                  free_var_19:	; location of __bin-less-than-qq
  1223 0000107D [8510000000000000]      	dq .undefined_object
  1224                                  .undefined_object:
  1225 00001085 05                      	db T_undefined
  1226 00001086 [3A03000000000000]      	dq L_constants + 826
  1227                                  
  1228                                  free_var_20:	; location of __bin-less-than-rr
  1229 0000108E [9610000000000000]      	dq .undefined_object
  1230                                  .undefined_object:
  1231 00001096 05                      	db T_undefined
  1232 00001097 [1F03000000000000]      	dq L_constants + 799
  1233                                  
  1234                                  free_var_21:	; location of __bin-less-than-zz
  1235 0000109F [A710000000000000]      	dq .undefined_object
  1236                                  .undefined_object:
  1237 000010A7 05                      	db T_undefined
  1238 000010A8 [5503000000000000]      	dq L_constants + 853
  1239                                  
  1240                                  free_var_22:	; location of __bin-mul-qq
  1241 000010B0 [B810000000000000]      	dq .undefined_object
  1242                                  .undefined_object:
  1243 000010B8 05                      	db T_undefined
  1244 000010B9 [9302000000000000]      	dq L_constants + 659
  1245                                  
  1246                                  free_var_23:	; location of __bin-mul-rr
  1247 000010C1 [C910000000000000]      	dq .undefined_object
  1248                                  .undefined_object:
  1249 000010C9 05                      	db T_undefined
  1250 000010CA [3F02000000000000]      	dq L_constants + 575
  1251                                  
  1252                                  free_var_24:	; location of __bin-mul-zz
  1253 000010D2 [DA10000000000000]      	dq .undefined_object
  1254                                  .undefined_object:
  1255 000010DA 05                      	db T_undefined
  1256 000010DB [E702000000000000]      	dq L_constants + 743
  1257                                  
  1258                                  free_var_25:	; location of __bin-sub-qq
  1259 000010E3 [EB10000000000000]      	dq .undefined_object
  1260                                  .undefined_object:
  1261 000010EB 05                      	db T_undefined
  1262 000010EC [7E02000000000000]      	dq L_constants + 638
  1263                                  
  1264                                  free_var_26:	; location of __bin-sub-rr
  1265 000010F4 [FC10000000000000]      	dq .undefined_object
  1266                                  .undefined_object:
  1267 000010FC 05                      	db T_undefined
  1268 000010FD [2A02000000000000]      	dq L_constants + 554
  1269                                  
  1270                                  free_var_27:	; location of __bin-sub-zz
  1271 00001105 [0D11000000000000]      	dq .undefined_object
  1272                                  .undefined_object:
  1273 0000110D 05                      	db T_undefined
  1274 0000110E [D202000000000000]      	dq L_constants + 722
  1275                                  
  1276                                  free_var_28:	; location of __bin_integer_to_fraction
  1277 00001116 [1E11000000000000]      	dq .undefined_object
  1278                                  .undefined_object:
  1279 0000111E 05                      	db T_undefined
  1280 0000111F [6008000000000000]      	dq L_constants + 2144
  1281                                  
  1282                                  free_var_29:	; location of __integer-to-fraction
  1283 00001127 [2F11000000000000]      	dq .undefined_object
  1284                                  .undefined_object:
  1285 0000112F 05                      	db T_undefined
  1286 00001130 [A204000000000000]      	dq L_constants + 1186
  1287                                  
  1288                                  free_var_30:	; location of abs
  1289 00001138 [4011000000000000]      	dq .undefined_object
  1290                                  .undefined_object:
  1291 00001140 05                      	db T_undefined
  1292 00001141 [8C0C000000000000]      	dq L_constants + 3212
  1293                                  
  1294                                  free_var_31:	; location of andmap
  1295 00001149 [5111000000000000]      	dq .undefined_object
  1296                                  .undefined_object:
  1297 00001151 05                      	db T_undefined
  1298 00001152 [FA07000000000000]      	dq L_constants + 2042
  1299                                  
  1300                                  free_var_32:	; location of append
  1301 0000115A [6211000000000000]      	dq .undefined_object
  1302                                  .undefined_object:
  1303 00001162 05                      	db T_undefined
  1304 00001163 [2B08000000000000]      	dq L_constants + 2091
  1305                                  
  1306                                  free_var_33:	; location of apply
  1307 0000116B [7311000000000000]      	dq .undefined_object
  1308                                  .undefined_object:
  1309 00001173 05                      	db T_undefined
  1310 00001174 [D207000000000000]      	dq L_constants + 2002
  1311                                  
  1312                                  free_var_34:	; location of assoc
  1313 0000117C [8411000000000000]      	dq .undefined_object
  1314                                  .undefined_object:
  1315 00001184 05                      	db T_undefined
  1316 00001185 [A70C000000000000]      	dq L_constants + 3239
  1317                                  
  1318                                  free_var_35:	; location of caaaar
  1319 0000118D [9511000000000000]      	dq .undefined_object
  1320                                  .undefined_object:
  1321 00001195 05                      	db T_undefined
  1322 00001196 [8106000000000000]      	dq L_constants + 1665
  1323                                  
  1324                                  free_var_36:	; location of caaadr
  1325 0000119E [A611000000000000]      	dq .undefined_object
  1326                                  .undefined_object:
  1327 000011A6 05                      	db T_undefined
  1328 000011A7 [9006000000000000]      	dq L_constants + 1680
  1329                                  
  1330                                  free_var_37:	; location of caaar
  1331 000011AF [B711000000000000]      	dq .undefined_object
  1332                                  .undefined_object:
  1333 000011B7 05                      	db T_undefined
  1334 000011B8 [1106000000000000]      	dq L_constants + 1553
  1335                                  
  1336                                  free_var_38:	; location of caadar
  1337 000011C0 [C811000000000000]      	dq .undefined_object
  1338                                  .undefined_object:
  1339 000011C8 05                      	db T_undefined
  1340 000011C9 [9F06000000000000]      	dq L_constants + 1695
  1341                                  
  1342                                  free_var_39:	; location of caaddr
  1343 000011D1 [D911000000000000]      	dq .undefined_object
  1344                                  .undefined_object:
  1345 000011D9 05                      	db T_undefined
  1346 000011DA [AE06000000000000]      	dq L_constants + 1710
  1347                                  
  1348                                  free_var_40:	; location of caadr
  1349 000011E2 [EA11000000000000]      	dq .undefined_object
  1350                                  .undefined_object:
  1351 000011EA 05                      	db T_undefined
  1352 000011EB [1F06000000000000]      	dq L_constants + 1567
  1353                                  
  1354                                  free_var_41:	; location of caar
  1355 000011F3 [FB11000000000000]      	dq .undefined_object
  1356                                  .undefined_object:
  1357 000011FB 05                      	db T_undefined
  1358 000011FC [DD05000000000000]      	dq L_constants + 1501
  1359                                  
  1360                                  free_var_42:	; location of cadaar
  1361 00001204 [0C12000000000000]      	dq .undefined_object
  1362                                  .undefined_object:
  1363 0000120C 05                      	db T_undefined
  1364 0000120D [BD06000000000000]      	dq L_constants + 1725
  1365                                  
  1366                                  free_var_43:	; location of cadadr
  1367 00001215 [1D12000000000000]      	dq .undefined_object
  1368                                  .undefined_object:
  1369 0000121D 05                      	db T_undefined
  1370 0000121E [CC06000000000000]      	dq L_constants + 1740
  1371                                  
  1372                                  free_var_44:	; location of cadar
  1373 00001226 [2E12000000000000]      	dq .undefined_object
  1374                                  .undefined_object:
  1375 0000122E 05                      	db T_undefined
  1376 0000122F [2D06000000000000]      	dq L_constants + 1581
  1377                                  
  1378                                  free_var_45:	; location of caddar
  1379 00001237 [3F12000000000000]      	dq .undefined_object
  1380                                  .undefined_object:
  1381 0000123F 05                      	db T_undefined
  1382 00001240 [DB06000000000000]      	dq L_constants + 1755
  1383                                  
  1384                                  free_var_46:	; location of cadddr
  1385 00001248 [5012000000000000]      	dq .undefined_object
  1386                                  .undefined_object:
  1387 00001250 05                      	db T_undefined
  1388 00001251 [EA06000000000000]      	dq L_constants + 1770
  1389                                  
  1390                                  free_var_47:	; location of caddr
  1391 00001259 [6112000000000000]      	dq .undefined_object
  1392                                  .undefined_object:
  1393 00001261 05                      	db T_undefined
  1394 00001262 [3B06000000000000]      	dq L_constants + 1595
  1395                                  
  1396                                  free_var_48:	; location of cadr
  1397 0000126A [7212000000000000]      	dq .undefined_object
  1398                                  .undefined_object:
  1399 00001272 05                      	db T_undefined
  1400 00001273 [EA05000000000000]      	dq L_constants + 1514
  1401                                  
  1402                                  free_var_49:	; location of car
  1403 0000127B [8312000000000000]      	dq .undefined_object
  1404                                  .undefined_object:
  1405 00001283 05                      	db T_undefined
  1406 00001284 [1501000000000000]      	dq L_constants + 277
  1407                                  
  1408                                  free_var_50:	; location of cdaaar
  1409 0000128C [9412000000000000]      	dq .undefined_object
  1410                                  .undefined_object:
  1411 00001294 05                      	db T_undefined
  1412 00001295 [F906000000000000]      	dq L_constants + 1785
  1413                                  
  1414                                  free_var_51:	; location of cdaadr
  1415 0000129D [A512000000000000]      	dq .undefined_object
  1416                                  .undefined_object:
  1417 000012A5 05                      	db T_undefined
  1418 000012A6 [0807000000000000]      	dq L_constants + 1800
  1419                                  
  1420                                  free_var_52:	; location of cdaar
  1421 000012AE [B612000000000000]      	dq .undefined_object
  1422                                  .undefined_object:
  1423 000012B6 05                      	db T_undefined
  1424 000012B7 [4906000000000000]      	dq L_constants + 1609
  1425                                  
  1426                                  free_var_53:	; location of cdadar
  1427 000012BF [C712000000000000]      	dq .undefined_object
  1428                                  .undefined_object:
  1429 000012C7 05                      	db T_undefined
  1430 000012C8 [1707000000000000]      	dq L_constants + 1815
  1431                                  
  1432                                  free_var_54:	; location of cdaddr
  1433 000012D0 [D812000000000000]      	dq .undefined_object
  1434                                  .undefined_object:
  1435 000012D8 05                      	db T_undefined
  1436 000012D9 [2607000000000000]      	dq L_constants + 1830
  1437                                  
  1438                                  free_var_55:	; location of cdadr
  1439 000012E1 [E912000000000000]      	dq .undefined_object
  1440                                  .undefined_object:
  1441 000012E9 05                      	db T_undefined
  1442 000012EA [5706000000000000]      	dq L_constants + 1623
  1443                                  
  1444                                  free_var_56:	; location of cdar
  1445 000012F2 [FA12000000000000]      	dq .undefined_object
  1446                                  .undefined_object:
  1447 000012FA 05                      	db T_undefined
  1448 000012FB [F705000000000000]      	dq L_constants + 1527
  1449                                  
  1450                                  free_var_57:	; location of cddaar
  1451 00001303 [0B13000000000000]      	dq .undefined_object
  1452                                  .undefined_object:
  1453 0000130B 05                      	db T_undefined
  1454 0000130C [3507000000000000]      	dq L_constants + 1845
  1455                                  
  1456                                  free_var_58:	; location of cddadr
  1457 00001314 [1C13000000000000]      	dq .undefined_object
  1458                                  .undefined_object:
  1459 0000131C 05                      	db T_undefined
  1460 0000131D [4407000000000000]      	dq L_constants + 1860
  1461                                  
  1462                                  free_var_59:	; location of cddar
  1463 00001325 [2D13000000000000]      	dq .undefined_object
  1464                                  .undefined_object:
  1465 0000132D 05                      	db T_undefined
  1466 0000132E [6506000000000000]      	dq L_constants + 1637
  1467                                  
  1468                                  free_var_60:	; location of cdddar
  1469 00001336 [3E13000000000000]      	dq .undefined_object
  1470                                  .undefined_object:
  1471 0000133E 05                      	db T_undefined
  1472 0000133F [5307000000000000]      	dq L_constants + 1875
  1473                                  
  1474                                  free_var_61:	; location of cddddr
  1475 00001347 [4F13000000000000]      	dq .undefined_object
  1476                                  .undefined_object:
  1477 0000134F 05                      	db T_undefined
  1478 00001350 [6207000000000000]      	dq L_constants + 1890
  1479                                  
  1480                                  free_var_62:	; location of cdddr
  1481 00001358 [6013000000000000]      	dq .undefined_object
  1482                                  .undefined_object:
  1483 00001360 05                      	db T_undefined
  1484 00001361 [7306000000000000]      	dq L_constants + 1651
  1485                                  
  1486                                  free_var_63:	; location of cddr
  1487 00001369 [7113000000000000]      	dq .undefined_object
  1488                                  .undefined_object:
  1489 00001371 05                      	db T_undefined
  1490 00001372 [0406000000000000]      	dq L_constants + 1540
  1491                                  
  1492                                  free_var_64:	; location of cdr
  1493 0000137A [8213000000000000]      	dq .undefined_object
  1494                                  .undefined_object:
  1495 00001382 05                      	db T_undefined
  1496 00001383 [2101000000000000]      	dq L_constants + 289
  1497                                  
  1498                                  free_var_65:	; location of char->integer
  1499 0000138B [9313000000000000]      	dq .undefined_object
  1500                                  .undefined_object:
  1501 00001393 05                      	db T_undefined
  1502 00001394 [A901000000000000]      	dq L_constants + 425
  1503                                  
  1504                                  free_var_66:	; location of char-ci<=?
  1505 0000139C [A413000000000000]      	dq .undefined_object
  1506                                  .undefined_object:
  1507 000013A4 05                      	db T_undefined
  1508 000013A5 [230A000000000000]      	dq L_constants + 2595
  1509                                  
  1510                                  free_var_67:	; location of char-ci<?
  1511 000013AD [B513000000000000]      	dq .undefined_object
  1512                                  .undefined_object:
  1513 000013B5 05                      	db T_undefined
  1514 000013B6 [110A000000000000]      	dq L_constants + 2577
  1515                                  
  1516                                  free_var_68:	; location of char-ci=?
  1517 000013BE [C613000000000000]      	dq .undefined_object
  1518                                  .undefined_object:
  1519 000013C6 05                      	db T_undefined
  1520 000013C7 [360A000000000000]      	dq L_constants + 2614
  1521                                  
  1522                                  free_var_69:	; location of char-ci>=?
  1523 000013CF [D713000000000000]      	dq .undefined_object
  1524                                  .undefined_object:
  1525 000013D7 05                      	db T_undefined
  1526 000013D8 [5A0A000000000000]      	dq L_constants + 2650
  1527                                  
  1528                                  free_var_70:	; location of char-ci>?
  1529 000013E0 [E813000000000000]      	dq .undefined_object
  1530                                  .undefined_object:
  1531 000013E8 05                      	db T_undefined
  1532 000013E9 [480A000000000000]      	dq L_constants + 2632
  1533                                  
  1534                                  free_var_71:	; location of char-downcase
  1535 000013F1 [F913000000000000]      	dq .undefined_object
  1536                                  .undefined_object:
  1537 000013F9 05                      	db T_undefined
  1538 000013FA [DF09000000000000]      	dq L_constants + 2527
  1539                                  
  1540                                  free_var_72:	; location of char-upcase
  1541 00001402 [0A14000000000000]      	dq .undefined_object
  1542                                  .undefined_object:
  1543 0000140A 05                      	db T_undefined
  1544 0000140B [F509000000000000]      	dq L_constants + 2549
  1545                                  
  1546                                  free_var_73:	; location of char<=?
  1547 00001413 [1B14000000000000]      	dq .undefined_object
  1548                                  .undefined_object:
  1549 0000141B 05                      	db T_undefined
  1550 0000141C [A109000000000000]      	dq L_constants + 2465
  1551                                  
  1552                                  free_var_74:	; location of char<?
  1553 00001424 [2C14000000000000]      	dq .undefined_object
  1554                                  .undefined_object:
  1555 0000142C 05                      	db T_undefined
  1556 0000142D [9209000000000000]      	dq L_constants + 2450
  1557                                  
  1558                                  free_var_75:	; location of char=?
  1559 00001435 [3D14000000000000]      	dq .undefined_object
  1560                                  .undefined_object:
  1561 0000143D 05                      	db T_undefined
  1562 0000143E [B109000000000000]      	dq L_constants + 2481
  1563                                  
  1564                                  free_var_76:	; location of char>=?
  1565 00001446 [4E14000000000000]      	dq .undefined_object
  1566                                  .undefined_object:
  1567 0000144E 05                      	db T_undefined
  1568 0000144F [CF09000000000000]      	dq L_constants + 2511
  1569                                  
  1570                                  free_var_77:	; location of char>?
  1571 00001457 [5F14000000000000]      	dq .undefined_object
  1572                                  .undefined_object:
  1573 0000145F 05                      	db T_undefined
  1574 00001460 [C009000000000000]      	dq L_constants + 2496
  1575                                  
  1576                                  free_var_78:	; location of char?
  1577 00001468 [7014000000000000]      	dq .undefined_object
  1578                                  .undefined_object:
  1579 00001470 05                      	db T_undefined
  1580 00001471 [3000000000000000]      	dq L_constants + 48
  1581                                  
  1582                                  free_var_79:	; location of cons
  1583 00001479 [8114000000000000]      	dq .undefined_object
  1584                                  .undefined_object:
  1585 00001481 05                      	db T_undefined
  1586 00001482 [DF00000000000000]      	dq L_constants + 223
  1587                                  
  1588                                  free_var_80:	; location of eq?
  1589 0000148A [9214000000000000]      	dq .undefined_object
  1590                                  .undefined_object:
  1591 00001492 05                      	db T_undefined
  1592 00001493 [9604000000000000]      	dq L_constants + 1174
  1593                                  
  1594                                  free_var_81:	; location of equal?
  1595 0000149B [A314000000000000]      	dq .undefined_object
  1596                                  .undefined_object:
  1597 000014A3 05                      	db T_undefined
  1598 000014A4 [980C000000000000]      	dq L_constants + 3224
  1599                                  
  1600                                  free_var_82:	; location of error
  1601 000014AC [B414000000000000]      	dq .undefined_object
  1602                                  .undefined_object:
  1603 000014B4 05                      	db T_undefined
  1604 000014B5 [1103000000000000]      	dq L_constants + 785
  1605                                  
  1606                                  free_var_83:	; location of even?
  1607 000014BD [C514000000000000]      	dq .undefined_object
  1608                                  .undefined_object:
  1609 000014C5 05                      	db T_undefined
  1610 000014C6 [680C000000000000]      	dq L_constants + 3176
  1611                                  
  1612                                  free_var_84:	; location of fact
  1613 000014CE [D614000000000000]      	dq .undefined_object
  1614                                  .undefined_object:
  1615 000014D6 05                      	db T_undefined
  1616 000014D7 [0309000000000000]      	dq L_constants + 2307
  1617                                  
  1618                                  free_var_85:	; location of fold-left
  1619 000014DF [E714000000000000]      	dq .undefined_object
  1620                                  .undefined_object:
  1621 000014E7 05                      	db T_undefined
  1622 000014E8 [1908000000000000]      	dq L_constants + 2073
  1623                                  
  1624                                  free_var_86:	; location of fold-right
  1625 000014F0 [F814000000000000]      	dq .undefined_object
  1626                                  .undefined_object:
  1627 000014F8 05                      	db T_undefined
  1628 000014F9 [3A08000000000000]      	dq L_constants + 2106
  1629                                  
  1630                                  free_var_87:	; location of fraction->real
  1631 00001501 [0915000000000000]      	dq .undefined_object
  1632                                  .undefined_object:
  1633 00001509 05                      	db T_undefined
  1634 0000150A [9201000000000000]      	dq L_constants + 402
  1635                                  
  1636                                  free_var_88:	; location of fraction?
  1637 00001512 [1A15000000000000]      	dq .undefined_object
  1638                                  .undefined_object:
  1639 0000151A 05                      	db T_undefined
  1640 0000151B [9800000000000000]      	dq L_constants + 152
  1641                                  
  1642                                  free_var_89:	; location of integer->char
  1643 00001523 [2B15000000000000]      	dq .undefined_object
  1644                                  .undefined_object:
  1645 0000152B 05                      	db T_undefined
  1646 0000152C [BF01000000000000]      	dq L_constants + 447
  1647                                  
  1648                                  free_var_90:	; location of integer->real
  1649 00001534 [3C15000000000000]      	dq .undefined_object
  1650                                  .undefined_object:
  1651 0000153C 05                      	db T_undefined
  1652 0000153D [7C01000000000000]      	dq L_constants + 380
  1653                                  
  1654                                  free_var_91:	; location of integer?
  1655 00001545 [4D15000000000000]      	dq .undefined_object
  1656                                  .undefined_object:
  1657 0000154D 05                      	db T_undefined
  1658 0000154E [F001000000000000]      	dq L_constants + 496
  1659                                  
  1660                                  free_var_92:	; location of list
  1661 00001556 [5E15000000000000]      	dq .undefined_object
  1662                                  .undefined_object:
  1663 0000155E 05                      	db T_undefined
  1664 0000155F [7F07000000000000]      	dq L_constants + 1919
  1665                                  
  1666                                  free_var_93:	; location of list*
  1667 00001567 [6F15000000000000]      	dq .undefined_object
  1668                                  .undefined_object:
  1669 0000156F 05                      	db T_undefined
  1670 00001570 [AA07000000000000]      	dq L_constants + 1962
  1671                                  
  1672                                  free_var_94:	; location of list->string
  1673 00001578 [8015000000000000]      	dq .undefined_object
  1674                                  .undefined_object:
  1675 00001580 05                      	db T_undefined
  1676 00001581 [9B0A000000000000]      	dq L_constants + 2715
  1677                                  
  1678                                  free_var_95:	; location of list->vector
  1679 00001589 [9115000000000000]      	dq .undefined_object
  1680                                  .undefined_object:
  1681 00001591 05                      	db T_undefined
  1682 00001592 [FC0B000000000000]      	dq L_constants + 3068
  1683                                  
  1684                                  free_var_96:	; location of list?
  1685 0000159A [A215000000000000]      	dq .undefined_object
  1686                                  .undefined_object:
  1687 000015A2 05                      	db T_undefined
  1688 000015A3 [7107000000000000]      	dq L_constants + 1905
  1689                                  
  1690                                  free_var_97:	; location of logarithm
  1691 000015AB [B315000000000000]      	dq .undefined_object
  1692                                  .undefined_object:
  1693 000015B3 05                      	db T_undefined
  1694 000015B4 [8B0D000000000000]      	dq L_constants + 3467
  1695                                  
  1696                                  free_var_98:	; location of make-list-thunk
  1697 000015BC [C415000000000000]      	dq .undefined_object
  1698                                  .undefined_object:
  1699 000015C4 05                      	db T_undefined
  1700 000015C5 [3F0D000000000000]      	dq L_constants + 3391
  1701                                  
  1702                                  free_var_99:	; location of make-string
  1703 000015CD [D515000000000000]      	dq .undefined_object
  1704                                  .undefined_object:
  1705 000015D5 05                      	db T_undefined
  1706 000015D6 [5C04000000000000]      	dq L_constants + 1116
  1707                                  
  1708                                  free_var_100:	; location of make-string-thunk
  1709 000015DE [E615000000000000]      	dq .undefined_object
  1710                                  .undefined_object:
  1711 000015E6 05                      	db T_undefined
  1712 000015E7 [570D000000000000]      	dq L_constants + 3415
  1713                                  
  1714                                  free_var_101:	; location of make-vector
  1715 000015EF [F715000000000000]      	dq .undefined_object
  1716                                  .undefined_object:
  1717 000015F7 05                      	db T_undefined
  1718 000015F8 [4804000000000000]      	dq L_constants + 1096
  1719                                  
  1720                                  free_var_102:	; location of make-vector-thunk
  1721 00001600 [0816000000000000]      	dq .undefined_object
  1722                                  .undefined_object:
  1723 00001608 05                      	db T_undefined
  1724 00001609 [710D000000000000]      	dq L_constants + 3441
  1725                                  
  1726                                  free_var_103:	; location of map
  1727 00001611 [1916000000000000]      	dq .undefined_object
  1728                                  .undefined_object:
  1729 00001619 05                      	db T_undefined
  1730 0000161A [EE07000000000000]      	dq L_constants + 2030
  1731                                  
  1732                                  free_var_104:	; location of negative?
  1733 00001622 [2A16000000000000]      	dq .undefined_object
  1734                                  .undefined_object:
  1735 0000162A 05                      	db T_undefined
  1736 0000162B [560C000000000000]      	dq L_constants + 3158
  1737                                  
  1738                                  free_var_105:	; location of newline
  1739 00001633 [3B16000000000000]      	dq .undefined_object
  1740                                  .undefined_object:
  1741 0000163B 05                      	db T_undefined
  1742 0000163C [A60D000000000000]      	dq L_constants + 3494
  1743                                  
  1744                                  free_var_106:	; location of not
  1745 00001644 [4C16000000000000]      	dq .undefined_object
  1746                                  .undefined_object:
  1747 0000164C 05                      	db T_undefined
  1748 0000164D [8C07000000000000]      	dq L_constants + 1932
  1749                                  
  1750                                  free_var_107:	; location of null?
  1751 00001655 [5D16000000000000]      	dq .undefined_object
  1752                                  .undefined_object:
  1753 0000165D 05                      	db T_undefined
  1754 0000165E [0600000000000000]      	dq L_constants + 6
  1755                                  
  1756                                  free_var_108:	; location of number?
  1757 00001666 [6E16000000000000]      	dq .undefined_object
  1758                                  .undefined_object:
  1759 0000166E 05                      	db T_undefined
  1760 0000166F [BB00000000000000]      	dq L_constants + 187
  1761                                  
  1762                                  free_var_109:	; location of odd?
  1763 00001677 [7F16000000000000]      	dq .undefined_object
  1764                                  .undefined_object:
  1765 0000167F 05                      	db T_undefined
  1766 00001680 [7F0C000000000000]      	dq L_constants + 3199
  1767                                  
  1768                                  free_var_110:	; location of ormap
  1769 00001688 [9016000000000000]      	dq .undefined_object
  1770                                  .undefined_object:
  1771 00001690 05                      	db T_undefined
  1772 00001691 [E007000000000000]      	dq L_constants + 2016
  1773                                  
  1774                                  free_var_111:	; location of pair?
  1775 00001699 [A116000000000000]      	dq .undefined_object
  1776                                  .undefined_object:
  1777 000016A1 05                      	db T_undefined
  1778 000016A2 [1400000000000000]      	dq L_constants + 20
  1779                                  
  1780                                  free_var_112:	; location of positive?
  1781 000016AA [B216000000000000]      	dq .undefined_object
  1782                                  .undefined_object:
  1783 000016B2 05                      	db T_undefined
  1784 000016B3 [440C000000000000]      	dq L_constants + 3140
  1785                                  
  1786                                  free_var_113:	; location of random
  1787 000016BB [C316000000000000]      	dq .undefined_object
  1788                                  .undefined_object:
  1789 000016C3 05                      	db T_undefined
  1790 000016C4 [350C000000000000]      	dq L_constants + 3125
  1791                                  
  1792                                  free_var_114:	; location of rational?
  1793 000016CC [D416000000000000]      	dq .undefined_object
  1794                                  .undefined_object:
  1795 000016D4 05                      	db T_undefined
  1796 000016D5 [9807000000000000]      	dq L_constants + 1944
  1797                                  
  1798                                  free_var_115:	; location of real
  1799 000016DD [E516000000000000]      	dq .undefined_object
  1800                                  .undefined_object:
  1801 000016E5 05                      	db T_undefined
  1802 000016E6 [BE08000000000000]      	dq L_constants + 2238
  1803                                  
  1804                                  free_var_116:	; location of real?
  1805 000016EE [F616000000000000]      	dq .undefined_object
  1806                                  .undefined_object:
  1807 000016F6 05                      	db T_undefined
  1808 000016F7 [8A00000000000000]      	dq L_constants + 138
  1809                                  
  1810                                  free_var_117:	; location of remainder
  1811 000016FF [0717000000000000]      	dq .undefined_object
  1812                                  .undefined_object:
  1813 00001707 05                      	db T_undefined
  1814 00001708 [C603000000000000]      	dq L_constants + 966
  1815                                  
  1816                                  free_var_118:	; location of reverse
  1817 00001710 [1817000000000000]      	dq .undefined_object
  1818                                  .undefined_object:
  1819 00001718 05                      	db T_undefined
  1820 00001719 [0908000000000000]      	dq L_constants + 2057
  1821                                  
  1822                                  free_var_119:	; location of string->list
  1823 00001721 [2917000000000000]      	dq .undefined_object
  1824                                  .undefined_object:
  1825 00001729 05                      	db T_undefined
  1826 0000172A [B00A000000000000]      	dq L_constants + 2736
  1827                                  
  1828                                  free_var_120:	; location of string-append
  1829 00001732 [3A17000000000000]      	dq .undefined_object
  1830                                  .undefined_object:
  1831 0000173A 05                      	db T_undefined
  1832 0000173B [B50C000000000000]      	dq L_constants + 3253
  1833                                  
  1834                                  free_var_121:	; location of string-ci<=?
  1835 00001743 [4B17000000000000]      	dq .undefined_object
  1836                                  .undefined_object:
  1837 0000174B 05                      	db T_undefined
  1838 0000174C [300B000000000000]      	dq L_constants + 2864
  1839                                  
  1840                                  free_var_122:	; location of string-ci<?
  1841 00001754 [5C17000000000000]      	dq .undefined_object
  1842                                  .undefined_object:
  1843 0000175C 05                      	db T_undefined
  1844 0000175D [1C0B000000000000]      	dq L_constants + 2844
  1845                                  
  1846                                  free_var_123:	; location of string-ci=?
  1847 00001765 [6D17000000000000]      	dq .undefined_object
  1848                                  .undefined_object:
  1849 0000176D 05                      	db T_undefined
  1850 0000176E [450B000000000000]      	dq L_constants + 2885
  1851                                  
  1852                                  free_var_124:	; location of string-ci>=?
  1853 00001776 [7E17000000000000]      	dq .undefined_object
  1854                                  .undefined_object:
  1855 0000177E 05                      	db T_undefined
  1856 0000177F [590B000000000000]      	dq L_constants + 2905
  1857                                  
  1858                                  free_var_125:	; location of string-ci>?
  1859 00001787 [8F17000000000000]      	dq .undefined_object
  1860                                  .undefined_object:
  1861 0000178F 05                      	db T_undefined
  1862 00001790 [6E0B000000000000]      	dq L_constants + 2926
  1863                                  
  1864                                  free_var_126:	; location of string-downcase
  1865 00001798 [A017000000000000]      	dq .undefined_object
  1866                                  .undefined_object:
  1867 000017A0 05                      	db T_undefined
  1868 000017A1 [6D0A000000000000]      	dq L_constants + 2669
  1869                                  
  1870                                  free_var_127:	; location of string-length
  1871 000017A9 [B117000000000000]      	dq .undefined_object
  1872                                  .undefined_object:
  1873 000017B1 05                      	db T_undefined
  1874 000017B2 [2D01000000000000]      	dq L_constants + 301
  1875                                  
  1876                                  free_var_128:	; location of string-ref
  1877 000017BA [C217000000000000]      	dq .undefined_object
  1878                                  .undefined_object:
  1879 000017C2 05                      	db T_undefined
  1880 000017C3 [FA03000000000000]      	dq L_constants + 1018
  1881                                  
  1882                                  free_var_129:	; location of string-reverse
  1883 000017CB [D317000000000000]      	dq .undefined_object
  1884                                  .undefined_object:
  1885 000017D3 05                      	db T_undefined
  1886 000017D4 [E10C000000000000]      	dq L_constants + 3297
  1887                                  
  1888                                  free_var_130:	; location of string-reverse!
  1889 000017DC [E417000000000000]      	dq .undefined_object
  1890                                  .undefined_object:
  1891 000017E4 05                      	db T_undefined
  1892 000017E5 [0F0D000000000000]      	dq L_constants + 3343
  1893                                  
  1894                                  free_var_131:	; location of string-set!
  1895 000017ED [F517000000000000]      	dq .undefined_object
  1896                                  .undefined_object:
  1897 000017F5 05                      	db T_undefined
  1898 000017F6 [3404000000000000]      	dq L_constants + 1076
  1899                                  
  1900                                  free_var_132:	; location of string-upcase
  1901 000017FE [0618000000000000]      	dq .undefined_object
  1902                                  .undefined_object:
  1903 00001806 05                      	db T_undefined
  1904 00001807 [850A000000000000]      	dq L_constants + 2693
  1905                                  
  1906                                  free_var_133:	; location of string<=?
  1907 0000180F [1718000000000000]      	dq .undefined_object
  1908                                  .undefined_object:
  1909 00001817 05                      	db T_undefined
  1910 00001818 [D60A000000000000]      	dq L_constants + 2774
  1911                                  
  1912                                  free_var_134:	; location of string<?
  1913 00001820 [2818000000000000]      	dq .undefined_object
  1914                                  .undefined_object:
  1915 00001828 05                      	db T_undefined
  1916 00001829 [C50A000000000000]      	dq L_constants + 2757
  1917                                  
  1918                                  free_var_135:	; location of string=?
  1919 00001831 [3918000000000000]      	dq .undefined_object
  1920                                  .undefined_object:
  1921 00001839 05                      	db T_undefined
  1922 0000183A [E80A000000000000]      	dq L_constants + 2792
  1923                                  
  1924                                  free_var_136:	; location of string>=?
  1925 00001842 [4A18000000000000]      	dq .undefined_object
  1926                                  .undefined_object:
  1927 0000184A 05                      	db T_undefined
  1928 0000184B [F90A000000000000]      	dq L_constants + 2809
  1929                                  
  1930                                  free_var_137:	; location of string>?
  1931 00001853 [5B18000000000000]      	dq .undefined_object
  1932                                  .undefined_object:
  1933 0000185B 05                      	db T_undefined
  1934 0000185C [0B0B000000000000]      	dq L_constants + 2827
  1935                                  
  1936                                  free_var_138:	; location of string?
  1937 00001864 [6C18000000000000]      	dq .undefined_object
  1938                                  .undefined_object:
  1939 0000186C 05                      	db T_undefined
  1940 0000186D [3E00000000000000]      	dq L_constants + 62
  1941                                  
  1942                                  free_var_139:	; location of test
  1943 00001875 [7D18000000000000]      	dq .undefined_object
  1944                                  .undefined_object:
  1945 0000187D 05                      	db T_undefined
  1946 0000187E [C50D000000000000]      	dq L_constants + 3525
  1947                                  
  1948                                  free_var_140:	; location of trng
  1949 00001886 [8E18000000000000]      	dq .undefined_object
  1950                                  .undefined_object:
  1951 0000188E 05                      	db T_undefined
  1952 0000188F [D501000000000000]      	dq L_constants + 469
  1953                                  
  1954                                  free_var_141:	; location of vector
  1955 00001897 [9F18000000000000]      	dq .undefined_object
  1956                                  .undefined_object:
  1957 0000189F 05                      	db T_undefined
  1958 000018A0 [110C000000000000]      	dq L_constants + 3089
  1959                                  
  1960                                  free_var_142:	; location of vector->list
  1961 000018A8 [B018000000000000]      	dq .undefined_object
  1962                                  .undefined_object:
  1963 000018B0 05                      	db T_undefined
  1964 000018B1 [200C000000000000]      	dq L_constants + 3104
  1965                                  
  1966                                  free_var_143:	; location of vector-append
  1967 000018B9 [C118000000000000]      	dq .undefined_object
  1968                                  .undefined_object:
  1969 000018C1 05                      	db T_undefined
  1970 000018C2 [CB0C000000000000]      	dq L_constants + 3275
  1971                                  
  1972                                  free_var_144:	; location of vector-length
  1973 000018CA [D218000000000000]      	dq .undefined_object
  1974                                  .undefined_object:
  1975 000018D2 05                      	db T_undefined
  1976 000018D3 [4301000000000000]      	dq L_constants + 323
  1977                                  
  1978                                  free_var_145:	; location of vector-ref
  1979 000018DB [E318000000000000]      	dq .undefined_object
  1980                                  .undefined_object:
  1981 000018E3 05                      	db T_undefined
  1982 000018E4 [0D04000000000000]      	dq L_constants + 1037
  1983                                  
  1984                                  free_var_146:	; location of vector-reverse
  1985 000018EC [F418000000000000]      	dq .undefined_object
  1986                                  .undefined_object:
  1987 000018F4 05                      	db T_undefined
  1988 000018F5 [F80C000000000000]      	dq L_constants + 3320
  1989                                  
  1990                                  free_var_147:	; location of vector-reverse!
  1991 000018FD [0519000000000000]      	dq .undefined_object
  1992                                  .undefined_object:
  1993 00001905 05                      	db T_undefined
  1994 00001906 [270D000000000000]      	dq L_constants + 3367
  1995                                  
  1996                                  free_var_148:	; location of vector-set!
  1997 0000190E [1619000000000000]      	dq .undefined_object
  1998                                  .undefined_object:
  1999 00001916 05                      	db T_undefined
  2000 00001917 [2004000000000000]      	dq L_constants + 1056
  2001                                  
  2002                                  free_var_149:	; location of vector?
  2003 0000191F [2719000000000000]      	dq .undefined_object
  2004                                  .undefined_object:
  2005 00001927 05                      	db T_undefined
  2006 00001928 [6700000000000000]      	dq L_constants + 103
  2007                                  
  2008                                  free_var_150:	; location of void
  2009 00001930 [3819000000000000]      	dq .undefined_object
  2010                                  .undefined_object:
  2011 00001938 05                      	db T_undefined
  2012 00001939 [B80D000000000000]      	dq L_constants + 3512
  2013                                  
  2014                                  free_var_151:	; location of write-char
  2015 00001941 [4919000000000000]      	dq .undefined_object
  2016                                  .undefined_object:
  2017 00001949 05                      	db T_undefined
  2018 0000194A [0201000000000000]      	dq L_constants + 258
  2019                                  
  2020                                  free_var_152:	; location of zero?
  2021 00001952 [5A19000000000000]      	dq .undefined_object
  2022                                  .undefined_object:
  2023 0000195A 05                      	db T_undefined
  2024 0000195B [E201000000000000]      	dq L_constants + 482
  2025                                  
  2026                                  
  2027                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
  2028                                  global main
  2029                                  section .text
  2030                                  main:
  2031 00000000 C8000000                        enter 0, 0
  2032 00000004 6A00                            push 0
  2033 00000006 6A00                            push 0
  2034 00000008 68[59830100]                    push Lend
  2035 0000000D C8000000                        enter 0, 0
  2036                                  	; building closure for null?
  2037 00000011 48BF-                   	mov rdi, free_var_107
  2037 00000013 [5516000000000000] 
  2038 0000001B 48BE-                   	mov rsi, L_code_ptr_is_null
  2038 0000001D [D68E010000000000] 
  2039 00000025 E8CA8C0100              	call bind_primitive
  2040                                  
  2041                                  	; building closure for pair?
  2042 0000002A 48BF-                   	mov rdi, free_var_111
  2042 0000002C [9916000000000000] 
  2043 00000034 48BE-                   	mov rsi, L_code_ptr_is_pair
  2043 00000036 [088F010000000000] 
  2044 0000003E E8B18C0100              	call bind_primitive
  2045                                  
  2046                                  	; building closure for char?
  2047 00000043 48BF-                   	mov rdi, free_var_78
  2047 00000045 [6814000000000000] 
  2048 0000004D 48BE-                   	mov rsi, L_code_ptr_is_char
  2048 0000004F [6C8F010000000000] 
  2049 00000057 E8988C0100              	call bind_primitive
  2050                                  
  2051                                  	; building closure for string?
  2052 0000005C 48BF-                   	mov rdi, free_var_138
  2052 0000005E [6418000000000000] 
  2053 00000066 48BE-                   	mov rsi, L_code_ptr_is_string
  2053 00000068 [9E8F010000000000] 
  2054 00000070 E87F8C0100              	call bind_primitive
  2055                                  
  2056                                  	; building closure for vector?
  2057 00000075 48BF-                   	mov rdi, free_var_149
  2057 00000077 [1F19000000000000] 
  2058 0000007F 48BE-                   	mov rsi, L_code_ptr_is_vector
  2058 00000081 [9C90010000000000] 
  2059 00000089 E8668C0100              	call bind_primitive
  2060                                  
  2061                                  	; building closure for real?
  2062 0000008E 48BF-                   	mov rdi, free_var_116
  2062 00000090 [EE16000000000000] 
  2063 00000098 48BE-                   	mov rsi, L_code_ptr_is_real
  2063 0000009A [0091010000000000] 
  2064 000000A2 E84D8C0100              	call bind_primitive
  2065                                  
  2066                                  	; building closure for fraction?
  2067 000000A7 48BF-                   	mov rdi, free_var_88
  2067 000000A9 [1215000000000000] 
  2068 000000B1 48BE-                   	mov rsi, L_code_ptr_is_fraction
  2068 000000B3 [3291010000000000] 
  2069 000000BB E8348C0100              	call bind_primitive
  2070                                  
  2071                                  	; building closure for number?
  2072 000000C0 48BF-                   	mov rdi, free_var_108
  2072 000000C2 [6616000000000000] 
  2073 000000CA 48BE-                   	mov rsi, L_code_ptr_is_number
  2073 000000CC [0092010000000000] 
  2074 000000D4 E81B8C0100              	call bind_primitive
  2075                                  
  2076                                  	; building closure for cons
  2077 000000D9 48BF-                   	mov rdi, free_var_79
  2077 000000DB [7914000000000000] 
  2078 000000E3 48BE-                   	mov rsi, L_code_ptr_cons
  2078 000000E5 [6892010000000000] 
  2079 000000ED E8028C0100              	call bind_primitive
  2080                                  
  2081                                  	; building closure for write-char
  2082 000000F2 48BF-                   	mov rdi, free_var_151
  2082 000000F4 [4119000000000000] 
  2083 000000FC 48BE-                   	mov rsi, L_code_ptr_write_char
  2083 000000FE [BE92010000000000] 
  2084 00000106 E8E98B0100              	call bind_primitive
  2085                                  
  2086                                  	; building closure for car
  2087 0000010B 48BF-                   	mov rdi, free_var_49
  2087 0000010D [7B12000000000000] 
  2088 00000115 48BE-                   	mov rsi, L_code_ptr_car
  2088 00000117 [1193010000000000] 
  2089 0000011F E8D08B0100              	call bind_primitive
  2090                                  
  2091                                  	; building closure for cdr
  2092 00000124 48BF-                   	mov rdi, free_var_64
  2092 00000126 [7A13000000000000] 
  2093 0000012E 48BE-                   	mov rsi, L_code_ptr_cdr
  2093 00000130 [3593010000000000] 
  2094 00000138 E8B78B0100              	call bind_primitive
  2095                                  
  2096                                  	; building closure for string-length
  2097 0000013D 48BF-                   	mov rdi, free_var_127
  2097 0000013F [A917000000000000] 
  2098 00000147 48BE-                   	mov rsi, L_code_ptr_string_length
  2098 00000149 [5993010000000000] 
  2099 00000151 E89E8B0100              	call bind_primitive
  2100                                  
  2101                                  	; building closure for vector-length
  2102 00000156 48BF-                   	mov rdi, free_var_144
  2102 00000158 [CA18000000000000] 
  2103 00000160 48BE-                   	mov rsi, L_code_ptr_vector_length
  2103 00000162 [8293010000000000] 
  2104 0000016A E8858B0100              	call bind_primitive
  2105                                  
  2106                                  	; building closure for integer->real
  2107 0000016F 48BF-                   	mov rdi, free_var_90
  2107 00000171 [3415000000000000] 
  2108 00000179 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  2108 0000017B [F393010000000000] 
  2109 00000183 E86C8B0100              	call bind_primitive
  2110                                  
  2111                                  	; building closure for fraction->real
  2112 00000188 48BF-                   	mov rdi, free_var_87
  2112 0000018A [0115000000000000] 
  2113 00000192 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  2113 00000194 [2194010000000000] 
  2114 0000019C E8538B0100              	call bind_primitive
  2115                                  
  2116                                  	; building closure for char->integer
  2117 000001A1 48BF-                   	mov rdi, free_var_65
  2117 000001A3 [8B13000000000000] 
  2118 000001AB 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  2118 000001AD [5C94010000000000] 
  2119 000001B5 E83A8B0100              	call bind_primitive
  2120                                  
  2121                                  	; building closure for integer->char
  2122 000001BA 48BF-                   	mov rdi, free_var_89
  2122 000001BC [2315000000000000] 
  2123 000001C4 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  2123 000001C6 [CB94010000000000] 
  2124 000001CE E8218B0100              	call bind_primitive
  2125                                  
  2126                                  	; building closure for trng
  2127 000001D3 48BF-                   	mov rdi, free_var_140
  2127 000001D5 [8618000000000000] 
  2128 000001DD 48BE-                   	mov rsi, L_code_ptr_trng
  2128 000001DF [1695010000000000] 
  2129 000001E7 E8088B0100              	call bind_primitive
  2130                                  
  2131                                  	; building closure for zero?
  2132 000001EC 48BF-                   	mov rdi, free_var_152
  2132 000001EE [5219000000000000] 
  2133 000001F6 48BE-                   	mov rsi, L_code_ptr_is_zero
  2133 000001F8 [3595010000000000] 
  2134 00000200 E8EF8A0100              	call bind_primitive
  2135                                  
  2136                                  	; building closure for integer?
  2137 00000205 48BF-                   	mov rdi, free_var_91
  2137 00000207 [4515000000000000] 
  2138 0000020F 48BE-                   	mov rsi, L_code_ptr_is_integer
  2138 00000211 [9A95010000000000] 
  2139 00000219 E8D68A0100              	call bind_primitive
  2140                                  
  2141                                  	; building closure for __bin-apply
  2142 0000021E 48BF-                   	mov rdi, free_var_12
  2142 00000220 [0610000000000000] 
  2143 00000228 48BE-                   	mov rsi, L_code_ptr_bin_apply
  2143 0000022A [648E010000000000] 
  2144 00000232 E8BD8A0100              	call bind_primitive
  2145                                  
  2146                                  	; building closure for __bin-add-rr
  2147 00000237 48BF-                   	mov rdi, free_var_10
  2147 00000239 [E40F000000000000] 
  2148 00000241 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  2148 00000243 [CC95010000000000] 
  2149 0000024B E8A48A0100              	call bind_primitive
  2150                                  
  2151                                  	; building closure for __bin-sub-rr
  2152 00000250 48BF-                   	mov rdi, free_var_26
  2152 00000252 [F410000000000000] 
  2153 0000025A 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  2153 0000025C [0C96010000000000] 
  2154 00000264 E88B8A0100              	call bind_primitive
  2155                                  
  2156                                  	; building closure for __bin-mul-rr
  2157 00000269 48BF-                   	mov rdi, free_var_23
  2157 0000026B [C110000000000000] 
  2158 00000273 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  2158 00000275 [4C96010000000000] 
  2159 0000027D E8728A0100              	call bind_primitive
  2160                                  
  2161                                  	; building closure for __bin-div-rr
  2162 00000282 48BF-                   	mov rdi, free_var_14
  2162 00000284 [2810000000000000] 
  2163 0000028C 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  2163 0000028E [8C96010000000000] 
  2164 00000296 E8598A0100              	call bind_primitive
  2165                                  
  2166                                  	; building closure for __bin-add-qq
  2167 0000029B 48BF-                   	mov rdi, free_var_9
  2167 0000029D [D30F000000000000] 
  2168 000002A5 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  2168 000002A7 [1697010000000000] 
  2169 000002AF E8408A0100              	call bind_primitive
  2170                                  
  2171                                  	; building closure for __bin-sub-qq
  2172 000002B4 48BF-                   	mov rdi, free_var_25
  2172 000002B6 [E310000000000000] 
  2173 000002BE 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  2173 000002C0 [B697010000000000] 
  2174 000002C8 E8278A0100              	call bind_primitive
  2175                                  
  2176                                  	; building closure for __bin-mul-qq
  2177 000002CD 48BF-                   	mov rdi, free_var_22
  2177 000002CF [B010000000000000] 
  2178 000002D7 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  2178 000002D9 [5B98010000000000] 
  2179 000002E1 E80E8A0100              	call bind_primitive
  2180                                  
  2181                                  	; building closure for __bin-div-qq
  2182 000002E6 48BF-                   	mov rdi, free_var_13
  2182 000002E8 [1710000000000000] 
  2183 000002F0 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  2183 000002F2 [F598010000000000] 
  2184 000002FA E8F5890100              	call bind_primitive
  2185                                  
  2186                                  	; building closure for __bin-add-zz
  2187 000002FF 48BF-                   	mov rdi, free_var_11
  2187 00000301 [F50F000000000000] 
  2188 00000309 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  2188 0000030B [DA96010000000000] 
  2189 00000313 E8DC890100              	call bind_primitive
  2190                                  
  2191                                  	; building closure for __bin-sub-zz
  2192 00000318 48BF-                   	mov rdi, free_var_27
  2192 0000031A [0511000000000000] 
  2193 00000322 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  2193 00000324 [7A97010000000000] 
  2194 0000032C E8C3890100              	call bind_primitive
  2195                                  
  2196                                  	; building closure for __bin-mul-zz
  2197 00000331 48BF-                   	mov rdi, free_var_24
  2197 00000333 [D210000000000000] 
  2198 0000033B 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  2198 0000033D [1A98010000000000] 
  2199 00000345 E8AA890100              	call bind_primitive
  2200                                  
  2201                                  	; building closure for __bin-div-zz
  2202 0000034A 48BF-                   	mov rdi, free_var_15
  2202 0000034C [3910000000000000] 
  2203 00000354 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  2203 00000356 [AF98010000000000] 
  2204 0000035E E891890100              	call bind_primitive
  2205                                  
  2206                                  	; building closure for error
  2207 00000363 48BF-                   	mov rdi, free_var_82
  2207 00000365 [AC14000000000000] 
  2208 0000036D 48BE-                   	mov rsi, L_code_ptr_error
  2208 0000036F [DF99010000000000] 
  2209 00000377 E878890100              	call bind_primitive
  2210                                  
  2211                                  	; building closure for __bin-less-than-rr
  2212 0000037C 48BF-                   	mov rdi, free_var_20
  2212 0000037E [8E10000000000000] 
  2213 00000386 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  2213 00000388 [9B9A010000000000] 
  2214 00000390 E85F890100              	call bind_primitive
  2215                                  
  2216                                  	; building closure for __bin-less-than-qq
  2217 00000395 48BF-                   	mov rdi, free_var_19
  2217 00000397 [7D10000000000000] 
  2218 0000039F 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  2218 000003A1 [3D9B010000000000] 
  2219 000003A9 E846890100              	call bind_primitive
  2220                                  
  2221                                  	; building closure for __bin-less-than-zz
  2222 000003AE 48BF-                   	mov rdi, free_var_21
  2222 000003B0 [9F10000000000000] 
  2223 000003B8 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  2223 000003BA [EE9A010000000000] 
  2224 000003C2 E82D890100              	call bind_primitive
  2225                                  
  2226                                  	; building closure for __bin-equal-rr
  2227 000003C7 48BF-                   	mov rdi, free_var_17
  2227 000003C9 [5B10000000000000] 
  2228 000003D1 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  2228 000003D3 [9C9B010000000000] 
  2229 000003DB E814890100              	call bind_primitive
  2230                                  
  2231                                  	; building closure for __bin-equal-qq
  2232 000003E0 48BF-                   	mov rdi, free_var_16
  2232 000003E2 [4A10000000000000] 
  2233 000003EA 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  2233 000003EC [3E9C010000000000] 
  2234 000003F4 E8FB880100              	call bind_primitive
  2235                                  
  2236                                  	; building closure for __bin-equal-zz
  2237 000003F9 48BF-                   	mov rdi, free_var_18
  2237 000003FB [6C10000000000000] 
  2238 00000403 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  2238 00000405 [EF9B010000000000] 
  2239 0000040D E8E2880100              	call bind_primitive
  2240                                  
  2241                                  	; building closure for remainder
  2242 00000412 48BF-                   	mov rdi, free_var_117
  2242 00000414 [FF16000000000000] 
  2243 0000041C 48BE-                   	mov rsi, L_code_ptr_remainder
  2243 0000041E [E99C010000000000] 
  2244 00000426 E8C9880100              	call bind_primitive
  2245                                  
  2246                                  	; building closure for string-ref
  2247 0000042B 48BF-                   	mov rdi, free_var_128
  2247 0000042D [BA17000000000000] 
  2248 00000435 48BE-                   	mov rsi, L_code_ptr_string_ref
  2248 00000437 [999D010000000000] 
  2249 0000043F E8B0880100              	call bind_primitive
  2250                                  
  2251                                  	; building closure for vector-ref
  2252 00000444 48BF-                   	mov rdi, free_var_145
  2252 00000446 [DB18000000000000] 
  2253 0000044E 48BE-                   	mov rsi, L_code_ptr_vector_ref
  2253 00000450 [F59D010000000000] 
  2254 00000458 E897880100              	call bind_primitive
  2255                                  
  2256                                  	; building closure for vector-set!
  2257 0000045D 48BF-                   	mov rdi, free_var_148
  2257 0000045F [0E19000000000000] 
  2258 00000467 48BE-                   	mov rsi, L_code_ptr_vector_set
  2258 00000469 [429E010000000000] 
  2259 00000471 E87E880100              	call bind_primitive
  2260                                  
  2261                                  	; building closure for string-set!
  2262 00000476 48BF-                   	mov rdi, free_var_131
  2262 00000478 [ED17000000000000] 
  2263 00000480 48BE-                   	mov rsi, L_code_ptr_string_set
  2263 00000482 [9D9E010000000000] 
  2264 0000048A E865880100              	call bind_primitive
  2265                                  
  2266                                  	; building closure for make-vector
  2267 0000048F 48BF-                   	mov rdi, free_var_101
  2267 00000491 [EF15000000000000] 
  2268 00000499 48BE-                   	mov rsi, L_code_ptr_make_vector
  2268 0000049B [039F010000000000] 
  2269 000004A3 E84C880100              	call bind_primitive
  2270                                  
  2271                                  	; building closure for make-string
  2272 000004A8 48BF-                   	mov rdi, free_var_99
  2272 000004AA [CD15000000000000] 
  2273 000004B2 48BE-                   	mov rsi, L_code_ptr_make_string
  2273 000004B4 [5E9F010000000000] 
  2274 000004BC E833880100              	call bind_primitive
  2275                                  
  2276                                  	; building closure for eq?
  2277 000004C1 48BF-                   	mov rdi, free_var_80
  2277 000004C3 [8A14000000000000] 
  2278 000004CB 48BE-                   	mov rsi, L_code_ptr_is_eq
  2278 000004CD [13A0010000000000] 
  2279 000004D5 E81A880100              	call bind_primitive
  2280                                  
  2281                                  	; building closure for __integer-to-fraction
  2282 000004DA 48BF-                   	mov rdi, free_var_29
  2282 000004DC [2711000000000000] 
  2283 000004E4 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  2283 000004E6 [8D94010000000000] 
  2284 000004EE E801880100              	call bind_primitive
  2285                                  
  2286 000004F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2287 000004F8 E8C77F0100              	call malloc
  2288 000004FD 50                      	push rax
  2289 000004FE BF00000000              	mov rdi, 8 * 0	; new rib
  2290 00000503 E8BC7F0100              	call malloc
  2291 00000508 50                      	push rax
  2292 00000509 BF08000000              	mov rdi, 8 * 1	; extended env
  2293 0000050E E8B17F0100              	call malloc
  2294 00000513 488B7D10                	mov rdi, ENV
  2295 00000517 BE00000000              	mov rsi, 0
  2296 0000051C BA01000000              	mov rdx, 1
  2297                                  .L_lambda_simple_env_loop_0a33:	; ext_env[i + 1] <-- env[i]
  2298 00000521 4883FE00                	cmp rsi, 0
  2299 00000525 7410                    	je .L_lambda_simple_env_end_0a33
  2300 00000527 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2301 0000052B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2302 0000052F 48FFC6                  	inc rsi
  2303 00000532 48FFC2                  	inc rdx
  2304 00000535 EBEA                    	jmp .L_lambda_simple_env_loop_0a33
  2305                                  .L_lambda_simple_env_end_0a33:
  2306 00000537 5B                      	pop rbx
  2307 00000538 BE00000000              	mov rsi, 0
  2308                                  .L_lambda_simple_params_loop_0a33:	; copy params
  2309 0000053D 4883FE00                	cmp rsi, 0
  2310 00000541 740E                    	je .L_lambda_simple_params_end_0a33
  2311 00000543 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2312 00000548 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2313 0000054C 48FFC6                  	inc rsi
  2314 0000054F EBEC                    	jmp .L_lambda_simple_params_loop_0a33
  2315                                  .L_lambda_simple_params_end_0a33:
  2316 00000551 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2317 00000554 4889C3                  	mov rbx, rax
  2318 00000557 58                      	pop rax
  2319 00000558 C60004                  	mov byte [rax], T_closure
  2320 0000055B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2321 0000055F 48C74009[6C050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a33
  2322 00000567 E9AA000000              	jmp .L_lambda_simple_end_0a33
  2323                                  .L_lambda_simple_code_0a33:	; lambda-simple body
  2324 0000056C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2325 00000572 740B                    	je .L_lambda_simple_arity_check_ok_0a33
  2326 00000574 FF742410                	push qword [rsp + 8 * 2]
  2327 00000578 6A01                    	push 1
  2328 0000057A E9FE7E0100              	jmp L_error_incorrect_arity_simple
  2329                                  .L_lambda_simple_arity_check_ok_0a33:
  2330 0000057F C8000000                	enter 0, 0
  2331                                  	; preparing a tail-call
  2332                                  	; preparing a non-tail-call
  2333 00000583 488B4520                	mov rax, PARAM(0)	; param x
  2334 00000587 50                      	push rax
  2335 00000588 6A01                    	push 1	; arg count
  2336 0000058A 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2337 00000592 803805                  	cmp byte [rax], T_undefined
  2338 00000595 0F84FC7D0100            	je L_error_fvar_undefined
  2339 0000059B 803804                  	cmp byte [rax], T_closure
  2340 0000059E 0F85777E0100            	jne L_error_non_closure
  2341 000005A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2342 000005A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2343 000005AA 50                      	push rax
  2344 000005AB 6A01                    	push 1	; arg count
  2345 000005AD 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2346 000005B5 803805                  	cmp byte [rax], T_undefined
  2347 000005B8 0F84D97D0100            	je L_error_fvar_undefined
  2348 000005BE 803804                  	cmp byte [rax], T_closure
  2349 000005C1 0F85547E0100            	jne L_error_non_closure
  2350 000005C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2351 000005CA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2352 000005CD FF7500                  	push qword[rbp]
  2353 000005D0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2354 000005D3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2355 000005D7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2356 000005DB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2357 000005DF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2358 000005E2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2359 000005E5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2360 000005EA 4983C103                	add r9, 3 	 ;for getting to the params
  2361 000005EE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2362 000005F2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2363                                  .L_tc_recycle_frame_loop_0e40:
  2364 000005F5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2365 000005F8 7410                    	je .L_tc_recycle_frame_done_0e40
  2366 000005FA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2367 000005FD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2368 00000600 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2369 00000604 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2370 00000608 EBEB                    	jmp .L_tc_recycle_frame_loop_0e40
  2371                                  .L_tc_recycle_frame_done_0e40:
  2372 0000060A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2373 0000060B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2374 0000060F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2375 00000612 C9                      	leave
  2376 00000613 C21800                  	ret AND_KILL_FRAME(1)
  2377                                  .L_lambda_simple_end_0a33:	; new closure is in rax
  2378 00000616 48890425[F3110000]      	mov qword [free_var_41], rax
  2379 0000061E 48B8-                   	mov rax, sob_void
  2379 00000620 [0000000000000000] 
  2380                                  
  2381 00000628 4889C7                  	mov rdi, rax
  2382 0000062B E8E9800100              	call print_sexpr_if_not_void
  2383 00000630 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2384 00000635 E88A7E0100              	call malloc
  2385 0000063A 50                      	push rax
  2386 0000063B BF00000000              	mov rdi, 8 * 0	; new rib
  2387 00000640 E87F7E0100              	call malloc
  2388 00000645 50                      	push rax
  2389 00000646 BF08000000              	mov rdi, 8 * 1	; extended env
  2390 0000064B E8747E0100              	call malloc
  2391 00000650 488B7D10                	mov rdi, ENV
  2392 00000654 BE00000000              	mov rsi, 0
  2393 00000659 BA01000000              	mov rdx, 1
  2394                                  .L_lambda_simple_env_loop_0a34:	; ext_env[i + 1] <-- env[i]
  2395 0000065E 4883FE00                	cmp rsi, 0
  2396 00000662 7410                    	je .L_lambda_simple_env_end_0a34
  2397 00000664 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2398 00000668 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2399 0000066C 48FFC6                  	inc rsi
  2400 0000066F 48FFC2                  	inc rdx
  2401 00000672 EBEA                    	jmp .L_lambda_simple_env_loop_0a34
  2402                                  .L_lambda_simple_env_end_0a34:
  2403 00000674 5B                      	pop rbx
  2404 00000675 BE00000000              	mov rsi, 0
  2405                                  .L_lambda_simple_params_loop_0a34:	; copy params
  2406 0000067A 4883FE00                	cmp rsi, 0
  2407 0000067E 740E                    	je .L_lambda_simple_params_end_0a34
  2408 00000680 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2409 00000685 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2410 00000689 48FFC6                  	inc rsi
  2411 0000068C EBEC                    	jmp .L_lambda_simple_params_loop_0a34
  2412                                  .L_lambda_simple_params_end_0a34:
  2413 0000068E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2414 00000691 4889C3                  	mov rbx, rax
  2415 00000694 58                      	pop rax
  2416 00000695 C60004                  	mov byte [rax], T_closure
  2417 00000698 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2418 0000069C 48C74009[A9060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a34
  2419 000006A4 E9AA000000              	jmp .L_lambda_simple_end_0a34
  2420                                  .L_lambda_simple_code_0a34:	; lambda-simple body
  2421 000006A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2422 000006AF 740B                    	je .L_lambda_simple_arity_check_ok_0a34
  2423 000006B1 FF742410                	push qword [rsp + 8 * 2]
  2424 000006B5 6A01                    	push 1
  2425 000006B7 E9C17D0100              	jmp L_error_incorrect_arity_simple
  2426                                  .L_lambda_simple_arity_check_ok_0a34:
  2427 000006BC C8000000                	enter 0, 0
  2428                                  	; preparing a tail-call
  2429                                  	; preparing a non-tail-call
  2430 000006C0 488B4520                	mov rax, PARAM(0)	; param x
  2431 000006C4 50                      	push rax
  2432 000006C5 6A01                    	push 1	; arg count
  2433 000006C7 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  2434 000006CF 803805                  	cmp byte [rax], T_undefined
  2435 000006D2 0F84BF7C0100            	je L_error_fvar_undefined
  2436 000006D8 803804                  	cmp byte [rax], T_closure
  2437 000006DB 0F853A7D0100            	jne L_error_non_closure
  2438 000006E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2439 000006E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2440 000006E7 50                      	push rax
  2441 000006E8 6A01                    	push 1	; arg count
  2442 000006EA 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2443 000006F2 803805                  	cmp byte [rax], T_undefined
  2444 000006F5 0F849C7C0100            	je L_error_fvar_undefined
  2445 000006FB 803804                  	cmp byte [rax], T_closure
  2446 000006FE 0F85177D0100            	jne L_error_non_closure
  2447 00000704 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2448 00000707 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2449 0000070A FF7500                  	push qword[rbp]
  2450 0000070D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2451 00000710 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2452 00000714 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2453 00000718 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2454 0000071C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2455 0000071F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2456 00000722 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2457 00000727 4983C103                	add r9, 3 	 ;for getting to the params
  2458 0000072B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2459 0000072F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2460                                  .L_tc_recycle_frame_loop_0e41:
  2461 00000732 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2462 00000735 7410                    	je .L_tc_recycle_frame_done_0e41
  2463 00000737 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2464 0000073A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2465 0000073D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2466 00000741 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2467 00000745 EBEB                    	jmp .L_tc_recycle_frame_loop_0e41
  2468                                  .L_tc_recycle_frame_done_0e41:
  2469 00000747 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2470 00000748 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2471 0000074C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2472 0000074F C9                      	leave
  2473 00000750 C21800                  	ret AND_KILL_FRAME(1)
  2474                                  .L_lambda_simple_end_0a34:	; new closure is in rax
  2475 00000753 48890425[6A120000]      	mov qword [free_var_48], rax
  2476 0000075B 48B8-                   	mov rax, sob_void
  2476 0000075D [0000000000000000] 
  2477                                  
  2478 00000765 4889C7                  	mov rdi, rax
  2479 00000768 E8AC7F0100              	call print_sexpr_if_not_void
  2480 0000076D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2481 00000772 E84D7D0100              	call malloc
  2482 00000777 50                      	push rax
  2483 00000778 BF00000000              	mov rdi, 8 * 0	; new rib
  2484 0000077D E8427D0100              	call malloc
  2485 00000782 50                      	push rax
  2486 00000783 BF08000000              	mov rdi, 8 * 1	; extended env
  2487 00000788 E8377D0100              	call malloc
  2488 0000078D 488B7D10                	mov rdi, ENV
  2489 00000791 BE00000000              	mov rsi, 0
  2490 00000796 BA01000000              	mov rdx, 1
  2491                                  .L_lambda_simple_env_loop_0a35:	; ext_env[i + 1] <-- env[i]
  2492 0000079B 4883FE00                	cmp rsi, 0
  2493 0000079F 7410                    	je .L_lambda_simple_env_end_0a35
  2494 000007A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2495 000007A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2496 000007A9 48FFC6                  	inc rsi
  2497 000007AC 48FFC2                  	inc rdx
  2498 000007AF EBEA                    	jmp .L_lambda_simple_env_loop_0a35
  2499                                  .L_lambda_simple_env_end_0a35:
  2500 000007B1 5B                      	pop rbx
  2501 000007B2 BE00000000              	mov rsi, 0
  2502                                  .L_lambda_simple_params_loop_0a35:	; copy params
  2503 000007B7 4883FE00                	cmp rsi, 0
  2504 000007BB 740E                    	je .L_lambda_simple_params_end_0a35
  2505 000007BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2506 000007C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2507 000007C6 48FFC6                  	inc rsi
  2508 000007C9 EBEC                    	jmp .L_lambda_simple_params_loop_0a35
  2509                                  .L_lambda_simple_params_end_0a35:
  2510 000007CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2511 000007CE 4889C3                  	mov rbx, rax
  2512 000007D1 58                      	pop rax
  2513 000007D2 C60004                  	mov byte [rax], T_closure
  2514 000007D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2515 000007D9 48C74009[E6070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a35
  2516 000007E1 E9AA000000              	jmp .L_lambda_simple_end_0a35
  2517                                  .L_lambda_simple_code_0a35:	; lambda-simple body
  2518 000007E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2519 000007EC 740B                    	je .L_lambda_simple_arity_check_ok_0a35
  2520 000007EE FF742410                	push qword [rsp + 8 * 2]
  2521 000007F2 6A01                    	push 1
  2522 000007F4 E9847C0100              	jmp L_error_incorrect_arity_simple
  2523                                  .L_lambda_simple_arity_check_ok_0a35:
  2524 000007F9 C8000000                	enter 0, 0
  2525                                  	; preparing a tail-call
  2526                                  	; preparing a non-tail-call
  2527 000007FD 488B4520                	mov rax, PARAM(0)	; param x
  2528 00000801 50                      	push rax
  2529 00000802 6A01                    	push 1	; arg count
  2530 00000804 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2531 0000080C 803805                  	cmp byte [rax], T_undefined
  2532 0000080F 0F84827B0100            	je L_error_fvar_undefined
  2533 00000815 803804                  	cmp byte [rax], T_closure
  2534 00000818 0F85FD7B0100            	jne L_error_non_closure
  2535 0000081E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2536 00000821 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2537 00000824 50                      	push rax
  2538 00000825 6A01                    	push 1	; arg count
  2539 00000827 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  2540 0000082F 803805                  	cmp byte [rax], T_undefined
  2541 00000832 0F845F7B0100            	je L_error_fvar_undefined
  2542 00000838 803804                  	cmp byte [rax], T_closure
  2543 0000083B 0F85DA7B0100            	jne L_error_non_closure
  2544 00000841 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2545 00000844 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2546 00000847 FF7500                  	push qword[rbp]
  2547 0000084A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2548 0000084D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2549 00000851 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2550 00000855 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2551 00000859 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2552 0000085C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2553 0000085F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2554 00000864 4983C103                	add r9, 3 	 ;for getting to the params
  2555 00000868 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2556 0000086C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2557                                  .L_tc_recycle_frame_loop_0e42:
  2558 0000086F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2559 00000872 7410                    	je .L_tc_recycle_frame_done_0e42
  2560 00000874 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2561 00000877 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2562 0000087A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2563 0000087E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2564 00000882 EBEB                    	jmp .L_tc_recycle_frame_loop_0e42
  2565                                  .L_tc_recycle_frame_done_0e42:
  2566 00000884 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2567 00000885 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2568 00000889 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2569 0000088C C9                      	leave
  2570 0000088D C21800                  	ret AND_KILL_FRAME(1)
  2571                                  .L_lambda_simple_end_0a35:	; new closure is in rax
  2572 00000890 48890425[F2120000]      	mov qword [free_var_56], rax
  2573 00000898 48B8-                   	mov rax, sob_void
  2573 0000089A [0000000000000000] 
  2574                                  
  2575 000008A2 4889C7                  	mov rdi, rax
  2576 000008A5 E86F7E0100              	call print_sexpr_if_not_void
  2577 000008AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2578 000008AF E8107C0100              	call malloc
  2579 000008B4 50                      	push rax
  2580 000008B5 BF00000000              	mov rdi, 8 * 0	; new rib
  2581 000008BA E8057C0100              	call malloc
  2582 000008BF 50                      	push rax
  2583 000008C0 BF08000000              	mov rdi, 8 * 1	; extended env
  2584 000008C5 E8FA7B0100              	call malloc
  2585 000008CA 488B7D10                	mov rdi, ENV
  2586 000008CE BE00000000              	mov rsi, 0
  2587 000008D3 BA01000000              	mov rdx, 1
  2588                                  .L_lambda_simple_env_loop_0a36:	; ext_env[i + 1] <-- env[i]
  2589 000008D8 4883FE00                	cmp rsi, 0
  2590 000008DC 7410                    	je .L_lambda_simple_env_end_0a36
  2591 000008DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2592 000008E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2593 000008E6 48FFC6                  	inc rsi
  2594 000008E9 48FFC2                  	inc rdx
  2595 000008EC EBEA                    	jmp .L_lambda_simple_env_loop_0a36
  2596                                  .L_lambda_simple_env_end_0a36:
  2597 000008EE 5B                      	pop rbx
  2598 000008EF BE00000000              	mov rsi, 0
  2599                                  .L_lambda_simple_params_loop_0a36:	; copy params
  2600 000008F4 4883FE00                	cmp rsi, 0
  2601 000008F8 740E                    	je .L_lambda_simple_params_end_0a36
  2602 000008FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2603 000008FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2604 00000903 48FFC6                  	inc rsi
  2605 00000906 EBEC                    	jmp .L_lambda_simple_params_loop_0a36
  2606                                  .L_lambda_simple_params_end_0a36:
  2607 00000908 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2608 0000090B 4889C3                  	mov rbx, rax
  2609 0000090E 58                      	pop rax
  2610 0000090F C60004                  	mov byte [rax], T_closure
  2611 00000912 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2612 00000916 48C74009[23090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a36
  2613 0000091E E9AA000000              	jmp .L_lambda_simple_end_0a36
  2614                                  .L_lambda_simple_code_0a36:	; lambda-simple body
  2615 00000923 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2616 00000929 740B                    	je .L_lambda_simple_arity_check_ok_0a36
  2617 0000092B FF742410                	push qword [rsp + 8 * 2]
  2618 0000092F 6A01                    	push 1
  2619 00000931 E9477B0100              	jmp L_error_incorrect_arity_simple
  2620                                  .L_lambda_simple_arity_check_ok_0a36:
  2621 00000936 C8000000                	enter 0, 0
  2622                                  	; preparing a tail-call
  2623                                  	; preparing a non-tail-call
  2624 0000093A 488B4520                	mov rax, PARAM(0)	; param x
  2625 0000093E 50                      	push rax
  2626 0000093F 6A01                    	push 1	; arg count
  2627 00000941 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  2628 00000949 803805                  	cmp byte [rax], T_undefined
  2629 0000094C 0F84457A0100            	je L_error_fvar_undefined
  2630 00000952 803804                  	cmp byte [rax], T_closure
  2631 00000955 0F85C07A0100            	jne L_error_non_closure
  2632 0000095B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2633 0000095E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2634 00000961 50                      	push rax
  2635 00000962 6A01                    	push 1	; arg count
  2636 00000964 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  2637 0000096C 803805                  	cmp byte [rax], T_undefined
  2638 0000096F 0F84227A0100            	je L_error_fvar_undefined
  2639 00000975 803804                  	cmp byte [rax], T_closure
  2640 00000978 0F859D7A0100            	jne L_error_non_closure
  2641 0000097E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2642 00000981 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2643 00000984 FF7500                  	push qword[rbp]
  2644 00000987 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2645 0000098A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2646 0000098E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2647 00000992 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2648 00000996 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2649 00000999 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2650 0000099C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2651 000009A1 4983C103                	add r9, 3 	 ;for getting to the params
  2652 000009A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2653 000009A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2654                                  .L_tc_recycle_frame_loop_0e43:
  2655 000009AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2656 000009AF 7410                    	je .L_tc_recycle_frame_done_0e43
  2657 000009B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2658 000009B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2659 000009B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2660 000009BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2661 000009BF EBEB                    	jmp .L_tc_recycle_frame_loop_0e43
  2662                                  .L_tc_recycle_frame_done_0e43:
  2663 000009C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2664 000009C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2665 000009C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2666 000009C9 C9                      	leave
  2667 000009CA C21800                  	ret AND_KILL_FRAME(1)
  2668                                  .L_lambda_simple_end_0a36:	; new closure is in rax
  2669 000009CD 48890425[69130000]      	mov qword [free_var_63], rax
  2670 000009D5 48B8-                   	mov rax, sob_void
  2670 000009D7 [0000000000000000] 
  2671                                  
  2672 000009DF 4889C7                  	mov rdi, rax
  2673 000009E2 E8327D0100              	call print_sexpr_if_not_void
  2674 000009E7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2675 000009EC E8D37A0100              	call malloc
  2676 000009F1 50                      	push rax
  2677 000009F2 BF00000000              	mov rdi, 8 * 0	; new rib
  2678 000009F7 E8C87A0100              	call malloc
  2679 000009FC 50                      	push rax
  2680 000009FD BF08000000              	mov rdi, 8 * 1	; extended env
  2681 00000A02 E8BD7A0100              	call malloc
  2682 00000A07 488B7D10                	mov rdi, ENV
  2683 00000A0B BE00000000              	mov rsi, 0
  2684 00000A10 BA01000000              	mov rdx, 1
  2685                                  .L_lambda_simple_env_loop_0a37:	; ext_env[i + 1] <-- env[i]
  2686 00000A15 4883FE00                	cmp rsi, 0
  2687 00000A19 7410                    	je .L_lambda_simple_env_end_0a37
  2688 00000A1B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2689 00000A1F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2690 00000A23 48FFC6                  	inc rsi
  2691 00000A26 48FFC2                  	inc rdx
  2692 00000A29 EBEA                    	jmp .L_lambda_simple_env_loop_0a37
  2693                                  .L_lambda_simple_env_end_0a37:
  2694 00000A2B 5B                      	pop rbx
  2695 00000A2C BE00000000              	mov rsi, 0
  2696                                  .L_lambda_simple_params_loop_0a37:	; copy params
  2697 00000A31 4883FE00                	cmp rsi, 0
  2698 00000A35 740E                    	je .L_lambda_simple_params_end_0a37
  2699 00000A37 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2700 00000A3C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2701 00000A40 48FFC6                  	inc rsi
  2702 00000A43 EBEC                    	jmp .L_lambda_simple_params_loop_0a37
  2703                                  .L_lambda_simple_params_end_0a37:
  2704 00000A45 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2705 00000A48 4889C3                  	mov rbx, rax
  2706 00000A4B 58                      	pop rax
  2707 00000A4C C60004                  	mov byte [rax], T_closure
  2708 00000A4F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2709 00000A53 48C74009[600A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a37
  2710 00000A5B E9AA000000              	jmp .L_lambda_simple_end_0a37
  2711                                  .L_lambda_simple_code_0a37:	; lambda-simple body
  2712 00000A60 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2713 00000A66 740B                    	je .L_lambda_simple_arity_check_ok_0a37
  2714 00000A68 FF742410                	push qword [rsp + 8 * 2]
  2715 00000A6C 6A01                    	push 1
  2716 00000A6E E90A7A0100              	jmp L_error_incorrect_arity_simple
  2717                                  .L_lambda_simple_arity_check_ok_0a37:
  2718 00000A73 C8000000                	enter 0, 0
  2719                                  	; preparing a tail-call
  2720                                  	; preparing a non-tail-call
  2721 00000A77 488B4520                	mov rax, PARAM(0)	; param x
  2722 00000A7B 50                      	push rax
  2723 00000A7C 6A01                    	push 1	; arg count
  2724 00000A7E 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  2725 00000A86 803805                  	cmp byte [rax], T_undefined
  2726 00000A89 0F8408790100            	je L_error_fvar_undefined
  2727 00000A8F 803804                  	cmp byte [rax], T_closure
  2728 00000A92 0F8583790100            	jne L_error_non_closure
  2729 00000A98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2730 00000A9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2731 00000A9E 50                      	push rax
  2732 00000A9F 6A01                    	push 1	; arg count
  2733 00000AA1 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2734 00000AA9 803805                  	cmp byte [rax], T_undefined
  2735 00000AAC 0F84E5780100            	je L_error_fvar_undefined
  2736 00000AB2 803804                  	cmp byte [rax], T_closure
  2737 00000AB5 0F8560790100            	jne L_error_non_closure
  2738 00000ABB FF7001                  	push SOB_CLOSURE_ENV(rax)
  2739 00000ABE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2740 00000AC1 FF7500                  	push qword[rbp]
  2741 00000AC4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2742 00000AC7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2743 00000ACB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2744 00000ACF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2745 00000AD3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2746 00000AD6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2747 00000AD9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2748 00000ADE 4983C103                	add r9, 3 	 ;for getting to the params
  2749 00000AE2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2750 00000AE6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2751                                  .L_tc_recycle_frame_loop_0e44:
  2752 00000AE9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2753 00000AEC 7410                    	je .L_tc_recycle_frame_done_0e44
  2754 00000AEE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2755 00000AF1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2756 00000AF4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2757 00000AF8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2758 00000AFC EBEB                    	jmp .L_tc_recycle_frame_loop_0e44
  2759                                  .L_tc_recycle_frame_done_0e44:
  2760 00000AFE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2761 00000AFF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2762 00000B03 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2763 00000B06 C9                      	leave
  2764 00000B07 C21800                  	ret AND_KILL_FRAME(1)
  2765                                  .L_lambda_simple_end_0a37:	; new closure is in rax
  2766 00000B0A 48890425[AF110000]      	mov qword [free_var_37], rax
  2767 00000B12 48B8-                   	mov rax, sob_void
  2767 00000B14 [0000000000000000] 
  2768                                  
  2769 00000B1C 4889C7                  	mov rdi, rax
  2770 00000B1F E8F57B0100              	call print_sexpr_if_not_void
  2771 00000B24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2772 00000B29 E896790100              	call malloc
  2773 00000B2E 50                      	push rax
  2774 00000B2F BF00000000              	mov rdi, 8 * 0	; new rib
  2775 00000B34 E88B790100              	call malloc
  2776 00000B39 50                      	push rax
  2777 00000B3A BF08000000              	mov rdi, 8 * 1	; extended env
  2778 00000B3F E880790100              	call malloc
  2779 00000B44 488B7D10                	mov rdi, ENV
  2780 00000B48 BE00000000              	mov rsi, 0
  2781 00000B4D BA01000000              	mov rdx, 1
  2782                                  .L_lambda_simple_env_loop_0a38:	; ext_env[i + 1] <-- env[i]
  2783 00000B52 4883FE00                	cmp rsi, 0
  2784 00000B56 7410                    	je .L_lambda_simple_env_end_0a38
  2785 00000B58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2786 00000B5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2787 00000B60 48FFC6                  	inc rsi
  2788 00000B63 48FFC2                  	inc rdx
  2789 00000B66 EBEA                    	jmp .L_lambda_simple_env_loop_0a38
  2790                                  .L_lambda_simple_env_end_0a38:
  2791 00000B68 5B                      	pop rbx
  2792 00000B69 BE00000000              	mov rsi, 0
  2793                                  .L_lambda_simple_params_loop_0a38:	; copy params
  2794 00000B6E 4883FE00                	cmp rsi, 0
  2795 00000B72 740E                    	je .L_lambda_simple_params_end_0a38
  2796 00000B74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2797 00000B79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2798 00000B7D 48FFC6                  	inc rsi
  2799 00000B80 EBEC                    	jmp .L_lambda_simple_params_loop_0a38
  2800                                  .L_lambda_simple_params_end_0a38:
  2801 00000B82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2802 00000B85 4889C3                  	mov rbx, rax
  2803 00000B88 58                      	pop rax
  2804 00000B89 C60004                  	mov byte [rax], T_closure
  2805 00000B8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2806 00000B90 48C74009[9D0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a38
  2807 00000B98 E9AA000000              	jmp .L_lambda_simple_end_0a38
  2808                                  .L_lambda_simple_code_0a38:	; lambda-simple body
  2809 00000B9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2810 00000BA3 740B                    	je .L_lambda_simple_arity_check_ok_0a38
  2811 00000BA5 FF742410                	push qword [rsp + 8 * 2]
  2812 00000BA9 6A01                    	push 1
  2813 00000BAB E9CD780100              	jmp L_error_incorrect_arity_simple
  2814                                  .L_lambda_simple_arity_check_ok_0a38:
  2815 00000BB0 C8000000                	enter 0, 0
  2816                                  	; preparing a tail-call
  2817                                  	; preparing a non-tail-call
  2818 00000BB4 488B4520                	mov rax, PARAM(0)	; param x
  2819 00000BB8 50                      	push rax
  2820 00000BB9 6A01                    	push 1	; arg count
  2821 00000BBB 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  2822 00000BC3 803805                  	cmp byte [rax], T_undefined
  2823 00000BC6 0F84CB770100            	je L_error_fvar_undefined
  2824 00000BCC 803804                  	cmp byte [rax], T_closure
  2825 00000BCF 0F8546780100            	jne L_error_non_closure
  2826 00000BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2827 00000BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2828 00000BDB 50                      	push rax
  2829 00000BDC 6A01                    	push 1	; arg count
  2830 00000BDE 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2831 00000BE6 803805                  	cmp byte [rax], T_undefined
  2832 00000BE9 0F84A8770100            	je L_error_fvar_undefined
  2833 00000BEF 803804                  	cmp byte [rax], T_closure
  2834 00000BF2 0F8523780100            	jne L_error_non_closure
  2835 00000BF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2836 00000BFB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2837 00000BFE FF7500                  	push qword[rbp]
  2838 00000C01 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2839 00000C04 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2840 00000C08 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2841 00000C0C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2842 00000C10 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2843 00000C13 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2844 00000C16 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2845 00000C1B 4983C103                	add r9, 3 	 ;for getting to the params
  2846 00000C1F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2847 00000C23 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2848                                  .L_tc_recycle_frame_loop_0e45:
  2849 00000C26 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2850 00000C29 7410                    	je .L_tc_recycle_frame_done_0e45
  2851 00000C2B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2852 00000C2E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2853 00000C31 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2854 00000C35 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2855 00000C39 EBEB                    	jmp .L_tc_recycle_frame_loop_0e45
  2856                                  .L_tc_recycle_frame_done_0e45:
  2857 00000C3B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2858 00000C3C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2859 00000C40 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2860 00000C43 C9                      	leave
  2861 00000C44 C21800                  	ret AND_KILL_FRAME(1)
  2862                                  .L_lambda_simple_end_0a38:	; new closure is in rax
  2863 00000C47 48890425[E2110000]      	mov qword [free_var_40], rax
  2864 00000C4F 48B8-                   	mov rax, sob_void
  2864 00000C51 [0000000000000000] 
  2865                                  
  2866 00000C59 4889C7                  	mov rdi, rax
  2867 00000C5C E8B87A0100              	call print_sexpr_if_not_void
  2868 00000C61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2869 00000C66 E859780100              	call malloc
  2870 00000C6B 50                      	push rax
  2871 00000C6C BF00000000              	mov rdi, 8 * 0	; new rib
  2872 00000C71 E84E780100              	call malloc
  2873 00000C76 50                      	push rax
  2874 00000C77 BF08000000              	mov rdi, 8 * 1	; extended env
  2875 00000C7C E843780100              	call malloc
  2876 00000C81 488B7D10                	mov rdi, ENV
  2877 00000C85 BE00000000              	mov rsi, 0
  2878 00000C8A BA01000000              	mov rdx, 1
  2879                                  .L_lambda_simple_env_loop_0a39:	; ext_env[i + 1] <-- env[i]
  2880 00000C8F 4883FE00                	cmp rsi, 0
  2881 00000C93 7410                    	je .L_lambda_simple_env_end_0a39
  2882 00000C95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2883 00000C99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2884 00000C9D 48FFC6                  	inc rsi
  2885 00000CA0 48FFC2                  	inc rdx
  2886 00000CA3 EBEA                    	jmp .L_lambda_simple_env_loop_0a39
  2887                                  .L_lambda_simple_env_end_0a39:
  2888 00000CA5 5B                      	pop rbx
  2889 00000CA6 BE00000000              	mov rsi, 0
  2890                                  .L_lambda_simple_params_loop_0a39:	; copy params
  2891 00000CAB 4883FE00                	cmp rsi, 0
  2892 00000CAF 740E                    	je .L_lambda_simple_params_end_0a39
  2893 00000CB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2894 00000CB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2895 00000CBA 48FFC6                  	inc rsi
  2896 00000CBD EBEC                    	jmp .L_lambda_simple_params_loop_0a39
  2897                                  .L_lambda_simple_params_end_0a39:
  2898 00000CBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2899 00000CC2 4889C3                  	mov rbx, rax
  2900 00000CC5 58                      	pop rax
  2901 00000CC6 C60004                  	mov byte [rax], T_closure
  2902 00000CC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2903 00000CCD 48C74009[DA0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a39
  2904 00000CD5 E9AA000000              	jmp .L_lambda_simple_end_0a39
  2905                                  .L_lambda_simple_code_0a39:	; lambda-simple body
  2906 00000CDA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2907 00000CE0 740B                    	je .L_lambda_simple_arity_check_ok_0a39
  2908 00000CE2 FF742410                	push qword [rsp + 8 * 2]
  2909 00000CE6 6A01                    	push 1
  2910 00000CE8 E990770100              	jmp L_error_incorrect_arity_simple
  2911                                  .L_lambda_simple_arity_check_ok_0a39:
  2912 00000CED C8000000                	enter 0, 0
  2913                                  	; preparing a tail-call
  2914                                  	; preparing a non-tail-call
  2915 00000CF1 488B4520                	mov rax, PARAM(0)	; param x
  2916 00000CF5 50                      	push rax
  2917 00000CF6 6A01                    	push 1	; arg count
  2918 00000CF8 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  2919 00000D00 803805                  	cmp byte [rax], T_undefined
  2920 00000D03 0F848E760100            	je L_error_fvar_undefined
  2921 00000D09 803804                  	cmp byte [rax], T_closure
  2922 00000D0C 0F8509770100            	jne L_error_non_closure
  2923 00000D12 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2924 00000D15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2925 00000D18 50                      	push rax
  2926 00000D19 6A01                    	push 1	; arg count
  2927 00000D1B 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  2928 00000D23 803805                  	cmp byte [rax], T_undefined
  2929 00000D26 0F846B760100            	je L_error_fvar_undefined
  2930 00000D2C 803804                  	cmp byte [rax], T_closure
  2931 00000D2F 0F85E6760100            	jne L_error_non_closure
  2932 00000D35 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2933 00000D38 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  2934 00000D3B FF7500                  	push qword[rbp]
  2935 00000D3E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  2936 00000D41 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  2937 00000D45 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  2938 00000D49 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  2939 00000D4D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  2940 00000D50 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  2941 00000D53 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  2942 00000D58 4983C103                	add r9, 3 	 ;for getting to the params
  2943 00000D5C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  2944 00000D60 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  2945                                  .L_tc_recycle_frame_loop_0e46:
  2946 00000D63 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  2947 00000D66 7410                    	je .L_tc_recycle_frame_done_0e46
  2948 00000D68 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  2949 00000D6B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  2950 00000D6E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  2951 00000D72 4983E808                	sub r8, 8	 ;move the top of the stack one down
  2952 00000D76 EBEB                    	jmp .L_tc_recycle_frame_loop_0e46
  2953                                  .L_tc_recycle_frame_done_0e46:
  2954 00000D78 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  2955 00000D79 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  2956 00000D7D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2957 00000D80 C9                      	leave
  2958 00000D81 C21800                  	ret AND_KILL_FRAME(1)
  2959                                  .L_lambda_simple_end_0a39:	; new closure is in rax
  2960 00000D84 48890425[26120000]      	mov qword [free_var_44], rax
  2961 00000D8C 48B8-                   	mov rax, sob_void
  2961 00000D8E [0000000000000000] 
  2962                                  
  2963 00000D96 4889C7                  	mov rdi, rax
  2964 00000D99 E87B790100              	call print_sexpr_if_not_void
  2965 00000D9E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2966 00000DA3 E81C770100              	call malloc
  2967 00000DA8 50                      	push rax
  2968 00000DA9 BF00000000              	mov rdi, 8 * 0	; new rib
  2969 00000DAE E811770100              	call malloc
  2970 00000DB3 50                      	push rax
  2971 00000DB4 BF08000000              	mov rdi, 8 * 1	; extended env
  2972 00000DB9 E806770100              	call malloc
  2973 00000DBE 488B7D10                	mov rdi, ENV
  2974 00000DC2 BE00000000              	mov rsi, 0
  2975 00000DC7 BA01000000              	mov rdx, 1
  2976                                  .L_lambda_simple_env_loop_0a3a:	; ext_env[i + 1] <-- env[i]
  2977 00000DCC 4883FE00                	cmp rsi, 0
  2978 00000DD0 7410                    	je .L_lambda_simple_env_end_0a3a
  2979 00000DD2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2980 00000DD6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2981 00000DDA 48FFC6                  	inc rsi
  2982 00000DDD 48FFC2                  	inc rdx
  2983 00000DE0 EBEA                    	jmp .L_lambda_simple_env_loop_0a3a
  2984                                  .L_lambda_simple_env_end_0a3a:
  2985 00000DE2 5B                      	pop rbx
  2986 00000DE3 BE00000000              	mov rsi, 0
  2987                                  .L_lambda_simple_params_loop_0a3a:	; copy params
  2988 00000DE8 4883FE00                	cmp rsi, 0
  2989 00000DEC 740E                    	je .L_lambda_simple_params_end_0a3a
  2990 00000DEE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2991 00000DF3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2992 00000DF7 48FFC6                  	inc rsi
  2993 00000DFA EBEC                    	jmp .L_lambda_simple_params_loop_0a3a
  2994                                  .L_lambda_simple_params_end_0a3a:
  2995 00000DFC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2996 00000DFF 4889C3                  	mov rbx, rax
  2997 00000E02 58                      	pop rax
  2998 00000E03 C60004                  	mov byte [rax], T_closure
  2999 00000E06 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3000 00000E0A 48C74009[170E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3a
  3001 00000E12 E9AA000000              	jmp .L_lambda_simple_end_0a3a
  3002                                  .L_lambda_simple_code_0a3a:	; lambda-simple body
  3003 00000E17 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3004 00000E1D 740B                    	je .L_lambda_simple_arity_check_ok_0a3a
  3005 00000E1F FF742410                	push qword [rsp + 8 * 2]
  3006 00000E23 6A01                    	push 1
  3007 00000E25 E953760100              	jmp L_error_incorrect_arity_simple
  3008                                  .L_lambda_simple_arity_check_ok_0a3a:
  3009 00000E2A C8000000                	enter 0, 0
  3010                                  	; preparing a tail-call
  3011                                  	; preparing a non-tail-call
  3012 00000E2E 488B4520                	mov rax, PARAM(0)	; param x
  3013 00000E32 50                      	push rax
  3014 00000E33 6A01                    	push 1	; arg count
  3015 00000E35 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  3016 00000E3D 803805                  	cmp byte [rax], T_undefined
  3017 00000E40 0F8451750100            	je L_error_fvar_undefined
  3018 00000E46 803804                  	cmp byte [rax], T_closure
  3019 00000E49 0F85CC750100            	jne L_error_non_closure
  3020 00000E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3021 00000E52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3022 00000E55 50                      	push rax
  3023 00000E56 6A01                    	push 1	; arg count
  3024 00000E58 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  3025 00000E60 803805                  	cmp byte [rax], T_undefined
  3026 00000E63 0F842E750100            	je L_error_fvar_undefined
  3027 00000E69 803804                  	cmp byte [rax], T_closure
  3028 00000E6C 0F85A9750100            	jne L_error_non_closure
  3029 00000E72 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3030 00000E75 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3031 00000E78 FF7500                  	push qword[rbp]
  3032 00000E7B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3033 00000E7E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3034 00000E82 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3035 00000E86 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3036 00000E8A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3037 00000E8D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3038 00000E90 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3039 00000E95 4983C103                	add r9, 3 	 ;for getting to the params
  3040 00000E99 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3041 00000E9D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3042                                  .L_tc_recycle_frame_loop_0e47:
  3043 00000EA0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3044 00000EA3 7410                    	je .L_tc_recycle_frame_done_0e47
  3045 00000EA5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3046 00000EA8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3047 00000EAB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3048 00000EAF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3049 00000EB3 EBEB                    	jmp .L_tc_recycle_frame_loop_0e47
  3050                                  .L_tc_recycle_frame_done_0e47:
  3051 00000EB5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3052 00000EB6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3053 00000EBA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3054 00000EBD C9                      	leave
  3055 00000EBE C21800                  	ret AND_KILL_FRAME(1)
  3056                                  .L_lambda_simple_end_0a3a:	; new closure is in rax
  3057 00000EC1 48890425[59120000]      	mov qword [free_var_47], rax
  3058 00000EC9 48B8-                   	mov rax, sob_void
  3058 00000ECB [0000000000000000] 
  3059                                  
  3060 00000ED3 4889C7                  	mov rdi, rax
  3061 00000ED6 E83E780100              	call print_sexpr_if_not_void
  3062 00000EDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3063 00000EE0 E8DF750100              	call malloc
  3064 00000EE5 50                      	push rax
  3065 00000EE6 BF00000000              	mov rdi, 8 * 0	; new rib
  3066 00000EEB E8D4750100              	call malloc
  3067 00000EF0 50                      	push rax
  3068 00000EF1 BF08000000              	mov rdi, 8 * 1	; extended env
  3069 00000EF6 E8C9750100              	call malloc
  3070 00000EFB 488B7D10                	mov rdi, ENV
  3071 00000EFF BE00000000              	mov rsi, 0
  3072 00000F04 BA01000000              	mov rdx, 1
  3073                                  .L_lambda_simple_env_loop_0a3b:	; ext_env[i + 1] <-- env[i]
  3074 00000F09 4883FE00                	cmp rsi, 0
  3075 00000F0D 7410                    	je .L_lambda_simple_env_end_0a3b
  3076 00000F0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3077 00000F13 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3078 00000F17 48FFC6                  	inc rsi
  3079 00000F1A 48FFC2                  	inc rdx
  3080 00000F1D EBEA                    	jmp .L_lambda_simple_env_loop_0a3b
  3081                                  .L_lambda_simple_env_end_0a3b:
  3082 00000F1F 5B                      	pop rbx
  3083 00000F20 BE00000000              	mov rsi, 0
  3084                                  .L_lambda_simple_params_loop_0a3b:	; copy params
  3085 00000F25 4883FE00                	cmp rsi, 0
  3086 00000F29 740E                    	je .L_lambda_simple_params_end_0a3b
  3087 00000F2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3088 00000F30 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3089 00000F34 48FFC6                  	inc rsi
  3090 00000F37 EBEC                    	jmp .L_lambda_simple_params_loop_0a3b
  3091                                  .L_lambda_simple_params_end_0a3b:
  3092 00000F39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3093 00000F3C 4889C3                  	mov rbx, rax
  3094 00000F3F 58                      	pop rax
  3095 00000F40 C60004                  	mov byte [rax], T_closure
  3096 00000F43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3097 00000F47 48C74009[540F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3b
  3098 00000F4F E9AA000000              	jmp .L_lambda_simple_end_0a3b
  3099                                  .L_lambda_simple_code_0a3b:	; lambda-simple body
  3100 00000F54 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3101 00000F5A 740B                    	je .L_lambda_simple_arity_check_ok_0a3b
  3102 00000F5C FF742410                	push qword [rsp + 8 * 2]
  3103 00000F60 6A01                    	push 1
  3104 00000F62 E916750100              	jmp L_error_incorrect_arity_simple
  3105                                  .L_lambda_simple_arity_check_ok_0a3b:
  3106 00000F67 C8000000                	enter 0, 0
  3107                                  	; preparing a tail-call
  3108                                  	; preparing a non-tail-call
  3109 00000F6B 488B4520                	mov rax, PARAM(0)	; param x
  3110 00000F6F 50                      	push rax
  3111 00000F70 6A01                    	push 1	; arg count
  3112 00000F72 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3113 00000F7A 803805                  	cmp byte [rax], T_undefined
  3114 00000F7D 0F8414740100            	je L_error_fvar_undefined
  3115 00000F83 803804                  	cmp byte [rax], T_closure
  3116 00000F86 0F858F740100            	jne L_error_non_closure
  3117 00000F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3118 00000F8F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3119 00000F92 50                      	push rax
  3120 00000F93 6A01                    	push 1	; arg count
  3121 00000F95 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  3122 00000F9D 803805                  	cmp byte [rax], T_undefined
  3123 00000FA0 0F84F1730100            	je L_error_fvar_undefined
  3124 00000FA6 803804                  	cmp byte [rax], T_closure
  3125 00000FA9 0F856C740100            	jne L_error_non_closure
  3126 00000FAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  3127 00000FB2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3128 00000FB5 FF7500                  	push qword[rbp]
  3129 00000FB8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3130 00000FBB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3131 00000FBF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3132 00000FC3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3133 00000FC7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3134 00000FCA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3135 00000FCD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3136 00000FD2 4983C103                	add r9, 3 	 ;for getting to the params
  3137 00000FD6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3138 00000FDA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3139                                  .L_tc_recycle_frame_loop_0e48:
  3140 00000FDD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3141 00000FE0 7410                    	je .L_tc_recycle_frame_done_0e48
  3142 00000FE2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3143 00000FE5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3144 00000FE8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3145 00000FEC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3146 00000FF0 EBEB                    	jmp .L_tc_recycle_frame_loop_0e48
  3147                                  .L_tc_recycle_frame_done_0e48:
  3148 00000FF2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3149 00000FF3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3150 00000FF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3151 00000FFA C9                      	leave
  3152 00000FFB C21800                  	ret AND_KILL_FRAME(1)
  3153                                  .L_lambda_simple_end_0a3b:	; new closure is in rax
  3154 00000FFE 48890425[AE120000]      	mov qword [free_var_52], rax
  3155 00001006 48B8-                   	mov rax, sob_void
  3155 00001008 [0000000000000000] 
  3156                                  
  3157 00001010 4889C7                  	mov rdi, rax
  3158 00001013 E801770100              	call print_sexpr_if_not_void
  3159 00001018 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3160 0000101D E8A2740100              	call malloc
  3161 00001022 50                      	push rax
  3162 00001023 BF00000000              	mov rdi, 8 * 0	; new rib
  3163 00001028 E897740100              	call malloc
  3164 0000102D 50                      	push rax
  3165 0000102E BF08000000              	mov rdi, 8 * 1	; extended env
  3166 00001033 E88C740100              	call malloc
  3167 00001038 488B7D10                	mov rdi, ENV
  3168 0000103C BE00000000              	mov rsi, 0
  3169 00001041 BA01000000              	mov rdx, 1
  3170                                  .L_lambda_simple_env_loop_0a3c:	; ext_env[i + 1] <-- env[i]
  3171 00001046 4883FE00                	cmp rsi, 0
  3172 0000104A 7410                    	je .L_lambda_simple_env_end_0a3c
  3173 0000104C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3174 00001050 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3175 00001054 48FFC6                  	inc rsi
  3176 00001057 48FFC2                  	inc rdx
  3177 0000105A EBEA                    	jmp .L_lambda_simple_env_loop_0a3c
  3178                                  .L_lambda_simple_env_end_0a3c:
  3179 0000105C 5B                      	pop rbx
  3180 0000105D BE00000000              	mov rsi, 0
  3181                                  .L_lambda_simple_params_loop_0a3c:	; copy params
  3182 00001062 4883FE00                	cmp rsi, 0
  3183 00001066 740E                    	je .L_lambda_simple_params_end_0a3c
  3184 00001068 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3185 0000106D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3186 00001071 48FFC6                  	inc rsi
  3187 00001074 EBEC                    	jmp .L_lambda_simple_params_loop_0a3c
  3188                                  .L_lambda_simple_params_end_0a3c:
  3189 00001076 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3190 00001079 4889C3                  	mov rbx, rax
  3191 0000107C 58                      	pop rax
  3192 0000107D C60004                  	mov byte [rax], T_closure
  3193 00001080 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3194 00001084 48C74009[91100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3c
  3195 0000108C E9AA000000              	jmp .L_lambda_simple_end_0a3c
  3196                                  .L_lambda_simple_code_0a3c:	; lambda-simple body
  3197 00001091 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3198 00001097 740B                    	je .L_lambda_simple_arity_check_ok_0a3c
  3199 00001099 FF742410                	push qword [rsp + 8 * 2]
  3200 0000109D 6A01                    	push 1
  3201 0000109F E9D9730100              	jmp L_error_incorrect_arity_simple
  3202                                  .L_lambda_simple_arity_check_ok_0a3c:
  3203 000010A4 C8000000                	enter 0, 0
  3204                                  	; preparing a tail-call
  3205                                  	; preparing a non-tail-call
  3206 000010A8 488B4520                	mov rax, PARAM(0)	; param x
  3207 000010AC 50                      	push rax
  3208 000010AD 6A01                    	push 1	; arg count
  3209 000010AF 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  3210 000010B7 803805                  	cmp byte [rax], T_undefined
  3211 000010BA 0F84D7720100            	je L_error_fvar_undefined
  3212 000010C0 803804                  	cmp byte [rax], T_closure
  3213 000010C3 0F8552730100            	jne L_error_non_closure
  3214 000010C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3215 000010CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3216 000010CF 50                      	push rax
  3217 000010D0 6A01                    	push 1	; arg count
  3218 000010D2 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  3219 000010DA 803805                  	cmp byte [rax], T_undefined
  3220 000010DD 0F84B4720100            	je L_error_fvar_undefined
  3221 000010E3 803804                  	cmp byte [rax], T_closure
  3222 000010E6 0F852F730100            	jne L_error_non_closure
  3223 000010EC FF7001                  	push SOB_CLOSURE_ENV(rax)
  3224 000010EF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3225 000010F2 FF7500                  	push qword[rbp]
  3226 000010F5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3227 000010F8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3228 000010FC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3229 00001100 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3230 00001104 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3231 00001107 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3232 0000110A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3233 0000110F 4983C103                	add r9, 3 	 ;for getting to the params
  3234 00001113 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3235 00001117 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3236                                  .L_tc_recycle_frame_loop_0e49:
  3237 0000111A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3238 0000111D 7410                    	je .L_tc_recycle_frame_done_0e49
  3239 0000111F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3240 00001122 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3241 00001125 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3242 00001129 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3243 0000112D EBEB                    	jmp .L_tc_recycle_frame_loop_0e49
  3244                                  .L_tc_recycle_frame_done_0e49:
  3245 0000112F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3246 00001130 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3247 00001134 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3248 00001137 C9                      	leave
  3249 00001138 C21800                  	ret AND_KILL_FRAME(1)
  3250                                  .L_lambda_simple_end_0a3c:	; new closure is in rax
  3251 0000113B 48890425[E1120000]      	mov qword [free_var_55], rax
  3252 00001143 48B8-                   	mov rax, sob_void
  3252 00001145 [0000000000000000] 
  3253                                  
  3254 0000114D 4889C7                  	mov rdi, rax
  3255 00001150 E8C4750100              	call print_sexpr_if_not_void
  3256 00001155 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3257 0000115A E865730100              	call malloc
  3258 0000115F 50                      	push rax
  3259 00001160 BF00000000              	mov rdi, 8 * 0	; new rib
  3260 00001165 E85A730100              	call malloc
  3261 0000116A 50                      	push rax
  3262 0000116B BF08000000              	mov rdi, 8 * 1	; extended env
  3263 00001170 E84F730100              	call malloc
  3264 00001175 488B7D10                	mov rdi, ENV
  3265 00001179 BE00000000              	mov rsi, 0
  3266 0000117E BA01000000              	mov rdx, 1
  3267                                  .L_lambda_simple_env_loop_0a3d:	; ext_env[i + 1] <-- env[i]
  3268 00001183 4883FE00                	cmp rsi, 0
  3269 00001187 7410                    	je .L_lambda_simple_env_end_0a3d
  3270 00001189 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3271 0000118D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3272 00001191 48FFC6                  	inc rsi
  3273 00001194 48FFC2                  	inc rdx
  3274 00001197 EBEA                    	jmp .L_lambda_simple_env_loop_0a3d
  3275                                  .L_lambda_simple_env_end_0a3d:
  3276 00001199 5B                      	pop rbx
  3277 0000119A BE00000000              	mov rsi, 0
  3278                                  .L_lambda_simple_params_loop_0a3d:	; copy params
  3279 0000119F 4883FE00                	cmp rsi, 0
  3280 000011A3 740E                    	je .L_lambda_simple_params_end_0a3d
  3281 000011A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3282 000011AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3283 000011AE 48FFC6                  	inc rsi
  3284 000011B1 EBEC                    	jmp .L_lambda_simple_params_loop_0a3d
  3285                                  .L_lambda_simple_params_end_0a3d:
  3286 000011B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3287 000011B6 4889C3                  	mov rbx, rax
  3288 000011B9 58                      	pop rax
  3289 000011BA C60004                  	mov byte [rax], T_closure
  3290 000011BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3291 000011C1 48C74009[CE110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3d
  3292 000011C9 E9AA000000              	jmp .L_lambda_simple_end_0a3d
  3293                                  .L_lambda_simple_code_0a3d:	; lambda-simple body
  3294 000011CE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3295 000011D4 740B                    	je .L_lambda_simple_arity_check_ok_0a3d
  3296 000011D6 FF742410                	push qword [rsp + 8 * 2]
  3297 000011DA 6A01                    	push 1
  3298 000011DC E99C720100              	jmp L_error_incorrect_arity_simple
  3299                                  .L_lambda_simple_arity_check_ok_0a3d:
  3300 000011E1 C8000000                	enter 0, 0
  3301                                  	; preparing a tail-call
  3302                                  	; preparing a non-tail-call
  3303 000011E5 488B4520                	mov rax, PARAM(0)	; param x
  3304 000011E9 50                      	push rax
  3305 000011EA 6A01                    	push 1	; arg count
  3306 000011EC 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  3307 000011F4 803805                  	cmp byte [rax], T_undefined
  3308 000011F7 0F849A710100            	je L_error_fvar_undefined
  3309 000011FD 803804                  	cmp byte [rax], T_closure
  3310 00001200 0F8515720100            	jne L_error_non_closure
  3311 00001206 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3312 00001209 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3313 0000120C 50                      	push rax
  3314 0000120D 6A01                    	push 1	; arg count
  3315 0000120F 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  3316 00001217 803805                  	cmp byte [rax], T_undefined
  3317 0000121A 0F8477710100            	je L_error_fvar_undefined
  3318 00001220 803804                  	cmp byte [rax], T_closure
  3319 00001223 0F85F2710100            	jne L_error_non_closure
  3320 00001229 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3321 0000122C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3322 0000122F FF7500                  	push qword[rbp]
  3323 00001232 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3324 00001235 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3325 00001239 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3326 0000123D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3327 00001241 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3328 00001244 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3329 00001247 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3330 0000124C 4983C103                	add r9, 3 	 ;for getting to the params
  3331 00001250 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3332 00001254 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3333                                  .L_tc_recycle_frame_loop_0e4a:
  3334 00001257 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3335 0000125A 7410                    	je .L_tc_recycle_frame_done_0e4a
  3336 0000125C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3337 0000125F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3338 00001262 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3339 00001266 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3340 0000126A EBEB                    	jmp .L_tc_recycle_frame_loop_0e4a
  3341                                  .L_tc_recycle_frame_done_0e4a:
  3342 0000126C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3343 0000126D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3344 00001271 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3345 00001274 C9                      	leave
  3346 00001275 C21800                  	ret AND_KILL_FRAME(1)
  3347                                  .L_lambda_simple_end_0a3d:	; new closure is in rax
  3348 00001278 48890425[25130000]      	mov qword [free_var_59], rax
  3349 00001280 48B8-                   	mov rax, sob_void
  3349 00001282 [0000000000000000] 
  3350                                  
  3351 0000128A 4889C7                  	mov rdi, rax
  3352 0000128D E887740100              	call print_sexpr_if_not_void
  3353 00001292 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3354 00001297 E828720100              	call malloc
  3355 0000129C 50                      	push rax
  3356 0000129D BF00000000              	mov rdi, 8 * 0	; new rib
  3357 000012A2 E81D720100              	call malloc
  3358 000012A7 50                      	push rax
  3359 000012A8 BF08000000              	mov rdi, 8 * 1	; extended env
  3360 000012AD E812720100              	call malloc
  3361 000012B2 488B7D10                	mov rdi, ENV
  3362 000012B6 BE00000000              	mov rsi, 0
  3363 000012BB BA01000000              	mov rdx, 1
  3364                                  .L_lambda_simple_env_loop_0a3e:	; ext_env[i + 1] <-- env[i]
  3365 000012C0 4883FE00                	cmp rsi, 0
  3366 000012C4 7410                    	je .L_lambda_simple_env_end_0a3e
  3367 000012C6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3368 000012CA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3369 000012CE 48FFC6                  	inc rsi
  3370 000012D1 48FFC2                  	inc rdx
  3371 000012D4 EBEA                    	jmp .L_lambda_simple_env_loop_0a3e
  3372                                  .L_lambda_simple_env_end_0a3e:
  3373 000012D6 5B                      	pop rbx
  3374 000012D7 BE00000000              	mov rsi, 0
  3375                                  .L_lambda_simple_params_loop_0a3e:	; copy params
  3376 000012DC 4883FE00                	cmp rsi, 0
  3377 000012E0 740E                    	je .L_lambda_simple_params_end_0a3e
  3378 000012E2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3379 000012E7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3380 000012EB 48FFC6                  	inc rsi
  3381 000012EE EBEC                    	jmp .L_lambda_simple_params_loop_0a3e
  3382                                  .L_lambda_simple_params_end_0a3e:
  3383 000012F0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3384 000012F3 4889C3                  	mov rbx, rax
  3385 000012F6 58                      	pop rax
  3386 000012F7 C60004                  	mov byte [rax], T_closure
  3387 000012FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3388 000012FE 48C74009[0B130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3e
  3389 00001306 E9AA000000              	jmp .L_lambda_simple_end_0a3e
  3390                                  .L_lambda_simple_code_0a3e:	; lambda-simple body
  3391 0000130B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3392 00001311 740B                    	je .L_lambda_simple_arity_check_ok_0a3e
  3393 00001313 FF742410                	push qword [rsp + 8 * 2]
  3394 00001317 6A01                    	push 1
  3395 00001319 E95F710100              	jmp L_error_incorrect_arity_simple
  3396                                  .L_lambda_simple_arity_check_ok_0a3e:
  3397 0000131E C8000000                	enter 0, 0
  3398                                  	; preparing a tail-call
  3399                                  	; preparing a non-tail-call
  3400 00001322 488B4520                	mov rax, PARAM(0)	; param x
  3401 00001326 50                      	push rax
  3402 00001327 6A01                    	push 1	; arg count
  3403 00001329 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  3404 00001331 803805                  	cmp byte [rax], T_undefined
  3405 00001334 0F845D700100            	je L_error_fvar_undefined
  3406 0000133A 803804                  	cmp byte [rax], T_closure
  3407 0000133D 0F85D8700100            	jne L_error_non_closure
  3408 00001343 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3409 00001346 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3410 00001349 50                      	push rax
  3411 0000134A 6A01                    	push 1	; arg count
  3412 0000134C 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  3413 00001354 803805                  	cmp byte [rax], T_undefined
  3414 00001357 0F843A700100            	je L_error_fvar_undefined
  3415 0000135D 803804                  	cmp byte [rax], T_closure
  3416 00001360 0F85B5700100            	jne L_error_non_closure
  3417 00001366 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3418 00001369 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3419 0000136C FF7500                  	push qword[rbp]
  3420 0000136F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3421 00001372 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3422 00001376 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3423 0000137A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3424 0000137E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3425 00001381 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3426 00001384 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3427 00001389 4983C103                	add r9, 3 	 ;for getting to the params
  3428 0000138D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3429 00001391 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3430                                  .L_tc_recycle_frame_loop_0e4b:
  3431 00001394 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3432 00001397 7410                    	je .L_tc_recycle_frame_done_0e4b
  3433 00001399 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3434 0000139C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3435 0000139F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3436 000013A3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3437 000013A7 EBEB                    	jmp .L_tc_recycle_frame_loop_0e4b
  3438                                  .L_tc_recycle_frame_done_0e4b:
  3439 000013A9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3440 000013AA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3441 000013AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3442 000013B1 C9                      	leave
  3443 000013B2 C21800                  	ret AND_KILL_FRAME(1)
  3444                                  .L_lambda_simple_end_0a3e:	; new closure is in rax
  3445 000013B5 48890425[58130000]      	mov qword [free_var_62], rax
  3446 000013BD 48B8-                   	mov rax, sob_void
  3446 000013BF [0000000000000000] 
  3447                                  
  3448 000013C7 4889C7                  	mov rdi, rax
  3449 000013CA E84A730100              	call print_sexpr_if_not_void
  3450 000013CF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3451 000013D4 E8EB700100              	call malloc
  3452 000013D9 50                      	push rax
  3453 000013DA BF00000000              	mov rdi, 8 * 0	; new rib
  3454 000013DF E8E0700100              	call malloc
  3455 000013E4 50                      	push rax
  3456 000013E5 BF08000000              	mov rdi, 8 * 1	; extended env
  3457 000013EA E8D5700100              	call malloc
  3458 000013EF 488B7D10                	mov rdi, ENV
  3459 000013F3 BE00000000              	mov rsi, 0
  3460 000013F8 BA01000000              	mov rdx, 1
  3461                                  .L_lambda_simple_env_loop_0a3f:	; ext_env[i + 1] <-- env[i]
  3462 000013FD 4883FE00                	cmp rsi, 0
  3463 00001401 7410                    	je .L_lambda_simple_env_end_0a3f
  3464 00001403 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3465 00001407 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3466 0000140B 48FFC6                  	inc rsi
  3467 0000140E 48FFC2                  	inc rdx
  3468 00001411 EBEA                    	jmp .L_lambda_simple_env_loop_0a3f
  3469                                  .L_lambda_simple_env_end_0a3f:
  3470 00001413 5B                      	pop rbx
  3471 00001414 BE00000000              	mov rsi, 0
  3472                                  .L_lambda_simple_params_loop_0a3f:	; copy params
  3473 00001419 4883FE00                	cmp rsi, 0
  3474 0000141D 740E                    	je .L_lambda_simple_params_end_0a3f
  3475 0000141F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3476 00001424 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3477 00001428 48FFC6                  	inc rsi
  3478 0000142B EBEC                    	jmp .L_lambda_simple_params_loop_0a3f
  3479                                  .L_lambda_simple_params_end_0a3f:
  3480 0000142D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3481 00001430 4889C3                  	mov rbx, rax
  3482 00001433 58                      	pop rax
  3483 00001434 C60004                  	mov byte [rax], T_closure
  3484 00001437 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3485 0000143B 48C74009[48140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a3f
  3486 00001443 E9AA000000              	jmp .L_lambda_simple_end_0a3f
  3487                                  .L_lambda_simple_code_0a3f:	; lambda-simple body
  3488 00001448 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3489 0000144E 740B                    	je .L_lambda_simple_arity_check_ok_0a3f
  3490 00001450 FF742410                	push qword [rsp + 8 * 2]
  3491 00001454 6A01                    	push 1
  3492 00001456 E922700100              	jmp L_error_incorrect_arity_simple
  3493                                  .L_lambda_simple_arity_check_ok_0a3f:
  3494 0000145B C8000000                	enter 0, 0
  3495                                  	; preparing a tail-call
  3496                                  	; preparing a non-tail-call
  3497 0000145F 488B4520                	mov rax, PARAM(0)	; param x
  3498 00001463 50                      	push rax
  3499 00001464 6A01                    	push 1	; arg count
  3500 00001466 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3501 0000146E 803805                  	cmp byte [rax], T_undefined
  3502 00001471 0F84206F0100            	je L_error_fvar_undefined
  3503 00001477 803804                  	cmp byte [rax], T_closure
  3504 0000147A 0F859B6F0100            	jne L_error_non_closure
  3505 00001480 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3506 00001483 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3507 00001486 50                      	push rax
  3508 00001487 6A01                    	push 1	; arg count
  3509 00001489 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3510 00001491 803805                  	cmp byte [rax], T_undefined
  3511 00001494 0F84FD6E0100            	je L_error_fvar_undefined
  3512 0000149A 803804                  	cmp byte [rax], T_closure
  3513 0000149D 0F85786F0100            	jne L_error_non_closure
  3514 000014A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3515 000014A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3516 000014A9 FF7500                  	push qword[rbp]
  3517 000014AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3518 000014AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3519 000014B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3520 000014B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3521 000014BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3522 000014BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3523 000014C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3524 000014C6 4983C103                	add r9, 3 	 ;for getting to the params
  3525 000014CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3526 000014CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3527                                  .L_tc_recycle_frame_loop_0e4c:
  3528 000014D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3529 000014D4 7410                    	je .L_tc_recycle_frame_done_0e4c
  3530 000014D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3531 000014D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3532 000014DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3533 000014E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3534 000014E4 EBEB                    	jmp .L_tc_recycle_frame_loop_0e4c
  3535                                  .L_tc_recycle_frame_done_0e4c:
  3536 000014E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3537 000014E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3538 000014EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3539 000014EE C9                      	leave
  3540 000014EF C21800                  	ret AND_KILL_FRAME(1)
  3541                                  .L_lambda_simple_end_0a3f:	; new closure is in rax
  3542 000014F2 48890425[8D110000]      	mov qword [free_var_35], rax
  3543 000014FA 48B8-                   	mov rax, sob_void
  3543 000014FC [0000000000000000] 
  3544                                  
  3545 00001504 4889C7                  	mov rdi, rax
  3546 00001507 E80D720100              	call print_sexpr_if_not_void
  3547 0000150C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3548 00001511 E8AE6F0100              	call malloc
  3549 00001516 50                      	push rax
  3550 00001517 BF00000000              	mov rdi, 8 * 0	; new rib
  3551 0000151C E8A36F0100              	call malloc
  3552 00001521 50                      	push rax
  3553 00001522 BF08000000              	mov rdi, 8 * 1	; extended env
  3554 00001527 E8986F0100              	call malloc
  3555 0000152C 488B7D10                	mov rdi, ENV
  3556 00001530 BE00000000              	mov rsi, 0
  3557 00001535 BA01000000              	mov rdx, 1
  3558                                  .L_lambda_simple_env_loop_0a40:	; ext_env[i + 1] <-- env[i]
  3559 0000153A 4883FE00                	cmp rsi, 0
  3560 0000153E 7410                    	je .L_lambda_simple_env_end_0a40
  3561 00001540 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3562 00001544 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3563 00001548 48FFC6                  	inc rsi
  3564 0000154B 48FFC2                  	inc rdx
  3565 0000154E EBEA                    	jmp .L_lambda_simple_env_loop_0a40
  3566                                  .L_lambda_simple_env_end_0a40:
  3567 00001550 5B                      	pop rbx
  3568 00001551 BE00000000              	mov rsi, 0
  3569                                  .L_lambda_simple_params_loop_0a40:	; copy params
  3570 00001556 4883FE00                	cmp rsi, 0
  3571 0000155A 740E                    	je .L_lambda_simple_params_end_0a40
  3572 0000155C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3573 00001561 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3574 00001565 48FFC6                  	inc rsi
  3575 00001568 EBEC                    	jmp .L_lambda_simple_params_loop_0a40
  3576                                  .L_lambda_simple_params_end_0a40:
  3577 0000156A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3578 0000156D 4889C3                  	mov rbx, rax
  3579 00001570 58                      	pop rax
  3580 00001571 C60004                  	mov byte [rax], T_closure
  3581 00001574 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3582 00001578 48C74009[85150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a40
  3583 00001580 E9AA000000              	jmp .L_lambda_simple_end_0a40
  3584                                  .L_lambda_simple_code_0a40:	; lambda-simple body
  3585 00001585 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3586 0000158B 740B                    	je .L_lambda_simple_arity_check_ok_0a40
  3587 0000158D FF742410                	push qword [rsp + 8 * 2]
  3588 00001591 6A01                    	push 1
  3589 00001593 E9E56E0100              	jmp L_error_incorrect_arity_simple
  3590                                  .L_lambda_simple_arity_check_ok_0a40:
  3591 00001598 C8000000                	enter 0, 0
  3592                                  	; preparing a tail-call
  3593                                  	; preparing a non-tail-call
  3594 0000159C 488B4520                	mov rax, PARAM(0)	; param x
  3595 000015A0 50                      	push rax
  3596 000015A1 6A01                    	push 1	; arg count
  3597 000015A3 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  3598 000015AB 803805                  	cmp byte [rax], T_undefined
  3599 000015AE 0F84E36D0100            	je L_error_fvar_undefined
  3600 000015B4 803804                  	cmp byte [rax], T_closure
  3601 000015B7 0F855E6E0100            	jne L_error_non_closure
  3602 000015BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  3603 000015C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3604 000015C3 50                      	push rax
  3605 000015C4 6A01                    	push 1	; arg count
  3606 000015C6 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3607 000015CE 803805                  	cmp byte [rax], T_undefined
  3608 000015D1 0F84C06D0100            	je L_error_fvar_undefined
  3609 000015D7 803804                  	cmp byte [rax], T_closure
  3610 000015DA 0F853B6E0100            	jne L_error_non_closure
  3611 000015E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3612 000015E3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3613 000015E6 FF7500                  	push qword[rbp]
  3614 000015E9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3615 000015EC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3616 000015F0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3617 000015F4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3618 000015F8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3619 000015FB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3620 000015FE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3621 00001603 4983C103                	add r9, 3 	 ;for getting to the params
  3622 00001607 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3623 0000160B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3624                                  .L_tc_recycle_frame_loop_0e4d:
  3625 0000160E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3626 00001611 7410                    	je .L_tc_recycle_frame_done_0e4d
  3627 00001613 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3628 00001616 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3629 00001619 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3630 0000161D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3631 00001621 EBEB                    	jmp .L_tc_recycle_frame_loop_0e4d
  3632                                  .L_tc_recycle_frame_done_0e4d:
  3633 00001623 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3634 00001624 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3635 00001628 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3636 0000162B C9                      	leave
  3637 0000162C C21800                  	ret AND_KILL_FRAME(1)
  3638                                  .L_lambda_simple_end_0a40:	; new closure is in rax
  3639 0000162F 48890425[9E110000]      	mov qword [free_var_36], rax
  3640 00001637 48B8-                   	mov rax, sob_void
  3640 00001639 [0000000000000000] 
  3641                                  
  3642 00001641 4889C7                  	mov rdi, rax
  3643 00001644 E8D0700100              	call print_sexpr_if_not_void
  3644 00001649 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3645 0000164E E8716E0100              	call malloc
  3646 00001653 50                      	push rax
  3647 00001654 BF00000000              	mov rdi, 8 * 0	; new rib
  3648 00001659 E8666E0100              	call malloc
  3649 0000165E 50                      	push rax
  3650 0000165F BF08000000              	mov rdi, 8 * 1	; extended env
  3651 00001664 E85B6E0100              	call malloc
  3652 00001669 488B7D10                	mov rdi, ENV
  3653 0000166D BE00000000              	mov rsi, 0
  3654 00001672 BA01000000              	mov rdx, 1
  3655                                  .L_lambda_simple_env_loop_0a41:	; ext_env[i + 1] <-- env[i]
  3656 00001677 4883FE00                	cmp rsi, 0
  3657 0000167B 7410                    	je .L_lambda_simple_env_end_0a41
  3658 0000167D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3659 00001681 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3660 00001685 48FFC6                  	inc rsi
  3661 00001688 48FFC2                  	inc rdx
  3662 0000168B EBEA                    	jmp .L_lambda_simple_env_loop_0a41
  3663                                  .L_lambda_simple_env_end_0a41:
  3664 0000168D 5B                      	pop rbx
  3665 0000168E BE00000000              	mov rsi, 0
  3666                                  .L_lambda_simple_params_loop_0a41:	; copy params
  3667 00001693 4883FE00                	cmp rsi, 0
  3668 00001697 740E                    	je .L_lambda_simple_params_end_0a41
  3669 00001699 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3670 0000169E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3671 000016A2 48FFC6                  	inc rsi
  3672 000016A5 EBEC                    	jmp .L_lambda_simple_params_loop_0a41
  3673                                  .L_lambda_simple_params_end_0a41:
  3674 000016A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3675 000016AA 4889C3                  	mov rbx, rax
  3676 000016AD 58                      	pop rax
  3677 000016AE C60004                  	mov byte [rax], T_closure
  3678 000016B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3679 000016B5 48C74009[C2160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a41
  3680 000016BD E9AA000000              	jmp .L_lambda_simple_end_0a41
  3681                                  .L_lambda_simple_code_0a41:	; lambda-simple body
  3682 000016C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3683 000016C8 740B                    	je .L_lambda_simple_arity_check_ok_0a41
  3684 000016CA FF742410                	push qword [rsp + 8 * 2]
  3685 000016CE 6A01                    	push 1
  3686 000016D0 E9A86D0100              	jmp L_error_incorrect_arity_simple
  3687                                  .L_lambda_simple_arity_check_ok_0a41:
  3688 000016D5 C8000000                	enter 0, 0
  3689                                  	; preparing a tail-call
  3690                                  	; preparing a non-tail-call
  3691 000016D9 488B4520                	mov rax, PARAM(0)	; param x
  3692 000016DD 50                      	push rax
  3693 000016DE 6A01                    	push 1	; arg count
  3694 000016E0 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  3695 000016E8 803805                  	cmp byte [rax], T_undefined
  3696 000016EB 0F84A66C0100            	je L_error_fvar_undefined
  3697 000016F1 803804                  	cmp byte [rax], T_closure
  3698 000016F4 0F85216D0100            	jne L_error_non_closure
  3699 000016FA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3700 000016FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3701 00001700 50                      	push rax
  3702 00001701 6A01                    	push 1	; arg count
  3703 00001703 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3704 0000170B 803805                  	cmp byte [rax], T_undefined
  3705 0000170E 0F84836C0100            	je L_error_fvar_undefined
  3706 00001714 803804                  	cmp byte [rax], T_closure
  3707 00001717 0F85FE6C0100            	jne L_error_non_closure
  3708 0000171D FF7001                  	push SOB_CLOSURE_ENV(rax)
  3709 00001720 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3710 00001723 FF7500                  	push qword[rbp]
  3711 00001726 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3712 00001729 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3713 0000172D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3714 00001731 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3715 00001735 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3716 00001738 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3717 0000173B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3718 00001740 4983C103                	add r9, 3 	 ;for getting to the params
  3719 00001744 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3720 00001748 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3721                                  .L_tc_recycle_frame_loop_0e4e:
  3722 0000174B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3723 0000174E 7410                    	je .L_tc_recycle_frame_done_0e4e
  3724 00001750 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3725 00001753 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3726 00001756 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3727 0000175A 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3728 0000175E EBEB                    	jmp .L_tc_recycle_frame_loop_0e4e
  3729                                  .L_tc_recycle_frame_done_0e4e:
  3730 00001760 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3731 00001761 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3732 00001765 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3733 00001768 C9                      	leave
  3734 00001769 C21800                  	ret AND_KILL_FRAME(1)
  3735                                  .L_lambda_simple_end_0a41:	; new closure is in rax
  3736 0000176C 48890425[C0110000]      	mov qword [free_var_38], rax
  3737 00001774 48B8-                   	mov rax, sob_void
  3737 00001776 [0000000000000000] 
  3738                                  
  3739 0000177E 4889C7                  	mov rdi, rax
  3740 00001781 E8936F0100              	call print_sexpr_if_not_void
  3741 00001786 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3742 0000178B E8346D0100              	call malloc
  3743 00001790 50                      	push rax
  3744 00001791 BF00000000              	mov rdi, 8 * 0	; new rib
  3745 00001796 E8296D0100              	call malloc
  3746 0000179B 50                      	push rax
  3747 0000179C BF08000000              	mov rdi, 8 * 1	; extended env
  3748 000017A1 E81E6D0100              	call malloc
  3749 000017A6 488B7D10                	mov rdi, ENV
  3750 000017AA BE00000000              	mov rsi, 0
  3751 000017AF BA01000000              	mov rdx, 1
  3752                                  .L_lambda_simple_env_loop_0a42:	; ext_env[i + 1] <-- env[i]
  3753 000017B4 4883FE00                	cmp rsi, 0
  3754 000017B8 7410                    	je .L_lambda_simple_env_end_0a42
  3755 000017BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3756 000017BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3757 000017C2 48FFC6                  	inc rsi
  3758 000017C5 48FFC2                  	inc rdx
  3759 000017C8 EBEA                    	jmp .L_lambda_simple_env_loop_0a42
  3760                                  .L_lambda_simple_env_end_0a42:
  3761 000017CA 5B                      	pop rbx
  3762 000017CB BE00000000              	mov rsi, 0
  3763                                  .L_lambda_simple_params_loop_0a42:	; copy params
  3764 000017D0 4883FE00                	cmp rsi, 0
  3765 000017D4 740E                    	je .L_lambda_simple_params_end_0a42
  3766 000017D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3767 000017DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3768 000017DF 48FFC6                  	inc rsi
  3769 000017E2 EBEC                    	jmp .L_lambda_simple_params_loop_0a42
  3770                                  .L_lambda_simple_params_end_0a42:
  3771 000017E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3772 000017E7 4889C3                  	mov rbx, rax
  3773 000017EA 58                      	pop rax
  3774 000017EB C60004                  	mov byte [rax], T_closure
  3775 000017EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3776 000017F2 48C74009[FF170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a42
  3777 000017FA E9AA000000              	jmp .L_lambda_simple_end_0a42
  3778                                  .L_lambda_simple_code_0a42:	; lambda-simple body
  3779 000017FF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3780 00001805 740B                    	je .L_lambda_simple_arity_check_ok_0a42
  3781 00001807 FF742410                	push qword [rsp + 8 * 2]
  3782 0000180B 6A01                    	push 1
  3783 0000180D E96B6C0100              	jmp L_error_incorrect_arity_simple
  3784                                  .L_lambda_simple_arity_check_ok_0a42:
  3785 00001812 C8000000                	enter 0, 0
  3786                                  	; preparing a tail-call
  3787                                  	; preparing a non-tail-call
  3788 00001816 488B4520                	mov rax, PARAM(0)	; param x
  3789 0000181A 50                      	push rax
  3790 0000181B 6A01                    	push 1	; arg count
  3791 0000181D 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  3792 00001825 803805                  	cmp byte [rax], T_undefined
  3793 00001828 0F84696B0100            	je L_error_fvar_undefined
  3794 0000182E 803804                  	cmp byte [rax], T_closure
  3795 00001831 0F85E46B0100            	jne L_error_non_closure
  3796 00001837 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3797 0000183A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3798 0000183D 50                      	push rax
  3799 0000183E 6A01                    	push 1	; arg count
  3800 00001840 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3801 00001848 803805                  	cmp byte [rax], T_undefined
  3802 0000184B 0F84466B0100            	je L_error_fvar_undefined
  3803 00001851 803804                  	cmp byte [rax], T_closure
  3804 00001854 0F85C16B0100            	jne L_error_non_closure
  3805 0000185A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3806 0000185D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3807 00001860 FF7500                  	push qword[rbp]
  3808 00001863 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3809 00001866 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3810 0000186A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3811 0000186E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3812 00001872 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3813 00001875 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3814 00001878 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3815 0000187D 4983C103                	add r9, 3 	 ;for getting to the params
  3816 00001881 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3817 00001885 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3818                                  .L_tc_recycle_frame_loop_0e4f:
  3819 00001888 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3820 0000188B 7410                    	je .L_tc_recycle_frame_done_0e4f
  3821 0000188D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3822 00001890 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3823 00001893 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3824 00001897 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3825 0000189B EBEB                    	jmp .L_tc_recycle_frame_loop_0e4f
  3826                                  .L_tc_recycle_frame_done_0e4f:
  3827 0000189D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3828 0000189E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3829 000018A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3830 000018A5 C9                      	leave
  3831 000018A6 C21800                  	ret AND_KILL_FRAME(1)
  3832                                  .L_lambda_simple_end_0a42:	; new closure is in rax
  3833 000018A9 48890425[D1110000]      	mov qword [free_var_39], rax
  3834 000018B1 48B8-                   	mov rax, sob_void
  3834 000018B3 [0000000000000000] 
  3835                                  
  3836 000018BB 4889C7                  	mov rdi, rax
  3837 000018BE E8566E0100              	call print_sexpr_if_not_void
  3838 000018C3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3839 000018C8 E8F76B0100              	call malloc
  3840 000018CD 50                      	push rax
  3841 000018CE BF00000000              	mov rdi, 8 * 0	; new rib
  3842 000018D3 E8EC6B0100              	call malloc
  3843 000018D8 50                      	push rax
  3844 000018D9 BF08000000              	mov rdi, 8 * 1	; extended env
  3845 000018DE E8E16B0100              	call malloc
  3846 000018E3 488B7D10                	mov rdi, ENV
  3847 000018E7 BE00000000              	mov rsi, 0
  3848 000018EC BA01000000              	mov rdx, 1
  3849                                  .L_lambda_simple_env_loop_0a43:	; ext_env[i + 1] <-- env[i]
  3850 000018F1 4883FE00                	cmp rsi, 0
  3851 000018F5 7410                    	je .L_lambda_simple_env_end_0a43
  3852 000018F7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3853 000018FB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3854 000018FF 48FFC6                  	inc rsi
  3855 00001902 48FFC2                  	inc rdx
  3856 00001905 EBEA                    	jmp .L_lambda_simple_env_loop_0a43
  3857                                  .L_lambda_simple_env_end_0a43:
  3858 00001907 5B                      	pop rbx
  3859 00001908 BE00000000              	mov rsi, 0
  3860                                  .L_lambda_simple_params_loop_0a43:	; copy params
  3861 0000190D 4883FE00                	cmp rsi, 0
  3862 00001911 740E                    	je .L_lambda_simple_params_end_0a43
  3863 00001913 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3864 00001918 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3865 0000191C 48FFC6                  	inc rsi
  3866 0000191F EBEC                    	jmp .L_lambda_simple_params_loop_0a43
  3867                                  .L_lambda_simple_params_end_0a43:
  3868 00001921 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3869 00001924 4889C3                  	mov rbx, rax
  3870 00001927 58                      	pop rax
  3871 00001928 C60004                  	mov byte [rax], T_closure
  3872 0000192B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3873 0000192F 48C74009[3C190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a43
  3874 00001937 E9AA000000              	jmp .L_lambda_simple_end_0a43
  3875                                  .L_lambda_simple_code_0a43:	; lambda-simple body
  3876 0000193C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3877 00001942 740B                    	je .L_lambda_simple_arity_check_ok_0a43
  3878 00001944 FF742410                	push qword [rsp + 8 * 2]
  3879 00001948 6A01                    	push 1
  3880 0000194A E92E6B0100              	jmp L_error_incorrect_arity_simple
  3881                                  .L_lambda_simple_arity_check_ok_0a43:
  3882 0000194F C8000000                	enter 0, 0
  3883                                  	; preparing a tail-call
  3884                                  	; preparing a non-tail-call
  3885 00001953 488B4520                	mov rax, PARAM(0)	; param x
  3886 00001957 50                      	push rax
  3887 00001958 6A01                    	push 1	; arg count
  3888 0000195A 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  3889 00001962 803805                  	cmp byte [rax], T_undefined
  3890 00001965 0F842C6A0100            	je L_error_fvar_undefined
  3891 0000196B 803804                  	cmp byte [rax], T_closure
  3892 0000196E 0F85A76A0100            	jne L_error_non_closure
  3893 00001974 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3894 00001977 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3895 0000197A 50                      	push rax
  3896 0000197B 6A01                    	push 1	; arg count
  3897 0000197D 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  3898 00001985 803805                  	cmp byte [rax], T_undefined
  3899 00001988 0F84096A0100            	je L_error_fvar_undefined
  3900 0000198E 803804                  	cmp byte [rax], T_closure
  3901 00001991 0F85846A0100            	jne L_error_non_closure
  3902 00001997 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3903 0000199A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  3904 0000199D FF7500                  	push qword[rbp]
  3905 000019A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  3906 000019A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  3907 000019A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  3908 000019AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  3909 000019AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  3910 000019B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  3911 000019B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  3912 000019BA 4983C103                	add r9, 3 	 ;for getting to the params
  3913 000019BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  3914 000019C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  3915                                  .L_tc_recycle_frame_loop_0e50:
  3916 000019C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  3917 000019C8 7410                    	je .L_tc_recycle_frame_done_0e50
  3918 000019CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  3919 000019CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  3920 000019D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  3921 000019D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  3922 000019D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0e50
  3923                                  .L_tc_recycle_frame_done_0e50:
  3924 000019DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  3925 000019DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  3926 000019DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3927 000019E2 C9                      	leave
  3928 000019E3 C21800                  	ret AND_KILL_FRAME(1)
  3929                                  .L_lambda_simple_end_0a43:	; new closure is in rax
  3930 000019E6 48890425[04120000]      	mov qword [free_var_42], rax
  3931 000019EE 48B8-                   	mov rax, sob_void
  3931 000019F0 [0000000000000000] 
  3932                                  
  3933 000019F8 4889C7                  	mov rdi, rax
  3934 000019FB E8196D0100              	call print_sexpr_if_not_void
  3935 00001A00 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3936 00001A05 E8BA6A0100              	call malloc
  3937 00001A0A 50                      	push rax
  3938 00001A0B BF00000000              	mov rdi, 8 * 0	; new rib
  3939 00001A10 E8AF6A0100              	call malloc
  3940 00001A15 50                      	push rax
  3941 00001A16 BF08000000              	mov rdi, 8 * 1	; extended env
  3942 00001A1B E8A46A0100              	call malloc
  3943 00001A20 488B7D10                	mov rdi, ENV
  3944 00001A24 BE00000000              	mov rsi, 0
  3945 00001A29 BA01000000              	mov rdx, 1
  3946                                  .L_lambda_simple_env_loop_0a44:	; ext_env[i + 1] <-- env[i]
  3947 00001A2E 4883FE00                	cmp rsi, 0
  3948 00001A32 7410                    	je .L_lambda_simple_env_end_0a44
  3949 00001A34 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3950 00001A38 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3951 00001A3C 48FFC6                  	inc rsi
  3952 00001A3F 48FFC2                  	inc rdx
  3953 00001A42 EBEA                    	jmp .L_lambda_simple_env_loop_0a44
  3954                                  .L_lambda_simple_env_end_0a44:
  3955 00001A44 5B                      	pop rbx
  3956 00001A45 BE00000000              	mov rsi, 0
  3957                                  .L_lambda_simple_params_loop_0a44:	; copy params
  3958 00001A4A 4883FE00                	cmp rsi, 0
  3959 00001A4E 740E                    	je .L_lambda_simple_params_end_0a44
  3960 00001A50 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3961 00001A55 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3962 00001A59 48FFC6                  	inc rsi
  3963 00001A5C EBEC                    	jmp .L_lambda_simple_params_loop_0a44
  3964                                  .L_lambda_simple_params_end_0a44:
  3965 00001A5E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3966 00001A61 4889C3                  	mov rbx, rax
  3967 00001A64 58                      	pop rax
  3968 00001A65 C60004                  	mov byte [rax], T_closure
  3969 00001A68 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3970 00001A6C 48C74009[791A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a44
  3971 00001A74 E9AA000000              	jmp .L_lambda_simple_end_0a44
  3972                                  .L_lambda_simple_code_0a44:	; lambda-simple body
  3973 00001A79 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3974 00001A7F 740B                    	je .L_lambda_simple_arity_check_ok_0a44
  3975 00001A81 FF742410                	push qword [rsp + 8 * 2]
  3976 00001A85 6A01                    	push 1
  3977 00001A87 E9F1690100              	jmp L_error_incorrect_arity_simple
  3978                                  .L_lambda_simple_arity_check_ok_0a44:
  3979 00001A8C C8000000                	enter 0, 0
  3980                                  	; preparing a tail-call
  3981                                  	; preparing a non-tail-call
  3982 00001A90 488B4520                	mov rax, PARAM(0)	; param x
  3983 00001A94 50                      	push rax
  3984 00001A95 6A01                    	push 1	; arg count
  3985 00001A97 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  3986 00001A9F 803805                  	cmp byte [rax], T_undefined
  3987 00001AA2 0F84EF680100            	je L_error_fvar_undefined
  3988 00001AA8 803804                  	cmp byte [rax], T_closure
  3989 00001AAB 0F856A690100            	jne L_error_non_closure
  3990 00001AB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3991 00001AB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3992 00001AB7 50                      	push rax
  3993 00001AB8 6A01                    	push 1	; arg count
  3994 00001ABA 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  3995 00001AC2 803805                  	cmp byte [rax], T_undefined
  3996 00001AC5 0F84CC680100            	je L_error_fvar_undefined
  3997 00001ACB 803804                  	cmp byte [rax], T_closure
  3998 00001ACE 0F8547690100            	jne L_error_non_closure
  3999 00001AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4000 00001AD7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4001 00001ADA FF7500                  	push qword[rbp]
  4002 00001ADD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4003 00001AE0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4004 00001AE4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4005 00001AE8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4006 00001AEC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4007 00001AEF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4008 00001AF2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4009 00001AF7 4983C103                	add r9, 3 	 ;for getting to the params
  4010 00001AFB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4011 00001AFF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4012                                  .L_tc_recycle_frame_loop_0e51:
  4013 00001B02 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4014 00001B05 7410                    	je .L_tc_recycle_frame_done_0e51
  4015 00001B07 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4016 00001B0A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4017 00001B0D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4018 00001B11 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4019 00001B15 EBEB                    	jmp .L_tc_recycle_frame_loop_0e51
  4020                                  .L_tc_recycle_frame_done_0e51:
  4021 00001B17 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4022 00001B18 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4023 00001B1C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4024 00001B1F C9                      	leave
  4025 00001B20 C21800                  	ret AND_KILL_FRAME(1)
  4026                                  .L_lambda_simple_end_0a44:	; new closure is in rax
  4027 00001B23 48890425[15120000]      	mov qword [free_var_43], rax
  4028 00001B2B 48B8-                   	mov rax, sob_void
  4028 00001B2D [0000000000000000] 
  4029                                  
  4030 00001B35 4889C7                  	mov rdi, rax
  4031 00001B38 E8DC6B0100              	call print_sexpr_if_not_void
  4032 00001B3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4033 00001B42 E87D690100              	call malloc
  4034 00001B47 50                      	push rax
  4035 00001B48 BF00000000              	mov rdi, 8 * 0	; new rib
  4036 00001B4D E872690100              	call malloc
  4037 00001B52 50                      	push rax
  4038 00001B53 BF08000000              	mov rdi, 8 * 1	; extended env
  4039 00001B58 E867690100              	call malloc
  4040 00001B5D 488B7D10                	mov rdi, ENV
  4041 00001B61 BE00000000              	mov rsi, 0
  4042 00001B66 BA01000000              	mov rdx, 1
  4043                                  .L_lambda_simple_env_loop_0a45:	; ext_env[i + 1] <-- env[i]
  4044 00001B6B 4883FE00                	cmp rsi, 0
  4045 00001B6F 7410                    	je .L_lambda_simple_env_end_0a45
  4046 00001B71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4047 00001B75 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4048 00001B79 48FFC6                  	inc rsi
  4049 00001B7C 48FFC2                  	inc rdx
  4050 00001B7F EBEA                    	jmp .L_lambda_simple_env_loop_0a45
  4051                                  .L_lambda_simple_env_end_0a45:
  4052 00001B81 5B                      	pop rbx
  4053 00001B82 BE00000000              	mov rsi, 0
  4054                                  .L_lambda_simple_params_loop_0a45:	; copy params
  4055 00001B87 4883FE00                	cmp rsi, 0
  4056 00001B8B 740E                    	je .L_lambda_simple_params_end_0a45
  4057 00001B8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4058 00001B92 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4059 00001B96 48FFC6                  	inc rsi
  4060 00001B99 EBEC                    	jmp .L_lambda_simple_params_loop_0a45
  4061                                  .L_lambda_simple_params_end_0a45:
  4062 00001B9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4063 00001B9E 4889C3                  	mov rbx, rax
  4064 00001BA1 58                      	pop rax
  4065 00001BA2 C60004                  	mov byte [rax], T_closure
  4066 00001BA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4067 00001BA9 48C74009[B61B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a45
  4068 00001BB1 E9AA000000              	jmp .L_lambda_simple_end_0a45
  4069                                  .L_lambda_simple_code_0a45:	; lambda-simple body
  4070 00001BB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4071 00001BBC 740B                    	je .L_lambda_simple_arity_check_ok_0a45
  4072 00001BBE FF742410                	push qword [rsp + 8 * 2]
  4073 00001BC2 6A01                    	push 1
  4074 00001BC4 E9B4680100              	jmp L_error_incorrect_arity_simple
  4075                                  .L_lambda_simple_arity_check_ok_0a45:
  4076 00001BC9 C8000000                	enter 0, 0
  4077                                  	; preparing a tail-call
  4078                                  	; preparing a non-tail-call
  4079 00001BCD 488B4520                	mov rax, PARAM(0)	; param x
  4080 00001BD1 50                      	push rax
  4081 00001BD2 6A01                    	push 1	; arg count
  4082 00001BD4 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4083 00001BDC 803805                  	cmp byte [rax], T_undefined
  4084 00001BDF 0F84B2670100            	je L_error_fvar_undefined
  4085 00001BE5 803804                  	cmp byte [rax], T_closure
  4086 00001BE8 0F852D680100            	jne L_error_non_closure
  4087 00001BEE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4088 00001BF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4089 00001BF4 50                      	push rax
  4090 00001BF5 6A01                    	push 1	; arg count
  4091 00001BF7 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  4092 00001BFF 803805                  	cmp byte [rax], T_undefined
  4093 00001C02 0F848F670100            	je L_error_fvar_undefined
  4094 00001C08 803804                  	cmp byte [rax], T_closure
  4095 00001C0B 0F850A680100            	jne L_error_non_closure
  4096 00001C11 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4097 00001C14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4098 00001C17 FF7500                  	push qword[rbp]
  4099 00001C1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4100 00001C1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4101 00001C21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4102 00001C25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4103 00001C29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4104 00001C2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4105 00001C2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4106 00001C34 4983C103                	add r9, 3 	 ;for getting to the params
  4107 00001C38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4108 00001C3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4109                                  .L_tc_recycle_frame_loop_0e52:
  4110 00001C3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4111 00001C42 7410                    	je .L_tc_recycle_frame_done_0e52
  4112 00001C44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4113 00001C47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4114 00001C4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4115 00001C4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4116 00001C52 EBEB                    	jmp .L_tc_recycle_frame_loop_0e52
  4117                                  .L_tc_recycle_frame_done_0e52:
  4118 00001C54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4119 00001C55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4120 00001C59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4121 00001C5C C9                      	leave
  4122 00001C5D C21800                  	ret AND_KILL_FRAME(1)
  4123                                  .L_lambda_simple_end_0a45:	; new closure is in rax
  4124 00001C60 48890425[37120000]      	mov qword [free_var_45], rax
  4125 00001C68 48B8-                   	mov rax, sob_void
  4125 00001C6A [0000000000000000] 
  4126                                  
  4127 00001C72 4889C7                  	mov rdi, rax
  4128 00001C75 E89F6A0100              	call print_sexpr_if_not_void
  4129 00001C7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4130 00001C7F E840680100              	call malloc
  4131 00001C84 50                      	push rax
  4132 00001C85 BF00000000              	mov rdi, 8 * 0	; new rib
  4133 00001C8A E835680100              	call malloc
  4134 00001C8F 50                      	push rax
  4135 00001C90 BF08000000              	mov rdi, 8 * 1	; extended env
  4136 00001C95 E82A680100              	call malloc
  4137 00001C9A 488B7D10                	mov rdi, ENV
  4138 00001C9E BE00000000              	mov rsi, 0
  4139 00001CA3 BA01000000              	mov rdx, 1
  4140                                  .L_lambda_simple_env_loop_0a46:	; ext_env[i + 1] <-- env[i]
  4141 00001CA8 4883FE00                	cmp rsi, 0
  4142 00001CAC 7410                    	je .L_lambda_simple_env_end_0a46
  4143 00001CAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4144 00001CB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4145 00001CB6 48FFC6                  	inc rsi
  4146 00001CB9 48FFC2                  	inc rdx
  4147 00001CBC EBEA                    	jmp .L_lambda_simple_env_loop_0a46
  4148                                  .L_lambda_simple_env_end_0a46:
  4149 00001CBE 5B                      	pop rbx
  4150 00001CBF BE00000000              	mov rsi, 0
  4151                                  .L_lambda_simple_params_loop_0a46:	; copy params
  4152 00001CC4 4883FE00                	cmp rsi, 0
  4153 00001CC8 740E                    	je .L_lambda_simple_params_end_0a46
  4154 00001CCA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4155 00001CCF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4156 00001CD3 48FFC6                  	inc rsi
  4157 00001CD6 EBEC                    	jmp .L_lambda_simple_params_loop_0a46
  4158                                  .L_lambda_simple_params_end_0a46:
  4159 00001CD8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4160 00001CDB 4889C3                  	mov rbx, rax
  4161 00001CDE 58                      	pop rax
  4162 00001CDF C60004                  	mov byte [rax], T_closure
  4163 00001CE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4164 00001CE6 48C74009[F31C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a46
  4165 00001CEE E9AA000000              	jmp .L_lambda_simple_end_0a46
  4166                                  .L_lambda_simple_code_0a46:	; lambda-simple body
  4167 00001CF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4168 00001CF9 740B                    	je .L_lambda_simple_arity_check_ok_0a46
  4169 00001CFB FF742410                	push qword [rsp + 8 * 2]
  4170 00001CFF 6A01                    	push 1
  4171 00001D01 E977670100              	jmp L_error_incorrect_arity_simple
  4172                                  .L_lambda_simple_arity_check_ok_0a46:
  4173 00001D06 C8000000                	enter 0, 0
  4174                                  	; preparing a tail-call
  4175                                  	; preparing a non-tail-call
  4176 00001D0A 488B4520                	mov rax, PARAM(0)	; param x
  4177 00001D0E 50                      	push rax
  4178 00001D0F 6A01                    	push 1	; arg count
  4179 00001D11 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4180 00001D19 803805                  	cmp byte [rax], T_undefined
  4181 00001D1C 0F8475660100            	je L_error_fvar_undefined
  4182 00001D22 803804                  	cmp byte [rax], T_closure
  4183 00001D25 0F85F0660100            	jne L_error_non_closure
  4184 00001D2B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4185 00001D2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4186 00001D31 50                      	push rax
  4187 00001D32 6A01                    	push 1	; arg count
  4188 00001D34 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  4189 00001D3C 803805                  	cmp byte [rax], T_undefined
  4190 00001D3F 0F8452660100            	je L_error_fvar_undefined
  4191 00001D45 803804                  	cmp byte [rax], T_closure
  4192 00001D48 0F85CD660100            	jne L_error_non_closure
  4193 00001D4E FF7001                  	push SOB_CLOSURE_ENV(rax)
  4194 00001D51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4195 00001D54 FF7500                  	push qword[rbp]
  4196 00001D57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4197 00001D5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4198 00001D5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4199 00001D62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4200 00001D66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4201 00001D69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4202 00001D6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4203 00001D71 4983C103                	add r9, 3 	 ;for getting to the params
  4204 00001D75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4205 00001D79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4206                                  .L_tc_recycle_frame_loop_0e53:
  4207 00001D7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4208 00001D7F 7410                    	je .L_tc_recycle_frame_done_0e53
  4209 00001D81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4210 00001D84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4211 00001D87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4212 00001D8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4213 00001D8F EBEB                    	jmp .L_tc_recycle_frame_loop_0e53
  4214                                  .L_tc_recycle_frame_done_0e53:
  4215 00001D91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4216 00001D92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4217 00001D96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4218 00001D99 C9                      	leave
  4219 00001D9A C21800                  	ret AND_KILL_FRAME(1)
  4220                                  .L_lambda_simple_end_0a46:	; new closure is in rax
  4221 00001D9D 48890425[48120000]      	mov qword [free_var_46], rax
  4222 00001DA5 48B8-                   	mov rax, sob_void
  4222 00001DA7 [0000000000000000] 
  4223                                  
  4224 00001DAF 4889C7                  	mov rdi, rax
  4225 00001DB2 E862690100              	call print_sexpr_if_not_void
  4226 00001DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4227 00001DBC E803670100              	call malloc
  4228 00001DC1 50                      	push rax
  4229 00001DC2 BF00000000              	mov rdi, 8 * 0	; new rib
  4230 00001DC7 E8F8660100              	call malloc
  4231 00001DCC 50                      	push rax
  4232 00001DCD BF08000000              	mov rdi, 8 * 1	; extended env
  4233 00001DD2 E8ED660100              	call malloc
  4234 00001DD7 488B7D10                	mov rdi, ENV
  4235 00001DDB BE00000000              	mov rsi, 0
  4236 00001DE0 BA01000000              	mov rdx, 1
  4237                                  .L_lambda_simple_env_loop_0a47:	; ext_env[i + 1] <-- env[i]
  4238 00001DE5 4883FE00                	cmp rsi, 0
  4239 00001DE9 7410                    	je .L_lambda_simple_env_end_0a47
  4240 00001DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4241 00001DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4242 00001DF3 48FFC6                  	inc rsi
  4243 00001DF6 48FFC2                  	inc rdx
  4244 00001DF9 EBEA                    	jmp .L_lambda_simple_env_loop_0a47
  4245                                  .L_lambda_simple_env_end_0a47:
  4246 00001DFB 5B                      	pop rbx
  4247 00001DFC BE00000000              	mov rsi, 0
  4248                                  .L_lambda_simple_params_loop_0a47:	; copy params
  4249 00001E01 4883FE00                	cmp rsi, 0
  4250 00001E05 740E                    	je .L_lambda_simple_params_end_0a47
  4251 00001E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4252 00001E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4253 00001E10 48FFC6                  	inc rsi
  4254 00001E13 EBEC                    	jmp .L_lambda_simple_params_loop_0a47
  4255                                  .L_lambda_simple_params_end_0a47:
  4256 00001E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4257 00001E18 4889C3                  	mov rbx, rax
  4258 00001E1B 58                      	pop rax
  4259 00001E1C C60004                  	mov byte [rax], T_closure
  4260 00001E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4261 00001E23 48C74009[301E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a47
  4262 00001E2B E9AA000000              	jmp .L_lambda_simple_end_0a47
  4263                                  .L_lambda_simple_code_0a47:	; lambda-simple body
  4264 00001E30 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4265 00001E36 740B                    	je .L_lambda_simple_arity_check_ok_0a47
  4266 00001E38 FF742410                	push qword [rsp + 8 * 2]
  4267 00001E3C 6A01                    	push 1
  4268 00001E3E E93A660100              	jmp L_error_incorrect_arity_simple
  4269                                  .L_lambda_simple_arity_check_ok_0a47:
  4270 00001E43 C8000000                	enter 0, 0
  4271                                  	; preparing a tail-call
  4272                                  	; preparing a non-tail-call
  4273 00001E47 488B4520                	mov rax, PARAM(0)	; param x
  4274 00001E4B 50                      	push rax
  4275 00001E4C 6A01                    	push 1	; arg count
  4276 00001E4E 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  4277 00001E56 803805                  	cmp byte [rax], T_undefined
  4278 00001E59 0F8438650100            	je L_error_fvar_undefined
  4279 00001E5F 803804                  	cmp byte [rax], T_closure
  4280 00001E62 0F85B3650100            	jne L_error_non_closure
  4281 00001E68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4282 00001E6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4283 00001E6E 50                      	push rax
  4284 00001E6F 6A01                    	push 1	; arg count
  4285 00001E71 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4286 00001E79 803805                  	cmp byte [rax], T_undefined
  4287 00001E7C 0F8415650100            	je L_error_fvar_undefined
  4288 00001E82 803804                  	cmp byte [rax], T_closure
  4289 00001E85 0F8590650100            	jne L_error_non_closure
  4290 00001E8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  4291 00001E8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4292 00001E91 FF7500                  	push qword[rbp]
  4293 00001E94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4294 00001E97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4295 00001E9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4296 00001E9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4297 00001EA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4298 00001EA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4299 00001EA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4300 00001EAE 4983C103                	add r9, 3 	 ;for getting to the params
  4301 00001EB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4302 00001EB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4303                                  .L_tc_recycle_frame_loop_0e54:
  4304 00001EB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4305 00001EBC 7410                    	je .L_tc_recycle_frame_done_0e54
  4306 00001EBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4307 00001EC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4308 00001EC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4309 00001EC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4310 00001ECC EBEB                    	jmp .L_tc_recycle_frame_loop_0e54
  4311                                  .L_tc_recycle_frame_done_0e54:
  4312 00001ECE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4313 00001ECF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4314 00001ED3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4315 00001ED6 C9                      	leave
  4316 00001ED7 C21800                  	ret AND_KILL_FRAME(1)
  4317                                  .L_lambda_simple_end_0a47:	; new closure is in rax
  4318 00001EDA 48890425[8C120000]      	mov qword [free_var_50], rax
  4319 00001EE2 48B8-                   	mov rax, sob_void
  4319 00001EE4 [0000000000000000] 
  4320                                  
  4321 00001EEC 4889C7                  	mov rdi, rax
  4322 00001EEF E825680100              	call print_sexpr_if_not_void
  4323 00001EF4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4324 00001EF9 E8C6650100              	call malloc
  4325 00001EFE 50                      	push rax
  4326 00001EFF BF00000000              	mov rdi, 8 * 0	; new rib
  4327 00001F04 E8BB650100              	call malloc
  4328 00001F09 50                      	push rax
  4329 00001F0A BF08000000              	mov rdi, 8 * 1	; extended env
  4330 00001F0F E8B0650100              	call malloc
  4331 00001F14 488B7D10                	mov rdi, ENV
  4332 00001F18 BE00000000              	mov rsi, 0
  4333 00001F1D BA01000000              	mov rdx, 1
  4334                                  .L_lambda_simple_env_loop_0a48:	; ext_env[i + 1] <-- env[i]
  4335 00001F22 4883FE00                	cmp rsi, 0
  4336 00001F26 7410                    	je .L_lambda_simple_env_end_0a48
  4337 00001F28 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4338 00001F2C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4339 00001F30 48FFC6                  	inc rsi
  4340 00001F33 48FFC2                  	inc rdx
  4341 00001F36 EBEA                    	jmp .L_lambda_simple_env_loop_0a48
  4342                                  .L_lambda_simple_env_end_0a48:
  4343 00001F38 5B                      	pop rbx
  4344 00001F39 BE00000000              	mov rsi, 0
  4345                                  .L_lambda_simple_params_loop_0a48:	; copy params
  4346 00001F3E 4883FE00                	cmp rsi, 0
  4347 00001F42 740E                    	je .L_lambda_simple_params_end_0a48
  4348 00001F44 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4349 00001F49 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4350 00001F4D 48FFC6                  	inc rsi
  4351 00001F50 EBEC                    	jmp .L_lambda_simple_params_loop_0a48
  4352                                  .L_lambda_simple_params_end_0a48:
  4353 00001F52 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4354 00001F55 4889C3                  	mov rbx, rax
  4355 00001F58 58                      	pop rax
  4356 00001F59 C60004                  	mov byte [rax], T_closure
  4357 00001F5C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4358 00001F60 48C74009[6D1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a48
  4359 00001F68 E9AA000000              	jmp .L_lambda_simple_end_0a48
  4360                                  .L_lambda_simple_code_0a48:	; lambda-simple body
  4361 00001F6D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4362 00001F73 740B                    	je .L_lambda_simple_arity_check_ok_0a48
  4363 00001F75 FF742410                	push qword [rsp + 8 * 2]
  4364 00001F79 6A01                    	push 1
  4365 00001F7B E9FD640100              	jmp L_error_incorrect_arity_simple
  4366                                  .L_lambda_simple_arity_check_ok_0a48:
  4367 00001F80 C8000000                	enter 0, 0
  4368                                  	; preparing a tail-call
  4369                                  	; preparing a non-tail-call
  4370 00001F84 488B4520                	mov rax, PARAM(0)	; param x
  4371 00001F88 50                      	push rax
  4372 00001F89 6A01                    	push 1	; arg count
  4373 00001F8B 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  4374 00001F93 803805                  	cmp byte [rax], T_undefined
  4375 00001F96 0F84FB630100            	je L_error_fvar_undefined
  4376 00001F9C 803804                  	cmp byte [rax], T_closure
  4377 00001F9F 0F8576640100            	jne L_error_non_closure
  4378 00001FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4379 00001FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4380 00001FAB 50                      	push rax
  4381 00001FAC 6A01                    	push 1	; arg count
  4382 00001FAE 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4383 00001FB6 803805                  	cmp byte [rax], T_undefined
  4384 00001FB9 0F84D8630100            	je L_error_fvar_undefined
  4385 00001FBF 803804                  	cmp byte [rax], T_closure
  4386 00001FC2 0F8553640100            	jne L_error_non_closure
  4387 00001FC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4388 00001FCB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4389 00001FCE FF7500                  	push qword[rbp]
  4390 00001FD1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4391 00001FD4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4392 00001FD8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4393 00001FDC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4394 00001FE0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4395 00001FE3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4396 00001FE6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4397 00001FEB 4983C103                	add r9, 3 	 ;for getting to the params
  4398 00001FEF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4399 00001FF3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4400                                  .L_tc_recycle_frame_loop_0e55:
  4401 00001FF6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4402 00001FF9 7410                    	je .L_tc_recycle_frame_done_0e55
  4403 00001FFB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4404 00001FFE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4405 00002001 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4406 00002005 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4407 00002009 EBEB                    	jmp .L_tc_recycle_frame_loop_0e55
  4408                                  .L_tc_recycle_frame_done_0e55:
  4409 0000200B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4410 0000200C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4411 00002010 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4412 00002013 C9                      	leave
  4413 00002014 C21800                  	ret AND_KILL_FRAME(1)
  4414                                  .L_lambda_simple_end_0a48:	; new closure is in rax
  4415 00002017 48890425[9D120000]      	mov qword [free_var_51], rax
  4416 0000201F 48B8-                   	mov rax, sob_void
  4416 00002021 [0000000000000000] 
  4417                                  
  4418 00002029 4889C7                  	mov rdi, rax
  4419 0000202C E8E8660100              	call print_sexpr_if_not_void
  4420 00002031 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4421 00002036 E889640100              	call malloc
  4422 0000203B 50                      	push rax
  4423 0000203C BF00000000              	mov rdi, 8 * 0	; new rib
  4424 00002041 E87E640100              	call malloc
  4425 00002046 50                      	push rax
  4426 00002047 BF08000000              	mov rdi, 8 * 1	; extended env
  4427 0000204C E873640100              	call malloc
  4428 00002051 488B7D10                	mov rdi, ENV
  4429 00002055 BE00000000              	mov rsi, 0
  4430 0000205A BA01000000              	mov rdx, 1
  4431                                  .L_lambda_simple_env_loop_0a49:	; ext_env[i + 1] <-- env[i]
  4432 0000205F 4883FE00                	cmp rsi, 0
  4433 00002063 7410                    	je .L_lambda_simple_env_end_0a49
  4434 00002065 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4435 00002069 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4436 0000206D 48FFC6                  	inc rsi
  4437 00002070 48FFC2                  	inc rdx
  4438 00002073 EBEA                    	jmp .L_lambda_simple_env_loop_0a49
  4439                                  .L_lambda_simple_env_end_0a49:
  4440 00002075 5B                      	pop rbx
  4441 00002076 BE00000000              	mov rsi, 0
  4442                                  .L_lambda_simple_params_loop_0a49:	; copy params
  4443 0000207B 4883FE00                	cmp rsi, 0
  4444 0000207F 740E                    	je .L_lambda_simple_params_end_0a49
  4445 00002081 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4446 00002086 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4447 0000208A 48FFC6                  	inc rsi
  4448 0000208D EBEC                    	jmp .L_lambda_simple_params_loop_0a49
  4449                                  .L_lambda_simple_params_end_0a49:
  4450 0000208F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4451 00002092 4889C3                  	mov rbx, rax
  4452 00002095 58                      	pop rax
  4453 00002096 C60004                  	mov byte [rax], T_closure
  4454 00002099 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4455 0000209D 48C74009[AA200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a49
  4456 000020A5 E9AA000000              	jmp .L_lambda_simple_end_0a49
  4457                                  .L_lambda_simple_code_0a49:	; lambda-simple body
  4458 000020AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4459 000020B0 740B                    	je .L_lambda_simple_arity_check_ok_0a49
  4460 000020B2 FF742410                	push qword [rsp + 8 * 2]
  4461 000020B6 6A01                    	push 1
  4462 000020B8 E9C0630100              	jmp L_error_incorrect_arity_simple
  4463                                  .L_lambda_simple_arity_check_ok_0a49:
  4464 000020BD C8000000                	enter 0, 0
  4465                                  	; preparing a tail-call
  4466                                  	; preparing a non-tail-call
  4467 000020C1 488B4520                	mov rax, PARAM(0)	; param x
  4468 000020C5 50                      	push rax
  4469 000020C6 6A01                    	push 1	; arg count
  4470 000020C8 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4471 000020D0 803805                  	cmp byte [rax], T_undefined
  4472 000020D3 0F84BE620100            	je L_error_fvar_undefined
  4473 000020D9 803804                  	cmp byte [rax], T_closure
  4474 000020DC 0F8539630100            	jne L_error_non_closure
  4475 000020E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4476 000020E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4477 000020E8 50                      	push rax
  4478 000020E9 6A01                    	push 1	; arg count
  4479 000020EB 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4480 000020F3 803805                  	cmp byte [rax], T_undefined
  4481 000020F6 0F849B620100            	je L_error_fvar_undefined
  4482 000020FC 803804                  	cmp byte [rax], T_closure
  4483 000020FF 0F8516630100            	jne L_error_non_closure
  4484 00002105 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4485 00002108 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4486 0000210B FF7500                  	push qword[rbp]
  4487 0000210E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4488 00002111 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4489 00002115 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4490 00002119 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4491 0000211D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4492 00002120 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4493 00002123 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4494 00002128 4983C103                	add r9, 3 	 ;for getting to the params
  4495 0000212C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4496 00002130 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4497                                  .L_tc_recycle_frame_loop_0e56:
  4498 00002133 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4499 00002136 7410                    	je .L_tc_recycle_frame_done_0e56
  4500 00002138 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4501 0000213B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4502 0000213E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4503 00002142 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4504 00002146 EBEB                    	jmp .L_tc_recycle_frame_loop_0e56
  4505                                  .L_tc_recycle_frame_done_0e56:
  4506 00002148 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4507 00002149 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4508 0000214D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4509 00002150 C9                      	leave
  4510 00002151 C21800                  	ret AND_KILL_FRAME(1)
  4511                                  .L_lambda_simple_end_0a49:	; new closure is in rax
  4512 00002154 48890425[BF120000]      	mov qword [free_var_53], rax
  4513 0000215C 48B8-                   	mov rax, sob_void
  4513 0000215E [0000000000000000] 
  4514                                  
  4515 00002166 4889C7                  	mov rdi, rax
  4516 00002169 E8AB650100              	call print_sexpr_if_not_void
  4517 0000216E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4518 00002173 E84C630100              	call malloc
  4519 00002178 50                      	push rax
  4520 00002179 BF00000000              	mov rdi, 8 * 0	; new rib
  4521 0000217E E841630100              	call malloc
  4522 00002183 50                      	push rax
  4523 00002184 BF08000000              	mov rdi, 8 * 1	; extended env
  4524 00002189 E836630100              	call malloc
  4525 0000218E 488B7D10                	mov rdi, ENV
  4526 00002192 BE00000000              	mov rsi, 0
  4527 00002197 BA01000000              	mov rdx, 1
  4528                                  .L_lambda_simple_env_loop_0a4a:	; ext_env[i + 1] <-- env[i]
  4529 0000219C 4883FE00                	cmp rsi, 0
  4530 000021A0 7410                    	je .L_lambda_simple_env_end_0a4a
  4531 000021A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4532 000021A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4533 000021AA 48FFC6                  	inc rsi
  4534 000021AD 48FFC2                  	inc rdx
  4535 000021B0 EBEA                    	jmp .L_lambda_simple_env_loop_0a4a
  4536                                  .L_lambda_simple_env_end_0a4a:
  4537 000021B2 5B                      	pop rbx
  4538 000021B3 BE00000000              	mov rsi, 0
  4539                                  .L_lambda_simple_params_loop_0a4a:	; copy params
  4540 000021B8 4883FE00                	cmp rsi, 0
  4541 000021BC 740E                    	je .L_lambda_simple_params_end_0a4a
  4542 000021BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4543 000021C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4544 000021C7 48FFC6                  	inc rsi
  4545 000021CA EBEC                    	jmp .L_lambda_simple_params_loop_0a4a
  4546                                  .L_lambda_simple_params_end_0a4a:
  4547 000021CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4548 000021CF 4889C3                  	mov rbx, rax
  4549 000021D2 58                      	pop rax
  4550 000021D3 C60004                  	mov byte [rax], T_closure
  4551 000021D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4552 000021DA 48C74009[E7210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a4a
  4553 000021E2 E9AA000000              	jmp .L_lambda_simple_end_0a4a
  4554                                  .L_lambda_simple_code_0a4a:	; lambda-simple body
  4555 000021E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4556 000021ED 740B                    	je .L_lambda_simple_arity_check_ok_0a4a
  4557 000021EF FF742410                	push qword [rsp + 8 * 2]
  4558 000021F3 6A01                    	push 1
  4559 000021F5 E983620100              	jmp L_error_incorrect_arity_simple
  4560                                  .L_lambda_simple_arity_check_ok_0a4a:
  4561 000021FA C8000000                	enter 0, 0
  4562                                  	; preparing a tail-call
  4563                                  	; preparing a non-tail-call
  4564 000021FE 488B4520                	mov rax, PARAM(0)	; param x
  4565 00002202 50                      	push rax
  4566 00002203 6A01                    	push 1	; arg count
  4567 00002205 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4568 0000220D 803805                  	cmp byte [rax], T_undefined
  4569 00002210 0F8481610100            	je L_error_fvar_undefined
  4570 00002216 803804                  	cmp byte [rax], T_closure
  4571 00002219 0F85FC610100            	jne L_error_non_closure
  4572 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4573 00002222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4574 00002225 50                      	push rax
  4575 00002226 6A01                    	push 1	; arg count
  4576 00002228 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4577 00002230 803805                  	cmp byte [rax], T_undefined
  4578 00002233 0F845E610100            	je L_error_fvar_undefined
  4579 00002239 803804                  	cmp byte [rax], T_closure
  4580 0000223C 0F85D9610100            	jne L_error_non_closure
  4581 00002242 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4582 00002245 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4583 00002248 FF7500                  	push qword[rbp]
  4584 0000224B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4585 0000224E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4586 00002252 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4587 00002256 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4588 0000225A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4589 0000225D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4590 00002260 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4591 00002265 4983C103                	add r9, 3 	 ;for getting to the params
  4592 00002269 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4593 0000226D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4594                                  .L_tc_recycle_frame_loop_0e57:
  4595 00002270 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4596 00002273 7410                    	je .L_tc_recycle_frame_done_0e57
  4597 00002275 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4598 00002278 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4599 0000227B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4600 0000227F 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4601 00002283 EBEB                    	jmp .L_tc_recycle_frame_loop_0e57
  4602                                  .L_tc_recycle_frame_done_0e57:
  4603 00002285 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4604 00002286 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4605 0000228A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4606 0000228D C9                      	leave
  4607 0000228E C21800                  	ret AND_KILL_FRAME(1)
  4608                                  .L_lambda_simple_end_0a4a:	; new closure is in rax
  4609 00002291 48890425[D0120000]      	mov qword [free_var_54], rax
  4610 00002299 48B8-                   	mov rax, sob_void
  4610 0000229B [0000000000000000] 
  4611                                  
  4612 000022A3 4889C7                  	mov rdi, rax
  4613 000022A6 E86E640100              	call print_sexpr_if_not_void
  4614 000022AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4615 000022B0 E80F620100              	call malloc
  4616 000022B5 50                      	push rax
  4617 000022B6 BF00000000              	mov rdi, 8 * 0	; new rib
  4618 000022BB E804620100              	call malloc
  4619 000022C0 50                      	push rax
  4620 000022C1 BF08000000              	mov rdi, 8 * 1	; extended env
  4621 000022C6 E8F9610100              	call malloc
  4622 000022CB 488B7D10                	mov rdi, ENV
  4623 000022CF BE00000000              	mov rsi, 0
  4624 000022D4 BA01000000              	mov rdx, 1
  4625                                  .L_lambda_simple_env_loop_0a4b:	; ext_env[i + 1] <-- env[i]
  4626 000022D9 4883FE00                	cmp rsi, 0
  4627 000022DD 7410                    	je .L_lambda_simple_env_end_0a4b
  4628 000022DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4629 000022E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4630 000022E7 48FFC6                  	inc rsi
  4631 000022EA 48FFC2                  	inc rdx
  4632 000022ED EBEA                    	jmp .L_lambda_simple_env_loop_0a4b
  4633                                  .L_lambda_simple_env_end_0a4b:
  4634 000022EF 5B                      	pop rbx
  4635 000022F0 BE00000000              	mov rsi, 0
  4636                                  .L_lambda_simple_params_loop_0a4b:	; copy params
  4637 000022F5 4883FE00                	cmp rsi, 0
  4638 000022F9 740E                    	je .L_lambda_simple_params_end_0a4b
  4639 000022FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4640 00002300 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4641 00002304 48FFC6                  	inc rsi
  4642 00002307 EBEC                    	jmp .L_lambda_simple_params_loop_0a4b
  4643                                  .L_lambda_simple_params_end_0a4b:
  4644 00002309 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4645 0000230C 4889C3                  	mov rbx, rax
  4646 0000230F 58                      	pop rax
  4647 00002310 C60004                  	mov byte [rax], T_closure
  4648 00002313 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4649 00002317 48C74009[24230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a4b
  4650 0000231F E9AA000000              	jmp .L_lambda_simple_end_0a4b
  4651                                  .L_lambda_simple_code_0a4b:	; lambda-simple body
  4652 00002324 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4653 0000232A 740B                    	je .L_lambda_simple_arity_check_ok_0a4b
  4654 0000232C FF742410                	push qword [rsp + 8 * 2]
  4655 00002330 6A01                    	push 1
  4656 00002332 E946610100              	jmp L_error_incorrect_arity_simple
  4657                                  .L_lambda_simple_arity_check_ok_0a4b:
  4658 00002337 C8000000                	enter 0, 0
  4659                                  	; preparing a tail-call
  4660                                  	; preparing a non-tail-call
  4661 0000233B 488B4520                	mov rax, PARAM(0)	; param x
  4662 0000233F 50                      	push rax
  4663 00002340 6A01                    	push 1	; arg count
  4664 00002342 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
  4665 0000234A 803805                  	cmp byte [rax], T_undefined
  4666 0000234D 0F8444600100            	je L_error_fvar_undefined
  4667 00002353 803804                  	cmp byte [rax], T_closure
  4668 00002356 0F85BF600100            	jne L_error_non_closure
  4669 0000235C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4670 0000235F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4671 00002362 50                      	push rax
  4672 00002363 6A01                    	push 1	; arg count
  4673 00002365 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4674 0000236D 803805                  	cmp byte [rax], T_undefined
  4675 00002370 0F8421600100            	je L_error_fvar_undefined
  4676 00002376 803804                  	cmp byte [rax], T_closure
  4677 00002379 0F859C600100            	jne L_error_non_closure
  4678 0000237F FF7001                  	push SOB_CLOSURE_ENV(rax)
  4679 00002382 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4680 00002385 FF7500                  	push qword[rbp]
  4681 00002388 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4682 0000238B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4683 0000238F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4684 00002393 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4685 00002397 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4686 0000239A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4687 0000239D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4688 000023A2 4983C103                	add r9, 3 	 ;for getting to the params
  4689 000023A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4690 000023AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4691                                  .L_tc_recycle_frame_loop_0e58:
  4692 000023AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4693 000023B0 7410                    	je .L_tc_recycle_frame_done_0e58
  4694 000023B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4695 000023B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4696 000023B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4697 000023BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4698 000023C0 EBEB                    	jmp .L_tc_recycle_frame_loop_0e58
  4699                                  .L_tc_recycle_frame_done_0e58:
  4700 000023C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4701 000023C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4702 000023C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4703 000023CA C9                      	leave
  4704 000023CB C21800                  	ret AND_KILL_FRAME(1)
  4705                                  .L_lambda_simple_end_0a4b:	; new closure is in rax
  4706 000023CE 48890425[03130000]      	mov qword [free_var_57], rax
  4707 000023D6 48B8-                   	mov rax, sob_void
  4707 000023D8 [0000000000000000] 
  4708                                  
  4709 000023E0 4889C7                  	mov rdi, rax
  4710 000023E3 E831630100              	call print_sexpr_if_not_void
  4711 000023E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4712 000023ED E8D2600100              	call malloc
  4713 000023F2 50                      	push rax
  4714 000023F3 BF00000000              	mov rdi, 8 * 0	; new rib
  4715 000023F8 E8C7600100              	call malloc
  4716 000023FD 50                      	push rax
  4717 000023FE BF08000000              	mov rdi, 8 * 1	; extended env
  4718 00002403 E8BC600100              	call malloc
  4719 00002408 488B7D10                	mov rdi, ENV
  4720 0000240C BE00000000              	mov rsi, 0
  4721 00002411 BA01000000              	mov rdx, 1
  4722                                  .L_lambda_simple_env_loop_0a4c:	; ext_env[i + 1] <-- env[i]
  4723 00002416 4883FE00                	cmp rsi, 0
  4724 0000241A 7410                    	je .L_lambda_simple_env_end_0a4c
  4725 0000241C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4726 00002420 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4727 00002424 48FFC6                  	inc rsi
  4728 00002427 48FFC2                  	inc rdx
  4729 0000242A EBEA                    	jmp .L_lambda_simple_env_loop_0a4c
  4730                                  .L_lambda_simple_env_end_0a4c:
  4731 0000242C 5B                      	pop rbx
  4732 0000242D BE00000000              	mov rsi, 0
  4733                                  .L_lambda_simple_params_loop_0a4c:	; copy params
  4734 00002432 4883FE00                	cmp rsi, 0
  4735 00002436 740E                    	je .L_lambda_simple_params_end_0a4c
  4736 00002438 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4737 0000243D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4738 00002441 48FFC6                  	inc rsi
  4739 00002444 EBEC                    	jmp .L_lambda_simple_params_loop_0a4c
  4740                                  .L_lambda_simple_params_end_0a4c:
  4741 00002446 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4742 00002449 4889C3                  	mov rbx, rax
  4743 0000244C 58                      	pop rax
  4744 0000244D C60004                  	mov byte [rax], T_closure
  4745 00002450 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4746 00002454 48C74009[61240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a4c
  4747 0000245C E9AA000000              	jmp .L_lambda_simple_end_0a4c
  4748                                  .L_lambda_simple_code_0a4c:	; lambda-simple body
  4749 00002461 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4750 00002467 740B                    	je .L_lambda_simple_arity_check_ok_0a4c
  4751 00002469 FF742410                	push qword [rsp + 8 * 2]
  4752 0000246D 6A01                    	push 1
  4753 0000246F E909600100              	jmp L_error_incorrect_arity_simple
  4754                                  .L_lambda_simple_arity_check_ok_0a4c:
  4755 00002474 C8000000                	enter 0, 0
  4756                                  	; preparing a tail-call
  4757                                  	; preparing a non-tail-call
  4758 00002478 488B4520                	mov rax, PARAM(0)	; param x
  4759 0000247C 50                      	push rax
  4760 0000247D 6A01                    	push 1	; arg count
  4761 0000247F 488B0425[6A120000]      	mov rax, qword [free_var_48]	; free var cadr
  4762 00002487 803805                  	cmp byte [rax], T_undefined
  4763 0000248A 0F84075F0100            	je L_error_fvar_undefined
  4764 00002490 803804                  	cmp byte [rax], T_closure
  4765 00002493 0F85825F0100            	jne L_error_non_closure
  4766 00002499 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4767 0000249C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4768 0000249F 50                      	push rax
  4769 000024A0 6A01                    	push 1	; arg count
  4770 000024A2 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4771 000024AA 803805                  	cmp byte [rax], T_undefined
  4772 000024AD 0F84E45E0100            	je L_error_fvar_undefined
  4773 000024B3 803804                  	cmp byte [rax], T_closure
  4774 000024B6 0F855F5F0100            	jne L_error_non_closure
  4775 000024BC FF7001                  	push SOB_CLOSURE_ENV(rax)
  4776 000024BF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4777 000024C2 FF7500                  	push qword[rbp]
  4778 000024C5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4779 000024C8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4780 000024CC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4781 000024D0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4782 000024D4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4783 000024D7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4784 000024DA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4785 000024DF 4983C103                	add r9, 3 	 ;for getting to the params
  4786 000024E3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4787 000024E7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4788                                  .L_tc_recycle_frame_loop_0e59:
  4789 000024EA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4790 000024ED 7410                    	je .L_tc_recycle_frame_done_0e59
  4791 000024EF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4792 000024F2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4793 000024F5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4794 000024F9 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4795 000024FD EBEB                    	jmp .L_tc_recycle_frame_loop_0e59
  4796                                  .L_tc_recycle_frame_done_0e59:
  4797 000024FF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4798 00002500 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4799 00002504 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4800 00002507 C9                      	leave
  4801 00002508 C21800                  	ret AND_KILL_FRAME(1)
  4802                                  .L_lambda_simple_end_0a4c:	; new closure is in rax
  4803 0000250B 48890425[14130000]      	mov qword [free_var_58], rax
  4804 00002513 48B8-                   	mov rax, sob_void
  4804 00002515 [0000000000000000] 
  4805                                  
  4806 0000251D 4889C7                  	mov rdi, rax
  4807 00002520 E8F4610100              	call print_sexpr_if_not_void
  4808 00002525 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4809 0000252A E8955F0100              	call malloc
  4810 0000252F 50                      	push rax
  4811 00002530 BF00000000              	mov rdi, 8 * 0	; new rib
  4812 00002535 E88A5F0100              	call malloc
  4813 0000253A 50                      	push rax
  4814 0000253B BF08000000              	mov rdi, 8 * 1	; extended env
  4815 00002540 E87F5F0100              	call malloc
  4816 00002545 488B7D10                	mov rdi, ENV
  4817 00002549 BE00000000              	mov rsi, 0
  4818 0000254E BA01000000              	mov rdx, 1
  4819                                  .L_lambda_simple_env_loop_0a4d:	; ext_env[i + 1] <-- env[i]
  4820 00002553 4883FE00                	cmp rsi, 0
  4821 00002557 7410                    	je .L_lambda_simple_env_end_0a4d
  4822 00002559 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4823 0000255D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4824 00002561 48FFC6                  	inc rsi
  4825 00002564 48FFC2                  	inc rdx
  4826 00002567 EBEA                    	jmp .L_lambda_simple_env_loop_0a4d
  4827                                  .L_lambda_simple_env_end_0a4d:
  4828 00002569 5B                      	pop rbx
  4829 0000256A BE00000000              	mov rsi, 0
  4830                                  .L_lambda_simple_params_loop_0a4d:	; copy params
  4831 0000256F 4883FE00                	cmp rsi, 0
  4832 00002573 740E                    	je .L_lambda_simple_params_end_0a4d
  4833 00002575 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4834 0000257A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4835 0000257E 48FFC6                  	inc rsi
  4836 00002581 EBEC                    	jmp .L_lambda_simple_params_loop_0a4d
  4837                                  .L_lambda_simple_params_end_0a4d:
  4838 00002583 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4839 00002586 4889C3                  	mov rbx, rax
  4840 00002589 58                      	pop rax
  4841 0000258A C60004                  	mov byte [rax], T_closure
  4842 0000258D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4843 00002591 48C74009[9E250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a4d
  4844 00002599 E9AA000000              	jmp .L_lambda_simple_end_0a4d
  4845                                  .L_lambda_simple_code_0a4d:	; lambda-simple body
  4846 0000259E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4847 000025A4 740B                    	je .L_lambda_simple_arity_check_ok_0a4d
  4848 000025A6 FF742410                	push qword [rsp + 8 * 2]
  4849 000025AA 6A01                    	push 1
  4850 000025AC E9CC5E0100              	jmp L_error_incorrect_arity_simple
  4851                                  .L_lambda_simple_arity_check_ok_0a4d:
  4852 000025B1 C8000000                	enter 0, 0
  4853                                  	; preparing a tail-call
  4854                                  	; preparing a non-tail-call
  4855 000025B5 488B4520                	mov rax, PARAM(0)	; param x
  4856 000025B9 50                      	push rax
  4857 000025BA 6A01                    	push 1	; arg count
  4858 000025BC 488B0425[F2120000]      	mov rax, qword [free_var_56]	; free var cdar
  4859 000025C4 803805                  	cmp byte [rax], T_undefined
  4860 000025C7 0F84CA5D0100            	je L_error_fvar_undefined
  4861 000025CD 803804                  	cmp byte [rax], T_closure
  4862 000025D0 0F85455E0100            	jne L_error_non_closure
  4863 000025D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4864 000025D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4865 000025DC 50                      	push rax
  4866 000025DD 6A01                    	push 1	; arg count
  4867 000025DF 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4868 000025E7 803805                  	cmp byte [rax], T_undefined
  4869 000025EA 0F84A75D0100            	je L_error_fvar_undefined
  4870 000025F0 803804                  	cmp byte [rax], T_closure
  4871 000025F3 0F85225E0100            	jne L_error_non_closure
  4872 000025F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4873 000025FC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4874 000025FF FF7500                  	push qword[rbp]
  4875 00002602 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4876 00002605 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4877 00002609 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4878 0000260D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4879 00002611 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4880 00002614 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4881 00002617 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4882 0000261C 4983C103                	add r9, 3 	 ;for getting to the params
  4883 00002620 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4884 00002624 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4885                                  .L_tc_recycle_frame_loop_0e5a:
  4886 00002627 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4887 0000262A 7410                    	je .L_tc_recycle_frame_done_0e5a
  4888 0000262C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4889 0000262F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4890 00002632 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4891 00002636 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4892 0000263A EBEB                    	jmp .L_tc_recycle_frame_loop_0e5a
  4893                                  .L_tc_recycle_frame_done_0e5a:
  4894 0000263C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4895 0000263D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4896 00002641 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4897 00002644 C9                      	leave
  4898 00002645 C21800                  	ret AND_KILL_FRAME(1)
  4899                                  .L_lambda_simple_end_0a4d:	; new closure is in rax
  4900 00002648 48890425[36130000]      	mov qword [free_var_60], rax
  4901 00002650 48B8-                   	mov rax, sob_void
  4901 00002652 [0000000000000000] 
  4902                                  
  4903 0000265A 4889C7                  	mov rdi, rax
  4904 0000265D E8B7600100              	call print_sexpr_if_not_void
  4905 00002662 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4906 00002667 E8585E0100              	call malloc
  4907 0000266C 50                      	push rax
  4908 0000266D BF00000000              	mov rdi, 8 * 0	; new rib
  4909 00002672 E84D5E0100              	call malloc
  4910 00002677 50                      	push rax
  4911 00002678 BF08000000              	mov rdi, 8 * 1	; extended env
  4912 0000267D E8425E0100              	call malloc
  4913 00002682 488B7D10                	mov rdi, ENV
  4914 00002686 BE00000000              	mov rsi, 0
  4915 0000268B BA01000000              	mov rdx, 1
  4916                                  .L_lambda_simple_env_loop_0a4e:	; ext_env[i + 1] <-- env[i]
  4917 00002690 4883FE00                	cmp rsi, 0
  4918 00002694 7410                    	je .L_lambda_simple_env_end_0a4e
  4919 00002696 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4920 0000269A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4921 0000269E 48FFC6                  	inc rsi
  4922 000026A1 48FFC2                  	inc rdx
  4923 000026A4 EBEA                    	jmp .L_lambda_simple_env_loop_0a4e
  4924                                  .L_lambda_simple_env_end_0a4e:
  4925 000026A6 5B                      	pop rbx
  4926 000026A7 BE00000000              	mov rsi, 0
  4927                                  .L_lambda_simple_params_loop_0a4e:	; copy params
  4928 000026AC 4883FE00                	cmp rsi, 0
  4929 000026B0 740E                    	je .L_lambda_simple_params_end_0a4e
  4930 000026B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4931 000026B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4932 000026BB 48FFC6                  	inc rsi
  4933 000026BE EBEC                    	jmp .L_lambda_simple_params_loop_0a4e
  4934                                  .L_lambda_simple_params_end_0a4e:
  4935 000026C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4936 000026C3 4889C3                  	mov rbx, rax
  4937 000026C6 58                      	pop rax
  4938 000026C7 C60004                  	mov byte [rax], T_closure
  4939 000026CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4940 000026CE 48C74009[DB260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a4e
  4941 000026D6 E9AA000000              	jmp .L_lambda_simple_end_0a4e
  4942                                  .L_lambda_simple_code_0a4e:	; lambda-simple body
  4943 000026DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4944 000026E1 740B                    	je .L_lambda_simple_arity_check_ok_0a4e
  4945 000026E3 FF742410                	push qword [rsp + 8 * 2]
  4946 000026E7 6A01                    	push 1
  4947 000026E9 E98F5D0100              	jmp L_error_incorrect_arity_simple
  4948                                  .L_lambda_simple_arity_check_ok_0a4e:
  4949 000026EE C8000000                	enter 0, 0
  4950                                  	; preparing a tail-call
  4951                                  	; preparing a non-tail-call
  4952 000026F2 488B4520                	mov rax, PARAM(0)	; param x
  4953 000026F6 50                      	push rax
  4954 000026F7 6A01                    	push 1	; arg count
  4955 000026F9 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4956 00002701 803805                  	cmp byte [rax], T_undefined
  4957 00002704 0F848D5C0100            	je L_error_fvar_undefined
  4958 0000270A 803804                  	cmp byte [rax], T_closure
  4959 0000270D 0F85085D0100            	jne L_error_non_closure
  4960 00002713 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4961 00002716 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4962 00002719 50                      	push rax
  4963 0000271A 6A01                    	push 1	; arg count
  4964 0000271C 488B0425[69130000]      	mov rax, qword [free_var_63]	; free var cddr
  4965 00002724 803805                  	cmp byte [rax], T_undefined
  4966 00002727 0F846A5C0100            	je L_error_fvar_undefined
  4967 0000272D 803804                  	cmp byte [rax], T_closure
  4968 00002730 0F85E55C0100            	jne L_error_non_closure
  4969 00002736 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4970 00002739 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  4971 0000273C FF7500                  	push qword[rbp]
  4972 0000273F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  4973 00002742 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  4974 00002746 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  4975 0000274A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  4976 0000274E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  4977 00002751 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  4978 00002754 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  4979 00002759 4983C103                	add r9, 3 	 ;for getting to the params
  4980 0000275D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  4981 00002761 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  4982                                  .L_tc_recycle_frame_loop_0e5b:
  4983 00002764 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  4984 00002767 7410                    	je .L_tc_recycle_frame_done_0e5b
  4985 00002769 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  4986 0000276C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  4987 0000276F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  4988 00002773 4983E808                	sub r8, 8	 ;move the top of the stack one down
  4989 00002777 EBEB                    	jmp .L_tc_recycle_frame_loop_0e5b
  4990                                  .L_tc_recycle_frame_done_0e5b:
  4991 00002779 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  4992 0000277A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  4993 0000277E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4994 00002781 C9                      	leave
  4995 00002782 C21800                  	ret AND_KILL_FRAME(1)
  4996                                  .L_lambda_simple_end_0a4e:	; new closure is in rax
  4997 00002785 48890425[47130000]      	mov qword [free_var_61], rax
  4998 0000278D 48B8-                   	mov rax, sob_void
  4998 0000278F [0000000000000000] 
  4999                                  
  5000 00002797 4889C7                  	mov rdi, rax
  5001 0000279A E87A5F0100              	call print_sexpr_if_not_void
  5002 0000279F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5003 000027A4 E81B5D0100              	call malloc
  5004 000027A9 50                      	push rax
  5005 000027AA BF00000000              	mov rdi, 8 * 0	; new rib
  5006 000027AF E8105D0100              	call malloc
  5007 000027B4 50                      	push rax
  5008 000027B5 BF08000000              	mov rdi, 8 * 1	; extended env
  5009 000027BA E8055D0100              	call malloc
  5010 000027BF 488B7D10                	mov rdi, ENV
  5011 000027C3 BE00000000              	mov rsi, 0
  5012 000027C8 BA01000000              	mov rdx, 1
  5013                                  .L_lambda_simple_env_loop_0a4f:	; ext_env[i + 1] <-- env[i]
  5014 000027CD 4883FE00                	cmp rsi, 0
  5015 000027D1 7410                    	je .L_lambda_simple_env_end_0a4f
  5016 000027D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5017 000027D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5018 000027DB 48FFC6                  	inc rsi
  5019 000027DE 48FFC2                  	inc rdx
  5020 000027E1 EBEA                    	jmp .L_lambda_simple_env_loop_0a4f
  5021                                  .L_lambda_simple_env_end_0a4f:
  5022 000027E3 5B                      	pop rbx
  5023 000027E4 BE00000000              	mov rsi, 0
  5024                                  .L_lambda_simple_params_loop_0a4f:	; copy params
  5025 000027E9 4883FE00                	cmp rsi, 0
  5026 000027ED 740E                    	je .L_lambda_simple_params_end_0a4f
  5027 000027EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5028 000027F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5029 000027F8 48FFC6                  	inc rsi
  5030 000027FB EBEC                    	jmp .L_lambda_simple_params_loop_0a4f
  5031                                  .L_lambda_simple_params_end_0a4f:
  5032 000027FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5033 00002800 4889C3                  	mov rbx, rax
  5034 00002803 58                      	pop rax
  5035 00002804 C60004                  	mov byte [rax], T_closure
  5036 00002807 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5037 0000280B 48C74009[18280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a4f
  5038 00002813 E91C010000              	jmp .L_lambda_simple_end_0a4f
  5039                                  .L_lambda_simple_code_0a4f:	; lambda-simple body
  5040 00002818 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5041 0000281E 740B                    	je .L_lambda_simple_arity_check_ok_0a4f
  5042 00002820 FF742410                	push qword [rsp + 8 * 2]
  5043 00002824 6A01                    	push 1
  5044 00002826 E9525C0100              	jmp L_error_incorrect_arity_simple
  5045                                  .L_lambda_simple_arity_check_ok_0a4f:
  5046 0000282B C8000000                	enter 0, 0
  5047                                  	; preparing a non-tail-call
  5048 0000282F 488B4520                	mov rax, PARAM(0)	; param e
  5049 00002833 50                      	push rax
  5050 00002834 6A01                    	push 1	; arg count
  5051 00002836 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  5052 0000283E 803805                  	cmp byte [rax], T_undefined
  5053 00002841 0F84505B0100            	je L_error_fvar_undefined
  5054 00002847 803804                  	cmp byte [rax], T_closure
  5055 0000284A 0F85CB5B0100            	jne L_error_non_closure
  5056 00002850 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5057 00002853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5058 00002856 483D[02000000]          	cmp rax, sob_boolean_false
  5059 0000285C 0F85CE000000            	jne .L_or_end_00e0
  5060                                  	; preparing a non-tail-call
  5061 00002862 488B4520                	mov rax, PARAM(0)	; param e
  5062 00002866 50                      	push rax
  5063 00002867 6A01                    	push 1	; arg count
  5064 00002869 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  5065 00002871 803805                  	cmp byte [rax], T_undefined
  5066 00002874 0F841D5B0100            	je L_error_fvar_undefined
  5067 0000287A 803804                  	cmp byte [rax], T_closure
  5068 0000287D 0F85985B0100            	jne L_error_non_closure
  5069 00002883 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5070 00002886 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5071 00002889 483D[02000000]          	cmp rax, sob_boolean_false
  5072 0000288F 0F8491000000            	je .L_if_else_07a9
  5073                                  	; preparing a tail-call
  5074                                  	; preparing a non-tail-call
  5075 00002895 488B4520                	mov rax, PARAM(0)	; param e
  5076 00002899 50                      	push rax
  5077 0000289A 6A01                    	push 1	; arg count
  5078 0000289C 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  5079 000028A4 803805                  	cmp byte [rax], T_undefined
  5080 000028A7 0F84EA5A0100            	je L_error_fvar_undefined
  5081 000028AD 803804                  	cmp byte [rax], T_closure
  5082 000028B0 0F85655B0100            	jne L_error_non_closure
  5083 000028B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5084 000028B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5085 000028BC 50                      	push rax
  5086 000028BD 6A01                    	push 1	; arg count
  5087 000028BF 488B0425[9A150000]      	mov rax, qword [free_var_96]	; free var list?
  5088 000028C7 803805                  	cmp byte [rax], T_undefined
  5089 000028CA 0F84C75A0100            	je L_error_fvar_undefined
  5090 000028D0 803804                  	cmp byte [rax], T_closure
  5091 000028D3 0F85425B0100            	jne L_error_non_closure
  5092 000028D9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5093 000028DC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5094 000028DF FF7500                  	push qword[rbp]
  5095 000028E2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5096 000028E5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5097 000028E9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5098 000028ED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5099 000028F1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5100 000028F4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5101 000028F7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5102 000028FC 4983C103                	add r9, 3 	 ;for getting to the params
  5103 00002900 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5104 00002904 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5105                                  .L_tc_recycle_frame_loop_0e5c:
  5106 00002907 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5107 0000290A 7410                    	je .L_tc_recycle_frame_done_0e5c
  5108 0000290C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5109 0000290F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5110 00002912 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5111 00002916 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5112 0000291A EBEB                    	jmp .L_tc_recycle_frame_loop_0e5c
  5113                                  .L_tc_recycle_frame_done_0e5c:
  5114 0000291C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5115 0000291D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5116 00002921 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5117 00002924 EB0A                    	jmp .L_if_end_07a9
  5118                                  .L_if_else_07a9:
  5119 00002926 48B8-                   	mov rax, L_constants + 2
  5119 00002928 [0200000000000000] 
  5120                                  .L_if_end_07a9:
  5121                                  .L_or_end_00e0:
  5122 00002930 C9                      	leave
  5123 00002931 C21800                  	ret AND_KILL_FRAME(1)
  5124                                  .L_lambda_simple_end_0a4f:	; new closure is in rax
  5125 00002934 48890425[9A150000]      	mov qword [free_var_96], rax
  5126 0000293C 48B8-                   	mov rax, sob_void
  5126 0000293E [0000000000000000] 
  5127                                  
  5128 00002946 4889C7                  	mov rdi, rax
  5129 00002949 E8CB5D0100              	call print_sexpr_if_not_void
  5130 0000294E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5131 00002953 E86C5B0100              	call malloc
  5132 00002958 50                      	push rax
  5133 00002959 BF00000000              	mov rdi, 8 * 0	; new rib
  5134 0000295E E8615B0100              	call malloc
  5135 00002963 50                      	push rax
  5136 00002964 BF08000000              	mov rdi, 8 * 1	; extended env
  5137 00002969 E8565B0100              	call malloc
  5138 0000296E 488B7D10                	mov rdi, ENV
  5139 00002972 BE00000000              	mov rsi, 0
  5140 00002977 BA01000000              	mov rdx, 1
  5141                                  .L_lambda_opt_env_loop_013f:	; ext_env[i + 1] <-- env[i]
  5142 0000297C 4883FE00                	cmp rsi, 0
  5143 00002980 7410                    	je .L_lambda_opt_env_end_013f
  5144 00002982 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5145 00002986 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5146 0000298A 48FFC6                  	inc rsi
  5147 0000298D 48FFC2                  	inc rdx
  5148 00002990 EBEA                    	jmp .L_lambda_opt_env_loop_013f
  5149                                  .L_lambda_opt_env_end_013f:
  5150 00002992 5B                      	pop rbx
  5151 00002993 BE00000000              	mov rsi, 0
  5152                                  .L_lambda_opt_params_loop_013f:	; copy params
  5153 00002998 4883FE00                	cmp rsi, 0
  5154 0000299C 740E                    	je .L_lambda_opt_params_end_013f
  5155 0000299E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5156 000029A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5157 000029A7 48FFC6                  	inc rsi
  5158 000029AA EBEC                    	jmp .L_lambda_opt_params_loop_013f
  5159                                  .L_lambda_opt_params_end_013f:
  5160 000029AC 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  5161 000029AF 4889C3                  	mov rbx, rax
  5162 000029B2 58                      	pop rax
  5163 000029B3 C60004                  	mov byte [rax], T_closure
  5164 000029B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5165 000029BA 48C74009[C7290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_013f
  5166 000029C2 E919010000              	jmp .L_lambda_opt_end_013f
  5167                                  .L_lambda_opt_code_013f:	; lambda-opt body
  5168 000029C7 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5169 000029CD 740D                    	je .L_lambda_opt_arity_check_exact_013f
  5170 000029CF 7F4C                    	jg .L_lambda_opt_arity_check_more_013f
  5171 000029D1 FF742410                	push qword [rsp + 8 * 2]
  5172 000029D5 6A00                    	push 0
  5173 000029D7 E9B55A0100              	jmp L_error_incorrect_arity_opt
  5174                                  .L_lambda_opt_arity_check_exact_013f:
  5175 000029DC 4883EC08                	sub rsp, 8
  5176 000029E0 488B442408              	mov rax, qword[rsp + 8 *1]
  5177 000029E5 48890424                	mov qword[rsp], rax  
  5178 000029E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5179 000029EE 4889442408              	mov qword[rsp + 8 * 1], rax
  5180 000029F3 B801000000              	mov rax, 1
  5181 000029F8 4889442410              	mov qword[rsp + 8 *2], rax
  5182 000029FD 48B8-                   	mov rax, sob_nil
  5182 000029FF [0100000000000000] 
  5183 00002A07 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5184 00002A0C C8000000                	enter 0, 0
  5185 00002A10 488B4520                	mov rax, PARAM(0)	; param args
  5186 00002A14 C9                      	leave
  5187 00002A15 C21800                  	ret AND_KILL_FRAME(1)
  5188 00002A18 E9C3000000              	jmp .L_lambda_opt_end_013f	; new closure is in rax
  5189                                  .L_lambda_opt_arity_check_more_013f:
  5190 00002A1D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5191 00002A22 49B9-                   	mov r9, sob_nil
  5191 00002A24 [0100000000000000] 
  5192 00002A2C 4889E3                  	mov rbx, rsp 
  5193 00002A2F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5194 00002A33 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5195 00002A36 49C1E003                	shl r8, 3
  5196 00002A3A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5197 00002A3D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5198                                  .L_lambda_opt_stack_shrink_loop_013f:
  5199 00002A42 4983F800                	cmp r8, 0
  5200 00002A46 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_013f
  5201 00002A48 BF11000000              	mov rdi, 1+8+8 ;for pair
  5202 00002A4D E8725A0100              	call malloc;to create the pair in the stack
  5203 00002A52 C60021                  	mov byte [rax], T_pair ; to make it a pair
  5204 00002A55 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  5205 00002A58 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  5206 00002A5C 4C894809                 	mov qword[rax+1+8],r9
  5207 00002A60 4989C1                  	mov r9, rax ;for the recursion 
  5208 00002A63 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  5209 00002A66 4883EB08                	sub rbx, 8 ;to get the next param to copy
  5210 00002A6A EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_013f
  5211                                  .L_lambda_opt_stack_shrink_loop_exit_013f:
  5212 00002A6C 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  5213 00002A71 4883E901                	sub rcx, 1
  5214 00002A75 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  5215 00002A79 4801CC                  	add rsp, rcx ;shrinking the stack
  5216 00002A7C 4889E0                  	mov rax, rsp
  5217 00002A7F 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  5218 00002A82 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  5219 00002A86 49FFC8                  	dec r8 ;we start with param 0, not 1 
  5220 00002A89 4883C018                	add rax, 3 * 8;now rax is param 0
  5221 00002A8D 49C1E003                	shl r8, 3;convert to byte
  5222 00002A91 4C01C0                  	add rax, r8;now rax is the top of the stack
  5223 00002A94 4C8908                  	mov qword[rax], r9;puting the list at the top
  5224 00002A97 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  5225 00002A9B 4889E3                  	mov rbx, rsp 
  5226 00002A9E 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  5227 00002AA1 41BA00000000            	mov r10, 0;r10 is the not opt params length
  5228 00002AA7 49FFCA                  	dec r10 
  5229 00002AAA 49C1E203                	shl r10, 3;to get bytes
  5230 00002AAE 4883C318                	add rbx, 3*8;rbx is the first param
  5231 00002AB2 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  5232 00002AB5 4889E0                  	mov rax, rsp
  5233 00002AB8 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5234 00002ABB 48C744241001000000      	mov qword [rsp+2*8], 1
  5235 00002AC4 488B5808                	mov rbx, qword[rax + 8 *1]
  5236 00002AC8 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5237 00002ACD 488B18                  	mov rbx, qword[rax]
  5238 00002AD0 48891C24                	mov qword [rsp], rbx
  5239 00002AD4 C8000000                	enter 0, 0
  5240 00002AD8 488B4520                	mov rax, PARAM(0)	; param args
  5241 00002ADC C9                      	leave
  5242 00002ADD C21800                  	ret AND_KILL_FRAME(1)
  5243                                  .L_lambda_opt_end_013f:	; new closure is in rax
  5244 00002AE0 48890425[56150000]      	mov qword [free_var_92], rax
  5245 00002AE8 48B8-                   	mov rax, sob_void
  5245 00002AEA [0000000000000000] 
  5246                                  
  5247 00002AF2 4889C7                  	mov rdi, rax
  5248 00002AF5 E81F5C0100              	call print_sexpr_if_not_void
  5249 00002AFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5250 00002AFF E8C0590100              	call malloc
  5251 00002B04 50                      	push rax
  5252 00002B05 BF00000000              	mov rdi, 8 * 0	; new rib
  5253 00002B0A E8B5590100              	call malloc
  5254 00002B0F 50                      	push rax
  5255 00002B10 BF08000000              	mov rdi, 8 * 1	; extended env
  5256 00002B15 E8AA590100              	call malloc
  5257 00002B1A 488B7D10                	mov rdi, ENV
  5258 00002B1E BE00000000              	mov rsi, 0
  5259 00002B23 BA01000000              	mov rdx, 1
  5260                                  .L_lambda_simple_env_loop_0a50:	; ext_env[i + 1] <-- env[i]
  5261 00002B28 4883FE00                	cmp rsi, 0
  5262 00002B2C 7410                    	je .L_lambda_simple_env_end_0a50
  5263 00002B2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5264 00002B32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5265 00002B36 48FFC6                  	inc rsi
  5266 00002B39 48FFC2                  	inc rdx
  5267 00002B3C EBEA                    	jmp .L_lambda_simple_env_loop_0a50
  5268                                  .L_lambda_simple_env_end_0a50:
  5269 00002B3E 5B                      	pop rbx
  5270 00002B3F BE00000000              	mov rsi, 0
  5271                                  .L_lambda_simple_params_loop_0a50:	; copy params
  5272 00002B44 4883FE00                	cmp rsi, 0
  5273 00002B48 740E                    	je .L_lambda_simple_params_end_0a50
  5274 00002B4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5275 00002B4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5276 00002B53 48FFC6                  	inc rsi
  5277 00002B56 EBEC                    	jmp .L_lambda_simple_params_loop_0a50
  5278                                  .L_lambda_simple_params_end_0a50:
  5279 00002B58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5280 00002B5B 4889C3                  	mov rbx, rax
  5281 00002B5E 58                      	pop rax
  5282 00002B5F C60004                  	mov byte [rax], T_closure
  5283 00002B62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5284 00002B66 48C74009[702B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a50
  5285 00002B6E EB3D                    	jmp .L_lambda_simple_end_0a50
  5286                                  .L_lambda_simple_code_0a50:	; lambda-simple body
  5287 00002B70 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5288 00002B76 740B                    	je .L_lambda_simple_arity_check_ok_0a50
  5289 00002B78 FF742410                	push qword [rsp + 8 * 2]
  5290 00002B7C 6A01                    	push 1
  5291 00002B7E E9FA580100              	jmp L_error_incorrect_arity_simple
  5292                                  .L_lambda_simple_arity_check_ok_0a50:
  5293 00002B83 C8000000                	enter 0, 0
  5294 00002B87 488B4520                	mov rax, PARAM(0)	; param x
  5295 00002B8B 483D[02000000]          	cmp rax, sob_boolean_false
  5296 00002B91 740C                    	je .L_if_else_07aa
  5297 00002B93 48B8-                   	mov rax, L_constants + 2
  5297 00002B95 [0200000000000000] 
  5298 00002B9D EB0A                    	jmp .L_if_end_07aa
  5299                                  .L_if_else_07aa:
  5300 00002B9F 48B8-                   	mov rax, L_constants + 3
  5300 00002BA1 [0300000000000000] 
  5301                                  .L_if_end_07aa:
  5302 00002BA9 C9                      	leave
  5303 00002BAA C21800                  	ret AND_KILL_FRAME(1)
  5304                                  .L_lambda_simple_end_0a50:	; new closure is in rax
  5305 00002BAD 48890425[44160000]      	mov qword [free_var_106], rax
  5306 00002BB5 48B8-                   	mov rax, sob_void
  5306 00002BB7 [0000000000000000] 
  5307                                  
  5308 00002BBF 4889C7                  	mov rdi, rax
  5309 00002BC2 E8525B0100              	call print_sexpr_if_not_void
  5310 00002BC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5311 00002BCC E8F3580100              	call malloc
  5312 00002BD1 50                      	push rax
  5313 00002BD2 BF00000000              	mov rdi, 8 * 0	; new rib
  5314 00002BD7 E8E8580100              	call malloc
  5315 00002BDC 50                      	push rax
  5316 00002BDD BF08000000              	mov rdi, 8 * 1	; extended env
  5317 00002BE2 E8DD580100              	call malloc
  5318 00002BE7 488B7D10                	mov rdi, ENV
  5319 00002BEB BE00000000              	mov rsi, 0
  5320 00002BF0 BA01000000              	mov rdx, 1
  5321                                  .L_lambda_simple_env_loop_0a51:	; ext_env[i + 1] <-- env[i]
  5322 00002BF5 4883FE00                	cmp rsi, 0
  5323 00002BF9 7410                    	je .L_lambda_simple_env_end_0a51
  5324 00002BFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5325 00002BFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5326 00002C03 48FFC6                  	inc rsi
  5327 00002C06 48FFC2                  	inc rdx
  5328 00002C09 EBEA                    	jmp .L_lambda_simple_env_loop_0a51
  5329                                  .L_lambda_simple_env_end_0a51:
  5330 00002C0B 5B                      	pop rbx
  5331 00002C0C BE00000000              	mov rsi, 0
  5332                                  .L_lambda_simple_params_loop_0a51:	; copy params
  5333 00002C11 4883FE00                	cmp rsi, 0
  5334 00002C15 740E                    	je .L_lambda_simple_params_end_0a51
  5335 00002C17 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5336 00002C1C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5337 00002C20 48FFC6                  	inc rsi
  5338 00002C23 EBEC                    	jmp .L_lambda_simple_params_loop_0a51
  5339                                  .L_lambda_simple_params_end_0a51:
  5340 00002C25 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5341 00002C28 4889C3                  	mov rbx, rax
  5342 00002C2B 58                      	pop rax
  5343 00002C2C C60004                  	mov byte [rax], T_closure
  5344 00002C2F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5345 00002C33 48C74009[402C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a51
  5346 00002C3B E9B6000000              	jmp .L_lambda_simple_end_0a51
  5347                                  .L_lambda_simple_code_0a51:	; lambda-simple body
  5348 00002C40 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5349 00002C46 740B                    	je .L_lambda_simple_arity_check_ok_0a51
  5350 00002C48 FF742410                	push qword [rsp + 8 * 2]
  5351 00002C4C 6A01                    	push 1
  5352 00002C4E E92A580100              	jmp L_error_incorrect_arity_simple
  5353                                  .L_lambda_simple_arity_check_ok_0a51:
  5354 00002C53 C8000000                	enter 0, 0
  5355                                  	; preparing a non-tail-call
  5356 00002C57 488B4520                	mov rax, PARAM(0)	; param q
  5357 00002C5B 50                      	push rax
  5358 00002C5C 6A01                    	push 1	; arg count
  5359 00002C5E 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
  5360 00002C66 803805                  	cmp byte [rax], T_undefined
  5361 00002C69 0F8428570100            	je L_error_fvar_undefined
  5362 00002C6F 803804                  	cmp byte [rax], T_closure
  5363 00002C72 0F85A3570100            	jne L_error_non_closure
  5364 00002C78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5365 00002C7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5366 00002C7E 483D[02000000]          	cmp rax, sob_boolean_false
  5367 00002C84 756C                    	jne .L_or_end_00e1
  5368                                  	; preparing a tail-call
  5369 00002C86 488B4520                	mov rax, PARAM(0)	; param q
  5370 00002C8A 50                      	push rax
  5371 00002C8B 6A01                    	push 1	; arg count
  5372 00002C8D 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
  5373 00002C95 803805                  	cmp byte [rax], T_undefined
  5374 00002C98 0F84F9560100            	je L_error_fvar_undefined
  5375 00002C9E 803804                  	cmp byte [rax], T_closure
  5376 00002CA1 0F8574570100            	jne L_error_non_closure
  5377 00002CA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5378 00002CAA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5379 00002CAD FF7500                  	push qword[rbp]
  5380 00002CB0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5381 00002CB3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5382 00002CB7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5383 00002CBB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5384 00002CBF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5385 00002CC2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5386 00002CC5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5387 00002CCA 4983C103                	add r9, 3 	 ;for getting to the params
  5388 00002CCE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5389 00002CD2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5390                                  .L_tc_recycle_frame_loop_0e5d:
  5391 00002CD5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5392 00002CD8 7410                    	je .L_tc_recycle_frame_done_0e5d
  5393 00002CDA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5394 00002CDD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5395 00002CE0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5396 00002CE4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5397 00002CE8 EBEB                    	jmp .L_tc_recycle_frame_loop_0e5d
  5398                                  .L_tc_recycle_frame_done_0e5d:
  5399 00002CEA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5400 00002CEB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5401 00002CEF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5402                                  .L_or_end_00e1:
  5403 00002CF2 C9                      	leave
  5404 00002CF3 C21800                  	ret AND_KILL_FRAME(1)
  5405                                  .L_lambda_simple_end_0a51:	; new closure is in rax
  5406 00002CF6 48890425[CC160000]      	mov qword [free_var_114], rax
  5407 00002CFE 48B8-                   	mov rax, sob_void
  5407 00002D00 [0000000000000000] 
  5408                                  
  5409 00002D08 4889C7                  	mov rdi, rax
  5410 00002D0B E8095A0100              	call print_sexpr_if_not_void
  5411                                  	; preparing a non-tail-call
  5412 00002D10 48B8-                   	mov rax, L_constants + 1993
  5412 00002D12 [C907000000000000] 
  5413 00002D1A 50                      	push rax
  5414 00002D1B 6A01                    	push 1	; arg count
  5415 00002D1D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5416 00002D22 E89D570100              	call malloc
  5417 00002D27 50                      	push rax
  5418 00002D28 BF00000000              	mov rdi, 8 * 0	; new rib
  5419 00002D2D E892570100              	call malloc
  5420 00002D32 50                      	push rax
  5421 00002D33 BF08000000              	mov rdi, 8 * 1	; extended env
  5422 00002D38 E887570100              	call malloc
  5423 00002D3D 488B7D10                	mov rdi, ENV
  5424 00002D41 BE00000000              	mov rsi, 0
  5425 00002D46 BA01000000              	mov rdx, 1
  5426                                  .L_lambda_simple_env_loop_0a52:	; ext_env[i + 1] <-- env[i]
  5427 00002D4B 4883FE00                	cmp rsi, 0
  5428 00002D4F 7410                    	je .L_lambda_simple_env_end_0a52
  5429 00002D51 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5430 00002D55 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5431 00002D59 48FFC6                  	inc rsi
  5432 00002D5C 48FFC2                  	inc rdx
  5433 00002D5F EBEA                    	jmp .L_lambda_simple_env_loop_0a52
  5434                                  .L_lambda_simple_env_end_0a52:
  5435 00002D61 5B                      	pop rbx
  5436 00002D62 BE00000000              	mov rsi, 0
  5437                                  .L_lambda_simple_params_loop_0a52:	; copy params
  5438 00002D67 4883FE00                	cmp rsi, 0
  5439 00002D6B 740E                    	je .L_lambda_simple_params_end_0a52
  5440 00002D6D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5441 00002D72 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5442 00002D76 48FFC6                  	inc rsi
  5443 00002D79 EBEC                    	jmp .L_lambda_simple_params_loop_0a52
  5444                                  .L_lambda_simple_params_end_0a52:
  5445 00002D7B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5446 00002D7E 4889C3                  	mov rbx, rax
  5447 00002D81 58                      	pop rax
  5448 00002D82 C60004                  	mov byte [rax], T_closure
  5449 00002D85 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5450 00002D89 48C74009[962D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a52
  5451 00002D91 E972040000              	jmp .L_lambda_simple_end_0a52
  5452                                  .L_lambda_simple_code_0a52:	; lambda-simple body
  5453 00002D96 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5454 00002D9C 740B                    	je .L_lambda_simple_arity_check_ok_0a52
  5455 00002D9E FF742410                	push qword [rsp + 8 * 2]
  5456 00002DA2 6A01                    	push 1
  5457 00002DA4 E9D4560100              	jmp L_error_incorrect_arity_simple
  5458                                  .L_lambda_simple_arity_check_ok_0a52:
  5459 00002DA9 C8000000                	enter 0, 0
  5460 00002DAD BF08000000              	mov rdi, 8*1
  5461 00002DB2 E80D570100              	call malloc
  5462 00002DB7 488B5D20                	mov rbx, PARAM(0)
  5463 00002DBB 488918                  	mov qword[rax], rbx
  5464 00002DBE 48894520                	mov PARAM(0), rax
  5465 00002DC2 48B8-                   	mov rax, sob_void
  5465 00002DC4 [0000000000000000] 
  5466                                  
  5467 00002DCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5468 00002DD1 E8EE560100              	call malloc
  5469 00002DD6 50                      	push rax
  5470 00002DD7 BF08000000              	mov rdi, 8 * 1	; new rib
  5471 00002DDC E8E3560100              	call malloc
  5472 00002DE1 50                      	push rax
  5473 00002DE2 BF10000000              	mov rdi, 8 * 2	; extended env
  5474 00002DE7 E8D8560100              	call malloc
  5475 00002DEC 488B7D10                	mov rdi, ENV
  5476 00002DF0 BE00000000              	mov rsi, 0
  5477 00002DF5 BA01000000              	mov rdx, 1
  5478                                  .L_lambda_simple_env_loop_0a53:	; ext_env[i + 1] <-- env[i]
  5479 00002DFA 4883FE01                	cmp rsi, 1
  5480 00002DFE 7410                    	je .L_lambda_simple_env_end_0a53
  5481 00002E00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5482 00002E04 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5483 00002E08 48FFC6                  	inc rsi
  5484 00002E0B 48FFC2                  	inc rdx
  5485 00002E0E EBEA                    	jmp .L_lambda_simple_env_loop_0a53
  5486                                  .L_lambda_simple_env_end_0a53:
  5487 00002E10 5B                      	pop rbx
  5488 00002E11 BE00000000              	mov rsi, 0
  5489                                  .L_lambda_simple_params_loop_0a53:	; copy params
  5490 00002E16 4883FE01                	cmp rsi, 1
  5491 00002E1A 740E                    	je .L_lambda_simple_params_end_0a53
  5492 00002E1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5493 00002E21 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5494 00002E25 48FFC6                  	inc rsi
  5495 00002E28 EBEC                    	jmp .L_lambda_simple_params_loop_0a53
  5496                                  .L_lambda_simple_params_end_0a53:
  5497 00002E2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5498 00002E2D 4889C3                  	mov rbx, rax
  5499 00002E30 58                      	pop rax
  5500 00002E31 C60004                  	mov byte [rax], T_closure
  5501 00002E34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5502 00002E38 48C74009[452E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a53
  5503 00002E40 E92E010000              	jmp .L_lambda_simple_end_0a53
  5504                                  .L_lambda_simple_code_0a53:	; lambda-simple body
  5505 00002E45 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5506 00002E4B 740B                    	je .L_lambda_simple_arity_check_ok_0a53
  5507 00002E4D FF742410                	push qword [rsp + 8 * 2]
  5508 00002E51 6A02                    	push 2
  5509 00002E53 E925560100              	jmp L_error_incorrect_arity_simple
  5510                                  .L_lambda_simple_arity_check_ok_0a53:
  5511 00002E58 C8000000                	enter 0, 0
  5512                                  	; preparing a non-tail-call
  5513 00002E5C 488B4528                	mov rax, PARAM(1)	; param s
  5514 00002E60 50                      	push rax
  5515 00002E61 6A01                    	push 1	; arg count
  5516 00002E63 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  5517 00002E6B 803805                  	cmp byte [rax], T_undefined
  5518 00002E6E 0F8423550100            	je L_error_fvar_undefined
  5519 00002E74 803804                  	cmp byte [rax], T_closure
  5520 00002E77 0F859E550100            	jne L_error_non_closure
  5521 00002E7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  5522 00002E80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5523 00002E83 483D[02000000]          	cmp rax, sob_boolean_false
  5524 00002E89 7409                    	je .L_if_else_07ab
  5525 00002E8B 488B4520                	mov rax, PARAM(0)	; param a
  5526 00002E8F E9DB000000              	jmp .L_if_end_07ab
  5527                                  .L_if_else_07ab:
  5528                                  	; preparing a tail-call
  5529                                  	; preparing a non-tail-call
  5530                                  	; preparing a non-tail-call
  5531 00002E94 488B4528                	mov rax, PARAM(1)	; param s
  5532 00002E98 50                      	push rax
  5533 00002E99 6A01                    	push 1	; arg count
  5534 00002E9B 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  5535 00002EA3 803805                  	cmp byte [rax], T_undefined
  5536 00002EA6 0F84EB540100            	je L_error_fvar_undefined
  5537 00002EAC 803804                  	cmp byte [rax], T_closure
  5538 00002EAF 0F8566550100            	jne L_error_non_closure
  5539 00002EB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5540 00002EB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5541 00002EBB 50                      	push rax
  5542                                  	; preparing a non-tail-call
  5543 00002EBC 488B4528                	mov rax, PARAM(1)	; param s
  5544 00002EC0 50                      	push rax
  5545 00002EC1 6A01                    	push 1	; arg count
  5546 00002EC3 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  5547 00002ECB 803805                  	cmp byte [rax], T_undefined
  5548 00002ECE 0F84C3540100            	je L_error_fvar_undefined
  5549 00002ED4 803804                  	cmp byte [rax], T_closure
  5550 00002ED7 0F853E550100            	jne L_error_non_closure
  5551 00002EDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5552 00002EE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5553 00002EE3 50                      	push rax
  5554 00002EE4 6A02                    	push 2	; arg count
  5555 00002EE6 488B4510                	mov rax, ENV
  5556 00002EEA 488B00                  	mov rax, qword [rax + 8 * 0]
  5557 00002EED 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5558 00002EF0 488B00                  	mov rax, qword [rax]
  5559 00002EF3 803804                  	cmp byte [rax], T_closure
  5560 00002EF6 0F851F550100            	jne L_error_non_closure
  5561 00002EFC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5562 00002EFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5563 00002F02 50                      	push rax
  5564 00002F03 488B4520                	mov rax, PARAM(0)	; param a
  5565 00002F07 50                      	push rax
  5566 00002F08 6A02                    	push 2	; arg count
  5567 00002F0A 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  5568 00002F12 803805                  	cmp byte [rax], T_undefined
  5569 00002F15 0F847C540100            	je L_error_fvar_undefined
  5570 00002F1B 803804                  	cmp byte [rax], T_closure
  5571 00002F1E 0F85F7540100            	jne L_error_non_closure
  5572 00002F24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5573 00002F27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5574 00002F2A FF7500                  	push qword[rbp]
  5575 00002F2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5576 00002F30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5577 00002F34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5578 00002F38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5579 00002F3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5580 00002F3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5581 00002F42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5582 00002F47 4983C103                	add r9, 3 	 ;for getting to the params
  5583 00002F4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5584 00002F4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5585                                  .L_tc_recycle_frame_loop_0e5e:
  5586 00002F52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5587 00002F55 7410                    	je .L_tc_recycle_frame_done_0e5e
  5588 00002F57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5589 00002F5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5590 00002F5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5591 00002F61 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5592 00002F65 EBEB                    	jmp .L_tc_recycle_frame_loop_0e5e
  5593                                  .L_tc_recycle_frame_done_0e5e:
  5594 00002F67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5595 00002F68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5596 00002F6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5597                                  .L_if_end_07ab:
  5598 00002F6F C9                      	leave
  5599 00002F70 C22000                  	ret AND_KILL_FRAME(2)
  5600                                  .L_lambda_simple_end_0a53:	; new closure is in rax
  5601 00002F73 50                      	push rax
  5602 00002F74 488B4520                	mov rax, PARAM(0)	; param run
  5603 00002F78 8F00                    	pop qword [rax]
  5604 00002F7A 48B8-                   	mov rax, sob_void
  5604 00002F7C [0000000000000000] 
  5605                                  
  5606 00002F84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5607 00002F89 E836550100              	call malloc
  5608 00002F8E 50                      	push rax
  5609 00002F8F BF08000000              	mov rdi, 8 * 1	; new rib
  5610 00002F94 E82B550100              	call malloc
  5611 00002F99 50                      	push rax
  5612 00002F9A BF10000000              	mov rdi, 8 * 2	; extended env
  5613 00002F9F E820550100              	call malloc
  5614 00002FA4 488B7D10                	mov rdi, ENV
  5615 00002FA8 BE00000000              	mov rsi, 0
  5616 00002FAD BA01000000              	mov rdx, 1
  5617                                  .L_lambda_opt_env_loop_0140:	; ext_env[i + 1] <-- env[i]
  5618 00002FB2 4883FE01                	cmp rsi, 1
  5619 00002FB6 7410                    	je .L_lambda_opt_env_end_0140
  5620 00002FB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5621 00002FBC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5622 00002FC0 48FFC6                  	inc rsi
  5623 00002FC3 48FFC2                  	inc rdx
  5624 00002FC6 EBEA                    	jmp .L_lambda_opt_env_loop_0140
  5625                                  .L_lambda_opt_env_end_0140:
  5626 00002FC8 5B                      	pop rbx
  5627 00002FC9 BE00000000              	mov rsi, 0
  5628                                  .L_lambda_opt_params_loop_0140:	; copy params
  5629 00002FCE 4883FE01                	cmp rsi, 1
  5630 00002FD2 740E                    	je .L_lambda_opt_params_end_0140
  5631 00002FD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5632 00002FD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5633 00002FDD 48FFC6                  	inc rsi
  5634 00002FE0 EBEC                    	jmp .L_lambda_opt_params_loop_0140
  5635                                  .L_lambda_opt_params_end_0140:
  5636 00002FE2 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  5637 00002FE5 4889C3                  	mov rbx, rax
  5638 00002FE8 58                      	pop rax
  5639 00002FE9 C60004                  	mov byte [rax], T_closure
  5640 00002FEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5641 00002FF0 48C74009[FD2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0140
  5642 00002FF8 E907020000              	jmp .L_lambda_opt_end_0140
  5643                                  .L_lambda_opt_code_0140:	; lambda-opt body
  5644 00002FFD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5645 00003003 7411                    	je .L_lambda_opt_arity_check_exact_0140
  5646 00003005 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0140
  5647 0000300B FF742410                	push qword [rsp + 8 * 2]
  5648 0000300F 6A01                    	push 1
  5649 00003011 E97B540100              	jmp L_error_incorrect_arity_opt
  5650                                  .L_lambda_opt_arity_check_exact_0140:
  5651 00003016 4883EC08                	sub rsp, 8
  5652 0000301A 488B442408              	mov rax, qword[rsp + 8 *1]
  5653 0000301F 48890424                	mov qword[rsp], rax  
  5654 00003023 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  5655 00003028 4889442408              	mov qword[rsp + 8 * 1], rax
  5656 0000302D B802000000              	mov rax, 2
  5657 00003032 4889442410              	mov qword[rsp + 8 *2], rax
  5658 00003037 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  5659 0000303C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  5660 00003041 48B8-                   	mov rax, sob_nil
  5660 00003043 [0100000000000000] 
  5661 0000304B 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  5662 00003050 C8000000                	enter 0, 0
  5663                                  	; preparing a tail-call
  5664 00003054 488B4528                	mov rax, PARAM(1)	; param s
  5665 00003058 50                      	push rax
  5666 00003059 488B4520                	mov rax, PARAM(0)	; param a
  5667 0000305D 50                      	push rax
  5668 0000305E 6A02                    	push 2	; arg count
  5669 00003060 488B4510                	mov rax, ENV
  5670 00003064 488B00                  	mov rax, qword [rax + 8 * 0]
  5671 00003067 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5672 0000306A 488B00                  	mov rax, qword [rax]
  5673 0000306D 803804                  	cmp byte [rax], T_closure
  5674 00003070 0F85A5530100            	jne L_error_non_closure
  5675 00003076 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5676 00003079 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5677 0000307C FF7500                  	push qword[rbp]
  5678 0000307F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5679 00003082 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5680 00003086 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5681 0000308A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5682 0000308E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5683 00003091 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5684 00003094 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5685 00003099 4983C103                	add r9, 3 	 ;for getting to the params
  5686 0000309D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5687 000030A1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5688                                  .L_tc_recycle_frame_loop_0e60:
  5689 000030A4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5690 000030A7 7410                    	je .L_tc_recycle_frame_done_0e60
  5691 000030A9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5692 000030AC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5693 000030AF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5694 000030B3 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5695 000030B7 EBEB                    	jmp .L_tc_recycle_frame_loop_0e60
  5696                                  .L_tc_recycle_frame_done_0e60:
  5697 000030B9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5698 000030BA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5699 000030BE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5700 000030C1 C9                      	leave
  5701 000030C2 C22000                  	ret AND_KILL_FRAME(2)
  5702 000030C5 E93A010000              	jmp .L_lambda_opt_end_0140	; new closure is in rax
  5703                                  .L_lambda_opt_arity_check_more_0140:
  5704 000030CA 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  5705 000030CF 49B9-                   	mov r9, sob_nil
  5705 000030D1 [0100000000000000] 
  5706 000030D9 4889E3                  	mov rbx, rsp 
  5707 000030DC 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  5708 000030E0 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  5709 000030E3 49C1E003                	shl r8, 3
  5710 000030E7 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  5711 000030EA 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  5712                                  .L_lambda_opt_stack_shrink_loop_0140:
  5713 000030EF 4983F801                	cmp r8, 1
  5714 000030F3 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0140
  5715 000030F5 BF11000000              	mov rdi, 1+8+8 ;for pair
  5716 000030FA E8C5530100              	call malloc;to create the pair in the stack
  5717 000030FF C60021                  	mov byte [rax], T_pair ; to make it a pair
  5718 00003102 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  5719 00003105 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  5720 00003109 4C894809                 	mov qword[rax+1+8],r9
  5721 0000310D 4989C1                  	mov r9, rax ;for the recursion 
  5722 00003110 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  5723 00003113 4883EB08                	sub rbx, 8 ;to get the next param to copy
  5724 00003117 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0140
  5725                                  .L_lambda_opt_stack_shrink_loop_exit_0140:
  5726 00003119 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  5727 0000311E 4883E902                	sub rcx, 2
  5728 00003122 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  5729 00003126 4801CC                  	add rsp, rcx ;shrinking the stack
  5730 00003129 4889E0                  	mov rax, rsp
  5731 0000312C 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  5732 0000312F 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  5733 00003133 49FFC8                  	dec r8 ;we start with param 0, not 1 
  5734 00003136 4883C018                	add rax, 3 * 8;now rax is param 0
  5735 0000313A 49C1E003                	shl r8, 3;convert to byte
  5736 0000313E 4C01C0                  	add rax, r8;now rax is the top of the stack
  5737 00003141 4C8908                  	mov qword[rax], r9;puting the list at the top
  5738 00003144 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  5739 00003148 4889E3                  	mov rbx, rsp 
  5740 0000314B 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  5741 0000314E 41BA01000000            	mov r10, 1;r10 is the not opt params length
  5742 00003154 49FFCA                  	dec r10 
  5743 00003157 49C1E203                	shl r10, 3;to get bytes
  5744 0000315B 4883C318                	add rbx, 3*8;rbx is the first param
  5745 0000315F 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  5746 00003162 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  5747 00003165 4C8900                  	mov qword[rax], r8
  5748 00003168 4883E808                	sub rax, 8
  5749 0000316C 4883EB08                	sub rbx, 8
  5750 00003170 4889E0                  	mov rax, rsp
  5751 00003173 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  5752 00003176 48C744241002000000      	mov qword [rsp+2*8], 2
  5753 0000317F 488B5808                	mov rbx, qword[rax + 8 *1]
  5754 00003183 48895C2408              	mov qword [rsp + 1*8] ,rbx
  5755 00003188 488B18                  	mov rbx, qword[rax]
  5756 0000318B 48891C24                	mov qword [rsp], rbx
  5757 0000318F C8000000                	enter 0, 0
  5758                                  	; preparing a tail-call
  5759 00003193 488B4528                	mov rax, PARAM(1)	; param s
  5760 00003197 50                      	push rax
  5761 00003198 488B4520                	mov rax, PARAM(0)	; param a
  5762 0000319C 50                      	push rax
  5763 0000319D 6A02                    	push 2	; arg count
  5764 0000319F 488B4510                	mov rax, ENV
  5765 000031A3 488B00                  	mov rax, qword [rax + 8 * 0]
  5766 000031A6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5767 000031A9 488B00                  	mov rax, qword [rax]
  5768 000031AC 803804                  	cmp byte [rax], T_closure
  5769 000031AF 0F8566520100            	jne L_error_non_closure
  5770 000031B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5771 000031B8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5772 000031BB FF7500                  	push qword[rbp]
  5773 000031BE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5774 000031C1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5775 000031C5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5776 000031C9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5777 000031CD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5778 000031D0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5779 000031D3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5780 000031D8 4983C103                	add r9, 3 	 ;for getting to the params
  5781 000031DC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5782 000031E0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5783                                  .L_tc_recycle_frame_loop_0e5f:
  5784 000031E3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5785 000031E6 7410                    	je .L_tc_recycle_frame_done_0e5f
  5786 000031E8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5787 000031EB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5788 000031EE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5789 000031F2 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5790 000031F6 EBEB                    	jmp .L_tc_recycle_frame_loop_0e5f
  5791                                  .L_tc_recycle_frame_done_0e5f:
  5792 000031F8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5793 000031F9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5794 000031FD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5795 00003200 C9                      	leave
  5796 00003201 C22000                  	ret AND_KILL_FRAME(2)
  5797                                  .L_lambda_opt_end_0140:	; new closure is in rax
  5798 00003204 C9                      	leave
  5799 00003205 C21800                  	ret AND_KILL_FRAME(1)
  5800                                  .L_lambda_simple_end_0a52:	; new closure is in rax
  5801 00003208 803804                  	cmp byte [rax], T_closure
  5802 0000320B 0F850A520100            	jne L_error_non_closure
  5803 00003211 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5804 00003214 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5805 00003217 48890425[67150000]      	mov qword [free_var_93], rax
  5806 0000321F 48B8-                   	mov rax, sob_void
  5806 00003221 [0000000000000000] 
  5807                                  
  5808 00003229 4889C7                  	mov rdi, rax
  5809 0000322C E8E8540100              	call print_sexpr_if_not_void
  5810                                  	; preparing a non-tail-call
  5811 00003231 48B8-                   	mov rax, L_constants + 1993
  5811 00003233 [C907000000000000] 
  5812 0000323B 50                      	push rax
  5813 0000323C 6A01                    	push 1	; arg count
  5814 0000323E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5815 00003243 E87C520100              	call malloc
  5816 00003248 50                      	push rax
  5817 00003249 BF00000000              	mov rdi, 8 * 0	; new rib
  5818 0000324E E871520100              	call malloc
  5819 00003253 50                      	push rax
  5820 00003254 BF08000000              	mov rdi, 8 * 1	; extended env
  5821 00003259 E866520100              	call malloc
  5822 0000325E 488B7D10                	mov rdi, ENV
  5823 00003262 BE00000000              	mov rsi, 0
  5824 00003267 BA01000000              	mov rdx, 1
  5825                                  .L_lambda_simple_env_loop_0a54:	; ext_env[i + 1] <-- env[i]
  5826 0000326C 4883FE00                	cmp rsi, 0
  5827 00003270 7410                    	je .L_lambda_simple_env_end_0a54
  5828 00003272 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5829 00003276 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5830 0000327A 48FFC6                  	inc rsi
  5831 0000327D 48FFC2                  	inc rdx
  5832 00003280 EBEA                    	jmp .L_lambda_simple_env_loop_0a54
  5833                                  .L_lambda_simple_env_end_0a54:
  5834 00003282 5B                      	pop rbx
  5835 00003283 BE00000000              	mov rsi, 0
  5836                                  .L_lambda_simple_params_loop_0a54:	; copy params
  5837 00003288 4883FE00                	cmp rsi, 0
  5838 0000328C 740E                    	je .L_lambda_simple_params_end_0a54
  5839 0000328E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5840 00003293 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5841 00003297 48FFC6                  	inc rsi
  5842 0000329A EBEC                    	jmp .L_lambda_simple_params_loop_0a54
  5843                                  .L_lambda_simple_params_end_0a54:
  5844 0000329C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5845 0000329F 4889C3                  	mov rbx, rax
  5846 000032A2 58                      	pop rax
  5847 000032A3 C60004                  	mov byte [rax], T_closure
  5848 000032A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5849 000032AA 48C74009[B7320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a54
  5850 000032B2 E94F050000              	jmp .L_lambda_simple_end_0a54
  5851                                  .L_lambda_simple_code_0a54:	; lambda-simple body
  5852 000032B7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5853 000032BD 740B                    	je .L_lambda_simple_arity_check_ok_0a54
  5854 000032BF FF742410                	push qword [rsp + 8 * 2]
  5855 000032C3 6A01                    	push 1
  5856 000032C5 E9B3510100              	jmp L_error_incorrect_arity_simple
  5857                                  .L_lambda_simple_arity_check_ok_0a54:
  5858 000032CA C8000000                	enter 0, 0
  5859 000032CE BF08000000              	mov rdi, 8*1
  5860 000032D3 E8EC510100              	call malloc
  5861 000032D8 488B5D20                	mov rbx, PARAM(0)
  5862 000032DC 488918                  	mov qword[rax], rbx
  5863 000032DF 48894520                	mov PARAM(0), rax
  5864 000032E3 48B8-                   	mov rax, sob_void
  5864 000032E5 [0000000000000000] 
  5865                                  
  5866 000032ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5867 000032F2 E8CD510100              	call malloc
  5868 000032F7 50                      	push rax
  5869 000032F8 BF08000000              	mov rdi, 8 * 1	; new rib
  5870 000032FD E8C2510100              	call malloc
  5871 00003302 50                      	push rax
  5872 00003303 BF10000000              	mov rdi, 8 * 2	; extended env
  5873 00003308 E8B7510100              	call malloc
  5874 0000330D 488B7D10                	mov rdi, ENV
  5875 00003311 BE00000000              	mov rsi, 0
  5876 00003316 BA01000000              	mov rdx, 1
  5877                                  .L_lambda_simple_env_loop_0a55:	; ext_env[i + 1] <-- env[i]
  5878 0000331B 4883FE01                	cmp rsi, 1
  5879 0000331F 7410                    	je .L_lambda_simple_env_end_0a55
  5880 00003321 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5881 00003325 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5882 00003329 48FFC6                  	inc rsi
  5883 0000332C 48FFC2                  	inc rdx
  5884 0000332F EBEA                    	jmp .L_lambda_simple_env_loop_0a55
  5885                                  .L_lambda_simple_env_end_0a55:
  5886 00003331 5B                      	pop rbx
  5887 00003332 BE00000000              	mov rsi, 0
  5888                                  .L_lambda_simple_params_loop_0a55:	; copy params
  5889 00003337 4883FE01                	cmp rsi, 1
  5890 0000333B 740E                    	je .L_lambda_simple_params_end_0a55
  5891 0000333D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5892 00003342 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5893 00003346 48FFC6                  	inc rsi
  5894 00003349 EBEC                    	jmp .L_lambda_simple_params_loop_0a55
  5895                                  .L_lambda_simple_params_end_0a55:
  5896 0000334B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5897 0000334E 4889C3                  	mov rbx, rax
  5898 00003351 58                      	pop rax
  5899 00003352 C60004                  	mov byte [rax], T_closure
  5900 00003355 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5901 00003359 48C74009[66330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a55
  5902 00003361 E92F010000              	jmp .L_lambda_simple_end_0a55
  5903                                  .L_lambda_simple_code_0a55:	; lambda-simple body
  5904 00003366 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5905 0000336C 740B                    	je .L_lambda_simple_arity_check_ok_0a55
  5906 0000336E FF742410                	push qword [rsp + 8 * 2]
  5907 00003372 6A02                    	push 2
  5908 00003374 E904510100              	jmp L_error_incorrect_arity_simple
  5909                                  .L_lambda_simple_arity_check_ok_0a55:
  5910 00003379 C8000000                	enter 0, 0
  5911                                  	; preparing a non-tail-call
  5912 0000337D 488B4528                	mov rax, PARAM(1)	; param s
  5913 00003381 50                      	push rax
  5914 00003382 6A01                    	push 1	; arg count
  5915 00003384 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  5916 0000338C 803805                  	cmp byte [rax], T_undefined
  5917 0000338F 0F8402500100            	je L_error_fvar_undefined
  5918 00003395 803804                  	cmp byte [rax], T_closure
  5919 00003398 0F857D500100            	jne L_error_non_closure
  5920 0000339E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5921 000033A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5922 000033A4 483D[02000000]          	cmp rax, sob_boolean_false
  5923 000033AA 0F84DD000000            	je .L_if_else_07ac
  5924                                  	; preparing a tail-call
  5925                                  	; preparing a non-tail-call
  5926                                  	; preparing a non-tail-call
  5927 000033B0 488B4528                	mov rax, PARAM(1)	; param s
  5928 000033B4 50                      	push rax
  5929 000033B5 6A01                    	push 1	; arg count
  5930 000033B7 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  5931 000033BF 803805                  	cmp byte [rax], T_undefined
  5932 000033C2 0F84CF4F0100            	je L_error_fvar_undefined
  5933 000033C8 803804                  	cmp byte [rax], T_closure
  5934 000033CB 0F854A500100            	jne L_error_non_closure
  5935 000033D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5936 000033D4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5937 000033D7 50                      	push rax
  5938                                  	; preparing a non-tail-call
  5939 000033D8 488B4528                	mov rax, PARAM(1)	; param s
  5940 000033DC 50                      	push rax
  5941 000033DD 6A01                    	push 1	; arg count
  5942 000033DF 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  5943 000033E7 803805                  	cmp byte [rax], T_undefined
  5944 000033EA 0F84A74F0100            	je L_error_fvar_undefined
  5945 000033F0 803804                  	cmp byte [rax], T_closure
  5946 000033F3 0F8522500100            	jne L_error_non_closure
  5947 000033F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5948 000033FC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5949 000033FF 50                      	push rax
  5950 00003400 6A02                    	push 2	; arg count
  5951 00003402 488B4510                	mov rax, ENV
  5952 00003406 488B00                  	mov rax, qword [rax + 8 * 0]
  5953 00003409 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  5954 0000340C 488B00                  	mov rax, qword [rax]
  5955 0000340F 803804                  	cmp byte [rax], T_closure
  5956 00003412 0F8503500100            	jne L_error_non_closure
  5957 00003418 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5958 0000341B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5959 0000341E 50                      	push rax
  5960 0000341F 488B4520                	mov rax, PARAM(0)	; param a
  5961 00003423 50                      	push rax
  5962 00003424 6A02                    	push 2	; arg count
  5963 00003426 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  5964 0000342E 803805                  	cmp byte [rax], T_undefined
  5965 00003431 0F84604F0100            	je L_error_fvar_undefined
  5966 00003437 803804                  	cmp byte [rax], T_closure
  5967 0000343A 0F85DB4F0100            	jne L_error_non_closure
  5968 00003440 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5969 00003443 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  5970 00003446 FF7500                  	push qword[rbp]
  5971 00003449 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  5972 0000344C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  5973 00003450 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  5974 00003454 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  5975 00003458 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  5976 0000345B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  5977 0000345E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  5978 00003463 4983C103                	add r9, 3 	 ;for getting to the params
  5979 00003467 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  5980 0000346B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  5981                                  .L_tc_recycle_frame_loop_0e61:
  5982 0000346E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  5983 00003471 7410                    	je .L_tc_recycle_frame_done_0e61
  5984 00003473 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  5985 00003476 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  5986 00003479 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  5987 0000347D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  5988 00003481 EBEB                    	jmp .L_tc_recycle_frame_loop_0e61
  5989                                  .L_tc_recycle_frame_done_0e61:
  5990 00003483 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  5991 00003484 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  5992 00003488 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5993 0000348B EB04                    	jmp .L_if_end_07ac
  5994                                  .L_if_else_07ac:
  5995 0000348D 488B4520                	mov rax, PARAM(0)	; param a
  5996                                  .L_if_end_07ac:
  5997 00003491 C9                      	leave
  5998 00003492 C22000                  	ret AND_KILL_FRAME(2)
  5999                                  .L_lambda_simple_end_0a55:	; new closure is in rax
  6000 00003495 50                      	push rax
  6001 00003496 488B4520                	mov rax, PARAM(0)	; param run
  6002 0000349A 8F00                    	pop qword [rax]
  6003 0000349C 48B8-                   	mov rax, sob_void
  6003 0000349E [0000000000000000] 
  6004                                  
  6005 000034A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6006 000034AB E814500100              	call malloc
  6007 000034B0 50                      	push rax
  6008 000034B1 BF08000000              	mov rdi, 8 * 1	; new rib
  6009 000034B6 E809500100              	call malloc
  6010 000034BB 50                      	push rax
  6011 000034BC BF10000000              	mov rdi, 8 * 2	; extended env
  6012 000034C1 E8FE4F0100              	call malloc
  6013 000034C6 488B7D10                	mov rdi, ENV
  6014 000034CA BE00000000              	mov rsi, 0
  6015 000034CF BA01000000              	mov rdx, 1
  6016                                  .L_lambda_opt_env_loop_0141:	; ext_env[i + 1] <-- env[i]
  6017 000034D4 4883FE01                	cmp rsi, 1
  6018 000034D8 7410                    	je .L_lambda_opt_env_end_0141
  6019 000034DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6020 000034DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6021 000034E2 48FFC6                  	inc rsi
  6022 000034E5 48FFC2                  	inc rdx
  6023 000034E8 EBEA                    	jmp .L_lambda_opt_env_loop_0141
  6024                                  .L_lambda_opt_env_end_0141:
  6025 000034EA 5B                      	pop rbx
  6026 000034EB BE00000000              	mov rsi, 0
  6027                                  .L_lambda_opt_params_loop_0141:	; copy params
  6028 000034F0 4883FE01                	cmp rsi, 1
  6029 000034F4 740E                    	je .L_lambda_opt_params_end_0141
  6030 000034F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6031 000034FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6032 000034FF 48FFC6                  	inc rsi
  6033 00003502 EBEC                    	jmp .L_lambda_opt_params_loop_0141
  6034                                  .L_lambda_opt_params_end_0141:
  6035 00003504 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  6036 00003507 4889C3                  	mov rbx, rax
  6037 0000350A 58                      	pop rax
  6038 0000350B C60004                  	mov byte [rax], T_closure
  6039 0000350E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6040 00003512 48C74009[1F350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0141
  6041 0000351A E9E3020000              	jmp .L_lambda_opt_end_0141
  6042                                  .L_lambda_opt_code_0141:	; lambda-opt body
  6043 0000351F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6044 00003525 7411                    	je .L_lambda_opt_arity_check_exact_0141
  6045 00003527 0F8F2D010000            	jg .L_lambda_opt_arity_check_more_0141
  6046 0000352D FF742410                	push qword [rsp + 8 * 2]
  6047 00003531 6A01                    	push 1
  6048 00003533 E9594F0100              	jmp L_error_incorrect_arity_opt
  6049                                  .L_lambda_opt_arity_check_exact_0141:
  6050 00003538 4883EC08                	sub rsp, 8
  6051 0000353C 488B442408              	mov rax, qword[rsp + 8 *1]
  6052 00003541 48890424                	mov qword[rsp], rax  
  6053 00003545 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6054 0000354A 4889442408              	mov qword[rsp + 8 * 1], rax
  6055 0000354F B802000000              	mov rax, 2
  6056 00003554 4889442410              	mov qword[rsp + 8 *2], rax
  6057 00003559 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6058 0000355E 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6059 00003563 48B8-                   	mov rax, sob_nil
  6059 00003565 [0100000000000000] 
  6060 0000356D 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6061 00003572 C8000000                	enter 0, 0
  6062                                  	; preparing a tail-call
  6063                                  	; preparing a non-tail-call
  6064                                  	; preparing a non-tail-call
  6065 00003576 488B4528                	mov rax, PARAM(1)	; param s
  6066 0000357A 50                      	push rax
  6067 0000357B 6A01                    	push 1	; arg count
  6068 0000357D 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  6069 00003585 803805                  	cmp byte [rax], T_undefined
  6070 00003588 0F84094E0100            	je L_error_fvar_undefined
  6071 0000358E 803804                  	cmp byte [rax], T_closure
  6072 00003591 0F85844E0100            	jne L_error_non_closure
  6073 00003597 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6074 0000359A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6075 0000359D 50                      	push rax
  6076                                  	; preparing a non-tail-call
  6077 0000359E 488B4528                	mov rax, PARAM(1)	; param s
  6078 000035A2 50                      	push rax
  6079 000035A3 6A01                    	push 1	; arg count
  6080 000035A5 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  6081 000035AD 803805                  	cmp byte [rax], T_undefined
  6082 000035B0 0F84E14D0100            	je L_error_fvar_undefined
  6083 000035B6 803804                  	cmp byte [rax], T_closure
  6084 000035B9 0F855C4E0100            	jne L_error_non_closure
  6085 000035BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  6086 000035C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6087 000035C5 50                      	push rax
  6088 000035C6 6A02                    	push 2	; arg count
  6089 000035C8 488B4510                	mov rax, ENV
  6090 000035CC 488B00                  	mov rax, qword [rax + 8 * 0]
  6091 000035CF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6092 000035D2 488B00                  	mov rax, qword [rax]
  6093 000035D5 803804                  	cmp byte [rax], T_closure
  6094 000035D8 0F853D4E0100            	jne L_error_non_closure
  6095 000035DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  6096 000035E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6097 000035E4 50                      	push rax
  6098 000035E5 488B4520                	mov rax, PARAM(0)	; param f
  6099 000035E9 50                      	push rax
  6100 000035EA 6A02                    	push 2	; arg count
  6101 000035EC 488B0425[06100000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  6102 000035F4 803805                  	cmp byte [rax], T_undefined
  6103 000035F7 0F849A4D0100            	je L_error_fvar_undefined
  6104 000035FD 803804                  	cmp byte [rax], T_closure
  6105 00003600 0F85154E0100            	jne L_error_non_closure
  6106 00003606 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6107 00003609 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6108 0000360C FF7500                  	push qword[rbp]
  6109 0000360F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6110 00003612 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6111 00003616 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6112 0000361A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6113 0000361E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6114 00003621 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6115 00003624 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6116 00003629 4983C103                	add r9, 3 	 ;for getting to the params
  6117 0000362D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6118 00003631 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6119                                  .L_tc_recycle_frame_loop_0e63:
  6120 00003634 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6121 00003637 7410                    	je .L_tc_recycle_frame_done_0e63
  6122 00003639 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6123 0000363C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6124 0000363F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6125 00003643 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6126 00003647 EBEB                    	jmp .L_tc_recycle_frame_loop_0e63
  6127                                  .L_tc_recycle_frame_done_0e63:
  6128 00003649 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6129 0000364A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6130 0000364E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6131 00003651 C9                      	leave
  6132 00003652 C22000                  	ret AND_KILL_FRAME(2)
  6133 00003655 E9A8010000              	jmp .L_lambda_opt_end_0141	; new closure is in rax
  6134                                  .L_lambda_opt_arity_check_more_0141:
  6135 0000365A 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6136 0000365F 49B9-                   	mov r9, sob_nil
  6136 00003661 [0100000000000000] 
  6137 00003669 4889E3                  	mov rbx, rsp 
  6138 0000366C 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6139 00003670 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6140 00003673 49C1E003                	shl r8, 3
  6141 00003677 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6142 0000367A 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6143                                  .L_lambda_opt_stack_shrink_loop_0141:
  6144 0000367F 4983F801                	cmp r8, 1
  6145 00003683 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0141
  6146 00003685 BF11000000              	mov rdi, 1+8+8 ;for pair
  6147 0000368A E8354E0100              	call malloc;to create the pair in the stack
  6148 0000368F C60021                  	mov byte [rax], T_pair ; to make it a pair
  6149 00003692 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  6150 00003695 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  6151 00003699 4C894809                 	mov qword[rax+1+8],r9
  6152 0000369D 4989C1                  	mov r9, rax ;for the recursion 
  6153 000036A0 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  6154 000036A3 4883EB08                	sub rbx, 8 ;to get the next param to copy
  6155 000036A7 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0141
  6156                                  .L_lambda_opt_stack_shrink_loop_exit_0141:
  6157 000036A9 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  6158 000036AE 4883E902                	sub rcx, 2
  6159 000036B2 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  6160 000036B6 4801CC                  	add rsp, rcx ;shrinking the stack
  6161 000036B9 4889E0                  	mov rax, rsp
  6162 000036BC 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  6163 000036BF 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  6164 000036C3 49FFC8                  	dec r8 ;we start with param 0, not 1 
  6165 000036C6 4883C018                	add rax, 3 * 8;now rax is param 0
  6166 000036CA 49C1E003                	shl r8, 3;convert to byte
  6167 000036CE 4C01C0                  	add rax, r8;now rax is the top of the stack
  6168 000036D1 4C8908                  	mov qword[rax], r9;puting the list at the top
  6169 000036D4 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  6170 000036D8 4889E3                  	mov rbx, rsp 
  6171 000036DB 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  6172 000036DE 41BA01000000            	mov r10, 1;r10 is the not opt params length
  6173 000036E4 49FFCA                  	dec r10 
  6174 000036E7 49C1E203                	shl r10, 3;to get bytes
  6175 000036EB 4883C318                	add rbx, 3*8;rbx is the first param
  6176 000036EF 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  6177 000036F2 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6178 000036F5 4C8900                  	mov qword[rax], r8
  6179 000036F8 4883E808                	sub rax, 8
  6180 000036FC 4883EB08                	sub rbx, 8
  6181 00003700 4889E0                  	mov rax, rsp
  6182 00003703 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6183 00003706 48C744241002000000      	mov qword [rsp+2*8], 2
  6184 0000370F 488B5808                	mov rbx, qword[rax + 8 *1]
  6185 00003713 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6186 00003718 488B18                  	mov rbx, qword[rax]
  6187 0000371B 48891C24                	mov qword [rsp], rbx
  6188 0000371F C8000000                	enter 0, 0
  6189                                  	; preparing a tail-call
  6190                                  	; preparing a non-tail-call
  6191                                  	; preparing a non-tail-call
  6192 00003723 488B4528                	mov rax, PARAM(1)	; param s
  6193 00003727 50                      	push rax
  6194 00003728 6A01                    	push 1	; arg count
  6195 0000372A 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  6196 00003732 803805                  	cmp byte [rax], T_undefined
  6197 00003735 0F845C4C0100            	je L_error_fvar_undefined
  6198 0000373B 803804                  	cmp byte [rax], T_closure
  6199 0000373E 0F85D74C0100            	jne L_error_non_closure
  6200 00003744 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6201 00003747 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6202 0000374A 50                      	push rax
  6203                                  	; preparing a non-tail-call
  6204 0000374B 488B4528                	mov rax, PARAM(1)	; param s
  6205 0000374F 50                      	push rax
  6206 00003750 6A01                    	push 1	; arg count
  6207 00003752 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  6208 0000375A 803805                  	cmp byte [rax], T_undefined
  6209 0000375D 0F84344C0100            	je L_error_fvar_undefined
  6210 00003763 803804                  	cmp byte [rax], T_closure
  6211 00003766 0F85AF4C0100            	jne L_error_non_closure
  6212 0000376C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6213 0000376F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6214 00003772 50                      	push rax
  6215 00003773 6A02                    	push 2	; arg count
  6216 00003775 488B4510                	mov rax, ENV
  6217 00003779 488B00                  	mov rax, qword [rax + 8 * 0]
  6218 0000377C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  6219 0000377F 488B00                  	mov rax, qword [rax]
  6220 00003782 803804                  	cmp byte [rax], T_closure
  6221 00003785 0F85904C0100            	jne L_error_non_closure
  6222 0000378B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6223 0000378E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6224 00003791 50                      	push rax
  6225 00003792 488B4520                	mov rax, PARAM(0)	; param f
  6226 00003796 50                      	push rax
  6227 00003797 6A02                    	push 2	; arg count
  6228 00003799 488B0425[06100000]      	mov rax, qword [free_var_12]	; free var __bin-apply
  6229 000037A1 803805                  	cmp byte [rax], T_undefined
  6230 000037A4 0F84ED4B0100            	je L_error_fvar_undefined
  6231 000037AA 803804                  	cmp byte [rax], T_closure
  6232 000037AD 0F85684C0100            	jne L_error_non_closure
  6233 000037B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6234 000037B6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6235 000037B9 FF7500                  	push qword[rbp]
  6236 000037BC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6237 000037BF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6238 000037C3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6239 000037C7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6240 000037CB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6241 000037CE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6242 000037D1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6243 000037D6 4983C103                	add r9, 3 	 ;for getting to the params
  6244 000037DA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6245 000037DE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6246                                  .L_tc_recycle_frame_loop_0e62:
  6247 000037E1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6248 000037E4 7410                    	je .L_tc_recycle_frame_done_0e62
  6249 000037E6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6250 000037E9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6251 000037EC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6252 000037F0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6253 000037F4 EBEB                    	jmp .L_tc_recycle_frame_loop_0e62
  6254                                  .L_tc_recycle_frame_done_0e62:
  6255 000037F6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6256 000037F7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6257 000037FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6258 000037FE C9                      	leave
  6259 000037FF C22000                  	ret AND_KILL_FRAME(2)
  6260                                  .L_lambda_opt_end_0141:	; new closure is in rax
  6261 00003802 C9                      	leave
  6262 00003803 C21800                  	ret AND_KILL_FRAME(1)
  6263                                  .L_lambda_simple_end_0a54:	; new closure is in rax
  6264 00003806 803804                  	cmp byte [rax], T_closure
  6265 00003809 0F850C4C0100            	jne L_error_non_closure
  6266 0000380F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6267 00003812 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6268 00003815 48890425[6B110000]      	mov qword [free_var_33], rax
  6269 0000381D 48B8-                   	mov rax, sob_void
  6269 0000381F [0000000000000000] 
  6270                                  
  6271 00003827 4889C7                  	mov rdi, rax
  6272 0000382A E8EA4E0100              	call print_sexpr_if_not_void
  6273 0000382F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6274 00003834 E88B4C0100              	call malloc
  6275 00003839 50                      	push rax
  6276 0000383A BF00000000              	mov rdi, 8 * 0	; new rib
  6277 0000383F E8804C0100              	call malloc
  6278 00003844 50                      	push rax
  6279 00003845 BF08000000              	mov rdi, 8 * 1	; extended env
  6280 0000384A E8754C0100              	call malloc
  6281 0000384F 488B7D10                	mov rdi, ENV
  6282 00003853 BE00000000              	mov rsi, 0
  6283 00003858 BA01000000              	mov rdx, 1
  6284                                  .L_lambda_opt_env_loop_0142:	; ext_env[i + 1] <-- env[i]
  6285 0000385D 4883FE00                	cmp rsi, 0
  6286 00003861 7410                    	je .L_lambda_opt_env_end_0142
  6287 00003863 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6288 00003867 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6289 0000386B 48FFC6                  	inc rsi
  6290 0000386E 48FFC2                  	inc rdx
  6291 00003871 EBEA                    	jmp .L_lambda_opt_env_loop_0142
  6292                                  .L_lambda_opt_env_end_0142:
  6293 00003873 5B                      	pop rbx
  6294 00003874 BE00000000              	mov rsi, 0
  6295                                  .L_lambda_opt_params_loop_0142:	; copy params
  6296 00003879 4883FE00                	cmp rsi, 0
  6297 0000387D 740E                    	je .L_lambda_opt_params_end_0142
  6298 0000387F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6299 00003884 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6300 00003888 48FFC6                  	inc rsi
  6301 0000388B EBEC                    	jmp .L_lambda_opt_params_loop_0142
  6302                                  .L_lambda_opt_params_end_0142:
  6303 0000388D 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  6304 00003890 4889C3                  	mov rbx, rax
  6305 00003893 58                      	pop rax
  6306 00003894 C60004                  	mov byte [rax], T_closure
  6307 00003897 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6308 0000389B 48C74009[A8380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0142
  6309 000038A3 E9DB080000              	jmp .L_lambda_opt_end_0142
  6310                                  .L_lambda_opt_code_0142:	; lambda-opt body
  6311 000038A8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6312 000038AE 7411                    	je .L_lambda_opt_arity_check_exact_0142
  6313 000038B0 0F8F29040000            	jg .L_lambda_opt_arity_check_more_0142
  6314 000038B6 FF742410                	push qword [rsp + 8 * 2]
  6315 000038BA 6A01                    	push 1
  6316 000038BC E9D04B0100              	jmp L_error_incorrect_arity_opt
  6317                                  .L_lambda_opt_arity_check_exact_0142:
  6318 000038C1 4883EC08                	sub rsp, 8
  6319 000038C5 488B442408              	mov rax, qword[rsp + 8 *1]
  6320 000038CA 48890424                	mov qword[rsp], rax  
  6321 000038CE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  6322 000038D3 4889442408              	mov qword[rsp + 8 * 1], rax
  6323 000038D8 B802000000              	mov rax, 2
  6324 000038DD 4889442410              	mov qword[rsp + 8 *2], rax
  6325 000038E2 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  6326 000038E7 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  6327 000038EC 48B8-                   	mov rax, sob_nil
  6327 000038EE [0100000000000000] 
  6328 000038F6 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  6329 000038FB C8000000                	enter 0, 0
  6330                                  	; preparing a tail-call
  6331 000038FF 48B8-                   	mov rax, L_constants + 1993
  6331 00003901 [C907000000000000] 
  6332 00003909 50                      	push rax
  6333 0000390A 6A01                    	push 1	; arg count
  6334 0000390C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6335 00003911 E8AE4B0100              	call malloc
  6336 00003916 50                      	push rax
  6337 00003917 BF10000000              	mov rdi, 8 * 2	; new rib
  6338 0000391C E8A34B0100              	call malloc
  6339 00003921 50                      	push rax
  6340 00003922 BF10000000              	mov rdi, 8 * 2	; extended env
  6341 00003927 E8984B0100              	call malloc
  6342 0000392C 488B7D10                	mov rdi, ENV
  6343 00003930 BE00000000              	mov rsi, 0
  6344 00003935 BA01000000              	mov rdx, 1
  6345                                  .L_lambda_simple_env_loop_0a58:	; ext_env[i + 1] <-- env[i]
  6346 0000393A 4883FE01                	cmp rsi, 1
  6347 0000393E 7410                    	je .L_lambda_simple_env_end_0a58
  6348 00003940 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6349 00003944 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6350 00003948 48FFC6                  	inc rsi
  6351 0000394B 48FFC2                  	inc rdx
  6352 0000394E EBEA                    	jmp .L_lambda_simple_env_loop_0a58
  6353                                  .L_lambda_simple_env_end_0a58:
  6354 00003950 5B                      	pop rbx
  6355 00003951 BE00000000              	mov rsi, 0
  6356                                  .L_lambda_simple_params_loop_0a58:	; copy params
  6357 00003956 4883FE02                	cmp rsi, 2
  6358 0000395A 740E                    	je .L_lambda_simple_params_end_0a58
  6359 0000395C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6360 00003961 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6361 00003965 48FFC6                  	inc rsi
  6362 00003968 EBEC                    	jmp .L_lambda_simple_params_loop_0a58
  6363                                  .L_lambda_simple_params_end_0a58:
  6364 0000396A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6365 0000396D 4889C3                  	mov rbx, rax
  6366 00003970 58                      	pop rax
  6367 00003971 C60004                  	mov byte [rax], T_closure
  6368 00003974 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6369 00003978 48C74009[85390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a58
  6370 00003980 E9FD020000              	jmp .L_lambda_simple_end_0a58
  6371                                  .L_lambda_simple_code_0a58:	; lambda-simple body
  6372 00003985 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6373 0000398B 740B                    	je .L_lambda_simple_arity_check_ok_0a58
  6374 0000398D FF742410                	push qword [rsp + 8 * 2]
  6375 00003991 6A01                    	push 1
  6376 00003993 E9E54A0100              	jmp L_error_incorrect_arity_simple
  6377                                  .L_lambda_simple_arity_check_ok_0a58:
  6378 00003998 C8000000                	enter 0, 0
  6379 0000399C BF08000000              	mov rdi, 8*1
  6380 000039A1 E81E4B0100              	call malloc
  6381 000039A6 488B5D20                	mov rbx, PARAM(0)
  6382 000039AA 488918                  	mov qword[rax], rbx
  6383 000039AD 48894520                	mov PARAM(0), rax
  6384 000039B1 48B8-                   	mov rax, sob_void
  6384 000039B3 [0000000000000000] 
  6385                                  
  6386 000039BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6387 000039C0 E8FF4A0100              	call malloc
  6388 000039C5 50                      	push rax
  6389 000039C6 BF08000000              	mov rdi, 8 * 1	; new rib
  6390 000039CB E8F44A0100              	call malloc
  6391 000039D0 50                      	push rax
  6392 000039D1 BF18000000              	mov rdi, 8 * 3	; extended env
  6393 000039D6 E8E94A0100              	call malloc
  6394 000039DB 488B7D10                	mov rdi, ENV
  6395 000039DF BE00000000              	mov rsi, 0
  6396 000039E4 BA01000000              	mov rdx, 1
  6397                                  .L_lambda_simple_env_loop_0a59:	; ext_env[i + 1] <-- env[i]
  6398 000039E9 4883FE02                	cmp rsi, 2
  6399 000039ED 7410                    	je .L_lambda_simple_env_end_0a59
  6400 000039EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6401 000039F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6402 000039F7 48FFC6                  	inc rsi
  6403 000039FA 48FFC2                  	inc rdx
  6404 000039FD EBEA                    	jmp .L_lambda_simple_env_loop_0a59
  6405                                  .L_lambda_simple_env_end_0a59:
  6406 000039FF 5B                      	pop rbx
  6407 00003A00 BE00000000              	mov rsi, 0
  6408                                  .L_lambda_simple_params_loop_0a59:	; copy params
  6409 00003A05 4883FE01                	cmp rsi, 1
  6410 00003A09 740E                    	je .L_lambda_simple_params_end_0a59
  6411 00003A0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6412 00003A10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6413 00003A14 48FFC6                  	inc rsi
  6414 00003A17 EBEC                    	jmp .L_lambda_simple_params_loop_0a59
  6415                                  .L_lambda_simple_params_end_0a59:
  6416 00003A19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6417 00003A1C 4889C3                  	mov rbx, rax
  6418 00003A1F 58                      	pop rax
  6419 00003A20 C60004                  	mov byte [rax], T_closure
  6420 00003A23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6421 00003A27 48C74009[343A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a59
  6422 00003A2F E98E010000              	jmp .L_lambda_simple_end_0a59
  6423                                  .L_lambda_simple_code_0a59:	; lambda-simple body
  6424 00003A34 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6425 00003A3A 740B                    	je .L_lambda_simple_arity_check_ok_0a59
  6426 00003A3C FF742410                	push qword [rsp + 8 * 2]
  6427 00003A40 6A01                    	push 1
  6428 00003A42 E9364A0100              	jmp L_error_incorrect_arity_simple
  6429                                  .L_lambda_simple_arity_check_ok_0a59:
  6430 00003A47 C8000000                	enter 0, 0
  6431                                  	; preparing a non-tail-call
  6432                                  	; preparing a non-tail-call
  6433 00003A4B 488B4520                	mov rax, PARAM(0)	; param s
  6434 00003A4F 50                      	push rax
  6435 00003A50 6A01                    	push 1	; arg count
  6436 00003A52 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  6437 00003A5A 803805                  	cmp byte [rax], T_undefined
  6438 00003A5D 0F8434490100            	je L_error_fvar_undefined
  6439 00003A63 803804                  	cmp byte [rax], T_closure
  6440 00003A66 0F85AF490100            	jne L_error_non_closure
  6441 00003A6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6442 00003A6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6443 00003A72 50                      	push rax
  6444 00003A73 6A01                    	push 1	; arg count
  6445 00003A75 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  6446 00003A7D 803805                  	cmp byte [rax], T_undefined
  6447 00003A80 0F8411490100            	je L_error_fvar_undefined
  6448 00003A86 803804                  	cmp byte [rax], T_closure
  6449 00003A89 0F858C490100            	jne L_error_non_closure
  6450 00003A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6451 00003A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6452 00003A95 483D[02000000]          	cmp rax, sob_boolean_false
  6453 00003A9B 0F8413010000            	je .L_if_else_07af
  6454                                  	; preparing a non-tail-call
  6455                                  	; preparing a non-tail-call
  6456 00003AA1 488B4520                	mov rax, PARAM(0)	; param s
  6457 00003AA5 50                      	push rax
  6458 00003AA6 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  6459 00003AAE 803805                  	cmp byte [rax], T_undefined
  6460 00003AB1 0F84E0480100            	je L_error_fvar_undefined
  6461 00003AB7 50                      	push rax
  6462 00003AB8 6A02                    	push 2	; arg count
  6463 00003ABA 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  6464 00003AC2 803805                  	cmp byte [rax], T_undefined
  6465 00003AC5 0F84CC480100            	je L_error_fvar_undefined
  6466 00003ACB 803804                  	cmp byte [rax], T_closure
  6467 00003ACE 0F8547490100            	jne L_error_non_closure
  6468 00003AD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6469 00003AD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6470 00003ADA 50                      	push rax
  6471 00003ADB 488B4510                	mov rax, ENV
  6472 00003ADF 488B4008                	mov rax, qword [rax + 8 * 1]
  6473 00003AE3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6474 00003AE6 50                      	push rax
  6475 00003AE7 6A02                    	push 2	; arg count
  6476 00003AE9 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  6477 00003AF1 803805                  	cmp byte [rax], T_undefined
  6478 00003AF4 0F849D480100            	je L_error_fvar_undefined
  6479 00003AFA 803804                  	cmp byte [rax], T_closure
  6480 00003AFD 0F8518490100            	jne L_error_non_closure
  6481 00003B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6482 00003B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6483 00003B09 483D[02000000]          	cmp rax, sob_boolean_false
  6484 00003B0F 0F859D000000            	jne .L_or_end_00e3
  6485                                  	; preparing a tail-call
  6486                                  	; preparing a non-tail-call
  6487 00003B15 488B4520                	mov rax, PARAM(0)	; param s
  6488 00003B19 50                      	push rax
  6489 00003B1A 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  6490 00003B22 803805                  	cmp byte [rax], T_undefined
  6491 00003B25 0F846C480100            	je L_error_fvar_undefined
  6492 00003B2B 50                      	push rax
  6493 00003B2C 6A02                    	push 2	; arg count
  6494 00003B2E 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  6495 00003B36 803805                  	cmp byte [rax], T_undefined
  6496 00003B39 0F8458480100            	je L_error_fvar_undefined
  6497 00003B3F 803804                  	cmp byte [rax], T_closure
  6498 00003B42 0F85D3480100            	jne L_error_non_closure
  6499 00003B48 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6500 00003B4B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6501 00003B4E 50                      	push rax
  6502 00003B4F 6A01                    	push 1	; arg count
  6503 00003B51 488B4510                	mov rax, ENV
  6504 00003B55 488B00                  	mov rax, qword [rax + 8 * 0]
  6505 00003B58 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6506 00003B5B 488B00                  	mov rax, qword [rax]
  6507 00003B5E 803804                  	cmp byte [rax], T_closure
  6508 00003B61 0F85B4480100            	jne L_error_non_closure
  6509 00003B67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6510 00003B6A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6511 00003B6D FF7500                  	push qword[rbp]
  6512 00003B70 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6513 00003B73 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6514 00003B77 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6515 00003B7B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6516 00003B7F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6517 00003B82 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6518 00003B85 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6519 00003B8A 4983C103                	add r9, 3 	 ;for getting to the params
  6520 00003B8E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6521 00003B92 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6522                                  .L_tc_recycle_frame_loop_0e67:
  6523 00003B95 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6524 00003B98 7410                    	je .L_tc_recycle_frame_done_0e67
  6525 00003B9A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6526 00003B9D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6527 00003BA0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6528 00003BA4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6529 00003BA8 EBEB                    	jmp .L_tc_recycle_frame_loop_0e67
  6530                                  .L_tc_recycle_frame_done_0e67:
  6531 00003BAA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6532 00003BAB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6533 00003BAF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6534                                  .L_or_end_00e3:
  6535 00003BB2 EB0A                    	jmp .L_if_end_07af
  6536                                  .L_if_else_07af:
  6537 00003BB4 48B8-                   	mov rax, L_constants + 2
  6537 00003BB6 [0200000000000000] 
  6538                                  .L_if_end_07af:
  6539 00003BBE C9                      	leave
  6540 00003BBF C21800                  	ret AND_KILL_FRAME(1)
  6541                                  .L_lambda_simple_end_0a59:	; new closure is in rax
  6542 00003BC2 50                      	push rax
  6543 00003BC3 488B4520                	mov rax, PARAM(0)	; param loop
  6544 00003BC7 8F00                    	pop qword [rax]
  6545 00003BC9 48B8-                   	mov rax, sob_void
  6545 00003BCB [0000000000000000] 
  6546                                  
  6547                                  	; preparing a non-tail-call
  6548 00003BD3 488B4510                	mov rax, ENV
  6549 00003BD7 488B00                  	mov rax, qword [rax + 8 * 0]
  6550 00003BDA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6551 00003BDE 50                      	push rax
  6552 00003BDF 6A01                    	push 1	; arg count
  6553 00003BE1 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  6554 00003BE9 803805                  	cmp byte [rax], T_undefined
  6555 00003BEC 0F84A5470100            	je L_error_fvar_undefined
  6556 00003BF2 803804                  	cmp byte [rax], T_closure
  6557 00003BF5 0F8520480100            	jne L_error_non_closure
  6558 00003BFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6559 00003BFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6560 00003C01 483D[02000000]          	cmp rax, sob_boolean_false
  6561 00003C07 746B                    	je .L_if_else_07b0
  6562                                  	; preparing a tail-call
  6563 00003C09 488B4510                	mov rax, ENV
  6564 00003C0D 488B00                  	mov rax, qword [rax + 8 * 0]
  6565 00003C10 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6566 00003C14 50                      	push rax
  6567 00003C15 6A01                    	push 1	; arg count
  6568 00003C17 488B4520                	mov rax, PARAM(0)	; param loop
  6569 00003C1B 488B00                  	mov rax, qword [rax]
  6570 00003C1E 803804                  	cmp byte [rax], T_closure
  6571 00003C21 0F85F4470100            	jne L_error_non_closure
  6572 00003C27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6573 00003C2A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6574 00003C2D FF7500                  	push qword[rbp]
  6575 00003C30 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6576 00003C33 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6577 00003C37 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6578 00003C3B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6579 00003C3F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6580 00003C42 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6581 00003C45 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6582 00003C4A 4983C103                	add r9, 3 	 ;for getting to the params
  6583 00003C4E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6584 00003C52 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6585                                  .L_tc_recycle_frame_loop_0e68:
  6586 00003C55 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6587 00003C58 7410                    	je .L_tc_recycle_frame_done_0e68
  6588 00003C5A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6589 00003C5D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6590 00003C60 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6591 00003C64 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6592 00003C68 EBEB                    	jmp .L_tc_recycle_frame_loop_0e68
  6593                                  .L_tc_recycle_frame_done_0e68:
  6594 00003C6A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6595 00003C6B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6596 00003C6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6597 00003C72 EB0A                    	jmp .L_if_end_07b0
  6598                                  .L_if_else_07b0:
  6599 00003C74 48B8-                   	mov rax, L_constants + 2
  6599 00003C76 [0200000000000000] 
  6600                                  .L_if_end_07b0:
  6601 00003C7E C9                      	leave
  6602 00003C7F C21800                  	ret AND_KILL_FRAME(1)
  6603                                  .L_lambda_simple_end_0a58:	; new closure is in rax
  6604 00003C82 803804                  	cmp byte [rax], T_closure
  6605 00003C85 0F8590470100            	jne L_error_non_closure
  6606 00003C8B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6607 00003C8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6608 00003C91 FF7500                  	push qword[rbp]
  6609 00003C94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6610 00003C97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6611 00003C9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6612 00003C9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6613 00003CA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6614 00003CA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6615 00003CA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6616 00003CAE 4983C103                	add r9, 3 	 ;for getting to the params
  6617 00003CB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6618 00003CB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6619                                  .L_tc_recycle_frame_loop_0e69:
  6620 00003CB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6621 00003CBC 7410                    	je .L_tc_recycle_frame_done_0e69
  6622 00003CBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6623 00003CC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6624 00003CC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6625 00003CC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6626 00003CCC EBEB                    	jmp .L_tc_recycle_frame_loop_0e69
  6627                                  .L_tc_recycle_frame_done_0e69:
  6628 00003CCE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6629 00003CCF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6630 00003CD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6631 00003CD6 C9                      	leave
  6632 00003CD7 C22000                  	ret AND_KILL_FRAME(2)
  6633 00003CDA E9A4040000              	jmp .L_lambda_opt_end_0142	; new closure is in rax
  6634                                  .L_lambda_opt_arity_check_more_0142:
  6635 00003CDF 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  6636 00003CE4 49B9-                   	mov r9, sob_nil
  6636 00003CE6 [0100000000000000] 
  6637 00003CEE 4889E3                  	mov rbx, rsp 
  6638 00003CF1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  6639 00003CF5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  6640 00003CF8 49C1E003                	shl r8, 3
  6641 00003CFC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  6642 00003CFF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  6643                                  .L_lambda_opt_stack_shrink_loop_0142:
  6644 00003D04 4983F801                	cmp r8, 1
  6645 00003D08 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0142
  6646 00003D0A BF11000000              	mov rdi, 1+8+8 ;for pair
  6647 00003D0F E8B0470100              	call malloc;to create the pair in the stack
  6648 00003D14 C60021                  	mov byte [rax], T_pair ; to make it a pair
  6649 00003D17 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  6650 00003D1A 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  6651 00003D1E 4C894809                 	mov qword[rax+1+8],r9
  6652 00003D22 4989C1                  	mov r9, rax ;for the recursion 
  6653 00003D25 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  6654 00003D28 4883EB08                	sub rbx, 8 ;to get the next param to copy
  6655 00003D2C EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0142
  6656                                  .L_lambda_opt_stack_shrink_loop_exit_0142:
  6657 00003D2E 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  6658 00003D33 4883E902                	sub rcx, 2
  6659 00003D37 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  6660 00003D3B 4801CC                  	add rsp, rcx ;shrinking the stack
  6661 00003D3E 4889E0                  	mov rax, rsp
  6662 00003D41 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  6663 00003D44 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  6664 00003D48 49FFC8                  	dec r8 ;we start with param 0, not 1 
  6665 00003D4B 4883C018                	add rax, 3 * 8;now rax is param 0
  6666 00003D4F 49C1E003                	shl r8, 3;convert to byte
  6667 00003D53 4C01C0                  	add rax, r8;now rax is the top of the stack
  6668 00003D56 4C8908                  	mov qword[rax], r9;puting the list at the top
  6669 00003D59 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  6670 00003D5D 4889E3                  	mov rbx, rsp 
  6671 00003D60 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  6672 00003D63 41BA01000000            	mov r10, 1;r10 is the not opt params length
  6673 00003D69 49FFCA                  	dec r10 
  6674 00003D6C 49C1E203                	shl r10, 3;to get bytes
  6675 00003D70 4883C318                	add rbx, 3*8;rbx is the first param
  6676 00003D74 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  6677 00003D77 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  6678 00003D7A 4C8900                  	mov qword[rax], r8
  6679 00003D7D 4883E808                	sub rax, 8
  6680 00003D81 4883EB08                	sub rbx, 8
  6681 00003D85 4889E0                  	mov rax, rsp
  6682 00003D88 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  6683 00003D8B 48C744241002000000      	mov qword [rsp+2*8], 2
  6684 00003D94 488B5808                	mov rbx, qword[rax + 8 *1]
  6685 00003D98 48895C2408              	mov qword [rsp + 1*8] ,rbx
  6686 00003D9D 488B18                  	mov rbx, qword[rax]
  6687 00003DA0 48891C24                	mov qword [rsp], rbx
  6688 00003DA4 C8000000                	enter 0, 0
  6689                                  	; preparing a tail-call
  6690 00003DA8 48B8-                   	mov rax, L_constants + 1993
  6690 00003DAA [C907000000000000] 
  6691 00003DB2 50                      	push rax
  6692 00003DB3 6A01                    	push 1	; arg count
  6693 00003DB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6694 00003DBA E805470100              	call malloc
  6695 00003DBF 50                      	push rax
  6696 00003DC0 BF10000000              	mov rdi, 8 * 2	; new rib
  6697 00003DC5 E8FA460100              	call malloc
  6698 00003DCA 50                      	push rax
  6699 00003DCB BF10000000              	mov rdi, 8 * 2	; extended env
  6700 00003DD0 E8EF460100              	call malloc
  6701 00003DD5 488B7D10                	mov rdi, ENV
  6702 00003DD9 BE00000000              	mov rsi, 0
  6703 00003DDE BA01000000              	mov rdx, 1
  6704                                  .L_lambda_simple_env_loop_0a56:	; ext_env[i + 1] <-- env[i]
  6705 00003DE3 4883FE01                	cmp rsi, 1
  6706 00003DE7 7410                    	je .L_lambda_simple_env_end_0a56
  6707 00003DE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6708 00003DED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6709 00003DF1 48FFC6                  	inc rsi
  6710 00003DF4 48FFC2                  	inc rdx
  6711 00003DF7 EBEA                    	jmp .L_lambda_simple_env_loop_0a56
  6712                                  .L_lambda_simple_env_end_0a56:
  6713 00003DF9 5B                      	pop rbx
  6714 00003DFA BE00000000              	mov rsi, 0
  6715                                  .L_lambda_simple_params_loop_0a56:	; copy params
  6716 00003DFF 4883FE02                	cmp rsi, 2
  6717 00003E03 740E                    	je .L_lambda_simple_params_end_0a56
  6718 00003E05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6719 00003E0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6720 00003E0E 48FFC6                  	inc rsi
  6721 00003E11 EBEC                    	jmp .L_lambda_simple_params_loop_0a56
  6722                                  .L_lambda_simple_params_end_0a56:
  6723 00003E13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6724 00003E16 4889C3                  	mov rbx, rax
  6725 00003E19 58                      	pop rax
  6726 00003E1A C60004                  	mov byte [rax], T_closure
  6727 00003E1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6728 00003E21 48C74009[2E3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a56
  6729 00003E29 E9FD020000              	jmp .L_lambda_simple_end_0a56
  6730                                  .L_lambda_simple_code_0a56:	; lambda-simple body
  6731 00003E2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6732 00003E34 740B                    	je .L_lambda_simple_arity_check_ok_0a56
  6733 00003E36 FF742410                	push qword [rsp + 8 * 2]
  6734 00003E3A 6A01                    	push 1
  6735 00003E3C E93C460100              	jmp L_error_incorrect_arity_simple
  6736                                  .L_lambda_simple_arity_check_ok_0a56:
  6737 00003E41 C8000000                	enter 0, 0
  6738 00003E45 BF08000000              	mov rdi, 8*1
  6739 00003E4A E875460100              	call malloc
  6740 00003E4F 488B5D20                	mov rbx, PARAM(0)
  6741 00003E53 488918                  	mov qword[rax], rbx
  6742 00003E56 48894520                	mov PARAM(0), rax
  6743 00003E5A 48B8-                   	mov rax, sob_void
  6743 00003E5C [0000000000000000] 
  6744                                  
  6745 00003E64 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6746 00003E69 E856460100              	call malloc
  6747 00003E6E 50                      	push rax
  6748 00003E6F BF08000000              	mov rdi, 8 * 1	; new rib
  6749 00003E74 E84B460100              	call malloc
  6750 00003E79 50                      	push rax
  6751 00003E7A BF18000000              	mov rdi, 8 * 3	; extended env
  6752 00003E7F E840460100              	call malloc
  6753 00003E84 488B7D10                	mov rdi, ENV
  6754 00003E88 BE00000000              	mov rsi, 0
  6755 00003E8D BA01000000              	mov rdx, 1
  6756                                  .L_lambda_simple_env_loop_0a57:	; ext_env[i + 1] <-- env[i]
  6757 00003E92 4883FE02                	cmp rsi, 2
  6758 00003E96 7410                    	je .L_lambda_simple_env_end_0a57
  6759 00003E98 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6760 00003E9C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6761 00003EA0 48FFC6                  	inc rsi
  6762 00003EA3 48FFC2                  	inc rdx
  6763 00003EA6 EBEA                    	jmp .L_lambda_simple_env_loop_0a57
  6764                                  .L_lambda_simple_env_end_0a57:
  6765 00003EA8 5B                      	pop rbx
  6766 00003EA9 BE00000000              	mov rsi, 0
  6767                                  .L_lambda_simple_params_loop_0a57:	; copy params
  6768 00003EAE 4883FE01                	cmp rsi, 1
  6769 00003EB2 740E                    	je .L_lambda_simple_params_end_0a57
  6770 00003EB4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6771 00003EB9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6772 00003EBD 48FFC6                  	inc rsi
  6773 00003EC0 EBEC                    	jmp .L_lambda_simple_params_loop_0a57
  6774                                  .L_lambda_simple_params_end_0a57:
  6775 00003EC2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6776 00003EC5 4889C3                  	mov rbx, rax
  6777 00003EC8 58                      	pop rax
  6778 00003EC9 C60004                  	mov byte [rax], T_closure
  6779 00003ECC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6780 00003ED0 48C74009[DD3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a57
  6781 00003ED8 E98E010000              	jmp .L_lambda_simple_end_0a57
  6782                                  .L_lambda_simple_code_0a57:	; lambda-simple body
  6783 00003EDD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6784 00003EE3 740B                    	je .L_lambda_simple_arity_check_ok_0a57
  6785 00003EE5 FF742410                	push qword [rsp + 8 * 2]
  6786 00003EE9 6A01                    	push 1
  6787 00003EEB E98D450100              	jmp L_error_incorrect_arity_simple
  6788                                  .L_lambda_simple_arity_check_ok_0a57:
  6789 00003EF0 C8000000                	enter 0, 0
  6790                                  	; preparing a non-tail-call
  6791                                  	; preparing a non-tail-call
  6792 00003EF4 488B4520                	mov rax, PARAM(0)	; param s
  6793 00003EF8 50                      	push rax
  6794 00003EF9 6A01                    	push 1	; arg count
  6795 00003EFB 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  6796 00003F03 803805                  	cmp byte [rax], T_undefined
  6797 00003F06 0F848B440100            	je L_error_fvar_undefined
  6798 00003F0C 803804                  	cmp byte [rax], T_closure
  6799 00003F0F 0F8506450100            	jne L_error_non_closure
  6800 00003F15 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6801 00003F18 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6802 00003F1B 50                      	push rax
  6803 00003F1C 6A01                    	push 1	; arg count
  6804 00003F1E 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  6805 00003F26 803805                  	cmp byte [rax], T_undefined
  6806 00003F29 0F8468440100            	je L_error_fvar_undefined
  6807 00003F2F 803804                  	cmp byte [rax], T_closure
  6808 00003F32 0F85E3440100            	jne L_error_non_closure
  6809 00003F38 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6810 00003F3B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6811 00003F3E 483D[02000000]          	cmp rax, sob_boolean_false
  6812 00003F44 0F8413010000            	je .L_if_else_07ad
  6813                                  	; preparing a non-tail-call
  6814                                  	; preparing a non-tail-call
  6815 00003F4A 488B4520                	mov rax, PARAM(0)	; param s
  6816 00003F4E 50                      	push rax
  6817 00003F4F 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  6818 00003F57 803805                  	cmp byte [rax], T_undefined
  6819 00003F5A 0F8437440100            	je L_error_fvar_undefined
  6820 00003F60 50                      	push rax
  6821 00003F61 6A02                    	push 2	; arg count
  6822 00003F63 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  6823 00003F6B 803805                  	cmp byte [rax], T_undefined
  6824 00003F6E 0F8423440100            	je L_error_fvar_undefined
  6825 00003F74 803804                  	cmp byte [rax], T_closure
  6826 00003F77 0F859E440100            	jne L_error_non_closure
  6827 00003F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
  6828 00003F80 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6829 00003F83 50                      	push rax
  6830 00003F84 488B4510                	mov rax, ENV
  6831 00003F88 488B4008                	mov rax, qword [rax + 8 * 1]
  6832 00003F8C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  6833 00003F8F 50                      	push rax
  6834 00003F90 6A02                    	push 2	; arg count
  6835 00003F92 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  6836 00003F9A 803805                  	cmp byte [rax], T_undefined
  6837 00003F9D 0F84F4430100            	je L_error_fvar_undefined
  6838 00003FA3 803804                  	cmp byte [rax], T_closure
  6839 00003FA6 0F856F440100            	jne L_error_non_closure
  6840 00003FAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6841 00003FAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6842 00003FB2 483D[02000000]          	cmp rax, sob_boolean_false
  6843 00003FB8 0F859D000000            	jne .L_or_end_00e2
  6844                                  	; preparing a tail-call
  6845                                  	; preparing a non-tail-call
  6846 00003FBE 488B4520                	mov rax, PARAM(0)	; param s
  6847 00003FC2 50                      	push rax
  6848 00003FC3 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  6849 00003FCB 803805                  	cmp byte [rax], T_undefined
  6850 00003FCE 0F84C3430100            	je L_error_fvar_undefined
  6851 00003FD4 50                      	push rax
  6852 00003FD5 6A02                    	push 2	; arg count
  6853 00003FD7 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  6854 00003FDF 803805                  	cmp byte [rax], T_undefined
  6855 00003FE2 0F84AF430100            	je L_error_fvar_undefined
  6856 00003FE8 803804                  	cmp byte [rax], T_closure
  6857 00003FEB 0F852A440100            	jne L_error_non_closure
  6858 00003FF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6859 00003FF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6860 00003FF7 50                      	push rax
  6861 00003FF8 6A01                    	push 1	; arg count
  6862 00003FFA 488B4510                	mov rax, ENV
  6863 00003FFE 488B00                  	mov rax, qword [rax + 8 * 0]
  6864 00004001 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  6865 00004004 488B00                  	mov rax, qword [rax]
  6866 00004007 803804                  	cmp byte [rax], T_closure
  6867 0000400A 0F850B440100            	jne L_error_non_closure
  6868 00004010 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6869 00004013 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6870 00004016 FF7500                  	push qword[rbp]
  6871 00004019 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6872 0000401C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6873 00004020 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6874 00004024 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6875 00004028 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6876 0000402B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6877 0000402E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6878 00004033 4983C103                	add r9, 3 	 ;for getting to the params
  6879 00004037 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6880 0000403B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6881                                  .L_tc_recycle_frame_loop_0e64:
  6882 0000403E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6883 00004041 7410                    	je .L_tc_recycle_frame_done_0e64
  6884 00004043 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6885 00004046 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6886 00004049 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6887 0000404D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6888 00004051 EBEB                    	jmp .L_tc_recycle_frame_loop_0e64
  6889                                  .L_tc_recycle_frame_done_0e64:
  6890 00004053 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6891 00004054 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6892 00004058 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6893                                  .L_or_end_00e2:
  6894 0000405B EB0A                    	jmp .L_if_end_07ad
  6895                                  .L_if_else_07ad:
  6896 0000405D 48B8-                   	mov rax, L_constants + 2
  6896 0000405F [0200000000000000] 
  6897                                  .L_if_end_07ad:
  6898 00004067 C9                      	leave
  6899 00004068 C21800                  	ret AND_KILL_FRAME(1)
  6900                                  .L_lambda_simple_end_0a57:	; new closure is in rax
  6901 0000406B 50                      	push rax
  6902 0000406C 488B4520                	mov rax, PARAM(0)	; param loop
  6903 00004070 8F00                    	pop qword [rax]
  6904 00004072 48B8-                   	mov rax, sob_void
  6904 00004074 [0000000000000000] 
  6905                                  
  6906                                  	; preparing a non-tail-call
  6907 0000407C 488B4510                	mov rax, ENV
  6908 00004080 488B00                  	mov rax, qword [rax + 8 * 0]
  6909 00004083 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6910 00004087 50                      	push rax
  6911 00004088 6A01                    	push 1	; arg count
  6912 0000408A 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  6913 00004092 803805                  	cmp byte [rax], T_undefined
  6914 00004095 0F84FC420100            	je L_error_fvar_undefined
  6915 0000409B 803804                  	cmp byte [rax], T_closure
  6916 0000409E 0F8577430100            	jne L_error_non_closure
  6917 000040A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6918 000040A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6919 000040AA 483D[02000000]          	cmp rax, sob_boolean_false
  6920 000040B0 746B                    	je .L_if_else_07ae
  6921                                  	; preparing a tail-call
  6922 000040B2 488B4510                	mov rax, ENV
  6923 000040B6 488B00                  	mov rax, qword [rax + 8 * 0]
  6924 000040B9 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  6925 000040BD 50                      	push rax
  6926 000040BE 6A01                    	push 1	; arg count
  6927 000040C0 488B4520                	mov rax, PARAM(0)	; param loop
  6928 000040C4 488B00                  	mov rax, qword [rax]
  6929 000040C7 803804                  	cmp byte [rax], T_closure
  6930 000040CA 0F854B430100            	jne L_error_non_closure
  6931 000040D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6932 000040D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6933 000040D6 FF7500                  	push qword[rbp]
  6934 000040D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6935 000040DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6936 000040E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6937 000040E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6938 000040E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6939 000040EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6940 000040EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6941 000040F3 4983C103                	add r9, 3 	 ;for getting to the params
  6942 000040F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6943 000040FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6944                                  .L_tc_recycle_frame_loop_0e65:
  6945 000040FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6946 00004101 7410                    	je .L_tc_recycle_frame_done_0e65
  6947 00004103 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6948 00004106 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6949 00004109 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6950 0000410D 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6951 00004111 EBEB                    	jmp .L_tc_recycle_frame_loop_0e65
  6952                                  .L_tc_recycle_frame_done_0e65:
  6953 00004113 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6954 00004114 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6955 00004118 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6956 0000411B EB0A                    	jmp .L_if_end_07ae
  6957                                  .L_if_else_07ae:
  6958 0000411D 48B8-                   	mov rax, L_constants + 2
  6958 0000411F [0200000000000000] 
  6959                                  .L_if_end_07ae:
  6960 00004127 C9                      	leave
  6961 00004128 C21800                  	ret AND_KILL_FRAME(1)
  6962                                  .L_lambda_simple_end_0a56:	; new closure is in rax
  6963 0000412B 803804                  	cmp byte [rax], T_closure
  6964 0000412E 0F85E7420100            	jne L_error_non_closure
  6965 00004134 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6966 00004137 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  6967 0000413A FF7500                  	push qword[rbp]
  6968 0000413D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  6969 00004140 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  6970 00004144 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  6971 00004148 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  6972 0000414C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  6973 0000414F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  6974 00004152 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  6975 00004157 4983C103                	add r9, 3 	 ;for getting to the params
  6976 0000415B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  6977 0000415F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  6978                                  .L_tc_recycle_frame_loop_0e66:
  6979 00004162 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  6980 00004165 7410                    	je .L_tc_recycle_frame_done_0e66
  6981 00004167 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  6982 0000416A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  6983 0000416D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  6984 00004171 4983E808                	sub r8, 8	 ;move the top of the stack one down
  6985 00004175 EBEB                    	jmp .L_tc_recycle_frame_loop_0e66
  6986                                  .L_tc_recycle_frame_done_0e66:
  6987 00004177 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  6988 00004178 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  6989 0000417C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6990 0000417F C9                      	leave
  6991 00004180 C22000                  	ret AND_KILL_FRAME(2)
  6992                                  .L_lambda_opt_end_0142:	; new closure is in rax
  6993 00004183 48890425[88160000]      	mov qword [free_var_110], rax
  6994 0000418B 48B8-                   	mov rax, sob_void
  6994 0000418D [0000000000000000] 
  6995                                  
  6996 00004195 4889C7                  	mov rdi, rax
  6997 00004198 E87C450100              	call print_sexpr_if_not_void
  6998 0000419D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6999 000041A2 E81D430100              	call malloc
  7000 000041A7 50                      	push rax
  7001 000041A8 BF00000000              	mov rdi, 8 * 0	; new rib
  7002 000041AD E812430100              	call malloc
  7003 000041B2 50                      	push rax
  7004 000041B3 BF08000000              	mov rdi, 8 * 1	; extended env
  7005 000041B8 E807430100              	call malloc
  7006 000041BD 488B7D10                	mov rdi, ENV
  7007 000041C1 BE00000000              	mov rsi, 0
  7008 000041C6 BA01000000              	mov rdx, 1
  7009                                  .L_lambda_opt_env_loop_0143:	; ext_env[i + 1] <-- env[i]
  7010 000041CB 4883FE00                	cmp rsi, 0
  7011 000041CF 7410                    	je .L_lambda_opt_env_end_0143
  7012 000041D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7013 000041D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7014 000041D9 48FFC6                  	inc rsi
  7015 000041DC 48FFC2                  	inc rdx
  7016 000041DF EBEA                    	jmp .L_lambda_opt_env_loop_0143
  7017                                  .L_lambda_opt_env_end_0143:
  7018 000041E1 5B                      	pop rbx
  7019 000041E2 BE00000000              	mov rsi, 0
  7020                                  .L_lambda_opt_params_loop_0143:	; copy params
  7021 000041E7 4883FE00                	cmp rsi, 0
  7022 000041EB 740E                    	je .L_lambda_opt_params_end_0143
  7023 000041ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7024 000041F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7025 000041F6 48FFC6                  	inc rsi
  7026 000041F9 EBEC                    	jmp .L_lambda_opt_params_loop_0143
  7027                                  .L_lambda_opt_params_end_0143:
  7028 000041FB 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  7029 000041FE 4889C3                  	mov rbx, rax
  7030 00004201 58                      	pop rax
  7031 00004202 C60004                  	mov byte [rax], T_closure
  7032 00004205 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7033 00004209 48C74009[16420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0143
  7034 00004211 E94F090000              	jmp .L_lambda_opt_end_0143
  7035                                  .L_lambda_opt_code_0143:	; lambda-opt body
  7036 00004216 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7037 0000421C 7411                    	je .L_lambda_opt_arity_check_exact_0143
  7038 0000421E 0F8F63040000            	jg .L_lambda_opt_arity_check_more_0143
  7039 00004224 FF742410                	push qword [rsp + 8 * 2]
  7040 00004228 6A01                    	push 1
  7041 0000422A E962420100              	jmp L_error_incorrect_arity_opt
  7042                                  .L_lambda_opt_arity_check_exact_0143:
  7043 0000422F 4883EC08                	sub rsp, 8
  7044 00004233 488B442408              	mov rax, qword[rsp + 8 *1]
  7045 00004238 48890424                	mov qword[rsp], rax  
  7046 0000423C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  7047 00004241 4889442408              	mov qword[rsp + 8 * 1], rax
  7048 00004246 B802000000              	mov rax, 2
  7049 0000424B 4889442410              	mov qword[rsp + 8 *2], rax
  7050 00004250 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  7051 00004255 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  7052 0000425A 48B8-                   	mov rax, sob_nil
  7052 0000425C [0100000000000000] 
  7053 00004264 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  7054 00004269 C8000000                	enter 0, 0
  7055                                  	; preparing a tail-call
  7056 0000426D 48B8-                   	mov rax, L_constants + 1993
  7056 0000426F [C907000000000000] 
  7057 00004277 50                      	push rax
  7058 00004278 6A01                    	push 1	; arg count
  7059 0000427A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7060 0000427F E840420100              	call malloc
  7061 00004284 50                      	push rax
  7062 00004285 BF10000000              	mov rdi, 8 * 2	; new rib
  7063 0000428A E835420100              	call malloc
  7064 0000428F 50                      	push rax
  7065 00004290 BF10000000              	mov rdi, 8 * 2	; extended env
  7066 00004295 E82A420100              	call malloc
  7067 0000429A 488B7D10                	mov rdi, ENV
  7068 0000429E BE00000000              	mov rsi, 0
  7069 000042A3 BA01000000              	mov rdx, 1
  7070                                  .L_lambda_simple_env_loop_0a5c:	; ext_env[i + 1] <-- env[i]
  7071 000042A8 4883FE01                	cmp rsi, 1
  7072 000042AC 7410                    	je .L_lambda_simple_env_end_0a5c
  7073 000042AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7074 000042B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7075 000042B6 48FFC6                  	inc rsi
  7076 000042B9 48FFC2                  	inc rdx
  7077 000042BC EBEA                    	jmp .L_lambda_simple_env_loop_0a5c
  7078                                  .L_lambda_simple_env_end_0a5c:
  7079 000042BE 5B                      	pop rbx
  7080 000042BF BE00000000              	mov rsi, 0
  7081                                  .L_lambda_simple_params_loop_0a5c:	; copy params
  7082 000042C4 4883FE02                	cmp rsi, 2
  7083 000042C8 740E                    	je .L_lambda_simple_params_end_0a5c
  7084 000042CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7085 000042CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7086 000042D3 48FFC6                  	inc rsi
  7087 000042D6 EBEC                    	jmp .L_lambda_simple_params_loop_0a5c
  7088                                  .L_lambda_simple_params_end_0a5c:
  7089 000042D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7090 000042DB 4889C3                  	mov rbx, rax
  7091 000042DE 58                      	pop rax
  7092 000042DF C60004                  	mov byte [rax], T_closure
  7093 000042E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7094 000042E6 48C74009[F3420000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a5c
  7095 000042EE E937030000              	jmp .L_lambda_simple_end_0a5c
  7096                                  .L_lambda_simple_code_0a5c:	; lambda-simple body
  7097 000042F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7098 000042F9 740B                    	je .L_lambda_simple_arity_check_ok_0a5c
  7099 000042FB FF742410                	push qword [rsp + 8 * 2]
  7100 000042FF 6A01                    	push 1
  7101 00004301 E977410100              	jmp L_error_incorrect_arity_simple
  7102                                  .L_lambda_simple_arity_check_ok_0a5c:
  7103 00004306 C8000000                	enter 0, 0
  7104 0000430A BF08000000              	mov rdi, 8*1
  7105 0000430F E8B0410100              	call malloc
  7106 00004314 488B5D20                	mov rbx, PARAM(0)
  7107 00004318 488918                  	mov qword[rax], rbx
  7108 0000431B 48894520                	mov PARAM(0), rax
  7109 0000431F 48B8-                   	mov rax, sob_void
  7109 00004321 [0000000000000000] 
  7110                                  
  7111 00004329 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7112 0000432E E891410100              	call malloc
  7113 00004333 50                      	push rax
  7114 00004334 BF08000000              	mov rdi, 8 * 1	; new rib
  7115 00004339 E886410100              	call malloc
  7116 0000433E 50                      	push rax
  7117 0000433F BF18000000              	mov rdi, 8 * 3	; extended env
  7118 00004344 E87B410100              	call malloc
  7119 00004349 488B7D10                	mov rdi, ENV
  7120 0000434D BE00000000              	mov rsi, 0
  7121 00004352 BA01000000              	mov rdx, 1
  7122                                  .L_lambda_simple_env_loop_0a5d:	; ext_env[i + 1] <-- env[i]
  7123 00004357 4883FE02                	cmp rsi, 2
  7124 0000435B 7410                    	je .L_lambda_simple_env_end_0a5d
  7125 0000435D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7126 00004361 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7127 00004365 48FFC6                  	inc rsi
  7128 00004368 48FFC2                  	inc rdx
  7129 0000436B EBEA                    	jmp .L_lambda_simple_env_loop_0a5d
  7130                                  .L_lambda_simple_env_end_0a5d:
  7131 0000436D 5B                      	pop rbx
  7132 0000436E BE00000000              	mov rsi, 0
  7133                                  .L_lambda_simple_params_loop_0a5d:	; copy params
  7134 00004373 4883FE01                	cmp rsi, 1
  7135 00004377 740E                    	je .L_lambda_simple_params_end_0a5d
  7136 00004379 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7137 0000437E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7138 00004382 48FFC6                  	inc rsi
  7139 00004385 EBEC                    	jmp .L_lambda_simple_params_loop_0a5d
  7140                                  .L_lambda_simple_params_end_0a5d:
  7141 00004387 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7142 0000438A 4889C3                  	mov rbx, rax
  7143 0000438D 58                      	pop rax
  7144 0000438E C60004                  	mov byte [rax], T_closure
  7145 00004391 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7146 00004395 48C74009[A2430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a5d
  7147 0000439D E98E010000              	jmp .L_lambda_simple_end_0a5d
  7148                                  .L_lambda_simple_code_0a5d:	; lambda-simple body
  7149 000043A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7150 000043A8 740B                    	je .L_lambda_simple_arity_check_ok_0a5d
  7151 000043AA FF742410                	push qword [rsp + 8 * 2]
  7152 000043AE 6A01                    	push 1
  7153 000043B0 E9C8400100              	jmp L_error_incorrect_arity_simple
  7154                                  .L_lambda_simple_arity_check_ok_0a5d:
  7155 000043B5 C8000000                	enter 0, 0
  7156                                  	; preparing a non-tail-call
  7157                                  	; preparing a non-tail-call
  7158 000043B9 488B4520                	mov rax, PARAM(0)	; param s
  7159 000043BD 50                      	push rax
  7160 000043BE 6A01                    	push 1	; arg count
  7161 000043C0 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  7162 000043C8 803805                  	cmp byte [rax], T_undefined
  7163 000043CB 0F84C63F0100            	je L_error_fvar_undefined
  7164 000043D1 803804                  	cmp byte [rax], T_closure
  7165 000043D4 0F8541400100            	jne L_error_non_closure
  7166 000043DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7167 000043DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7168 000043E0 50                      	push rax
  7169 000043E1 6A01                    	push 1	; arg count
  7170 000043E3 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  7171 000043EB 803805                  	cmp byte [rax], T_undefined
  7172 000043EE 0F84A33F0100            	je L_error_fvar_undefined
  7173 000043F4 803804                  	cmp byte [rax], T_closure
  7174 000043F7 0F851E400100            	jne L_error_non_closure
  7175 000043FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7176 00004400 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7177 00004403 483D[02000000]          	cmp rax, sob_boolean_false
  7178 00004409 0F851D010000            	jne .L_or_end_00e6
  7179                                  	; preparing a non-tail-call
  7180                                  	; preparing a non-tail-call
  7181 0000440F 488B4520                	mov rax, PARAM(0)	; param s
  7182 00004413 50                      	push rax
  7183 00004414 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  7184 0000441C 803805                  	cmp byte [rax], T_undefined
  7185 0000441F 0F84723F0100            	je L_error_fvar_undefined
  7186 00004425 50                      	push rax
  7187 00004426 6A02                    	push 2	; arg count
  7188 00004428 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  7189 00004430 803805                  	cmp byte [rax], T_undefined
  7190 00004433 0F845E3F0100            	je L_error_fvar_undefined
  7191 00004439 803804                  	cmp byte [rax], T_closure
  7192 0000443C 0F85D93F0100            	jne L_error_non_closure
  7193 00004442 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7194 00004445 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7195 00004448 50                      	push rax
  7196 00004449 488B4510                	mov rax, ENV
  7197 0000444D 488B4008                	mov rax, qword [rax + 8 * 1]
  7198 00004451 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7199 00004454 50                      	push rax
  7200 00004455 6A02                    	push 2	; arg count
  7201 00004457 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  7202 0000445F 803805                  	cmp byte [rax], T_undefined
  7203 00004462 0F842F3F0100            	je L_error_fvar_undefined
  7204 00004468 803804                  	cmp byte [rax], T_closure
  7205 0000446B 0F85AA3F0100            	jne L_error_non_closure
  7206 00004471 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7207 00004474 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7208 00004477 483D[02000000]          	cmp rax, sob_boolean_false
  7209 0000447D 0F849F000000            	je .L_if_else_07b3
  7210                                  	; preparing a tail-call
  7211                                  	; preparing a non-tail-call
  7212 00004483 488B4520                	mov rax, PARAM(0)	; param s
  7213 00004487 50                      	push rax
  7214 00004488 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  7215 00004490 803805                  	cmp byte [rax], T_undefined
  7216 00004493 0F84FE3E0100            	je L_error_fvar_undefined
  7217 00004499 50                      	push rax
  7218 0000449A 6A02                    	push 2	; arg count
  7219 0000449C 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  7220 000044A4 803805                  	cmp byte [rax], T_undefined
  7221 000044A7 0F84EA3E0100            	je L_error_fvar_undefined
  7222 000044AD 803804                  	cmp byte [rax], T_closure
  7223 000044B0 0F85653F0100            	jne L_error_non_closure
  7224 000044B6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7225 000044B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7226 000044BC 50                      	push rax
  7227 000044BD 6A01                    	push 1	; arg count
  7228 000044BF 488B4510                	mov rax, ENV
  7229 000044C3 488B00                  	mov rax, qword [rax + 8 * 0]
  7230 000044C6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7231 000044C9 488B00                  	mov rax, qword [rax]
  7232 000044CC 803804                  	cmp byte [rax], T_closure
  7233 000044CF 0F85463F0100            	jne L_error_non_closure
  7234 000044D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7235 000044D8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7236 000044DB FF7500                  	push qword[rbp]
  7237 000044DE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7238 000044E1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7239 000044E5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7240 000044E9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7241 000044ED 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7242 000044F0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7243 000044F3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7244 000044F8 4983C103                	add r9, 3 	 ;for getting to the params
  7245 000044FC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7246 00004500 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7247                                  .L_tc_recycle_frame_loop_0e6d:
  7248 00004503 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7249 00004506 7410                    	je .L_tc_recycle_frame_done_0e6d
  7250 00004508 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7251 0000450B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7252 0000450E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7253 00004512 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7254 00004516 EBEB                    	jmp .L_tc_recycle_frame_loop_0e6d
  7255                                  .L_tc_recycle_frame_done_0e6d:
  7256 00004518 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7257 00004519 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7258 0000451D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7259 00004520 EB0A                    	jmp .L_if_end_07b3
  7260                                  .L_if_else_07b3:
  7261 00004522 48B8-                   	mov rax, L_constants + 2
  7261 00004524 [0200000000000000] 
  7262                                  .L_if_end_07b3:
  7263                                  .L_or_end_00e6:
  7264 0000452C C9                      	leave
  7265 0000452D C21800                  	ret AND_KILL_FRAME(1)
  7266                                  .L_lambda_simple_end_0a5d:	; new closure is in rax
  7267 00004530 50                      	push rax
  7268 00004531 488B4520                	mov rax, PARAM(0)	; param loop
  7269 00004535 8F00                    	pop qword [rax]
  7270 00004537 48B8-                   	mov rax, sob_void
  7270 00004539 [0000000000000000] 
  7271                                  
  7272                                  	; preparing a non-tail-call
  7273 00004541 488B4510                	mov rax, ENV
  7274 00004545 488B00                  	mov rax, qword [rax + 8 * 0]
  7275 00004548 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7276 0000454C 50                      	push rax
  7277 0000454D 6A01                    	push 1	; arg count
  7278 0000454F 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  7279 00004557 803805                  	cmp byte [rax], T_undefined
  7280 0000455A 0F84373E0100            	je L_error_fvar_undefined
  7281 00004560 803804                  	cmp byte [rax], T_closure
  7282 00004563 0F85B23E0100            	jne L_error_non_closure
  7283 00004569 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7284 0000456C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7285 0000456F 483D[02000000]          	cmp rax, sob_boolean_false
  7286 00004575 0F85AB000000            	jne .L_or_end_00e7
  7287                                  	; preparing a non-tail-call
  7288 0000457B 488B4510                	mov rax, ENV
  7289 0000457F 488B00                  	mov rax, qword [rax + 8 * 0]
  7290 00004582 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7291 00004586 50                      	push rax
  7292 00004587 6A01                    	push 1	; arg count
  7293 00004589 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  7294 00004591 803805                  	cmp byte [rax], T_undefined
  7295 00004594 0F84FD3D0100            	je L_error_fvar_undefined
  7296 0000459A 803804                  	cmp byte [rax], T_closure
  7297 0000459D 0F85783E0100            	jne L_error_non_closure
  7298 000045A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7299 000045A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7300 000045A9 483D[02000000]          	cmp rax, sob_boolean_false
  7301 000045AF 746B                    	je .L_if_else_07b4
  7302                                  	; preparing a tail-call
  7303 000045B1 488B4510                	mov rax, ENV
  7304 000045B5 488B00                  	mov rax, qword [rax + 8 * 0]
  7305 000045B8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7306 000045BC 50                      	push rax
  7307 000045BD 6A01                    	push 1	; arg count
  7308 000045BF 488B4520                	mov rax, PARAM(0)	; param loop
  7309 000045C3 488B00                  	mov rax, qword [rax]
  7310 000045C6 803804                  	cmp byte [rax], T_closure
  7311 000045C9 0F854C3E0100            	jne L_error_non_closure
  7312 000045CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7313 000045D2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7314 000045D5 FF7500                  	push qword[rbp]
  7315 000045D8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7316 000045DB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7317 000045DF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7318 000045E3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7319 000045E7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7320 000045EA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7321 000045ED 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7322 000045F2 4983C103                	add r9, 3 	 ;for getting to the params
  7323 000045F6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7324 000045FA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7325                                  .L_tc_recycle_frame_loop_0e6e:
  7326 000045FD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7327 00004600 7410                    	je .L_tc_recycle_frame_done_0e6e
  7328 00004602 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7329 00004605 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7330 00004608 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7331 0000460C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7332 00004610 EBEB                    	jmp .L_tc_recycle_frame_loop_0e6e
  7333                                  .L_tc_recycle_frame_done_0e6e:
  7334 00004612 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7335 00004613 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7336 00004617 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7337 0000461A EB0A                    	jmp .L_if_end_07b4
  7338                                  .L_if_else_07b4:
  7339 0000461C 48B8-                   	mov rax, L_constants + 2
  7339 0000461E [0200000000000000] 
  7340                                  .L_if_end_07b4:
  7341                                  .L_or_end_00e7:
  7342 00004626 C9                      	leave
  7343 00004627 C21800                  	ret AND_KILL_FRAME(1)
  7344                                  .L_lambda_simple_end_0a5c:	; new closure is in rax
  7345 0000462A 803804                  	cmp byte [rax], T_closure
  7346 0000462D 0F85E83D0100            	jne L_error_non_closure
  7347 00004633 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7348 00004636 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7349 00004639 FF7500                  	push qword[rbp]
  7350 0000463C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7351 0000463F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7352 00004643 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7353 00004647 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7354 0000464B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7355 0000464E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7356 00004651 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7357 00004656 4983C103                	add r9, 3 	 ;for getting to the params
  7358 0000465A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7359 0000465E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7360                                  .L_tc_recycle_frame_loop_0e6f:
  7361 00004661 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7362 00004664 7410                    	je .L_tc_recycle_frame_done_0e6f
  7363 00004666 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7364 00004669 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7365 0000466C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7366 00004670 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7367 00004674 EBEB                    	jmp .L_tc_recycle_frame_loop_0e6f
  7368                                  .L_tc_recycle_frame_done_0e6f:
  7369 00004676 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7370 00004677 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7371 0000467B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7372 0000467E C9                      	leave
  7373 0000467F C22000                  	ret AND_KILL_FRAME(2)
  7374 00004682 E9DE040000              	jmp .L_lambda_opt_end_0143	; new closure is in rax
  7375                                  .L_lambda_opt_arity_check_more_0143:
  7376 00004687 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  7377 0000468C 49B9-                   	mov r9, sob_nil
  7377 0000468E [0100000000000000] 
  7378 00004696 4889E3                  	mov rbx, rsp 
  7379 00004699 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  7380 0000469D 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  7381 000046A0 49C1E003                	shl r8, 3
  7382 000046A4 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  7383 000046A7 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  7384                                  .L_lambda_opt_stack_shrink_loop_0143:
  7385 000046AC 4983F801                	cmp r8, 1
  7386 000046B0 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0143
  7387 000046B2 BF11000000              	mov rdi, 1+8+8 ;for pair
  7388 000046B7 E8083E0100              	call malloc;to create the pair in the stack
  7389 000046BC C60021                  	mov byte [rax], T_pair ; to make it a pair
  7390 000046BF 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  7391 000046C2 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  7392 000046C6 4C894809                 	mov qword[rax+1+8],r9
  7393 000046CA 4989C1                  	mov r9, rax ;for the recursion 
  7394 000046CD 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  7395 000046D0 4883EB08                	sub rbx, 8 ;to get the next param to copy
  7396 000046D4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0143
  7397                                  .L_lambda_opt_stack_shrink_loop_exit_0143:
  7398 000046D6 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  7399 000046DB 4883E902                	sub rcx, 2
  7400 000046DF 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  7401 000046E3 4801CC                  	add rsp, rcx ;shrinking the stack
  7402 000046E6 4889E0                  	mov rax, rsp
  7403 000046E9 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  7404 000046EC 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  7405 000046F0 49FFC8                  	dec r8 ;we start with param 0, not 1 
  7406 000046F3 4883C018                	add rax, 3 * 8;now rax is param 0
  7407 000046F7 49C1E003                	shl r8, 3;convert to byte
  7408 000046FB 4C01C0                  	add rax, r8;now rax is the top of the stack
  7409 000046FE 4C8908                  	mov qword[rax], r9;puting the list at the top
  7410 00004701 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  7411 00004705 4889E3                  	mov rbx, rsp 
  7412 00004708 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  7413 0000470B 41BA01000000            	mov r10, 1;r10 is the not opt params length
  7414 00004711 49FFCA                  	dec r10 
  7415 00004714 49C1E203                	shl r10, 3;to get bytes
  7416 00004718 4883C318                	add rbx, 3*8;rbx is the first param
  7417 0000471C 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  7418 0000471F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  7419 00004722 4C8900                  	mov qword[rax], r8
  7420 00004725 4883E808                	sub rax, 8
  7421 00004729 4883EB08                	sub rbx, 8
  7422 0000472D 4889E0                  	mov rax, rsp
  7423 00004730 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  7424 00004733 48C744241002000000      	mov qword [rsp+2*8], 2
  7425 0000473C 488B5808                	mov rbx, qword[rax + 8 *1]
  7426 00004740 48895C2408              	mov qword [rsp + 1*8] ,rbx
  7427 00004745 488B18                  	mov rbx, qword[rax]
  7428 00004748 48891C24                	mov qword [rsp], rbx
  7429 0000474C C8000000                	enter 0, 0
  7430                                  	; preparing a tail-call
  7431 00004750 48B8-                   	mov rax, L_constants + 1993
  7431 00004752 [C907000000000000] 
  7432 0000475A 50                      	push rax
  7433 0000475B 6A01                    	push 1	; arg count
  7434 0000475D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7435 00004762 E85D3D0100              	call malloc
  7436 00004767 50                      	push rax
  7437 00004768 BF10000000              	mov rdi, 8 * 2	; new rib
  7438 0000476D E8523D0100              	call malloc
  7439 00004772 50                      	push rax
  7440 00004773 BF10000000              	mov rdi, 8 * 2	; extended env
  7441 00004778 E8473D0100              	call malloc
  7442 0000477D 488B7D10                	mov rdi, ENV
  7443 00004781 BE00000000              	mov rsi, 0
  7444 00004786 BA01000000              	mov rdx, 1
  7445                                  .L_lambda_simple_env_loop_0a5a:	; ext_env[i + 1] <-- env[i]
  7446 0000478B 4883FE01                	cmp rsi, 1
  7447 0000478F 7410                    	je .L_lambda_simple_env_end_0a5a
  7448 00004791 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7449 00004795 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7450 00004799 48FFC6                  	inc rsi
  7451 0000479C 48FFC2                  	inc rdx
  7452 0000479F EBEA                    	jmp .L_lambda_simple_env_loop_0a5a
  7453                                  .L_lambda_simple_env_end_0a5a:
  7454 000047A1 5B                      	pop rbx
  7455 000047A2 BE00000000              	mov rsi, 0
  7456                                  .L_lambda_simple_params_loop_0a5a:	; copy params
  7457 000047A7 4883FE02                	cmp rsi, 2
  7458 000047AB 740E                    	je .L_lambda_simple_params_end_0a5a
  7459 000047AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7460 000047B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7461 000047B6 48FFC6                  	inc rsi
  7462 000047B9 EBEC                    	jmp .L_lambda_simple_params_loop_0a5a
  7463                                  .L_lambda_simple_params_end_0a5a:
  7464 000047BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7465 000047BE 4889C3                  	mov rbx, rax
  7466 000047C1 58                      	pop rax
  7467 000047C2 C60004                  	mov byte [rax], T_closure
  7468 000047C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7469 000047C9 48C74009[D6470000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a5a
  7470 000047D1 E937030000              	jmp .L_lambda_simple_end_0a5a
  7471                                  .L_lambda_simple_code_0a5a:	; lambda-simple body
  7472 000047D6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7473 000047DC 740B                    	je .L_lambda_simple_arity_check_ok_0a5a
  7474 000047DE FF742410                	push qword [rsp + 8 * 2]
  7475 000047E2 6A01                    	push 1
  7476 000047E4 E9943C0100              	jmp L_error_incorrect_arity_simple
  7477                                  .L_lambda_simple_arity_check_ok_0a5a:
  7478 000047E9 C8000000                	enter 0, 0
  7479 000047ED BF08000000              	mov rdi, 8*1
  7480 000047F2 E8CD3C0100              	call malloc
  7481 000047F7 488B5D20                	mov rbx, PARAM(0)
  7482 000047FB 488918                  	mov qword[rax], rbx
  7483 000047FE 48894520                	mov PARAM(0), rax
  7484 00004802 48B8-                   	mov rax, sob_void
  7484 00004804 [0000000000000000] 
  7485                                  
  7486 0000480C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7487 00004811 E8AE3C0100              	call malloc
  7488 00004816 50                      	push rax
  7489 00004817 BF08000000              	mov rdi, 8 * 1	; new rib
  7490 0000481C E8A33C0100              	call malloc
  7491 00004821 50                      	push rax
  7492 00004822 BF18000000              	mov rdi, 8 * 3	; extended env
  7493 00004827 E8983C0100              	call malloc
  7494 0000482C 488B7D10                	mov rdi, ENV
  7495 00004830 BE00000000              	mov rsi, 0
  7496 00004835 BA01000000              	mov rdx, 1
  7497                                  .L_lambda_simple_env_loop_0a5b:	; ext_env[i + 1] <-- env[i]
  7498 0000483A 4883FE02                	cmp rsi, 2
  7499 0000483E 7410                    	je .L_lambda_simple_env_end_0a5b
  7500 00004840 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7501 00004844 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7502 00004848 48FFC6                  	inc rsi
  7503 0000484B 48FFC2                  	inc rdx
  7504 0000484E EBEA                    	jmp .L_lambda_simple_env_loop_0a5b
  7505                                  .L_lambda_simple_env_end_0a5b:
  7506 00004850 5B                      	pop rbx
  7507 00004851 BE00000000              	mov rsi, 0
  7508                                  .L_lambda_simple_params_loop_0a5b:	; copy params
  7509 00004856 4883FE01                	cmp rsi, 1
  7510 0000485A 740E                    	je .L_lambda_simple_params_end_0a5b
  7511 0000485C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7512 00004861 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7513 00004865 48FFC6                  	inc rsi
  7514 00004868 EBEC                    	jmp .L_lambda_simple_params_loop_0a5b
  7515                                  .L_lambda_simple_params_end_0a5b:
  7516 0000486A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7517 0000486D 4889C3                  	mov rbx, rax
  7518 00004870 58                      	pop rax
  7519 00004871 C60004                  	mov byte [rax], T_closure
  7520 00004874 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7521 00004878 48C74009[85480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a5b
  7522 00004880 E98E010000              	jmp .L_lambda_simple_end_0a5b
  7523                                  .L_lambda_simple_code_0a5b:	; lambda-simple body
  7524 00004885 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7525 0000488B 740B                    	je .L_lambda_simple_arity_check_ok_0a5b
  7526 0000488D FF742410                	push qword [rsp + 8 * 2]
  7527 00004891 6A01                    	push 1
  7528 00004893 E9E53B0100              	jmp L_error_incorrect_arity_simple
  7529                                  .L_lambda_simple_arity_check_ok_0a5b:
  7530 00004898 C8000000                	enter 0, 0
  7531                                  	; preparing a non-tail-call
  7532                                  	; preparing a non-tail-call
  7533 0000489C 488B4520                	mov rax, PARAM(0)	; param s
  7534 000048A0 50                      	push rax
  7535 000048A1 6A01                    	push 1	; arg count
  7536 000048A3 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  7537 000048AB 803805                  	cmp byte [rax], T_undefined
  7538 000048AE 0F84E33A0100            	je L_error_fvar_undefined
  7539 000048B4 803804                  	cmp byte [rax], T_closure
  7540 000048B7 0F855E3B0100            	jne L_error_non_closure
  7541 000048BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7542 000048C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7543 000048C3 50                      	push rax
  7544 000048C4 6A01                    	push 1	; arg count
  7545 000048C6 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  7546 000048CE 803805                  	cmp byte [rax], T_undefined
  7547 000048D1 0F84C03A0100            	je L_error_fvar_undefined
  7548 000048D7 803804                  	cmp byte [rax], T_closure
  7549 000048DA 0F853B3B0100            	jne L_error_non_closure
  7550 000048E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7551 000048E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7552 000048E6 483D[02000000]          	cmp rax, sob_boolean_false
  7553 000048EC 0F851D010000            	jne .L_or_end_00e4
  7554                                  	; preparing a non-tail-call
  7555                                  	; preparing a non-tail-call
  7556 000048F2 488B4520                	mov rax, PARAM(0)	; param s
  7557 000048F6 50                      	push rax
  7558 000048F7 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  7559 000048FF 803805                  	cmp byte [rax], T_undefined
  7560 00004902 0F848F3A0100            	je L_error_fvar_undefined
  7561 00004908 50                      	push rax
  7562 00004909 6A02                    	push 2	; arg count
  7563 0000490B 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  7564 00004913 803805                  	cmp byte [rax], T_undefined
  7565 00004916 0F847B3A0100            	je L_error_fvar_undefined
  7566 0000491C 803804                  	cmp byte [rax], T_closure
  7567 0000491F 0F85F63A0100            	jne L_error_non_closure
  7568 00004925 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7569 00004928 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7570 0000492B 50                      	push rax
  7571 0000492C 488B4510                	mov rax, ENV
  7572 00004930 488B4008                	mov rax, qword [rax + 8 * 1]
  7573 00004934 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var f
  7574 00004937 50                      	push rax
  7575 00004938 6A02                    	push 2	; arg count
  7576 0000493A 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  7577 00004942 803805                  	cmp byte [rax], T_undefined
  7578 00004945 0F844C3A0100            	je L_error_fvar_undefined
  7579 0000494B 803804                  	cmp byte [rax], T_closure
  7580 0000494E 0F85C73A0100            	jne L_error_non_closure
  7581 00004954 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7582 00004957 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7583 0000495A 483D[02000000]          	cmp rax, sob_boolean_false
  7584 00004960 0F849F000000            	je .L_if_else_07b1
  7585                                  	; preparing a tail-call
  7586                                  	; preparing a non-tail-call
  7587 00004966 488B4520                	mov rax, PARAM(0)	; param s
  7588 0000496A 50                      	push rax
  7589 0000496B 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  7590 00004973 803805                  	cmp byte [rax], T_undefined
  7591 00004976 0F841B3A0100            	je L_error_fvar_undefined
  7592 0000497C 50                      	push rax
  7593 0000497D 6A02                    	push 2	; arg count
  7594 0000497F 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  7595 00004987 803805                  	cmp byte [rax], T_undefined
  7596 0000498A 0F84073A0100            	je L_error_fvar_undefined
  7597 00004990 803804                  	cmp byte [rax], T_closure
  7598 00004993 0F85823A0100            	jne L_error_non_closure
  7599 00004999 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7600 0000499C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7601 0000499F 50                      	push rax
  7602 000049A0 6A01                    	push 1	; arg count
  7603 000049A2 488B4510                	mov rax, ENV
  7604 000049A6 488B00                  	mov rax, qword [rax + 8 * 0]
  7605 000049A9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var loop
  7606 000049AC 488B00                  	mov rax, qword [rax]
  7607 000049AF 803804                  	cmp byte [rax], T_closure
  7608 000049B2 0F85633A0100            	jne L_error_non_closure
  7609 000049B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7610 000049BB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7611 000049BE FF7500                  	push qword[rbp]
  7612 000049C1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7613 000049C4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7614 000049C8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7615 000049CC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7616 000049D0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7617 000049D3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7618 000049D6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7619 000049DB 4983C103                	add r9, 3 	 ;for getting to the params
  7620 000049DF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7621 000049E3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7622                                  .L_tc_recycle_frame_loop_0e6a:
  7623 000049E6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7624 000049E9 7410                    	je .L_tc_recycle_frame_done_0e6a
  7625 000049EB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7626 000049EE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7627 000049F1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7628 000049F5 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7629 000049F9 EBEB                    	jmp .L_tc_recycle_frame_loop_0e6a
  7630                                  .L_tc_recycle_frame_done_0e6a:
  7631 000049FB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7632 000049FC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7633 00004A00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7634 00004A03 EB0A                    	jmp .L_if_end_07b1
  7635                                  .L_if_else_07b1:
  7636 00004A05 48B8-                   	mov rax, L_constants + 2
  7636 00004A07 [0200000000000000] 
  7637                                  .L_if_end_07b1:
  7638                                  .L_or_end_00e4:
  7639 00004A0F C9                      	leave
  7640 00004A10 C21800                  	ret AND_KILL_FRAME(1)
  7641                                  .L_lambda_simple_end_0a5b:	; new closure is in rax
  7642 00004A13 50                      	push rax
  7643 00004A14 488B4520                	mov rax, PARAM(0)	; param loop
  7644 00004A18 8F00                    	pop qword [rax]
  7645 00004A1A 48B8-                   	mov rax, sob_void
  7645 00004A1C [0000000000000000] 
  7646                                  
  7647                                  	; preparing a non-tail-call
  7648 00004A24 488B4510                	mov rax, ENV
  7649 00004A28 488B00                  	mov rax, qword [rax + 8 * 0]
  7650 00004A2B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7651 00004A2F 50                      	push rax
  7652 00004A30 6A01                    	push 1	; arg count
  7653 00004A32 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  7654 00004A3A 803805                  	cmp byte [rax], T_undefined
  7655 00004A3D 0F8454390100            	je L_error_fvar_undefined
  7656 00004A43 803804                  	cmp byte [rax], T_closure
  7657 00004A46 0F85CF390100            	jne L_error_non_closure
  7658 00004A4C FF7001                  	push SOB_CLOSURE_ENV(rax)
  7659 00004A4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7660 00004A52 483D[02000000]          	cmp rax, sob_boolean_false
  7661 00004A58 0F85AB000000            	jne .L_or_end_00e5
  7662                                  	; preparing a non-tail-call
  7663 00004A5E 488B4510                	mov rax, ENV
  7664 00004A62 488B00                  	mov rax, qword [rax + 8 * 0]
  7665 00004A65 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7666 00004A69 50                      	push rax
  7667 00004A6A 6A01                    	push 1	; arg count
  7668 00004A6C 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
  7669 00004A74 803805                  	cmp byte [rax], T_undefined
  7670 00004A77 0F841A390100            	je L_error_fvar_undefined
  7671 00004A7D 803804                  	cmp byte [rax], T_closure
  7672 00004A80 0F8595390100            	jne L_error_non_closure
  7673 00004A86 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7674 00004A89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7675 00004A8C 483D[02000000]          	cmp rax, sob_boolean_false
  7676 00004A92 746B                    	je .L_if_else_07b2
  7677                                  	; preparing a tail-call
  7678 00004A94 488B4510                	mov rax, ENV
  7679 00004A98 488B00                  	mov rax, qword [rax + 8 * 0]
  7680 00004A9B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
  7681 00004A9F 50                      	push rax
  7682 00004AA0 6A01                    	push 1	; arg count
  7683 00004AA2 488B4520                	mov rax, PARAM(0)	; param loop
  7684 00004AA6 488B00                  	mov rax, qword [rax]
  7685 00004AA9 803804                  	cmp byte [rax], T_closure
  7686 00004AAC 0F8569390100            	jne L_error_non_closure
  7687 00004AB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7688 00004AB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7689 00004AB8 FF7500                  	push qword[rbp]
  7690 00004ABB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7691 00004ABE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7692 00004AC2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7693 00004AC6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7694 00004ACA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7695 00004ACD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7696 00004AD0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7697 00004AD5 4983C103                	add r9, 3 	 ;for getting to the params
  7698 00004AD9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7699 00004ADD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7700                                  .L_tc_recycle_frame_loop_0e6b:
  7701 00004AE0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7702 00004AE3 7410                    	je .L_tc_recycle_frame_done_0e6b
  7703 00004AE5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7704 00004AE8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7705 00004AEB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7706 00004AEF 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7707 00004AF3 EBEB                    	jmp .L_tc_recycle_frame_loop_0e6b
  7708                                  .L_tc_recycle_frame_done_0e6b:
  7709 00004AF5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7710 00004AF6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7711 00004AFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7712 00004AFD EB0A                    	jmp .L_if_end_07b2
  7713                                  .L_if_else_07b2:
  7714 00004AFF 48B8-                   	mov rax, L_constants + 2
  7714 00004B01 [0200000000000000] 
  7715                                  .L_if_end_07b2:
  7716                                  .L_or_end_00e5:
  7717 00004B09 C9                      	leave
  7718 00004B0A C21800                  	ret AND_KILL_FRAME(1)
  7719                                  .L_lambda_simple_end_0a5a:	; new closure is in rax
  7720 00004B0D 803804                  	cmp byte [rax], T_closure
  7721 00004B10 0F8505390100            	jne L_error_non_closure
  7722 00004B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7723 00004B19 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7724 00004B1C FF7500                  	push qword[rbp]
  7725 00004B1F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7726 00004B22 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7727 00004B26 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7728 00004B2A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7729 00004B2E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7730 00004B31 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7731 00004B34 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7732 00004B39 4983C103                	add r9, 3 	 ;for getting to the params
  7733 00004B3D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7734 00004B41 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7735                                  .L_tc_recycle_frame_loop_0e6c:
  7736 00004B44 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7737 00004B47 7410                    	je .L_tc_recycle_frame_done_0e6c
  7738 00004B49 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7739 00004B4C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7740 00004B4F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7741 00004B53 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7742 00004B57 EBEB                    	jmp .L_tc_recycle_frame_loop_0e6c
  7743                                  .L_tc_recycle_frame_done_0e6c:
  7744 00004B59 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7745 00004B5A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7746 00004B5E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7747 00004B61 C9                      	leave
  7748 00004B62 C22000                  	ret AND_KILL_FRAME(2)
  7749                                  .L_lambda_opt_end_0143:	; new closure is in rax
  7750 00004B65 48890425[49110000]      	mov qword [free_var_31], rax
  7751 00004B6D 48B8-                   	mov rax, sob_void
  7751 00004B6F [0000000000000000] 
  7752                                  
  7753 00004B77 4889C7                  	mov rdi, rax
  7754 00004B7A E89A3B0100              	call print_sexpr_if_not_void
  7755                                  	; preparing a non-tail-call
  7756 00004B7F 48B8-                   	mov rax, L_constants + 1993
  7756 00004B81 [C907000000000000] 
  7757 00004B89 50                      	push rax
  7758 00004B8A 48B8-                   	mov rax, L_constants + 1993
  7758 00004B8C [C907000000000000] 
  7759 00004B94 50                      	push rax
  7760 00004B95 6A02                    	push 2	; arg count
  7761 00004B97 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7762 00004B9C E823390100              	call malloc
  7763 00004BA1 50                      	push rax
  7764 00004BA2 BF00000000              	mov rdi, 8 * 0	; new rib
  7765 00004BA7 E818390100              	call malloc
  7766 00004BAC 50                      	push rax
  7767 00004BAD BF08000000              	mov rdi, 8 * 1	; extended env
  7768 00004BB2 E80D390100              	call malloc
  7769 00004BB7 488B7D10                	mov rdi, ENV
  7770 00004BBB BE00000000              	mov rsi, 0
  7771 00004BC0 BA01000000              	mov rdx, 1
  7772                                  .L_lambda_simple_env_loop_0a5e:	; ext_env[i + 1] <-- env[i]
  7773 00004BC5 4883FE00                	cmp rsi, 0
  7774 00004BC9 7410                    	je .L_lambda_simple_env_end_0a5e
  7775 00004BCB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7776 00004BCF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7777 00004BD3 48FFC6                  	inc rsi
  7778 00004BD6 48FFC2                  	inc rdx
  7779 00004BD9 EBEA                    	jmp .L_lambda_simple_env_loop_0a5e
  7780                                  .L_lambda_simple_env_end_0a5e:
  7781 00004BDB 5B                      	pop rbx
  7782 00004BDC BE00000000              	mov rsi, 0
  7783                                  .L_lambda_simple_params_loop_0a5e:	; copy params
  7784 00004BE1 4883FE00                	cmp rsi, 0
  7785 00004BE5 740E                    	je .L_lambda_simple_params_end_0a5e
  7786 00004BE7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7787 00004BEC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7788 00004BF0 48FFC6                  	inc rsi
  7789 00004BF3 EBEC                    	jmp .L_lambda_simple_params_loop_0a5e
  7790                                  .L_lambda_simple_params_end_0a5e:
  7791 00004BF5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7792 00004BF8 4889C3                  	mov rbx, rax
  7793 00004BFB 58                      	pop rax
  7794 00004BFC C60004                  	mov byte [rax], T_closure
  7795 00004BFF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7796 00004C03 48C74009[104C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a5e
  7797 00004C0B E94B070000              	jmp .L_lambda_simple_end_0a5e
  7798                                  .L_lambda_simple_code_0a5e:	; lambda-simple body
  7799 00004C10 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7800 00004C16 740B                    	je .L_lambda_simple_arity_check_ok_0a5e
  7801 00004C18 FF742410                	push qword [rsp + 8 * 2]
  7802 00004C1C 6A02                    	push 2
  7803 00004C1E E95A380100              	jmp L_error_incorrect_arity_simple
  7804                                  .L_lambda_simple_arity_check_ok_0a5e:
  7805 00004C23 C8000000                	enter 0, 0
  7806 00004C27 BF08000000              	mov rdi, 8*1
  7807 00004C2C E893380100              	call malloc
  7808 00004C31 488B5D20                	mov rbx, PARAM(0)
  7809 00004C35 488918                  	mov qword[rax], rbx
  7810 00004C38 48894520                	mov PARAM(0), rax
  7811 00004C3C 48B8-                   	mov rax, sob_void
  7811 00004C3E [0000000000000000] 
  7812                                  
  7813 00004C46 BF08000000              	mov rdi, 8*1
  7814 00004C4B E874380100              	call malloc
  7815 00004C50 488B5D28                	mov rbx, PARAM(1)
  7816 00004C54 488918                  	mov qword[rax], rbx
  7817 00004C57 48894528                	mov PARAM(1), rax
  7818 00004C5B 48B8-                   	mov rax, sob_void
  7818 00004C5D [0000000000000000] 
  7819                                  
  7820 00004C65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7821 00004C6A E855380100              	call malloc
  7822 00004C6F 50                      	push rax
  7823 00004C70 BF10000000              	mov rdi, 8 * 2	; new rib
  7824 00004C75 E84A380100              	call malloc
  7825 00004C7A 50                      	push rax
  7826 00004C7B BF10000000              	mov rdi, 8 * 2	; extended env
  7827 00004C80 E83F380100              	call malloc
  7828 00004C85 488B7D10                	mov rdi, ENV
  7829 00004C89 BE00000000              	mov rsi, 0
  7830 00004C8E BA01000000              	mov rdx, 1
  7831                                  .L_lambda_simple_env_loop_0a5f:	; ext_env[i + 1] <-- env[i]
  7832 00004C93 4883FE01                	cmp rsi, 1
  7833 00004C97 7410                    	je .L_lambda_simple_env_end_0a5f
  7834 00004C99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7835 00004C9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7836 00004CA1 48FFC6                  	inc rsi
  7837 00004CA4 48FFC2                  	inc rdx
  7838 00004CA7 EBEA                    	jmp .L_lambda_simple_env_loop_0a5f
  7839                                  .L_lambda_simple_env_end_0a5f:
  7840 00004CA9 5B                      	pop rbx
  7841 00004CAA BE00000000              	mov rsi, 0
  7842                                  .L_lambda_simple_params_loop_0a5f:	; copy params
  7843 00004CAF 4883FE02                	cmp rsi, 2
  7844 00004CB3 740E                    	je .L_lambda_simple_params_end_0a5f
  7845 00004CB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7846 00004CBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7847 00004CBE 48FFC6                  	inc rsi
  7848 00004CC1 EBEC                    	jmp .L_lambda_simple_params_loop_0a5f
  7849                                  .L_lambda_simple_params_end_0a5f:
  7850 00004CC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7851 00004CC6 4889C3                  	mov rbx, rax
  7852 00004CC9 58                      	pop rax
  7853 00004CCA C60004                  	mov byte [rax], T_closure
  7854 00004CCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7855 00004CD1 48C74009[DE4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a5f
  7856 00004CD9 E94A010000              	jmp .L_lambda_simple_end_0a5f
  7857                                  .L_lambda_simple_code_0a5f:	; lambda-simple body
  7858 00004CDE 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7859 00004CE4 740B                    	je .L_lambda_simple_arity_check_ok_0a5f
  7860 00004CE6 FF742410                	push qword [rsp + 8 * 2]
  7861 00004CEA 6A02                    	push 2
  7862 00004CEC E98C370100              	jmp L_error_incorrect_arity_simple
  7863                                  .L_lambda_simple_arity_check_ok_0a5f:
  7864 00004CF1 C8000000                	enter 0, 0
  7865                                  	; preparing a non-tail-call
  7866 00004CF5 488B4528                	mov rax, PARAM(1)	; param s
  7867 00004CF9 50                      	push rax
  7868 00004CFA 6A01                    	push 1	; arg count
  7869 00004CFC 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  7870 00004D04 803805                  	cmp byte [rax], T_undefined
  7871 00004D07 0F848A360100            	je L_error_fvar_undefined
  7872 00004D0D 803804                  	cmp byte [rax], T_closure
  7873 00004D10 0F8505370100            	jne L_error_non_closure
  7874 00004D16 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7875 00004D19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7876 00004D1C 483D[02000000]          	cmp rax, sob_boolean_false
  7877 00004D22 740F                    	je .L_if_else_07b5
  7878 00004D24 48B8-                   	mov rax, L_constants + 1
  7878 00004D26 [0100000000000000] 
  7879 00004D2E E9F1000000              	jmp .L_if_end_07b5
  7880                                  .L_if_else_07b5:
  7881                                  	; preparing a tail-call
  7882                                  	; preparing a non-tail-call
  7883                                  	; preparing a non-tail-call
  7884 00004D33 488B4528                	mov rax, PARAM(1)	; param s
  7885 00004D37 50                      	push rax
  7886 00004D38 6A01                    	push 1	; arg count
  7887 00004D3A 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  7888 00004D42 803805                  	cmp byte [rax], T_undefined
  7889 00004D45 0F844C360100            	je L_error_fvar_undefined
  7890 00004D4B 803804                  	cmp byte [rax], T_closure
  7891 00004D4E 0F85C7360100            	jne L_error_non_closure
  7892 00004D54 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7893 00004D57 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7894 00004D5A 50                      	push rax
  7895 00004D5B 488B4520                	mov rax, PARAM(0)	; param f
  7896 00004D5F 50                      	push rax
  7897 00004D60 6A02                    	push 2	; arg count
  7898 00004D62 488B4510                	mov rax, ENV
  7899 00004D66 488B00                  	mov rax, qword [rax + 8 * 0]
  7900 00004D69 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  7901 00004D6C 488B00                  	mov rax, qword [rax]
  7902 00004D6F 803804                  	cmp byte [rax], T_closure
  7903 00004D72 0F85A3360100            	jne L_error_non_closure
  7904 00004D78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7905 00004D7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7906 00004D7E 50                      	push rax
  7907                                  	; preparing a non-tail-call
  7908                                  	; preparing a non-tail-call
  7909 00004D7F 488B4528                	mov rax, PARAM(1)	; param s
  7910 00004D83 50                      	push rax
  7911 00004D84 6A01                    	push 1	; arg count
  7912 00004D86 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  7913 00004D8E 803805                  	cmp byte [rax], T_undefined
  7914 00004D91 0F8400360100            	je L_error_fvar_undefined
  7915 00004D97 803804                  	cmp byte [rax], T_closure
  7916 00004D9A 0F857B360100            	jne L_error_non_closure
  7917 00004DA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7918 00004DA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7919 00004DA6 50                      	push rax
  7920 00004DA7 6A01                    	push 1	; arg count
  7921 00004DA9 488B4520                	mov rax, PARAM(0)	; param f
  7922 00004DAD 803804                  	cmp byte [rax], T_closure
  7923 00004DB0 0F8565360100            	jne L_error_non_closure
  7924 00004DB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7925 00004DB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7926 00004DBC 50                      	push rax
  7927 00004DBD 6A02                    	push 2	; arg count
  7928 00004DBF 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  7929 00004DC7 803805                  	cmp byte [rax], T_undefined
  7930 00004DCA 0F84C7350100            	je L_error_fvar_undefined
  7931 00004DD0 803804                  	cmp byte [rax], T_closure
  7932 00004DD3 0F8542360100            	jne L_error_non_closure
  7933 00004DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7934 00004DDC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  7935 00004DDF FF7500                  	push qword[rbp]
  7936 00004DE2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  7937 00004DE5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  7938 00004DE9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  7939 00004DED 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  7940 00004DF1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  7941 00004DF4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  7942 00004DF7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  7943 00004DFC 4983C103                	add r9, 3 	 ;for getting to the params
  7944 00004E00 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  7945 00004E04 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  7946                                  .L_tc_recycle_frame_loop_0e70:
  7947 00004E07 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  7948 00004E0A 7410                    	je .L_tc_recycle_frame_done_0e70
  7949 00004E0C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  7950 00004E0F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  7951 00004E12 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  7952 00004E16 4983E808                	sub r8, 8	 ;move the top of the stack one down
  7953 00004E1A EBEB                    	jmp .L_tc_recycle_frame_loop_0e70
  7954                                  .L_tc_recycle_frame_done_0e70:
  7955 00004E1C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  7956 00004E1D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  7957 00004E21 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7958                                  .L_if_end_07b5:
  7959 00004E24 C9                      	leave
  7960 00004E25 C22000                  	ret AND_KILL_FRAME(2)
  7961                                  .L_lambda_simple_end_0a5f:	; new closure is in rax
  7962 00004E28 50                      	push rax
  7963 00004E29 488B4520                	mov rax, PARAM(0)	; param map1
  7964 00004E2D 8F00                    	pop qword [rax]
  7965 00004E2F 48B8-                   	mov rax, sob_void
  7965 00004E31 [0000000000000000] 
  7966                                  
  7967 00004E39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7968 00004E3E E881360100              	call malloc
  7969 00004E43 50                      	push rax
  7970 00004E44 BF10000000              	mov rdi, 8 * 2	; new rib
  7971 00004E49 E876360100              	call malloc
  7972 00004E4E 50                      	push rax
  7973 00004E4F BF10000000              	mov rdi, 8 * 2	; extended env
  7974 00004E54 E86B360100              	call malloc
  7975 00004E59 488B7D10                	mov rdi, ENV
  7976 00004E5D BE00000000              	mov rsi, 0
  7977 00004E62 BA01000000              	mov rdx, 1
  7978                                  .L_lambda_simple_env_loop_0a60:	; ext_env[i + 1] <-- env[i]
  7979 00004E67 4883FE01                	cmp rsi, 1
  7980 00004E6B 7410                    	je .L_lambda_simple_env_end_0a60
  7981 00004E6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7982 00004E71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7983 00004E75 48FFC6                  	inc rsi
  7984 00004E78 48FFC2                  	inc rdx
  7985 00004E7B EBEA                    	jmp .L_lambda_simple_env_loop_0a60
  7986                                  .L_lambda_simple_env_end_0a60:
  7987 00004E7D 5B                      	pop rbx
  7988 00004E7E BE00000000              	mov rsi, 0
  7989                                  .L_lambda_simple_params_loop_0a60:	; copy params
  7990 00004E83 4883FE02                	cmp rsi, 2
  7991 00004E87 740E                    	je .L_lambda_simple_params_end_0a60
  7992 00004E89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7993 00004E8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7994 00004E92 48FFC6                  	inc rsi
  7995 00004E95 EBEC                    	jmp .L_lambda_simple_params_loop_0a60
  7996                                  .L_lambda_simple_params_end_0a60:
  7997 00004E97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7998 00004E9A 4889C3                  	mov rbx, rax
  7999 00004E9D 58                      	pop rax
  8000 00004E9E C60004                  	mov byte [rax], T_closure
  8001 00004EA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8002 00004EA5 48C74009[B24E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a60
  8003 00004EAD E99C010000              	jmp .L_lambda_simple_end_0a60
  8004                                  .L_lambda_simple_code_0a60:	; lambda-simple body
  8005 00004EB2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8006 00004EB8 740B                    	je .L_lambda_simple_arity_check_ok_0a60
  8007 00004EBA FF742410                	push qword [rsp + 8 * 2]
  8008 00004EBE 6A02                    	push 2
  8009 00004EC0 E9B8350100              	jmp L_error_incorrect_arity_simple
  8010                                  .L_lambda_simple_arity_check_ok_0a60:
  8011 00004EC5 C8000000                	enter 0, 0
  8012                                  	; preparing a non-tail-call
  8013                                  	; preparing a non-tail-call
  8014 00004EC9 488B4528                	mov rax, PARAM(1)	; param s
  8015 00004ECD 50                      	push rax
  8016 00004ECE 6A01                    	push 1	; arg count
  8017 00004ED0 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  8018 00004ED8 803805                  	cmp byte [rax], T_undefined
  8019 00004EDB 0F84B6340100            	je L_error_fvar_undefined
  8020 00004EE1 803804                  	cmp byte [rax], T_closure
  8021 00004EE4 0F8531350100            	jne L_error_non_closure
  8022 00004EEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8023 00004EED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8024 00004EF0 50                      	push rax
  8025 00004EF1 6A01                    	push 1	; arg count
  8026 00004EF3 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  8027 00004EFB 803805                  	cmp byte [rax], T_undefined
  8028 00004EFE 0F8493340100            	je L_error_fvar_undefined
  8029 00004F04 803804                  	cmp byte [rax], T_closure
  8030 00004F07 0F850E350100            	jne L_error_non_closure
  8031 00004F0D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8032 00004F10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8033 00004F13 483D[02000000]          	cmp rax, sob_boolean_false
  8034 00004F19 740F                    	je .L_if_else_07b6
  8035 00004F1B 48B8-                   	mov rax, L_constants + 1
  8035 00004F1D [0100000000000000] 
  8036 00004F25 E920010000              	jmp .L_if_end_07b6
  8037                                  .L_if_else_07b6:
  8038                                  	; preparing a tail-call
  8039                                  	; preparing a non-tail-call
  8040                                  	; preparing a non-tail-call
  8041 00004F2A 488B4528                	mov rax, PARAM(1)	; param s
  8042 00004F2E 50                      	push rax
  8043 00004F2F 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  8044 00004F37 803805                  	cmp byte [rax], T_undefined
  8045 00004F3A 0F8457340100            	je L_error_fvar_undefined
  8046 00004F40 50                      	push rax
  8047 00004F41 6A02                    	push 2	; arg count
  8048 00004F43 488B4510                	mov rax, ENV
  8049 00004F47 488B00                  	mov rax, qword [rax + 8 * 0]
  8050 00004F4A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  8051 00004F4D 488B00                  	mov rax, qword [rax]
  8052 00004F50 803804                  	cmp byte [rax], T_closure
  8053 00004F53 0F85C2340100            	jne L_error_non_closure
  8054 00004F59 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8055 00004F5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8056 00004F5F 50                      	push rax
  8057 00004F60 488B4520                	mov rax, PARAM(0)	; param f
  8058 00004F64 50                      	push rax
  8059 00004F65 6A02                    	push 2	; arg count
  8060 00004F67 488B4510                	mov rax, ENV
  8061 00004F6B 488B00                  	mov rax, qword [rax + 8 * 0]
  8062 00004F6E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8063 00004F72 488B00                  	mov rax, qword [rax]
  8064 00004F75 803804                  	cmp byte [rax], T_closure
  8065 00004F78 0F859D340100            	jne L_error_non_closure
  8066 00004F7E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8067 00004F81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8068 00004F84 50                      	push rax
  8069                                  	; preparing a non-tail-call
  8070                                  	; preparing a non-tail-call
  8071 00004F85 488B4528                	mov rax, PARAM(1)	; param s
  8072 00004F89 50                      	push rax
  8073 00004F8A 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  8074 00004F92 803805                  	cmp byte [rax], T_undefined
  8075 00004F95 0F84FC330100            	je L_error_fvar_undefined
  8076 00004F9B 50                      	push rax
  8077 00004F9C 6A02                    	push 2	; arg count
  8078 00004F9E 488B4510                	mov rax, ENV
  8079 00004FA2 488B00                  	mov rax, qword [rax + 8 * 0]
  8080 00004FA5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var map1
  8081 00004FA8 488B00                  	mov rax, qword [rax]
  8082 00004FAB 803804                  	cmp byte [rax], T_closure
  8083 00004FAE 0F8567340100            	jne L_error_non_closure
  8084 00004FB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8085 00004FB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8086 00004FBA 50                      	push rax
  8087 00004FBB 488B4520                	mov rax, PARAM(0)	; param f
  8088 00004FBF 50                      	push rax
  8089 00004FC0 6A02                    	push 2	; arg count
  8090 00004FC2 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  8091 00004FCA 803805                  	cmp byte [rax], T_undefined
  8092 00004FCD 0F84C4330100            	je L_error_fvar_undefined
  8093 00004FD3 803804                  	cmp byte [rax], T_closure
  8094 00004FD6 0F853F340100            	jne L_error_non_closure
  8095 00004FDC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8096 00004FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8097 00004FE2 50                      	push rax
  8098 00004FE3 6A02                    	push 2	; arg count
  8099 00004FE5 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  8100 00004FED 803805                  	cmp byte [rax], T_undefined
  8101 00004FF0 0F84A1330100            	je L_error_fvar_undefined
  8102 00004FF6 803804                  	cmp byte [rax], T_closure
  8103 00004FF9 0F851C340100            	jne L_error_non_closure
  8104 00004FFF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8105 00005002 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8106 00005005 FF7500                  	push qword[rbp]
  8107 00005008 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8108 0000500B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8109 0000500F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8110 00005013 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8111 00005017 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8112 0000501A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8113 0000501D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8114 00005022 4983C103                	add r9, 3 	 ;for getting to the params
  8115 00005026 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8116 0000502A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8117                                  .L_tc_recycle_frame_loop_0e71:
  8118 0000502D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8119 00005030 7410                    	je .L_tc_recycle_frame_done_0e71
  8120 00005032 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8121 00005035 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8122 00005038 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8123 0000503C 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8124 00005040 EBEB                    	jmp .L_tc_recycle_frame_loop_0e71
  8125                                  .L_tc_recycle_frame_done_0e71:
  8126 00005042 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8127 00005043 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8128 00005047 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8129                                  .L_if_end_07b6:
  8130 0000504A C9                      	leave
  8131 0000504B C22000                  	ret AND_KILL_FRAME(2)
  8132                                  .L_lambda_simple_end_0a60:	; new closure is in rax
  8133 0000504E 50                      	push rax
  8134 0000504F 488B4528                	mov rax, PARAM(1)	; param map-list
  8135 00005053 8F00                    	pop qword [rax]
  8136 00005055 48B8-                   	mov rax, sob_void
  8136 00005057 [0000000000000000] 
  8137                                  
  8138 0000505F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8139 00005064 E85B340100              	call malloc
  8140 00005069 50                      	push rax
  8141 0000506A BF10000000              	mov rdi, 8 * 2	; new rib
  8142 0000506F E850340100              	call malloc
  8143 00005074 50                      	push rax
  8144 00005075 BF10000000              	mov rdi, 8 * 2	; extended env
  8145 0000507A E845340100              	call malloc
  8146 0000507F 488B7D10                	mov rdi, ENV
  8147 00005083 BE00000000              	mov rsi, 0
  8148 00005088 BA01000000              	mov rdx, 1
  8149                                  .L_lambda_opt_env_loop_0144:	; ext_env[i + 1] <-- env[i]
  8150 0000508D 4883FE01                	cmp rsi, 1
  8151 00005091 7410                    	je .L_lambda_opt_env_end_0144
  8152 00005093 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8153 00005097 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8154 0000509B 48FFC6                  	inc rsi
  8155 0000509E 48FFC2                  	inc rdx
  8156 000050A1 EBEA                    	jmp .L_lambda_opt_env_loop_0144
  8157                                  .L_lambda_opt_env_end_0144:
  8158 000050A3 5B                      	pop rbx
  8159 000050A4 BE00000000              	mov rsi, 0
  8160                                  .L_lambda_opt_params_loop_0144:	; copy params
  8161 000050A9 4883FE02                	cmp rsi, 2
  8162 000050AD 740E                    	je .L_lambda_opt_params_end_0144
  8163 000050AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8164 000050B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8165 000050B8 48FFC6                  	inc rsi
  8166 000050BB EBEC                    	jmp .L_lambda_opt_params_loop_0144
  8167                                  .L_lambda_opt_params_end_0144:
  8168 000050BD 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  8169 000050C0 4889C3                  	mov rbx, rax
  8170 000050C3 58                      	pop rax
  8171 000050C4 C60004                  	mov byte [rax], T_closure
  8172 000050C7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8173 000050CB 48C74009[D8500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0144
  8174 000050D3 E97F020000              	jmp .L_lambda_opt_end_0144
  8175                                  .L_lambda_opt_code_0144:	; lambda-opt body
  8176 000050D8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8177 000050DE 7411                    	je .L_lambda_opt_arity_check_exact_0144
  8178 000050E0 0F8FFB000000            	jg .L_lambda_opt_arity_check_more_0144
  8179 000050E6 FF742410                	push qword [rsp + 8 * 2]
  8180 000050EA 6A01                    	push 1
  8181 000050EC E9A0330100              	jmp L_error_incorrect_arity_opt
  8182                                  .L_lambda_opt_arity_check_exact_0144:
  8183 000050F1 4883EC08                	sub rsp, 8
  8184 000050F5 488B442408              	mov rax, qword[rsp + 8 *1]
  8185 000050FA 48890424                	mov qword[rsp], rax  
  8186 000050FE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8187 00005103 4889442408              	mov qword[rsp + 8 * 1], rax
  8188 00005108 B802000000              	mov rax, 2
  8189 0000510D 4889442410              	mov qword[rsp + 8 *2], rax
  8190 00005112 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  8191 00005117 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8192 0000511C 48B8-                   	mov rax, sob_nil
  8192 0000511E [0100000000000000] 
  8193 00005126 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  8194 0000512B C8000000                	enter 0, 0
  8195                                  	; preparing a non-tail-call
  8196 0000512F 488B4528                	mov rax, PARAM(1)	; param s
  8197 00005133 50                      	push rax
  8198 00005134 6A01                    	push 1	; arg count
  8199 00005136 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  8200 0000513E 803805                  	cmp byte [rax], T_undefined
  8201 00005141 0F8450320100            	je L_error_fvar_undefined
  8202 00005147 803804                  	cmp byte [rax], T_closure
  8203 0000514A 0F85CB320100            	jne L_error_non_closure
  8204 00005150 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8205 00005153 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8206 00005156 483D[02000000]          	cmp rax, sob_boolean_false
  8207 0000515C 740C                    	je .L_if_else_07b8
  8208 0000515E 48B8-                   	mov rax, L_constants + 1
  8208 00005160 [0100000000000000] 
  8209 00005168 EB6E                    	jmp .L_if_end_07b8
  8210                                  .L_if_else_07b8:
  8211                                  	; preparing a tail-call
  8212 0000516A 488B4528                	mov rax, PARAM(1)	; param s
  8213 0000516E 50                      	push rax
  8214 0000516F 488B4520                	mov rax, PARAM(0)	; param f
  8215 00005173 50                      	push rax
  8216 00005174 6A02                    	push 2	; arg count
  8217 00005176 488B4510                	mov rax, ENV
  8218 0000517A 488B00                  	mov rax, qword [rax + 8 * 0]
  8219 0000517D 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8220 00005181 488B00                  	mov rax, qword [rax]
  8221 00005184 803804                  	cmp byte [rax], T_closure
  8222 00005187 0F858E320100            	jne L_error_non_closure
  8223 0000518D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8224 00005190 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8225 00005193 FF7500                  	push qword[rbp]
  8226 00005196 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8227 00005199 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8228 0000519D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8229 000051A1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8230 000051A5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8231 000051A8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8232 000051AB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8233 000051B0 4983C103                	add r9, 3 	 ;for getting to the params
  8234 000051B4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8235 000051B8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8236                                  .L_tc_recycle_frame_loop_0e73:
  8237 000051BB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8238 000051BE 7410                    	je .L_tc_recycle_frame_done_0e73
  8239 000051C0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8240 000051C3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8241 000051C6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8242 000051CA 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8243 000051CE EBEB                    	jmp .L_tc_recycle_frame_loop_0e73
  8244                                  .L_tc_recycle_frame_done_0e73:
  8245 000051D0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8246 000051D1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8247 000051D5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8248                                  .L_if_end_07b8:
  8249 000051D8 C9                      	leave
  8250 000051D9 C22000                  	ret AND_KILL_FRAME(2)
  8251 000051DC E976010000              	jmp .L_lambda_opt_end_0144	; new closure is in rax
  8252                                  .L_lambda_opt_arity_check_more_0144:
  8253 000051E1 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  8254 000051E6 49B9-                   	mov r9, sob_nil
  8254 000051E8 [0100000000000000] 
  8255 000051F0 4889E3                  	mov rbx, rsp 
  8256 000051F3 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  8257 000051F7 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  8258 000051FA 49C1E003                	shl r8, 3
  8259 000051FE 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  8260 00005201 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  8261                                  .L_lambda_opt_stack_shrink_loop_0144:
  8262 00005206 4983F801                	cmp r8, 1
  8263 0000520A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0144
  8264 0000520C BF11000000              	mov rdi, 1+8+8 ;for pair
  8265 00005211 E8AE320100              	call malloc;to create the pair in the stack
  8266 00005216 C60021                  	mov byte [rax], T_pair ; to make it a pair
  8267 00005219 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  8268 0000521C 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  8269 00005220 4C894809                 	mov qword[rax+1+8],r9
  8270 00005224 4989C1                  	mov r9, rax ;for the recursion 
  8271 00005227 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  8272 0000522A 4883EB08                	sub rbx, 8 ;to get the next param to copy
  8273 0000522E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0144
  8274                                  .L_lambda_opt_stack_shrink_loop_exit_0144:
  8275 00005230 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  8276 00005235 4883E902                	sub rcx, 2
  8277 00005239 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  8278 0000523D 4801CC                  	add rsp, rcx ;shrinking the stack
  8279 00005240 4889E0                  	mov rax, rsp
  8280 00005243 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  8281 00005246 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  8282 0000524A 49FFC8                  	dec r8 ;we start with param 0, not 1 
  8283 0000524D 4883C018                	add rax, 3 * 8;now rax is param 0
  8284 00005251 49C1E003                	shl r8, 3;convert to byte
  8285 00005255 4C01C0                  	add rax, r8;now rax is the top of the stack
  8286 00005258 4C8908                  	mov qword[rax], r9;puting the list at the top
  8287 0000525B 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  8288 0000525F 4889E3                  	mov rbx, rsp 
  8289 00005262 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  8290 00005265 41BA01000000            	mov r10, 1;r10 is the not opt params length
  8291 0000526B 49FFCA                  	dec r10 
  8292 0000526E 49C1E203                	shl r10, 3;to get bytes
  8293 00005272 4883C318                	add rbx, 3*8;rbx is the first param
  8294 00005276 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  8295 00005279 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  8296 0000527C 4C8900                  	mov qword[rax], r8
  8297 0000527F 4883E808                	sub rax, 8
  8298 00005283 4883EB08                	sub rbx, 8
  8299 00005287 4889E0                  	mov rax, rsp
  8300 0000528A 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  8301 0000528D 48C744241002000000      	mov qword [rsp+2*8], 2
  8302 00005296 488B5808                	mov rbx, qword[rax + 8 *1]
  8303 0000529A 48895C2408              	mov qword [rsp + 1*8] ,rbx
  8304 0000529F 488B18                  	mov rbx, qword[rax]
  8305 000052A2 48891C24                	mov qword [rsp], rbx
  8306 000052A6 C8000000                	enter 0, 0
  8307                                  	; preparing a non-tail-call
  8308 000052AA 488B4528                	mov rax, PARAM(1)	; param s
  8309 000052AE 50                      	push rax
  8310 000052AF 6A01                    	push 1	; arg count
  8311 000052B1 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  8312 000052B9 803805                  	cmp byte [rax], T_undefined
  8313 000052BC 0F84D5300100            	je L_error_fvar_undefined
  8314 000052C2 803804                  	cmp byte [rax], T_closure
  8315 000052C5 0F8550310100            	jne L_error_non_closure
  8316 000052CB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8317 000052CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8318 000052D1 483D[02000000]          	cmp rax, sob_boolean_false
  8319 000052D7 740C                    	je .L_if_else_07b7
  8320 000052D9 48B8-                   	mov rax, L_constants + 1
  8320 000052DB [0100000000000000] 
  8321 000052E3 EB6E                    	jmp .L_if_end_07b7
  8322                                  .L_if_else_07b7:
  8323                                  	; preparing a tail-call
  8324 000052E5 488B4528                	mov rax, PARAM(1)	; param s
  8325 000052E9 50                      	push rax
  8326 000052EA 488B4520                	mov rax, PARAM(0)	; param f
  8327 000052EE 50                      	push rax
  8328 000052EF 6A02                    	push 2	; arg count
  8329 000052F1 488B4510                	mov rax, ENV
  8330 000052F5 488B00                  	mov rax, qword [rax + 8 * 0]
  8331 000052F8 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var map-list
  8332 000052FC 488B00                  	mov rax, qword [rax]
  8333 000052FF 803804                  	cmp byte [rax], T_closure
  8334 00005302 0F8513310100            	jne L_error_non_closure
  8335 00005308 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8336 0000530B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8337 0000530E FF7500                  	push qword[rbp]
  8338 00005311 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8339 00005314 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8340 00005318 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8341 0000531C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8342 00005320 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8343 00005323 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8344 00005326 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8345 0000532B 4983C103                	add r9, 3 	 ;for getting to the params
  8346 0000532F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8347 00005333 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8348                                  .L_tc_recycle_frame_loop_0e72:
  8349 00005336 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8350 00005339 7410                    	je .L_tc_recycle_frame_done_0e72
  8351 0000533B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8352 0000533E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8353 00005341 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8354 00005345 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8355 00005349 EBEB                    	jmp .L_tc_recycle_frame_loop_0e72
  8356                                  .L_tc_recycle_frame_done_0e72:
  8357 0000534B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8358 0000534C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8359 00005350 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8360                                  .L_if_end_07b7:
  8361 00005353 C9                      	leave
  8362 00005354 C22000                  	ret AND_KILL_FRAME(2)
  8363                                  .L_lambda_opt_end_0144:	; new closure is in rax
  8364 00005357 C9                      	leave
  8365 00005358 C22000                  	ret AND_KILL_FRAME(2)
  8366                                  .L_lambda_simple_end_0a5e:	; new closure is in rax
  8367 0000535B 803804                  	cmp byte [rax], T_closure
  8368 0000535E 0F85B7300100            	jne L_error_non_closure
  8369 00005364 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8370 00005367 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8371 0000536A 48890425[11160000]      	mov qword [free_var_103], rax
  8372 00005372 48B8-                   	mov rax, sob_void
  8372 00005374 [0000000000000000] 
  8373                                  
  8374 0000537C 4889C7                  	mov rdi, rax
  8375 0000537F E895330100              	call print_sexpr_if_not_void
  8376 00005384 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8377 00005389 E836310100              	call malloc
  8378 0000538E 50                      	push rax
  8379 0000538F BF00000000              	mov rdi, 8 * 0	; new rib
  8380 00005394 E82B310100              	call malloc
  8381 00005399 50                      	push rax
  8382 0000539A BF08000000              	mov rdi, 8 * 1	; extended env
  8383 0000539F E820310100              	call malloc
  8384 000053A4 488B7D10                	mov rdi, ENV
  8385 000053A8 BE00000000              	mov rsi, 0
  8386 000053AD BA01000000              	mov rdx, 1
  8387                                  .L_lambda_simple_env_loop_0a61:	; ext_env[i + 1] <-- env[i]
  8388 000053B2 4883FE00                	cmp rsi, 0
  8389 000053B6 7410                    	je .L_lambda_simple_env_end_0a61
  8390 000053B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8391 000053BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8392 000053C0 48FFC6                  	inc rsi
  8393 000053C3 48FFC2                  	inc rdx
  8394 000053C6 EBEA                    	jmp .L_lambda_simple_env_loop_0a61
  8395                                  .L_lambda_simple_env_end_0a61:
  8396 000053C8 5B                      	pop rbx
  8397 000053C9 BE00000000              	mov rsi, 0
  8398                                  .L_lambda_simple_params_loop_0a61:	; copy params
  8399 000053CE 4883FE00                	cmp rsi, 0
  8400 000053D2 740E                    	je .L_lambda_simple_params_end_0a61
  8401 000053D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8402 000053D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8403 000053DD 48FFC6                  	inc rsi
  8404 000053E0 EBEC                    	jmp .L_lambda_simple_params_loop_0a61
  8405                                  .L_lambda_simple_params_end_0a61:
  8406 000053E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8407 000053E5 4889C3                  	mov rbx, rax
  8408 000053E8 58                      	pop rax
  8409 000053E9 C60004                  	mov byte [rax], T_closure
  8410 000053EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8411 000053F0 48C74009[FD530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a61
  8412 000053F8 E998010000              	jmp .L_lambda_simple_end_0a61
  8413                                  .L_lambda_simple_code_0a61:	; lambda-simple body
  8414 000053FD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8415 00005403 740B                    	je .L_lambda_simple_arity_check_ok_0a61
  8416 00005405 FF742410                	push qword [rsp + 8 * 2]
  8417 00005409 6A01                    	push 1
  8418 0000540B E96D300100              	jmp L_error_incorrect_arity_simple
  8419                                  .L_lambda_simple_arity_check_ok_0a61:
  8420 00005410 C8000000                	enter 0, 0
  8421                                  	; preparing a tail-call
  8422 00005414 488B4520                	mov rax, PARAM(0)	; param s
  8423 00005418 50                      	push rax
  8424 00005419 48B8-                   	mov rax, L_constants + 1
  8424 0000541B [0100000000000000] 
  8425 00005423 50                      	push rax
  8426 00005424 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8427 00005429 E896300100              	call malloc
  8428 0000542E 50                      	push rax
  8429 0000542F BF08000000              	mov rdi, 8 * 1	; new rib
  8430 00005434 E88B300100              	call malloc
  8431 00005439 50                      	push rax
  8432 0000543A BF10000000              	mov rdi, 8 * 2	; extended env
  8433 0000543F E880300100              	call malloc
  8434 00005444 488B7D10                	mov rdi, ENV
  8435 00005448 BE00000000              	mov rsi, 0
  8436 0000544D BA01000000              	mov rdx, 1
  8437                                  .L_lambda_simple_env_loop_0a62:	; ext_env[i + 1] <-- env[i]
  8438 00005452 4883FE01                	cmp rsi, 1
  8439 00005456 7410                    	je .L_lambda_simple_env_end_0a62
  8440 00005458 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8441 0000545C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8442 00005460 48FFC6                  	inc rsi
  8443 00005463 48FFC2                  	inc rdx
  8444 00005466 EBEA                    	jmp .L_lambda_simple_env_loop_0a62
  8445                                  .L_lambda_simple_env_end_0a62:
  8446 00005468 5B                      	pop rbx
  8447 00005469 BE00000000              	mov rsi, 0
  8448                                  .L_lambda_simple_params_loop_0a62:	; copy params
  8449 0000546E 4883FE01                	cmp rsi, 1
  8450 00005472 740E                    	je .L_lambda_simple_params_end_0a62
  8451 00005474 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8452 00005479 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8453 0000547D 48FFC6                  	inc rsi
  8454 00005480 EBEC                    	jmp .L_lambda_simple_params_loop_0a62
  8455                                  .L_lambda_simple_params_end_0a62:
  8456 00005482 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8457 00005485 4889C3                  	mov rbx, rax
  8458 00005488 58                      	pop rax
  8459 00005489 C60004                  	mov byte [rax], T_closure
  8460 0000548C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8461 00005490 48C74009[9D540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a62
  8462 00005498 E98C000000              	jmp .L_lambda_simple_end_0a62
  8463                                  .L_lambda_simple_code_0a62:	; lambda-simple body
  8464 0000549D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8465 000054A3 740B                    	je .L_lambda_simple_arity_check_ok_0a62
  8466 000054A5 FF742410                	push qword [rsp + 8 * 2]
  8467 000054A9 6A02                    	push 2
  8468 000054AB E9CD2F0100              	jmp L_error_incorrect_arity_simple
  8469                                  .L_lambda_simple_arity_check_ok_0a62:
  8470 000054B0 C8000000                	enter 0, 0
  8471                                  	; preparing a tail-call
  8472 000054B4 488B4520                	mov rax, PARAM(0)	; param r
  8473 000054B8 50                      	push rax
  8474 000054B9 488B4528                	mov rax, PARAM(1)	; param a
  8475 000054BD 50                      	push rax
  8476 000054BE 6A02                    	push 2	; arg count
  8477 000054C0 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  8478 000054C8 803805                  	cmp byte [rax], T_undefined
  8479 000054CB 0F84C62E0100            	je L_error_fvar_undefined
  8480 000054D1 803804                  	cmp byte [rax], T_closure
  8481 000054D4 0F85412F0100            	jne L_error_non_closure
  8482 000054DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8483 000054DD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8484 000054E0 FF7500                  	push qword[rbp]
  8485 000054E3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8486 000054E6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8487 000054EA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8488 000054EE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8489 000054F2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8490 000054F5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8491 000054F8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8492 000054FD 4983C103                	add r9, 3 	 ;for getting to the params
  8493 00005501 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8494 00005505 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8495                                  .L_tc_recycle_frame_loop_0e74:
  8496 00005508 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8497 0000550B 7410                    	je .L_tc_recycle_frame_done_0e74
  8498 0000550D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8499 00005510 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8500 00005513 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8501 00005517 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8502 0000551B EBEB                    	jmp .L_tc_recycle_frame_loop_0e74
  8503                                  .L_tc_recycle_frame_done_0e74:
  8504 0000551D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8505 0000551E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8506 00005522 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8507 00005525 C9                      	leave
  8508 00005526 C22000                  	ret AND_KILL_FRAME(2)
  8509                                  .L_lambda_simple_end_0a62:	; new closure is in rax
  8510 00005529 50                      	push rax
  8511 0000552A 6A03                    	push 3	; arg count
  8512 0000552C 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
  8513 00005534 803805                  	cmp byte [rax], T_undefined
  8514 00005537 0F845A2E0100            	je L_error_fvar_undefined
  8515 0000553D 803804                  	cmp byte [rax], T_closure
  8516 00005540 0F85D52E0100            	jne L_error_non_closure
  8517 00005546 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8518 00005549 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8519 0000554C FF7500                  	push qword[rbp]
  8520 0000554F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8521 00005552 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8522 00005556 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8523 0000555A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8524 0000555E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8525 00005561 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8526 00005564 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8527 00005569 4983C103                	add r9, 3 	 ;for getting to the params
  8528 0000556D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8529 00005571 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8530                                  .L_tc_recycle_frame_loop_0e75:
  8531 00005574 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8532 00005577 7410                    	je .L_tc_recycle_frame_done_0e75
  8533 00005579 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8534 0000557C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8535 0000557F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8536 00005583 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8537 00005587 EBEB                    	jmp .L_tc_recycle_frame_loop_0e75
  8538                                  .L_tc_recycle_frame_done_0e75:
  8539 00005589 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8540 0000558A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8541 0000558E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8542 00005591 C9                      	leave
  8543 00005592 C21800                  	ret AND_KILL_FRAME(1)
  8544                                  .L_lambda_simple_end_0a61:	; new closure is in rax
  8545 00005595 48890425[10170000]      	mov qword [free_var_118], rax
  8546 0000559D 48B8-                   	mov rax, sob_void
  8546 0000559F [0000000000000000] 
  8547                                  
  8548 000055A7 4889C7                  	mov rdi, rax
  8549 000055AA E86A310100              	call print_sexpr_if_not_void
  8550                                  	; preparing a non-tail-call
  8551 000055AF 48B8-                   	mov rax, L_constants + 1993
  8551 000055B1 [C907000000000000] 
  8552 000055B9 50                      	push rax
  8553 000055BA 48B8-                   	mov rax, L_constants + 1993
  8553 000055BC [C907000000000000] 
  8554 000055C4 50                      	push rax
  8555 000055C5 6A02                    	push 2	; arg count
  8556 000055C7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8557 000055CC E8F32E0100              	call malloc
  8558 000055D1 50                      	push rax
  8559 000055D2 BF00000000              	mov rdi, 8 * 0	; new rib
  8560 000055D7 E8E82E0100              	call malloc
  8561 000055DC 50                      	push rax
  8562 000055DD BF08000000              	mov rdi, 8 * 1	; extended env
  8563 000055E2 E8DD2E0100              	call malloc
  8564 000055E7 488B7D10                	mov rdi, ENV
  8565 000055EB BE00000000              	mov rsi, 0
  8566 000055F0 BA01000000              	mov rdx, 1
  8567                                  .L_lambda_simple_env_loop_0a63:	; ext_env[i + 1] <-- env[i]
  8568 000055F5 4883FE00                	cmp rsi, 0
  8569 000055F9 7410                    	je .L_lambda_simple_env_end_0a63
  8570 000055FB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8571 000055FF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8572 00005603 48FFC6                  	inc rsi
  8573 00005606 48FFC2                  	inc rdx
  8574 00005609 EBEA                    	jmp .L_lambda_simple_env_loop_0a63
  8575                                  .L_lambda_simple_env_end_0a63:
  8576 0000560B 5B                      	pop rbx
  8577 0000560C BE00000000              	mov rsi, 0
  8578                                  .L_lambda_simple_params_loop_0a63:	; copy params
  8579 00005611 4883FE00                	cmp rsi, 0
  8580 00005615 740E                    	je .L_lambda_simple_params_end_0a63
  8581 00005617 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8582 0000561C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8583 00005620 48FFC6                  	inc rsi
  8584 00005623 EBEC                    	jmp .L_lambda_simple_params_loop_0a63
  8585                                  .L_lambda_simple_params_end_0a63:
  8586 00005625 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8587 00005628 4889C3                  	mov rbx, rax
  8588 0000562B 58                      	pop rax
  8589 0000562C C60004                  	mov byte [rax], T_closure
  8590 0000562F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8591 00005633 48C74009[40560000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a63
  8592 0000563B E937070000              	jmp .L_lambda_simple_end_0a63
  8593                                  .L_lambda_simple_code_0a63:	; lambda-simple body
  8594 00005640 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8595 00005646 740B                    	je .L_lambda_simple_arity_check_ok_0a63
  8596 00005648 FF742410                	push qword [rsp + 8 * 2]
  8597 0000564C 6A02                    	push 2
  8598 0000564E E92A2E0100              	jmp L_error_incorrect_arity_simple
  8599                                  .L_lambda_simple_arity_check_ok_0a63:
  8600 00005653 C8000000                	enter 0, 0
  8601 00005657 BF08000000              	mov rdi, 8*1
  8602 0000565C E8632E0100              	call malloc
  8603 00005661 488B5D20                	mov rbx, PARAM(0)
  8604 00005665 488918                  	mov qword[rax], rbx
  8605 00005668 48894520                	mov PARAM(0), rax
  8606 0000566C 48B8-                   	mov rax, sob_void
  8606 0000566E [0000000000000000] 
  8607                                  
  8608 00005676 BF08000000              	mov rdi, 8*1
  8609 0000567B E8442E0100              	call malloc
  8610 00005680 488B5D28                	mov rbx, PARAM(1)
  8611 00005684 488918                  	mov qword[rax], rbx
  8612 00005687 48894528                	mov PARAM(1), rax
  8613 0000568B 48B8-                   	mov rax, sob_void
  8613 0000568D [0000000000000000] 
  8614                                  
  8615 00005695 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8616 0000569A E8252E0100              	call malloc
  8617 0000569F 50                      	push rax
  8618 000056A0 BF10000000              	mov rdi, 8 * 2	; new rib
  8619 000056A5 E81A2E0100              	call malloc
  8620 000056AA 50                      	push rax
  8621 000056AB BF10000000              	mov rdi, 8 * 2	; extended env
  8622 000056B0 E80F2E0100              	call malloc
  8623 000056B5 488B7D10                	mov rdi, ENV
  8624 000056B9 BE00000000              	mov rsi, 0
  8625 000056BE BA01000000              	mov rdx, 1
  8626                                  .L_lambda_simple_env_loop_0a64:	; ext_env[i + 1] <-- env[i]
  8627 000056C3 4883FE01                	cmp rsi, 1
  8628 000056C7 7410                    	je .L_lambda_simple_env_end_0a64
  8629 000056C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8630 000056CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8631 000056D1 48FFC6                  	inc rsi
  8632 000056D4 48FFC2                  	inc rdx
  8633 000056D7 EBEA                    	jmp .L_lambda_simple_env_loop_0a64
  8634                                  .L_lambda_simple_env_end_0a64:
  8635 000056D9 5B                      	pop rbx
  8636 000056DA BE00000000              	mov rsi, 0
  8637                                  .L_lambda_simple_params_loop_0a64:	; copy params
  8638 000056DF 4883FE02                	cmp rsi, 2
  8639 000056E3 740E                    	je .L_lambda_simple_params_end_0a64
  8640 000056E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8641 000056EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8642 000056EE 48FFC6                  	inc rsi
  8643 000056F1 EBEC                    	jmp .L_lambda_simple_params_loop_0a64
  8644                                  .L_lambda_simple_params_end_0a64:
  8645 000056F3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8646 000056F6 4889C3                  	mov rbx, rax
  8647 000056F9 58                      	pop rax
  8648 000056FA C60004                  	mov byte [rax], T_closure
  8649 000056FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8650 00005701 48C74009[0E570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a64
  8651 00005709 E92B010000              	jmp .L_lambda_simple_end_0a64
  8652                                  .L_lambda_simple_code_0a64:	; lambda-simple body
  8653 0000570E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8654 00005714 740B                    	je .L_lambda_simple_arity_check_ok_0a64
  8655 00005716 FF742410                	push qword [rsp + 8 * 2]
  8656 0000571A 6A02                    	push 2
  8657 0000571C E95C2D0100              	jmp L_error_incorrect_arity_simple
  8658                                  .L_lambda_simple_arity_check_ok_0a64:
  8659 00005721 C8000000                	enter 0, 0
  8660                                  	; preparing a non-tail-call
  8661 00005725 488B4528                	mov rax, PARAM(1)	; param sr
  8662 00005729 50                      	push rax
  8663 0000572A 6A01                    	push 1	; arg count
  8664 0000572C 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  8665 00005734 803805                  	cmp byte [rax], T_undefined
  8666 00005737 0F845A2C0100            	je L_error_fvar_undefined
  8667 0000573D 803804                  	cmp byte [rax], T_closure
  8668 00005740 0F85D52C0100            	jne L_error_non_closure
  8669 00005746 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8670 00005749 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8671 0000574C 483D[02000000]          	cmp rax, sob_boolean_false
  8672 00005752 7409                    	je .L_if_else_07b9
  8673 00005754 488B4520                	mov rax, PARAM(0)	; param s1
  8674 00005758 E9D8000000              	jmp .L_if_end_07b9
  8675                                  .L_if_else_07b9:
  8676                                  	; preparing a tail-call
  8677                                  	; preparing a non-tail-call
  8678                                  	; preparing a non-tail-call
  8679 0000575D 488B4528                	mov rax, PARAM(1)	; param sr
  8680 00005761 50                      	push rax
  8681 00005762 6A01                    	push 1	; arg count
  8682 00005764 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  8683 0000576C 803805                  	cmp byte [rax], T_undefined
  8684 0000576F 0F84222C0100            	je L_error_fvar_undefined
  8685 00005775 803804                  	cmp byte [rax], T_closure
  8686 00005778 0F859D2C0100            	jne L_error_non_closure
  8687 0000577E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8688 00005781 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8689 00005784 50                      	push rax
  8690                                  	; preparing a non-tail-call
  8691 00005785 488B4528                	mov rax, PARAM(1)	; param sr
  8692 00005789 50                      	push rax
  8693 0000578A 6A01                    	push 1	; arg count
  8694 0000578C 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  8695 00005794 803805                  	cmp byte [rax], T_undefined
  8696 00005797 0F84FA2B0100            	je L_error_fvar_undefined
  8697 0000579D 803804                  	cmp byte [rax], T_closure
  8698 000057A0 0F85752C0100            	jne L_error_non_closure
  8699 000057A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8700 000057A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8701 000057AC 50                      	push rax
  8702 000057AD 6A02                    	push 2	; arg count
  8703 000057AF 488B4510                	mov rax, ENV
  8704 000057B3 488B00                  	mov rax, qword [rax + 8 * 0]
  8705 000057B6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8706 000057B9 488B00                  	mov rax, qword [rax]
  8707 000057BC 803804                  	cmp byte [rax], T_closure
  8708 000057BF 0F85562C0100            	jne L_error_non_closure
  8709 000057C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8710 000057C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8711 000057CB 50                      	push rax
  8712 000057CC 488B4520                	mov rax, PARAM(0)	; param s1
  8713 000057D0 50                      	push rax
  8714 000057D1 6A02                    	push 2	; arg count
  8715 000057D3 488B4510                	mov rax, ENV
  8716 000057D7 488B00                  	mov rax, qword [rax + 8 * 0]
  8717 000057DA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8718 000057DE 488B00                  	mov rax, qword [rax]
  8719 000057E1 803804                  	cmp byte [rax], T_closure
  8720 000057E4 0F85312C0100            	jne L_error_non_closure
  8721 000057EA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8722 000057ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8723 000057F0 FF7500                  	push qword[rbp]
  8724 000057F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8725 000057F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8726 000057FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8727 000057FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8728 00005802 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8729 00005805 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8730 00005808 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8731 0000580D 4983C103                	add r9, 3 	 ;for getting to the params
  8732 00005811 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8733 00005815 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8734                                  .L_tc_recycle_frame_loop_0e76:
  8735 00005818 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8736 0000581B 7410                    	je .L_tc_recycle_frame_done_0e76
  8737 0000581D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8738 00005820 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8739 00005823 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8740 00005827 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8741 0000582B EBEB                    	jmp .L_tc_recycle_frame_loop_0e76
  8742                                  .L_tc_recycle_frame_done_0e76:
  8743 0000582D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8744 0000582E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8745 00005832 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8746                                  .L_if_end_07b9:
  8747 00005835 C9                      	leave
  8748 00005836 C22000                  	ret AND_KILL_FRAME(2)
  8749                                  .L_lambda_simple_end_0a64:	; new closure is in rax
  8750 00005839 50                      	push rax
  8751 0000583A 488B4520                	mov rax, PARAM(0)	; param run-1
  8752 0000583E 8F00                    	pop qword [rax]
  8753 00005840 48B8-                   	mov rax, sob_void
  8753 00005842 [0000000000000000] 
  8754                                  
  8755 0000584A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8756 0000584F E8702C0100              	call malloc
  8757 00005854 50                      	push rax
  8758 00005855 BF10000000              	mov rdi, 8 * 2	; new rib
  8759 0000585A E8652C0100              	call malloc
  8760 0000585F 50                      	push rax
  8761 00005860 BF10000000              	mov rdi, 8 * 2	; extended env
  8762 00005865 E85A2C0100              	call malloc
  8763 0000586A 488B7D10                	mov rdi, ENV
  8764 0000586E BE00000000              	mov rsi, 0
  8765 00005873 BA01000000              	mov rdx, 1
  8766                                  .L_lambda_simple_env_loop_0a65:	; ext_env[i + 1] <-- env[i]
  8767 00005878 4883FE01                	cmp rsi, 1
  8768 0000587C 7410                    	je .L_lambda_simple_env_end_0a65
  8769 0000587E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8770 00005882 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8771 00005886 48FFC6                  	inc rsi
  8772 00005889 48FFC2                  	inc rdx
  8773 0000588C EBEA                    	jmp .L_lambda_simple_env_loop_0a65
  8774                                  .L_lambda_simple_env_end_0a65:
  8775 0000588E 5B                      	pop rbx
  8776 0000588F BE00000000              	mov rsi, 0
  8777                                  .L_lambda_simple_params_loop_0a65:	; copy params
  8778 00005894 4883FE02                	cmp rsi, 2
  8779 00005898 740E                    	je .L_lambda_simple_params_end_0a65
  8780 0000589A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8781 0000589F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8782 000058A3 48FFC6                  	inc rsi
  8783 000058A6 EBEC                    	jmp .L_lambda_simple_params_loop_0a65
  8784                                  .L_lambda_simple_params_end_0a65:
  8785 000058A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8786 000058AB 4889C3                  	mov rbx, rax
  8787 000058AE 58                      	pop rax
  8788 000058AF C60004                  	mov byte [rax], T_closure
  8789 000058B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8790 000058B6 48C74009[C3580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a65
  8791 000058BE E92F010000              	jmp .L_lambda_simple_end_0a65
  8792                                  .L_lambda_simple_code_0a65:	; lambda-simple body
  8793 000058C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8794 000058C9 740B                    	je .L_lambda_simple_arity_check_ok_0a65
  8795 000058CB FF742410                	push qword [rsp + 8 * 2]
  8796 000058CF 6A02                    	push 2
  8797 000058D1 E9A72B0100              	jmp L_error_incorrect_arity_simple
  8798                                  .L_lambda_simple_arity_check_ok_0a65:
  8799 000058D6 C8000000                	enter 0, 0
  8800                                  	; preparing a non-tail-call
  8801 000058DA 488B4520                	mov rax, PARAM(0)	; param s1
  8802 000058DE 50                      	push rax
  8803 000058DF 6A01                    	push 1	; arg count
  8804 000058E1 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  8805 000058E9 803805                  	cmp byte [rax], T_undefined
  8806 000058EC 0F84A52A0100            	je L_error_fvar_undefined
  8807 000058F2 803804                  	cmp byte [rax], T_closure
  8808 000058F5 0F85202B0100            	jne L_error_non_closure
  8809 000058FB FF7001                  	push SOB_CLOSURE_ENV(rax)
  8810 000058FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8811 00005901 483D[02000000]          	cmp rax, sob_boolean_false
  8812 00005907 7409                    	je .L_if_else_07ba
  8813 00005909 488B4528                	mov rax, PARAM(1)	; param s2
  8814 0000590D E9DC000000              	jmp .L_if_end_07ba
  8815                                  .L_if_else_07ba:
  8816                                  	; preparing a tail-call
  8817                                  	; preparing a non-tail-call
  8818 00005912 488B4528                	mov rax, PARAM(1)	; param s2
  8819 00005916 50                      	push rax
  8820                                  	; preparing a non-tail-call
  8821 00005917 488B4520                	mov rax, PARAM(0)	; param s1
  8822 0000591B 50                      	push rax
  8823 0000591C 6A01                    	push 1	; arg count
  8824 0000591E 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  8825 00005926 803805                  	cmp byte [rax], T_undefined
  8826 00005929 0F84682A0100            	je L_error_fvar_undefined
  8827 0000592F 803804                  	cmp byte [rax], T_closure
  8828 00005932 0F85E32A0100            	jne L_error_non_closure
  8829 00005938 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8830 0000593B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8831 0000593E 50                      	push rax
  8832 0000593F 6A02                    	push 2	; arg count
  8833 00005941 488B4510                	mov rax, ENV
  8834 00005945 488B00                  	mov rax, qword [rax + 8 * 0]
  8835 00005948 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var run-2
  8836 0000594C 488B00                  	mov rax, qword [rax]
  8837 0000594F 803804                  	cmp byte [rax], T_closure
  8838 00005952 0F85C32A0100            	jne L_error_non_closure
  8839 00005958 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8840 0000595B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8841 0000595E 50                      	push rax
  8842                                  	; preparing a non-tail-call
  8843 0000595F 488B4520                	mov rax, PARAM(0)	; param s1
  8844 00005963 50                      	push rax
  8845 00005964 6A01                    	push 1	; arg count
  8846 00005966 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  8847 0000596E 803805                  	cmp byte [rax], T_undefined
  8848 00005971 0F84202A0100            	je L_error_fvar_undefined
  8849 00005977 803804                  	cmp byte [rax], T_closure
  8850 0000597A 0F859B2A0100            	jne L_error_non_closure
  8851 00005980 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8852 00005983 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8853 00005986 50                      	push rax
  8854 00005987 6A02                    	push 2	; arg count
  8855 00005989 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  8856 00005991 803805                  	cmp byte [rax], T_undefined
  8857 00005994 0F84FD290100            	je L_error_fvar_undefined
  8858 0000599A 803804                  	cmp byte [rax], T_closure
  8859 0000599D 0F85782A0100            	jne L_error_non_closure
  8860 000059A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8861 000059A6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8862 000059A9 FF7500                  	push qword[rbp]
  8863 000059AC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  8864 000059AF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  8865 000059B3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  8866 000059B7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  8867 000059BB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  8868 000059BE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  8869 000059C1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  8870 000059C6 4983C103                	add r9, 3 	 ;for getting to the params
  8871 000059CA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  8872 000059CE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  8873                                  .L_tc_recycle_frame_loop_0e77:
  8874 000059D1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  8875 000059D4 7410                    	je .L_tc_recycle_frame_done_0e77
  8876 000059D6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  8877 000059D9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  8878 000059DC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  8879 000059E0 4983E808                	sub r8, 8	 ;move the top of the stack one down
  8880 000059E4 EBEB                    	jmp .L_tc_recycle_frame_loop_0e77
  8881                                  .L_tc_recycle_frame_done_0e77:
  8882 000059E6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  8883 000059E7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  8884 000059EB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8885                                  .L_if_end_07ba:
  8886 000059EE C9                      	leave
  8887 000059EF C22000                  	ret AND_KILL_FRAME(2)
  8888                                  .L_lambda_simple_end_0a65:	; new closure is in rax
  8889 000059F2 50                      	push rax
  8890 000059F3 488B4528                	mov rax, PARAM(1)	; param run-2
  8891 000059F7 8F00                    	pop qword [rax]
  8892 000059F9 48B8-                   	mov rax, sob_void
  8892 000059FB [0000000000000000] 
  8893                                  
  8894 00005A03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8895 00005A08 E8B72A0100              	call malloc
  8896 00005A0D 50                      	push rax
  8897 00005A0E BF10000000              	mov rdi, 8 * 2	; new rib
  8898 00005A13 E8AC2A0100              	call malloc
  8899 00005A18 50                      	push rax
  8900 00005A19 BF10000000              	mov rdi, 8 * 2	; extended env
  8901 00005A1E E8A12A0100              	call malloc
  8902 00005A23 488B7D10                	mov rdi, ENV
  8903 00005A27 BE00000000              	mov rsi, 0
  8904 00005A2C BA01000000              	mov rdx, 1
  8905                                  .L_lambda_opt_env_loop_0145:	; ext_env[i + 1] <-- env[i]
  8906 00005A31 4883FE01                	cmp rsi, 1
  8907 00005A35 7410                    	je .L_lambda_opt_env_end_0145
  8908 00005A37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8909 00005A3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8910 00005A3F 48FFC6                  	inc rsi
  8911 00005A42 48FFC2                  	inc rdx
  8912 00005A45 EBEA                    	jmp .L_lambda_opt_env_loop_0145
  8913                                  .L_lambda_opt_env_end_0145:
  8914 00005A47 5B                      	pop rbx
  8915 00005A48 BE00000000              	mov rsi, 0
  8916                                  .L_lambda_opt_params_loop_0145:	; copy params
  8917 00005A4D 4883FE02                	cmp rsi, 2
  8918 00005A51 740E                    	je .L_lambda_opt_params_end_0145
  8919 00005A53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8920 00005A58 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8921 00005A5C 48FFC6                  	inc rsi
  8922 00005A5F EBEC                    	jmp .L_lambda_opt_params_loop_0145
  8923                                  .L_lambda_opt_params_end_0145:
  8924 00005A61 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  8925 00005A64 4889C3                  	mov rbx, rax
  8926 00005A67 58                      	pop rax
  8927 00005A68 C60004                  	mov byte [rax], T_closure
  8928 00005A6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8929 00005A6F 48C74009[7C5A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0145
  8930 00005A77 E9F7020000              	jmp .L_lambda_opt_end_0145
  8931                                  .L_lambda_opt_code_0145:	; lambda-opt body
  8932 00005A7C 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8933 00005A82 7411                    	je .L_lambda_opt_arity_check_exact_0145
  8934 00005A84 0F8F39010000            	jg .L_lambda_opt_arity_check_more_0145
  8935 00005A8A FF742410                	push qword [rsp + 8 * 2]
  8936 00005A8E 6A00                    	push 0
  8937 00005A90 E9FC290100              	jmp L_error_incorrect_arity_opt
  8938                                  .L_lambda_opt_arity_check_exact_0145:
  8939 00005A95 4883EC08                	sub rsp, 8
  8940 00005A99 488B442408              	mov rax, qword[rsp + 8 *1]
  8941 00005A9E 48890424                	mov qword[rsp], rax  
  8942 00005AA2 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  8943 00005AA7 4889442408              	mov qword[rsp + 8 * 1], rax
  8944 00005AAC B801000000              	mov rax, 1
  8945 00005AB1 4889442410              	mov qword[rsp + 8 *2], rax
  8946 00005AB6 48B8-                   	mov rax, sob_nil
  8946 00005AB8 [0100000000000000] 
  8947 00005AC0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  8948 00005AC5 C8000000                	enter 0, 0
  8949                                  	; preparing a non-tail-call
  8950 00005AC9 488B4520                	mov rax, PARAM(0)	; param s
  8951 00005ACD 50                      	push rax
  8952 00005ACE 6A01                    	push 1	; arg count
  8953 00005AD0 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  8954 00005AD8 803805                  	cmp byte [rax], T_undefined
  8955 00005ADB 0F84B6280100            	je L_error_fvar_undefined
  8956 00005AE1 803804                  	cmp byte [rax], T_closure
  8957 00005AE4 0F8531290100            	jne L_error_non_closure
  8958 00005AEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  8959 00005AED FF5009                  	call SOB_CLOSURE_CODE(rax)
  8960 00005AF0 483D[02000000]          	cmp rax, sob_boolean_false
  8961 00005AF6 740F                    	je .L_if_else_07bc
  8962 00005AF8 48B8-                   	mov rax, L_constants + 1
  8962 00005AFA [0100000000000000] 
  8963 00005B02 E9B3000000              	jmp .L_if_end_07bc
  8964                                  .L_if_else_07bc:
  8965                                  	; preparing a tail-call
  8966                                  	; preparing a non-tail-call
  8967 00005B07 488B4520                	mov rax, PARAM(0)	; param s
  8968 00005B0B 50                      	push rax
  8969 00005B0C 6A01                    	push 1	; arg count
  8970 00005B0E 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  8971 00005B16 803805                  	cmp byte [rax], T_undefined
  8972 00005B19 0F8478280100            	je L_error_fvar_undefined
  8973 00005B1F 803804                  	cmp byte [rax], T_closure
  8974 00005B22 0F85F3280100            	jne L_error_non_closure
  8975 00005B28 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8976 00005B2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8977 00005B2E 50                      	push rax
  8978                                  	; preparing a non-tail-call
  8979 00005B2F 488B4520                	mov rax, PARAM(0)	; param s
  8980 00005B33 50                      	push rax
  8981 00005B34 6A01                    	push 1	; arg count
  8982 00005B36 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  8983 00005B3E 803805                  	cmp byte [rax], T_undefined
  8984 00005B41 0F8450280100            	je L_error_fvar_undefined
  8985 00005B47 803804                  	cmp byte [rax], T_closure
  8986 00005B4A 0F85CB280100            	jne L_error_non_closure
  8987 00005B50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8988 00005B53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8989 00005B56 50                      	push rax
  8990 00005B57 6A02                    	push 2	; arg count
  8991 00005B59 488B4510                	mov rax, ENV
  8992 00005B5D 488B00                  	mov rax, qword [rax + 8 * 0]
  8993 00005B60 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  8994 00005B63 488B00                  	mov rax, qword [rax]
  8995 00005B66 803804                  	cmp byte [rax], T_closure
  8996 00005B69 0F85AC280100            	jne L_error_non_closure
  8997 00005B6F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8998 00005B72 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  8999 00005B75 FF7500                  	push qword[rbp]
  9000 00005B78 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9001 00005B7B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9002 00005B7F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9003 00005B83 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9004 00005B87 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9005 00005B8A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9006 00005B8D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9007 00005B92 4983C103                	add r9, 3 	 ;for getting to the params
  9008 00005B96 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9009 00005B9A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9010                                  .L_tc_recycle_frame_loop_0e79:
  9011 00005B9D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9012 00005BA0 7410                    	je .L_tc_recycle_frame_done_0e79
  9013 00005BA2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9014 00005BA5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9015 00005BA8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9016 00005BAC 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9017 00005BB0 EBEB                    	jmp .L_tc_recycle_frame_loop_0e79
  9018                                  .L_tc_recycle_frame_done_0e79:
  9019 00005BB2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9020 00005BB3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9021 00005BB7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9022                                  .L_if_end_07bc:
  9023 00005BBA C9                      	leave
  9024 00005BBB C21800                  	ret AND_KILL_FRAME(1)
  9025 00005BBE E9B0010000              	jmp .L_lambda_opt_end_0145	; new closure is in rax
  9026                                  .L_lambda_opt_arity_check_more_0145:
  9027 00005BC3 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9028 00005BC8 49B9-                   	mov r9, sob_nil
  9028 00005BCA [0100000000000000] 
  9029 00005BD2 4889E3                  	mov rbx, rsp 
  9030 00005BD5 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9031 00005BD9 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9032 00005BDC 49C1E003                	shl r8, 3
  9033 00005BE0 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9034 00005BE3 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9035                                  .L_lambda_opt_stack_shrink_loop_0145:
  9036 00005BE8 4983F800                	cmp r8, 0
  9037 00005BEC 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0145
  9038 00005BEE BF11000000              	mov rdi, 1+8+8 ;for pair
  9039 00005BF3 E8CC280100              	call malloc;to create the pair in the stack
  9040 00005BF8 C60021                  	mov byte [rax], T_pair ; to make it a pair
  9041 00005BFB 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  9042 00005BFE 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  9043 00005C02 4C894809                 	mov qword[rax+1+8],r9
  9044 00005C06 4989C1                  	mov r9, rax ;for the recursion 
  9045 00005C09 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  9046 00005C0C 4883EB08                	sub rbx, 8 ;to get the next param to copy
  9047 00005C10 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0145
  9048                                  .L_lambda_opt_stack_shrink_loop_exit_0145:
  9049 00005C12 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  9050 00005C17 4883E901                	sub rcx, 1
  9051 00005C1B 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  9052 00005C1F 4801CC                  	add rsp, rcx ;shrinking the stack
  9053 00005C22 4889E0                  	mov rax, rsp
  9054 00005C25 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  9055 00005C28 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  9056 00005C2C 49FFC8                  	dec r8 ;we start with param 0, not 1 
  9057 00005C2F 4883C018                	add rax, 3 * 8;now rax is param 0
  9058 00005C33 49C1E003                	shl r8, 3;convert to byte
  9059 00005C37 4C01C0                  	add rax, r8;now rax is the top of the stack
  9060 00005C3A 4C8908                  	mov qword[rax], r9;puting the list at the top
  9061 00005C3D 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  9062 00005C41 4889E3                  	mov rbx, rsp 
  9063 00005C44 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  9064 00005C47 41BA00000000            	mov r10, 0;r10 is the not opt params length
  9065 00005C4D 49FFCA                  	dec r10 
  9066 00005C50 49C1E203                	shl r10, 3;to get bytes
  9067 00005C54 4883C318                	add rbx, 3*8;rbx is the first param
  9068 00005C58 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  9069 00005C5B 4889E0                  	mov rax, rsp
  9070 00005C5E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9071 00005C61 48C744241001000000      	mov qword [rsp+2*8], 1
  9072 00005C6A 488B5808                	mov rbx, qword[rax + 8 *1]
  9073 00005C6E 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9074 00005C73 488B18                  	mov rbx, qword[rax]
  9075 00005C76 48891C24                	mov qword [rsp], rbx
  9076 00005C7A C8000000                	enter 0, 0
  9077                                  	; preparing a non-tail-call
  9078 00005C7E 488B4520                	mov rax, PARAM(0)	; param s
  9079 00005C82 50                      	push rax
  9080 00005C83 6A01                    	push 1	; arg count
  9081 00005C85 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  9082 00005C8D 803805                  	cmp byte [rax], T_undefined
  9083 00005C90 0F8401270100            	je L_error_fvar_undefined
  9084 00005C96 803804                  	cmp byte [rax], T_closure
  9085 00005C99 0F857C270100            	jne L_error_non_closure
  9086 00005C9F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9087 00005CA2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9088 00005CA5 483D[02000000]          	cmp rax, sob_boolean_false
  9089 00005CAB 740F                    	je .L_if_else_07bb
  9090 00005CAD 48B8-                   	mov rax, L_constants + 1
  9090 00005CAF [0100000000000000] 
  9091 00005CB7 E9B3000000              	jmp .L_if_end_07bb
  9092                                  .L_if_else_07bb:
  9093                                  	; preparing a tail-call
  9094                                  	; preparing a non-tail-call
  9095 00005CBC 488B4520                	mov rax, PARAM(0)	; param s
  9096 00005CC0 50                      	push rax
  9097 00005CC1 6A01                    	push 1	; arg count
  9098 00005CC3 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  9099 00005CCB 803805                  	cmp byte [rax], T_undefined
  9100 00005CCE 0F84C3260100            	je L_error_fvar_undefined
  9101 00005CD4 803804                  	cmp byte [rax], T_closure
  9102 00005CD7 0F853E270100            	jne L_error_non_closure
  9103 00005CDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9104 00005CE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9105 00005CE3 50                      	push rax
  9106                                  	; preparing a non-tail-call
  9107 00005CE4 488B4520                	mov rax, PARAM(0)	; param s
  9108 00005CE8 50                      	push rax
  9109 00005CE9 6A01                    	push 1	; arg count
  9110 00005CEB 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  9111 00005CF3 803805                  	cmp byte [rax], T_undefined
  9112 00005CF6 0F849B260100            	je L_error_fvar_undefined
  9113 00005CFC 803804                  	cmp byte [rax], T_closure
  9114 00005CFF 0F8516270100            	jne L_error_non_closure
  9115 00005D05 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9116 00005D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9117 00005D0B 50                      	push rax
  9118 00005D0C 6A02                    	push 2	; arg count
  9119 00005D0E 488B4510                	mov rax, ENV
  9120 00005D12 488B00                  	mov rax, qword [rax + 8 * 0]
  9121 00005D15 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run-1
  9122 00005D18 488B00                  	mov rax, qword [rax]
  9123 00005D1B 803804                  	cmp byte [rax], T_closure
  9124 00005D1E 0F85F7260100            	jne L_error_non_closure
  9125 00005D24 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9126 00005D27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9127 00005D2A FF7500                  	push qword[rbp]
  9128 00005D2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9129 00005D30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9130 00005D34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9131 00005D38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9132 00005D3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9133 00005D3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9134 00005D42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9135 00005D47 4983C103                	add r9, 3 	 ;for getting to the params
  9136 00005D4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9137 00005D4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9138                                  .L_tc_recycle_frame_loop_0e78:
  9139 00005D52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9140 00005D55 7410                    	je .L_tc_recycle_frame_done_0e78
  9141 00005D57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9142 00005D5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9143 00005D5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9144 00005D61 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9145 00005D65 EBEB                    	jmp .L_tc_recycle_frame_loop_0e78
  9146                                  .L_tc_recycle_frame_done_0e78:
  9147 00005D67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9148 00005D68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9149 00005D6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9150                                  .L_if_end_07bb:
  9151 00005D6F C9                      	leave
  9152 00005D70 C21800                  	ret AND_KILL_FRAME(1)
  9153                                  .L_lambda_opt_end_0145:	; new closure is in rax
  9154 00005D73 C9                      	leave
  9155 00005D74 C22000                  	ret AND_KILL_FRAME(2)
  9156                                  .L_lambda_simple_end_0a63:	; new closure is in rax
  9157 00005D77 803804                  	cmp byte [rax], T_closure
  9158 00005D7A 0F859B260100            	jne L_error_non_closure
  9159 00005D80 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9160 00005D83 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9161 00005D86 48890425[5A110000]      	mov qword [free_var_32], rax
  9162 00005D8E 48B8-                   	mov rax, sob_void
  9162 00005D90 [0000000000000000] 
  9163                                  
  9164 00005D98 4889C7                  	mov rdi, rax
  9165 00005D9B E879290100              	call print_sexpr_if_not_void
  9166                                  	; preparing a non-tail-call
  9167 00005DA0 48B8-                   	mov rax, L_constants + 1993
  9167 00005DA2 [C907000000000000] 
  9168 00005DAA 50                      	push rax
  9169 00005DAB 6A01                    	push 1	; arg count
  9170 00005DAD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9171 00005DB2 E80D270100              	call malloc
  9172 00005DB7 50                      	push rax
  9173 00005DB8 BF00000000              	mov rdi, 8 * 0	; new rib
  9174 00005DBD E802270100              	call malloc
  9175 00005DC2 50                      	push rax
  9176 00005DC3 BF08000000              	mov rdi, 8 * 1	; extended env
  9177 00005DC8 E8F7260100              	call malloc
  9178 00005DCD 488B7D10                	mov rdi, ENV
  9179 00005DD1 BE00000000              	mov rsi, 0
  9180 00005DD6 BA01000000              	mov rdx, 1
  9181                                  .L_lambda_simple_env_loop_0a66:	; ext_env[i + 1] <-- env[i]
  9182 00005DDB 4883FE00                	cmp rsi, 0
  9183 00005DDF 7410                    	je .L_lambda_simple_env_end_0a66
  9184 00005DE1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9185 00005DE5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9186 00005DE9 48FFC6                  	inc rsi
  9187 00005DEC 48FFC2                  	inc rdx
  9188 00005DEF EBEA                    	jmp .L_lambda_simple_env_loop_0a66
  9189                                  .L_lambda_simple_env_end_0a66:
  9190 00005DF1 5B                      	pop rbx
  9191 00005DF2 BE00000000              	mov rsi, 0
  9192                                  .L_lambda_simple_params_loop_0a66:	; copy params
  9193 00005DF7 4883FE00                	cmp rsi, 0
  9194 00005DFB 740E                    	je .L_lambda_simple_params_end_0a66
  9195 00005DFD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9196 00005E02 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9197 00005E06 48FFC6                  	inc rsi
  9198 00005E09 EBEC                    	jmp .L_lambda_simple_params_loop_0a66
  9199                                  .L_lambda_simple_params_end_0a66:
  9200 00005E0B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9201 00005E0E 4889C3                  	mov rbx, rax
  9202 00005E11 58                      	pop rax
  9203 00005E12 C60004                  	mov byte [rax], T_closure
  9204 00005E15 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9205 00005E19 48C74009[265E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a66
  9206 00005E21 E9D4040000              	jmp .L_lambda_simple_end_0a66
  9207                                  .L_lambda_simple_code_0a66:	; lambda-simple body
  9208 00005E26 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9209 00005E2C 740B                    	je .L_lambda_simple_arity_check_ok_0a66
  9210 00005E2E FF742410                	push qword [rsp + 8 * 2]
  9211 00005E32 6A01                    	push 1
  9212 00005E34 E944260100              	jmp L_error_incorrect_arity_simple
  9213                                  .L_lambda_simple_arity_check_ok_0a66:
  9214 00005E39 C8000000                	enter 0, 0
  9215 00005E3D BF08000000              	mov rdi, 8*1
  9216 00005E42 E87D260100              	call malloc
  9217 00005E47 488B5D20                	mov rbx, PARAM(0)
  9218 00005E4B 488918                  	mov qword[rax], rbx
  9219 00005E4E 48894520                	mov PARAM(0), rax
  9220 00005E52 48B8-                   	mov rax, sob_void
  9220 00005E54 [0000000000000000] 
  9221                                  
  9222 00005E5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9223 00005E61 E85E260100              	call malloc
  9224 00005E66 50                      	push rax
  9225 00005E67 BF08000000              	mov rdi, 8 * 1	; new rib
  9226 00005E6C E853260100              	call malloc
  9227 00005E71 50                      	push rax
  9228 00005E72 BF10000000              	mov rdi, 8 * 2	; extended env
  9229 00005E77 E848260100              	call malloc
  9230 00005E7C 488B7D10                	mov rdi, ENV
  9231 00005E80 BE00000000              	mov rsi, 0
  9232 00005E85 BA01000000              	mov rdx, 1
  9233                                  .L_lambda_simple_env_loop_0a67:	; ext_env[i + 1] <-- env[i]
  9234 00005E8A 4883FE01                	cmp rsi, 1
  9235 00005E8E 7410                    	je .L_lambda_simple_env_end_0a67
  9236 00005E90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9237 00005E94 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9238 00005E98 48FFC6                  	inc rsi
  9239 00005E9B 48FFC2                  	inc rdx
  9240 00005E9E EBEA                    	jmp .L_lambda_simple_env_loop_0a67
  9241                                  .L_lambda_simple_env_end_0a67:
  9242 00005EA0 5B                      	pop rbx
  9243 00005EA1 BE00000000              	mov rsi, 0
  9244                                  .L_lambda_simple_params_loop_0a67:	; copy params
  9245 00005EA6 4883FE01                	cmp rsi, 1
  9246 00005EAA 740E                    	je .L_lambda_simple_params_end_0a67
  9247 00005EAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9248 00005EB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9249 00005EB5 48FFC6                  	inc rsi
  9250 00005EB8 EBEC                    	jmp .L_lambda_simple_params_loop_0a67
  9251                                  .L_lambda_simple_params_end_0a67:
  9252 00005EBA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9253 00005EBD 4889C3                  	mov rbx, rax
  9254 00005EC0 58                      	pop rax
  9255 00005EC1 C60004                  	mov byte [rax], T_closure
  9256 00005EC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9257 00005EC8 48C74009[D55E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a67
  9258 00005ED0 E96E010000              	jmp .L_lambda_simple_end_0a67
  9259                                  .L_lambda_simple_code_0a67:	; lambda-simple body
  9260 00005ED5 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9261 00005EDB 740B                    	je .L_lambda_simple_arity_check_ok_0a67
  9262 00005EDD FF742410                	push qword [rsp + 8 * 2]
  9263 00005EE1 6A03                    	push 3
  9264 00005EE3 E995250100              	jmp L_error_incorrect_arity_simple
  9265                                  .L_lambda_simple_arity_check_ok_0a67:
  9266 00005EE8 C8000000                	enter 0, 0
  9267                                  	; preparing a non-tail-call
  9268 00005EEC 488B4530                	mov rax, PARAM(2)	; param ss
  9269 00005EF0 50                      	push rax
  9270 00005EF1 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  9271 00005EF9 803805                  	cmp byte [rax], T_undefined
  9272 00005EFC 0F8495240100            	je L_error_fvar_undefined
  9273 00005F02 50                      	push rax
  9274 00005F03 6A02                    	push 2	; arg count
  9275 00005F05 488B0425[88160000]      	mov rax, qword [free_var_110]	; free var ormap
  9276 00005F0D 803805                  	cmp byte [rax], T_undefined
  9277 00005F10 0F8481240100            	je L_error_fvar_undefined
  9278 00005F16 803804                  	cmp byte [rax], T_closure
  9279 00005F19 0F85FC240100            	jne L_error_non_closure
  9280 00005F1F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9281 00005F22 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9282 00005F25 483D[02000000]          	cmp rax, sob_boolean_false
  9283 00005F2B 7409                    	je .L_if_else_07bd
  9284 00005F2D 488B4528                	mov rax, PARAM(1)	; param unit
  9285 00005F31 E909010000              	jmp .L_if_end_07bd
  9286                                  .L_if_else_07bd:
  9287                                  	; preparing a tail-call
  9288                                  	; preparing a non-tail-call
  9289 00005F36 488B4530                	mov rax, PARAM(2)	; param ss
  9290 00005F3A 50                      	push rax
  9291 00005F3B 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  9292 00005F43 803805                  	cmp byte [rax], T_undefined
  9293 00005F46 0F844B240100            	je L_error_fvar_undefined
  9294 00005F4C 50                      	push rax
  9295 00005F4D 6A02                    	push 2	; arg count
  9296 00005F4F 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  9297 00005F57 803805                  	cmp byte [rax], T_undefined
  9298 00005F5A 0F8437240100            	je L_error_fvar_undefined
  9299 00005F60 803804                  	cmp byte [rax], T_closure
  9300 00005F63 0F85B2240100            	jne L_error_non_closure
  9301 00005F69 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9302 00005F6C FF5009                  	call SOB_CLOSURE_CODE(rax)
  9303 00005F6F 50                      	push rax
  9304                                  	; preparing a non-tail-call
  9305                                  	; preparing a non-tail-call
  9306 00005F70 488B4530                	mov rax, PARAM(2)	; param ss
  9307 00005F74 50                      	push rax
  9308 00005F75 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  9309 00005F7D 803805                  	cmp byte [rax], T_undefined
  9310 00005F80 0F8411240100            	je L_error_fvar_undefined
  9311 00005F86 50                      	push rax
  9312 00005F87 6A02                    	push 2	; arg count
  9313 00005F89 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  9314 00005F91 803805                  	cmp byte [rax], T_undefined
  9315 00005F94 0F84FD230100            	je L_error_fvar_undefined
  9316 00005F9A 803804                  	cmp byte [rax], T_closure
  9317 00005F9D 0F8578240100            	jne L_error_non_closure
  9318 00005FA3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9319 00005FA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9320 00005FA9 50                      	push rax
  9321 00005FAA 488B4528                	mov rax, PARAM(1)	; param unit
  9322 00005FAE 50                      	push rax
  9323 00005FAF 488B4520                	mov rax, PARAM(0)	; param f
  9324 00005FB3 50                      	push rax
  9325 00005FB4 6A03                    	push 3	; arg count
  9326 00005FB6 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  9327 00005FBE 803805                  	cmp byte [rax], T_undefined
  9328 00005FC1 0F84D0230100            	je L_error_fvar_undefined
  9329 00005FC7 803804                  	cmp byte [rax], T_closure
  9330 00005FCA 0F854B240100            	jne L_error_non_closure
  9331 00005FD0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9332 00005FD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9333 00005FD6 50                      	push rax
  9334 00005FD7 488B4520                	mov rax, PARAM(0)	; param f
  9335 00005FDB 50                      	push rax
  9336 00005FDC 6A03                    	push 3	; arg count
  9337 00005FDE 488B4510                	mov rax, ENV
  9338 00005FE2 488B00                  	mov rax, qword [rax + 8 * 0]
  9339 00005FE5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9340 00005FE8 488B00                  	mov rax, qword [rax]
  9341 00005FEB 803804                  	cmp byte [rax], T_closure
  9342 00005FEE 0F8527240100            	jne L_error_non_closure
  9343 00005FF4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9344 00005FF7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9345 00005FFA FF7500                  	push qword[rbp]
  9346 00005FFD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9347 00006000 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9348 00006004 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9349 00006008 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9350 0000600C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9351 0000600F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9352 00006012 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9353 00006017 4983C103                	add r9, 3 	 ;for getting to the params
  9354 0000601B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9355 0000601F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9356                                  .L_tc_recycle_frame_loop_0e7a:
  9357 00006022 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9358 00006025 7410                    	je .L_tc_recycle_frame_done_0e7a
  9359 00006027 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9360 0000602A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9361 0000602D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9362 00006031 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9363 00006035 EBEB                    	jmp .L_tc_recycle_frame_loop_0e7a
  9364                                  .L_tc_recycle_frame_done_0e7a:
  9365 00006037 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9366 00006038 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9367 0000603C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9368                                  .L_if_end_07bd:
  9369 0000603F C9                      	leave
  9370 00006040 C22800                  	ret AND_KILL_FRAME(3)
  9371                                  .L_lambda_simple_end_0a67:	; new closure is in rax
  9372 00006043 50                      	push rax
  9373 00006044 488B4520                	mov rax, PARAM(0)	; param run
  9374 00006048 8F00                    	pop qword [rax]
  9375 0000604A 48B8-                   	mov rax, sob_void
  9375 0000604C [0000000000000000] 
  9376                                  
  9377 00006054 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9378 00006059 E866240100              	call malloc
  9379 0000605E 50                      	push rax
  9380 0000605F BF08000000              	mov rdi, 8 * 1	; new rib
  9381 00006064 E85B240100              	call malloc
  9382 00006069 50                      	push rax
  9383 0000606A BF10000000              	mov rdi, 8 * 2	; extended env
  9384 0000606F E850240100              	call malloc
  9385 00006074 488B7D10                	mov rdi, ENV
  9386 00006078 BE00000000              	mov rsi, 0
  9387 0000607D BA01000000              	mov rdx, 1
  9388                                  .L_lambda_opt_env_loop_0146:	; ext_env[i + 1] <-- env[i]
  9389 00006082 4883FE01                	cmp rsi, 1
  9390 00006086 7410                    	je .L_lambda_opt_env_end_0146
  9391 00006088 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9392 0000608C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9393 00006090 48FFC6                  	inc rsi
  9394 00006093 48FFC2                  	inc rdx
  9395 00006096 EBEA                    	jmp .L_lambda_opt_env_loop_0146
  9396                                  .L_lambda_opt_env_end_0146:
  9397 00006098 5B                      	pop rbx
  9398 00006099 BE00000000              	mov rsi, 0
  9399                                  .L_lambda_opt_params_loop_0146:	; copy params
  9400 0000609E 4883FE01                	cmp rsi, 1
  9401 000060A2 740E                    	je .L_lambda_opt_params_end_0146
  9402 000060A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9403 000060A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9404 000060AD 48FFC6                  	inc rsi
  9405 000060B0 EBEC                    	jmp .L_lambda_opt_params_loop_0146
  9406                                  .L_lambda_opt_params_end_0146:
  9407 000060B2 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  9408 000060B5 4889C3                  	mov rbx, rax
  9409 000060B8 58                      	pop rax
  9410 000060B9 C60004                  	mov byte [rax], T_closure
  9411 000060BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9412 000060C0 48C74009[CD600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0146
  9413 000060C8 E929020000              	jmp .L_lambda_opt_end_0146
  9414                                  .L_lambda_opt_code_0146:	; lambda-opt body
  9415 000060CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9416 000060D3 7411                    	je .L_lambda_opt_arity_check_exact_0146
  9417 000060D5 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0146
  9418 000060DB FF742410                	push qword [rsp + 8 * 2]
  9419 000060DF 6A02                    	push 2
  9420 000060E1 E9AB230100              	jmp L_error_incorrect_arity_opt
  9421                                  .L_lambda_opt_arity_check_exact_0146:
  9422 000060E6 4883EC08                	sub rsp, 8
  9423 000060EA 488B442408              	mov rax, qword[rsp + 8 *1]
  9424 000060EF 48890424                	mov qword[rsp], rax  
  9425 000060F3 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9426 000060F8 4889442408              	mov qword[rsp + 8 * 1], rax
  9427 000060FD B803000000              	mov rax, 3
  9428 00006102 4889442410              	mov qword[rsp + 8 *2], rax
  9429 00006107 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9430 0000610C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9431 00006111 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9432 00006116 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9433 0000611B 48B8-                   	mov rax, sob_nil
  9433 0000611D [0100000000000000] 
  9434 00006125 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9435 0000612A C8000000                	enter 0, 0
  9436                                  	; preparing a tail-call
  9437 0000612E 488B4530                	mov rax, PARAM(2)	; param ss
  9438 00006132 50                      	push rax
  9439 00006133 488B4528                	mov rax, PARAM(1)	; param unit
  9440 00006137 50                      	push rax
  9441 00006138 488B4520                	mov rax, PARAM(0)	; param f
  9442 0000613C 50                      	push rax
  9443 0000613D 6A03                    	push 3	; arg count
  9444 0000613F 488B4510                	mov rax, ENV
  9445 00006143 488B00                  	mov rax, qword [rax + 8 * 0]
  9446 00006146 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9447 00006149 488B00                  	mov rax, qword [rax]
  9448 0000614C 803804                  	cmp byte [rax], T_closure
  9449 0000614F 0F85C6220100            	jne L_error_non_closure
  9450 00006155 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9451 00006158 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9452 0000615B FF7500                  	push qword[rbp]
  9453 0000615E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9454 00006161 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9455 00006165 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9456 00006169 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9457 0000616D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9458 00006170 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9459 00006173 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9460 00006178 4983C103                	add r9, 3 	 ;for getting to the params
  9461 0000617C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9462 00006180 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9463                                  .L_tc_recycle_frame_loop_0e7c:
  9464 00006183 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9465 00006186 7410                    	je .L_tc_recycle_frame_done_0e7c
  9466 00006188 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9467 0000618B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9468 0000618E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9469 00006192 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9470 00006196 EBEB                    	jmp .L_tc_recycle_frame_loop_0e7c
  9471                                  .L_tc_recycle_frame_done_0e7c:
  9472 00006198 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9473 00006199 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9474 0000619D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9475 000061A0 C9                      	leave
  9476 000061A1 C22800                  	ret AND_KILL_FRAME(3)
  9477 000061A4 E94D010000              	jmp .L_lambda_opt_end_0146	; new closure is in rax
  9478                                  .L_lambda_opt_arity_check_more_0146:
  9479 000061A9 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9480 000061AE 49B9-                   	mov r9, sob_nil
  9480 000061B0 [0100000000000000] 
  9481 000061B8 4889E3                  	mov rbx, rsp 
  9482 000061BB 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9483 000061BF 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9484 000061C2 49C1E003                	shl r8, 3
  9485 000061C6 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9486 000061C9 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9487                                  .L_lambda_opt_stack_shrink_loop_0146:
  9488 000061CE 4983F802                	cmp r8, 2
  9489 000061D2 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0146
  9490 000061D4 BF11000000              	mov rdi, 1+8+8 ;for pair
  9491 000061D9 E8E6220100              	call malloc;to create the pair in the stack
  9492 000061DE C60021                  	mov byte [rax], T_pair ; to make it a pair
  9493 000061E1 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  9494 000061E4 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  9495 000061E8 4C894809                 	mov qword[rax+1+8],r9
  9496 000061EC 4989C1                  	mov r9, rax ;for the recursion 
  9497 000061EF 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  9498 000061F2 4883EB08                	sub rbx, 8 ;to get the next param to copy
  9499 000061F6 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0146
  9500                                  .L_lambda_opt_stack_shrink_loop_exit_0146:
  9501 000061F8 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  9502 000061FD 4883E903                	sub rcx, 3
  9503 00006201 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  9504 00006205 4801CC                  	add rsp, rcx ;shrinking the stack
  9505 00006208 4889E0                  	mov rax, rsp
  9506 0000620B 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  9507 0000620E 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  9508 00006212 49FFC8                  	dec r8 ;we start with param 0, not 1 
  9509 00006215 4883C018                	add rax, 3 * 8;now rax is param 0
  9510 00006219 49C1E003                	shl r8, 3;convert to byte
  9511 0000621D 4C01C0                  	add rax, r8;now rax is the top of the stack
  9512 00006220 4C8908                  	mov qword[rax], r9;puting the list at the top
  9513 00006223 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  9514 00006227 4889E3                  	mov rbx, rsp 
  9515 0000622A 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  9516 0000622D 41BA02000000            	mov r10, 2;r10 is the not opt params length
  9517 00006233 49FFCA                  	dec r10 
  9518 00006236 49C1E203                	shl r10, 3;to get bytes
  9519 0000623A 4883C318                	add rbx, 3*8;rbx is the first param
  9520 0000623E 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  9521 00006241 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9522 00006244 4C8900                  	mov qword[rax], r8
  9523 00006247 4883E808                	sub rax, 8
  9524 0000624B 4883EB08                	sub rbx, 8
  9525 0000624F 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9526 00006252 4C8900                  	mov qword[rax], r8
  9527 00006255 4883E808                	sub rax, 8
  9528 00006259 4883EB08                	sub rbx, 8
  9529 0000625D 4889E0                  	mov rax, rsp
  9530 00006260 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9531 00006263 48C744241003000000      	mov qword [rsp+2*8], 3
  9532 0000626C 488B5808                	mov rbx, qword[rax + 8 *1]
  9533 00006270 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9534 00006275 488B18                  	mov rbx, qword[rax]
  9535 00006278 48891C24                	mov qword [rsp], rbx
  9536 0000627C C8000000                	enter 0, 0
  9537                                  	; preparing a tail-call
  9538 00006280 488B4530                	mov rax, PARAM(2)	; param ss
  9539 00006284 50                      	push rax
  9540 00006285 488B4528                	mov rax, PARAM(1)	; param unit
  9541 00006289 50                      	push rax
  9542 0000628A 488B4520                	mov rax, PARAM(0)	; param f
  9543 0000628E 50                      	push rax
  9544 0000628F 6A03                    	push 3	; arg count
  9545 00006291 488B4510                	mov rax, ENV
  9546 00006295 488B00                  	mov rax, qword [rax + 8 * 0]
  9547 00006298 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9548 0000629B 488B00                  	mov rax, qword [rax]
  9549 0000629E 803804                  	cmp byte [rax], T_closure
  9550 000062A1 0F8574210100            	jne L_error_non_closure
  9551 000062A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9552 000062AA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9553 000062AD FF7500                  	push qword[rbp]
  9554 000062B0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9555 000062B3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9556 000062B7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9557 000062BB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9558 000062BF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9559 000062C2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9560 000062C5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9561 000062CA 4983C103                	add r9, 3 	 ;for getting to the params
  9562 000062CE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9563 000062D2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9564                                  .L_tc_recycle_frame_loop_0e7b:
  9565 000062D5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9566 000062D8 7410                    	je .L_tc_recycle_frame_done_0e7b
  9567 000062DA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9568 000062DD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9569 000062E0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9570 000062E4 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9571 000062E8 EBEB                    	jmp .L_tc_recycle_frame_loop_0e7b
  9572                                  .L_tc_recycle_frame_done_0e7b:
  9573 000062EA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9574 000062EB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9575 000062EF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9576 000062F2 C9                      	leave
  9577 000062F3 C22800                  	ret AND_KILL_FRAME(3)
  9578                                  .L_lambda_opt_end_0146:	; new closure is in rax
  9579 000062F6 C9                      	leave
  9580 000062F7 C21800                  	ret AND_KILL_FRAME(1)
  9581                                  .L_lambda_simple_end_0a66:	; new closure is in rax
  9582 000062FA 803804                  	cmp byte [rax], T_closure
  9583 000062FD 0F8518210100            	jne L_error_non_closure
  9584 00006303 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9585 00006306 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9586 00006309 48890425[DF140000]      	mov qword [free_var_85], rax
  9587 00006311 48B8-                   	mov rax, sob_void
  9587 00006313 [0000000000000000] 
  9588                                  
  9589 0000631B 4889C7                  	mov rdi, rax
  9590 0000631E E8F6230100              	call print_sexpr_if_not_void
  9591                                  	; preparing a non-tail-call
  9592 00006323 48B8-                   	mov rax, L_constants + 1993
  9592 00006325 [C907000000000000] 
  9593 0000632D 50                      	push rax
  9594 0000632E 6A01                    	push 1	; arg count
  9595 00006330 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9596 00006335 E88A210100              	call malloc
  9597 0000633A 50                      	push rax
  9598 0000633B BF00000000              	mov rdi, 8 * 0	; new rib
  9599 00006340 E87F210100              	call malloc
  9600 00006345 50                      	push rax
  9601 00006346 BF08000000              	mov rdi, 8 * 1	; extended env
  9602 0000634B E874210100              	call malloc
  9603 00006350 488B7D10                	mov rdi, ENV
  9604 00006354 BE00000000              	mov rsi, 0
  9605 00006359 BA01000000              	mov rdx, 1
  9606                                  .L_lambda_simple_env_loop_0a68:	; ext_env[i + 1] <-- env[i]
  9607 0000635E 4883FE00                	cmp rsi, 0
  9608 00006362 7410                    	je .L_lambda_simple_env_end_0a68
  9609 00006364 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9610 00006368 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9611 0000636C 48FFC6                  	inc rsi
  9612 0000636F 48FFC2                  	inc rdx
  9613 00006372 EBEA                    	jmp .L_lambda_simple_env_loop_0a68
  9614                                  .L_lambda_simple_env_end_0a68:
  9615 00006374 5B                      	pop rbx
  9616 00006375 BE00000000              	mov rsi, 0
  9617                                  .L_lambda_simple_params_loop_0a68:	; copy params
  9618 0000637A 4883FE00                	cmp rsi, 0
  9619 0000637E 740E                    	je .L_lambda_simple_params_end_0a68
  9620 00006380 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9621 00006385 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9622 00006389 48FFC6                  	inc rsi
  9623 0000638C EBEC                    	jmp .L_lambda_simple_params_loop_0a68
  9624                                  .L_lambda_simple_params_end_0a68:
  9625 0000638E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9626 00006391 4889C3                  	mov rbx, rax
  9627 00006394 58                      	pop rax
  9628 00006395 C60004                  	mov byte [rax], T_closure
  9629 00006398 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9630 0000639C 48C74009[A9630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a68
  9631 000063A4 E925050000              	jmp .L_lambda_simple_end_0a68
  9632                                  .L_lambda_simple_code_0a68:	; lambda-simple body
  9633 000063A9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9634 000063AF 740B                    	je .L_lambda_simple_arity_check_ok_0a68
  9635 000063B1 FF742410                	push qword [rsp + 8 * 2]
  9636 000063B5 6A01                    	push 1
  9637 000063B7 E9C1200100              	jmp L_error_incorrect_arity_simple
  9638                                  .L_lambda_simple_arity_check_ok_0a68:
  9639 000063BC C8000000                	enter 0, 0
  9640 000063C0 BF08000000              	mov rdi, 8*1
  9641 000063C5 E8FA200100              	call malloc
  9642 000063CA 488B5D20                	mov rbx, PARAM(0)
  9643 000063CE 488918                  	mov qword[rax], rbx
  9644 000063D1 48894520                	mov PARAM(0), rax
  9645 000063D5 48B8-                   	mov rax, sob_void
  9645 000063D7 [0000000000000000] 
  9646                                  
  9647 000063DF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9648 000063E4 E8DB200100              	call malloc
  9649 000063E9 50                      	push rax
  9650 000063EA BF08000000              	mov rdi, 8 * 1	; new rib
  9651 000063EF E8D0200100              	call malloc
  9652 000063F4 50                      	push rax
  9653 000063F5 BF10000000              	mov rdi, 8 * 2	; extended env
  9654 000063FA E8C5200100              	call malloc
  9655 000063FF 488B7D10                	mov rdi, ENV
  9656 00006403 BE00000000              	mov rsi, 0
  9657 00006408 BA01000000              	mov rdx, 1
  9658                                  .L_lambda_simple_env_loop_0a69:	; ext_env[i + 1] <-- env[i]
  9659 0000640D 4883FE01                	cmp rsi, 1
  9660 00006411 7410                    	je .L_lambda_simple_env_end_0a69
  9661 00006413 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9662 00006417 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9663 0000641B 48FFC6                  	inc rsi
  9664 0000641E 48FFC2                  	inc rdx
  9665 00006421 EBEA                    	jmp .L_lambda_simple_env_loop_0a69
  9666                                  .L_lambda_simple_env_end_0a69:
  9667 00006423 5B                      	pop rbx
  9668 00006424 BE00000000              	mov rsi, 0
  9669                                  .L_lambda_simple_params_loop_0a69:	; copy params
  9670 00006429 4883FE01                	cmp rsi, 1
  9671 0000642D 740E                    	je .L_lambda_simple_params_end_0a69
  9672 0000642F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9673 00006434 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9674 00006438 48FFC6                  	inc rsi
  9675 0000643B EBEC                    	jmp .L_lambda_simple_params_loop_0a69
  9676                                  .L_lambda_simple_params_end_0a69:
  9677 0000643D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9678 00006440 4889C3                  	mov rbx, rax
  9679 00006443 58                      	pop rax
  9680 00006444 C60004                  	mov byte [rax], T_closure
  9681 00006447 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9682 0000644B 48C74009[58640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a69
  9683 00006453 E9BF010000              	jmp .L_lambda_simple_end_0a69
  9684                                  .L_lambda_simple_code_0a69:	; lambda-simple body
  9685 00006458 48837C241003            	cmp qword [rsp + 8 * 2], 3
  9686 0000645E 740B                    	je .L_lambda_simple_arity_check_ok_0a69
  9687 00006460 FF742410                	push qword [rsp + 8 * 2]
  9688 00006464 6A03                    	push 3
  9689 00006466 E912200100              	jmp L_error_incorrect_arity_simple
  9690                                  .L_lambda_simple_arity_check_ok_0a69:
  9691 0000646B C8000000                	enter 0, 0
  9692                                  	; preparing a non-tail-call
  9693 0000646F 488B4530                	mov rax, PARAM(2)	; param ss
  9694 00006473 50                      	push rax
  9695 00006474 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
  9696 0000647C 803805                  	cmp byte [rax], T_undefined
  9697 0000647F 0F84121F0100            	je L_error_fvar_undefined
  9698 00006485 50                      	push rax
  9699 00006486 6A02                    	push 2	; arg count
  9700 00006488 488B0425[88160000]      	mov rax, qword [free_var_110]	; free var ormap
  9701 00006490 803805                  	cmp byte [rax], T_undefined
  9702 00006493 0F84FE1E0100            	je L_error_fvar_undefined
  9703 00006499 803804                  	cmp byte [rax], T_closure
  9704 0000649C 0F85791F0100            	jne L_error_non_closure
  9705 000064A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9706 000064A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9707 000064A8 483D[02000000]          	cmp rax, sob_boolean_false
  9708 000064AE 7409                    	je .L_if_else_07be
  9709 000064B0 488B4528                	mov rax, PARAM(1)	; param unit
  9710 000064B4 E95A010000              	jmp .L_if_end_07be
  9711                                  .L_if_else_07be:
  9712                                  	; preparing a tail-call
  9713                                  	; preparing a non-tail-call
  9714                                  	; preparing a non-tail-call
  9715 000064B9 48B8-                   	mov rax, L_constants + 1
  9715 000064BB [0100000000000000] 
  9716 000064C3 50                      	push rax
  9717                                  	; preparing a non-tail-call
  9718                                  	; preparing a non-tail-call
  9719 000064C4 488B4530                	mov rax, PARAM(2)	; param ss
  9720 000064C8 50                      	push rax
  9721 000064C9 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
  9722 000064D1 803805                  	cmp byte [rax], T_undefined
  9723 000064D4 0F84BD1E0100            	je L_error_fvar_undefined
  9724 000064DA 50                      	push rax
  9725 000064DB 6A02                    	push 2	; arg count
  9726 000064DD 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  9727 000064E5 803805                  	cmp byte [rax], T_undefined
  9728 000064E8 0F84A91E0100            	je L_error_fvar_undefined
  9729 000064EE 803804                  	cmp byte [rax], T_closure
  9730 000064F1 0F85241F0100            	jne L_error_non_closure
  9731 000064F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9732 000064FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9733 000064FD 50                      	push rax
  9734 000064FE 488B4528                	mov rax, PARAM(1)	; param unit
  9735 00006502 50                      	push rax
  9736 00006503 488B4520                	mov rax, PARAM(0)	; param f
  9737 00006507 50                      	push rax
  9738 00006508 6A03                    	push 3	; arg count
  9739 0000650A 488B4510                	mov rax, ENV
  9740 0000650E 488B00                  	mov rax, qword [rax + 8 * 0]
  9741 00006511 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9742 00006514 488B00                  	mov rax, qword [rax]
  9743 00006517 803804                  	cmp byte [rax], T_closure
  9744 0000651A 0F85FB1E0100            	jne L_error_non_closure
  9745 00006520 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9746 00006523 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9747 00006526 50                      	push rax
  9748 00006527 6A02                    	push 2	; arg count
  9749 00006529 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
  9750 00006531 803805                  	cmp byte [rax], T_undefined
  9751 00006534 0F845D1E0100            	je L_error_fvar_undefined
  9752 0000653A 803804                  	cmp byte [rax], T_closure
  9753 0000653D 0F85D81E0100            	jne L_error_non_closure
  9754 00006543 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9755 00006546 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9756 00006549 50                      	push rax
  9757                                  	; preparing a non-tail-call
  9758 0000654A 488B4530                	mov rax, PARAM(2)	; param ss
  9759 0000654E 50                      	push rax
  9760 0000654F 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
  9761 00006557 803805                  	cmp byte [rax], T_undefined
  9762 0000655A 0F84371E0100            	je L_error_fvar_undefined
  9763 00006560 50                      	push rax
  9764 00006561 6A02                    	push 2	; arg count
  9765 00006563 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
  9766 0000656B 803805                  	cmp byte [rax], T_undefined
  9767 0000656E 0F84231E0100            	je L_error_fvar_undefined
  9768 00006574 803804                  	cmp byte [rax], T_closure
  9769 00006577 0F859E1E0100            	jne L_error_non_closure
  9770 0000657D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9771 00006580 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9772 00006583 50                      	push rax
  9773 00006584 6A02                    	push 2	; arg count
  9774 00006586 488B0425[5A110000]      	mov rax, qword [free_var_32]	; free var append
  9775 0000658E 803805                  	cmp byte [rax], T_undefined
  9776 00006591 0F84001E0100            	je L_error_fvar_undefined
  9777 00006597 803804                  	cmp byte [rax], T_closure
  9778 0000659A 0F857B1E0100            	jne L_error_non_closure
  9779 000065A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9780 000065A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9781 000065A6 50                      	push rax
  9782 000065A7 488B4520                	mov rax, PARAM(0)	; param f
  9783 000065AB 50                      	push rax
  9784 000065AC 6A02                    	push 2	; arg count
  9785 000065AE 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
  9786 000065B6 803805                  	cmp byte [rax], T_undefined
  9787 000065B9 0F84D81D0100            	je L_error_fvar_undefined
  9788 000065BF 803804                  	cmp byte [rax], T_closure
  9789 000065C2 0F85531E0100            	jne L_error_non_closure
  9790 000065C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9791 000065CB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9792 000065CE FF7500                  	push qword[rbp]
  9793 000065D1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9794 000065D4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9795 000065D8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9796 000065DC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9797 000065E0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9798 000065E3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9799 000065E6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9800 000065EB 4983C103                	add r9, 3 	 ;for getting to the params
  9801 000065EF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9802 000065F3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9803                                  .L_tc_recycle_frame_loop_0e7d:
  9804 000065F6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9805 000065F9 7410                    	je .L_tc_recycle_frame_done_0e7d
  9806 000065FB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9807 000065FE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9808 00006601 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9809 00006605 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9810 00006609 EBEB                    	jmp .L_tc_recycle_frame_loop_0e7d
  9811                                  .L_tc_recycle_frame_done_0e7d:
  9812 0000660B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9813 0000660C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9814 00006610 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9815                                  .L_if_end_07be:
  9816 00006613 C9                      	leave
  9817 00006614 C22800                  	ret AND_KILL_FRAME(3)
  9818                                  .L_lambda_simple_end_0a69:	; new closure is in rax
  9819 00006617 50                      	push rax
  9820 00006618 488B4520                	mov rax, PARAM(0)	; param run
  9821 0000661C 8F00                    	pop qword [rax]
  9822 0000661E 48B8-                   	mov rax, sob_void
  9822 00006620 [0000000000000000] 
  9823                                  
  9824 00006628 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9825 0000662D E8921E0100              	call malloc
  9826 00006632 50                      	push rax
  9827 00006633 BF08000000              	mov rdi, 8 * 1	; new rib
  9828 00006638 E8871E0100              	call malloc
  9829 0000663D 50                      	push rax
  9830 0000663E BF10000000              	mov rdi, 8 * 2	; extended env
  9831 00006643 E87C1E0100              	call malloc
  9832 00006648 488B7D10                	mov rdi, ENV
  9833 0000664C BE00000000              	mov rsi, 0
  9834 00006651 BA01000000              	mov rdx, 1
  9835                                  .L_lambda_opt_env_loop_0147:	; ext_env[i + 1] <-- env[i]
  9836 00006656 4883FE01                	cmp rsi, 1
  9837 0000665A 7410                    	je .L_lambda_opt_env_end_0147
  9838 0000665C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9839 00006660 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9840 00006664 48FFC6                  	inc rsi
  9841 00006667 48FFC2                  	inc rdx
  9842 0000666A EBEA                    	jmp .L_lambda_opt_env_loop_0147
  9843                                  .L_lambda_opt_env_end_0147:
  9844 0000666C 5B                      	pop rbx
  9845 0000666D BE00000000              	mov rsi, 0
  9846                                  .L_lambda_opt_params_loop_0147:	; copy params
  9847 00006672 4883FE01                	cmp rsi, 1
  9848 00006676 740E                    	je .L_lambda_opt_params_end_0147
  9849 00006678 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9850 0000667D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9851 00006681 48FFC6                  	inc rsi
  9852 00006684 EBEC                    	jmp .L_lambda_opt_params_loop_0147
  9853                                  .L_lambda_opt_params_end_0147:
  9854 00006686 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
  9855 00006689 4889C3                  	mov rbx, rax
  9856 0000668C 58                      	pop rax
  9857 0000668D C60004                  	mov byte [rax], T_closure
  9858 00006690 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9859 00006694 48C74009[A1660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0147
  9860 0000669C E929020000              	jmp .L_lambda_opt_end_0147
  9861                                  .L_lambda_opt_code_0147:	; lambda-opt body
  9862 000066A1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9863 000066A7 7411                    	je .L_lambda_opt_arity_check_exact_0147
  9864 000066A9 0F8FCE000000            	jg .L_lambda_opt_arity_check_more_0147
  9865 000066AF FF742410                	push qword [rsp + 8 * 2]
  9866 000066B3 6A02                    	push 2
  9867 000066B5 E9D71D0100              	jmp L_error_incorrect_arity_opt
  9868                                  .L_lambda_opt_arity_check_exact_0147:
  9869 000066BA 4883EC08                	sub rsp, 8
  9870 000066BE 488B442408              	mov rax, qword[rsp + 8 *1]
  9871 000066C3 48890424                	mov qword[rsp], rax  
  9872 000066C7 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
  9873 000066CC 4889442408              	mov qword[rsp + 8 * 1], rax
  9874 000066D1 B803000000              	mov rax, 3
  9875 000066D6 4889442410              	mov qword[rsp + 8 *2], rax
  9876 000066DB 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
  9877 000066E0 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
  9878 000066E5 488B442428              	mov rax, qword[rsp + 8 * (4 + 1)]
  9879 000066EA 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
  9880 000066EF 48B8-                   	mov rax, sob_nil
  9880 000066F1 [0100000000000000] 
  9881 000066F9 4889442428              	mov qword[rsp + 8 * (3 + 2)], rax
  9882 000066FE C8000000                	enter 0, 0
  9883                                  	; preparing a tail-call
  9884 00006702 488B4530                	mov rax, PARAM(2)	; param ss
  9885 00006706 50                      	push rax
  9886 00006707 488B4528                	mov rax, PARAM(1)	; param unit
  9887 0000670B 50                      	push rax
  9888 0000670C 488B4520                	mov rax, PARAM(0)	; param f
  9889 00006710 50                      	push rax
  9890 00006711 6A03                    	push 3	; arg count
  9891 00006713 488B4510                	mov rax, ENV
  9892 00006717 488B00                  	mov rax, qword [rax + 8 * 0]
  9893 0000671A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9894 0000671D 488B00                  	mov rax, qword [rax]
  9895 00006720 803804                  	cmp byte [rax], T_closure
  9896 00006723 0F85F21C0100            	jne L_error_non_closure
  9897 00006729 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9898 0000672C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
  9899 0000672F FF7500                  	push qword[rbp]
  9900 00006732 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
  9901 00006735 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
  9902 00006739 4983C603                	add r14, 3 	 ;adding so we will get to the params 
  9903 0000673D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
  9904 00006741 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
  9905 00006744 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
  9906 00006747 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
  9907 0000674C 4983C103                	add r9, 3 	 ;for getting to the params
  9908 00006750 49C1E103                	shl r9, 3 	 ;multiplie by 8 
  9909 00006754 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
  9910                                  .L_tc_recycle_frame_loop_0e7f:
  9911 00006757 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
  9912 0000675A 7410                    	je .L_tc_recycle_frame_done_0e7f
  9913 0000675C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
  9914 0000675F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
  9915 00006762 4983EF08                	sub r15, 8	 ;move the top of the stack one down
  9916 00006766 4983E808                	sub r8, 8	 ;move the top of the stack one down
  9917 0000676A EBEB                    	jmp .L_tc_recycle_frame_loop_0e7f
  9918                                  .L_tc_recycle_frame_done_0e7f:
  9919 0000676C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
  9920 0000676D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
  9921 00006771 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9922 00006774 C9                      	leave
  9923 00006775 C22800                  	ret AND_KILL_FRAME(3)
  9924 00006778 E94D010000              	jmp .L_lambda_opt_end_0147	; new closure is in rax
  9925                                  .L_lambda_opt_arity_check_more_0147:
  9926 0000677D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
  9927 00006782 49B9-                   	mov r9, sob_nil
  9927 00006784 [0100000000000000] 
  9928 0000678C 4889E3                  	mov rbx, rsp 
  9929 0000678F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
  9930 00006793 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
  9931 00006796 49C1E003                	shl r8, 3
  9932 0000679A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
  9933 0000679D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
  9934                                  .L_lambda_opt_stack_shrink_loop_0147:
  9935 000067A2 4983F802                	cmp r8, 2
  9936 000067A6 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0147
  9937 000067A8 BF11000000              	mov rdi, 1+8+8 ;for pair
  9938 000067AD E8121D0100              	call malloc;to create the pair in the stack
  9939 000067B2 C60021                  	mov byte [rax], T_pair ; to make it a pair
  9940 000067B5 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
  9941 000067B8 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
  9942 000067BC 4C894809                 	mov qword[rax+1+8],r9
  9943 000067C0 4989C1                  	mov r9, rax ;for the recursion 
  9944 000067C3 49FFC8                  	dec r8 ;we finished copy another opt param to the list
  9945 000067C6 4883EB08                	sub rbx, 8 ;to get the next param to copy
  9946 000067CA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0147
  9947                                  .L_lambda_opt_stack_shrink_loop_exit_0147:
  9948 000067CC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
  9949 000067D1 4883E903                	sub rcx, 3
  9950 000067D5 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
  9951 000067D9 4801CC                  	add rsp, rcx ;shrinking the stack
  9952 000067DC 4889E0                  	mov rax, rsp
  9953 000067DF 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
  9954 000067E2 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
  9955 000067E6 49FFC8                  	dec r8 ;we start with param 0, not 1 
  9956 000067E9 4883C018                	add rax, 3 * 8;now rax is param 0
  9957 000067ED 49C1E003                	shl r8, 3;convert to byte
  9958 000067F1 4C01C0                  	add rax, r8;now rax is the top of the stack
  9959 000067F4 4C8908                  	mov qword[rax], r9;puting the list at the top
  9960 000067F7 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
  9961 000067FB 4889E3                  	mov rbx, rsp 
  9962 000067FE 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
  9963 00006801 41BA02000000            	mov r10, 2;r10 is the not opt params length
  9964 00006807 49FFCA                  	dec r10 
  9965 0000680A 49C1E203                	shl r10, 3;to get bytes
  9966 0000680E 4883C318                	add rbx, 3*8;rbx is the first param
  9967 00006812 4C01D3                  	add rbx, r10; rbx is where the address to copy to
  9968 00006815 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9969 00006818 4C8900                  	mov qword[rax], r8
  9970 0000681B 4883E808                	sub rax, 8
  9971 0000681F 4883EB08                	sub rbx, 8
  9972 00006823 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
  9973 00006826 4C8900                  	mov qword[rax], r8
  9974 00006829 4883E808                	sub rax, 8
  9975 0000682D 4883EB08                	sub rbx, 8
  9976 00006831 4889E0                  	mov rax, rsp
  9977 00006834 4829C8                  	sub rax, rcx 	 ;now rax is original ret
  9978 00006837 48C744241003000000      	mov qword [rsp+2*8], 3
  9979 00006840 488B5808                	mov rbx, qword[rax + 8 *1]
  9980 00006844 48895C2408              	mov qword [rsp + 1*8] ,rbx
  9981 00006849 488B18                  	mov rbx, qword[rax]
  9982 0000684C 48891C24                	mov qword [rsp], rbx
  9983 00006850 C8000000                	enter 0, 0
  9984                                  	; preparing a tail-call
  9985 00006854 488B4530                	mov rax, PARAM(2)	; param ss
  9986 00006858 50                      	push rax
  9987 00006859 488B4528                	mov rax, PARAM(1)	; param unit
  9988 0000685D 50                      	push rax
  9989 0000685E 488B4520                	mov rax, PARAM(0)	; param f
  9990 00006862 50                      	push rax
  9991 00006863 6A03                    	push 3	; arg count
  9992 00006865 488B4510                	mov rax, ENV
  9993 00006869 488B00                  	mov rax, qword [rax + 8 * 0]
  9994 0000686C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
  9995 0000686F 488B00                  	mov rax, qword [rax]
  9996 00006872 803804                  	cmp byte [rax], T_closure
  9997 00006875 0F85A01B0100            	jne L_error_non_closure
  9998 0000687B FF7001                  	push SOB_CLOSURE_ENV(rax)
  9999 0000687E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10000 00006881 FF7500                  	push qword[rbp]
 10001 00006884 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10002 00006887 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10003 0000688B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10004 0000688F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10005 00006893 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10006 00006896 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10007 00006899 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10008 0000689E 4983C103                	add r9, 3 	 ;for getting to the params
 10009 000068A2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10010 000068A6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10011                                  .L_tc_recycle_frame_loop_0e7e:
 10012 000068A9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10013 000068AC 7410                    	je .L_tc_recycle_frame_done_0e7e
 10014 000068AE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10015 000068B1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10016 000068B4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10017 000068B8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10018 000068BC EBEB                    	jmp .L_tc_recycle_frame_loop_0e7e
 10019                                  .L_tc_recycle_frame_done_0e7e:
 10020 000068BE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10021 000068BF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10022 000068C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10023 000068C6 C9                      	leave
 10024 000068C7 C22800                  	ret AND_KILL_FRAME(3)
 10025                                  .L_lambda_opt_end_0147:	; new closure is in rax
 10026 000068CA C9                      	leave
 10027 000068CB C21800                  	ret AND_KILL_FRAME(1)
 10028                                  .L_lambda_simple_end_0a68:	; new closure is in rax
 10029 000068CE 803804                  	cmp byte [rax], T_closure
 10030 000068D1 0F85441B0100            	jne L_error_non_closure
 10031 000068D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10032 000068DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10033 000068DD 48890425[F0140000]      	mov qword [free_var_86], rax
 10034 000068E5 48B8-                   	mov rax, sob_void
 10034 000068E7 [0000000000000000] 
 10035                                  
 10036 000068EF 4889C7                  	mov rdi, rax
 10037 000068F2 E8221E0100              	call print_sexpr_if_not_void
 10038                                  	; preparing a non-tail-call
 10039 000068F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10040 000068FC E8C31B0100              	call malloc
 10041 00006901 50                      	push rax
 10042 00006902 BF00000000              	mov rdi, 8 * 0	; new rib
 10043 00006907 E8B81B0100              	call malloc
 10044 0000690C 50                      	push rax
 10045 0000690D BF08000000              	mov rdi, 8 * 1	; extended env
 10046 00006912 E8AD1B0100              	call malloc
 10047 00006917 488B7D10                	mov rdi, ENV
 10048 0000691B BE00000000              	mov rsi, 0
 10049 00006920 BA01000000              	mov rdx, 1
 10050                                  .L_lambda_simple_env_loop_0a6a:	; ext_env[i + 1] <-- env[i]
 10051 00006925 4883FE00                	cmp rsi, 0
 10052 00006929 7410                    	je .L_lambda_simple_env_end_0a6a
 10053 0000692B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10054 0000692F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10055 00006933 48FFC6                  	inc rsi
 10056 00006936 48FFC2                  	inc rdx
 10057 00006939 EBEA                    	jmp .L_lambda_simple_env_loop_0a6a
 10058                                  .L_lambda_simple_env_end_0a6a:
 10059 0000693B 5B                      	pop rbx
 10060 0000693C BE00000000              	mov rsi, 0
 10061                                  .L_lambda_simple_params_loop_0a6a:	; copy params
 10062 00006941 4883FE00                	cmp rsi, 0
 10063 00006945 740E                    	je .L_lambda_simple_params_end_0a6a
 10064 00006947 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10065 0000694C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10066 00006950 48FFC6                  	inc rsi
 10067 00006953 EBEC                    	jmp .L_lambda_simple_params_loop_0a6a
 10068                                  .L_lambda_simple_params_end_0a6a:
 10069 00006955 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10070 00006958 4889C3                  	mov rbx, rax
 10071 0000695B 58                      	pop rax
 10072 0000695C C60004                  	mov byte [rax], T_closure
 10073 0000695F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10074 00006963 48C74009[70690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a6a
 10075 0000696B E998000000              	jmp .L_lambda_simple_end_0a6a
 10076                                  .L_lambda_simple_code_0a6a:	; lambda-simple body
 10077 00006970 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10078 00006976 740B                    	je .L_lambda_simple_arity_check_ok_0a6a
 10079 00006978 FF742410                	push qword [rsp + 8 * 2]
 10080 0000697C 6A00                    	push 0
 10081 0000697E E9FA1A0100              	jmp L_error_incorrect_arity_simple
 10082                                  .L_lambda_simple_arity_check_ok_0a6a:
 10083 00006983 C8000000                	enter 0, 0
 10084                                  	; preparing a tail-call
 10085 00006987 48B8-                   	mov rax, L_constants + 2187
 10085 00006989 [8B08000000000000] 
 10086 00006991 50                      	push rax
 10087 00006992 48B8-                   	mov rax, L_constants + 2178
 10087 00006994 [8208000000000000] 
 10088 0000699C 50                      	push rax
 10089 0000699D 6A02                    	push 2	; arg count
 10090 0000699F 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 10091 000069A7 803805                  	cmp byte [rax], T_undefined
 10092 000069AA 0F84E7190100            	je L_error_fvar_undefined
 10093 000069B0 803804                  	cmp byte [rax], T_closure
 10094 000069B3 0F85621A0100            	jne L_error_non_closure
 10095 000069B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10096 000069BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10097 000069BF FF7500                  	push qword[rbp]
 10098 000069C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10099 000069C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10100 000069C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10101 000069CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10102 000069D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10103 000069D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10104 000069D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10105 000069DC 4983C103                	add r9, 3 	 ;for getting to the params
 10106 000069E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10107 000069E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10108                                  .L_tc_recycle_frame_loop_0e80:
 10109 000069E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10110 000069EA 7410                    	je .L_tc_recycle_frame_done_0e80
 10111 000069EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10112 000069EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10113 000069F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10114 000069F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10115 000069FA EBEB                    	jmp .L_tc_recycle_frame_loop_0e80
 10116                                  .L_tc_recycle_frame_done_0e80:
 10117 000069FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10118 000069FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10119 00006A01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10120 00006A04 C9                      	leave
 10121 00006A05 C21000                  	ret AND_KILL_FRAME(0)
 10122                                  .L_lambda_simple_end_0a6a:	; new closure is in rax
 10123 00006A08 50                      	push rax
 10124 00006A09 6A01                    	push 1	; arg count
 10125 00006A0B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10126 00006A10 E8AF1A0100              	call malloc
 10127 00006A15 50                      	push rax
 10128 00006A16 BF00000000              	mov rdi, 8 * 0	; new rib
 10129 00006A1B E8A41A0100              	call malloc
 10130 00006A20 50                      	push rax
 10131 00006A21 BF08000000              	mov rdi, 8 * 1	; extended env
 10132 00006A26 E8991A0100              	call malloc
 10133 00006A2B 488B7D10                	mov rdi, ENV
 10134 00006A2F BE00000000              	mov rsi, 0
 10135 00006A34 BA01000000              	mov rdx, 1
 10136                                  .L_lambda_simple_env_loop_0a6b:	; ext_env[i + 1] <-- env[i]
 10137 00006A39 4883FE00                	cmp rsi, 0
 10138 00006A3D 7410                    	je .L_lambda_simple_env_end_0a6b
 10139 00006A3F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10140 00006A43 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10141 00006A47 48FFC6                  	inc rsi
 10142 00006A4A 48FFC2                  	inc rdx
 10143 00006A4D EBEA                    	jmp .L_lambda_simple_env_loop_0a6b
 10144                                  .L_lambda_simple_env_end_0a6b:
 10145 00006A4F 5B                      	pop rbx
 10146 00006A50 BE00000000              	mov rsi, 0
 10147                                  .L_lambda_simple_params_loop_0a6b:	; copy params
 10148 00006A55 4883FE00                	cmp rsi, 0
 10149 00006A59 740E                    	je .L_lambda_simple_params_end_0a6b
 10150 00006A5B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10151 00006A60 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10152 00006A64 48FFC6                  	inc rsi
 10153 00006A67 EBEC                    	jmp .L_lambda_simple_params_loop_0a6b
 10154                                  .L_lambda_simple_params_end_0a6b:
 10155 00006A69 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10156 00006A6C 4889C3                  	mov rbx, rax
 10157 00006A6F 58                      	pop rax
 10158 00006A70 C60004                  	mov byte [rax], T_closure
 10159 00006A73 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10160 00006A77 48C74009[846A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a6b
 10161 00006A7F E9FF0C0000              	jmp .L_lambda_simple_end_0a6b
 10162                                  .L_lambda_simple_code_0a6b:	; lambda-simple body
 10163 00006A84 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10164 00006A8A 740B                    	je .L_lambda_simple_arity_check_ok_0a6b
 10165 00006A8C FF742410                	push qword [rsp + 8 * 2]
 10166 00006A90 6A01                    	push 1
 10167 00006A92 E9E6190100              	jmp L_error_incorrect_arity_simple
 10168                                  .L_lambda_simple_arity_check_ok_0a6b:
 10169 00006A97 C8000000                	enter 0, 0
 10170                                  	; preparing a tail-call
 10171 00006A9B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10172 00006AA0 E81F1A0100              	call malloc
 10173 00006AA5 50                      	push rax
 10174 00006AA6 BF08000000              	mov rdi, 8 * 1	; new rib
 10175 00006AAB E8141A0100              	call malloc
 10176 00006AB0 50                      	push rax
 10177 00006AB1 BF10000000              	mov rdi, 8 * 2	; extended env
 10178 00006AB6 E8091A0100              	call malloc
 10179 00006ABB 488B7D10                	mov rdi, ENV
 10180 00006ABF BE00000000              	mov rsi, 0
 10181 00006AC4 BA01000000              	mov rdx, 1
 10182                                  .L_lambda_simple_env_loop_0a6c:	; ext_env[i + 1] <-- env[i]
 10183 00006AC9 4883FE01                	cmp rsi, 1
 10184 00006ACD 7410                    	je .L_lambda_simple_env_end_0a6c
 10185 00006ACF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10186 00006AD3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10187 00006AD7 48FFC6                  	inc rsi
 10188 00006ADA 48FFC2                  	inc rdx
 10189 00006ADD EBEA                    	jmp .L_lambda_simple_env_loop_0a6c
 10190                                  .L_lambda_simple_env_end_0a6c:
 10191 00006ADF 5B                      	pop rbx
 10192 00006AE0 BE00000000              	mov rsi, 0
 10193                                  .L_lambda_simple_params_loop_0a6c:	; copy params
 10194 00006AE5 4883FE01                	cmp rsi, 1
 10195 00006AE9 740E                    	je .L_lambda_simple_params_end_0a6c
 10196 00006AEB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10197 00006AF0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10198 00006AF4 48FFC6                  	inc rsi
 10199 00006AF7 EBEC                    	jmp .L_lambda_simple_params_loop_0a6c
 10200                                  .L_lambda_simple_params_end_0a6c:
 10201 00006AF9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10202 00006AFC 4889C3                  	mov rbx, rax
 10203 00006AFF 58                      	pop rax
 10204 00006B00 C60004                  	mov byte [rax], T_closure
 10205 00006B03 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10206 00006B07 48C74009[146B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a6c
 10207 00006B0F E9EE080000              	jmp .L_lambda_simple_end_0a6c
 10208                                  .L_lambda_simple_code_0a6c:	; lambda-simple body
 10209 00006B14 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10210 00006B1A 740B                    	je .L_lambda_simple_arity_check_ok_0a6c
 10211 00006B1C FF742410                	push qword [rsp + 8 * 2]
 10212 00006B20 6A02                    	push 2
 10213 00006B22 E956190100              	jmp L_error_incorrect_arity_simple
 10214                                  .L_lambda_simple_arity_check_ok_0a6c:
 10215 00006B27 C8000000                	enter 0, 0
 10216                                  	; preparing a non-tail-call
 10217 00006B2B 488B4520                	mov rax, PARAM(0)	; param a
 10218 00006B2F 50                      	push rax
 10219 00006B30 6A01                    	push 1	; arg count
 10220 00006B32 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 10221 00006B3A 803805                  	cmp byte [rax], T_undefined
 10222 00006B3D 0F8454180100            	je L_error_fvar_undefined
 10223 00006B43 803804                  	cmp byte [rax], T_closure
 10224 00006B46 0F85CF180100            	jne L_error_non_closure
 10225 00006B4C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10226 00006B4F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10227 00006B52 483D[02000000]          	cmp rax, sob_boolean_false
 10228 00006B58 0F849F020000            	je .L_if_else_07ca
 10229                                  	; preparing a non-tail-call
 10230 00006B5E 488B4528                	mov rax, PARAM(1)	; param b
 10231 00006B62 50                      	push rax
 10232 00006B63 6A01                    	push 1	; arg count
 10233 00006B65 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 10234 00006B6D 803805                  	cmp byte [rax], T_undefined
 10235 00006B70 0F8421180100            	je L_error_fvar_undefined
 10236 00006B76 803804                  	cmp byte [rax], T_closure
 10237 00006B79 0F859C180100            	jne L_error_non_closure
 10238 00006B7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10239 00006B82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10240 00006B85 483D[02000000]          	cmp rax, sob_boolean_false
 10241 00006B8B 7476                    	je .L_if_else_07c1
 10242                                  	; preparing a tail-call
 10243 00006B8D 488B4528                	mov rax, PARAM(1)	; param b
 10244 00006B91 50                      	push rax
 10245 00006B92 488B4520                	mov rax, PARAM(0)	; param a
 10246 00006B96 50                      	push rax
 10247 00006B97 6A02                    	push 2	; arg count
 10248 00006B99 488B0425[F50F0000]      	mov rax, qword [free_var_11]	; free var __bin-add-zz
 10249 00006BA1 803805                  	cmp byte [rax], T_undefined
 10250 00006BA4 0F84ED170100            	je L_error_fvar_undefined
 10251 00006BAA 803804                  	cmp byte [rax], T_closure
 10252 00006BAD 0F8568180100            	jne L_error_non_closure
 10253 00006BB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10254 00006BB6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10255 00006BB9 FF7500                  	push qword[rbp]
 10256 00006BBC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10257 00006BBF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10258 00006BC3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10259 00006BC7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10260 00006BCB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10261 00006BCE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10262 00006BD1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10263 00006BD6 4983C103                	add r9, 3 	 ;for getting to the params
 10264 00006BDA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10265 00006BDE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10266                                  .L_tc_recycle_frame_loop_0e81:
 10267 00006BE1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10268 00006BE4 7410                    	je .L_tc_recycle_frame_done_0e81
 10269 00006BE6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10270 00006BE9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10271 00006BEC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10272 00006BF0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10273 00006BF4 EBEB                    	jmp .L_tc_recycle_frame_loop_0e81
 10274                                  .L_tc_recycle_frame_done_0e81:
 10275 00006BF6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10276 00006BF7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10277 00006BFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10278 00006BFE E9F5010000              	jmp .L_if_end_07c1
 10279                                  .L_if_else_07c1:
 10280                                  	; preparing a non-tail-call
 10281 00006C03 488B4528                	mov rax, PARAM(1)	; param b
 10282 00006C07 50                      	push rax
 10283 00006C08 6A01                    	push 1	; arg count
 10284 00006C0A 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 10285 00006C12 803805                  	cmp byte [rax], T_undefined
 10286 00006C15 0F847C170100            	je L_error_fvar_undefined
 10287 00006C1B 803804                  	cmp byte [rax], T_closure
 10288 00006C1E 0F85F7170100            	jne L_error_non_closure
 10289 00006C24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10290 00006C27 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10291 00006C2A 483D[02000000]          	cmp rax, sob_boolean_false
 10292 00006C30 0F8499000000            	je .L_if_else_07c0
 10293                                  	; preparing a tail-call
 10294 00006C36 488B4528                	mov rax, PARAM(1)	; param b
 10295 00006C3A 50                      	push rax
 10296                                  	; preparing a non-tail-call
 10297 00006C3B 488B4520                	mov rax, PARAM(0)	; param a
 10298 00006C3F 50                      	push rax
 10299 00006C40 6A01                    	push 1	; arg count
 10300 00006C42 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 10301 00006C4A 803805                  	cmp byte [rax], T_undefined
 10302 00006C4D 0F8444170100            	je L_error_fvar_undefined
 10303 00006C53 803804                  	cmp byte [rax], T_closure
 10304 00006C56 0F85BF170100            	jne L_error_non_closure
 10305 00006C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 10306 00006C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 10307 00006C62 50                      	push rax
 10308 00006C63 6A02                    	push 2	; arg count
 10309 00006C65 488B0425[D30F0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10310 00006C6D 803805                  	cmp byte [rax], T_undefined
 10311 00006C70 0F8421170100            	je L_error_fvar_undefined
 10312 00006C76 803804                  	cmp byte [rax], T_closure
 10313 00006C79 0F859C170100            	jne L_error_non_closure
 10314 00006C7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10315 00006C82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10316 00006C85 FF7500                  	push qword[rbp]
 10317 00006C88 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10318 00006C8B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10319 00006C8F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10320 00006C93 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10321 00006C97 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10322 00006C9A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10323 00006C9D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10324 00006CA2 4983C103                	add r9, 3 	 ;for getting to the params
 10325 00006CA6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10326 00006CAA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10327                                  .L_tc_recycle_frame_loop_0e82:
 10328 00006CAD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10329 00006CB0 7410                    	je .L_tc_recycle_frame_done_0e82
 10330 00006CB2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10331 00006CB5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10332 00006CB8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10333 00006CBC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10334 00006CC0 EBEB                    	jmp .L_tc_recycle_frame_loop_0e82
 10335                                  .L_tc_recycle_frame_done_0e82:
 10336 00006CC2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10337 00006CC3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10338 00006CC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10339 00006CCA E929010000              	jmp .L_if_end_07c0
 10340                                  .L_if_else_07c0:
 10341                                  	; preparing a non-tail-call
 10342 00006CCF 488B4528                	mov rax, PARAM(1)	; param b
 10343 00006CD3 50                      	push rax
 10344 00006CD4 6A01                    	push 1	; arg count
 10345 00006CD6 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 10346 00006CDE 803805                  	cmp byte [rax], T_undefined
 10347 00006CE1 0F84B0160100            	je L_error_fvar_undefined
 10348 00006CE7 803804                  	cmp byte [rax], T_closure
 10349 00006CEA 0F852B170100            	jne L_error_non_closure
 10350 00006CF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10351 00006CF3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10352 00006CF6 483D[02000000]          	cmp rax, sob_boolean_false
 10353 00006CFC 0F8496000000            	je .L_if_else_07bf
 10354                                  	; preparing a tail-call
 10355 00006D02 488B4528                	mov rax, PARAM(1)	; param b
 10356 00006D06 50                      	push rax
 10357                                  	; preparing a non-tail-call
 10358 00006D07 488B4520                	mov rax, PARAM(0)	; param a
 10359 00006D0B 50                      	push rax
 10360 00006D0C 6A01                    	push 1	; arg count
 10361 00006D0E 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 10362 00006D16 803805                  	cmp byte [rax], T_undefined
 10363 00006D19 0F8478160100            	je L_error_fvar_undefined
 10364 00006D1F 803804                  	cmp byte [rax], T_closure
 10365 00006D22 0F85F3160100            	jne L_error_non_closure
 10366 00006D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10367 00006D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10368 00006D2E 50                      	push rax
 10369 00006D2F 6A02                    	push 2	; arg count
 10370 00006D31 488B0425[E40F0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10371 00006D39 803805                  	cmp byte [rax], T_undefined
 10372 00006D3C 0F8455160100            	je L_error_fvar_undefined
 10373 00006D42 803804                  	cmp byte [rax], T_closure
 10374 00006D45 0F85D0160100            	jne L_error_non_closure
 10375 00006D4B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10376 00006D4E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10377 00006D51 FF7500                  	push qword[rbp]
 10378 00006D54 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10379 00006D57 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10380 00006D5B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10381 00006D5F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10382 00006D63 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10383 00006D66 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10384 00006D69 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10385 00006D6E 4983C103                	add r9, 3 	 ;for getting to the params
 10386 00006D72 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10387 00006D76 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10388                                  .L_tc_recycle_frame_loop_0e83:
 10389 00006D79 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10390 00006D7C 7410                    	je .L_tc_recycle_frame_done_0e83
 10391 00006D7E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10392 00006D81 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10393 00006D84 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10394 00006D88 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10395 00006D8C EBEB                    	jmp .L_tc_recycle_frame_loop_0e83
 10396                                  .L_tc_recycle_frame_done_0e83:
 10397 00006D8E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10398 00006D8F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10399 00006D93 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10400 00006D96 EB60                    	jmp .L_if_end_07bf
 10401                                  .L_if_else_07bf:
 10402                                  	; preparing a tail-call
 10403 00006D98 6A00                    	push 0	; arg count
 10404 00006D9A 488B4510                	mov rax, ENV
 10405 00006D9E 488B00                  	mov rax, qword [rax + 8 * 0]
 10406 00006DA1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10407 00006DA4 803804                  	cmp byte [rax], T_closure
 10408 00006DA7 0F856E160100            	jne L_error_non_closure
 10409 00006DAD FF7001                  	push SOB_CLOSURE_ENV(rax)
 10410 00006DB0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10411 00006DB3 FF7500                  	push qword[rbp]
 10412 00006DB6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10413 00006DB9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10414 00006DBD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10415 00006DC1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10416 00006DC5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10417 00006DC8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10418 00006DCB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10419 00006DD0 4983C103                	add r9, 3 	 ;for getting to the params
 10420 00006DD4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10421 00006DD8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10422                                  .L_tc_recycle_frame_loop_0e84:
 10423 00006DDB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10424 00006DDE 7410                    	je .L_tc_recycle_frame_done_0e84
 10425 00006DE0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10426 00006DE3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10427 00006DE6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10428 00006DEA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10429 00006DEE EBEB                    	jmp .L_tc_recycle_frame_loop_0e84
 10430                                  .L_tc_recycle_frame_done_0e84:
 10431 00006DF0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10432 00006DF1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10433 00006DF5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10434                                  .L_if_end_07bf:
 10435                                  .L_if_end_07c0:
 10436                                  .L_if_end_07c1:
 10437 00006DF8 E901060000              	jmp .L_if_end_07ca
 10438                                  .L_if_else_07ca:
 10439                                  	; preparing a non-tail-call
 10440 00006DFD 488B4520                	mov rax, PARAM(0)	; param a
 10441 00006E01 50                      	push rax
 10442 00006E02 6A01                    	push 1	; arg count
 10443 00006E04 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 10444 00006E0C 803805                  	cmp byte [rax], T_undefined
 10445 00006E0F 0F8482150100            	je L_error_fvar_undefined
 10446 00006E15 803804                  	cmp byte [rax], T_closure
 10447 00006E18 0F85FD150100            	jne L_error_non_closure
 10448 00006E1E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10449 00006E21 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10450 00006E24 483D[02000000]          	cmp rax, sob_boolean_false
 10451 00006E2A 0F849F020000            	je .L_if_else_07c9
 10452                                  	; preparing a non-tail-call
 10453 00006E30 488B4528                	mov rax, PARAM(1)	; param b
 10454 00006E34 50                      	push rax
 10455 00006E35 6A01                    	push 1	; arg count
 10456 00006E37 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 10457 00006E3F 803805                  	cmp byte [rax], T_undefined
 10458 00006E42 0F844F150100            	je L_error_fvar_undefined
 10459 00006E48 803804                  	cmp byte [rax], T_closure
 10460 00006E4B 0F85CA150100            	jne L_error_non_closure
 10461 00006E51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10462 00006E54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10463 00006E57 483D[02000000]          	cmp rax, sob_boolean_false
 10464 00006E5D 0F8499000000            	je .L_if_else_07c4
 10465                                  	; preparing a tail-call
 10466                                  	; preparing a non-tail-call
 10467 00006E63 488B4528                	mov rax, PARAM(1)	; param b
 10468 00006E67 50                      	push rax
 10469 00006E68 6A01                    	push 1	; arg count
 10470 00006E6A 488B0425[16110000]      	mov rax, qword [free_var_28]	; free var __bin_integer_to_fraction
 10471 00006E72 803805                  	cmp byte [rax], T_undefined
 10472 00006E75 0F841C150100            	je L_error_fvar_undefined
 10473 00006E7B 803804                  	cmp byte [rax], T_closure
 10474 00006E7E 0F8597150100            	jne L_error_non_closure
 10475 00006E84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10476 00006E87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10477 00006E8A 50                      	push rax
 10478 00006E8B 488B4520                	mov rax, PARAM(0)	; param a
 10479 00006E8F 50                      	push rax
 10480 00006E90 6A02                    	push 2	; arg count
 10481 00006E92 488B0425[D30F0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10482 00006E9A 803805                  	cmp byte [rax], T_undefined
 10483 00006E9D 0F84F4140100            	je L_error_fvar_undefined
 10484 00006EA3 803804                  	cmp byte [rax], T_closure
 10485 00006EA6 0F856F150100            	jne L_error_non_closure
 10486 00006EAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 10487 00006EAF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10488 00006EB2 FF7500                  	push qword[rbp]
 10489 00006EB5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10490 00006EB8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10491 00006EBC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10492 00006EC0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10493 00006EC4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10494 00006EC7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10495 00006ECA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10496 00006ECF 4983C103                	add r9, 3 	 ;for getting to the params
 10497 00006ED3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10498 00006ED7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10499                                  .L_tc_recycle_frame_loop_0e85:
 10500 00006EDA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10501 00006EDD 7410                    	je .L_tc_recycle_frame_done_0e85
 10502 00006EDF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10503 00006EE2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10504 00006EE5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10505 00006EE9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10506 00006EED EBEB                    	jmp .L_tc_recycle_frame_loop_0e85
 10507                                  .L_tc_recycle_frame_done_0e85:
 10508 00006EEF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10509 00006EF0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10510 00006EF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10511 00006EF7 E9CE010000              	jmp .L_if_end_07c4
 10512                                  .L_if_else_07c4:
 10513                                  	; preparing a non-tail-call
 10514 00006EFC 488B4528                	mov rax, PARAM(1)	; param b
 10515 00006F00 50                      	push rax
 10516 00006F01 6A01                    	push 1	; arg count
 10517 00006F03 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 10518 00006F0B 803805                  	cmp byte [rax], T_undefined
 10519 00006F0E 0F8483140100            	je L_error_fvar_undefined
 10520 00006F14 803804                  	cmp byte [rax], T_closure
 10521 00006F17 0F85FE140100            	jne L_error_non_closure
 10522 00006F1D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10523 00006F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10524 00006F23 483D[02000000]          	cmp rax, sob_boolean_false
 10525 00006F29 7476                    	je .L_if_else_07c3
 10526                                  	; preparing a tail-call
 10527 00006F2B 488B4528                	mov rax, PARAM(1)	; param b
 10528 00006F2F 50                      	push rax
 10529 00006F30 488B4520                	mov rax, PARAM(0)	; param a
 10530 00006F34 50                      	push rax
 10531 00006F35 6A02                    	push 2	; arg count
 10532 00006F37 488B0425[D30F0000]      	mov rax, qword [free_var_9]	; free var __bin-add-qq
 10533 00006F3F 803805                  	cmp byte [rax], T_undefined
 10534 00006F42 0F844F140100            	je L_error_fvar_undefined
 10535 00006F48 803804                  	cmp byte [rax], T_closure
 10536 00006F4B 0F85CA140100            	jne L_error_non_closure
 10537 00006F51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10538 00006F54 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10539 00006F57 FF7500                  	push qword[rbp]
 10540 00006F5A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10541 00006F5D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10542 00006F61 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10543 00006F65 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10544 00006F69 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10545 00006F6C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10546 00006F6F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10547 00006F74 4983C103                	add r9, 3 	 ;for getting to the params
 10548 00006F78 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10549 00006F7C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10550                                  .L_tc_recycle_frame_loop_0e86:
 10551 00006F7F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10552 00006F82 7410                    	je .L_tc_recycle_frame_done_0e86
 10553 00006F84 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10554 00006F87 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10555 00006F8A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10556 00006F8E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10557 00006F92 EBEB                    	jmp .L_tc_recycle_frame_loop_0e86
 10558                                  .L_tc_recycle_frame_done_0e86:
 10559 00006F94 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10560 00006F95 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10561 00006F99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10562 00006F9C E929010000              	jmp .L_if_end_07c3
 10563                                  .L_if_else_07c3:
 10564                                  	; preparing a non-tail-call
 10565 00006FA1 488B4528                	mov rax, PARAM(1)	; param b
 10566 00006FA5 50                      	push rax
 10567 00006FA6 6A01                    	push 1	; arg count
 10568 00006FA8 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 10569 00006FB0 803805                  	cmp byte [rax], T_undefined
 10570 00006FB3 0F84DE130100            	je L_error_fvar_undefined
 10571 00006FB9 803804                  	cmp byte [rax], T_closure
 10572 00006FBC 0F8559140100            	jne L_error_non_closure
 10573 00006FC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10574 00006FC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10575 00006FC8 483D[02000000]          	cmp rax, sob_boolean_false
 10576 00006FCE 0F8496000000            	je .L_if_else_07c2
 10577                                  	; preparing a tail-call
 10578 00006FD4 488B4528                	mov rax, PARAM(1)	; param b
 10579 00006FD8 50                      	push rax
 10580                                  	; preparing a non-tail-call
 10581 00006FD9 488B4520                	mov rax, PARAM(0)	; param a
 10582 00006FDD 50                      	push rax
 10583 00006FDE 6A01                    	push 1	; arg count
 10584 00006FE0 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10585 00006FE8 803805                  	cmp byte [rax], T_undefined
 10586 00006FEB 0F84A6130100            	je L_error_fvar_undefined
 10587 00006FF1 803804                  	cmp byte [rax], T_closure
 10588 00006FF4 0F8521140100            	jne L_error_non_closure
 10589 00006FFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10590 00006FFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10591 00007000 50                      	push rax
 10592 00007001 6A02                    	push 2	; arg count
 10593 00007003 488B0425[E40F0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10594 0000700B 803805                  	cmp byte [rax], T_undefined
 10595 0000700E 0F8483130100            	je L_error_fvar_undefined
 10596 00007014 803804                  	cmp byte [rax], T_closure
 10597 00007017 0F85FE130100            	jne L_error_non_closure
 10598 0000701D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10599 00007020 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10600 00007023 FF7500                  	push qword[rbp]
 10601 00007026 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10602 00007029 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10603 0000702D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10604 00007031 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10605 00007035 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10606 00007038 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10607 0000703B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10608 00007040 4983C103                	add r9, 3 	 ;for getting to the params
 10609 00007044 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10610 00007048 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10611                                  .L_tc_recycle_frame_loop_0e87:
 10612 0000704B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10613 0000704E 7410                    	je .L_tc_recycle_frame_done_0e87
 10614 00007050 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10615 00007053 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10616 00007056 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10617 0000705A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10618 0000705E EBEB                    	jmp .L_tc_recycle_frame_loop_0e87
 10619                                  .L_tc_recycle_frame_done_0e87:
 10620 00007060 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10621 00007061 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10622 00007065 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10623 00007068 EB60                    	jmp .L_if_end_07c2
 10624                                  .L_if_else_07c2:
 10625                                  	; preparing a tail-call
 10626 0000706A 6A00                    	push 0	; arg count
 10627 0000706C 488B4510                	mov rax, ENV
 10628 00007070 488B00                  	mov rax, qword [rax + 8 * 0]
 10629 00007073 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10630 00007076 803804                  	cmp byte [rax], T_closure
 10631 00007079 0F859C130100            	jne L_error_non_closure
 10632 0000707F FF7001                  	push SOB_CLOSURE_ENV(rax)
 10633 00007082 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10634 00007085 FF7500                  	push qword[rbp]
 10635 00007088 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10636 0000708B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10637 0000708F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10638 00007093 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10639 00007097 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10640 0000709A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10641 0000709D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10642 000070A2 4983C103                	add r9, 3 	 ;for getting to the params
 10643 000070A6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10644 000070AA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10645                                  .L_tc_recycle_frame_loop_0e88:
 10646 000070AD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10647 000070B0 7410                    	je .L_tc_recycle_frame_done_0e88
 10648 000070B2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10649 000070B5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10650 000070B8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10651 000070BC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10652 000070C0 EBEB                    	jmp .L_tc_recycle_frame_loop_0e88
 10653                                  .L_tc_recycle_frame_done_0e88:
 10654 000070C2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10655 000070C3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10656 000070C7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10657                                  .L_if_end_07c2:
 10658                                  .L_if_end_07c3:
 10659                                  .L_if_end_07c4:
 10660 000070CA E92F030000              	jmp .L_if_end_07c9
 10661                                  .L_if_else_07c9:
 10662                                  	; preparing a non-tail-call
 10663 000070CF 488B4520                	mov rax, PARAM(0)	; param a
 10664 000070D3 50                      	push rax
 10665 000070D4 6A01                    	push 1	; arg count
 10666 000070D6 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 10667 000070DE 803805                  	cmp byte [rax], T_undefined
 10668 000070E1 0F84B0120100            	je L_error_fvar_undefined
 10669 000070E7 803804                  	cmp byte [rax], T_closure
 10670 000070EA 0F852B130100            	jne L_error_non_closure
 10671 000070F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10672 000070F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10673 000070F6 483D[02000000]          	cmp rax, sob_boolean_false
 10674 000070FC 0F849C020000            	je .L_if_else_07c8
 10675                                  	; preparing a non-tail-call
 10676 00007102 488B4528                	mov rax, PARAM(1)	; param b
 10677 00007106 50                      	push rax
 10678 00007107 6A01                    	push 1	; arg count
 10679 00007109 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 10680 00007111 803805                  	cmp byte [rax], T_undefined
 10681 00007114 0F847D120100            	je L_error_fvar_undefined
 10682 0000711A 803804                  	cmp byte [rax], T_closure
 10683 0000711D 0F85F8120100            	jne L_error_non_closure
 10684 00007123 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10685 00007126 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10686 00007129 483D[02000000]          	cmp rax, sob_boolean_false
 10687 0000712F 0F8499000000            	je .L_if_else_07c7
 10688                                  	; preparing a tail-call
 10689                                  	; preparing a non-tail-call
 10690 00007135 488B4528                	mov rax, PARAM(1)	; param b
 10691 00007139 50                      	push rax
 10692 0000713A 6A01                    	push 1	; arg count
 10693 0000713C 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 10694 00007144 803805                  	cmp byte [rax], T_undefined
 10695 00007147 0F844A120100            	je L_error_fvar_undefined
 10696 0000714D 803804                  	cmp byte [rax], T_closure
 10697 00007150 0F85C5120100            	jne L_error_non_closure
 10698 00007156 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10699 00007159 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10700 0000715C 50                      	push rax
 10701 0000715D 488B4520                	mov rax, PARAM(0)	; param a
 10702 00007161 50                      	push rax
 10703 00007162 6A02                    	push 2	; arg count
 10704 00007164 488B0425[E40F0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10705 0000716C 803805                  	cmp byte [rax], T_undefined
 10706 0000716F 0F8422120100            	je L_error_fvar_undefined
 10707 00007175 803804                  	cmp byte [rax], T_closure
 10708 00007178 0F859D120100            	jne L_error_non_closure
 10709 0000717E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10710 00007181 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10711 00007184 FF7500                  	push qword[rbp]
 10712 00007187 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10713 0000718A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10714 0000718E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10715 00007192 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10716 00007196 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10717 00007199 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10718 0000719C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10719 000071A1 4983C103                	add r9, 3 	 ;for getting to the params
 10720 000071A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10721 000071A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10722                                  .L_tc_recycle_frame_loop_0e89:
 10723 000071AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10724 000071AF 7410                    	je .L_tc_recycle_frame_done_0e89
 10725 000071B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10726 000071B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10727 000071B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10728 000071BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10729 000071BF EBEB                    	jmp .L_tc_recycle_frame_loop_0e89
 10730                                  .L_tc_recycle_frame_done_0e89:
 10731 000071C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10732 000071C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10733 000071C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10734 000071C9 E9CE010000              	jmp .L_if_end_07c7
 10735                                  .L_if_else_07c7:
 10736                                  	; preparing a non-tail-call
 10737 000071CE 488B4528                	mov rax, PARAM(1)	; param b
 10738 000071D2 50                      	push rax
 10739 000071D3 6A01                    	push 1	; arg count
 10740 000071D5 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 10741 000071DD 803805                  	cmp byte [rax], T_undefined
 10742 000071E0 0F84B1110100            	je L_error_fvar_undefined
 10743 000071E6 803804                  	cmp byte [rax], T_closure
 10744 000071E9 0F852C120100            	jne L_error_non_closure
 10745 000071EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10746 000071F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10747 000071F5 483D[02000000]          	cmp rax, sob_boolean_false
 10748 000071FB 0F8499000000            	je .L_if_else_07c6
 10749                                  	; preparing a tail-call
 10750                                  	; preparing a non-tail-call
 10751 00007201 488B4528                	mov rax, PARAM(1)	; param b
 10752 00007205 50                      	push rax
 10753 00007206 6A01                    	push 1	; arg count
 10754 00007208 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 10755 00007210 803805                  	cmp byte [rax], T_undefined
 10756 00007213 0F847E110100            	je L_error_fvar_undefined
 10757 00007219 803804                  	cmp byte [rax], T_closure
 10758 0000721C 0F85F9110100            	jne L_error_non_closure
 10759 00007222 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10760 00007225 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10761 00007228 50                      	push rax
 10762 00007229 488B4520                	mov rax, PARAM(0)	; param a
 10763 0000722D 50                      	push rax
 10764 0000722E 6A02                    	push 2	; arg count
 10765 00007230 488B0425[E40F0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10766 00007238 803805                  	cmp byte [rax], T_undefined
 10767 0000723B 0F8456110100            	je L_error_fvar_undefined
 10768 00007241 803804                  	cmp byte [rax], T_closure
 10769 00007244 0F85D1110100            	jne L_error_non_closure
 10770 0000724A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10771 0000724D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10772 00007250 FF7500                  	push qword[rbp]
 10773 00007253 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10774 00007256 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10775 0000725A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10776 0000725E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10777 00007262 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10778 00007265 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10779 00007268 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10780 0000726D 4983C103                	add r9, 3 	 ;for getting to the params
 10781 00007271 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10782 00007275 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10783                                  .L_tc_recycle_frame_loop_0e8a:
 10784 00007278 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10785 0000727B 7410                    	je .L_tc_recycle_frame_done_0e8a
 10786 0000727D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10787 00007280 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10788 00007283 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10789 00007287 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10790 0000728B EBEB                    	jmp .L_tc_recycle_frame_loop_0e8a
 10791                                  .L_tc_recycle_frame_done_0e8a:
 10792 0000728D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10793 0000728E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10794 00007292 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10795 00007295 E902010000              	jmp .L_if_end_07c6
 10796                                  .L_if_else_07c6:
 10797                                  	; preparing a non-tail-call
 10798 0000729A 488B4528                	mov rax, PARAM(1)	; param b
 10799 0000729E 50                      	push rax
 10800 0000729F 6A01                    	push 1	; arg count
 10801 000072A1 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 10802 000072A9 803805                  	cmp byte [rax], T_undefined
 10803 000072AC 0F84E5100100            	je L_error_fvar_undefined
 10804 000072B2 803804                  	cmp byte [rax], T_closure
 10805 000072B5 0F8560110100            	jne L_error_non_closure
 10806 000072BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 10807 000072BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 10808 000072C1 483D[02000000]          	cmp rax, sob_boolean_false
 10809 000072C7 7473                    	je .L_if_else_07c5
 10810                                  	; preparing a tail-call
 10811 000072C9 488B4528                	mov rax, PARAM(1)	; param b
 10812 000072CD 50                      	push rax
 10813 000072CE 488B4520                	mov rax, PARAM(0)	; param a
 10814 000072D2 50                      	push rax
 10815 000072D3 6A02                    	push 2	; arg count
 10816 000072D5 488B0425[E40F0000]      	mov rax, qword [free_var_10]	; free var __bin-add-rr
 10817 000072DD 803805                  	cmp byte [rax], T_undefined
 10818 000072E0 0F84B1100100            	je L_error_fvar_undefined
 10819 000072E6 803804                  	cmp byte [rax], T_closure
 10820 000072E9 0F852C110100            	jne L_error_non_closure
 10821 000072EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 10822 000072F2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10823 000072F5 FF7500                  	push qword[rbp]
 10824 000072F8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10825 000072FB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10826 000072FF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10827 00007303 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10828 00007307 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10829 0000730A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10830 0000730D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10831 00007312 4983C103                	add r9, 3 	 ;for getting to the params
 10832 00007316 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10833 0000731A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10834                                  .L_tc_recycle_frame_loop_0e8b:
 10835 0000731D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10836 00007320 7410                    	je .L_tc_recycle_frame_done_0e8b
 10837 00007322 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10838 00007325 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10839 00007328 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10840 0000732C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10841 00007330 EBEB                    	jmp .L_tc_recycle_frame_loop_0e8b
 10842                                  .L_tc_recycle_frame_done_0e8b:
 10843 00007332 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10844 00007333 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10845 00007337 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10846 0000733A EB60                    	jmp .L_if_end_07c5
 10847                                  .L_if_else_07c5:
 10848                                  	; preparing a tail-call
 10849 0000733C 6A00                    	push 0	; arg count
 10850 0000733E 488B4510                	mov rax, ENV
 10851 00007342 488B00                  	mov rax, qword [rax + 8 * 0]
 10852 00007345 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10853 00007348 803804                  	cmp byte [rax], T_closure
 10854 0000734B 0F85CA100100            	jne L_error_non_closure
 10855 00007351 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10856 00007354 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10857 00007357 FF7500                  	push qword[rbp]
 10858 0000735A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10859 0000735D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10860 00007361 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10861 00007365 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10862 00007369 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10863 0000736C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10864 0000736F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10865 00007374 4983C103                	add r9, 3 	 ;for getting to the params
 10866 00007378 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10867 0000737C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10868                                  .L_tc_recycle_frame_loop_0e8c:
 10869 0000737F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10870 00007382 7410                    	je .L_tc_recycle_frame_done_0e8c
 10871 00007384 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10872 00007387 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10873 0000738A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10874 0000738E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10875 00007392 EBEB                    	jmp .L_tc_recycle_frame_loop_0e8c
 10876                                  .L_tc_recycle_frame_done_0e8c:
 10877 00007394 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10878 00007395 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10879 00007399 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10880                                  .L_if_end_07c5:
 10881                                  .L_if_end_07c6:
 10882                                  .L_if_end_07c7:
 10883 0000739C EB60                    	jmp .L_if_end_07c8
 10884                                  .L_if_else_07c8:
 10885                                  	; preparing a tail-call
 10886 0000739E 6A00                    	push 0	; arg count
 10887 000073A0 488B4510                	mov rax, ENV
 10888 000073A4 488B00                  	mov rax, qword [rax + 8 * 0]
 10889 000073A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 10890 000073AA 803804                  	cmp byte [rax], T_closure
 10891 000073AD 0F8568100100            	jne L_error_non_closure
 10892 000073B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10893 000073B6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 10894 000073B9 FF7500                  	push qword[rbp]
 10895 000073BC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 10896 000073BF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 10897 000073C3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 10898 000073C7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 10899 000073CB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 10900 000073CE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 10901 000073D1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 10902 000073D6 4983C103                	add r9, 3 	 ;for getting to the params
 10903 000073DA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 10904 000073DE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 10905                                  .L_tc_recycle_frame_loop_0e8d:
 10906 000073E1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 10907 000073E4 7410                    	je .L_tc_recycle_frame_done_0e8d
 10908 000073E6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 10909 000073E9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 10910 000073EC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 10911 000073F0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 10912 000073F4 EBEB                    	jmp .L_tc_recycle_frame_loop_0e8d
 10913                                  .L_tc_recycle_frame_done_0e8d:
 10914 000073F6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 10915 000073F7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 10916 000073FB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10917                                  .L_if_end_07c8:
 10918                                  .L_if_end_07c9:
 10919                                  .L_if_end_07ca:
 10920 000073FE C9                      	leave
 10921 000073FF C22000                  	ret AND_KILL_FRAME(2)
 10922                                  .L_lambda_simple_end_0a6c:	; new closure is in rax
 10923 00007402 50                      	push rax
 10924 00007403 6A01                    	push 1	; arg count
 10925 00007405 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10926 0000740A E8B5100100              	call malloc
 10927 0000740F 50                      	push rax
 10928 00007410 BF08000000              	mov rdi, 8 * 1	; new rib
 10929 00007415 E8AA100100              	call malloc
 10930 0000741A 50                      	push rax
 10931 0000741B BF10000000              	mov rdi, 8 * 2	; extended env
 10932 00007420 E89F100100              	call malloc
 10933 00007425 488B7D10                	mov rdi, ENV
 10934 00007429 BE00000000              	mov rsi, 0
 10935 0000742E BA01000000              	mov rdx, 1
 10936                                  .L_lambda_simple_env_loop_0a6d:	; ext_env[i + 1] <-- env[i]
 10937 00007433 4883FE01                	cmp rsi, 1
 10938 00007437 7410                    	je .L_lambda_simple_env_end_0a6d
 10939 00007439 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10940 0000743D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10941 00007441 48FFC6                  	inc rsi
 10942 00007444 48FFC2                  	inc rdx
 10943 00007447 EBEA                    	jmp .L_lambda_simple_env_loop_0a6d
 10944                                  .L_lambda_simple_env_end_0a6d:
 10945 00007449 5B                      	pop rbx
 10946 0000744A BE00000000              	mov rsi, 0
 10947                                  .L_lambda_simple_params_loop_0a6d:	; copy params
 10948 0000744F 4883FE01                	cmp rsi, 1
 10949 00007453 740E                    	je .L_lambda_simple_params_end_0a6d
 10950 00007455 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10951 0000745A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10952 0000745E 48FFC6                  	inc rsi
 10953 00007461 EBEC                    	jmp .L_lambda_simple_params_loop_0a6d
 10954                                  .L_lambda_simple_params_end_0a6d:
 10955 00007463 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10956 00007466 4889C3                  	mov rbx, rax
 10957 00007469 58                      	pop rax
 10958 0000746A C60004                  	mov byte [rax], T_closure
 10959 0000746D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10960 00007471 48C74009[7E740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a6d
 10961 00007479 E9AD020000              	jmp .L_lambda_simple_end_0a6d
 10962                                  .L_lambda_simple_code_0a6d:	; lambda-simple body
 10963 0000747E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10964 00007484 740B                    	je .L_lambda_simple_arity_check_ok_0a6d
 10965 00007486 FF742410                	push qword [rsp + 8 * 2]
 10966 0000748A 6A01                    	push 1
 10967 0000748C E9EC0F0100              	jmp L_error_incorrect_arity_simple
 10968                                  .L_lambda_simple_arity_check_ok_0a6d:
 10969 00007491 C8000000                	enter 0, 0
 10970 00007495 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10971 0000749A E825100100              	call malloc
 10972 0000749F 50                      	push rax
 10973 000074A0 BF08000000              	mov rdi, 8 * 1	; new rib
 10974 000074A5 E81A100100              	call malloc
 10975 000074AA 50                      	push rax
 10976 000074AB BF18000000              	mov rdi, 8 * 3	; extended env
 10977 000074B0 E80F100100              	call malloc
 10978 000074B5 488B7D10                	mov rdi, ENV
 10979 000074B9 BE00000000              	mov rsi, 0
 10980 000074BE BA01000000              	mov rdx, 1
 10981                                  .L_lambda_opt_env_loop_0148:	; ext_env[i + 1] <-- env[i]
 10982 000074C3 4883FE02                	cmp rsi, 2
 10983 000074C7 7410                    	je .L_lambda_opt_env_end_0148
 10984 000074C9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10985 000074CD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10986 000074D1 48FFC6                  	inc rsi
 10987 000074D4 48FFC2                  	inc rdx
 10988 000074D7 EBEA                    	jmp .L_lambda_opt_env_loop_0148
 10989                                  .L_lambda_opt_env_end_0148:
 10990 000074D9 5B                      	pop rbx
 10991 000074DA BE00000000              	mov rsi, 0
 10992                                  .L_lambda_opt_params_loop_0148:	; copy params
 10993 000074DF 4883FE01                	cmp rsi, 1
 10994 000074E3 740E                    	je .L_lambda_opt_params_end_0148
 10995 000074E5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10996 000074EA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10997 000074EE 48FFC6                  	inc rsi
 10998 000074F1 EBEC                    	jmp .L_lambda_opt_params_loop_0148
 10999                                  .L_lambda_opt_params_end_0148:
 11000 000074F3 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 11001 000074F6 4889C3                  	mov rbx, rax
 11002 000074F9 58                      	pop rax
 11003 000074FA C60004                  	mov byte [rax], T_closure
 11004 000074FD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11005 00007501 48C74009[0E750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0148
 11006 00007509 E919020000              	jmp .L_lambda_opt_end_0148
 11007                                  .L_lambda_opt_code_0148:	; lambda-opt body
 11008 0000750E 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11009 00007514 7411                    	je .L_lambda_opt_arity_check_exact_0148
 11010 00007516 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_0148
 11011 0000751C FF742410                	push qword [rsp + 8 * 2]
 11012 00007520 6A00                    	push 0
 11013 00007522 E96A0F0100              	jmp L_error_incorrect_arity_opt
 11014                                  .L_lambda_opt_arity_check_exact_0148:
 11015 00007527 4883EC08                	sub rsp, 8
 11016 0000752B 488B442408              	mov rax, qword[rsp + 8 *1]
 11017 00007530 48890424                	mov qword[rsp], rax  
 11018 00007534 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 11019 00007539 4889442408              	mov qword[rsp + 8 * 1], rax
 11020 0000753E B801000000              	mov rax, 1
 11021 00007543 4889442410              	mov qword[rsp + 8 *2], rax
 11022 00007548 48B8-                   	mov rax, sob_nil
 11022 0000754A [0100000000000000] 
 11023 00007552 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 11024 00007557 C8000000                	enter 0, 0
 11025                                  	; preparing a tail-call
 11026 0000755B 488B4520                	mov rax, PARAM(0)	; param s
 11027 0000755F 50                      	push rax
 11028 00007560 48B8-                   	mov rax, L_constants + 2135
 11028 00007562 [5708000000000000] 
 11029 0000756A 50                      	push rax
 11030 0000756B 488B4510                	mov rax, ENV
 11031 0000756F 488B00                  	mov rax, qword [rax + 8 * 0]
 11032 00007572 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 11033 00007575 50                      	push rax
 11034 00007576 6A03                    	push 3	; arg count
 11035 00007578 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 11036 00007580 803805                  	cmp byte [rax], T_undefined
 11037 00007583 0F840E0E0100            	je L_error_fvar_undefined
 11038 00007589 803804                  	cmp byte [rax], T_closure
 11039 0000758C 0F85890E0100            	jne L_error_non_closure
 11040 00007592 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11041 00007595 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11042 00007598 FF7500                  	push qword[rbp]
 11043 0000759B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11044 0000759E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11045 000075A2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11046 000075A6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11047 000075AA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11048 000075AD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11049 000075B0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11050 000075B5 4983C103                	add r9, 3 	 ;for getting to the params
 11051 000075B9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11052 000075BD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11053                                  .L_tc_recycle_frame_loop_0e8f:
 11054 000075C0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11055 000075C3 7410                    	je .L_tc_recycle_frame_done_0e8f
 11056 000075C5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11057 000075C8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11058 000075CB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11059 000075CF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11060 000075D3 EBEB                    	jmp .L_tc_recycle_frame_loop_0e8f
 11061                                  .L_tc_recycle_frame_done_0e8f:
 11062 000075D5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11063 000075D6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11064 000075DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11065 000075DD C9                      	leave
 11066 000075DE C21800                  	ret AND_KILL_FRAME(1)
 11067 000075E1 E941010000              	jmp .L_lambda_opt_end_0148	; new closure is in rax
 11068                                  .L_lambda_opt_arity_check_more_0148:
 11069 000075E6 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 11070 000075EB 49B9-                   	mov r9, sob_nil
 11070 000075ED [0100000000000000] 
 11071 000075F5 4889E3                  	mov rbx, rsp 
 11072 000075F8 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 11073 000075FC 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 11074 000075FF 49C1E003                	shl r8, 3
 11075 00007603 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 11076 00007606 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 11077                                  .L_lambda_opt_stack_shrink_loop_0148:
 11078 0000760B 4983F800                	cmp r8, 0
 11079 0000760F 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0148
 11080 00007611 BF11000000              	mov rdi, 1+8+8 ;for pair
 11081 00007616 E8A90E0100              	call malloc;to create the pair in the stack
 11082 0000761B C60021                  	mov byte [rax], T_pair ; to make it a pair
 11083 0000761E 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 11084 00007621 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 11085 00007625 4C894809                 	mov qword[rax+1+8],r9
 11086 00007629 4989C1                  	mov r9, rax ;for the recursion 
 11087 0000762C 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 11088 0000762F 4883EB08                	sub rbx, 8 ;to get the next param to copy
 11089 00007633 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0148
 11090                                  .L_lambda_opt_stack_shrink_loop_exit_0148:
 11091 00007635 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 11092 0000763A 4883E901                	sub rcx, 1
 11093 0000763E 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 11094 00007642 4801CC                  	add rsp, rcx ;shrinking the stack
 11095 00007645 4889E0                  	mov rax, rsp
 11096 00007648 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 11097 0000764B 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 11098 0000764F 49FFC8                  	dec r8 ;we start with param 0, not 1 
 11099 00007652 4883C018                	add rax, 3 * 8;now rax is param 0
 11100 00007656 49C1E003                	shl r8, 3;convert to byte
 11101 0000765A 4C01C0                  	add rax, r8;now rax is the top of the stack
 11102 0000765D 4C8908                  	mov qword[rax], r9;puting the list at the top
 11103 00007660 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 11104 00007664 4889E3                  	mov rbx, rsp 
 11105 00007667 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 11106 0000766A 41BA00000000            	mov r10, 0;r10 is the not opt params length
 11107 00007670 49FFCA                  	dec r10 
 11108 00007673 49C1E203                	shl r10, 3;to get bytes
 11109 00007677 4883C318                	add rbx, 3*8;rbx is the first param
 11110 0000767B 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 11111 0000767E 4889E0                  	mov rax, rsp
 11112 00007681 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 11113 00007684 48C744241001000000      	mov qword [rsp+2*8], 1
 11114 0000768D 488B5808                	mov rbx, qword[rax + 8 *1]
 11115 00007691 48895C2408              	mov qword [rsp + 1*8] ,rbx
 11116 00007696 488B18                  	mov rbx, qword[rax]
 11117 00007699 48891C24                	mov qword [rsp], rbx
 11118 0000769D C8000000                	enter 0, 0
 11119                                  	; preparing a tail-call
 11120 000076A1 488B4520                	mov rax, PARAM(0)	; param s
 11121 000076A5 50                      	push rax
 11122 000076A6 48B8-                   	mov rax, L_constants + 2135
 11122 000076A8 [5708000000000000] 
 11123 000076B0 50                      	push rax
 11124 000076B1 488B4510                	mov rax, ENV
 11125 000076B5 488B00                  	mov rax, qword [rax + 8 * 0]
 11126 000076B8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin+
 11127 000076BB 50                      	push rax
 11128 000076BC 6A03                    	push 3	; arg count
 11129 000076BE 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 11130 000076C6 803805                  	cmp byte [rax], T_undefined
 11131 000076C9 0F84C80C0100            	je L_error_fvar_undefined
 11132 000076CF 803804                  	cmp byte [rax], T_closure
 11133 000076D2 0F85430D0100            	jne L_error_non_closure
 11134 000076D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11135 000076DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11136 000076DE FF7500                  	push qword[rbp]
 11137 000076E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11138 000076E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11139 000076E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11140 000076EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11141 000076F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11142 000076F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11143 000076F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11144 000076FB 4983C103                	add r9, 3 	 ;for getting to the params
 11145 000076FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11146 00007703 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11147                                  .L_tc_recycle_frame_loop_0e8e:
 11148 00007706 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11149 00007709 7410                    	je .L_tc_recycle_frame_done_0e8e
 11150 0000770B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11151 0000770E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11152 00007711 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11153 00007715 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11154 00007719 EBEB                    	jmp .L_tc_recycle_frame_loop_0e8e
 11155                                  .L_tc_recycle_frame_done_0e8e:
 11156 0000771B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11157 0000771C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11158 00007720 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11159 00007723 C9                      	leave
 11160 00007724 C21800                  	ret AND_KILL_FRAME(1)
 11161                                  .L_lambda_opt_end_0148:	; new closure is in rax
 11162 00007727 C9                      	leave
 11163 00007728 C21800                  	ret AND_KILL_FRAME(1)
 11164                                  .L_lambda_simple_end_0a6d:	; new closure is in rax
 11165 0000772B 803804                  	cmp byte [rax], T_closure
 11166 0000772E 0F85E70C0100            	jne L_error_non_closure
 11167 00007734 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11168 00007737 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11169 0000773A FF7500                  	push qword[rbp]
 11170 0000773D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11171 00007740 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11172 00007744 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11173 00007748 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11174 0000774C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11175 0000774F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11176 00007752 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11177 00007757 4983C103                	add r9, 3 	 ;for getting to the params
 11178 0000775B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11179 0000775F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11180                                  .L_tc_recycle_frame_loop_0e90:
 11181 00007762 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11182 00007765 7410                    	je .L_tc_recycle_frame_done_0e90
 11183 00007767 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11184 0000776A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11185 0000776D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11186 00007771 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11187 00007775 EBEB                    	jmp .L_tc_recycle_frame_loop_0e90
 11188                                  .L_tc_recycle_frame_done_0e90:
 11189 00007777 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11190 00007778 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11191 0000777C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11192 0000777F C9                      	leave
 11193 00007780 C21800                  	ret AND_KILL_FRAME(1)
 11194                                  .L_lambda_simple_end_0a6b:	; new closure is in rax
 11195 00007783 803804                  	cmp byte [rax], T_closure
 11196 00007786 0F858F0C0100            	jne L_error_non_closure
 11197 0000778C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11198 0000778F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11199 00007792 48890425[4B0F0000]      	mov qword [free_var_1], rax
 11200 0000779A 48B8-                   	mov rax, sob_void
 11200 0000779C [0000000000000000] 
 11201                                  
 11202 000077A4 4889C7                  	mov rdi, rax
 11203 000077A7 E86D0F0100              	call print_sexpr_if_not_void
 11204                                  	; preparing a non-tail-call
 11205 000077AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11206 000077B1 E80E0D0100              	call malloc
 11207 000077B6 50                      	push rax
 11208 000077B7 BF00000000              	mov rdi, 8 * 0	; new rib
 11209 000077BC E8030D0100              	call malloc
 11210 000077C1 50                      	push rax
 11211 000077C2 BF08000000              	mov rdi, 8 * 1	; extended env
 11212 000077C7 E8F80C0100              	call malloc
 11213 000077CC 488B7D10                	mov rdi, ENV
 11214 000077D0 BE00000000              	mov rsi, 0
 11215 000077D5 BA01000000              	mov rdx, 1
 11216                                  .L_lambda_simple_env_loop_0a6e:	; ext_env[i + 1] <-- env[i]
 11217 000077DA 4883FE00                	cmp rsi, 0
 11218 000077DE 7410                    	je .L_lambda_simple_env_end_0a6e
 11219 000077E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11220 000077E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11221 000077E8 48FFC6                  	inc rsi
 11222 000077EB 48FFC2                  	inc rdx
 11223 000077EE EBEA                    	jmp .L_lambda_simple_env_loop_0a6e
 11224                                  .L_lambda_simple_env_end_0a6e:
 11225 000077F0 5B                      	pop rbx
 11226 000077F1 BE00000000              	mov rsi, 0
 11227                                  .L_lambda_simple_params_loop_0a6e:	; copy params
 11228 000077F6 4883FE00                	cmp rsi, 0
 11229 000077FA 740E                    	je .L_lambda_simple_params_end_0a6e
 11230 000077FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11231 00007801 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11232 00007805 48FFC6                  	inc rsi
 11233 00007808 EBEC                    	jmp .L_lambda_simple_params_loop_0a6e
 11234                                  .L_lambda_simple_params_end_0a6e:
 11235 0000780A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11236 0000780D 4889C3                  	mov rbx, rax
 11237 00007810 58                      	pop rax
 11238 00007811 C60004                  	mov byte [rax], T_closure
 11239 00007814 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11240 00007818 48C74009[25780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a6e
 11241 00007820 E998000000              	jmp .L_lambda_simple_end_0a6e
 11242                                  .L_lambda_simple_code_0a6e:	; lambda-simple body
 11243 00007825 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11244 0000782B 740B                    	je .L_lambda_simple_arity_check_ok_0a6e
 11245 0000782D FF742410                	push qword [rsp + 8 * 2]
 11246 00007831 6A00                    	push 0
 11247 00007833 E9450C0100              	jmp L_error_incorrect_arity_simple
 11248                                  .L_lambda_simple_arity_check_ok_0a6e:
 11249 00007838 C8000000                	enter 0, 0
 11250                                  	; preparing a tail-call
 11251 0000783C 48B8-                   	mov rax, L_constants + 2187
 11251 0000783E [8B08000000000000] 
 11252 00007846 50                      	push rax
 11253 00007847 48B8-                   	mov rax, L_constants + 2251
 11253 00007849 [CB08000000000000] 
 11254 00007851 50                      	push rax
 11255 00007852 6A02                    	push 2	; arg count
 11256 00007854 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 11257 0000785C 803805                  	cmp byte [rax], T_undefined
 11258 0000785F 0F84320B0100            	je L_error_fvar_undefined
 11259 00007865 803804                  	cmp byte [rax], T_closure
 11260 00007868 0F85AD0B0100            	jne L_error_non_closure
 11261 0000786E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11262 00007871 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11263 00007874 FF7500                  	push qword[rbp]
 11264 00007877 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11265 0000787A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11266 0000787E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11267 00007882 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11268 00007886 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11269 00007889 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11270 0000788C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11271 00007891 4983C103                	add r9, 3 	 ;for getting to the params
 11272 00007895 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11273 00007899 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11274                                  .L_tc_recycle_frame_loop_0e91:
 11275 0000789C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11276 0000789F 7410                    	je .L_tc_recycle_frame_done_0e91
 11277 000078A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11278 000078A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11279 000078A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11280 000078AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11281 000078AF EBEB                    	jmp .L_tc_recycle_frame_loop_0e91
 11282                                  .L_tc_recycle_frame_done_0e91:
 11283 000078B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11284 000078B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11285 000078B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11286 000078B9 C9                      	leave
 11287 000078BA C21000                  	ret AND_KILL_FRAME(0)
 11288                                  .L_lambda_simple_end_0a6e:	; new closure is in rax
 11289 000078BD 50                      	push rax
 11290 000078BE 6A01                    	push 1	; arg count
 11291 000078C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11292 000078C5 E8FA0B0100              	call malloc
 11293 000078CA 50                      	push rax
 11294 000078CB BF00000000              	mov rdi, 8 * 0	; new rib
 11295 000078D0 E8EF0B0100              	call malloc
 11296 000078D5 50                      	push rax
 11297 000078D6 BF08000000              	mov rdi, 8 * 1	; extended env
 11298 000078DB E8E40B0100              	call malloc
 11299 000078E0 488B7D10                	mov rdi, ENV
 11300 000078E4 BE00000000              	mov rsi, 0
 11301 000078E9 BA01000000              	mov rdx, 1
 11302                                  .L_lambda_simple_env_loop_0a6f:	; ext_env[i + 1] <-- env[i]
 11303 000078EE 4883FE00                	cmp rsi, 0
 11304 000078F2 7410                    	je .L_lambda_simple_env_end_0a6f
 11305 000078F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11306 000078F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11307 000078FC 48FFC6                  	inc rsi
 11308 000078FF 48FFC2                  	inc rdx
 11309 00007902 EBEA                    	jmp .L_lambda_simple_env_loop_0a6f
 11310                                  .L_lambda_simple_env_end_0a6f:
 11311 00007904 5B                      	pop rbx
 11312 00007905 BE00000000              	mov rsi, 0
 11313                                  .L_lambda_simple_params_loop_0a6f:	; copy params
 11314 0000790A 4883FE00                	cmp rsi, 0
 11315 0000790E 740E                    	je .L_lambda_simple_params_end_0a6f
 11316 00007910 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11317 00007915 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11318 00007919 48FFC6                  	inc rsi
 11319 0000791C EBEC                    	jmp .L_lambda_simple_params_loop_0a6f
 11320                                  .L_lambda_simple_params_end_0a6f:
 11321 0000791E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11322 00007921 4889C3                  	mov rbx, rax
 11323 00007924 58                      	pop rax
 11324 00007925 C60004                  	mov byte [rax], T_closure
 11325 00007928 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11326 0000792C 48C74009[39790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a6f
 11327 00007934 E99B100000              	jmp .L_lambda_simple_end_0a6f
 11328                                  .L_lambda_simple_code_0a6f:	; lambda-simple body
 11329 00007939 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11330 0000793F 740B                    	je .L_lambda_simple_arity_check_ok_0a6f
 11331 00007941 FF742410                	push qword [rsp + 8 * 2]
 11332 00007945 6A01                    	push 1
 11333 00007947 E9310B0100              	jmp L_error_incorrect_arity_simple
 11334                                  .L_lambda_simple_arity_check_ok_0a6f:
 11335 0000794C C8000000                	enter 0, 0
 11336                                  	; preparing a tail-call
 11337 00007950 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11338 00007955 E86A0B0100              	call malloc
 11339 0000795A 50                      	push rax
 11340 0000795B BF08000000              	mov rdi, 8 * 1	; new rib
 11341 00007960 E85F0B0100              	call malloc
 11342 00007965 50                      	push rax
 11343 00007966 BF10000000              	mov rdi, 8 * 2	; extended env
 11344 0000796B E8540B0100              	call malloc
 11345 00007970 488B7D10                	mov rdi, ENV
 11346 00007974 BE00000000              	mov rsi, 0
 11347 00007979 BA01000000              	mov rdx, 1
 11348                                  .L_lambda_simple_env_loop_0a70:	; ext_env[i + 1] <-- env[i]
 11349 0000797E 4883FE01                	cmp rsi, 1
 11350 00007982 7410                    	je .L_lambda_simple_env_end_0a70
 11351 00007984 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11352 00007988 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11353 0000798C 48FFC6                  	inc rsi
 11354 0000798F 48FFC2                  	inc rdx
 11355 00007992 EBEA                    	jmp .L_lambda_simple_env_loop_0a70
 11356                                  .L_lambda_simple_env_end_0a70:
 11357 00007994 5B                      	pop rbx
 11358 00007995 BE00000000              	mov rsi, 0
 11359                                  .L_lambda_simple_params_loop_0a70:	; copy params
 11360 0000799A 4883FE01                	cmp rsi, 1
 11361 0000799E 740E                    	je .L_lambda_simple_params_end_0a70
 11362 000079A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11363 000079A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11364 000079A9 48FFC6                  	inc rsi
 11365 000079AC EBEC                    	jmp .L_lambda_simple_params_loop_0a70
 11366                                  .L_lambda_simple_params_end_0a70:
 11367 000079AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11368 000079B1 4889C3                  	mov rbx, rax
 11369 000079B4 58                      	pop rax
 11370 000079B5 C60004                  	mov byte [rax], T_closure
 11371 000079B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11372 000079BC 48C74009[C9790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a70
 11373 000079C4 E9EE080000              	jmp .L_lambda_simple_end_0a70
 11374                                  .L_lambda_simple_code_0a70:	; lambda-simple body
 11375 000079C9 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11376 000079CF 740B                    	je .L_lambda_simple_arity_check_ok_0a70
 11377 000079D1 FF742410                	push qword [rsp + 8 * 2]
 11378 000079D5 6A02                    	push 2
 11379 000079D7 E9A10A0100              	jmp L_error_incorrect_arity_simple
 11380                                  .L_lambda_simple_arity_check_ok_0a70:
 11381 000079DC C8000000                	enter 0, 0
 11382                                  	; preparing a non-tail-call
 11383 000079E0 488B4520                	mov rax, PARAM(0)	; param a
 11384 000079E4 50                      	push rax
 11385 000079E5 6A01                    	push 1	; arg count
 11386 000079E7 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 11387 000079EF 803805                  	cmp byte [rax], T_undefined
 11388 000079F2 0F849F090100            	je L_error_fvar_undefined
 11389 000079F8 803804                  	cmp byte [rax], T_closure
 11390 000079FB 0F851A0A0100            	jne L_error_non_closure
 11391 00007A01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11392 00007A04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11393 00007A07 483D[02000000]          	cmp rax, sob_boolean_false
 11394 00007A0D 0F849F020000            	je .L_if_else_07d6
 11395                                  	; preparing a non-tail-call
 11396 00007A13 488B4528                	mov rax, PARAM(1)	; param b
 11397 00007A17 50                      	push rax
 11398 00007A18 6A01                    	push 1	; arg count
 11399 00007A1A 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 11400 00007A22 803805                  	cmp byte [rax], T_undefined
 11401 00007A25 0F846C090100            	je L_error_fvar_undefined
 11402 00007A2B 803804                  	cmp byte [rax], T_closure
 11403 00007A2E 0F85E7090100            	jne L_error_non_closure
 11404 00007A34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11405 00007A37 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11406 00007A3A 483D[02000000]          	cmp rax, sob_boolean_false
 11407 00007A40 7476                    	je .L_if_else_07cd
 11408                                  	; preparing a tail-call
 11409 00007A42 488B4528                	mov rax, PARAM(1)	; param b
 11410 00007A46 50                      	push rax
 11411 00007A47 488B4520                	mov rax, PARAM(0)	; param a
 11412 00007A4B 50                      	push rax
 11413 00007A4C 6A02                    	push 2	; arg count
 11414 00007A4E 488B0425[05110000]      	mov rax, qword [free_var_27]	; free var __bin-sub-zz
 11415 00007A56 803805                  	cmp byte [rax], T_undefined
 11416 00007A59 0F8438090100            	je L_error_fvar_undefined
 11417 00007A5F 803804                  	cmp byte [rax], T_closure
 11418 00007A62 0F85B3090100            	jne L_error_non_closure
 11419 00007A68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11420 00007A6B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11421 00007A6E FF7500                  	push qword[rbp]
 11422 00007A71 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11423 00007A74 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11424 00007A78 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11425 00007A7C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11426 00007A80 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11427 00007A83 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11428 00007A86 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11429 00007A8B 4983C103                	add r9, 3 	 ;for getting to the params
 11430 00007A8F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11431 00007A93 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11432                                  .L_tc_recycle_frame_loop_0e92:
 11433 00007A96 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11434 00007A99 7410                    	je .L_tc_recycle_frame_done_0e92
 11435 00007A9B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11436 00007A9E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11437 00007AA1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11438 00007AA5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11439 00007AA9 EBEB                    	jmp .L_tc_recycle_frame_loop_0e92
 11440                                  .L_tc_recycle_frame_done_0e92:
 11441 00007AAB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11442 00007AAC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11443 00007AB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11444 00007AB3 E9F5010000              	jmp .L_if_end_07cd
 11445                                  .L_if_else_07cd:
 11446                                  	; preparing a non-tail-call
 11447 00007AB8 488B4528                	mov rax, PARAM(1)	; param b
 11448 00007ABC 50                      	push rax
 11449 00007ABD 6A01                    	push 1	; arg count
 11450 00007ABF 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 11451 00007AC7 803805                  	cmp byte [rax], T_undefined
 11452 00007ACA 0F84C7080100            	je L_error_fvar_undefined
 11453 00007AD0 803804                  	cmp byte [rax], T_closure
 11454 00007AD3 0F8542090100            	jne L_error_non_closure
 11455 00007AD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11456 00007ADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 11457 00007ADF 483D[02000000]          	cmp rax, sob_boolean_false
 11458 00007AE5 0F8499000000            	je .L_if_else_07cc
 11459                                  	; preparing a tail-call
 11460 00007AEB 488B4528                	mov rax, PARAM(1)	; param b
 11461 00007AEF 50                      	push rax
 11462                                  	; preparing a non-tail-call
 11463 00007AF0 488B4520                	mov rax, PARAM(0)	; param a
 11464 00007AF4 50                      	push rax
 11465 00007AF5 6A01                    	push 1	; arg count
 11466 00007AF7 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11467 00007AFF 803805                  	cmp byte [rax], T_undefined
 11468 00007B02 0F848F080100            	je L_error_fvar_undefined
 11469 00007B08 803804                  	cmp byte [rax], T_closure
 11470 00007B0B 0F850A090100            	jne L_error_non_closure
 11471 00007B11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11472 00007B14 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11473 00007B17 50                      	push rax
 11474 00007B18 6A02                    	push 2	; arg count
 11475 00007B1A 488B0425[E3100000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11476 00007B22 803805                  	cmp byte [rax], T_undefined
 11477 00007B25 0F846C080100            	je L_error_fvar_undefined
 11478 00007B2B 803804                  	cmp byte [rax], T_closure
 11479 00007B2E 0F85E7080100            	jne L_error_non_closure
 11480 00007B34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11481 00007B37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11482 00007B3A FF7500                  	push qword[rbp]
 11483 00007B3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11484 00007B40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11485 00007B44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11486 00007B48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11487 00007B4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11488 00007B4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11489 00007B52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11490 00007B57 4983C103                	add r9, 3 	 ;for getting to the params
 11491 00007B5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11492 00007B5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11493                                  .L_tc_recycle_frame_loop_0e93:
 11494 00007B62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11495 00007B65 7410                    	je .L_tc_recycle_frame_done_0e93
 11496 00007B67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11497 00007B6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11498 00007B6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11499 00007B71 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11500 00007B75 EBEB                    	jmp .L_tc_recycle_frame_loop_0e93
 11501                                  .L_tc_recycle_frame_done_0e93:
 11502 00007B77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11503 00007B78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11504 00007B7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11505 00007B7F E929010000              	jmp .L_if_end_07cc
 11506                                  .L_if_else_07cc:
 11507                                  	; preparing a non-tail-call
 11508 00007B84 488B4528                	mov rax, PARAM(1)	; param b
 11509 00007B88 50                      	push rax
 11510 00007B89 6A01                    	push 1	; arg count
 11511 00007B8B 488B0425[DD160000]      	mov rax, qword [free_var_115]	; free var real
 11512 00007B93 803805                  	cmp byte [rax], T_undefined
 11513 00007B96 0F84FB070100            	je L_error_fvar_undefined
 11514 00007B9C 803804                  	cmp byte [rax], T_closure
 11515 00007B9F 0F8576080100            	jne L_error_non_closure
 11516 00007BA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11517 00007BA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11518 00007BAB 483D[02000000]          	cmp rax, sob_boolean_false
 11519 00007BB1 0F8496000000            	je .L_if_else_07cb
 11520                                  	; preparing a tail-call
 11521 00007BB7 488B4528                	mov rax, PARAM(1)	; param b
 11522 00007BBB 50                      	push rax
 11523                                  	; preparing a non-tail-call
 11524 00007BBC 488B4520                	mov rax, PARAM(0)	; param a
 11525 00007BC0 50                      	push rax
 11526 00007BC1 6A01                    	push 1	; arg count
 11527 00007BC3 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 11528 00007BCB 803805                  	cmp byte [rax], T_undefined
 11529 00007BCE 0F84C3070100            	je L_error_fvar_undefined
 11530 00007BD4 803804                  	cmp byte [rax], T_closure
 11531 00007BD7 0F853E080100            	jne L_error_non_closure
 11532 00007BDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 11533 00007BE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11534 00007BE3 50                      	push rax
 11535 00007BE4 6A02                    	push 2	; arg count
 11536 00007BE6 488B0425[F4100000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11537 00007BEE 803805                  	cmp byte [rax], T_undefined
 11538 00007BF1 0F84A0070100            	je L_error_fvar_undefined
 11539 00007BF7 803804                  	cmp byte [rax], T_closure
 11540 00007BFA 0F851B080100            	jne L_error_non_closure
 11541 00007C00 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11542 00007C03 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11543 00007C06 FF7500                  	push qword[rbp]
 11544 00007C09 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11545 00007C0C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11546 00007C10 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11547 00007C14 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11548 00007C18 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11549 00007C1B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11550 00007C1E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11551 00007C23 4983C103                	add r9, 3 	 ;for getting to the params
 11552 00007C27 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11553 00007C2B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11554                                  .L_tc_recycle_frame_loop_0e94:
 11555 00007C2E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11556 00007C31 7410                    	je .L_tc_recycle_frame_done_0e94
 11557 00007C33 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11558 00007C36 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11559 00007C39 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11560 00007C3D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11561 00007C41 EBEB                    	jmp .L_tc_recycle_frame_loop_0e94
 11562                                  .L_tc_recycle_frame_done_0e94:
 11563 00007C43 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11564 00007C44 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11565 00007C48 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11566 00007C4B EB60                    	jmp .L_if_end_07cb
 11567                                  .L_if_else_07cb:
 11568                                  	; preparing a tail-call
 11569 00007C4D 6A00                    	push 0	; arg count
 11570 00007C4F 488B4510                	mov rax, ENV
 11571 00007C53 488B00                  	mov rax, qword [rax + 8 * 0]
 11572 00007C56 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11573 00007C59 803804                  	cmp byte [rax], T_closure
 11574 00007C5C 0F85B9070100            	jne L_error_non_closure
 11575 00007C62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11576 00007C65 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11577 00007C68 FF7500                  	push qword[rbp]
 11578 00007C6B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11579 00007C6E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11580 00007C72 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11581 00007C76 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11582 00007C7A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11583 00007C7D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11584 00007C80 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11585 00007C85 4983C103                	add r9, 3 	 ;for getting to the params
 11586 00007C89 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11587 00007C8D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11588                                  .L_tc_recycle_frame_loop_0e95:
 11589 00007C90 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11590 00007C93 7410                    	je .L_tc_recycle_frame_done_0e95
 11591 00007C95 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11592 00007C98 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11593 00007C9B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11594 00007C9F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11595 00007CA3 EBEB                    	jmp .L_tc_recycle_frame_loop_0e95
 11596                                  .L_tc_recycle_frame_done_0e95:
 11597 00007CA5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11598 00007CA6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11599 00007CAA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11600                                  .L_if_end_07cb:
 11601                                  .L_if_end_07cc:
 11602                                  .L_if_end_07cd:
 11603 00007CAD E901060000              	jmp .L_if_end_07d6
 11604                                  .L_if_else_07d6:
 11605                                  	; preparing a non-tail-call
 11606 00007CB2 488B4520                	mov rax, PARAM(0)	; param a
 11607 00007CB6 50                      	push rax
 11608 00007CB7 6A01                    	push 1	; arg count
 11609 00007CB9 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 11610 00007CC1 803805                  	cmp byte [rax], T_undefined
 11611 00007CC4 0F84CD060100            	je L_error_fvar_undefined
 11612 00007CCA 803804                  	cmp byte [rax], T_closure
 11613 00007CCD 0F8548070100            	jne L_error_non_closure
 11614 00007CD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11615 00007CD6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11616 00007CD9 483D[02000000]          	cmp rax, sob_boolean_false
 11617 00007CDF 0F849F020000            	je .L_if_else_07d5
 11618                                  	; preparing a non-tail-call
 11619 00007CE5 488B4528                	mov rax, PARAM(1)	; param b
 11620 00007CE9 50                      	push rax
 11621 00007CEA 6A01                    	push 1	; arg count
 11622 00007CEC 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 11623 00007CF4 803805                  	cmp byte [rax], T_undefined
 11624 00007CF7 0F849A060100            	je L_error_fvar_undefined
 11625 00007CFD 803804                  	cmp byte [rax], T_closure
 11626 00007D00 0F8515070100            	jne L_error_non_closure
 11627 00007D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11628 00007D09 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11629 00007D0C 483D[02000000]          	cmp rax, sob_boolean_false
 11630 00007D12 0F8499000000            	je .L_if_else_07d0
 11631                                  	; preparing a tail-call
 11632                                  	; preparing a non-tail-call
 11633 00007D18 488B4528                	mov rax, PARAM(1)	; param b
 11634 00007D1C 50                      	push rax
 11635 00007D1D 6A01                    	push 1	; arg count
 11636 00007D1F 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 11637 00007D27 803805                  	cmp byte [rax], T_undefined
 11638 00007D2A 0F8467060100            	je L_error_fvar_undefined
 11639 00007D30 803804                  	cmp byte [rax], T_closure
 11640 00007D33 0F85E2060100            	jne L_error_non_closure
 11641 00007D39 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11642 00007D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11643 00007D3F 50                      	push rax
 11644 00007D40 488B4520                	mov rax, PARAM(0)	; param a
 11645 00007D44 50                      	push rax
 11646 00007D45 6A02                    	push 2	; arg count
 11647 00007D47 488B0425[E3100000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11648 00007D4F 803805                  	cmp byte [rax], T_undefined
 11649 00007D52 0F843F060100            	je L_error_fvar_undefined
 11650 00007D58 803804                  	cmp byte [rax], T_closure
 11651 00007D5B 0F85BA060100            	jne L_error_non_closure
 11652 00007D61 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11653 00007D64 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11654 00007D67 FF7500                  	push qword[rbp]
 11655 00007D6A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11656 00007D6D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11657 00007D71 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11658 00007D75 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11659 00007D79 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11660 00007D7C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11661 00007D7F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11662 00007D84 4983C103                	add r9, 3 	 ;for getting to the params
 11663 00007D88 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11664 00007D8C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11665                                  .L_tc_recycle_frame_loop_0e96:
 11666 00007D8F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11667 00007D92 7410                    	je .L_tc_recycle_frame_done_0e96
 11668 00007D94 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11669 00007D97 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11670 00007D9A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11671 00007D9E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11672 00007DA2 EBEB                    	jmp .L_tc_recycle_frame_loop_0e96
 11673                                  .L_tc_recycle_frame_done_0e96:
 11674 00007DA4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11675 00007DA5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11676 00007DA9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11677 00007DAC E9CE010000              	jmp .L_if_end_07d0
 11678                                  .L_if_else_07d0:
 11679                                  	; preparing a non-tail-call
 11680 00007DB1 488B4528                	mov rax, PARAM(1)	; param b
 11681 00007DB5 50                      	push rax
 11682 00007DB6 6A01                    	push 1	; arg count
 11683 00007DB8 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 11684 00007DC0 803805                  	cmp byte [rax], T_undefined
 11685 00007DC3 0F84CE050100            	je L_error_fvar_undefined
 11686 00007DC9 803804                  	cmp byte [rax], T_closure
 11687 00007DCC 0F8549060100            	jne L_error_non_closure
 11688 00007DD2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11689 00007DD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11690 00007DD8 483D[02000000]          	cmp rax, sob_boolean_false
 11691 00007DDE 7476                    	je .L_if_else_07cf
 11692                                  	; preparing a tail-call
 11693 00007DE0 488B4528                	mov rax, PARAM(1)	; param b
 11694 00007DE4 50                      	push rax
 11695 00007DE5 488B4520                	mov rax, PARAM(0)	; param a
 11696 00007DE9 50                      	push rax
 11697 00007DEA 6A02                    	push 2	; arg count
 11698 00007DEC 488B0425[E3100000]      	mov rax, qword [free_var_25]	; free var __bin-sub-qq
 11699 00007DF4 803805                  	cmp byte [rax], T_undefined
 11700 00007DF7 0F849A050100            	je L_error_fvar_undefined
 11701 00007DFD 803804                  	cmp byte [rax], T_closure
 11702 00007E00 0F8515060100            	jne L_error_non_closure
 11703 00007E06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11704 00007E09 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11705 00007E0C FF7500                  	push qword[rbp]
 11706 00007E0F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11707 00007E12 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11708 00007E16 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11709 00007E1A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11710 00007E1E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11711 00007E21 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11712 00007E24 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11713 00007E29 4983C103                	add r9, 3 	 ;for getting to the params
 11714 00007E2D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11715 00007E31 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11716                                  .L_tc_recycle_frame_loop_0e97:
 11717 00007E34 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11718 00007E37 7410                    	je .L_tc_recycle_frame_done_0e97
 11719 00007E39 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11720 00007E3C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11721 00007E3F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11722 00007E43 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11723 00007E47 EBEB                    	jmp .L_tc_recycle_frame_loop_0e97
 11724                                  .L_tc_recycle_frame_done_0e97:
 11725 00007E49 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11726 00007E4A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11727 00007E4E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11728 00007E51 E929010000              	jmp .L_if_end_07cf
 11729                                  .L_if_else_07cf:
 11730                                  	; preparing a non-tail-call
 11731 00007E56 488B4528                	mov rax, PARAM(1)	; param b
 11732 00007E5A 50                      	push rax
 11733 00007E5B 6A01                    	push 1	; arg count
 11734 00007E5D 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 11735 00007E65 803805                  	cmp byte [rax], T_undefined
 11736 00007E68 0F8429050100            	je L_error_fvar_undefined
 11737 00007E6E 803804                  	cmp byte [rax], T_closure
 11738 00007E71 0F85A4050100            	jne L_error_non_closure
 11739 00007E77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11740 00007E7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11741 00007E7D 483D[02000000]          	cmp rax, sob_boolean_false
 11742 00007E83 0F8496000000            	je .L_if_else_07ce
 11743                                  	; preparing a tail-call
 11744 00007E89 488B4528                	mov rax, PARAM(1)	; param b
 11745 00007E8D 50                      	push rax
 11746                                  	; preparing a non-tail-call
 11747 00007E8E 488B4520                	mov rax, PARAM(0)	; param a
 11748 00007E92 50                      	push rax
 11749 00007E93 6A01                    	push 1	; arg count
 11750 00007E95 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11751 00007E9D 803805                  	cmp byte [rax], T_undefined
 11752 00007EA0 0F84F1040100            	je L_error_fvar_undefined
 11753 00007EA6 803804                  	cmp byte [rax], T_closure
 11754 00007EA9 0F856C050100            	jne L_error_non_closure
 11755 00007EAF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11756 00007EB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11757 00007EB5 50                      	push rax
 11758 00007EB6 6A02                    	push 2	; arg count
 11759 00007EB8 488B0425[F4100000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11760 00007EC0 803805                  	cmp byte [rax], T_undefined
 11761 00007EC3 0F84CE040100            	je L_error_fvar_undefined
 11762 00007EC9 803804                  	cmp byte [rax], T_closure
 11763 00007ECC 0F8549050100            	jne L_error_non_closure
 11764 00007ED2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11765 00007ED5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11766 00007ED8 FF7500                  	push qword[rbp]
 11767 00007EDB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11768 00007EDE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11769 00007EE2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11770 00007EE6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11771 00007EEA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11772 00007EED 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11773 00007EF0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11774 00007EF5 4983C103                	add r9, 3 	 ;for getting to the params
 11775 00007EF9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11776 00007EFD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11777                                  .L_tc_recycle_frame_loop_0e98:
 11778 00007F00 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11779 00007F03 7410                    	je .L_tc_recycle_frame_done_0e98
 11780 00007F05 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11781 00007F08 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11782 00007F0B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11783 00007F0F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11784 00007F13 EBEB                    	jmp .L_tc_recycle_frame_loop_0e98
 11785                                  .L_tc_recycle_frame_done_0e98:
 11786 00007F15 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11787 00007F16 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11788 00007F1A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11789 00007F1D EB60                    	jmp .L_if_end_07ce
 11790                                  .L_if_else_07ce:
 11791                                  	; preparing a tail-call
 11792 00007F1F 6A00                    	push 0	; arg count
 11793 00007F21 488B4510                	mov rax, ENV
 11794 00007F25 488B00                  	mov rax, qword [rax + 8 * 0]
 11795 00007F28 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 11796 00007F2B 803804                  	cmp byte [rax], T_closure
 11797 00007F2E 0F85E7040100            	jne L_error_non_closure
 11798 00007F34 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11799 00007F37 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11800 00007F3A FF7500                  	push qword[rbp]
 11801 00007F3D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11802 00007F40 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11803 00007F44 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11804 00007F48 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11805 00007F4C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11806 00007F4F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11807 00007F52 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11808 00007F57 4983C103                	add r9, 3 	 ;for getting to the params
 11809 00007F5B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11810 00007F5F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11811                                  .L_tc_recycle_frame_loop_0e99:
 11812 00007F62 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11813 00007F65 7410                    	je .L_tc_recycle_frame_done_0e99
 11814 00007F67 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11815 00007F6A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11816 00007F6D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11817 00007F71 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11818 00007F75 EBEB                    	jmp .L_tc_recycle_frame_loop_0e99
 11819                                  .L_tc_recycle_frame_done_0e99:
 11820 00007F77 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11821 00007F78 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11822 00007F7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11823                                  .L_if_end_07ce:
 11824                                  .L_if_end_07cf:
 11825                                  .L_if_end_07d0:
 11826 00007F7F E92F030000              	jmp .L_if_end_07d5
 11827                                  .L_if_else_07d5:
 11828                                  	; preparing a non-tail-call
 11829 00007F84 488B4520                	mov rax, PARAM(0)	; param a
 11830 00007F88 50                      	push rax
 11831 00007F89 6A01                    	push 1	; arg count
 11832 00007F8B 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 11833 00007F93 803805                  	cmp byte [rax], T_undefined
 11834 00007F96 0F84FB030100            	je L_error_fvar_undefined
 11835 00007F9C 803804                  	cmp byte [rax], T_closure
 11836 00007F9F 0F8576040100            	jne L_error_non_closure
 11837 00007FA5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11838 00007FA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11839 00007FAB 483D[02000000]          	cmp rax, sob_boolean_false
 11840 00007FB1 0F849C020000            	je .L_if_else_07d4
 11841                                  	; preparing a non-tail-call
 11842 00007FB7 488B4528                	mov rax, PARAM(1)	; param b
 11843 00007FBB 50                      	push rax
 11844 00007FBC 6A01                    	push 1	; arg count
 11845 00007FBE 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 11846 00007FC6 803805                  	cmp byte [rax], T_undefined
 11847 00007FC9 0F84C8030100            	je L_error_fvar_undefined
 11848 00007FCF 803804                  	cmp byte [rax], T_closure
 11849 00007FD2 0F8543040100            	jne L_error_non_closure
 11850 00007FD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11851 00007FDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 11852 00007FDE 483D[02000000]          	cmp rax, sob_boolean_false
 11853 00007FE4 0F8499000000            	je .L_if_else_07d3
 11854                                  	; preparing a tail-call
 11855                                  	; preparing a non-tail-call
 11856 00007FEA 488B4528                	mov rax, PARAM(1)	; param b
 11857 00007FEE 50                      	push rax
 11858 00007FEF 6A01                    	push 1	; arg count
 11859 00007FF1 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 11860 00007FF9 803805                  	cmp byte [rax], T_undefined
 11861 00007FFC 0F8495030100            	je L_error_fvar_undefined
 11862 00008002 803804                  	cmp byte [rax], T_closure
 11863 00008005 0F8510040100            	jne L_error_non_closure
 11864 0000800B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11865 0000800E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11866 00008011 50                      	push rax
 11867 00008012 488B4520                	mov rax, PARAM(0)	; param a
 11868 00008016 50                      	push rax
 11869 00008017 6A02                    	push 2	; arg count
 11870 00008019 488B0425[F4100000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11871 00008021 803805                  	cmp byte [rax], T_undefined
 11872 00008024 0F846D030100            	je L_error_fvar_undefined
 11873 0000802A 803804                  	cmp byte [rax], T_closure
 11874 0000802D 0F85E8030100            	jne L_error_non_closure
 11875 00008033 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11876 00008036 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11877 00008039 FF7500                  	push qword[rbp]
 11878 0000803C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11879 0000803F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11880 00008043 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11881 00008047 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11882 0000804B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11883 0000804E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11884 00008051 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11885 00008056 4983C103                	add r9, 3 	 ;for getting to the params
 11886 0000805A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11887 0000805E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11888                                  .L_tc_recycle_frame_loop_0e9a:
 11889 00008061 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11890 00008064 7410                    	je .L_tc_recycle_frame_done_0e9a
 11891 00008066 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11892 00008069 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11893 0000806C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11894 00008070 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11895 00008074 EBEB                    	jmp .L_tc_recycle_frame_loop_0e9a
 11896                                  .L_tc_recycle_frame_done_0e9a:
 11897 00008076 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11898 00008077 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11899 0000807B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11900 0000807E E9CE010000              	jmp .L_if_end_07d3
 11901                                  .L_if_else_07d3:
 11902                                  	; preparing a non-tail-call
 11903 00008083 488B4528                	mov rax, PARAM(1)	; param b
 11904 00008087 50                      	push rax
 11905 00008088 6A01                    	push 1	; arg count
 11906 0000808A 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 11907 00008092 803805                  	cmp byte [rax], T_undefined
 11908 00008095 0F84FC020100            	je L_error_fvar_undefined
 11909 0000809B 803804                  	cmp byte [rax], T_closure
 11910 0000809E 0F8577030100            	jne L_error_non_closure
 11911 000080A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11912 000080A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11913 000080AA 483D[02000000]          	cmp rax, sob_boolean_false
 11914 000080B0 0F8499000000            	je .L_if_else_07d2
 11915                                  	; preparing a tail-call
 11916                                  	; preparing a non-tail-call
 11917 000080B6 488B4528                	mov rax, PARAM(1)	; param b
 11918 000080BA 50                      	push rax
 11919 000080BB 6A01                    	push 1	; arg count
 11920 000080BD 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 11921 000080C5 803805                  	cmp byte [rax], T_undefined
 11922 000080C8 0F84C9020100            	je L_error_fvar_undefined
 11923 000080CE 803804                  	cmp byte [rax], T_closure
 11924 000080D1 0F8544030100            	jne L_error_non_closure
 11925 000080D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11926 000080DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 11927 000080DD 50                      	push rax
 11928 000080DE 488B4520                	mov rax, PARAM(0)	; param a
 11929 000080E2 50                      	push rax
 11930 000080E3 6A02                    	push 2	; arg count
 11931 000080E5 488B0425[F4100000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11932 000080ED 803805                  	cmp byte [rax], T_undefined
 11933 000080F0 0F84A1020100            	je L_error_fvar_undefined
 11934 000080F6 803804                  	cmp byte [rax], T_closure
 11935 000080F9 0F851C030100            	jne L_error_non_closure
 11936 000080FF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11937 00008102 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11938 00008105 FF7500                  	push qword[rbp]
 11939 00008108 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11940 0000810B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11941 0000810F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11942 00008113 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11943 00008117 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11944 0000811A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11945 0000811D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11946 00008122 4983C103                	add r9, 3 	 ;for getting to the params
 11947 00008126 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11948 0000812A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 11949                                  .L_tc_recycle_frame_loop_0e9b:
 11950 0000812D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 11951 00008130 7410                    	je .L_tc_recycle_frame_done_0e9b
 11952 00008132 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 11953 00008135 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 11954 00008138 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 11955 0000813C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 11956 00008140 EBEB                    	jmp .L_tc_recycle_frame_loop_0e9b
 11957                                  .L_tc_recycle_frame_done_0e9b:
 11958 00008142 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 11959 00008143 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 11960 00008147 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11961 0000814A E902010000              	jmp .L_if_end_07d2
 11962                                  .L_if_else_07d2:
 11963                                  	; preparing a non-tail-call
 11964 0000814F 488B4528                	mov rax, PARAM(1)	; param b
 11965 00008153 50                      	push rax
 11966 00008154 6A01                    	push 1	; arg count
 11967 00008156 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 11968 0000815E 803805                  	cmp byte [rax], T_undefined
 11969 00008161 0F8430020100            	je L_error_fvar_undefined
 11970 00008167 803804                  	cmp byte [rax], T_closure
 11971 0000816A 0F85AB020100            	jne L_error_non_closure
 11972 00008170 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11973 00008173 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11974 00008176 483D[02000000]          	cmp rax, sob_boolean_false
 11975 0000817C 7473                    	je .L_if_else_07d1
 11976                                  	; preparing a tail-call
 11977 0000817E 488B4528                	mov rax, PARAM(1)	; param b
 11978 00008182 50                      	push rax
 11979 00008183 488B4520                	mov rax, PARAM(0)	; param a
 11980 00008187 50                      	push rax
 11981 00008188 6A02                    	push 2	; arg count
 11982 0000818A 488B0425[F4100000]      	mov rax, qword [free_var_26]	; free var __bin-sub-rr
 11983 00008192 803805                  	cmp byte [rax], T_undefined
 11984 00008195 0F84FC010100            	je L_error_fvar_undefined
 11985 0000819B 803804                  	cmp byte [rax], T_closure
 11986 0000819E 0F8577020100            	jne L_error_non_closure
 11987 000081A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11988 000081A7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 11989 000081AA FF7500                  	push qword[rbp]
 11990 000081AD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 11991 000081B0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 11992 000081B4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 11993 000081B8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 11994 000081BC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 11995 000081BF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 11996 000081C2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 11997 000081C7 4983C103                	add r9, 3 	 ;for getting to the params
 11998 000081CB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 11999 000081CF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12000                                  .L_tc_recycle_frame_loop_0e9c:
 12001 000081D2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12002 000081D5 7410                    	je .L_tc_recycle_frame_done_0e9c
 12003 000081D7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12004 000081DA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12005 000081DD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12006 000081E1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12007 000081E5 EBEB                    	jmp .L_tc_recycle_frame_loop_0e9c
 12008                                  .L_tc_recycle_frame_done_0e9c:
 12009 000081E7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12010 000081E8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12011 000081EC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12012 000081EF EB60                    	jmp .L_if_end_07d1
 12013                                  .L_if_else_07d1:
 12014                                  	; preparing a tail-call
 12015 000081F1 6A00                    	push 0	; arg count
 12016 000081F3 488B4510                	mov rax, ENV
 12017 000081F7 488B00                  	mov rax, qword [rax + 8 * 0]
 12018 000081FA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12019 000081FD 803804                  	cmp byte [rax], T_closure
 12020 00008200 0F8515020100            	jne L_error_non_closure
 12021 00008206 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12022 00008209 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12023 0000820C FF7500                  	push qword[rbp]
 12024 0000820F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12025 00008212 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12026 00008216 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12027 0000821A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12028 0000821E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12029 00008221 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12030 00008224 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12031 00008229 4983C103                	add r9, 3 	 ;for getting to the params
 12032 0000822D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12033 00008231 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12034                                  .L_tc_recycle_frame_loop_0e9d:
 12035 00008234 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12036 00008237 7410                    	je .L_tc_recycle_frame_done_0e9d
 12037 00008239 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12038 0000823C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12039 0000823F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12040 00008243 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12041 00008247 EBEB                    	jmp .L_tc_recycle_frame_loop_0e9d
 12042                                  .L_tc_recycle_frame_done_0e9d:
 12043 00008249 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12044 0000824A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12045 0000824E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12046                                  .L_if_end_07d1:
 12047                                  .L_if_end_07d2:
 12048                                  .L_if_end_07d3:
 12049 00008251 EB60                    	jmp .L_if_end_07d4
 12050                                  .L_if_else_07d4:
 12051                                  	; preparing a tail-call
 12052 00008253 6A00                    	push 0	; arg count
 12053 00008255 488B4510                	mov rax, ENV
 12054 00008259 488B00                  	mov rax, qword [rax + 8 * 0]
 12055 0000825C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 12056 0000825F 803804                  	cmp byte [rax], T_closure
 12057 00008262 0F85B3010100            	jne L_error_non_closure
 12058 00008268 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12059 0000826B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12060 0000826E FF7500                  	push qword[rbp]
 12061 00008271 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12062 00008274 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12063 00008278 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12064 0000827C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12065 00008280 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12066 00008283 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12067 00008286 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12068 0000828B 4983C103                	add r9, 3 	 ;for getting to the params
 12069 0000828F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12070 00008293 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12071                                  .L_tc_recycle_frame_loop_0e9e:
 12072 00008296 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12073 00008299 7410                    	je .L_tc_recycle_frame_done_0e9e
 12074 0000829B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12075 0000829E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12076 000082A1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12077 000082A5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12078 000082A9 EBEB                    	jmp .L_tc_recycle_frame_loop_0e9e
 12079                                  .L_tc_recycle_frame_done_0e9e:
 12080 000082AB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12081 000082AC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12082 000082B0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12083                                  .L_if_end_07d4:
 12084                                  .L_if_end_07d5:
 12085                                  .L_if_end_07d6:
 12086 000082B3 C9                      	leave
 12087 000082B4 C22000                  	ret AND_KILL_FRAME(2)
 12088                                  .L_lambda_simple_end_0a70:	; new closure is in rax
 12089 000082B7 50                      	push rax
 12090 000082B8 6A01                    	push 1	; arg count
 12091 000082BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12092 000082BF E800020100              	call malloc
 12093 000082C4 50                      	push rax
 12094 000082C5 BF08000000              	mov rdi, 8 * 1	; new rib
 12095 000082CA E8F5010100              	call malloc
 12096 000082CF 50                      	push rax
 12097 000082D0 BF10000000              	mov rdi, 8 * 2	; extended env
 12098 000082D5 E8EA010100              	call malloc
 12099 000082DA 488B7D10                	mov rdi, ENV
 12100 000082DE BE00000000              	mov rsi, 0
 12101 000082E3 BA01000000              	mov rdx, 1
 12102                                  .L_lambda_simple_env_loop_0a71:	; ext_env[i + 1] <-- env[i]
 12103 000082E8 4883FE01                	cmp rsi, 1
 12104 000082EC 7410                    	je .L_lambda_simple_env_end_0a71
 12105 000082EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12106 000082F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12107 000082F6 48FFC6                  	inc rsi
 12108 000082F9 48FFC2                  	inc rdx
 12109 000082FC EBEA                    	jmp .L_lambda_simple_env_loop_0a71
 12110                                  .L_lambda_simple_env_end_0a71:
 12111 000082FE 5B                      	pop rbx
 12112 000082FF BE00000000              	mov rsi, 0
 12113                                  .L_lambda_simple_params_loop_0a71:	; copy params
 12114 00008304 4883FE01                	cmp rsi, 1
 12115 00008308 740E                    	je .L_lambda_simple_params_end_0a71
 12116 0000830A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12117 0000830F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12118 00008313 48FFC6                  	inc rsi
 12119 00008316 EBEC                    	jmp .L_lambda_simple_params_loop_0a71
 12120                                  .L_lambda_simple_params_end_0a71:
 12121 00008318 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12122 0000831B 4889C3                  	mov rbx, rax
 12123 0000831E 58                      	pop rax
 12124 0000831F C60004                  	mov byte [rax], T_closure
 12125 00008322 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12126 00008326 48C74009[33830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a71
 12127 0000832E E949060000              	jmp .L_lambda_simple_end_0a71
 12128                                  .L_lambda_simple_code_0a71:	; lambda-simple body
 12129 00008333 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12130 00008339 740B                    	je .L_lambda_simple_arity_check_ok_0a71
 12131 0000833B FF742410                	push qword [rsp + 8 * 2]
 12132 0000833F 6A01                    	push 1
 12133 00008341 E937010100              	jmp L_error_incorrect_arity_simple
 12134                                  .L_lambda_simple_arity_check_ok_0a71:
 12135 00008346 C8000000                	enter 0, 0
 12136 0000834A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12137 0000834F E870010100              	call malloc
 12138 00008354 50                      	push rax
 12139 00008355 BF08000000              	mov rdi, 8 * 1	; new rib
 12140 0000835A E865010100              	call malloc
 12141 0000835F 50                      	push rax
 12142 00008360 BF18000000              	mov rdi, 8 * 3	; extended env
 12143 00008365 E85A010100              	call malloc
 12144 0000836A 488B7D10                	mov rdi, ENV
 12145 0000836E BE00000000              	mov rsi, 0
 12146 00008373 BA01000000              	mov rdx, 1
 12147                                  .L_lambda_opt_env_loop_0149:	; ext_env[i + 1] <-- env[i]
 12148 00008378 4883FE02                	cmp rsi, 2
 12149 0000837C 7410                    	je .L_lambda_opt_env_end_0149
 12150 0000837E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12151 00008382 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12152 00008386 48FFC6                  	inc rsi
 12153 00008389 48FFC2                  	inc rdx
 12154 0000838C EBEA                    	jmp .L_lambda_opt_env_loop_0149
 12155                                  .L_lambda_opt_env_end_0149:
 12156 0000838E 5B                      	pop rbx
 12157 0000838F BE00000000              	mov rsi, 0
 12158                                  .L_lambda_opt_params_loop_0149:	; copy params
 12159 00008394 4883FE01                	cmp rsi, 1
 12160 00008398 740E                    	je .L_lambda_opt_params_end_0149
 12161 0000839A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12162 0000839F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12163 000083A3 48FFC6                  	inc rsi
 12164 000083A6 EBEC                    	jmp .L_lambda_opt_params_loop_0149
 12165                                  .L_lambda_opt_params_end_0149:
 12166 000083A8 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 12167 000083AB 4889C3                  	mov rbx, rax
 12168 000083AE 58                      	pop rax
 12169 000083AF C60004                  	mov byte [rax], T_closure
 12170 000083B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12171 000083B6 48C74009[C3830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0149
 12172 000083BE E9B5050000              	jmp .L_lambda_opt_end_0149
 12173                                  .L_lambda_opt_code_0149:	; lambda-opt body
 12174 000083C3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12175 000083C9 7411                    	je .L_lambda_opt_arity_check_exact_0149
 12176 000083CB 0F8F96020000            	jg .L_lambda_opt_arity_check_more_0149
 12177 000083D1 FF742410                	push qword [rsp + 8 * 2]
 12178 000083D5 6A01                    	push 1
 12179 000083D7 E9B5000100              	jmp L_error_incorrect_arity_opt
 12180                                  .L_lambda_opt_arity_check_exact_0149:
 12181 000083DC 4883EC08                	sub rsp, 8
 12182 000083E0 488B442408              	mov rax, qword[rsp + 8 *1]
 12183 000083E5 48890424                	mov qword[rsp], rax  
 12184 000083E9 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 12185 000083EE 4889442408              	mov qword[rsp + 8 * 1], rax
 12186 000083F3 B802000000              	mov rax, 2
 12187 000083F8 4889442410              	mov qword[rsp + 8 *2], rax
 12188 000083FD 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 12189 00008402 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 12190 00008407 48B8-                   	mov rax, sob_nil
 12190 00008409 [0100000000000000] 
 12191 00008411 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 12192 00008416 C8000000                	enter 0, 0
 12193                                  	; preparing a non-tail-call
 12194 0000841A 488B4528                	mov rax, PARAM(1)	; param s
 12195 0000841E 50                      	push rax
 12196 0000841F 6A01                    	push 1	; arg count
 12197 00008421 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 12198 00008429 803805                  	cmp byte [rax], T_undefined
 12199 0000842C 0F8465FF0000            	je L_error_fvar_undefined
 12200 00008432 803804                  	cmp byte [rax], T_closure
 12201 00008435 0F85E0FF0000            	jne L_error_non_closure
 12202 0000843B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12203 0000843E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12204 00008441 483D[02000000]          	cmp rax, sob_boolean_false
 12205 00008447 7475                    	je .L_if_else_07d8
 12206                                  	; preparing a tail-call
 12207 00008449 488B4520                	mov rax, PARAM(0)	; param a
 12208 0000844D 50                      	push rax
 12209 0000844E 48B8-                   	mov rax, L_constants + 2135
 12209 00008450 [5708000000000000] 
 12210 00008458 50                      	push rax
 12211 00008459 6A02                    	push 2	; arg count
 12212 0000845B 488B4510                	mov rax, ENV
 12213 0000845F 488B00                  	mov rax, qword [rax + 8 * 0]
 12214 00008462 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12215 00008465 803804                  	cmp byte [rax], T_closure
 12216 00008468 0F85ADFF0000            	jne L_error_non_closure
 12217 0000846E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12218 00008471 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12219 00008474 FF7500                  	push qword[rbp]
 12220 00008477 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12221 0000847A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12222 0000847E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12223 00008482 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12224 00008486 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12225 00008489 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12226 0000848C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12227 00008491 4983C103                	add r9, 3 	 ;for getting to the params
 12228 00008495 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12229 00008499 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12230                                  .L_tc_recycle_frame_loop_0ea2:
 12231 0000849C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12232 0000849F 7410                    	je .L_tc_recycle_frame_done_0ea2
 12233 000084A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12234 000084A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12235 000084A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12236 000084AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12237 000084AF EBEB                    	jmp .L_tc_recycle_frame_loop_0ea2
 12238                                  .L_tc_recycle_frame_done_0ea2:
 12239 000084B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12240 000084B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12241 000084B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12242 000084B9 E9A0010000              	jmp .L_if_end_07d8
 12243                                  .L_if_else_07d8:
 12244                                  	; preparing a tail-call
 12245                                  	; preparing a non-tail-call
 12246 000084BE 488B4528                	mov rax, PARAM(1)	; param s
 12247 000084C2 50                      	push rax
 12248 000084C3 48B8-                   	mov rax, L_constants + 2135
 12248 000084C5 [5708000000000000] 
 12249 000084CD 50                      	push rax
 12250 000084CE 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 12251 000084D6 803805                  	cmp byte [rax], T_undefined
 12252 000084D9 0F84B8FE0000            	je L_error_fvar_undefined
 12253 000084DF 50                      	push rax
 12254 000084E0 6A03                    	push 3	; arg count
 12255 000084E2 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 12256 000084EA 803805                  	cmp byte [rax], T_undefined
 12257 000084ED 0F84A4FE0000            	je L_error_fvar_undefined
 12258 000084F3 803804                  	cmp byte [rax], T_closure
 12259 000084F6 0F851FFF0000            	jne L_error_non_closure
 12260 000084FC FF7001                  	push SOB_CLOSURE_ENV(rax)
 12261 000084FF FF5009                  	call SOB_CLOSURE_CODE(rax)
 12262 00008502 50                      	push rax
 12263 00008503 6A01                    	push 1	; arg count
 12264 00008505 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12265 0000850A E8B5FF0000              	call malloc
 12266 0000850F 50                      	push rax
 12267 00008510 BF10000000              	mov rdi, 8 * 2	; new rib
 12268 00008515 E8AAFF0000              	call malloc
 12269 0000851A 50                      	push rax
 12270 0000851B BF20000000              	mov rdi, 8 * 4	; extended env
 12271 00008520 E89FFF0000              	call malloc
 12272 00008525 488B7D10                	mov rdi, ENV
 12273 00008529 BE00000000              	mov rsi, 0
 12274 0000852E BA01000000              	mov rdx, 1
 12275                                  .L_lambda_simple_env_loop_0a73:	; ext_env[i + 1] <-- env[i]
 12276 00008533 4883FE03                	cmp rsi, 3
 12277 00008537 7410                    	je .L_lambda_simple_env_end_0a73
 12278 00008539 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12279 0000853D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12280 00008541 48FFC6                  	inc rsi
 12281 00008544 48FFC2                  	inc rdx
 12282 00008547 EBEA                    	jmp .L_lambda_simple_env_loop_0a73
 12283                                  .L_lambda_simple_env_end_0a73:
 12284 00008549 5B                      	pop rbx
 12285 0000854A BE00000000              	mov rsi, 0
 12286                                  .L_lambda_simple_params_loop_0a73:	; copy params
 12287 0000854F 4883FE02                	cmp rsi, 2
 12288 00008553 740E                    	je .L_lambda_simple_params_end_0a73
 12289 00008555 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12290 0000855A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12291 0000855E 48FFC6                  	inc rsi
 12292 00008561 EBEC                    	jmp .L_lambda_simple_params_loop_0a73
 12293                                  .L_lambda_simple_params_end_0a73:
 12294 00008563 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12295 00008566 4889C3                  	mov rbx, rax
 12296 00008569 58                      	pop rax
 12297 0000856A C60004                  	mov byte [rax], T_closure
 12298 0000856D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12299 00008571 48C74009[7E850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a73
 12300 00008579 E98C000000              	jmp .L_lambda_simple_end_0a73
 12301                                  .L_lambda_simple_code_0a73:	; lambda-simple body
 12302 0000857E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12303 00008584 740B                    	je .L_lambda_simple_arity_check_ok_0a73
 12304 00008586 FF742410                	push qword [rsp + 8 * 2]
 12305 0000858A 6A01                    	push 1
 12306 0000858C E9ECFE0000              	jmp L_error_incorrect_arity_simple
 12307                                  .L_lambda_simple_arity_check_ok_0a73:
 12308 00008591 C8000000                	enter 0, 0
 12309                                  	; preparing a tail-call
 12310 00008595 488B4520                	mov rax, PARAM(0)	; param b
 12311 00008599 50                      	push rax
 12312 0000859A 488B4510                	mov rax, ENV
 12313 0000859E 488B00                  	mov rax, qword [rax + 8 * 0]
 12314 000085A1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12315 000085A4 50                      	push rax
 12316 000085A5 6A02                    	push 2	; arg count
 12317 000085A7 488B4510                	mov rax, ENV
 12318 000085AB 488B4008                	mov rax, qword [rax + 8 * 1]
 12319 000085AF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12320 000085B2 803804                  	cmp byte [rax], T_closure
 12321 000085B5 0F8560FE0000            	jne L_error_non_closure
 12322 000085BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 12323 000085BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12324 000085C1 FF7500                  	push qword[rbp]
 12325 000085C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12326 000085C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12327 000085CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12328 000085CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12329 000085D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12330 000085D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12331 000085D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12332 000085DE 4983C103                	add r9, 3 	 ;for getting to the params
 12333 000085E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12334 000085E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12335                                  .L_tc_recycle_frame_loop_0ea3:
 12336 000085E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12337 000085EC 7410                    	je .L_tc_recycle_frame_done_0ea3
 12338 000085EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12339 000085F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12340 000085F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12341 000085F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12342 000085FC EBEB                    	jmp .L_tc_recycle_frame_loop_0ea3
 12343                                  .L_tc_recycle_frame_done_0ea3:
 12344 000085FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12345 000085FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12346 00008603 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12347 00008606 C9                      	leave
 12348 00008607 C21800                  	ret AND_KILL_FRAME(1)
 12349                                  .L_lambda_simple_end_0a73:	; new closure is in rax
 12350 0000860A 803804                  	cmp byte [rax], T_closure
 12351 0000860D 0F8508FE0000            	jne L_error_non_closure
 12352 00008613 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12353 00008616 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12354 00008619 FF7500                  	push qword[rbp]
 12355 0000861C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12356 0000861F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12357 00008623 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12358 00008627 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12359 0000862B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12360 0000862E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12361 00008631 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12362 00008636 4983C103                	add r9, 3 	 ;for getting to the params
 12363 0000863A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12364 0000863E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12365                                  .L_tc_recycle_frame_loop_0ea4:
 12366 00008641 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12367 00008644 7410                    	je .L_tc_recycle_frame_done_0ea4
 12368 00008646 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12369 00008649 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12370 0000864C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12371 00008650 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12372 00008654 EBEB                    	jmp .L_tc_recycle_frame_loop_0ea4
 12373                                  .L_tc_recycle_frame_done_0ea4:
 12374 00008656 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12375 00008657 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12376 0000865B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12377                                  .L_if_end_07d8:
 12378 0000865E C9                      	leave
 12379 0000865F C22000                  	ret AND_KILL_FRAME(2)
 12380 00008662 E911030000              	jmp .L_lambda_opt_end_0149	; new closure is in rax
 12381                                  .L_lambda_opt_arity_check_more_0149:
 12382 00008667 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 12383 0000866C 49B9-                   	mov r9, sob_nil
 12383 0000866E [0100000000000000] 
 12384 00008676 4889E3                  	mov rbx, rsp 
 12385 00008679 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 12386 0000867D 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 12387 00008680 49C1E003                	shl r8, 3
 12388 00008684 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 12389 00008687 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 12390                                  .L_lambda_opt_stack_shrink_loop_0149:
 12391 0000868C 4983F801                	cmp r8, 1
 12392 00008690 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0149
 12393 00008692 BF11000000              	mov rdi, 1+8+8 ;for pair
 12394 00008697 E828FE0000              	call malloc;to create the pair in the stack
 12395 0000869C C60021                  	mov byte [rax], T_pair ; to make it a pair
 12396 0000869F 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 12397 000086A2 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 12398 000086A6 4C894809                 	mov qword[rax+1+8],r9
 12399 000086AA 4989C1                  	mov r9, rax ;for the recursion 
 12400 000086AD 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 12401 000086B0 4883EB08                	sub rbx, 8 ;to get the next param to copy
 12402 000086B4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0149
 12403                                  .L_lambda_opt_stack_shrink_loop_exit_0149:
 12404 000086B6 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 12405 000086BB 4883E902                	sub rcx, 2
 12406 000086BF 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 12407 000086C3 4801CC                  	add rsp, rcx ;shrinking the stack
 12408 000086C6 4889E0                  	mov rax, rsp
 12409 000086C9 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 12410 000086CC 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 12411 000086D0 49FFC8                  	dec r8 ;we start with param 0, not 1 
 12412 000086D3 4883C018                	add rax, 3 * 8;now rax is param 0
 12413 000086D7 49C1E003                	shl r8, 3;convert to byte
 12414 000086DB 4C01C0                  	add rax, r8;now rax is the top of the stack
 12415 000086DE 4C8908                  	mov qword[rax], r9;puting the list at the top
 12416 000086E1 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 12417 000086E5 4889E3                  	mov rbx, rsp 
 12418 000086E8 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 12419 000086EB 41BA01000000            	mov r10, 1;r10 is the not opt params length
 12420 000086F1 49FFCA                  	dec r10 
 12421 000086F4 49C1E203                	shl r10, 3;to get bytes
 12422 000086F8 4883C318                	add rbx, 3*8;rbx is the first param
 12423 000086FC 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 12424 000086FF 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 12425 00008702 4C8900                  	mov qword[rax], r8
 12426 00008705 4883E808                	sub rax, 8
 12427 00008709 4883EB08                	sub rbx, 8
 12428 0000870D 4889E0                  	mov rax, rsp
 12429 00008710 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 12430 00008713 48C744241002000000      	mov qword [rsp+2*8], 2
 12431 0000871C 488B5808                	mov rbx, qword[rax + 8 *1]
 12432 00008720 48895C2408              	mov qword [rsp + 1*8] ,rbx
 12433 00008725 488B18                  	mov rbx, qword[rax]
 12434 00008728 48891C24                	mov qword [rsp], rbx
 12435 0000872C C8000000                	enter 0, 0
 12436                                  	; preparing a non-tail-call
 12437 00008730 488B4528                	mov rax, PARAM(1)	; param s
 12438 00008734 50                      	push rax
 12439 00008735 6A01                    	push 1	; arg count
 12440 00008737 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 12441 0000873F 803805                  	cmp byte [rax], T_undefined
 12442 00008742 0F844FFC0000            	je L_error_fvar_undefined
 12443 00008748 803804                  	cmp byte [rax], T_closure
 12444 0000874B 0F85CAFC0000            	jne L_error_non_closure
 12445 00008751 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12446 00008754 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12447 00008757 483D[02000000]          	cmp rax, sob_boolean_false
 12448 0000875D 7475                    	je .L_if_else_07d7
 12449                                  	; preparing a tail-call
 12450 0000875F 488B4520                	mov rax, PARAM(0)	; param a
 12451 00008763 50                      	push rax
 12452 00008764 48B8-                   	mov rax, L_constants + 2135
 12452 00008766 [5708000000000000] 
 12453 0000876E 50                      	push rax
 12454 0000876F 6A02                    	push 2	; arg count
 12455 00008771 488B4510                	mov rax, ENV
 12456 00008775 488B00                  	mov rax, qword [rax + 8 * 0]
 12457 00008778 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12458 0000877B 803804                  	cmp byte [rax], T_closure
 12459 0000877E 0F8597FC0000            	jne L_error_non_closure
 12460 00008784 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12461 00008787 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12462 0000878A FF7500                  	push qword[rbp]
 12463 0000878D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12464 00008790 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12465 00008794 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12466 00008798 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12467 0000879C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12468 0000879F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12469 000087A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12470 000087A7 4983C103                	add r9, 3 	 ;for getting to the params
 12471 000087AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12472 000087AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12473                                  .L_tc_recycle_frame_loop_0e9f:
 12474 000087B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12475 000087B5 7410                    	je .L_tc_recycle_frame_done_0e9f
 12476 000087B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12477 000087BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12478 000087BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12479 000087C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12480 000087C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0e9f
 12481                                  .L_tc_recycle_frame_done_0e9f:
 12482 000087C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12483 000087C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12484 000087CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12485 000087CF E9A0010000              	jmp .L_if_end_07d7
 12486                                  .L_if_else_07d7:
 12487                                  	; preparing a tail-call
 12488                                  	; preparing a non-tail-call
 12489 000087D4 488B4528                	mov rax, PARAM(1)	; param s
 12490 000087D8 50                      	push rax
 12491 000087D9 48B8-                   	mov rax, L_constants + 2135
 12491 000087DB [5708000000000000] 
 12492 000087E3 50                      	push rax
 12493 000087E4 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 12494 000087EC 803805                  	cmp byte [rax], T_undefined
 12495 000087EF 0F84A2FB0000            	je L_error_fvar_undefined
 12496 000087F5 50                      	push rax
 12497 000087F6 6A03                    	push 3	; arg count
 12498 000087F8 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 12499 00008800 803805                  	cmp byte [rax], T_undefined
 12500 00008803 0F848EFB0000            	je L_error_fvar_undefined
 12501 00008809 803804                  	cmp byte [rax], T_closure
 12502 0000880C 0F8509FC0000            	jne L_error_non_closure
 12503 00008812 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12504 00008815 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12505 00008818 50                      	push rax
 12506 00008819 6A01                    	push 1	; arg count
 12507 0000881B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12508 00008820 E89FFC0000              	call malloc
 12509 00008825 50                      	push rax
 12510 00008826 BF10000000              	mov rdi, 8 * 2	; new rib
 12511 0000882B E894FC0000              	call malloc
 12512 00008830 50                      	push rax
 12513 00008831 BF20000000              	mov rdi, 8 * 4	; extended env
 12514 00008836 E889FC0000              	call malloc
 12515 0000883B 488B7D10                	mov rdi, ENV
 12516 0000883F BE00000000              	mov rsi, 0
 12517 00008844 BA01000000              	mov rdx, 1
 12518                                  .L_lambda_simple_env_loop_0a72:	; ext_env[i + 1] <-- env[i]
 12519 00008849 4883FE03                	cmp rsi, 3
 12520 0000884D 7410                    	je .L_lambda_simple_env_end_0a72
 12521 0000884F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12522 00008853 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12523 00008857 48FFC6                  	inc rsi
 12524 0000885A 48FFC2                  	inc rdx
 12525 0000885D EBEA                    	jmp .L_lambda_simple_env_loop_0a72
 12526                                  .L_lambda_simple_env_end_0a72:
 12527 0000885F 5B                      	pop rbx
 12528 00008860 BE00000000              	mov rsi, 0
 12529                                  .L_lambda_simple_params_loop_0a72:	; copy params
 12530 00008865 4883FE02                	cmp rsi, 2
 12531 00008869 740E                    	je .L_lambda_simple_params_end_0a72
 12532 0000886B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12533 00008870 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12534 00008874 48FFC6                  	inc rsi
 12535 00008877 EBEC                    	jmp .L_lambda_simple_params_loop_0a72
 12536                                  .L_lambda_simple_params_end_0a72:
 12537 00008879 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12538 0000887C 4889C3                  	mov rbx, rax
 12539 0000887F 58                      	pop rax
 12540 00008880 C60004                  	mov byte [rax], T_closure
 12541 00008883 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12542 00008887 48C74009[94880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a72
 12543 0000888F E98C000000              	jmp .L_lambda_simple_end_0a72
 12544                                  .L_lambda_simple_code_0a72:	; lambda-simple body
 12545 00008894 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12546 0000889A 740B                    	je .L_lambda_simple_arity_check_ok_0a72
 12547 0000889C FF742410                	push qword [rsp + 8 * 2]
 12548 000088A0 6A01                    	push 1
 12549 000088A2 E9D6FB0000              	jmp L_error_incorrect_arity_simple
 12550                                  .L_lambda_simple_arity_check_ok_0a72:
 12551 000088A7 C8000000                	enter 0, 0
 12552                                  	; preparing a tail-call
 12553 000088AB 488B4520                	mov rax, PARAM(0)	; param b
 12554 000088AF 50                      	push rax
 12555 000088B0 488B4510                	mov rax, ENV
 12556 000088B4 488B00                  	mov rax, qword [rax + 8 * 0]
 12557 000088B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 12558 000088BA 50                      	push rax
 12559 000088BB 6A02                    	push 2	; arg count
 12560 000088BD 488B4510                	mov rax, ENV
 12561 000088C1 488B4008                	mov rax, qword [rax + 8 * 1]
 12562 000088C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-
 12563 000088C8 803804                  	cmp byte [rax], T_closure
 12564 000088CB 0F854AFB0000            	jne L_error_non_closure
 12565 000088D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12566 000088D4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12567 000088D7 FF7500                  	push qword[rbp]
 12568 000088DA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12569 000088DD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12570 000088E1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12571 000088E5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12572 000088E9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12573 000088EC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12574 000088EF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12575 000088F4 4983C103                	add r9, 3 	 ;for getting to the params
 12576 000088F8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12577 000088FC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12578                                  .L_tc_recycle_frame_loop_0ea0:
 12579 000088FF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12580 00008902 7410                    	je .L_tc_recycle_frame_done_0ea0
 12581 00008904 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12582 00008907 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12583 0000890A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12584 0000890E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12585 00008912 EBEB                    	jmp .L_tc_recycle_frame_loop_0ea0
 12586                                  .L_tc_recycle_frame_done_0ea0:
 12587 00008914 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12588 00008915 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12589 00008919 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12590 0000891C C9                      	leave
 12591 0000891D C21800                  	ret AND_KILL_FRAME(1)
 12592                                  .L_lambda_simple_end_0a72:	; new closure is in rax
 12593 00008920 803804                  	cmp byte [rax], T_closure
 12594 00008923 0F85F2FA0000            	jne L_error_non_closure
 12595 00008929 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12596 0000892C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12597 0000892F FF7500                  	push qword[rbp]
 12598 00008932 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12599 00008935 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12600 00008939 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12601 0000893D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12602 00008941 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12603 00008944 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12604 00008947 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12605 0000894C 4983C103                	add r9, 3 	 ;for getting to the params
 12606 00008950 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12607 00008954 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12608                                  .L_tc_recycle_frame_loop_0ea1:
 12609 00008957 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12610 0000895A 7410                    	je .L_tc_recycle_frame_done_0ea1
 12611 0000895C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12612 0000895F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12613 00008962 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12614 00008966 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12615 0000896A EBEB                    	jmp .L_tc_recycle_frame_loop_0ea1
 12616                                  .L_tc_recycle_frame_done_0ea1:
 12617 0000896C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12618 0000896D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12619 00008971 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12620                                  .L_if_end_07d7:
 12621 00008974 C9                      	leave
 12622 00008975 C22000                  	ret AND_KILL_FRAME(2)
 12623                                  .L_lambda_opt_end_0149:	; new closure is in rax
 12624 00008978 C9                      	leave
 12625 00008979 C21800                  	ret AND_KILL_FRAME(1)
 12626                                  .L_lambda_simple_end_0a71:	; new closure is in rax
 12627 0000897C 803804                  	cmp byte [rax], T_closure
 12628 0000897F 0F8596FA0000            	jne L_error_non_closure
 12629 00008985 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12630 00008988 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12631 0000898B FF7500                  	push qword[rbp]
 12632 0000898E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12633 00008991 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12634 00008995 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12635 00008999 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12636 0000899D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12637 000089A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12638 000089A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12639 000089A8 4983C103                	add r9, 3 	 ;for getting to the params
 12640 000089AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12641 000089B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12642                                  .L_tc_recycle_frame_loop_0ea5:
 12643 000089B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12644 000089B6 7410                    	je .L_tc_recycle_frame_done_0ea5
 12645 000089B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12646 000089BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12647 000089BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12648 000089C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12649 000089C6 EBEB                    	jmp .L_tc_recycle_frame_loop_0ea5
 12650                                  .L_tc_recycle_frame_done_0ea5:
 12651 000089C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12652 000089C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12653 000089CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12654 000089D0 C9                      	leave
 12655 000089D1 C21800                  	ret AND_KILL_FRAME(1)
 12656                                  .L_lambda_simple_end_0a6f:	; new closure is in rax
 12657 000089D4 803804                  	cmp byte [rax], T_closure
 12658 000089D7 0F853EFA0000            	jne L_error_non_closure
 12659 000089DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 12660 000089E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12661 000089E3 48890425[5C0F0000]      	mov qword [free_var_2], rax
 12662 000089EB 48B8-                   	mov rax, sob_void
 12662 000089ED [0000000000000000] 
 12663                                  
 12664 000089F5 4889C7                  	mov rdi, rax
 12665 000089F8 E81CFD0000              	call print_sexpr_if_not_void
 12666                                  	; preparing a non-tail-call
 12667 000089FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12668 00008A02 E8BDFA0000              	call malloc
 12669 00008A07 50                      	push rax
 12670 00008A08 BF00000000              	mov rdi, 8 * 0	; new rib
 12671 00008A0D E8B2FA0000              	call malloc
 12672 00008A12 50                      	push rax
 12673 00008A13 BF08000000              	mov rdi, 8 * 1	; extended env
 12674 00008A18 E8A7FA0000              	call malloc
 12675 00008A1D 488B7D10                	mov rdi, ENV
 12676 00008A21 BE00000000              	mov rsi, 0
 12677 00008A26 BA01000000              	mov rdx, 1
 12678                                  .L_lambda_simple_env_loop_0a74:	; ext_env[i + 1] <-- env[i]
 12679 00008A2B 4883FE00                	cmp rsi, 0
 12680 00008A2F 7410                    	je .L_lambda_simple_env_end_0a74
 12681 00008A31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12682 00008A35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12683 00008A39 48FFC6                  	inc rsi
 12684 00008A3C 48FFC2                  	inc rdx
 12685 00008A3F EBEA                    	jmp .L_lambda_simple_env_loop_0a74
 12686                                  .L_lambda_simple_env_end_0a74:
 12687 00008A41 5B                      	pop rbx
 12688 00008A42 BE00000000              	mov rsi, 0
 12689                                  .L_lambda_simple_params_loop_0a74:	; copy params
 12690 00008A47 4883FE00                	cmp rsi, 0
 12691 00008A4B 740E                    	je .L_lambda_simple_params_end_0a74
 12692 00008A4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12693 00008A52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12694 00008A56 48FFC6                  	inc rsi
 12695 00008A59 EBEC                    	jmp .L_lambda_simple_params_loop_0a74
 12696                                  .L_lambda_simple_params_end_0a74:
 12697 00008A5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12698 00008A5E 4889C3                  	mov rbx, rax
 12699 00008A61 58                      	pop rax
 12700 00008A62 C60004                  	mov byte [rax], T_closure
 12701 00008A65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12702 00008A69 48C74009[768A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a74
 12703 00008A71 E998000000              	jmp .L_lambda_simple_end_0a74
 12704                                  .L_lambda_simple_code_0a74:	; lambda-simple body
 12705 00008A76 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12706 00008A7C 740B                    	je .L_lambda_simple_arity_check_ok_0a74
 12707 00008A7E FF742410                	push qword [rsp + 8 * 2]
 12708 00008A82 6A00                    	push 0
 12709 00008A84 E9F4F90000              	jmp L_error_incorrect_arity_simple
 12710                                  .L_lambda_simple_arity_check_ok_0a74:
 12711 00008A89 C8000000                	enter 0, 0
 12712                                  	; preparing a tail-call
 12713 00008A8D 48B8-                   	mov rax, L_constants + 2187
 12713 00008A8F [8B08000000000000] 
 12714 00008A97 50                      	push rax
 12715 00008A98 48B8-                   	mov rax, L_constants + 2279
 12715 00008A9A [E708000000000000] 
 12716 00008AA2 50                      	push rax
 12717 00008AA3 6A02                    	push 2	; arg count
 12718 00008AA5 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 12719 00008AAD 803805                  	cmp byte [rax], T_undefined
 12720 00008AB0 0F84E1F80000            	je L_error_fvar_undefined
 12721 00008AB6 803804                  	cmp byte [rax], T_closure
 12722 00008AB9 0F855CF90000            	jne L_error_non_closure
 12723 00008ABF FF7001                  	push SOB_CLOSURE_ENV(rax)
 12724 00008AC2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12725 00008AC5 FF7500                  	push qword[rbp]
 12726 00008AC8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12727 00008ACB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12728 00008ACF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12729 00008AD3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12730 00008AD7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12731 00008ADA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12732 00008ADD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12733 00008AE2 4983C103                	add r9, 3 	 ;for getting to the params
 12734 00008AE6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12735 00008AEA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12736                                  .L_tc_recycle_frame_loop_0ea6:
 12737 00008AED 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12738 00008AF0 7410                    	je .L_tc_recycle_frame_done_0ea6
 12739 00008AF2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12740 00008AF5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12741 00008AF8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12742 00008AFC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12743 00008B00 EBEB                    	jmp .L_tc_recycle_frame_loop_0ea6
 12744                                  .L_tc_recycle_frame_done_0ea6:
 12745 00008B02 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12746 00008B03 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12747 00008B07 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12748 00008B0A C9                      	leave
 12749 00008B0B C21000                  	ret AND_KILL_FRAME(0)
 12750                                  .L_lambda_simple_end_0a74:	; new closure is in rax
 12751 00008B0E 50                      	push rax
 12752 00008B0F 6A01                    	push 1	; arg count
 12753 00008B11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12754 00008B16 E8A9F90000              	call malloc
 12755 00008B1B 50                      	push rax
 12756 00008B1C BF00000000              	mov rdi, 8 * 0	; new rib
 12757 00008B21 E89EF90000              	call malloc
 12758 00008B26 50                      	push rax
 12759 00008B27 BF08000000              	mov rdi, 8 * 1	; extended env
 12760 00008B2C E893F90000              	call malloc
 12761 00008B31 488B7D10                	mov rdi, ENV
 12762 00008B35 BE00000000              	mov rsi, 0
 12763 00008B3A BA01000000              	mov rdx, 1
 12764                                  .L_lambda_simple_env_loop_0a75:	; ext_env[i + 1] <-- env[i]
 12765 00008B3F 4883FE00                	cmp rsi, 0
 12766 00008B43 7410                    	je .L_lambda_simple_env_end_0a75
 12767 00008B45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12768 00008B49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12769 00008B4D 48FFC6                  	inc rsi
 12770 00008B50 48FFC2                  	inc rdx
 12771 00008B53 EBEA                    	jmp .L_lambda_simple_env_loop_0a75
 12772                                  .L_lambda_simple_env_end_0a75:
 12773 00008B55 5B                      	pop rbx
 12774 00008B56 BE00000000              	mov rsi, 0
 12775                                  .L_lambda_simple_params_loop_0a75:	; copy params
 12776 00008B5B 4883FE00                	cmp rsi, 0
 12777 00008B5F 740E                    	je .L_lambda_simple_params_end_0a75
 12778 00008B61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12779 00008B66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12780 00008B6A 48FFC6                  	inc rsi
 12781 00008B6D EBEC                    	jmp .L_lambda_simple_params_loop_0a75
 12782                                  .L_lambda_simple_params_end_0a75:
 12783 00008B6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12784 00008B72 4889C3                  	mov rbx, rax
 12785 00008B75 58                      	pop rax
 12786 00008B76 C60004                  	mov byte [rax], T_closure
 12787 00008B79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12788 00008B7D 48C74009[8A8B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a75
 12789 00008B85 E9FF0C0000              	jmp .L_lambda_simple_end_0a75
 12790                                  .L_lambda_simple_code_0a75:	; lambda-simple body
 12791 00008B8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12792 00008B90 740B                    	je .L_lambda_simple_arity_check_ok_0a75
 12793 00008B92 FF742410                	push qword [rsp + 8 * 2]
 12794 00008B96 6A01                    	push 1
 12795 00008B98 E9E0F80000              	jmp L_error_incorrect_arity_simple
 12796                                  .L_lambda_simple_arity_check_ok_0a75:
 12797 00008B9D C8000000                	enter 0, 0
 12798                                  	; preparing a tail-call
 12799 00008BA1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12800 00008BA6 E819F90000              	call malloc
 12801 00008BAB 50                      	push rax
 12802 00008BAC BF08000000              	mov rdi, 8 * 1	; new rib
 12803 00008BB1 E80EF90000              	call malloc
 12804 00008BB6 50                      	push rax
 12805 00008BB7 BF10000000              	mov rdi, 8 * 2	; extended env
 12806 00008BBC E803F90000              	call malloc
 12807 00008BC1 488B7D10                	mov rdi, ENV
 12808 00008BC5 BE00000000              	mov rsi, 0
 12809 00008BCA BA01000000              	mov rdx, 1
 12810                                  .L_lambda_simple_env_loop_0a76:	; ext_env[i + 1] <-- env[i]
 12811 00008BCF 4883FE01                	cmp rsi, 1
 12812 00008BD3 7410                    	je .L_lambda_simple_env_end_0a76
 12813 00008BD5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12814 00008BD9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12815 00008BDD 48FFC6                  	inc rsi
 12816 00008BE0 48FFC2                  	inc rdx
 12817 00008BE3 EBEA                    	jmp .L_lambda_simple_env_loop_0a76
 12818                                  .L_lambda_simple_env_end_0a76:
 12819 00008BE5 5B                      	pop rbx
 12820 00008BE6 BE00000000              	mov rsi, 0
 12821                                  .L_lambda_simple_params_loop_0a76:	; copy params
 12822 00008BEB 4883FE01                	cmp rsi, 1
 12823 00008BEF 740E                    	je .L_lambda_simple_params_end_0a76
 12824 00008BF1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12825 00008BF6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12826 00008BFA 48FFC6                  	inc rsi
 12827 00008BFD EBEC                    	jmp .L_lambda_simple_params_loop_0a76
 12828                                  .L_lambda_simple_params_end_0a76:
 12829 00008BFF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12830 00008C02 4889C3                  	mov rbx, rax
 12831 00008C05 58                      	pop rax
 12832 00008C06 C60004                  	mov byte [rax], T_closure
 12833 00008C09 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12834 00008C0D 48C74009[1A8C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a76
 12835 00008C15 E9EE080000              	jmp .L_lambda_simple_end_0a76
 12836                                  .L_lambda_simple_code_0a76:	; lambda-simple body
 12837 00008C1A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12838 00008C20 740B                    	je .L_lambda_simple_arity_check_ok_0a76
 12839 00008C22 FF742410                	push qword [rsp + 8 * 2]
 12840 00008C26 6A02                    	push 2
 12841 00008C28 E950F80000              	jmp L_error_incorrect_arity_simple
 12842                                  .L_lambda_simple_arity_check_ok_0a76:
 12843 00008C2D C8000000                	enter 0, 0
 12844                                  	; preparing a non-tail-call
 12845 00008C31 488B4520                	mov rax, PARAM(0)	; param a
 12846 00008C35 50                      	push rax
 12847 00008C36 6A01                    	push 1	; arg count
 12848 00008C38 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 12849 00008C40 803805                  	cmp byte [rax], T_undefined
 12850 00008C43 0F844EF70000            	je L_error_fvar_undefined
 12851 00008C49 803804                  	cmp byte [rax], T_closure
 12852 00008C4C 0F85C9F70000            	jne L_error_non_closure
 12853 00008C52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12854 00008C55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12855 00008C58 483D[02000000]          	cmp rax, sob_boolean_false
 12856 00008C5E 0F849F020000            	je .L_if_else_07e4
 12857                                  	; preparing a non-tail-call
 12858 00008C64 488B4528                	mov rax, PARAM(1)	; param b
 12859 00008C68 50                      	push rax
 12860 00008C69 6A01                    	push 1	; arg count
 12861 00008C6B 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 12862 00008C73 803805                  	cmp byte [rax], T_undefined
 12863 00008C76 0F841BF70000            	je L_error_fvar_undefined
 12864 00008C7C 803804                  	cmp byte [rax], T_closure
 12865 00008C7F 0F8596F70000            	jne L_error_non_closure
 12866 00008C85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12867 00008C88 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12868 00008C8B 483D[02000000]          	cmp rax, sob_boolean_false
 12869 00008C91 7476                    	je .L_if_else_07db
 12870                                  	; preparing a tail-call
 12871 00008C93 488B4528                	mov rax, PARAM(1)	; param b
 12872 00008C97 50                      	push rax
 12873 00008C98 488B4520                	mov rax, PARAM(0)	; param a
 12874 00008C9C 50                      	push rax
 12875 00008C9D 6A02                    	push 2	; arg count
 12876 00008C9F 488B0425[D2100000]      	mov rax, qword [free_var_24]	; free var __bin-mul-zz
 12877 00008CA7 803805                  	cmp byte [rax], T_undefined
 12878 00008CAA 0F84E7F60000            	je L_error_fvar_undefined
 12879 00008CB0 803804                  	cmp byte [rax], T_closure
 12880 00008CB3 0F8562F70000            	jne L_error_non_closure
 12881 00008CB9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12882 00008CBC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12883 00008CBF FF7500                  	push qword[rbp]
 12884 00008CC2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12885 00008CC5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12886 00008CC9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12887 00008CCD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12888 00008CD1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12889 00008CD4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12890 00008CD7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12891 00008CDC 4983C103                	add r9, 3 	 ;for getting to the params
 12892 00008CE0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12893 00008CE4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12894                                  .L_tc_recycle_frame_loop_0ea7:
 12895 00008CE7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12896 00008CEA 7410                    	je .L_tc_recycle_frame_done_0ea7
 12897 00008CEC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12898 00008CEF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12899 00008CF2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12900 00008CF6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12901 00008CFA EBEB                    	jmp .L_tc_recycle_frame_loop_0ea7
 12902                                  .L_tc_recycle_frame_done_0ea7:
 12903 00008CFC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12904 00008CFD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12905 00008D01 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12906 00008D04 E9F5010000              	jmp .L_if_end_07db
 12907                                  .L_if_else_07db:
 12908                                  	; preparing a non-tail-call
 12909 00008D09 488B4528                	mov rax, PARAM(1)	; param b
 12910 00008D0D 50                      	push rax
 12911 00008D0E 6A01                    	push 1	; arg count
 12912 00008D10 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 12913 00008D18 803805                  	cmp byte [rax], T_undefined
 12914 00008D1B 0F8476F60000            	je L_error_fvar_undefined
 12915 00008D21 803804                  	cmp byte [rax], T_closure
 12916 00008D24 0F85F1F60000            	jne L_error_non_closure
 12917 00008D2A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12918 00008D2D FF5009                  	call SOB_CLOSURE_CODE(rax)
 12919 00008D30 483D[02000000]          	cmp rax, sob_boolean_false
 12920 00008D36 0F8499000000            	je .L_if_else_07da
 12921                                  	; preparing a tail-call
 12922 00008D3C 488B4528                	mov rax, PARAM(1)	; param b
 12923 00008D40 50                      	push rax
 12924                                  	; preparing a non-tail-call
 12925 00008D41 488B4520                	mov rax, PARAM(0)	; param a
 12926 00008D45 50                      	push rax
 12927 00008D46 6A01                    	push 1	; arg count
 12928 00008D48 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 12929 00008D50 803805                  	cmp byte [rax], T_undefined
 12930 00008D53 0F843EF60000            	je L_error_fvar_undefined
 12931 00008D59 803804                  	cmp byte [rax], T_closure
 12932 00008D5C 0F85B9F60000            	jne L_error_non_closure
 12933 00008D62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12934 00008D65 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12935 00008D68 50                      	push rax
 12936 00008D69 6A02                    	push 2	; arg count
 12937 00008D6B 488B0425[B0100000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 12938 00008D73 803805                  	cmp byte [rax], T_undefined
 12939 00008D76 0F841BF60000            	je L_error_fvar_undefined
 12940 00008D7C 803804                  	cmp byte [rax], T_closure
 12941 00008D7F 0F8596F60000            	jne L_error_non_closure
 12942 00008D85 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12943 00008D88 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 12944 00008D8B FF7500                  	push qword[rbp]
 12945 00008D8E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 12946 00008D91 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 12947 00008D95 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 12948 00008D99 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 12949 00008D9D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 12950 00008DA0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 12951 00008DA3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 12952 00008DA8 4983C103                	add r9, 3 	 ;for getting to the params
 12953 00008DAC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 12954 00008DB0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 12955                                  .L_tc_recycle_frame_loop_0ea8:
 12956 00008DB3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 12957 00008DB6 7410                    	je .L_tc_recycle_frame_done_0ea8
 12958 00008DB8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 12959 00008DBB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 12960 00008DBE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 12961 00008DC2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 12962 00008DC6 EBEB                    	jmp .L_tc_recycle_frame_loop_0ea8
 12963                                  .L_tc_recycle_frame_done_0ea8:
 12964 00008DC8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 12965 00008DC9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 12966 00008DCD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12967 00008DD0 E929010000              	jmp .L_if_end_07da
 12968                                  .L_if_else_07da:
 12969                                  	; preparing a non-tail-call
 12970 00008DD5 488B4528                	mov rax, PARAM(1)	; param b
 12971 00008DD9 50                      	push rax
 12972 00008DDA 6A01                    	push 1	; arg count
 12973 00008DDC 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 12974 00008DE4 803805                  	cmp byte [rax], T_undefined
 12975 00008DE7 0F84AAF50000            	je L_error_fvar_undefined
 12976 00008DED 803804                  	cmp byte [rax], T_closure
 12977 00008DF0 0F8525F60000            	jne L_error_non_closure
 12978 00008DF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12979 00008DF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12980 00008DFC 483D[02000000]          	cmp rax, sob_boolean_false
 12981 00008E02 0F8496000000            	je .L_if_else_07d9
 12982                                  	; preparing a tail-call
 12983 00008E08 488B4528                	mov rax, PARAM(1)	; param b
 12984 00008E0C 50                      	push rax
 12985                                  	; preparing a non-tail-call
 12986 00008E0D 488B4520                	mov rax, PARAM(0)	; param a
 12987 00008E11 50                      	push rax
 12988 00008E12 6A01                    	push 1	; arg count
 12989 00008E14 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 12990 00008E1C 803805                  	cmp byte [rax], T_undefined
 12991 00008E1F 0F8472F50000            	je L_error_fvar_undefined
 12992 00008E25 803804                  	cmp byte [rax], T_closure
 12993 00008E28 0F85EDF50000            	jne L_error_non_closure
 12994 00008E2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 12995 00008E31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12996 00008E34 50                      	push rax
 12997 00008E35 6A02                    	push 2	; arg count
 12998 00008E37 488B0425[C1100000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 12999 00008E3F 803805                  	cmp byte [rax], T_undefined
 13000 00008E42 0F844FF50000            	je L_error_fvar_undefined
 13001 00008E48 803804                  	cmp byte [rax], T_closure
 13002 00008E4B 0F85CAF50000            	jne L_error_non_closure
 13003 00008E51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13004 00008E54 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13005 00008E57 FF7500                  	push qword[rbp]
 13006 00008E5A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13007 00008E5D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13008 00008E61 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13009 00008E65 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13010 00008E69 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13011 00008E6C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13012 00008E6F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13013 00008E74 4983C103                	add r9, 3 	 ;for getting to the params
 13014 00008E78 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13015 00008E7C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13016                                  .L_tc_recycle_frame_loop_0ea9:
 13017 00008E7F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13018 00008E82 7410                    	je .L_tc_recycle_frame_done_0ea9
 13019 00008E84 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13020 00008E87 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13021 00008E8A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13022 00008E8E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13023 00008E92 EBEB                    	jmp .L_tc_recycle_frame_loop_0ea9
 13024                                  .L_tc_recycle_frame_done_0ea9:
 13025 00008E94 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13026 00008E95 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13027 00008E99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13028 00008E9C EB60                    	jmp .L_if_end_07d9
 13029                                  .L_if_else_07d9:
 13030                                  	; preparing a tail-call
 13031 00008E9E 6A00                    	push 0	; arg count
 13032 00008EA0 488B4510                	mov rax, ENV
 13033 00008EA4 488B00                  	mov rax, qword [rax + 8 * 0]
 13034 00008EA7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13035 00008EAA 803804                  	cmp byte [rax], T_closure
 13036 00008EAD 0F8568F50000            	jne L_error_non_closure
 13037 00008EB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13038 00008EB6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13039 00008EB9 FF7500                  	push qword[rbp]
 13040 00008EBC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13041 00008EBF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13042 00008EC3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13043 00008EC7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13044 00008ECB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13045 00008ECE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13046 00008ED1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13047 00008ED6 4983C103                	add r9, 3 	 ;for getting to the params
 13048 00008EDA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13049 00008EDE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13050                                  .L_tc_recycle_frame_loop_0eaa:
 13051 00008EE1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13052 00008EE4 7410                    	je .L_tc_recycle_frame_done_0eaa
 13053 00008EE6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13054 00008EE9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13055 00008EEC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13056 00008EF0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13057 00008EF4 EBEB                    	jmp .L_tc_recycle_frame_loop_0eaa
 13058                                  .L_tc_recycle_frame_done_0eaa:
 13059 00008EF6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13060 00008EF7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13061 00008EFB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13062                                  .L_if_end_07d9:
 13063                                  .L_if_end_07da:
 13064                                  .L_if_end_07db:
 13065 00008EFE E901060000              	jmp .L_if_end_07e4
 13066                                  .L_if_else_07e4:
 13067                                  	; preparing a non-tail-call
 13068 00008F03 488B4520                	mov rax, PARAM(0)	; param a
 13069 00008F07 50                      	push rax
 13070 00008F08 6A01                    	push 1	; arg count
 13071 00008F0A 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 13072 00008F12 803805                  	cmp byte [rax], T_undefined
 13073 00008F15 0F847CF40000            	je L_error_fvar_undefined
 13074 00008F1B 803804                  	cmp byte [rax], T_closure
 13075 00008F1E 0F85F7F40000            	jne L_error_non_closure
 13076 00008F24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13077 00008F27 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13078 00008F2A 483D[02000000]          	cmp rax, sob_boolean_false
 13079 00008F30 0F849F020000            	je .L_if_else_07e3
 13080                                  	; preparing a non-tail-call
 13081 00008F36 488B4528                	mov rax, PARAM(1)	; param b
 13082 00008F3A 50                      	push rax
 13083 00008F3B 6A01                    	push 1	; arg count
 13084 00008F3D 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 13085 00008F45 803805                  	cmp byte [rax], T_undefined
 13086 00008F48 0F8449F40000            	je L_error_fvar_undefined
 13087 00008F4E 803804                  	cmp byte [rax], T_closure
 13088 00008F51 0F85C4F40000            	jne L_error_non_closure
 13089 00008F57 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13090 00008F5A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13091 00008F5D 483D[02000000]          	cmp rax, sob_boolean_false
 13092 00008F63 0F8499000000            	je .L_if_else_07de
 13093                                  	; preparing a tail-call
 13094                                  	; preparing a non-tail-call
 13095 00008F69 488B4528                	mov rax, PARAM(1)	; param b
 13096 00008F6D 50                      	push rax
 13097 00008F6E 6A01                    	push 1	; arg count
 13098 00008F70 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 13099 00008F78 803805                  	cmp byte [rax], T_undefined
 13100 00008F7B 0F8416F40000            	je L_error_fvar_undefined
 13101 00008F81 803804                  	cmp byte [rax], T_closure
 13102 00008F84 0F8591F40000            	jne L_error_non_closure
 13103 00008F8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13104 00008F8D FF5009                  	call SOB_CLOSURE_CODE(rax)
 13105 00008F90 50                      	push rax
 13106 00008F91 488B4520                	mov rax, PARAM(0)	; param a
 13107 00008F95 50                      	push rax
 13108 00008F96 6A02                    	push 2	; arg count
 13109 00008F98 488B0425[B0100000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 13110 00008FA0 803805                  	cmp byte [rax], T_undefined
 13111 00008FA3 0F84EEF30000            	je L_error_fvar_undefined
 13112 00008FA9 803804                  	cmp byte [rax], T_closure
 13113 00008FAC 0F8569F40000            	jne L_error_non_closure
 13114 00008FB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13115 00008FB5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13116 00008FB8 FF7500                  	push qword[rbp]
 13117 00008FBB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13118 00008FBE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13119 00008FC2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13120 00008FC6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13121 00008FCA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13122 00008FCD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13123 00008FD0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13124 00008FD5 4983C103                	add r9, 3 	 ;for getting to the params
 13125 00008FD9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13126 00008FDD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13127                                  .L_tc_recycle_frame_loop_0eab:
 13128 00008FE0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13129 00008FE3 7410                    	je .L_tc_recycle_frame_done_0eab
 13130 00008FE5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13131 00008FE8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13132 00008FEB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13133 00008FEF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13134 00008FF3 EBEB                    	jmp .L_tc_recycle_frame_loop_0eab
 13135                                  .L_tc_recycle_frame_done_0eab:
 13136 00008FF5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13137 00008FF6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13138 00008FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13139 00008FFD E9CE010000              	jmp .L_if_end_07de
 13140                                  .L_if_else_07de:
 13141                                  	; preparing a non-tail-call
 13142 00009002 488B4528                	mov rax, PARAM(1)	; param b
 13143 00009006 50                      	push rax
 13144 00009007 6A01                    	push 1	; arg count
 13145 00009009 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 13146 00009011 803805                  	cmp byte [rax], T_undefined
 13147 00009014 0F847DF30000            	je L_error_fvar_undefined
 13148 0000901A 803804                  	cmp byte [rax], T_closure
 13149 0000901D 0F85F8F30000            	jne L_error_non_closure
 13150 00009023 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13151 00009026 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13152 00009029 483D[02000000]          	cmp rax, sob_boolean_false
 13153 0000902F 7476                    	je .L_if_else_07dd
 13154                                  	; preparing a tail-call
 13155 00009031 488B4528                	mov rax, PARAM(1)	; param b
 13156 00009035 50                      	push rax
 13157 00009036 488B4520                	mov rax, PARAM(0)	; param a
 13158 0000903A 50                      	push rax
 13159 0000903B 6A02                    	push 2	; arg count
 13160 0000903D 488B0425[B0100000]      	mov rax, qword [free_var_22]	; free var __bin-mul-qq
 13161 00009045 803805                  	cmp byte [rax], T_undefined
 13162 00009048 0F8449F30000            	je L_error_fvar_undefined
 13163 0000904E 803804                  	cmp byte [rax], T_closure
 13164 00009051 0F85C4F30000            	jne L_error_non_closure
 13165 00009057 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13166 0000905A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13167 0000905D FF7500                  	push qword[rbp]
 13168 00009060 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13169 00009063 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13170 00009067 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13171 0000906B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13172 0000906F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13173 00009072 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13174 00009075 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13175 0000907A 4983C103                	add r9, 3 	 ;for getting to the params
 13176 0000907E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13177 00009082 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13178                                  .L_tc_recycle_frame_loop_0eac:
 13179 00009085 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13180 00009088 7410                    	je .L_tc_recycle_frame_done_0eac
 13181 0000908A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13182 0000908D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13183 00009090 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13184 00009094 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13185 00009098 EBEB                    	jmp .L_tc_recycle_frame_loop_0eac
 13186                                  .L_tc_recycle_frame_done_0eac:
 13187 0000909A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13188 0000909B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13189 0000909F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13190 000090A2 E929010000              	jmp .L_if_end_07dd
 13191                                  .L_if_else_07dd:
 13192                                  	; preparing a non-tail-call
 13193 000090A7 488B4528                	mov rax, PARAM(1)	; param b
 13194 000090AB 50                      	push rax
 13195 000090AC 6A01                    	push 1	; arg count
 13196 000090AE 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 13197 000090B6 803805                  	cmp byte [rax], T_undefined
 13198 000090B9 0F84D8F20000            	je L_error_fvar_undefined
 13199 000090BF 803804                  	cmp byte [rax], T_closure
 13200 000090C2 0F8553F30000            	jne L_error_non_closure
 13201 000090C8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13202 000090CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 13203 000090CE 483D[02000000]          	cmp rax, sob_boolean_false
 13204 000090D4 0F8496000000            	je .L_if_else_07dc
 13205                                  	; preparing a tail-call
 13206 000090DA 488B4528                	mov rax, PARAM(1)	; param b
 13207 000090DE 50                      	push rax
 13208                                  	; preparing a non-tail-call
 13209 000090DF 488B4520                	mov rax, PARAM(0)	; param a
 13210 000090E3 50                      	push rax
 13211 000090E4 6A01                    	push 1	; arg count
 13212 000090E6 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13213 000090EE 803805                  	cmp byte [rax], T_undefined
 13214 000090F1 0F84A0F20000            	je L_error_fvar_undefined
 13215 000090F7 803804                  	cmp byte [rax], T_closure
 13216 000090FA 0F851BF30000            	jne L_error_non_closure
 13217 00009100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13218 00009103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13219 00009106 50                      	push rax
 13220 00009107 6A02                    	push 2	; arg count
 13221 00009109 488B0425[C1100000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13222 00009111 803805                  	cmp byte [rax], T_undefined
 13223 00009114 0F847DF20000            	je L_error_fvar_undefined
 13224 0000911A 803804                  	cmp byte [rax], T_closure
 13225 0000911D 0F85F8F20000            	jne L_error_non_closure
 13226 00009123 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13227 00009126 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13228 00009129 FF7500                  	push qword[rbp]
 13229 0000912C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13230 0000912F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13231 00009133 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13232 00009137 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13233 0000913B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13234 0000913E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13235 00009141 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13236 00009146 4983C103                	add r9, 3 	 ;for getting to the params
 13237 0000914A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13238 0000914E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13239                                  .L_tc_recycle_frame_loop_0ead:
 13240 00009151 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13241 00009154 7410                    	je .L_tc_recycle_frame_done_0ead
 13242 00009156 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13243 00009159 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13244 0000915C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13245 00009160 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13246 00009164 EBEB                    	jmp .L_tc_recycle_frame_loop_0ead
 13247                                  .L_tc_recycle_frame_done_0ead:
 13248 00009166 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13249 00009167 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13250 0000916B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13251 0000916E EB60                    	jmp .L_if_end_07dc
 13252                                  .L_if_else_07dc:
 13253                                  	; preparing a tail-call
 13254 00009170 6A00                    	push 0	; arg count
 13255 00009172 488B4510                	mov rax, ENV
 13256 00009176 488B00                  	mov rax, qword [rax + 8 * 0]
 13257 00009179 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13258 0000917C 803804                  	cmp byte [rax], T_closure
 13259 0000917F 0F8596F20000            	jne L_error_non_closure
 13260 00009185 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13261 00009188 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13262 0000918B FF7500                  	push qword[rbp]
 13263 0000918E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13264 00009191 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13265 00009195 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13266 00009199 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13267 0000919D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13268 000091A0 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13269 000091A3 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13270 000091A8 4983C103                	add r9, 3 	 ;for getting to the params
 13271 000091AC 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13272 000091B0 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13273                                  .L_tc_recycle_frame_loop_0eae:
 13274 000091B3 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13275 000091B6 7410                    	je .L_tc_recycle_frame_done_0eae
 13276 000091B8 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13277 000091BB 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13278 000091BE 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13279 000091C2 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13280 000091C6 EBEB                    	jmp .L_tc_recycle_frame_loop_0eae
 13281                                  .L_tc_recycle_frame_done_0eae:
 13282 000091C8 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13283 000091C9 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13284 000091CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13285                                  .L_if_end_07dc:
 13286                                  .L_if_end_07dd:
 13287                                  .L_if_end_07de:
 13288 000091D0 E92F030000              	jmp .L_if_end_07e3
 13289                                  .L_if_else_07e3:
 13290                                  	; preparing a non-tail-call
 13291 000091D5 488B4520                	mov rax, PARAM(0)	; param a
 13292 000091D9 50                      	push rax
 13293 000091DA 6A01                    	push 1	; arg count
 13294 000091DC 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 13295 000091E4 803805                  	cmp byte [rax], T_undefined
 13296 000091E7 0F84AAF10000            	je L_error_fvar_undefined
 13297 000091ED 803804                  	cmp byte [rax], T_closure
 13298 000091F0 0F8525F20000            	jne L_error_non_closure
 13299 000091F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13300 000091F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13301 000091FC 483D[02000000]          	cmp rax, sob_boolean_false
 13302 00009202 0F849C020000            	je .L_if_else_07e2
 13303                                  	; preparing a non-tail-call
 13304 00009208 488B4528                	mov rax, PARAM(1)	; param b
 13305 0000920C 50                      	push rax
 13306 0000920D 6A01                    	push 1	; arg count
 13307 0000920F 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 13308 00009217 803805                  	cmp byte [rax], T_undefined
 13309 0000921A 0F8477F10000            	je L_error_fvar_undefined
 13310 00009220 803804                  	cmp byte [rax], T_closure
 13311 00009223 0F85F2F10000            	jne L_error_non_closure
 13312 00009229 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13313 0000922C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13314 0000922F 483D[02000000]          	cmp rax, sob_boolean_false
 13315 00009235 0F8499000000            	je .L_if_else_07e1
 13316                                  	; preparing a tail-call
 13317                                  	; preparing a non-tail-call
 13318 0000923B 488B4528                	mov rax, PARAM(1)	; param b
 13319 0000923F 50                      	push rax
 13320 00009240 6A01                    	push 1	; arg count
 13321 00009242 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 13322 0000924A 803805                  	cmp byte [rax], T_undefined
 13323 0000924D 0F8444F10000            	je L_error_fvar_undefined
 13324 00009253 803804                  	cmp byte [rax], T_closure
 13325 00009256 0F85BFF10000            	jne L_error_non_closure
 13326 0000925C FF7001                  	push SOB_CLOSURE_ENV(rax)
 13327 0000925F FF5009                  	call SOB_CLOSURE_CODE(rax)
 13328 00009262 50                      	push rax
 13329 00009263 488B4520                	mov rax, PARAM(0)	; param a
 13330 00009267 50                      	push rax
 13331 00009268 6A02                    	push 2	; arg count
 13332 0000926A 488B0425[C1100000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13333 00009272 803805                  	cmp byte [rax], T_undefined
 13334 00009275 0F841CF10000            	je L_error_fvar_undefined
 13335 0000927B 803804                  	cmp byte [rax], T_closure
 13336 0000927E 0F8597F10000            	jne L_error_non_closure
 13337 00009284 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13338 00009287 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13339 0000928A FF7500                  	push qword[rbp]
 13340 0000928D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13341 00009290 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13342 00009294 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13343 00009298 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13344 0000929C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13345 0000929F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13346 000092A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13347 000092A7 4983C103                	add r9, 3 	 ;for getting to the params
 13348 000092AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13349 000092AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13350                                  .L_tc_recycle_frame_loop_0eaf:
 13351 000092B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13352 000092B5 7410                    	je .L_tc_recycle_frame_done_0eaf
 13353 000092B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13354 000092BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13355 000092BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13356 000092C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13357 000092C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0eaf
 13358                                  .L_tc_recycle_frame_done_0eaf:
 13359 000092C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13360 000092C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13361 000092CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13362 000092CF E9CE010000              	jmp .L_if_end_07e1
 13363                                  .L_if_else_07e1:
 13364                                  	; preparing a non-tail-call
 13365 000092D4 488B4528                	mov rax, PARAM(1)	; param b
 13366 000092D8 50                      	push rax
 13367 000092D9 6A01                    	push 1	; arg count
 13368 000092DB 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 13369 000092E3 803805                  	cmp byte [rax], T_undefined
 13370 000092E6 0F84ABF00000            	je L_error_fvar_undefined
 13371 000092EC 803804                  	cmp byte [rax], T_closure
 13372 000092EF 0F8526F10000            	jne L_error_non_closure
 13373 000092F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13374 000092F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13375 000092FB 483D[02000000]          	cmp rax, sob_boolean_false
 13376 00009301 0F8499000000            	je .L_if_else_07e0
 13377                                  	; preparing a tail-call
 13378                                  	; preparing a non-tail-call
 13379 00009307 488B4528                	mov rax, PARAM(1)	; param b
 13380 0000930B 50                      	push rax
 13381 0000930C 6A01                    	push 1	; arg count
 13382 0000930E 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 13383 00009316 803805                  	cmp byte [rax], T_undefined
 13384 00009319 0F8478F00000            	je L_error_fvar_undefined
 13385 0000931F 803804                  	cmp byte [rax], T_closure
 13386 00009322 0F85F3F00000            	jne L_error_non_closure
 13387 00009328 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13388 0000932B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13389 0000932E 50                      	push rax
 13390 0000932F 488B4520                	mov rax, PARAM(0)	; param a
 13391 00009333 50                      	push rax
 13392 00009334 6A02                    	push 2	; arg count
 13393 00009336 488B0425[C1100000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13394 0000933E 803805                  	cmp byte [rax], T_undefined
 13395 00009341 0F8450F00000            	je L_error_fvar_undefined
 13396 00009347 803804                  	cmp byte [rax], T_closure
 13397 0000934A 0F85CBF00000            	jne L_error_non_closure
 13398 00009350 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13399 00009353 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13400 00009356 FF7500                  	push qword[rbp]
 13401 00009359 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13402 0000935C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13403 00009360 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13404 00009364 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13405 00009368 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13406 0000936B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13407 0000936E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13408 00009373 4983C103                	add r9, 3 	 ;for getting to the params
 13409 00009377 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13410 0000937B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13411                                  .L_tc_recycle_frame_loop_0eb0:
 13412 0000937E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13413 00009381 7410                    	je .L_tc_recycle_frame_done_0eb0
 13414 00009383 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13415 00009386 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13416 00009389 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13417 0000938D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13418 00009391 EBEB                    	jmp .L_tc_recycle_frame_loop_0eb0
 13419                                  .L_tc_recycle_frame_done_0eb0:
 13420 00009393 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13421 00009394 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13422 00009398 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13423 0000939B E902010000              	jmp .L_if_end_07e0
 13424                                  .L_if_else_07e0:
 13425                                  	; preparing a non-tail-call
 13426 000093A0 488B4528                	mov rax, PARAM(1)	; param b
 13427 000093A4 50                      	push rax
 13428 000093A5 6A01                    	push 1	; arg count
 13429 000093A7 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 13430 000093AF 803805                  	cmp byte [rax], T_undefined
 13431 000093B2 0F84DFEF0000            	je L_error_fvar_undefined
 13432 000093B8 803804                  	cmp byte [rax], T_closure
 13433 000093BB 0F855AF00000            	jne L_error_non_closure
 13434 000093C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13435 000093C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13436 000093C7 483D[02000000]          	cmp rax, sob_boolean_false
 13437 000093CD 7473                    	je .L_if_else_07df
 13438                                  	; preparing a tail-call
 13439 000093CF 488B4528                	mov rax, PARAM(1)	; param b
 13440 000093D3 50                      	push rax
 13441 000093D4 488B4520                	mov rax, PARAM(0)	; param a
 13442 000093D8 50                      	push rax
 13443 000093D9 6A02                    	push 2	; arg count
 13444 000093DB 488B0425[C1100000]      	mov rax, qword [free_var_23]	; free var __bin-mul-rr
 13445 000093E3 803805                  	cmp byte [rax], T_undefined
 13446 000093E6 0F84ABEF0000            	je L_error_fvar_undefined
 13447 000093EC 803804                  	cmp byte [rax], T_closure
 13448 000093EF 0F8526F00000            	jne L_error_non_closure
 13449 000093F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13450 000093F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13451 000093FB FF7500                  	push qword[rbp]
 13452 000093FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13453 00009401 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13454 00009405 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13455 00009409 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13456 0000940D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13457 00009410 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13458 00009413 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13459 00009418 4983C103                	add r9, 3 	 ;for getting to the params
 13460 0000941C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13461 00009420 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13462                                  .L_tc_recycle_frame_loop_0eb1:
 13463 00009423 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13464 00009426 7410                    	je .L_tc_recycle_frame_done_0eb1
 13465 00009428 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13466 0000942B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13467 0000942E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13468 00009432 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13469 00009436 EBEB                    	jmp .L_tc_recycle_frame_loop_0eb1
 13470                                  .L_tc_recycle_frame_done_0eb1:
 13471 00009438 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13472 00009439 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13473 0000943D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13474 00009440 EB60                    	jmp .L_if_end_07df
 13475                                  .L_if_else_07df:
 13476                                  	; preparing a tail-call
 13477 00009442 6A00                    	push 0	; arg count
 13478 00009444 488B4510                	mov rax, ENV
 13479 00009448 488B00                  	mov rax, qword [rax + 8 * 0]
 13480 0000944B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13481 0000944E 803804                  	cmp byte [rax], T_closure
 13482 00009451 0F85C4EF0000            	jne L_error_non_closure
 13483 00009457 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13484 0000945A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13485 0000945D FF7500                  	push qword[rbp]
 13486 00009460 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13487 00009463 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13488 00009467 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13489 0000946B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13490 0000946F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13491 00009472 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13492 00009475 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13493 0000947A 4983C103                	add r9, 3 	 ;for getting to the params
 13494 0000947E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13495 00009482 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13496                                  .L_tc_recycle_frame_loop_0eb2:
 13497 00009485 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13498 00009488 7410                    	je .L_tc_recycle_frame_done_0eb2
 13499 0000948A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13500 0000948D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13501 00009490 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13502 00009494 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13503 00009498 EBEB                    	jmp .L_tc_recycle_frame_loop_0eb2
 13504                                  .L_tc_recycle_frame_done_0eb2:
 13505 0000949A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13506 0000949B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13507 0000949F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13508                                  .L_if_end_07df:
 13509                                  .L_if_end_07e0:
 13510                                  .L_if_end_07e1:
 13511 000094A2 EB60                    	jmp .L_if_end_07e2
 13512                                  .L_if_else_07e2:
 13513                                  	; preparing a tail-call
 13514 000094A4 6A00                    	push 0	; arg count
 13515 000094A6 488B4510                	mov rax, ENV
 13516 000094AA 488B00                  	mov rax, qword [rax + 8 * 0]
 13517 000094AD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 13518 000094B0 803804                  	cmp byte [rax], T_closure
 13519 000094B3 0F8562EF0000            	jne L_error_non_closure
 13520 000094B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13521 000094BC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13522 000094BF FF7500                  	push qword[rbp]
 13523 000094C2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13524 000094C5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13525 000094C9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13526 000094CD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13527 000094D1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13528 000094D4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13529 000094D7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13530 000094DC 4983C103                	add r9, 3 	 ;for getting to the params
 13531 000094E0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13532 000094E4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13533                                  .L_tc_recycle_frame_loop_0eb3:
 13534 000094E7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13535 000094EA 7410                    	je .L_tc_recycle_frame_done_0eb3
 13536 000094EC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13537 000094EF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13538 000094F2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13539 000094F6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13540 000094FA EBEB                    	jmp .L_tc_recycle_frame_loop_0eb3
 13541                                  .L_tc_recycle_frame_done_0eb3:
 13542 000094FC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13543 000094FD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13544 00009501 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13545                                  .L_if_end_07e2:
 13546                                  .L_if_end_07e3:
 13547                                  .L_if_end_07e4:
 13548 00009504 C9                      	leave
 13549 00009505 C22000                  	ret AND_KILL_FRAME(2)
 13550                                  .L_lambda_simple_end_0a76:	; new closure is in rax
 13551 00009508 50                      	push rax
 13552 00009509 6A01                    	push 1	; arg count
 13553 0000950B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13554 00009510 E8AFEF0000              	call malloc
 13555 00009515 50                      	push rax
 13556 00009516 BF08000000              	mov rdi, 8 * 1	; new rib
 13557 0000951B E8A4EF0000              	call malloc
 13558 00009520 50                      	push rax
 13559 00009521 BF10000000              	mov rdi, 8 * 2	; extended env
 13560 00009526 E899EF0000              	call malloc
 13561 0000952B 488B7D10                	mov rdi, ENV
 13562 0000952F BE00000000              	mov rsi, 0
 13563 00009534 BA01000000              	mov rdx, 1
 13564                                  .L_lambda_simple_env_loop_0a77:	; ext_env[i + 1] <-- env[i]
 13565 00009539 4883FE01                	cmp rsi, 1
 13566 0000953D 7410                    	je .L_lambda_simple_env_end_0a77
 13567 0000953F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13568 00009543 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13569 00009547 48FFC6                  	inc rsi
 13570 0000954A 48FFC2                  	inc rdx
 13571 0000954D EBEA                    	jmp .L_lambda_simple_env_loop_0a77
 13572                                  .L_lambda_simple_env_end_0a77:
 13573 0000954F 5B                      	pop rbx
 13574 00009550 BE00000000              	mov rsi, 0
 13575                                  .L_lambda_simple_params_loop_0a77:	; copy params
 13576 00009555 4883FE01                	cmp rsi, 1
 13577 00009559 740E                    	je .L_lambda_simple_params_end_0a77
 13578 0000955B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13579 00009560 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13580 00009564 48FFC6                  	inc rsi
 13581 00009567 EBEC                    	jmp .L_lambda_simple_params_loop_0a77
 13582                                  .L_lambda_simple_params_end_0a77:
 13583 00009569 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13584 0000956C 4889C3                  	mov rbx, rax
 13585 0000956F 58                      	pop rax
 13586 00009570 C60004                  	mov byte [rax], T_closure
 13587 00009573 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13588 00009577 48C74009[84950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a77
 13589 0000957F E9AD020000              	jmp .L_lambda_simple_end_0a77
 13590                                  .L_lambda_simple_code_0a77:	; lambda-simple body
 13591 00009584 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13592 0000958A 740B                    	je .L_lambda_simple_arity_check_ok_0a77
 13593 0000958C FF742410                	push qword [rsp + 8 * 2]
 13594 00009590 6A01                    	push 1
 13595 00009592 E9E6EE0000              	jmp L_error_incorrect_arity_simple
 13596                                  .L_lambda_simple_arity_check_ok_0a77:
 13597 00009597 C8000000                	enter 0, 0
 13598 0000959B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13599 000095A0 E81FEF0000              	call malloc
 13600 000095A5 50                      	push rax
 13601 000095A6 BF08000000              	mov rdi, 8 * 1	; new rib
 13602 000095AB E814EF0000              	call malloc
 13603 000095B0 50                      	push rax
 13604 000095B1 BF18000000              	mov rdi, 8 * 3	; extended env
 13605 000095B6 E809EF0000              	call malloc
 13606 000095BB 488B7D10                	mov rdi, ENV
 13607 000095BF BE00000000              	mov rsi, 0
 13608 000095C4 BA01000000              	mov rdx, 1
 13609                                  .L_lambda_opt_env_loop_014a:	; ext_env[i + 1] <-- env[i]
 13610 000095C9 4883FE02                	cmp rsi, 2
 13611 000095CD 7410                    	je .L_lambda_opt_env_end_014a
 13612 000095CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13613 000095D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13614 000095D7 48FFC6                  	inc rsi
 13615 000095DA 48FFC2                  	inc rdx
 13616 000095DD EBEA                    	jmp .L_lambda_opt_env_loop_014a
 13617                                  .L_lambda_opt_env_end_014a:
 13618 000095DF 5B                      	pop rbx
 13619 000095E0 BE00000000              	mov rsi, 0
 13620                                  .L_lambda_opt_params_loop_014a:	; copy params
 13621 000095E5 4883FE01                	cmp rsi, 1
 13622 000095E9 740E                    	je .L_lambda_opt_params_end_014a
 13623 000095EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13624 000095F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13625 000095F4 48FFC6                  	inc rsi
 13626 000095F7 EBEC                    	jmp .L_lambda_opt_params_loop_014a
 13627                                  .L_lambda_opt_params_end_014a:
 13628 000095F9 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 13629 000095FC 4889C3                  	mov rbx, rax
 13630 000095FF 58                      	pop rax
 13631 00009600 C60004                  	mov byte [rax], T_closure
 13632 00009603 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13633 00009607 48C74009[14960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_014a
 13634 0000960F E919020000              	jmp .L_lambda_opt_end_014a
 13635                                  .L_lambda_opt_code_014a:	; lambda-opt body
 13636 00009614 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13637 0000961A 7411                    	je .L_lambda_opt_arity_check_exact_014a
 13638 0000961C 0F8FCA000000            	jg .L_lambda_opt_arity_check_more_014a
 13639 00009622 FF742410                	push qword [rsp + 8 * 2]
 13640 00009626 6A00                    	push 0
 13641 00009628 E964EE0000              	jmp L_error_incorrect_arity_opt
 13642                                  .L_lambda_opt_arity_check_exact_014a:
 13643 0000962D 4883EC08                	sub rsp, 8
 13644 00009631 488B442408              	mov rax, qword[rsp + 8 *1]
 13645 00009636 48890424                	mov qword[rsp], rax  
 13646 0000963A 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 13647 0000963F 4889442408              	mov qword[rsp + 8 * 1], rax
 13648 00009644 B801000000              	mov rax, 1
 13649 00009649 4889442410              	mov qword[rsp + 8 *2], rax
 13650 0000964E 48B8-                   	mov rax, sob_nil
 13650 00009650 [0100000000000000] 
 13651 00009658 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 13652 0000965D C8000000                	enter 0, 0
 13653                                  	; preparing a tail-call
 13654 00009661 488B4520                	mov rax, PARAM(0)	; param s
 13655 00009665 50                      	push rax
 13656 00009666 48B8-                   	mov rax, L_constants + 2270
 13656 00009668 [DE08000000000000] 
 13657 00009670 50                      	push rax
 13658 00009671 488B4510                	mov rax, ENV
 13659 00009675 488B00                  	mov rax, qword [rax + 8 * 0]
 13660 00009678 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13661 0000967B 50                      	push rax
 13662 0000967C 6A03                    	push 3	; arg count
 13663 0000967E 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 13664 00009686 803805                  	cmp byte [rax], T_undefined
 13665 00009689 0F8408ED0000            	je L_error_fvar_undefined
 13666 0000968F 803804                  	cmp byte [rax], T_closure
 13667 00009692 0F8583ED0000            	jne L_error_non_closure
 13668 00009698 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13669 0000969B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13670 0000969E FF7500                  	push qword[rbp]
 13671 000096A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13672 000096A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13673 000096A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13674 000096AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13675 000096B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13676 000096B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13677 000096B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13678 000096BB 4983C103                	add r9, 3 	 ;for getting to the params
 13679 000096BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13680 000096C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13681                                  .L_tc_recycle_frame_loop_0eb5:
 13682 000096C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13683 000096C9 7410                    	je .L_tc_recycle_frame_done_0eb5
 13684 000096CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13685 000096CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13686 000096D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13687 000096D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13688 000096D9 EBEB                    	jmp .L_tc_recycle_frame_loop_0eb5
 13689                                  .L_tc_recycle_frame_done_0eb5:
 13690 000096DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13691 000096DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13692 000096E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13693 000096E3 C9                      	leave
 13694 000096E4 C21800                  	ret AND_KILL_FRAME(1)
 13695 000096E7 E941010000              	jmp .L_lambda_opt_end_014a	; new closure is in rax
 13696                                  .L_lambda_opt_arity_check_more_014a:
 13697 000096EC 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 13698 000096F1 49B9-                   	mov r9, sob_nil
 13698 000096F3 [0100000000000000] 
 13699 000096FB 4889E3                  	mov rbx, rsp 
 13700 000096FE 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 13701 00009702 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 13702 00009705 49C1E003                	shl r8, 3
 13703 00009709 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 13704 0000970C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 13705                                  .L_lambda_opt_stack_shrink_loop_014a:
 13706 00009711 4983F800                	cmp r8, 0
 13707 00009715 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_014a
 13708 00009717 BF11000000              	mov rdi, 1+8+8 ;for pair
 13709 0000971C E8A3ED0000              	call malloc;to create the pair in the stack
 13710 00009721 C60021                  	mov byte [rax], T_pair ; to make it a pair
 13711 00009724 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 13712 00009727 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 13713 0000972B 4C894809                 	mov qword[rax+1+8],r9
 13714 0000972F 4989C1                  	mov r9, rax ;for the recursion 
 13715 00009732 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 13716 00009735 4883EB08                	sub rbx, 8 ;to get the next param to copy
 13717 00009739 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_014a
 13718                                  .L_lambda_opt_stack_shrink_loop_exit_014a:
 13719 0000973B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 13720 00009740 4883E901                	sub rcx, 1
 13721 00009744 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 13722 00009748 4801CC                  	add rsp, rcx ;shrinking the stack
 13723 0000974B 4889E0                  	mov rax, rsp
 13724 0000974E 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 13725 00009751 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 13726 00009755 49FFC8                  	dec r8 ;we start with param 0, not 1 
 13727 00009758 4883C018                	add rax, 3 * 8;now rax is param 0
 13728 0000975C 49C1E003                	shl r8, 3;convert to byte
 13729 00009760 4C01C0                  	add rax, r8;now rax is the top of the stack
 13730 00009763 4C8908                  	mov qword[rax], r9;puting the list at the top
 13731 00009766 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 13732 0000976A 4889E3                  	mov rbx, rsp 
 13733 0000976D 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 13734 00009770 41BA00000000            	mov r10, 0;r10 is the not opt params length
 13735 00009776 49FFCA                  	dec r10 
 13736 00009779 49C1E203                	shl r10, 3;to get bytes
 13737 0000977D 4883C318                	add rbx, 3*8;rbx is the first param
 13738 00009781 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 13739 00009784 4889E0                  	mov rax, rsp
 13740 00009787 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 13741 0000978A 48C744241001000000      	mov qword [rsp+2*8], 1
 13742 00009793 488B5808                	mov rbx, qword[rax + 8 *1]
 13743 00009797 48895C2408              	mov qword [rsp + 1*8] ,rbx
 13744 0000979C 488B18                  	mov rbx, qword[rax]
 13745 0000979F 48891C24                	mov qword [rsp], rbx
 13746 000097A3 C8000000                	enter 0, 0
 13747                                  	; preparing a tail-call
 13748 000097A7 488B4520                	mov rax, PARAM(0)	; param s
 13749 000097AB 50                      	push rax
 13750 000097AC 48B8-                   	mov rax, L_constants + 2270
 13750 000097AE [DE08000000000000] 
 13751 000097B6 50                      	push rax
 13752 000097B7 488B4510                	mov rax, ENV
 13753 000097BB 488B00                  	mov rax, qword [rax + 8 * 0]
 13754 000097BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin*
 13755 000097C1 50                      	push rax
 13756 000097C2 6A03                    	push 3	; arg count
 13757 000097C4 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 13758 000097CC 803805                  	cmp byte [rax], T_undefined
 13759 000097CF 0F84C2EB0000            	je L_error_fvar_undefined
 13760 000097D5 803804                  	cmp byte [rax], T_closure
 13761 000097D8 0F853DEC0000            	jne L_error_non_closure
 13762 000097DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 13763 000097E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13764 000097E4 FF7500                  	push qword[rbp]
 13765 000097E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13766 000097EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13767 000097EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13768 000097F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13769 000097F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13770 000097F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13771 000097FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13772 00009801 4983C103                	add r9, 3 	 ;for getting to the params
 13773 00009805 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13774 00009809 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13775                                  .L_tc_recycle_frame_loop_0eb4:
 13776 0000980C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13777 0000980F 7410                    	je .L_tc_recycle_frame_done_0eb4
 13778 00009811 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13779 00009814 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13780 00009817 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13781 0000981B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13782 0000981F EBEB                    	jmp .L_tc_recycle_frame_loop_0eb4
 13783                                  .L_tc_recycle_frame_done_0eb4:
 13784 00009821 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13785 00009822 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13786 00009826 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13787 00009829 C9                      	leave
 13788 0000982A C21800                  	ret AND_KILL_FRAME(1)
 13789                                  .L_lambda_opt_end_014a:	; new closure is in rax
 13790 0000982D C9                      	leave
 13791 0000982E C21800                  	ret AND_KILL_FRAME(1)
 13792                                  .L_lambda_simple_end_0a77:	; new closure is in rax
 13793 00009831 803804                  	cmp byte [rax], T_closure
 13794 00009834 0F85E1EB0000            	jne L_error_non_closure
 13795 0000983A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13796 0000983D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13797 00009840 FF7500                  	push qword[rbp]
 13798 00009843 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13799 00009846 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13800 0000984A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13801 0000984E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13802 00009852 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13803 00009855 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13804 00009858 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13805 0000985D 4983C103                	add r9, 3 	 ;for getting to the params
 13806 00009861 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13807 00009865 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13808                                  .L_tc_recycle_frame_loop_0eb6:
 13809 00009868 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13810 0000986B 7410                    	je .L_tc_recycle_frame_done_0eb6
 13811 0000986D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13812 00009870 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13813 00009873 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13814 00009877 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13815 0000987B EBEB                    	jmp .L_tc_recycle_frame_loop_0eb6
 13816                                  .L_tc_recycle_frame_done_0eb6:
 13817 0000987D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13818 0000987E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13819 00009882 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13820 00009885 C9                      	leave
 13821 00009886 C21800                  	ret AND_KILL_FRAME(1)
 13822                                  .L_lambda_simple_end_0a75:	; new closure is in rax
 13823 00009889 803804                  	cmp byte [rax], T_closure
 13824 0000988C 0F8589EB0000            	jne L_error_non_closure
 13825 00009892 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13826 00009895 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13827 00009898 48890425[3A0F0000]      	mov qword [free_var_0], rax
 13828 000098A0 48B8-                   	mov rax, sob_void
 13828 000098A2 [0000000000000000] 
 13829                                  
 13830 000098AA 4889C7                  	mov rdi, rax
 13831 000098AD E867EE0000              	call print_sexpr_if_not_void
 13832                                  	; preparing a non-tail-call
 13833 000098B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13834 000098B7 E808EC0000              	call malloc
 13835 000098BC 50                      	push rax
 13836 000098BD BF00000000              	mov rdi, 8 * 0	; new rib
 13837 000098C2 E8FDEB0000              	call malloc
 13838 000098C7 50                      	push rax
 13839 000098C8 BF08000000              	mov rdi, 8 * 1	; extended env
 13840 000098CD E8F2EB0000              	call malloc
 13841 000098D2 488B7D10                	mov rdi, ENV
 13842 000098D6 BE00000000              	mov rsi, 0
 13843 000098DB BA01000000              	mov rdx, 1
 13844                                  .L_lambda_simple_env_loop_0a78:	; ext_env[i + 1] <-- env[i]
 13845 000098E0 4883FE00                	cmp rsi, 0
 13846 000098E4 7410                    	je .L_lambda_simple_env_end_0a78
 13847 000098E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13848 000098EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13849 000098EE 48FFC6                  	inc rsi
 13850 000098F1 48FFC2                  	inc rdx
 13851 000098F4 EBEA                    	jmp .L_lambda_simple_env_loop_0a78
 13852                                  .L_lambda_simple_env_end_0a78:
 13853 000098F6 5B                      	pop rbx
 13854 000098F7 BE00000000              	mov rsi, 0
 13855                                  .L_lambda_simple_params_loop_0a78:	; copy params
 13856 000098FC 4883FE00                	cmp rsi, 0
 13857 00009900 740E                    	je .L_lambda_simple_params_end_0a78
 13858 00009902 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13859 00009907 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13860 0000990B 48FFC6                  	inc rsi
 13861 0000990E EBEC                    	jmp .L_lambda_simple_params_loop_0a78
 13862                                  .L_lambda_simple_params_end_0a78:
 13863 00009910 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13864 00009913 4889C3                  	mov rbx, rax
 13865 00009916 58                      	pop rax
 13866 00009917 C60004                  	mov byte [rax], T_closure
 13867 0000991A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13868 0000991E 48C74009[2B990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a78
 13869 00009926 E998000000              	jmp .L_lambda_simple_end_0a78
 13870                                  .L_lambda_simple_code_0a78:	; lambda-simple body
 13871 0000992B 48837C241000            	cmp qword [rsp + 8 * 2], 0
 13872 00009931 740B                    	je .L_lambda_simple_arity_check_ok_0a78
 13873 00009933 FF742410                	push qword [rsp + 8 * 2]
 13874 00009937 6A00                    	push 0
 13875 00009939 E93FEB0000              	jmp L_error_incorrect_arity_simple
 13876                                  .L_lambda_simple_arity_check_ok_0a78:
 13877 0000993E C8000000                	enter 0, 0
 13878                                  	; preparing a tail-call
 13879 00009942 48B8-                   	mov rax, L_constants + 2187
 13879 00009944 [8B08000000000000] 
 13880 0000994C 50                      	push rax
 13881 0000994D 48B8-                   	mov rax, L_constants + 2298
 13881 0000994F [FA08000000000000] 
 13882 00009957 50                      	push rax
 13883 00009958 6A02                    	push 2	; arg count
 13884 0000995A 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 13885 00009962 803805                  	cmp byte [rax], T_undefined
 13886 00009965 0F842CEA0000            	je L_error_fvar_undefined
 13887 0000996B 803804                  	cmp byte [rax], T_closure
 13888 0000996E 0F85A7EA0000            	jne L_error_non_closure
 13889 00009974 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13890 00009977 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 13891 0000997A FF7500                  	push qword[rbp]
 13892 0000997D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 13893 00009980 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 13894 00009984 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 13895 00009988 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 13896 0000998C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 13897 0000998F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 13898 00009992 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 13899 00009997 4983C103                	add r9, 3 	 ;for getting to the params
 13900 0000999B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 13901 0000999F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 13902                                  .L_tc_recycle_frame_loop_0eb7:
 13903 000099A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 13904 000099A5 7410                    	je .L_tc_recycle_frame_done_0eb7
 13905 000099A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 13906 000099AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 13907 000099AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 13908 000099B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 13909 000099B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0eb7
 13910                                  .L_tc_recycle_frame_done_0eb7:
 13911 000099B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 13912 000099B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 13913 000099BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13914 000099BF C9                      	leave
 13915 000099C0 C21000                  	ret AND_KILL_FRAME(0)
 13916                                  .L_lambda_simple_end_0a78:	; new closure is in rax
 13917 000099C3 50                      	push rax
 13918 000099C4 6A01                    	push 1	; arg count
 13919 000099C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13920 000099CB E8F4EA0000              	call malloc
 13921 000099D0 50                      	push rax
 13922 000099D1 BF00000000              	mov rdi, 8 * 0	; new rib
 13923 000099D6 E8E9EA0000              	call malloc
 13924 000099DB 50                      	push rax
 13925 000099DC BF08000000              	mov rdi, 8 * 1	; extended env
 13926 000099E1 E8DEEA0000              	call malloc
 13927 000099E6 488B7D10                	mov rdi, ENV
 13928 000099EA BE00000000              	mov rsi, 0
 13929 000099EF BA01000000              	mov rdx, 1
 13930                                  .L_lambda_simple_env_loop_0a79:	; ext_env[i + 1] <-- env[i]
 13931 000099F4 4883FE00                	cmp rsi, 0
 13932 000099F8 7410                    	je .L_lambda_simple_env_end_0a79
 13933 000099FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13934 000099FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13935 00009A02 48FFC6                  	inc rsi
 13936 00009A05 48FFC2                  	inc rdx
 13937 00009A08 EBEA                    	jmp .L_lambda_simple_env_loop_0a79
 13938                                  .L_lambda_simple_env_end_0a79:
 13939 00009A0A 5B                      	pop rbx
 13940 00009A0B BE00000000              	mov rsi, 0
 13941                                  .L_lambda_simple_params_loop_0a79:	; copy params
 13942 00009A10 4883FE00                	cmp rsi, 0
 13943 00009A14 740E                    	je .L_lambda_simple_params_end_0a79
 13944 00009A16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13945 00009A1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13946 00009A1F 48FFC6                  	inc rsi
 13947 00009A22 EBEC                    	jmp .L_lambda_simple_params_loop_0a79
 13948                                  .L_lambda_simple_params_end_0a79:
 13949 00009A24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13950 00009A27 4889C3                  	mov rbx, rax
 13951 00009A2A 58                      	pop rax
 13952 00009A2B C60004                  	mov byte [rax], T_closure
 13953 00009A2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13954 00009A32 48C74009[3F9A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a79
 13955 00009A3A E99B100000              	jmp .L_lambda_simple_end_0a79
 13956                                  .L_lambda_simple_code_0a79:	; lambda-simple body
 13957 00009A3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13958 00009A45 740B                    	je .L_lambda_simple_arity_check_ok_0a79
 13959 00009A47 FF742410                	push qword [rsp + 8 * 2]
 13960 00009A4B 6A01                    	push 1
 13961 00009A4D E92BEA0000              	jmp L_error_incorrect_arity_simple
 13962                                  .L_lambda_simple_arity_check_ok_0a79:
 13963 00009A52 C8000000                	enter 0, 0
 13964                                  	; preparing a tail-call
 13965 00009A56 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13966 00009A5B E864EA0000              	call malloc
 13967 00009A60 50                      	push rax
 13968 00009A61 BF08000000              	mov rdi, 8 * 1	; new rib
 13969 00009A66 E859EA0000              	call malloc
 13970 00009A6B 50                      	push rax
 13971 00009A6C BF10000000              	mov rdi, 8 * 2	; extended env
 13972 00009A71 E84EEA0000              	call malloc
 13973 00009A76 488B7D10                	mov rdi, ENV
 13974 00009A7A BE00000000              	mov rsi, 0
 13975 00009A7F BA01000000              	mov rdx, 1
 13976                                  .L_lambda_simple_env_loop_0a7a:	; ext_env[i + 1] <-- env[i]
 13977 00009A84 4883FE01                	cmp rsi, 1
 13978 00009A88 7410                    	je .L_lambda_simple_env_end_0a7a
 13979 00009A8A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13980 00009A8E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13981 00009A92 48FFC6                  	inc rsi
 13982 00009A95 48FFC2                  	inc rdx
 13983 00009A98 EBEA                    	jmp .L_lambda_simple_env_loop_0a7a
 13984                                  .L_lambda_simple_env_end_0a7a:
 13985 00009A9A 5B                      	pop rbx
 13986 00009A9B BE00000000              	mov rsi, 0
 13987                                  .L_lambda_simple_params_loop_0a7a:	; copy params
 13988 00009AA0 4883FE01                	cmp rsi, 1
 13989 00009AA4 740E                    	je .L_lambda_simple_params_end_0a7a
 13990 00009AA6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13991 00009AAB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13992 00009AAF 48FFC6                  	inc rsi
 13993 00009AB2 EBEC                    	jmp .L_lambda_simple_params_loop_0a7a
 13994                                  .L_lambda_simple_params_end_0a7a:
 13995 00009AB4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13996 00009AB7 4889C3                  	mov rbx, rax
 13997 00009ABA 58                      	pop rax
 13998 00009ABB C60004                  	mov byte [rax], T_closure
 13999 00009ABE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14000 00009AC2 48C74009[CF9A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a7a
 14001 00009ACA E9EE080000              	jmp .L_lambda_simple_end_0a7a
 14002                                  .L_lambda_simple_code_0a7a:	; lambda-simple body
 14003 00009ACF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14004 00009AD5 740B                    	je .L_lambda_simple_arity_check_ok_0a7a
 14005 00009AD7 FF742410                	push qword [rsp + 8 * 2]
 14006 00009ADB 6A02                    	push 2
 14007 00009ADD E99BE90000              	jmp L_error_incorrect_arity_simple
 14008                                  .L_lambda_simple_arity_check_ok_0a7a:
 14009 00009AE2 C8000000                	enter 0, 0
 14010                                  	; preparing a non-tail-call
 14011 00009AE6 488B4520                	mov rax, PARAM(0)	; param a
 14012 00009AEA 50                      	push rax
 14013 00009AEB 6A01                    	push 1	; arg count
 14014 00009AED 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 14015 00009AF5 803805                  	cmp byte [rax], T_undefined
 14016 00009AF8 0F8499E80000            	je L_error_fvar_undefined
 14017 00009AFE 803804                  	cmp byte [rax], T_closure
 14018 00009B01 0F8514E90000            	jne L_error_non_closure
 14019 00009B07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14020 00009B0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14021 00009B0D 483D[02000000]          	cmp rax, sob_boolean_false
 14022 00009B13 0F849F020000            	je .L_if_else_07f0
 14023                                  	; preparing a non-tail-call
 14024 00009B19 488B4528                	mov rax, PARAM(1)	; param b
 14025 00009B1D 50                      	push rax
 14026 00009B1E 6A01                    	push 1	; arg count
 14027 00009B20 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 14028 00009B28 803805                  	cmp byte [rax], T_undefined
 14029 00009B2B 0F8466E80000            	je L_error_fvar_undefined
 14030 00009B31 803804                  	cmp byte [rax], T_closure
 14031 00009B34 0F85E1E80000            	jne L_error_non_closure
 14032 00009B3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14033 00009B3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 14034 00009B40 483D[02000000]          	cmp rax, sob_boolean_false
 14035 00009B46 7476                    	je .L_if_else_07e7
 14036                                  	; preparing a tail-call
 14037 00009B48 488B4528                	mov rax, PARAM(1)	; param b
 14038 00009B4C 50                      	push rax
 14039 00009B4D 488B4520                	mov rax, PARAM(0)	; param a
 14040 00009B51 50                      	push rax
 14041 00009B52 6A02                    	push 2	; arg count
 14042 00009B54 488B0425[39100000]      	mov rax, qword [free_var_15]	; free var __bin-div-zz
 14043 00009B5C 803805                  	cmp byte [rax], T_undefined
 14044 00009B5F 0F8432E80000            	je L_error_fvar_undefined
 14045 00009B65 803804                  	cmp byte [rax], T_closure
 14046 00009B68 0F85ADE80000            	jne L_error_non_closure
 14047 00009B6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14048 00009B71 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14049 00009B74 FF7500                  	push qword[rbp]
 14050 00009B77 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14051 00009B7A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14052 00009B7E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14053 00009B82 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14054 00009B86 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14055 00009B89 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14056 00009B8C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14057 00009B91 4983C103                	add r9, 3 	 ;for getting to the params
 14058 00009B95 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14059 00009B99 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14060                                  .L_tc_recycle_frame_loop_0eb8:
 14061 00009B9C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14062 00009B9F 7410                    	je .L_tc_recycle_frame_done_0eb8
 14063 00009BA1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14064 00009BA4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14065 00009BA7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14066 00009BAB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14067 00009BAF EBEB                    	jmp .L_tc_recycle_frame_loop_0eb8
 14068                                  .L_tc_recycle_frame_done_0eb8:
 14069 00009BB1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14070 00009BB2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14071 00009BB6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14072 00009BB9 E9F5010000              	jmp .L_if_end_07e7
 14073                                  .L_if_else_07e7:
 14074                                  	; preparing a non-tail-call
 14075 00009BBE 488B4528                	mov rax, PARAM(1)	; param b
 14076 00009BC2 50                      	push rax
 14077 00009BC3 6A01                    	push 1	; arg count
 14078 00009BC5 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 14079 00009BCD 803805                  	cmp byte [rax], T_undefined
 14080 00009BD0 0F84C1E70000            	je L_error_fvar_undefined
 14081 00009BD6 803804                  	cmp byte [rax], T_closure
 14082 00009BD9 0F853CE80000            	jne L_error_non_closure
 14083 00009BDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 14084 00009BE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14085 00009BE5 483D[02000000]          	cmp rax, sob_boolean_false
 14086 00009BEB 0F8499000000            	je .L_if_else_07e6
 14087                                  	; preparing a tail-call
 14088 00009BF1 488B4528                	mov rax, PARAM(1)	; param b
 14089 00009BF5 50                      	push rax
 14090                                  	; preparing a non-tail-call
 14091 00009BF6 488B4520                	mov rax, PARAM(0)	; param a
 14092 00009BFA 50                      	push rax
 14093 00009BFB 6A01                    	push 1	; arg count
 14094 00009BFD 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14095 00009C05 803805                  	cmp byte [rax], T_undefined
 14096 00009C08 0F8489E70000            	je L_error_fvar_undefined
 14097 00009C0E 803804                  	cmp byte [rax], T_closure
 14098 00009C11 0F8504E80000            	jne L_error_non_closure
 14099 00009C17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14100 00009C1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14101 00009C1D 50                      	push rax
 14102 00009C1E 6A02                    	push 2	; arg count
 14103 00009C20 488B0425[17100000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14104 00009C28 803805                  	cmp byte [rax], T_undefined
 14105 00009C2B 0F8466E70000            	je L_error_fvar_undefined
 14106 00009C31 803804                  	cmp byte [rax], T_closure
 14107 00009C34 0F85E1E70000            	jne L_error_non_closure
 14108 00009C3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14109 00009C3D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14110 00009C40 FF7500                  	push qword[rbp]
 14111 00009C43 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14112 00009C46 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14113 00009C4A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14114 00009C4E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14115 00009C52 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14116 00009C55 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14117 00009C58 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14118 00009C5D 4983C103                	add r9, 3 	 ;for getting to the params
 14119 00009C61 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14120 00009C65 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14121                                  .L_tc_recycle_frame_loop_0eb9:
 14122 00009C68 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14123 00009C6B 7410                    	je .L_tc_recycle_frame_done_0eb9
 14124 00009C6D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14125 00009C70 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14126 00009C73 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14127 00009C77 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14128 00009C7B EBEB                    	jmp .L_tc_recycle_frame_loop_0eb9
 14129                                  .L_tc_recycle_frame_done_0eb9:
 14130 00009C7D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14131 00009C7E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14132 00009C82 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14133 00009C85 E929010000              	jmp .L_if_end_07e6
 14134                                  .L_if_else_07e6:
 14135                                  	; preparing a non-tail-call
 14136 00009C8A 488B4528                	mov rax, PARAM(1)	; param b
 14137 00009C8E 50                      	push rax
 14138 00009C8F 6A01                    	push 1	; arg count
 14139 00009C91 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 14140 00009C99 803805                  	cmp byte [rax], T_undefined
 14141 00009C9C 0F84F5E60000            	je L_error_fvar_undefined
 14142 00009CA2 803804                  	cmp byte [rax], T_closure
 14143 00009CA5 0F8570E70000            	jne L_error_non_closure
 14144 00009CAB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14145 00009CAE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14146 00009CB1 483D[02000000]          	cmp rax, sob_boolean_false
 14147 00009CB7 0F8496000000            	je .L_if_else_07e5
 14148                                  	; preparing a tail-call
 14149 00009CBD 488B4528                	mov rax, PARAM(1)	; param b
 14150 00009CC1 50                      	push rax
 14151                                  	; preparing a non-tail-call
 14152 00009CC2 488B4520                	mov rax, PARAM(0)	; param a
 14153 00009CC6 50                      	push rax
 14154 00009CC7 6A01                    	push 1	; arg count
 14155 00009CC9 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 14156 00009CD1 803805                  	cmp byte [rax], T_undefined
 14157 00009CD4 0F84BDE60000            	je L_error_fvar_undefined
 14158 00009CDA 803804                  	cmp byte [rax], T_closure
 14159 00009CDD 0F8538E70000            	jne L_error_non_closure
 14160 00009CE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14161 00009CE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14162 00009CE9 50                      	push rax
 14163 00009CEA 6A02                    	push 2	; arg count
 14164 00009CEC 488B0425[28100000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14165 00009CF4 803805                  	cmp byte [rax], T_undefined
 14166 00009CF7 0F849AE60000            	je L_error_fvar_undefined
 14167 00009CFD 803804                  	cmp byte [rax], T_closure
 14168 00009D00 0F8515E70000            	jne L_error_non_closure
 14169 00009D06 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14170 00009D09 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14171 00009D0C FF7500                  	push qword[rbp]
 14172 00009D0F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14173 00009D12 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14174 00009D16 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14175 00009D1A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14176 00009D1E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14177 00009D21 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14178 00009D24 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14179 00009D29 4983C103                	add r9, 3 	 ;for getting to the params
 14180 00009D2D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14181 00009D31 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14182                                  .L_tc_recycle_frame_loop_0eba:
 14183 00009D34 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14184 00009D37 7410                    	je .L_tc_recycle_frame_done_0eba
 14185 00009D39 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14186 00009D3C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14187 00009D3F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14188 00009D43 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14189 00009D47 EBEB                    	jmp .L_tc_recycle_frame_loop_0eba
 14190                                  .L_tc_recycle_frame_done_0eba:
 14191 00009D49 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14192 00009D4A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14193 00009D4E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14194 00009D51 EB60                    	jmp .L_if_end_07e5
 14195                                  .L_if_else_07e5:
 14196                                  	; preparing a tail-call
 14197 00009D53 6A00                    	push 0	; arg count
 14198 00009D55 488B4510                	mov rax, ENV
 14199 00009D59 488B00                  	mov rax, qword [rax + 8 * 0]
 14200 00009D5C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14201 00009D5F 803804                  	cmp byte [rax], T_closure
 14202 00009D62 0F85B3E60000            	jne L_error_non_closure
 14203 00009D68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14204 00009D6B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14205 00009D6E FF7500                  	push qword[rbp]
 14206 00009D71 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14207 00009D74 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14208 00009D78 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14209 00009D7C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14210 00009D80 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14211 00009D83 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14212 00009D86 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14213 00009D8B 4983C103                	add r9, 3 	 ;for getting to the params
 14214 00009D8F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14215 00009D93 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14216                                  .L_tc_recycle_frame_loop_0ebb:
 14217 00009D96 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14218 00009D99 7410                    	je .L_tc_recycle_frame_done_0ebb
 14219 00009D9B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14220 00009D9E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14221 00009DA1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14222 00009DA5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14223 00009DA9 EBEB                    	jmp .L_tc_recycle_frame_loop_0ebb
 14224                                  .L_tc_recycle_frame_done_0ebb:
 14225 00009DAB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14226 00009DAC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14227 00009DB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14228                                  .L_if_end_07e5:
 14229                                  .L_if_end_07e6:
 14230                                  .L_if_end_07e7:
 14231 00009DB3 E901060000              	jmp .L_if_end_07f0
 14232                                  .L_if_else_07f0:
 14233                                  	; preparing a non-tail-call
 14234 00009DB8 488B4520                	mov rax, PARAM(0)	; param a
 14235 00009DBC 50                      	push rax
 14236 00009DBD 6A01                    	push 1	; arg count
 14237 00009DBF 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 14238 00009DC7 803805                  	cmp byte [rax], T_undefined
 14239 00009DCA 0F84C7E50000            	je L_error_fvar_undefined
 14240 00009DD0 803804                  	cmp byte [rax], T_closure
 14241 00009DD3 0F8542E60000            	jne L_error_non_closure
 14242 00009DD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14243 00009DDC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14244 00009DDF 483D[02000000]          	cmp rax, sob_boolean_false
 14245 00009DE5 0F849F020000            	je .L_if_else_07ef
 14246                                  	; preparing a non-tail-call
 14247 00009DEB 488B4528                	mov rax, PARAM(1)	; param b
 14248 00009DEF 50                      	push rax
 14249 00009DF0 6A01                    	push 1	; arg count
 14250 00009DF2 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 14251 00009DFA 803805                  	cmp byte [rax], T_undefined
 14252 00009DFD 0F8494E50000            	je L_error_fvar_undefined
 14253 00009E03 803804                  	cmp byte [rax], T_closure
 14254 00009E06 0F850FE60000            	jne L_error_non_closure
 14255 00009E0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14256 00009E0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 14257 00009E12 483D[02000000]          	cmp rax, sob_boolean_false
 14258 00009E18 0F8499000000            	je .L_if_else_07ea
 14259                                  	; preparing a tail-call
 14260                                  	; preparing a non-tail-call
 14261 00009E1E 488B4528                	mov rax, PARAM(1)	; param b
 14262 00009E22 50                      	push rax
 14263 00009E23 6A01                    	push 1	; arg count
 14264 00009E25 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 14265 00009E2D 803805                  	cmp byte [rax], T_undefined
 14266 00009E30 0F8461E50000            	je L_error_fvar_undefined
 14267 00009E36 803804                  	cmp byte [rax], T_closure
 14268 00009E39 0F85DCE50000            	jne L_error_non_closure
 14269 00009E3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 14270 00009E42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14271 00009E45 50                      	push rax
 14272 00009E46 488B4520                	mov rax, PARAM(0)	; param a
 14273 00009E4A 50                      	push rax
 14274 00009E4B 6A02                    	push 2	; arg count
 14275 00009E4D 488B0425[17100000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14276 00009E55 803805                  	cmp byte [rax], T_undefined
 14277 00009E58 0F8439E50000            	je L_error_fvar_undefined
 14278 00009E5E 803804                  	cmp byte [rax], T_closure
 14279 00009E61 0F85B4E50000            	jne L_error_non_closure
 14280 00009E67 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14281 00009E6A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14282 00009E6D FF7500                  	push qword[rbp]
 14283 00009E70 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14284 00009E73 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14285 00009E77 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14286 00009E7B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14287 00009E7F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14288 00009E82 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14289 00009E85 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14290 00009E8A 4983C103                	add r9, 3 	 ;for getting to the params
 14291 00009E8E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14292 00009E92 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14293                                  .L_tc_recycle_frame_loop_0ebc:
 14294 00009E95 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14295 00009E98 7410                    	je .L_tc_recycle_frame_done_0ebc
 14296 00009E9A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14297 00009E9D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14298 00009EA0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14299 00009EA4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14300 00009EA8 EBEB                    	jmp .L_tc_recycle_frame_loop_0ebc
 14301                                  .L_tc_recycle_frame_done_0ebc:
 14302 00009EAA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14303 00009EAB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14304 00009EAF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14305 00009EB2 E9CE010000              	jmp .L_if_end_07ea
 14306                                  .L_if_else_07ea:
 14307                                  	; preparing a non-tail-call
 14308 00009EB7 488B4528                	mov rax, PARAM(1)	; param b
 14309 00009EBB 50                      	push rax
 14310 00009EBC 6A01                    	push 1	; arg count
 14311 00009EBE 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 14312 00009EC6 803805                  	cmp byte [rax], T_undefined
 14313 00009EC9 0F84C8E40000            	je L_error_fvar_undefined
 14314 00009ECF 803804                  	cmp byte [rax], T_closure
 14315 00009ED2 0F8543E50000            	jne L_error_non_closure
 14316 00009ED8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14317 00009EDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 14318 00009EDE 483D[02000000]          	cmp rax, sob_boolean_false
 14319 00009EE4 7476                    	je .L_if_else_07e9
 14320                                  	; preparing a tail-call
 14321 00009EE6 488B4528                	mov rax, PARAM(1)	; param b
 14322 00009EEA 50                      	push rax
 14323 00009EEB 488B4520                	mov rax, PARAM(0)	; param a
 14324 00009EEF 50                      	push rax
 14325 00009EF0 6A02                    	push 2	; arg count
 14326 00009EF2 488B0425[17100000]      	mov rax, qword [free_var_13]	; free var __bin-div-qq
 14327 00009EFA 803805                  	cmp byte [rax], T_undefined
 14328 00009EFD 0F8494E40000            	je L_error_fvar_undefined
 14329 00009F03 803804                  	cmp byte [rax], T_closure
 14330 00009F06 0F850FE50000            	jne L_error_non_closure
 14331 00009F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14332 00009F0F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14333 00009F12 FF7500                  	push qword[rbp]
 14334 00009F15 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14335 00009F18 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14336 00009F1C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14337 00009F20 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14338 00009F24 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14339 00009F27 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14340 00009F2A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14341 00009F2F 4983C103                	add r9, 3 	 ;for getting to the params
 14342 00009F33 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14343 00009F37 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14344                                  .L_tc_recycle_frame_loop_0ebd:
 14345 00009F3A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14346 00009F3D 7410                    	je .L_tc_recycle_frame_done_0ebd
 14347 00009F3F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14348 00009F42 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14349 00009F45 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14350 00009F49 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14351 00009F4D EBEB                    	jmp .L_tc_recycle_frame_loop_0ebd
 14352                                  .L_tc_recycle_frame_done_0ebd:
 14353 00009F4F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14354 00009F50 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14355 00009F54 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14356 00009F57 E929010000              	jmp .L_if_end_07e9
 14357                                  .L_if_else_07e9:
 14358                                  	; preparing a non-tail-call
 14359 00009F5C 488B4528                	mov rax, PARAM(1)	; param b
 14360 00009F60 50                      	push rax
 14361 00009F61 6A01                    	push 1	; arg count
 14362 00009F63 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 14363 00009F6B 803805                  	cmp byte [rax], T_undefined
 14364 00009F6E 0F8423E40000            	je L_error_fvar_undefined
 14365 00009F74 803804                  	cmp byte [rax], T_closure
 14366 00009F77 0F859EE40000            	jne L_error_non_closure
 14367 00009F7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14368 00009F80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14369 00009F83 483D[02000000]          	cmp rax, sob_boolean_false
 14370 00009F89 0F8496000000            	je .L_if_else_07e8
 14371                                  	; preparing a tail-call
 14372 00009F8F 488B4528                	mov rax, PARAM(1)	; param b
 14373 00009F93 50                      	push rax
 14374                                  	; preparing a non-tail-call
 14375 00009F94 488B4520                	mov rax, PARAM(0)	; param a
 14376 00009F98 50                      	push rax
 14377 00009F99 6A01                    	push 1	; arg count
 14378 00009F9B 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14379 00009FA3 803805                  	cmp byte [rax], T_undefined
 14380 00009FA6 0F84EBE30000            	je L_error_fvar_undefined
 14381 00009FAC 803804                  	cmp byte [rax], T_closure
 14382 00009FAF 0F8566E40000            	jne L_error_non_closure
 14383 00009FB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14384 00009FB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14385 00009FBB 50                      	push rax
 14386 00009FBC 6A02                    	push 2	; arg count
 14387 00009FBE 488B0425[28100000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14388 00009FC6 803805                  	cmp byte [rax], T_undefined
 14389 00009FC9 0F84C8E30000            	je L_error_fvar_undefined
 14390 00009FCF 803804                  	cmp byte [rax], T_closure
 14391 00009FD2 0F8543E40000            	jne L_error_non_closure
 14392 00009FD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14393 00009FDB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14394 00009FDE FF7500                  	push qword[rbp]
 14395 00009FE1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14396 00009FE4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14397 00009FE8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14398 00009FEC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14399 00009FF0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14400 00009FF3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14401 00009FF6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14402 00009FFB 4983C103                	add r9, 3 	 ;for getting to the params
 14403 00009FFF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14404 0000A003 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14405                                  .L_tc_recycle_frame_loop_0ebe:
 14406 0000A006 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14407 0000A009 7410                    	je .L_tc_recycle_frame_done_0ebe
 14408 0000A00B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14409 0000A00E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14410 0000A011 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14411 0000A015 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14412 0000A019 EBEB                    	jmp .L_tc_recycle_frame_loop_0ebe
 14413                                  .L_tc_recycle_frame_done_0ebe:
 14414 0000A01B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14415 0000A01C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14416 0000A020 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14417 0000A023 EB60                    	jmp .L_if_end_07e8
 14418                                  .L_if_else_07e8:
 14419                                  	; preparing a tail-call
 14420 0000A025 6A00                    	push 0	; arg count
 14421 0000A027 488B4510                	mov rax, ENV
 14422 0000A02B 488B00                  	mov rax, qword [rax + 8 * 0]
 14423 0000A02E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14424 0000A031 803804                  	cmp byte [rax], T_closure
 14425 0000A034 0F85E1E30000            	jne L_error_non_closure
 14426 0000A03A FF7001                  	push SOB_CLOSURE_ENV(rax)
 14427 0000A03D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14428 0000A040 FF7500                  	push qword[rbp]
 14429 0000A043 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14430 0000A046 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14431 0000A04A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14432 0000A04E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14433 0000A052 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14434 0000A055 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14435 0000A058 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14436 0000A05D 4983C103                	add r9, 3 	 ;for getting to the params
 14437 0000A061 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14438 0000A065 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14439                                  .L_tc_recycle_frame_loop_0ebf:
 14440 0000A068 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14441 0000A06B 7410                    	je .L_tc_recycle_frame_done_0ebf
 14442 0000A06D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14443 0000A070 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14444 0000A073 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14445 0000A077 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14446 0000A07B EBEB                    	jmp .L_tc_recycle_frame_loop_0ebf
 14447                                  .L_tc_recycle_frame_done_0ebf:
 14448 0000A07D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14449 0000A07E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14450 0000A082 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14451                                  .L_if_end_07e8:
 14452                                  .L_if_end_07e9:
 14453                                  .L_if_end_07ea:
 14454 0000A085 E92F030000              	jmp .L_if_end_07ef
 14455                                  .L_if_else_07ef:
 14456                                  	; preparing a non-tail-call
 14457 0000A08A 488B4520                	mov rax, PARAM(0)	; param a
 14458 0000A08E 50                      	push rax
 14459 0000A08F 6A01                    	push 1	; arg count
 14460 0000A091 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 14461 0000A099 803805                  	cmp byte [rax], T_undefined
 14462 0000A09C 0F84F5E20000            	je L_error_fvar_undefined
 14463 0000A0A2 803804                  	cmp byte [rax], T_closure
 14464 0000A0A5 0F8570E30000            	jne L_error_non_closure
 14465 0000A0AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14466 0000A0AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14467 0000A0B1 483D[02000000]          	cmp rax, sob_boolean_false
 14468 0000A0B7 0F849C020000            	je .L_if_else_07ee
 14469                                  	; preparing a non-tail-call
 14470 0000A0BD 488B4528                	mov rax, PARAM(1)	; param b
 14471 0000A0C1 50                      	push rax
 14472 0000A0C2 6A01                    	push 1	; arg count
 14473 0000A0C4 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 14474 0000A0CC 803805                  	cmp byte [rax], T_undefined
 14475 0000A0CF 0F84C2E20000            	je L_error_fvar_undefined
 14476 0000A0D5 803804                  	cmp byte [rax], T_closure
 14477 0000A0D8 0F853DE30000            	jne L_error_non_closure
 14478 0000A0DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14479 0000A0E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14480 0000A0E4 483D[02000000]          	cmp rax, sob_boolean_false
 14481 0000A0EA 0F8499000000            	je .L_if_else_07ed
 14482                                  	; preparing a tail-call
 14483                                  	; preparing a non-tail-call
 14484 0000A0F0 488B4528                	mov rax, PARAM(1)	; param b
 14485 0000A0F4 50                      	push rax
 14486 0000A0F5 6A01                    	push 1	; arg count
 14487 0000A0F7 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 14488 0000A0FF 803805                  	cmp byte [rax], T_undefined
 14489 0000A102 0F848FE20000            	je L_error_fvar_undefined
 14490 0000A108 803804                  	cmp byte [rax], T_closure
 14491 0000A10B 0F850AE30000            	jne L_error_non_closure
 14492 0000A111 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14493 0000A114 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14494 0000A117 50                      	push rax
 14495 0000A118 488B4520                	mov rax, PARAM(0)	; param a
 14496 0000A11C 50                      	push rax
 14497 0000A11D 6A02                    	push 2	; arg count
 14498 0000A11F 488B0425[28100000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14499 0000A127 803805                  	cmp byte [rax], T_undefined
 14500 0000A12A 0F8467E20000            	je L_error_fvar_undefined
 14501 0000A130 803804                  	cmp byte [rax], T_closure
 14502 0000A133 0F85E2E20000            	jne L_error_non_closure
 14503 0000A139 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14504 0000A13C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14505 0000A13F FF7500                  	push qword[rbp]
 14506 0000A142 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14507 0000A145 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14508 0000A149 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14509 0000A14D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14510 0000A151 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14511 0000A154 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14512 0000A157 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14513 0000A15C 4983C103                	add r9, 3 	 ;for getting to the params
 14514 0000A160 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14515 0000A164 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14516                                  .L_tc_recycle_frame_loop_0ec0:
 14517 0000A167 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14518 0000A16A 7410                    	je .L_tc_recycle_frame_done_0ec0
 14519 0000A16C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14520 0000A16F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14521 0000A172 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14522 0000A176 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14523 0000A17A EBEB                    	jmp .L_tc_recycle_frame_loop_0ec0
 14524                                  .L_tc_recycle_frame_done_0ec0:
 14525 0000A17C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14526 0000A17D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14527 0000A181 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14528 0000A184 E9CE010000              	jmp .L_if_end_07ed
 14529                                  .L_if_else_07ed:
 14530                                  	; preparing a non-tail-call
 14531 0000A189 488B4528                	mov rax, PARAM(1)	; param b
 14532 0000A18D 50                      	push rax
 14533 0000A18E 6A01                    	push 1	; arg count
 14534 0000A190 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 14535 0000A198 803805                  	cmp byte [rax], T_undefined
 14536 0000A19B 0F84F6E10000            	je L_error_fvar_undefined
 14537 0000A1A1 803804                  	cmp byte [rax], T_closure
 14538 0000A1A4 0F8571E20000            	jne L_error_non_closure
 14539 0000A1AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14540 0000A1AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14541 0000A1B0 483D[02000000]          	cmp rax, sob_boolean_false
 14542 0000A1B6 0F8499000000            	je .L_if_else_07ec
 14543                                  	; preparing a tail-call
 14544                                  	; preparing a non-tail-call
 14545 0000A1BC 488B4528                	mov rax, PARAM(1)	; param b
 14546 0000A1C0 50                      	push rax
 14547 0000A1C1 6A01                    	push 1	; arg count
 14548 0000A1C3 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 14549 0000A1CB 803805                  	cmp byte [rax], T_undefined
 14550 0000A1CE 0F84C3E10000            	je L_error_fvar_undefined
 14551 0000A1D4 803804                  	cmp byte [rax], T_closure
 14552 0000A1D7 0F853EE20000            	jne L_error_non_closure
 14553 0000A1DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 14554 0000A1E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14555 0000A1E3 50                      	push rax
 14556 0000A1E4 488B4520                	mov rax, PARAM(0)	; param a
 14557 0000A1E8 50                      	push rax
 14558 0000A1E9 6A02                    	push 2	; arg count
 14559 0000A1EB 488B0425[28100000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14560 0000A1F3 803805                  	cmp byte [rax], T_undefined
 14561 0000A1F6 0F849BE10000            	je L_error_fvar_undefined
 14562 0000A1FC 803804                  	cmp byte [rax], T_closure
 14563 0000A1FF 0F8516E20000            	jne L_error_non_closure
 14564 0000A205 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14565 0000A208 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14566 0000A20B FF7500                  	push qword[rbp]
 14567 0000A20E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14568 0000A211 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14569 0000A215 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14570 0000A219 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14571 0000A21D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14572 0000A220 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14573 0000A223 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14574 0000A228 4983C103                	add r9, 3 	 ;for getting to the params
 14575 0000A22C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14576 0000A230 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14577                                  .L_tc_recycle_frame_loop_0ec1:
 14578 0000A233 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14579 0000A236 7410                    	je .L_tc_recycle_frame_done_0ec1
 14580 0000A238 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14581 0000A23B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14582 0000A23E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14583 0000A242 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14584 0000A246 EBEB                    	jmp .L_tc_recycle_frame_loop_0ec1
 14585                                  .L_tc_recycle_frame_done_0ec1:
 14586 0000A248 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14587 0000A249 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14588 0000A24D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14589 0000A250 E902010000              	jmp .L_if_end_07ec
 14590                                  .L_if_else_07ec:
 14591                                  	; preparing a non-tail-call
 14592 0000A255 488B4528                	mov rax, PARAM(1)	; param b
 14593 0000A259 50                      	push rax
 14594 0000A25A 6A01                    	push 1	; arg count
 14595 0000A25C 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 14596 0000A264 803805                  	cmp byte [rax], T_undefined
 14597 0000A267 0F842AE10000            	je L_error_fvar_undefined
 14598 0000A26D 803804                  	cmp byte [rax], T_closure
 14599 0000A270 0F85A5E10000            	jne L_error_non_closure
 14600 0000A276 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14601 0000A279 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14602 0000A27C 483D[02000000]          	cmp rax, sob_boolean_false
 14603 0000A282 7473                    	je .L_if_else_07eb
 14604                                  	; preparing a tail-call
 14605 0000A284 488B4528                	mov rax, PARAM(1)	; param b
 14606 0000A288 50                      	push rax
 14607 0000A289 488B4520                	mov rax, PARAM(0)	; param a
 14608 0000A28D 50                      	push rax
 14609 0000A28E 6A02                    	push 2	; arg count
 14610 0000A290 488B0425[28100000]      	mov rax, qword [free_var_14]	; free var __bin-div-rr
 14611 0000A298 803805                  	cmp byte [rax], T_undefined
 14612 0000A29B 0F84F6E00000            	je L_error_fvar_undefined
 14613 0000A2A1 803804                  	cmp byte [rax], T_closure
 14614 0000A2A4 0F8571E10000            	jne L_error_non_closure
 14615 0000A2AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14616 0000A2AD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14617 0000A2B0 FF7500                  	push qword[rbp]
 14618 0000A2B3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14619 0000A2B6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14620 0000A2BA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14621 0000A2BE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14622 0000A2C2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14623 0000A2C5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14624 0000A2C8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14625 0000A2CD 4983C103                	add r9, 3 	 ;for getting to the params
 14626 0000A2D1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14627 0000A2D5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14628                                  .L_tc_recycle_frame_loop_0ec2:
 14629 0000A2D8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14630 0000A2DB 7410                    	je .L_tc_recycle_frame_done_0ec2
 14631 0000A2DD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14632 0000A2E0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14633 0000A2E3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14634 0000A2E7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14635 0000A2EB EBEB                    	jmp .L_tc_recycle_frame_loop_0ec2
 14636                                  .L_tc_recycle_frame_done_0ec2:
 14637 0000A2ED 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14638 0000A2EE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14639 0000A2F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14640 0000A2F5 EB60                    	jmp .L_if_end_07eb
 14641                                  .L_if_else_07eb:
 14642                                  	; preparing a tail-call
 14643 0000A2F7 6A00                    	push 0	; arg count
 14644 0000A2F9 488B4510                	mov rax, ENV
 14645 0000A2FD 488B00                  	mov rax, qword [rax + 8 * 0]
 14646 0000A300 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14647 0000A303 803804                  	cmp byte [rax], T_closure
 14648 0000A306 0F850FE10000            	jne L_error_non_closure
 14649 0000A30C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14650 0000A30F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14651 0000A312 FF7500                  	push qword[rbp]
 14652 0000A315 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14653 0000A318 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14654 0000A31C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14655 0000A320 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14656 0000A324 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14657 0000A327 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14658 0000A32A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14659 0000A32F 4983C103                	add r9, 3 	 ;for getting to the params
 14660 0000A333 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14661 0000A337 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14662                                  .L_tc_recycle_frame_loop_0ec3:
 14663 0000A33A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14664 0000A33D 7410                    	je .L_tc_recycle_frame_done_0ec3
 14665 0000A33F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14666 0000A342 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14667 0000A345 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14668 0000A349 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14669 0000A34D EBEB                    	jmp .L_tc_recycle_frame_loop_0ec3
 14670                                  .L_tc_recycle_frame_done_0ec3:
 14671 0000A34F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14672 0000A350 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14673 0000A354 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14674                                  .L_if_end_07eb:
 14675                                  .L_if_end_07ec:
 14676                                  .L_if_end_07ed:
 14677 0000A357 EB60                    	jmp .L_if_end_07ee
 14678                                  .L_if_else_07ee:
 14679                                  	; preparing a tail-call
 14680 0000A359 6A00                    	push 0	; arg count
 14681 0000A35B 488B4510                	mov rax, ENV
 14682 0000A35F 488B00                  	mov rax, qword [rax + 8 * 0]
 14683 0000A362 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var error
 14684 0000A365 803804                  	cmp byte [rax], T_closure
 14685 0000A368 0F85ADE00000            	jne L_error_non_closure
 14686 0000A36E FF7001                  	push SOB_CLOSURE_ENV(rax)
 14687 0000A371 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14688 0000A374 FF7500                  	push qword[rbp]
 14689 0000A377 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14690 0000A37A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14691 0000A37E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14692 0000A382 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14693 0000A386 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14694 0000A389 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14695 0000A38C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14696 0000A391 4983C103                	add r9, 3 	 ;for getting to the params
 14697 0000A395 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14698 0000A399 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14699                                  .L_tc_recycle_frame_loop_0ec4:
 14700 0000A39C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14701 0000A39F 7410                    	je .L_tc_recycle_frame_done_0ec4
 14702 0000A3A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14703 0000A3A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14704 0000A3A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14705 0000A3AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14706 0000A3AF EBEB                    	jmp .L_tc_recycle_frame_loop_0ec4
 14707                                  .L_tc_recycle_frame_done_0ec4:
 14708 0000A3B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14709 0000A3B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14710 0000A3B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14711                                  .L_if_end_07ee:
 14712                                  .L_if_end_07ef:
 14713                                  .L_if_end_07f0:
 14714 0000A3B9 C9                      	leave
 14715 0000A3BA C22000                  	ret AND_KILL_FRAME(2)
 14716                                  .L_lambda_simple_end_0a7a:	; new closure is in rax
 14717 0000A3BD 50                      	push rax
 14718 0000A3BE 6A01                    	push 1	; arg count
 14719 0000A3C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14720 0000A3C5 E8FAE00000              	call malloc
 14721 0000A3CA 50                      	push rax
 14722 0000A3CB BF08000000              	mov rdi, 8 * 1	; new rib
 14723 0000A3D0 E8EFE00000              	call malloc
 14724 0000A3D5 50                      	push rax
 14725 0000A3D6 BF10000000              	mov rdi, 8 * 2	; extended env
 14726 0000A3DB E8E4E00000              	call malloc
 14727 0000A3E0 488B7D10                	mov rdi, ENV
 14728 0000A3E4 BE00000000              	mov rsi, 0
 14729 0000A3E9 BA01000000              	mov rdx, 1
 14730                                  .L_lambda_simple_env_loop_0a7b:	; ext_env[i + 1] <-- env[i]
 14731 0000A3EE 4883FE01                	cmp rsi, 1
 14732 0000A3F2 7410                    	je .L_lambda_simple_env_end_0a7b
 14733 0000A3F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14734 0000A3F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14735 0000A3FC 48FFC6                  	inc rsi
 14736 0000A3FF 48FFC2                  	inc rdx
 14737 0000A402 EBEA                    	jmp .L_lambda_simple_env_loop_0a7b
 14738                                  .L_lambda_simple_env_end_0a7b:
 14739 0000A404 5B                      	pop rbx
 14740 0000A405 BE00000000              	mov rsi, 0
 14741                                  .L_lambda_simple_params_loop_0a7b:	; copy params
 14742 0000A40A 4883FE01                	cmp rsi, 1
 14743 0000A40E 740E                    	je .L_lambda_simple_params_end_0a7b
 14744 0000A410 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14745 0000A415 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14746 0000A419 48FFC6                  	inc rsi
 14747 0000A41C EBEC                    	jmp .L_lambda_simple_params_loop_0a7b
 14748                                  .L_lambda_simple_params_end_0a7b:
 14749 0000A41E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14750 0000A421 4889C3                  	mov rbx, rax
 14751 0000A424 58                      	pop rax
 14752 0000A425 C60004                  	mov byte [rax], T_closure
 14753 0000A428 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14754 0000A42C 48C74009[39A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a7b
 14755 0000A434 E949060000              	jmp .L_lambda_simple_end_0a7b
 14756                                  .L_lambda_simple_code_0a7b:	; lambda-simple body
 14757 0000A439 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14758 0000A43F 740B                    	je .L_lambda_simple_arity_check_ok_0a7b
 14759 0000A441 FF742410                	push qword [rsp + 8 * 2]
 14760 0000A445 6A01                    	push 1
 14761 0000A447 E931E00000              	jmp L_error_incorrect_arity_simple
 14762                                  .L_lambda_simple_arity_check_ok_0a7b:
 14763 0000A44C C8000000                	enter 0, 0
 14764 0000A450 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14765 0000A455 E86AE00000              	call malloc
 14766 0000A45A 50                      	push rax
 14767 0000A45B BF08000000              	mov rdi, 8 * 1	; new rib
 14768 0000A460 E85FE00000              	call malloc
 14769 0000A465 50                      	push rax
 14770 0000A466 BF18000000              	mov rdi, 8 * 3	; extended env
 14771 0000A46B E854E00000              	call malloc
 14772 0000A470 488B7D10                	mov rdi, ENV
 14773 0000A474 BE00000000              	mov rsi, 0
 14774 0000A479 BA01000000              	mov rdx, 1
 14775                                  .L_lambda_opt_env_loop_014b:	; ext_env[i + 1] <-- env[i]
 14776 0000A47E 4883FE02                	cmp rsi, 2
 14777 0000A482 7410                    	je .L_lambda_opt_env_end_014b
 14778 0000A484 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14779 0000A488 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14780 0000A48C 48FFC6                  	inc rsi
 14781 0000A48F 48FFC2                  	inc rdx
 14782 0000A492 EBEA                    	jmp .L_lambda_opt_env_loop_014b
 14783                                  .L_lambda_opt_env_end_014b:
 14784 0000A494 5B                      	pop rbx
 14785 0000A495 BE00000000              	mov rsi, 0
 14786                                  .L_lambda_opt_params_loop_014b:	; copy params
 14787 0000A49A 4883FE01                	cmp rsi, 1
 14788 0000A49E 740E                    	je .L_lambda_opt_params_end_014b
 14789 0000A4A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14790 0000A4A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14791 0000A4A9 48FFC6                  	inc rsi
 14792 0000A4AC EBEC                    	jmp .L_lambda_opt_params_loop_014b
 14793                                  .L_lambda_opt_params_end_014b:
 14794 0000A4AE 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 14795 0000A4B1 4889C3                  	mov rbx, rax
 14796 0000A4B4 58                      	pop rax
 14797 0000A4B5 C60004                  	mov byte [rax], T_closure
 14798 0000A4B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14799 0000A4BC 48C74009[C9A40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_014b
 14800 0000A4C4 E9B5050000              	jmp .L_lambda_opt_end_014b
 14801                                  .L_lambda_opt_code_014b:	; lambda-opt body
 14802 0000A4C9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14803 0000A4CF 7411                    	je .L_lambda_opt_arity_check_exact_014b
 14804 0000A4D1 0F8F96020000            	jg .L_lambda_opt_arity_check_more_014b
 14805 0000A4D7 FF742410                	push qword [rsp + 8 * 2]
 14806 0000A4DB 6A01                    	push 1
 14807 0000A4DD E9AFDF0000              	jmp L_error_incorrect_arity_opt
 14808                                  .L_lambda_opt_arity_check_exact_014b:
 14809 0000A4E2 4883EC08                	sub rsp, 8
 14810 0000A4E6 488B442408              	mov rax, qword[rsp + 8 *1]
 14811 0000A4EB 48890424                	mov qword[rsp], rax  
 14812 0000A4EF 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 14813 0000A4F4 4889442408              	mov qword[rsp + 8 * 1], rax
 14814 0000A4F9 B802000000              	mov rax, 2
 14815 0000A4FE 4889442410              	mov qword[rsp + 8 *2], rax
 14816 0000A503 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 14817 0000A508 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 14818 0000A50D 48B8-                   	mov rax, sob_nil
 14818 0000A50F [0100000000000000] 
 14819 0000A517 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 14820 0000A51C C8000000                	enter 0, 0
 14821                                  	; preparing a non-tail-call
 14822 0000A520 488B4528                	mov rax, PARAM(1)	; param s
 14823 0000A524 50                      	push rax
 14824 0000A525 6A01                    	push 1	; arg count
 14825 0000A527 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 14826 0000A52F 803805                  	cmp byte [rax], T_undefined
 14827 0000A532 0F845FDE0000            	je L_error_fvar_undefined
 14828 0000A538 803804                  	cmp byte [rax], T_closure
 14829 0000A53B 0F85DADE0000            	jne L_error_non_closure
 14830 0000A541 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14831 0000A544 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14832 0000A547 483D[02000000]          	cmp rax, sob_boolean_false
 14833 0000A54D 7475                    	je .L_if_else_07f2
 14834                                  	; preparing a tail-call
 14835 0000A54F 488B4520                	mov rax, PARAM(0)	; param a
 14836 0000A553 50                      	push rax
 14837 0000A554 48B8-                   	mov rax, L_constants + 2270
 14837 0000A556 [DE08000000000000] 
 14838 0000A55E 50                      	push rax
 14839 0000A55F 6A02                    	push 2	; arg count
 14840 0000A561 488B4510                	mov rax, ENV
 14841 0000A565 488B00                  	mov rax, qword [rax + 8 * 0]
 14842 0000A568 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14843 0000A56B 803804                  	cmp byte [rax], T_closure
 14844 0000A56E 0F85A7DE0000            	jne L_error_non_closure
 14845 0000A574 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14846 0000A577 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14847 0000A57A FF7500                  	push qword[rbp]
 14848 0000A57D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14849 0000A580 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14850 0000A584 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14851 0000A588 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14852 0000A58C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14853 0000A58F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14854 0000A592 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14855 0000A597 4983C103                	add r9, 3 	 ;for getting to the params
 14856 0000A59B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14857 0000A59F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14858                                  .L_tc_recycle_frame_loop_0ec8:
 14859 0000A5A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14860 0000A5A5 7410                    	je .L_tc_recycle_frame_done_0ec8
 14861 0000A5A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14862 0000A5AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14863 0000A5AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14864 0000A5B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14865 0000A5B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0ec8
 14866                                  .L_tc_recycle_frame_done_0ec8:
 14867 0000A5B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14868 0000A5B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14869 0000A5BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14870 0000A5BF E9A0010000              	jmp .L_if_end_07f2
 14871                                  .L_if_else_07f2:
 14872                                  	; preparing a tail-call
 14873                                  	; preparing a non-tail-call
 14874 0000A5C4 488B4528                	mov rax, PARAM(1)	; param s
 14875 0000A5C8 50                      	push rax
 14876 0000A5C9 48B8-                   	mov rax, L_constants + 2270
 14876 0000A5CB [DE08000000000000] 
 14877 0000A5D3 50                      	push rax
 14878 0000A5D4 488B0425[3A0F0000]      	mov rax, qword [free_var_0]	; free var *
 14879 0000A5DC 803805                  	cmp byte [rax], T_undefined
 14880 0000A5DF 0F84B2DD0000            	je L_error_fvar_undefined
 14881 0000A5E5 50                      	push rax
 14882 0000A5E6 6A03                    	push 3	; arg count
 14883 0000A5E8 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 14884 0000A5F0 803805                  	cmp byte [rax], T_undefined
 14885 0000A5F3 0F849EDD0000            	je L_error_fvar_undefined
 14886 0000A5F9 803804                  	cmp byte [rax], T_closure
 14887 0000A5FC 0F8519DE0000            	jne L_error_non_closure
 14888 0000A602 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14889 0000A605 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14890 0000A608 50                      	push rax
 14891 0000A609 6A01                    	push 1	; arg count
 14892 0000A60B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14893 0000A610 E8AFDE0000              	call malloc
 14894 0000A615 50                      	push rax
 14895 0000A616 BF10000000              	mov rdi, 8 * 2	; new rib
 14896 0000A61B E8A4DE0000              	call malloc
 14897 0000A620 50                      	push rax
 14898 0000A621 BF20000000              	mov rdi, 8 * 4	; extended env
 14899 0000A626 E899DE0000              	call malloc
 14900 0000A62B 488B7D10                	mov rdi, ENV
 14901 0000A62F BE00000000              	mov rsi, 0
 14902 0000A634 BA01000000              	mov rdx, 1
 14903                                  .L_lambda_simple_env_loop_0a7d:	; ext_env[i + 1] <-- env[i]
 14904 0000A639 4883FE03                	cmp rsi, 3
 14905 0000A63D 7410                    	je .L_lambda_simple_env_end_0a7d
 14906 0000A63F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14907 0000A643 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14908 0000A647 48FFC6                  	inc rsi
 14909 0000A64A 48FFC2                  	inc rdx
 14910 0000A64D EBEA                    	jmp .L_lambda_simple_env_loop_0a7d
 14911                                  .L_lambda_simple_env_end_0a7d:
 14912 0000A64F 5B                      	pop rbx
 14913 0000A650 BE00000000              	mov rsi, 0
 14914                                  .L_lambda_simple_params_loop_0a7d:	; copy params
 14915 0000A655 4883FE02                	cmp rsi, 2
 14916 0000A659 740E                    	je .L_lambda_simple_params_end_0a7d
 14917 0000A65B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14918 0000A660 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14919 0000A664 48FFC6                  	inc rsi
 14920 0000A667 EBEC                    	jmp .L_lambda_simple_params_loop_0a7d
 14921                                  .L_lambda_simple_params_end_0a7d:
 14922 0000A669 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14923 0000A66C 4889C3                  	mov rbx, rax
 14924 0000A66F 58                      	pop rax
 14925 0000A670 C60004                  	mov byte [rax], T_closure
 14926 0000A673 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14927 0000A677 48C74009[84A60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a7d
 14928 0000A67F E98C000000              	jmp .L_lambda_simple_end_0a7d
 14929                                  .L_lambda_simple_code_0a7d:	; lambda-simple body
 14930 0000A684 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14931 0000A68A 740B                    	je .L_lambda_simple_arity_check_ok_0a7d
 14932 0000A68C FF742410                	push qword [rsp + 8 * 2]
 14933 0000A690 6A01                    	push 1
 14934 0000A692 E9E6DD0000              	jmp L_error_incorrect_arity_simple
 14935                                  .L_lambda_simple_arity_check_ok_0a7d:
 14936 0000A697 C8000000                	enter 0, 0
 14937                                  	; preparing a tail-call
 14938 0000A69B 488B4520                	mov rax, PARAM(0)	; param b
 14939 0000A69F 50                      	push rax
 14940 0000A6A0 488B4510                	mov rax, ENV
 14941 0000A6A4 488B00                  	mov rax, qword [rax + 8 * 0]
 14942 0000A6A7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 14943 0000A6AA 50                      	push rax
 14944 0000A6AB 6A02                    	push 2	; arg count
 14945 0000A6AD 488B4510                	mov rax, ENV
 14946 0000A6B1 488B4008                	mov rax, qword [rax + 8 * 1]
 14947 0000A6B5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 14948 0000A6B8 803804                  	cmp byte [rax], T_closure
 14949 0000A6BB 0F855ADD0000            	jne L_error_non_closure
 14950 0000A6C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14951 0000A6C4 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14952 0000A6C7 FF7500                  	push qword[rbp]
 14953 0000A6CA 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14954 0000A6CD 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14955 0000A6D1 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14956 0000A6D5 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14957 0000A6D9 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14958 0000A6DC 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14959 0000A6DF 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14960 0000A6E4 4983C103                	add r9, 3 	 ;for getting to the params
 14961 0000A6E8 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14962 0000A6EC 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14963                                  .L_tc_recycle_frame_loop_0ec9:
 14964 0000A6EF 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14965 0000A6F2 7410                    	je .L_tc_recycle_frame_done_0ec9
 14966 0000A6F4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14967 0000A6F7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14968 0000A6FA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14969 0000A6FE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 14970 0000A702 EBEB                    	jmp .L_tc_recycle_frame_loop_0ec9
 14971                                  .L_tc_recycle_frame_done_0ec9:
 14972 0000A704 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 14973 0000A705 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 14974 0000A709 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14975 0000A70C C9                      	leave
 14976 0000A70D C21800                  	ret AND_KILL_FRAME(1)
 14977                                  .L_lambda_simple_end_0a7d:	; new closure is in rax
 14978 0000A710 803804                  	cmp byte [rax], T_closure
 14979 0000A713 0F8502DD0000            	jne L_error_non_closure
 14980 0000A719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14981 0000A71C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 14982 0000A71F FF7500                  	push qword[rbp]
 14983 0000A722 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 14984 0000A725 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 14985 0000A729 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 14986 0000A72D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 14987 0000A731 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 14988 0000A734 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 14989 0000A737 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 14990 0000A73C 4983C103                	add r9, 3 	 ;for getting to the params
 14991 0000A740 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 14992 0000A744 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 14993                                  .L_tc_recycle_frame_loop_0eca:
 14994 0000A747 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 14995 0000A74A 7410                    	je .L_tc_recycle_frame_done_0eca
 14996 0000A74C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 14997 0000A74F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 14998 0000A752 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 14999 0000A756 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15000 0000A75A EBEB                    	jmp .L_tc_recycle_frame_loop_0eca
 15001                                  .L_tc_recycle_frame_done_0eca:
 15002 0000A75C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15003 0000A75D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15004 0000A761 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15005                                  .L_if_end_07f2:
 15006 0000A764 C9                      	leave
 15007 0000A765 C22000                  	ret AND_KILL_FRAME(2)
 15008 0000A768 E911030000              	jmp .L_lambda_opt_end_014b	; new closure is in rax
 15009                                  .L_lambda_opt_arity_check_more_014b:
 15010 0000A76D 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 15011 0000A772 49B9-                   	mov r9, sob_nil
 15011 0000A774 [0100000000000000] 
 15012 0000A77C 4889E3                  	mov rbx, rsp 
 15013 0000A77F 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 15014 0000A783 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 15015 0000A786 49C1E003                	shl r8, 3
 15016 0000A78A 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 15017 0000A78D 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 15018                                  .L_lambda_opt_stack_shrink_loop_014b:
 15019 0000A792 4983F801                	cmp r8, 1
 15020 0000A796 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_014b
 15021 0000A798 BF11000000              	mov rdi, 1+8+8 ;for pair
 15022 0000A79D E822DD0000              	call malloc;to create the pair in the stack
 15023 0000A7A2 C60021                  	mov byte [rax], T_pair ; to make it a pair
 15024 0000A7A5 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 15025 0000A7A8 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 15026 0000A7AC 4C894809                 	mov qword[rax+1+8],r9
 15027 0000A7B0 4989C1                  	mov r9, rax ;for the recursion 
 15028 0000A7B3 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 15029 0000A7B6 4883EB08                	sub rbx, 8 ;to get the next param to copy
 15030 0000A7BA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_014b
 15031                                  .L_lambda_opt_stack_shrink_loop_exit_014b:
 15032 0000A7BC 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 15033 0000A7C1 4883E902                	sub rcx, 2
 15034 0000A7C5 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 15035 0000A7C9 4801CC                  	add rsp, rcx ;shrinking the stack
 15036 0000A7CC 4889E0                  	mov rax, rsp
 15037 0000A7CF 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 15038 0000A7D2 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 15039 0000A7D6 49FFC8                  	dec r8 ;we start with param 0, not 1 
 15040 0000A7D9 4883C018                	add rax, 3 * 8;now rax is param 0
 15041 0000A7DD 49C1E003                	shl r8, 3;convert to byte
 15042 0000A7E1 4C01C0                  	add rax, r8;now rax is the top of the stack
 15043 0000A7E4 4C8908                  	mov qword[rax], r9;puting the list at the top
 15044 0000A7E7 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 15045 0000A7EB 4889E3                  	mov rbx, rsp 
 15046 0000A7EE 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 15047 0000A7F1 41BA01000000            	mov r10, 1;r10 is the not opt params length
 15048 0000A7F7 49FFCA                  	dec r10 
 15049 0000A7FA 49C1E203                	shl r10, 3;to get bytes
 15050 0000A7FE 4883C318                	add rbx, 3*8;rbx is the first param
 15051 0000A802 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 15052 0000A805 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 15053 0000A808 4C8900                  	mov qword[rax], r8
 15054 0000A80B 4883E808                	sub rax, 8
 15055 0000A80F 4883EB08                	sub rbx, 8
 15056 0000A813 4889E0                  	mov rax, rsp
 15057 0000A816 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 15058 0000A819 48C744241002000000      	mov qword [rsp+2*8], 2
 15059 0000A822 488B5808                	mov rbx, qword[rax + 8 *1]
 15060 0000A826 48895C2408              	mov qword [rsp + 1*8] ,rbx
 15061 0000A82B 488B18                  	mov rbx, qword[rax]
 15062 0000A82E 48891C24                	mov qword [rsp], rbx
 15063 0000A832 C8000000                	enter 0, 0
 15064                                  	; preparing a non-tail-call
 15065 0000A836 488B4528                	mov rax, PARAM(1)	; param s
 15066 0000A83A 50                      	push rax
 15067 0000A83B 6A01                    	push 1	; arg count
 15068 0000A83D 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 15069 0000A845 803805                  	cmp byte [rax], T_undefined
 15070 0000A848 0F8449DB0000            	je L_error_fvar_undefined
 15071 0000A84E 803804                  	cmp byte [rax], T_closure
 15072 0000A851 0F85C4DB0000            	jne L_error_non_closure
 15073 0000A857 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15074 0000A85A FF5009                  	call SOB_CLOSURE_CODE(rax)
 15075 0000A85D 483D[02000000]          	cmp rax, sob_boolean_false
 15076 0000A863 7475                    	je .L_if_else_07f1
 15077                                  	; preparing a tail-call
 15078 0000A865 488B4520                	mov rax, PARAM(0)	; param a
 15079 0000A869 50                      	push rax
 15080 0000A86A 48B8-                   	mov rax, L_constants + 2270
 15080 0000A86C [DE08000000000000] 
 15081 0000A874 50                      	push rax
 15082 0000A875 6A02                    	push 2	; arg count
 15083 0000A877 488B4510                	mov rax, ENV
 15084 0000A87B 488B00                  	mov rax, qword [rax + 8 * 0]
 15085 0000A87E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 15086 0000A881 803804                  	cmp byte [rax], T_closure
 15087 0000A884 0F8591DB0000            	jne L_error_non_closure
 15088 0000A88A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15089 0000A88D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15090 0000A890 FF7500                  	push qword[rbp]
 15091 0000A893 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15092 0000A896 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15093 0000A89A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15094 0000A89E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15095 0000A8A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15096 0000A8A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15097 0000A8A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15098 0000A8AD 4983C103                	add r9, 3 	 ;for getting to the params
 15099 0000A8B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15100 0000A8B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15101                                  .L_tc_recycle_frame_loop_0ec5:
 15102 0000A8B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15103 0000A8BB 7410                    	je .L_tc_recycle_frame_done_0ec5
 15104 0000A8BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15105 0000A8C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15106 0000A8C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15107 0000A8C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15108 0000A8CB EBEB                    	jmp .L_tc_recycle_frame_loop_0ec5
 15109                                  .L_tc_recycle_frame_done_0ec5:
 15110 0000A8CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15111 0000A8CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15112 0000A8D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15113 0000A8D5 E9A0010000              	jmp .L_if_end_07f1
 15114                                  .L_if_else_07f1:
 15115                                  	; preparing a tail-call
 15116                                  	; preparing a non-tail-call
 15117 0000A8DA 488B4528                	mov rax, PARAM(1)	; param s
 15118 0000A8DE 50                      	push rax
 15119 0000A8DF 48B8-                   	mov rax, L_constants + 2270
 15119 0000A8E1 [DE08000000000000] 
 15120 0000A8E9 50                      	push rax
 15121 0000A8EA 488B0425[3A0F0000]      	mov rax, qword [free_var_0]	; free var *
 15122 0000A8F2 803805                  	cmp byte [rax], T_undefined
 15123 0000A8F5 0F849CDA0000            	je L_error_fvar_undefined
 15124 0000A8FB 50                      	push rax
 15125 0000A8FC 6A03                    	push 3	; arg count
 15126 0000A8FE 488B0425[DF140000]      	mov rax, qword [free_var_85]	; free var fold-left
 15127 0000A906 803805                  	cmp byte [rax], T_undefined
 15128 0000A909 0F8488DA0000            	je L_error_fvar_undefined
 15129 0000A90F 803804                  	cmp byte [rax], T_closure
 15130 0000A912 0F8503DB0000            	jne L_error_non_closure
 15131 0000A918 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15132 0000A91B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15133 0000A91E 50                      	push rax
 15134 0000A91F 6A01                    	push 1	; arg count
 15135 0000A921 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15136 0000A926 E899DB0000              	call malloc
 15137 0000A92B 50                      	push rax
 15138 0000A92C BF10000000              	mov rdi, 8 * 2	; new rib
 15139 0000A931 E88EDB0000              	call malloc
 15140 0000A936 50                      	push rax
 15141 0000A937 BF20000000              	mov rdi, 8 * 4	; extended env
 15142 0000A93C E883DB0000              	call malloc
 15143 0000A941 488B7D10                	mov rdi, ENV
 15144 0000A945 BE00000000              	mov rsi, 0
 15145 0000A94A BA01000000              	mov rdx, 1
 15146                                  .L_lambda_simple_env_loop_0a7c:	; ext_env[i + 1] <-- env[i]
 15147 0000A94F 4883FE03                	cmp rsi, 3
 15148 0000A953 7410                    	je .L_lambda_simple_env_end_0a7c
 15149 0000A955 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15150 0000A959 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15151 0000A95D 48FFC6                  	inc rsi
 15152 0000A960 48FFC2                  	inc rdx
 15153 0000A963 EBEA                    	jmp .L_lambda_simple_env_loop_0a7c
 15154                                  .L_lambda_simple_env_end_0a7c:
 15155 0000A965 5B                      	pop rbx
 15156 0000A966 BE00000000              	mov rsi, 0
 15157                                  .L_lambda_simple_params_loop_0a7c:	; copy params
 15158 0000A96B 4883FE02                	cmp rsi, 2
 15159 0000A96F 740E                    	je .L_lambda_simple_params_end_0a7c
 15160 0000A971 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15161 0000A976 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15162 0000A97A 48FFC6                  	inc rsi
 15163 0000A97D EBEC                    	jmp .L_lambda_simple_params_loop_0a7c
 15164                                  .L_lambda_simple_params_end_0a7c:
 15165 0000A97F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15166 0000A982 4889C3                  	mov rbx, rax
 15167 0000A985 58                      	pop rax
 15168 0000A986 C60004                  	mov byte [rax], T_closure
 15169 0000A989 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15170 0000A98D 48C74009[9AA90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a7c
 15171 0000A995 E98C000000              	jmp .L_lambda_simple_end_0a7c
 15172                                  .L_lambda_simple_code_0a7c:	; lambda-simple body
 15173 0000A99A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15174 0000A9A0 740B                    	je .L_lambda_simple_arity_check_ok_0a7c
 15175 0000A9A2 FF742410                	push qword [rsp + 8 * 2]
 15176 0000A9A6 6A01                    	push 1
 15177 0000A9A8 E9D0DA0000              	jmp L_error_incorrect_arity_simple
 15178                                  .L_lambda_simple_arity_check_ok_0a7c:
 15179 0000A9AD C8000000                	enter 0, 0
 15180                                  	; preparing a tail-call
 15181 0000A9B1 488B4520                	mov rax, PARAM(0)	; param b
 15182 0000A9B5 50                      	push rax
 15183 0000A9B6 488B4510                	mov rax, ENV
 15184 0000A9BA 488B00                  	mov rax, qword [rax + 8 * 0]
 15185 0000A9BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var a
 15186 0000A9C0 50                      	push rax
 15187 0000A9C1 6A02                    	push 2	; arg count
 15188 0000A9C3 488B4510                	mov rax, ENV
 15189 0000A9C7 488B4008                	mov rax, qword [rax + 8 * 1]
 15190 0000A9CB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin/
 15191 0000A9CE 803804                  	cmp byte [rax], T_closure
 15192 0000A9D1 0F8544DA0000            	jne L_error_non_closure
 15193 0000A9D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15194 0000A9DA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15195 0000A9DD FF7500                  	push qword[rbp]
 15196 0000A9E0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15197 0000A9E3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15198 0000A9E7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15199 0000A9EB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15200 0000A9EF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15201 0000A9F2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15202 0000A9F5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15203 0000A9FA 4983C103                	add r9, 3 	 ;for getting to the params
 15204 0000A9FE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15205 0000AA02 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15206                                  .L_tc_recycle_frame_loop_0ec6:
 15207 0000AA05 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15208 0000AA08 7410                    	je .L_tc_recycle_frame_done_0ec6
 15209 0000AA0A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15210 0000AA0D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15211 0000AA10 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15212 0000AA14 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15213 0000AA18 EBEB                    	jmp .L_tc_recycle_frame_loop_0ec6
 15214                                  .L_tc_recycle_frame_done_0ec6:
 15215 0000AA1A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15216 0000AA1B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15217 0000AA1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15218 0000AA22 C9                      	leave
 15219 0000AA23 C21800                  	ret AND_KILL_FRAME(1)
 15220                                  .L_lambda_simple_end_0a7c:	; new closure is in rax
 15221 0000AA26 803804                  	cmp byte [rax], T_closure
 15222 0000AA29 0F85ECD90000            	jne L_error_non_closure
 15223 0000AA2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15224 0000AA32 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15225 0000AA35 FF7500                  	push qword[rbp]
 15226 0000AA38 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15227 0000AA3B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15228 0000AA3F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15229 0000AA43 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15230 0000AA47 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15231 0000AA4A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15232 0000AA4D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15233 0000AA52 4983C103                	add r9, 3 	 ;for getting to the params
 15234 0000AA56 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15235 0000AA5A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15236                                  .L_tc_recycle_frame_loop_0ec7:
 15237 0000AA5D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15238 0000AA60 7410                    	je .L_tc_recycle_frame_done_0ec7
 15239 0000AA62 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15240 0000AA65 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15241 0000AA68 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15242 0000AA6C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15243 0000AA70 EBEB                    	jmp .L_tc_recycle_frame_loop_0ec7
 15244                                  .L_tc_recycle_frame_done_0ec7:
 15245 0000AA72 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15246 0000AA73 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15247 0000AA77 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15248                                  .L_if_end_07f1:
 15249 0000AA7A C9                      	leave
 15250 0000AA7B C22000                  	ret AND_KILL_FRAME(2)
 15251                                  .L_lambda_opt_end_014b:	; new closure is in rax
 15252 0000AA7E C9                      	leave
 15253 0000AA7F C21800                  	ret AND_KILL_FRAME(1)
 15254                                  .L_lambda_simple_end_0a7b:	; new closure is in rax
 15255 0000AA82 803804                  	cmp byte [rax], T_closure
 15256 0000AA85 0F8590D90000            	jne L_error_non_closure
 15257 0000AA8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15258 0000AA8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15259 0000AA91 FF7500                  	push qword[rbp]
 15260 0000AA94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15261 0000AA97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15262 0000AA9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15263 0000AA9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15264 0000AAA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15265 0000AAA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15266 0000AAA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15267 0000AAAE 4983C103                	add r9, 3 	 ;for getting to the params
 15268 0000AAB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15269 0000AAB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15270                                  .L_tc_recycle_frame_loop_0ecb:
 15271 0000AAB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15272 0000AABC 7410                    	je .L_tc_recycle_frame_done_0ecb
 15273 0000AABE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15274 0000AAC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15275 0000AAC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15276 0000AAC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15277 0000AACC EBEB                    	jmp .L_tc_recycle_frame_loop_0ecb
 15278                                  .L_tc_recycle_frame_done_0ecb:
 15279 0000AACE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15280 0000AACF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15281 0000AAD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15282 0000AAD6 C9                      	leave
 15283 0000AAD7 C21800                  	ret AND_KILL_FRAME(1)
 15284                                  .L_lambda_simple_end_0a79:	; new closure is in rax
 15285 0000AADA 803804                  	cmp byte [rax], T_closure
 15286 0000AADD 0F8538D90000            	jne L_error_non_closure
 15287 0000AAE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15288 0000AAE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15289 0000AAE9 48890425[6D0F0000]      	mov qword [free_var_3], rax
 15290 0000AAF1 48B8-                   	mov rax, sob_void
 15290 0000AAF3 [0000000000000000] 
 15291                                  
 15292 0000AAFB 4889C7                  	mov rdi, rax
 15293 0000AAFE E816DC0000              	call print_sexpr_if_not_void
 15294 0000AB03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15295 0000AB08 E8B7D90000              	call malloc
 15296 0000AB0D 50                      	push rax
 15297 0000AB0E BF00000000              	mov rdi, 8 * 0	; new rib
 15298 0000AB13 E8ACD90000              	call malloc
 15299 0000AB18 50                      	push rax
 15300 0000AB19 BF08000000              	mov rdi, 8 * 1	; extended env
 15301 0000AB1E E8A1D90000              	call malloc
 15302 0000AB23 488B7D10                	mov rdi, ENV
 15303 0000AB27 BE00000000              	mov rsi, 0
 15304 0000AB2C BA01000000              	mov rdx, 1
 15305                                  .L_lambda_simple_env_loop_0a7e:	; ext_env[i + 1] <-- env[i]
 15306 0000AB31 4883FE00                	cmp rsi, 0
 15307 0000AB35 7410                    	je .L_lambda_simple_env_end_0a7e
 15308 0000AB37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15309 0000AB3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15310 0000AB3F 48FFC6                  	inc rsi
 15311 0000AB42 48FFC2                  	inc rdx
 15312 0000AB45 EBEA                    	jmp .L_lambda_simple_env_loop_0a7e
 15313                                  .L_lambda_simple_env_end_0a7e:
 15314 0000AB47 5B                      	pop rbx
 15315 0000AB48 BE00000000              	mov rsi, 0
 15316                                  .L_lambda_simple_params_loop_0a7e:	; copy params
 15317 0000AB4D 4883FE00                	cmp rsi, 0
 15318 0000AB51 740E                    	je .L_lambda_simple_params_end_0a7e
 15319 0000AB53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15320 0000AB58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15321 0000AB5C 48FFC6                  	inc rsi
 15322 0000AB5F EBEC                    	jmp .L_lambda_simple_params_loop_0a7e
 15323                                  .L_lambda_simple_params_end_0a7e:
 15324 0000AB61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15325 0000AB64 4889C3                  	mov rbx, rax
 15326 0000AB67 58                      	pop rax
 15327 0000AB68 C60004                  	mov byte [rax], T_closure
 15328 0000AB6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15329 0000AB6F 48C74009[7CAB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a7e
 15330 0000AB77 E91B010000              	jmp .L_lambda_simple_end_0a7e
 15331                                  .L_lambda_simple_code_0a7e:	; lambda-simple body
 15332 0000AB7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15333 0000AB82 740B                    	je .L_lambda_simple_arity_check_ok_0a7e
 15334 0000AB84 FF742410                	push qword [rsp + 8 * 2]
 15335 0000AB88 6A01                    	push 1
 15336 0000AB8A E9EED80000              	jmp L_error_incorrect_arity_simple
 15337                                  .L_lambda_simple_arity_check_ok_0a7e:
 15338 0000AB8F C8000000                	enter 0, 0
 15339                                  	; preparing a non-tail-call
 15340 0000AB93 488B4520                	mov rax, PARAM(0)	; param n
 15341 0000AB97 50                      	push rax
 15342 0000AB98 6A01                    	push 1	; arg count
 15343 0000AB9A 488B0425[52190000]      	mov rax, qword [free_var_152]	; free var zero?
 15344 0000ABA2 803805                  	cmp byte [rax], T_undefined
 15345 0000ABA5 0F84ECD70000            	je L_error_fvar_undefined
 15346 0000ABAB 803804                  	cmp byte [rax], T_closure
 15347 0000ABAE 0F8567D80000            	jne L_error_non_closure
 15348 0000ABB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15349 0000ABB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15350 0000ABBA 483D[02000000]          	cmp rax, sob_boolean_false
 15351 0000ABC0 740F                    	je .L_if_else_07f3
 15352 0000ABC2 48B8-                   	mov rax, L_constants + 2270
 15352 0000ABC4 [DE08000000000000] 
 15353 0000ABCC E9C2000000              	jmp .L_if_end_07f3
 15354                                  .L_if_else_07f3:
 15355                                  	; preparing a tail-call
 15356                                  	; preparing a non-tail-call
 15357                                  	; preparing a non-tail-call
 15358 0000ABD1 48B8-                   	mov rax, L_constants + 2270
 15358 0000ABD3 [DE08000000000000] 
 15359 0000ABDB 50                      	push rax
 15360 0000ABDC 488B4520                	mov rax, PARAM(0)	; param n
 15361 0000ABE0 50                      	push rax
 15362 0000ABE1 6A02                    	push 2	; arg count
 15363 0000ABE3 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 15364 0000ABEB 803805                  	cmp byte [rax], T_undefined
 15365 0000ABEE 0F84A3D70000            	je L_error_fvar_undefined
 15366 0000ABF4 803804                  	cmp byte [rax], T_closure
 15367 0000ABF7 0F851ED80000            	jne L_error_non_closure
 15368 0000ABFD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15369 0000AC00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15370 0000AC03 50                      	push rax
 15371 0000AC04 6A01                    	push 1	; arg count
 15372 0000AC06 488B0425[CE140000]      	mov rax, qword [free_var_84]	; free var fact
 15373 0000AC0E 803805                  	cmp byte [rax], T_undefined
 15374 0000AC11 0F8480D70000            	je L_error_fvar_undefined
 15375 0000AC17 803804                  	cmp byte [rax], T_closure
 15376 0000AC1A 0F85FBD70000            	jne L_error_non_closure
 15377 0000AC20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15378 0000AC23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15379 0000AC26 50                      	push rax
 15380 0000AC27 488B4520                	mov rax, PARAM(0)	; param n
 15381 0000AC2B 50                      	push rax
 15382 0000AC2C 6A02                    	push 2	; arg count
 15383 0000AC2E 488B0425[3A0F0000]      	mov rax, qword [free_var_0]	; free var *
 15384 0000AC36 803805                  	cmp byte [rax], T_undefined
 15385 0000AC39 0F8458D70000            	je L_error_fvar_undefined
 15386 0000AC3F 803804                  	cmp byte [rax], T_closure
 15387 0000AC42 0F85D3D70000            	jne L_error_non_closure
 15388 0000AC48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15389 0000AC4B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15390 0000AC4E FF7500                  	push qword[rbp]
 15391 0000AC51 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15392 0000AC54 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15393 0000AC58 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15394 0000AC5C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15395 0000AC60 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15396 0000AC63 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15397 0000AC66 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15398 0000AC6B 4983C103                	add r9, 3 	 ;for getting to the params
 15399 0000AC6F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15400 0000AC73 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15401                                  .L_tc_recycle_frame_loop_0ecc:
 15402 0000AC76 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15403 0000AC79 7410                    	je .L_tc_recycle_frame_done_0ecc
 15404 0000AC7B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15405 0000AC7E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15406 0000AC81 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15407 0000AC85 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15408 0000AC89 EBEB                    	jmp .L_tc_recycle_frame_loop_0ecc
 15409                                  .L_tc_recycle_frame_done_0ecc:
 15410 0000AC8B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15411 0000AC8C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15412 0000AC90 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15413                                  .L_if_end_07f3:
 15414 0000AC93 C9                      	leave
 15415 0000AC94 C21800                  	ret AND_KILL_FRAME(1)
 15416                                  .L_lambda_simple_end_0a7e:	; new closure is in rax
 15417 0000AC97 48890425[CE140000]      	mov qword [free_var_84], rax
 15418 0000AC9F 48B8-                   	mov rax, sob_void
 15418 0000ACA1 [0000000000000000] 
 15419                                  
 15420 0000ACA9 4889C7                  	mov rdi, rax
 15421 0000ACAC E868DA0000              	call print_sexpr_if_not_void
 15422 0000ACB1 48B8-                   	mov rax, L_constants + 0
 15422 0000ACB3 [0000000000000000] 
 15423 0000ACBB 48890425[7E0F0000]      	mov qword [free_var_4], rax
 15424 0000ACC3 48B8-                   	mov rax, sob_void
 15424 0000ACC5 [0000000000000000] 
 15425                                  
 15426 0000ACCD 4889C7                  	mov rdi, rax
 15427 0000ACD0 E844DA0000              	call print_sexpr_if_not_void
 15428 0000ACD5 48B8-                   	mov rax, L_constants + 0
 15428 0000ACD7 [0000000000000000] 
 15429 0000ACDF 48890425[8F0F0000]      	mov qword [free_var_5], rax
 15430 0000ACE7 48B8-                   	mov rax, sob_void
 15430 0000ACE9 [0000000000000000] 
 15431                                  
 15432 0000ACF1 4889C7                  	mov rdi, rax
 15433 0000ACF4 E820DA0000              	call print_sexpr_if_not_void
 15434 0000ACF9 48B8-                   	mov rax, L_constants + 0
 15434 0000ACFB [0000000000000000] 
 15435 0000AD03 48890425[B10F0000]      	mov qword [free_var_7], rax
 15436 0000AD0B 48B8-                   	mov rax, sob_void
 15436 0000AD0D [0000000000000000] 
 15437                                  
 15438 0000AD15 4889C7                  	mov rdi, rax
 15439 0000AD18 E8FCD90000              	call print_sexpr_if_not_void
 15440 0000AD1D 48B8-                   	mov rax, L_constants + 0
 15440 0000AD1F [0000000000000000] 
 15441 0000AD27 48890425[C20F0000]      	mov qword [free_var_8], rax
 15442 0000AD2F 48B8-                   	mov rax, sob_void
 15442 0000AD31 [0000000000000000] 
 15443                                  
 15444 0000AD39 4889C7                  	mov rdi, rax
 15445 0000AD3C E8D8D90000              	call print_sexpr_if_not_void
 15446 0000AD41 48B8-                   	mov rax, L_constants + 0
 15446 0000AD43 [0000000000000000] 
 15447 0000AD4B 48890425[A00F0000]      	mov qword [free_var_6], rax
 15448 0000AD53 48B8-                   	mov rax, sob_void
 15448 0000AD55 [0000000000000000] 
 15449                                  
 15450 0000AD5D 4889C7                  	mov rdi, rax
 15451 0000AD60 E8B4D90000              	call print_sexpr_if_not_void
 15452                                  	; preparing a non-tail-call
 15453 0000AD65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15454 0000AD6A E855D70000              	call malloc
 15455 0000AD6F 50                      	push rax
 15456 0000AD70 BF00000000              	mov rdi, 8 * 0	; new rib
 15457 0000AD75 E84AD70000              	call malloc
 15458 0000AD7A 50                      	push rax
 15459 0000AD7B BF08000000              	mov rdi, 8 * 1	; extended env
 15460 0000AD80 E83FD70000              	call malloc
 15461 0000AD85 488B7D10                	mov rdi, ENV
 15462 0000AD89 BE00000000              	mov rsi, 0
 15463 0000AD8E BA01000000              	mov rdx, 1
 15464                                  .L_lambda_simple_env_loop_0a7f:	; ext_env[i + 1] <-- env[i]
 15465 0000AD93 4883FE00                	cmp rsi, 0
 15466 0000AD97 7410                    	je .L_lambda_simple_env_end_0a7f
 15467 0000AD99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15468 0000AD9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15469 0000ADA1 48FFC6                  	inc rsi
 15470 0000ADA4 48FFC2                  	inc rdx
 15471 0000ADA7 EBEA                    	jmp .L_lambda_simple_env_loop_0a7f
 15472                                  .L_lambda_simple_env_end_0a7f:
 15473 0000ADA9 5B                      	pop rbx
 15474 0000ADAA BE00000000              	mov rsi, 0
 15475                                  .L_lambda_simple_params_loop_0a7f:	; copy params
 15476 0000ADAF 4883FE00                	cmp rsi, 0
 15477 0000ADB3 740E                    	je .L_lambda_simple_params_end_0a7f
 15478 0000ADB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15479 0000ADBA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15480 0000ADBE 48FFC6                  	inc rsi
 15481 0000ADC1 EBEC                    	jmp .L_lambda_simple_params_loop_0a7f
 15482                                  .L_lambda_simple_params_end_0a7f:
 15483 0000ADC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15484 0000ADC6 4889C3                  	mov rbx, rax
 15485 0000ADC9 58                      	pop rax
 15486 0000ADCA C60004                  	mov byte [rax], T_closure
 15487 0000ADCD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15488 0000ADD1 48C74009[DEAD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a7f
 15489 0000ADD9 E998000000              	jmp .L_lambda_simple_end_0a7f
 15490                                  .L_lambda_simple_code_0a7f:	; lambda-simple body
 15491 0000ADDE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 15492 0000ADE4 740B                    	je .L_lambda_simple_arity_check_ok_0a7f
 15493 0000ADE6 FF742410                	push qword [rsp + 8 * 2]
 15494 0000ADEA 6A00                    	push 0
 15495 0000ADEC E98CD60000              	jmp L_error_incorrect_arity_simple
 15496                                  .L_lambda_simple_arity_check_ok_0a7f:
 15497 0000ADF1 C8000000                	enter 0, 0
 15498                                  	; preparing a tail-call
 15499 0000ADF5 48B8-                   	mov rax, L_constants + 2408
 15499 0000ADF7 [6809000000000000] 
 15500 0000ADFF 50                      	push rax
 15501 0000AE00 48B8-                   	mov rax, L_constants + 2399
 15501 0000AE02 [5F09000000000000] 
 15502 0000AE0A 50                      	push rax
 15503 0000AE0B 6A02                    	push 2	; arg count
 15504 0000AE0D 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 15505 0000AE15 803805                  	cmp byte [rax], T_undefined
 15506 0000AE18 0F8479D50000            	je L_error_fvar_undefined
 15507 0000AE1E 803804                  	cmp byte [rax], T_closure
 15508 0000AE21 0F85F4D50000            	jne L_error_non_closure
 15509 0000AE27 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15510 0000AE2A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15511 0000AE2D FF7500                  	push qword[rbp]
 15512 0000AE30 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15513 0000AE33 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15514 0000AE37 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15515 0000AE3B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15516 0000AE3F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15517 0000AE42 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15518 0000AE45 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15519 0000AE4A 4983C103                	add r9, 3 	 ;for getting to the params
 15520 0000AE4E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15521 0000AE52 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15522                                  .L_tc_recycle_frame_loop_0ecd:
 15523 0000AE55 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15524 0000AE58 7410                    	je .L_tc_recycle_frame_done_0ecd
 15525 0000AE5A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15526 0000AE5D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15527 0000AE60 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15528 0000AE64 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15529 0000AE68 EBEB                    	jmp .L_tc_recycle_frame_loop_0ecd
 15530                                  .L_tc_recycle_frame_done_0ecd:
 15531 0000AE6A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15532 0000AE6B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15533 0000AE6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15534 0000AE72 C9                      	leave
 15535 0000AE73 C21000                  	ret AND_KILL_FRAME(0)
 15536                                  .L_lambda_simple_end_0a7f:	; new closure is in rax
 15537 0000AE76 50                      	push rax
 15538 0000AE77 6A01                    	push 1	; arg count
 15539 0000AE79 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15540 0000AE7E E841D60000              	call malloc
 15541 0000AE83 50                      	push rax
 15542 0000AE84 BF00000000              	mov rdi, 8 * 0	; new rib
 15543 0000AE89 E836D60000              	call malloc
 15544 0000AE8E 50                      	push rax
 15545 0000AE8F BF08000000              	mov rdi, 8 * 1	; extended env
 15546 0000AE94 E82BD60000              	call malloc
 15547 0000AE99 488B7D10                	mov rdi, ENV
 15548 0000AE9D BE00000000              	mov rsi, 0
 15549 0000AEA2 BA01000000              	mov rdx, 1
 15550                                  .L_lambda_simple_env_loop_0a80:	; ext_env[i + 1] <-- env[i]
 15551 0000AEA7 4883FE00                	cmp rsi, 0
 15552 0000AEAB 7410                    	je .L_lambda_simple_env_end_0a80
 15553 0000AEAD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15554 0000AEB1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15555 0000AEB5 48FFC6                  	inc rsi
 15556 0000AEB8 48FFC2                  	inc rdx
 15557 0000AEBB EBEA                    	jmp .L_lambda_simple_env_loop_0a80
 15558                                  .L_lambda_simple_env_end_0a80:
 15559 0000AEBD 5B                      	pop rbx
 15560 0000AEBE BE00000000              	mov rsi, 0
 15561                                  .L_lambda_simple_params_loop_0a80:	; copy params
 15562 0000AEC3 4883FE00                	cmp rsi, 0
 15563 0000AEC7 740E                    	je .L_lambda_simple_params_end_0a80
 15564 0000AEC9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15565 0000AECE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15566 0000AED2 48FFC6                  	inc rsi
 15567 0000AED5 EBEC                    	jmp .L_lambda_simple_params_loop_0a80
 15568                                  .L_lambda_simple_params_end_0a80:
 15569 0000AED7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15570 0000AEDA 4889C3                  	mov rbx, rax
 15571 0000AEDD 58                      	pop rax
 15572 0000AEDE C60004                  	mov byte [rax], T_closure
 15573 0000AEE1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15574 0000AEE5 48C74009[F2AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a80
 15575 0000AEED E9401B0000              	jmp .L_lambda_simple_end_0a80
 15576                                  .L_lambda_simple_code_0a80:	; lambda-simple body
 15577 0000AEF2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15578 0000AEF8 740B                    	je .L_lambda_simple_arity_check_ok_0a80
 15579 0000AEFA FF742410                	push qword [rsp + 8 * 2]
 15580 0000AEFE 6A01                    	push 1
 15581 0000AF00 E978D50000              	jmp L_error_incorrect_arity_simple
 15582                                  .L_lambda_simple_arity_check_ok_0a80:
 15583 0000AF05 C8000000                	enter 0, 0
 15584                                  	; preparing a tail-call
 15585 0000AF09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15586 0000AF0E E8B1D50000              	call malloc
 15587 0000AF13 50                      	push rax
 15588 0000AF14 BF08000000              	mov rdi, 8 * 1	; new rib
 15589 0000AF19 E8A6D50000              	call malloc
 15590 0000AF1E 50                      	push rax
 15591 0000AF1F BF10000000              	mov rdi, 8 * 2	; extended env
 15592 0000AF24 E89BD50000              	call malloc
 15593 0000AF29 488B7D10                	mov rdi, ENV
 15594 0000AF2D BE00000000              	mov rsi, 0
 15595 0000AF32 BA01000000              	mov rdx, 1
 15596                                  .L_lambda_simple_env_loop_0a81:	; ext_env[i + 1] <-- env[i]
 15597 0000AF37 4883FE01                	cmp rsi, 1
 15598 0000AF3B 7410                    	je .L_lambda_simple_env_end_0a81
 15599 0000AF3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15600 0000AF41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15601 0000AF45 48FFC6                  	inc rsi
 15602 0000AF48 48FFC2                  	inc rdx
 15603 0000AF4B EBEA                    	jmp .L_lambda_simple_env_loop_0a81
 15604                                  .L_lambda_simple_env_end_0a81:
 15605 0000AF4D 5B                      	pop rbx
 15606 0000AF4E BE00000000              	mov rsi, 0
 15607                                  .L_lambda_simple_params_loop_0a81:	; copy params
 15608 0000AF53 4883FE01                	cmp rsi, 1
 15609 0000AF57 740E                    	je .L_lambda_simple_params_end_0a81
 15610 0000AF59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15611 0000AF5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15612 0000AF62 48FFC6                  	inc rsi
 15613 0000AF65 EBEC                    	jmp .L_lambda_simple_params_loop_0a81
 15614                                  .L_lambda_simple_params_end_0a81:
 15615 0000AF67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15616 0000AF6A 4889C3                  	mov rbx, rax
 15617 0000AF6D 58                      	pop rax
 15618 0000AF6E C60004                  	mov byte [rax], T_closure
 15619 0000AF71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15620 0000AF75 48C74009[82AF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a81
 15621 0000AF7D E94F090000              	jmp .L_lambda_simple_end_0a81
 15622                                  .L_lambda_simple_code_0a81:	; lambda-simple body
 15623 0000AF82 48837C241003            	cmp qword [rsp + 8 * 2], 3
 15624 0000AF88 740B                    	je .L_lambda_simple_arity_check_ok_0a81
 15625 0000AF8A FF742410                	push qword [rsp + 8 * 2]
 15626 0000AF8E 6A03                    	push 3
 15627 0000AF90 E9E8D40000              	jmp L_error_incorrect_arity_simple
 15628                                  .L_lambda_simple_arity_check_ok_0a81:
 15629 0000AF95 C8000000                	enter 0, 0
 15630 0000AF99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15631 0000AF9E E821D50000              	call malloc
 15632 0000AFA3 50                      	push rax
 15633 0000AFA4 BF18000000              	mov rdi, 8 * 3	; new rib
 15634 0000AFA9 E816D50000              	call malloc
 15635 0000AFAE 50                      	push rax
 15636 0000AFAF BF18000000              	mov rdi, 8 * 3	; extended env
 15637 0000AFB4 E80BD50000              	call malloc
 15638 0000AFB9 488B7D10                	mov rdi, ENV
 15639 0000AFBD BE00000000              	mov rsi, 0
 15640 0000AFC2 BA01000000              	mov rdx, 1
 15641                                  .L_lambda_simple_env_loop_0a82:	; ext_env[i + 1] <-- env[i]
 15642 0000AFC7 4883FE02                	cmp rsi, 2
 15643 0000AFCB 7410                    	je .L_lambda_simple_env_end_0a82
 15644 0000AFCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15645 0000AFD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15646 0000AFD5 48FFC6                  	inc rsi
 15647 0000AFD8 48FFC2                  	inc rdx
 15648 0000AFDB EBEA                    	jmp .L_lambda_simple_env_loop_0a82
 15649                                  .L_lambda_simple_env_end_0a82:
 15650 0000AFDD 5B                      	pop rbx
 15651 0000AFDE BE00000000              	mov rsi, 0
 15652                                  .L_lambda_simple_params_loop_0a82:	; copy params
 15653 0000AFE3 4883FE03                	cmp rsi, 3
 15654 0000AFE7 740E                    	je .L_lambda_simple_params_end_0a82
 15655 0000AFE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15656 0000AFEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15657 0000AFF2 48FFC6                  	inc rsi
 15658 0000AFF5 EBEC                    	jmp .L_lambda_simple_params_loop_0a82
 15659                                  .L_lambda_simple_params_end_0a82:
 15660 0000AFF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15661 0000AFFA 4889C3                  	mov rbx, rax
 15662 0000AFFD 58                      	pop rax
 15663 0000AFFE C60004                  	mov byte [rax], T_closure
 15664 0000B001 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15665 0000B005 48C74009[12B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a82
 15666 0000B00D E9BB080000              	jmp .L_lambda_simple_end_0a82
 15667                                  .L_lambda_simple_code_0a82:	; lambda-simple body
 15668 0000B012 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15669 0000B018 740B                    	je .L_lambda_simple_arity_check_ok_0a82
 15670 0000B01A FF742410                	push qword [rsp + 8 * 2]
 15671 0000B01E 6A02                    	push 2
 15672 0000B020 E958D40000              	jmp L_error_incorrect_arity_simple
 15673                                  .L_lambda_simple_arity_check_ok_0a82:
 15674 0000B025 C8000000                	enter 0, 0
 15675                                  	; preparing a non-tail-call
 15676 0000B029 488B4520                	mov rax, PARAM(0)	; param a
 15677 0000B02D 50                      	push rax
 15678 0000B02E 6A01                    	push 1	; arg count
 15679 0000B030 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 15680 0000B038 803805                  	cmp byte [rax], T_undefined
 15681 0000B03B 0F8456D30000            	je L_error_fvar_undefined
 15682 0000B041 803804                  	cmp byte [rax], T_closure
 15683 0000B044 0F85D1D30000            	jne L_error_non_closure
 15684 0000B04A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15685 0000B04D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15686 0000B050 483D[02000000]          	cmp rax, sob_boolean_false
 15687 0000B056 0F848D020000            	je .L_if_else_07ff
 15688                                  	; preparing a non-tail-call
 15689 0000B05C 488B4528                	mov rax, PARAM(1)	; param b
 15690 0000B060 50                      	push rax
 15691 0000B061 6A01                    	push 1	; arg count
 15692 0000B063 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 15693 0000B06B 803805                  	cmp byte [rax], T_undefined
 15694 0000B06E 0F8423D30000            	je L_error_fvar_undefined
 15695 0000B074 803804                  	cmp byte [rax], T_closure
 15696 0000B077 0F859ED30000            	jne L_error_non_closure
 15697 0000B07D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15698 0000B080 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15699 0000B083 483D[02000000]          	cmp rax, sob_boolean_false
 15700 0000B089 746F                    	je .L_if_else_07f6
 15701                                  	; preparing a tail-call
 15702 0000B08B 488B4528                	mov rax, PARAM(1)	; param b
 15703 0000B08F 50                      	push rax
 15704 0000B090 488B4520                	mov rax, PARAM(0)	; param a
 15705 0000B094 50                      	push rax
 15706 0000B095 6A02                    	push 2	; arg count
 15707 0000B097 488B4510                	mov rax, ENV
 15708 0000B09B 488B00                  	mov rax, qword [rax + 8 * 0]
 15709 0000B09E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator-zz
 15710 0000B0A1 803804                  	cmp byte [rax], T_closure
 15711 0000B0A4 0F8571D30000            	jne L_error_non_closure
 15712 0000B0AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 15713 0000B0AD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15714 0000B0B0 FF7500                  	push qword[rbp]
 15715 0000B0B3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15716 0000B0B6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15717 0000B0BA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15718 0000B0BE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15719 0000B0C2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15720 0000B0C5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15721 0000B0C8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15722 0000B0CD 4983C103                	add r9, 3 	 ;for getting to the params
 15723 0000B0D1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15724 0000B0D5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15725                                  .L_tc_recycle_frame_loop_0ece:
 15726 0000B0D8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15727 0000B0DB 7410                    	je .L_tc_recycle_frame_done_0ece
 15728 0000B0DD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15729 0000B0E0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15730 0000B0E3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15731 0000B0E7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15732 0000B0EB EBEB                    	jmp .L_tc_recycle_frame_loop_0ece
 15733                                  .L_tc_recycle_frame_done_0ece:
 15734 0000B0ED 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15735 0000B0EE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15736 0000B0F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15737 0000B0F5 E9EA010000              	jmp .L_if_end_07f6
 15738                                  .L_if_else_07f6:
 15739                                  	; preparing a non-tail-call
 15740 0000B0FA 488B4528                	mov rax, PARAM(1)	; param b
 15741 0000B0FE 50                      	push rax
 15742 0000B0FF 6A01                    	push 1	; arg count
 15743 0000B101 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 15744 0000B109 803805                  	cmp byte [rax], T_undefined
 15745 0000B10C 0F8485D20000            	je L_error_fvar_undefined
 15746 0000B112 803804                  	cmp byte [rax], T_closure
 15747 0000B115 0F8500D30000            	jne L_error_non_closure
 15748 0000B11B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15749 0000B11E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15750 0000B121 483D[02000000]          	cmp rax, sob_boolean_false
 15751 0000B127 0F8493000000            	je .L_if_else_07f5
 15752                                  	; preparing a tail-call
 15753 0000B12D 488B4528                	mov rax, PARAM(1)	; param b
 15754 0000B131 50                      	push rax
 15755                                  	; preparing a non-tail-call
 15756 0000B132 488B4520                	mov rax, PARAM(0)	; param a
 15757 0000B136 50                      	push rax
 15758 0000B137 6A01                    	push 1	; arg count
 15759 0000B139 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15760 0000B141 803805                  	cmp byte [rax], T_undefined
 15761 0000B144 0F844DD20000            	je L_error_fvar_undefined
 15762 0000B14A 803804                  	cmp byte [rax], T_closure
 15763 0000B14D 0F85C8D20000            	jne L_error_non_closure
 15764 0000B153 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15765 0000B156 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15766 0000B159 50                      	push rax
 15767 0000B15A 6A02                    	push 2	; arg count
 15768 0000B15C 488B4510                	mov rax, ENV
 15769 0000B160 488B00                  	mov rax, qword [rax + 8 * 0]
 15770 0000B163 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15771 0000B167 803804                  	cmp byte [rax], T_closure
 15772 0000B16A 0F85ABD20000            	jne L_error_non_closure
 15773 0000B170 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15774 0000B173 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15775 0000B176 FF7500                  	push qword[rbp]
 15776 0000B179 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15777 0000B17C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15778 0000B180 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15779 0000B184 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15780 0000B188 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15781 0000B18B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15782 0000B18E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15783 0000B193 4983C103                	add r9, 3 	 ;for getting to the params
 15784 0000B197 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15785 0000B19B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15786                                  .L_tc_recycle_frame_loop_0ecf:
 15787 0000B19E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15788 0000B1A1 7410                    	je .L_tc_recycle_frame_done_0ecf
 15789 0000B1A3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15790 0000B1A6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15791 0000B1A9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15792 0000B1AD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15793 0000B1B1 EBEB                    	jmp .L_tc_recycle_frame_loop_0ecf
 15794                                  .L_tc_recycle_frame_done_0ecf:
 15795 0000B1B3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15796 0000B1B4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15797 0000B1B8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15798 0000B1BB E924010000              	jmp .L_if_end_07f5
 15799                                  .L_if_else_07f5:
 15800                                  	; preparing a non-tail-call
 15801 0000B1C0 488B4528                	mov rax, PARAM(1)	; param b
 15802 0000B1C4 50                      	push rax
 15803 0000B1C5 6A01                    	push 1	; arg count
 15804 0000B1C7 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 15805 0000B1CF 803805                  	cmp byte [rax], T_undefined
 15806 0000B1D2 0F84BFD10000            	je L_error_fvar_undefined
 15807 0000B1D8 803804                  	cmp byte [rax], T_closure
 15808 0000B1DB 0F853AD20000            	jne L_error_non_closure
 15809 0000B1E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15810 0000B1E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15811 0000B1E7 483D[02000000]          	cmp rax, sob_boolean_false
 15812 0000B1ED 0F8490000000            	je .L_if_else_07f4
 15813                                  	; preparing a tail-call
 15814 0000B1F3 488B4528                	mov rax, PARAM(1)	; param b
 15815 0000B1F7 50                      	push rax
 15816                                  	; preparing a non-tail-call
 15817 0000B1F8 488B4520                	mov rax, PARAM(0)	; param a
 15818 0000B1FC 50                      	push rax
 15819 0000B1FD 6A01                    	push 1	; arg count
 15820 0000B1FF 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 15821 0000B207 803805                  	cmp byte [rax], T_undefined
 15822 0000B20A 0F8487D10000            	je L_error_fvar_undefined
 15823 0000B210 803804                  	cmp byte [rax], T_closure
 15824 0000B213 0F8502D20000            	jne L_error_non_closure
 15825 0000B219 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15826 0000B21C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15827 0000B21F 50                      	push rax
 15828 0000B220 6A02                    	push 2	; arg count
 15829 0000B222 488B4510                	mov rax, ENV
 15830 0000B226 488B00                  	mov rax, qword [rax + 8 * 0]
 15831 0000B229 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 15832 0000B22D 803804                  	cmp byte [rax], T_closure
 15833 0000B230 0F85E5D10000            	jne L_error_non_closure
 15834 0000B236 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15835 0000B239 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15836 0000B23C FF7500                  	push qword[rbp]
 15837 0000B23F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15838 0000B242 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15839 0000B246 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15840 0000B24A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15841 0000B24E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15842 0000B251 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15843 0000B254 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15844 0000B259 4983C103                	add r9, 3 	 ;for getting to the params
 15845 0000B25D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15846 0000B261 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15847                                  .L_tc_recycle_frame_loop_0ed0:
 15848 0000B264 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15849 0000B267 7410                    	je .L_tc_recycle_frame_done_0ed0
 15850 0000B269 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15851 0000B26C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15852 0000B26F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15853 0000B273 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15854 0000B277 EBEB                    	jmp .L_tc_recycle_frame_loop_0ed0
 15855                                  .L_tc_recycle_frame_done_0ed0:
 15856 0000B279 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15857 0000B27A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15858 0000B27E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15859 0000B281 EB61                    	jmp .L_if_end_07f4
 15860                                  .L_if_else_07f4:
 15861                                  	; preparing a tail-call
 15862 0000B283 6A00                    	push 0	; arg count
 15863 0000B285 488B4510                	mov rax, ENV
 15864 0000B289 488B4008                	mov rax, qword [rax + 8 * 1]
 15865 0000B28D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 15866 0000B290 803804                  	cmp byte [rax], T_closure
 15867 0000B293 0F8582D10000            	jne L_error_non_closure
 15868 0000B299 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15869 0000B29C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15870 0000B29F FF7500                  	push qword[rbp]
 15871 0000B2A2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15872 0000B2A5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15873 0000B2A9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15874 0000B2AD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15875 0000B2B1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15876 0000B2B4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15877 0000B2B7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15878 0000B2BC 4983C103                	add r9, 3 	 ;for getting to the params
 15879 0000B2C0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15880 0000B2C4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15881                                  .L_tc_recycle_frame_loop_0ed1:
 15882 0000B2C7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15883 0000B2CA 7410                    	je .L_tc_recycle_frame_done_0ed1
 15884 0000B2CC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15885 0000B2CF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15886 0000B2D2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15887 0000B2D6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15888 0000B2DA EBEB                    	jmp .L_tc_recycle_frame_loop_0ed1
 15889                                  .L_tc_recycle_frame_done_0ed1:
 15890 0000B2DC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15891 0000B2DD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15892 0000B2E1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15893                                  .L_if_end_07f4:
 15894                                  .L_if_end_07f5:
 15895                                  .L_if_end_07f6:
 15896 0000B2E4 E9E0050000              	jmp .L_if_end_07ff
 15897                                  .L_if_else_07ff:
 15898                                  	; preparing a non-tail-call
 15899 0000B2E9 488B4520                	mov rax, PARAM(0)	; param a
 15900 0000B2ED 50                      	push rax
 15901 0000B2EE 6A01                    	push 1	; arg count
 15902 0000B2F0 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 15903 0000B2F8 803805                  	cmp byte [rax], T_undefined
 15904 0000B2FB 0F8496D00000            	je L_error_fvar_undefined
 15905 0000B301 803804                  	cmp byte [rax], T_closure
 15906 0000B304 0F8511D10000            	jne L_error_non_closure
 15907 0000B30A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15908 0000B30D FF5009                  	call SOB_CLOSURE_CODE(rax)
 15909 0000B310 483D[02000000]          	cmp rax, sob_boolean_false
 15910 0000B316 0F848E020000            	je .L_if_else_07fe
 15911                                  	; preparing a non-tail-call
 15912 0000B31C 488B4528                	mov rax, PARAM(1)	; param b
 15913 0000B320 50                      	push rax
 15914 0000B321 6A01                    	push 1	; arg count
 15915 0000B323 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 15916 0000B32B 803805                  	cmp byte [rax], T_undefined
 15917 0000B32E 0F8463D00000            	je L_error_fvar_undefined
 15918 0000B334 803804                  	cmp byte [rax], T_closure
 15919 0000B337 0F85DED00000            	jne L_error_non_closure
 15920 0000B33D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15921 0000B340 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15922 0000B343 483D[02000000]          	cmp rax, sob_boolean_false
 15923 0000B349 0F8493000000            	je .L_if_else_07f9
 15924                                  	; preparing a tail-call
 15925                                  	; preparing a non-tail-call
 15926 0000B34F 488B4528                	mov rax, PARAM(1)	; param b
 15927 0000B353 50                      	push rax
 15928 0000B354 6A01                    	push 1	; arg count
 15929 0000B356 488B0425[27110000]      	mov rax, qword [free_var_29]	; free var __integer-to-fraction
 15930 0000B35E 803805                  	cmp byte [rax], T_undefined
 15931 0000B361 0F8430D00000            	je L_error_fvar_undefined
 15932 0000B367 803804                  	cmp byte [rax], T_closure
 15933 0000B36A 0F85ABD00000            	jne L_error_non_closure
 15934 0000B370 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15935 0000B373 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15936 0000B376 50                      	push rax
 15937 0000B377 488B4520                	mov rax, PARAM(0)	; param a
 15938 0000B37B 50                      	push rax
 15939 0000B37C 6A02                    	push 2	; arg count
 15940 0000B37E 488B4510                	mov rax, ENV
 15941 0000B382 488B00                  	mov rax, qword [rax + 8 * 0]
 15942 0000B385 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15943 0000B389 803804                  	cmp byte [rax], T_closure
 15944 0000B38C 0F8589D00000            	jne L_error_non_closure
 15945 0000B392 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15946 0000B395 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15947 0000B398 FF7500                  	push qword[rbp]
 15948 0000B39B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 15949 0000B39E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 15950 0000B3A2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 15951 0000B3A6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 15952 0000B3AA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 15953 0000B3AD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 15954 0000B3B0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 15955 0000B3B5 4983C103                	add r9, 3 	 ;for getting to the params
 15956 0000B3B9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 15957 0000B3BD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 15958                                  .L_tc_recycle_frame_loop_0ed2:
 15959 0000B3C0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 15960 0000B3C3 7410                    	je .L_tc_recycle_frame_done_0ed2
 15961 0000B3C5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 15962 0000B3C8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 15963 0000B3CB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 15964 0000B3CF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 15965 0000B3D3 EBEB                    	jmp .L_tc_recycle_frame_loop_0ed2
 15966                                  .L_tc_recycle_frame_done_0ed2:
 15967 0000B3D5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 15968 0000B3D6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 15969 0000B3DA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15970 0000B3DD E9C3010000              	jmp .L_if_end_07f9
 15971                                  .L_if_else_07f9:
 15972                                  	; preparing a non-tail-call
 15973 0000B3E2 488B4528                	mov rax, PARAM(1)	; param b
 15974 0000B3E6 50                      	push rax
 15975 0000B3E7 6A01                    	push 1	; arg count
 15976 0000B3E9 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 15977 0000B3F1 803805                  	cmp byte [rax], T_undefined
 15978 0000B3F4 0F849DCF0000            	je L_error_fvar_undefined
 15979 0000B3FA 803804                  	cmp byte [rax], T_closure
 15980 0000B3FD 0F8518D00000            	jne L_error_non_closure
 15981 0000B403 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15982 0000B406 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15983 0000B409 483D[02000000]          	cmp rax, sob_boolean_false
 15984 0000B40F 7470                    	je .L_if_else_07f8
 15985                                  	; preparing a tail-call
 15986 0000B411 488B4528                	mov rax, PARAM(1)	; param b
 15987 0000B415 50                      	push rax
 15988 0000B416 488B4520                	mov rax, PARAM(0)	; param a
 15989 0000B41A 50                      	push rax
 15990 0000B41B 6A02                    	push 2	; arg count
 15991 0000B41D 488B4510                	mov rax, ENV
 15992 0000B421 488B00                  	mov rax, qword [rax + 8 * 0]
 15993 0000B424 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var comparator-qq
 15994 0000B428 803804                  	cmp byte [rax], T_closure
 15995 0000B42B 0F85EACF0000            	jne L_error_non_closure
 15996 0000B431 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15997 0000B434 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 15998 0000B437 FF7500                  	push qword[rbp]
 15999 0000B43A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16000 0000B43D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16001 0000B441 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16002 0000B445 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16003 0000B449 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16004 0000B44C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16005 0000B44F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16006 0000B454 4983C103                	add r9, 3 	 ;for getting to the params
 16007 0000B458 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16008 0000B45C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16009                                  .L_tc_recycle_frame_loop_0ed3:
 16010 0000B45F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16011 0000B462 7410                    	je .L_tc_recycle_frame_done_0ed3
 16012 0000B464 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16013 0000B467 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16014 0000B46A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16015 0000B46E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16016 0000B472 EBEB                    	jmp .L_tc_recycle_frame_loop_0ed3
 16017                                  .L_tc_recycle_frame_done_0ed3:
 16018 0000B474 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16019 0000B475 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16020 0000B479 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16021 0000B47C E924010000              	jmp .L_if_end_07f8
 16022                                  .L_if_else_07f8:
 16023                                  	; preparing a non-tail-call
 16024 0000B481 488B4528                	mov rax, PARAM(1)	; param b
 16025 0000B485 50                      	push rax
 16026 0000B486 6A01                    	push 1	; arg count
 16027 0000B488 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 16028 0000B490 803805                  	cmp byte [rax], T_undefined
 16029 0000B493 0F84FECE0000            	je L_error_fvar_undefined
 16030 0000B499 803804                  	cmp byte [rax], T_closure
 16031 0000B49C 0F8579CF0000            	jne L_error_non_closure
 16032 0000B4A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16033 0000B4A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16034 0000B4A8 483D[02000000]          	cmp rax, sob_boolean_false
 16035 0000B4AE 0F8490000000            	je .L_if_else_07f7
 16036                                  	; preparing a tail-call
 16037 0000B4B4 488B4528                	mov rax, PARAM(1)	; param b
 16038 0000B4B8 50                      	push rax
 16039                                  	; preparing a non-tail-call
 16040 0000B4B9 488B4520                	mov rax, PARAM(0)	; param a
 16041 0000B4BD 50                      	push rax
 16042 0000B4BE 6A01                    	push 1	; arg count
 16043 0000B4C0 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 16044 0000B4C8 803805                  	cmp byte [rax], T_undefined
 16045 0000B4CB 0F84C6CE0000            	je L_error_fvar_undefined
 16046 0000B4D1 803804                  	cmp byte [rax], T_closure
 16047 0000B4D4 0F8541CF0000            	jne L_error_non_closure
 16048 0000B4DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 16049 0000B4DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 16050 0000B4E0 50                      	push rax
 16051 0000B4E1 6A02                    	push 2	; arg count
 16052 0000B4E3 488B4510                	mov rax, ENV
 16053 0000B4E7 488B00                  	mov rax, qword [rax + 8 * 0]
 16054 0000B4EA 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16055 0000B4EE 803804                  	cmp byte [rax], T_closure
 16056 0000B4F1 0F8524CF0000            	jne L_error_non_closure
 16057 0000B4F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16058 0000B4FA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16059 0000B4FD FF7500                  	push qword[rbp]
 16060 0000B500 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16061 0000B503 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16062 0000B507 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16063 0000B50B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16064 0000B50F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16065 0000B512 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16066 0000B515 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16067 0000B51A 4983C103                	add r9, 3 	 ;for getting to the params
 16068 0000B51E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16069 0000B522 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16070                                  .L_tc_recycle_frame_loop_0ed4:
 16071 0000B525 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16072 0000B528 7410                    	je .L_tc_recycle_frame_done_0ed4
 16073 0000B52A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16074 0000B52D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16075 0000B530 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16076 0000B534 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16077 0000B538 EBEB                    	jmp .L_tc_recycle_frame_loop_0ed4
 16078                                  .L_tc_recycle_frame_done_0ed4:
 16079 0000B53A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16080 0000B53B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16081 0000B53F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16082 0000B542 EB61                    	jmp .L_if_end_07f7
 16083                                  .L_if_else_07f7:
 16084                                  	; preparing a tail-call
 16085 0000B544 6A00                    	push 0	; arg count
 16086 0000B546 488B4510                	mov rax, ENV
 16087 0000B54A 488B4008                	mov rax, qword [rax + 8 * 1]
 16088 0000B54E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16089 0000B551 803804                  	cmp byte [rax], T_closure
 16090 0000B554 0F85C1CE0000            	jne L_error_non_closure
 16091 0000B55A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16092 0000B55D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16093 0000B560 FF7500                  	push qword[rbp]
 16094 0000B563 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16095 0000B566 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16096 0000B56A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16097 0000B56E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16098 0000B572 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16099 0000B575 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16100 0000B578 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16101 0000B57D 4983C103                	add r9, 3 	 ;for getting to the params
 16102 0000B581 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16103 0000B585 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16104                                  .L_tc_recycle_frame_loop_0ed5:
 16105 0000B588 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16106 0000B58B 7410                    	je .L_tc_recycle_frame_done_0ed5
 16107 0000B58D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16108 0000B590 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16109 0000B593 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16110 0000B597 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16111 0000B59B EBEB                    	jmp .L_tc_recycle_frame_loop_0ed5
 16112                                  .L_tc_recycle_frame_done_0ed5:
 16113 0000B59D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16114 0000B59E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16115 0000B5A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16116                                  .L_if_end_07f7:
 16117                                  .L_if_end_07f8:
 16118                                  .L_if_end_07f9:
 16119 0000B5A5 E91F030000              	jmp .L_if_end_07fe
 16120                                  .L_if_else_07fe:
 16121                                  	; preparing a non-tail-call
 16122 0000B5AA 488B4520                	mov rax, PARAM(0)	; param a
 16123 0000B5AE 50                      	push rax
 16124 0000B5AF 6A01                    	push 1	; arg count
 16125 0000B5B1 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 16126 0000B5B9 803805                  	cmp byte [rax], T_undefined
 16127 0000B5BC 0F84D5CD0000            	je L_error_fvar_undefined
 16128 0000B5C2 803804                  	cmp byte [rax], T_closure
 16129 0000B5C5 0F8550CE0000            	jne L_error_non_closure
 16130 0000B5CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16131 0000B5CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16132 0000B5D1 483D[02000000]          	cmp rax, sob_boolean_false
 16133 0000B5D7 0F848B020000            	je .L_if_else_07fd
 16134                                  	; preparing a non-tail-call
 16135 0000B5DD 488B4528                	mov rax, PARAM(1)	; param b
 16136 0000B5E1 50                      	push rax
 16137 0000B5E2 6A01                    	push 1	; arg count
 16138 0000B5E4 488B0425[45150000]      	mov rax, qword [free_var_91]	; free var integer?
 16139 0000B5EC 803805                  	cmp byte [rax], T_undefined
 16140 0000B5EF 0F84A2CD0000            	je L_error_fvar_undefined
 16141 0000B5F5 803804                  	cmp byte [rax], T_closure
 16142 0000B5F8 0F851DCE0000            	jne L_error_non_closure
 16143 0000B5FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16144 0000B601 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16145 0000B604 483D[02000000]          	cmp rax, sob_boolean_false
 16146 0000B60A 0F8493000000            	je .L_if_else_07fc
 16147                                  	; preparing a tail-call
 16148                                  	; preparing a non-tail-call
 16149 0000B610 488B4528                	mov rax, PARAM(1)	; param b
 16150 0000B614 50                      	push rax
 16151 0000B615 6A01                    	push 1	; arg count
 16152 0000B617 488B0425[34150000]      	mov rax, qword [free_var_90]	; free var integer->real
 16153 0000B61F 803805                  	cmp byte [rax], T_undefined
 16154 0000B622 0F846FCD0000            	je L_error_fvar_undefined
 16155 0000B628 803804                  	cmp byte [rax], T_closure
 16156 0000B62B 0F85EACD0000            	jne L_error_non_closure
 16157 0000B631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16158 0000B634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16159 0000B637 50                      	push rax
 16160 0000B638 488B4520                	mov rax, PARAM(0)	; param a
 16161 0000B63C 50                      	push rax
 16162 0000B63D 6A02                    	push 2	; arg count
 16163 0000B63F 488B4510                	mov rax, ENV
 16164 0000B643 488B00                  	mov rax, qword [rax + 8 * 0]
 16165 0000B646 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16166 0000B64A 803804                  	cmp byte [rax], T_closure
 16167 0000B64D 0F85C8CD0000            	jne L_error_non_closure
 16168 0000B653 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16169 0000B656 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16170 0000B659 FF7500                  	push qword[rbp]
 16171 0000B65C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16172 0000B65F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16173 0000B663 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16174 0000B667 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16175 0000B66B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16176 0000B66E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16177 0000B671 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16178 0000B676 4983C103                	add r9, 3 	 ;for getting to the params
 16179 0000B67A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16180 0000B67E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16181                                  .L_tc_recycle_frame_loop_0ed6:
 16182 0000B681 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16183 0000B684 7410                    	je .L_tc_recycle_frame_done_0ed6
 16184 0000B686 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16185 0000B689 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16186 0000B68C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16187 0000B690 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16188 0000B694 EBEB                    	jmp .L_tc_recycle_frame_loop_0ed6
 16189                                  .L_tc_recycle_frame_done_0ed6:
 16190 0000B696 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16191 0000B697 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16192 0000B69B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16193 0000B69E E9C3010000              	jmp .L_if_end_07fc
 16194                                  .L_if_else_07fc:
 16195                                  	; preparing a non-tail-call
 16196 0000B6A3 488B4528                	mov rax, PARAM(1)	; param b
 16197 0000B6A7 50                      	push rax
 16198 0000B6A8 6A01                    	push 1	; arg count
 16199 0000B6AA 488B0425[12150000]      	mov rax, qword [free_var_88]	; free var fraction?
 16200 0000B6B2 803805                  	cmp byte [rax], T_undefined
 16201 0000B6B5 0F84DCCC0000            	je L_error_fvar_undefined
 16202 0000B6BB 803804                  	cmp byte [rax], T_closure
 16203 0000B6BE 0F8557CD0000            	jne L_error_non_closure
 16204 0000B6C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16205 0000B6C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16206 0000B6CA 483D[02000000]          	cmp rax, sob_boolean_false
 16207 0000B6D0 0F8493000000            	je .L_if_else_07fb
 16208                                  	; preparing a tail-call
 16209                                  	; preparing a non-tail-call
 16210 0000B6D6 488B4528                	mov rax, PARAM(1)	; param b
 16211 0000B6DA 50                      	push rax
 16212 0000B6DB 6A01                    	push 1	; arg count
 16213 0000B6DD 488B0425[01150000]      	mov rax, qword [free_var_87]	; free var fraction->real
 16214 0000B6E5 803805                  	cmp byte [rax], T_undefined
 16215 0000B6E8 0F84A9CC0000            	je L_error_fvar_undefined
 16216 0000B6EE 803804                  	cmp byte [rax], T_closure
 16217 0000B6F1 0F8524CD0000            	jne L_error_non_closure
 16218 0000B6F7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16219 0000B6FA FF5009                  	call SOB_CLOSURE_CODE(rax)
 16220 0000B6FD 50                      	push rax
 16221 0000B6FE 488B4520                	mov rax, PARAM(0)	; param a
 16222 0000B702 50                      	push rax
 16223 0000B703 6A02                    	push 2	; arg count
 16224 0000B705 488B4510                	mov rax, ENV
 16225 0000B709 488B00                  	mov rax, qword [rax + 8 * 0]
 16226 0000B70C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16227 0000B710 803804                  	cmp byte [rax], T_closure
 16228 0000B713 0F8502CD0000            	jne L_error_non_closure
 16229 0000B719 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16230 0000B71C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16231 0000B71F FF7500                  	push qword[rbp]
 16232 0000B722 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16233 0000B725 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16234 0000B729 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16235 0000B72D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16236 0000B731 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16237 0000B734 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16238 0000B737 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16239 0000B73C 4983C103                	add r9, 3 	 ;for getting to the params
 16240 0000B740 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16241 0000B744 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16242                                  .L_tc_recycle_frame_loop_0ed7:
 16243 0000B747 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16244 0000B74A 7410                    	je .L_tc_recycle_frame_done_0ed7
 16245 0000B74C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16246 0000B74F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16247 0000B752 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16248 0000B756 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16249 0000B75A EBEB                    	jmp .L_tc_recycle_frame_loop_0ed7
 16250                                  .L_tc_recycle_frame_done_0ed7:
 16251 0000B75C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16252 0000B75D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16253 0000B761 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16254 0000B764 E9FD000000              	jmp .L_if_end_07fb
 16255                                  .L_if_else_07fb:
 16256                                  	; preparing a non-tail-call
 16257 0000B769 488B4528                	mov rax, PARAM(1)	; param b
 16258 0000B76D 50                      	push rax
 16259 0000B76E 6A01                    	push 1	; arg count
 16260 0000B770 488B0425[EE160000]      	mov rax, qword [free_var_116]	; free var real?
 16261 0000B778 803805                  	cmp byte [rax], T_undefined
 16262 0000B77B 0F8416CC0000            	je L_error_fvar_undefined
 16263 0000B781 803804                  	cmp byte [rax], T_closure
 16264 0000B784 0F8591CC0000            	jne L_error_non_closure
 16265 0000B78A FF7001                  	push SOB_CLOSURE_ENV(rax)
 16266 0000B78D FF5009                  	call SOB_CLOSURE_CODE(rax)
 16267 0000B790 483D[02000000]          	cmp rax, sob_boolean_false
 16268 0000B796 746D                    	je .L_if_else_07fa
 16269                                  	; preparing a tail-call
 16270 0000B798 488B4528                	mov rax, PARAM(1)	; param b
 16271 0000B79C 50                      	push rax
 16272 0000B79D 488B4520                	mov rax, PARAM(0)	; param a
 16273 0000B7A1 50                      	push rax
 16274 0000B7A2 6A02                    	push 2	; arg count
 16275 0000B7A4 488B4510                	mov rax, ENV
 16276 0000B7A8 488B00                  	mov rax, qword [rax + 8 * 0]
 16277 0000B7AB 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var comparator-rr
 16278 0000B7AF 803804                  	cmp byte [rax], T_closure
 16279 0000B7B2 0F8563CC0000            	jne L_error_non_closure
 16280 0000B7B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16281 0000B7BB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16282 0000B7BE FF7500                  	push qword[rbp]
 16283 0000B7C1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16284 0000B7C4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16285 0000B7C8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16286 0000B7CC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16287 0000B7D0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16288 0000B7D3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16289 0000B7D6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16290 0000B7DB 4983C103                	add r9, 3 	 ;for getting to the params
 16291 0000B7DF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16292 0000B7E3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16293                                  .L_tc_recycle_frame_loop_0ed8:
 16294 0000B7E6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16295 0000B7E9 7410                    	je .L_tc_recycle_frame_done_0ed8
 16296 0000B7EB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16297 0000B7EE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16298 0000B7F1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16299 0000B7F5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16300 0000B7F9 EBEB                    	jmp .L_tc_recycle_frame_loop_0ed8
 16301                                  .L_tc_recycle_frame_done_0ed8:
 16302 0000B7FB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16303 0000B7FC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16304 0000B800 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16305 0000B803 EB61                    	jmp .L_if_end_07fa
 16306                                  .L_if_else_07fa:
 16307                                  	; preparing a tail-call
 16308 0000B805 6A00                    	push 0	; arg count
 16309 0000B807 488B4510                	mov rax, ENV
 16310 0000B80B 488B4008                	mov rax, qword [rax + 8 * 1]
 16311 0000B80F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16312 0000B812 803804                  	cmp byte [rax], T_closure
 16313 0000B815 0F8500CC0000            	jne L_error_non_closure
 16314 0000B81B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16315 0000B81E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16316 0000B821 FF7500                  	push qword[rbp]
 16317 0000B824 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16318 0000B827 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16319 0000B82B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16320 0000B82F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16321 0000B833 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16322 0000B836 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16323 0000B839 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16324 0000B83E 4983C103                	add r9, 3 	 ;for getting to the params
 16325 0000B842 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16326 0000B846 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16327                                  .L_tc_recycle_frame_loop_0ed9:
 16328 0000B849 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16329 0000B84C 7410                    	je .L_tc_recycle_frame_done_0ed9
 16330 0000B84E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16331 0000B851 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16332 0000B854 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16333 0000B858 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16334 0000B85C EBEB                    	jmp .L_tc_recycle_frame_loop_0ed9
 16335                                  .L_tc_recycle_frame_done_0ed9:
 16336 0000B85E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16337 0000B85F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16338 0000B863 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16339                                  .L_if_end_07fa:
 16340                                  .L_if_end_07fb:
 16341                                  .L_if_end_07fc:
 16342 0000B866 EB61                    	jmp .L_if_end_07fd
 16343                                  .L_if_else_07fd:
 16344                                  	; preparing a tail-call
 16345 0000B868 6A00                    	push 0	; arg count
 16346 0000B86A 488B4510                	mov rax, ENV
 16347 0000B86E 488B4008                	mov rax, qword [rax + 8 * 1]
 16348 0000B872 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var exit
 16349 0000B875 803804                  	cmp byte [rax], T_closure
 16350 0000B878 0F859DCB0000            	jne L_error_non_closure
 16351 0000B87E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16352 0000B881 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16353 0000B884 FF7500                  	push qword[rbp]
 16354 0000B887 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16355 0000B88A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16356 0000B88E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16357 0000B892 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16358 0000B896 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16359 0000B899 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16360 0000B89C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16361 0000B8A1 4983C103                	add r9, 3 	 ;for getting to the params
 16362 0000B8A5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16363 0000B8A9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16364                                  .L_tc_recycle_frame_loop_0eda:
 16365 0000B8AC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16366 0000B8AF 7410                    	je .L_tc_recycle_frame_done_0eda
 16367 0000B8B1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16368 0000B8B4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16369 0000B8B7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16370 0000B8BB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16371 0000B8BF EBEB                    	jmp .L_tc_recycle_frame_loop_0eda
 16372                                  .L_tc_recycle_frame_done_0eda:
 16373 0000B8C1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16374 0000B8C2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16375 0000B8C6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16376                                  .L_if_end_07fd:
 16377                                  .L_if_end_07fe:
 16378                                  .L_if_end_07ff:
 16379 0000B8C9 C9                      	leave
 16380 0000B8CA C22000                  	ret AND_KILL_FRAME(2)
 16381                                  .L_lambda_simple_end_0a82:	; new closure is in rax
 16382 0000B8CD C9                      	leave
 16383 0000B8CE C22800                  	ret AND_KILL_FRAME(3)
 16384                                  .L_lambda_simple_end_0a81:	; new closure is in rax
 16385 0000B8D1 50                      	push rax
 16386 0000B8D2 6A01                    	push 1	; arg count
 16387 0000B8D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16388 0000B8D9 E8E6CB0000              	call malloc
 16389 0000B8DE 50                      	push rax
 16390 0000B8DF BF08000000              	mov rdi, 8 * 1	; new rib
 16391 0000B8E4 E8DBCB0000              	call malloc
 16392 0000B8E9 50                      	push rax
 16393 0000B8EA BF10000000              	mov rdi, 8 * 2	; extended env
 16394 0000B8EF E8D0CB0000              	call malloc
 16395 0000B8F4 488B7D10                	mov rdi, ENV
 16396 0000B8F8 BE00000000              	mov rsi, 0
 16397 0000B8FD BA01000000              	mov rdx, 1
 16398                                  .L_lambda_simple_env_loop_0a83:	; ext_env[i + 1] <-- env[i]
 16399 0000B902 4883FE01                	cmp rsi, 1
 16400 0000B906 7410                    	je .L_lambda_simple_env_end_0a83
 16401 0000B908 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16402 0000B90C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16403 0000B910 48FFC6                  	inc rsi
 16404 0000B913 48FFC2                  	inc rdx
 16405 0000B916 EBEA                    	jmp .L_lambda_simple_env_loop_0a83
 16406                                  .L_lambda_simple_env_end_0a83:
 16407 0000B918 5B                      	pop rbx
 16408 0000B919 BE00000000              	mov rsi, 0
 16409                                  .L_lambda_simple_params_loop_0a83:	; copy params
 16410 0000B91E 4883FE01                	cmp rsi, 1
 16411 0000B922 740E                    	je .L_lambda_simple_params_end_0a83
 16412 0000B924 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16413 0000B929 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16414 0000B92D 48FFC6                  	inc rsi
 16415 0000B930 EBEC                    	jmp .L_lambda_simple_params_loop_0a83
 16416                                  .L_lambda_simple_params_end_0a83:
 16417 0000B932 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16418 0000B935 4889C3                  	mov rbx, rax
 16419 0000B938 58                      	pop rax
 16420 0000B939 C60004                  	mov byte [rax], T_closure
 16421 0000B93C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16422 0000B940 48C74009[4DB90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a83
 16423 0000B948 E98D100000              	jmp .L_lambda_simple_end_0a83
 16424                                  .L_lambda_simple_code_0a83:	; lambda-simple body
 16425 0000B94D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16426 0000B953 740B                    	je .L_lambda_simple_arity_check_ok_0a83
 16427 0000B955 FF742410                	push qword [rsp + 8 * 2]
 16428 0000B959 6A01                    	push 1
 16429 0000B95B E91DCB0000              	jmp L_error_incorrect_arity_simple
 16430                                  .L_lambda_simple_arity_check_ok_0a83:
 16431 0000B960 C8000000                	enter 0, 0
 16432                                  	; preparing a tail-call
 16433                                  	; preparing a non-tail-call
 16434 0000B964 488B0425[8E100000]      	mov rax, qword [free_var_20]	; free var __bin-less-than-rr
 16435 0000B96C 803805                  	cmp byte [rax], T_undefined
 16436 0000B96F 0F8422CA0000            	je L_error_fvar_undefined
 16437 0000B975 50                      	push rax
 16438 0000B976 488B0425[7D100000]      	mov rax, qword [free_var_19]	; free var __bin-less-than-qq
 16439 0000B97E 803805                  	cmp byte [rax], T_undefined
 16440 0000B981 0F8410CA0000            	je L_error_fvar_undefined
 16441 0000B987 50                      	push rax
 16442 0000B988 488B0425[9F100000]      	mov rax, qword [free_var_21]	; free var __bin-less-than-zz
 16443 0000B990 803805                  	cmp byte [rax], T_undefined
 16444 0000B993 0F84FEC90000            	je L_error_fvar_undefined
 16445 0000B999 50                      	push rax
 16446 0000B99A 6A03                    	push 3	; arg count
 16447 0000B99C 488B4520                	mov rax, PARAM(0)	; param make-bin-comparator
 16448 0000B9A0 803804                  	cmp byte [rax], T_closure
 16449 0000B9A3 0F8572CA0000            	jne L_error_non_closure
 16450 0000B9A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16451 0000B9AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 16452 0000B9AF 50                      	push rax
 16453 0000B9B0 6A01                    	push 1	; arg count
 16454 0000B9B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16455 0000B9B7 E808CB0000              	call malloc
 16456 0000B9BC 50                      	push rax
 16457 0000B9BD BF08000000              	mov rdi, 8 * 1	; new rib
 16458 0000B9C2 E8FDCA0000              	call malloc
 16459 0000B9C7 50                      	push rax
 16460 0000B9C8 BF18000000              	mov rdi, 8 * 3	; extended env
 16461 0000B9CD E8F2CA0000              	call malloc
 16462 0000B9D2 488B7D10                	mov rdi, ENV
 16463 0000B9D6 BE00000000              	mov rsi, 0
 16464 0000B9DB BA01000000              	mov rdx, 1
 16465                                  .L_lambda_simple_env_loop_0a84:	; ext_env[i + 1] <-- env[i]
 16466 0000B9E0 4883FE02                	cmp rsi, 2
 16467 0000B9E4 7410                    	je .L_lambda_simple_env_end_0a84
 16468 0000B9E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16469 0000B9EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16470 0000B9EE 48FFC6                  	inc rsi
 16471 0000B9F1 48FFC2                  	inc rdx
 16472 0000B9F4 EBEA                    	jmp .L_lambda_simple_env_loop_0a84
 16473                                  .L_lambda_simple_env_end_0a84:
 16474 0000B9F6 5B                      	pop rbx
 16475 0000B9F7 BE00000000              	mov rsi, 0
 16476                                  .L_lambda_simple_params_loop_0a84:	; copy params
 16477 0000B9FC 4883FE01                	cmp rsi, 1
 16478 0000BA00 740E                    	je .L_lambda_simple_params_end_0a84
 16479 0000BA02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16480 0000BA07 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16481 0000BA0B 48FFC6                  	inc rsi
 16482 0000BA0E EBEC                    	jmp .L_lambda_simple_params_loop_0a84
 16483                                  .L_lambda_simple_params_end_0a84:
 16484 0000BA10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16485 0000BA13 4889C3                  	mov rbx, rax
 16486 0000BA16 58                      	pop rax
 16487 0000BA17 C60004                  	mov byte [rax], T_closure
 16488 0000BA1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16489 0000BA1E 48C74009[2BBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a84
 16490 0000BA26 E9570F0000              	jmp .L_lambda_simple_end_0a84
 16491                                  .L_lambda_simple_code_0a84:	; lambda-simple body
 16492 0000BA2B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16493 0000BA31 740B                    	je .L_lambda_simple_arity_check_ok_0a84
 16494 0000BA33 FF742410                	push qword [rsp + 8 * 2]
 16495 0000BA37 6A01                    	push 1
 16496 0000BA39 E93FCA0000              	jmp L_error_incorrect_arity_simple
 16497                                  .L_lambda_simple_arity_check_ok_0a84:
 16498 0000BA3E C8000000                	enter 0, 0
 16499                                  	; preparing a tail-call
 16500                                  	; preparing a non-tail-call
 16501 0000BA42 488B0425[5B100000]      	mov rax, qword [free_var_17]	; free var __bin-equal-rr
 16502 0000BA4A 803805                  	cmp byte [rax], T_undefined
 16503 0000BA4D 0F8444C90000            	je L_error_fvar_undefined
 16504 0000BA53 50                      	push rax
 16505 0000BA54 488B0425[4A100000]      	mov rax, qword [free_var_16]	; free var __bin-equal-qq
 16506 0000BA5C 803805                  	cmp byte [rax], T_undefined
 16507 0000BA5F 0F8432C90000            	je L_error_fvar_undefined
 16508 0000BA65 50                      	push rax
 16509 0000BA66 488B0425[6C100000]      	mov rax, qword [free_var_18]	; free var __bin-equal-zz
 16510 0000BA6E 803805                  	cmp byte [rax], T_undefined
 16511 0000BA71 0F8420C90000            	je L_error_fvar_undefined
 16512 0000BA77 50                      	push rax
 16513 0000BA78 6A03                    	push 3	; arg count
 16514 0000BA7A 488B4510                	mov rax, ENV
 16515 0000BA7E 488B00                  	mov rax, qword [rax + 8 * 0]
 16516 0000BA81 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var make-bin-comparator
 16517 0000BA84 803804                  	cmp byte [rax], T_closure
 16518 0000BA87 0F858EC90000            	jne L_error_non_closure
 16519 0000BA8D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16520 0000BA90 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16521 0000BA93 50                      	push rax
 16522 0000BA94 6A01                    	push 1	; arg count
 16523 0000BA96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16524 0000BA9B E824CA0000              	call malloc
 16525 0000BAA0 50                      	push rax
 16526 0000BAA1 BF08000000              	mov rdi, 8 * 1	; new rib
 16527 0000BAA6 E819CA0000              	call malloc
 16528 0000BAAB 50                      	push rax
 16529 0000BAAC BF20000000              	mov rdi, 8 * 4	; extended env
 16530 0000BAB1 E80ECA0000              	call malloc
 16531 0000BAB6 488B7D10                	mov rdi, ENV
 16532 0000BABA BE00000000              	mov rsi, 0
 16533 0000BABF BA01000000              	mov rdx, 1
 16534                                  .L_lambda_simple_env_loop_0a85:	; ext_env[i + 1] <-- env[i]
 16535 0000BAC4 4883FE03                	cmp rsi, 3
 16536 0000BAC8 7410                    	je .L_lambda_simple_env_end_0a85
 16537 0000BACA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16538 0000BACE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16539 0000BAD2 48FFC6                  	inc rsi
 16540 0000BAD5 48FFC2                  	inc rdx
 16541 0000BAD8 EBEA                    	jmp .L_lambda_simple_env_loop_0a85
 16542                                  .L_lambda_simple_env_end_0a85:
 16543 0000BADA 5B                      	pop rbx
 16544 0000BADB BE00000000              	mov rsi, 0
 16545                                  .L_lambda_simple_params_loop_0a85:	; copy params
 16546 0000BAE0 4883FE01                	cmp rsi, 1
 16547 0000BAE4 740E                    	je .L_lambda_simple_params_end_0a85
 16548 0000BAE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16549 0000BAEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16550 0000BAEF 48FFC6                  	inc rsi
 16551 0000BAF2 EBEC                    	jmp .L_lambda_simple_params_loop_0a85
 16552                                  .L_lambda_simple_params_end_0a85:
 16553 0000BAF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16554 0000BAF7 4889C3                  	mov rbx, rax
 16555 0000BAFA 58                      	pop rax
 16556 0000BAFB C60004                  	mov byte [rax], T_closure
 16557 0000BAFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16558 0000BB02 48C74009[0FBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a85
 16559 0000BB0A E91B0E0000              	jmp .L_lambda_simple_end_0a85
 16560                                  .L_lambda_simple_code_0a85:	; lambda-simple body
 16561 0000BB0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16562 0000BB15 740B                    	je .L_lambda_simple_arity_check_ok_0a85
 16563 0000BB17 FF742410                	push qword [rsp + 8 * 2]
 16564 0000BB1B 6A01                    	push 1
 16565 0000BB1D E95BC90000              	jmp L_error_incorrect_arity_simple
 16566                                  .L_lambda_simple_arity_check_ok_0a85:
 16567 0000BB22 C8000000                	enter 0, 0
 16568                                  	; preparing a tail-call
 16569 0000BB26 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16570 0000BB2B E894C90000              	call malloc
 16571 0000BB30 50                      	push rax
 16572 0000BB31 BF08000000              	mov rdi, 8 * 1	; new rib
 16573 0000BB36 E889C90000              	call malloc
 16574 0000BB3B 50                      	push rax
 16575 0000BB3C BF28000000              	mov rdi, 8 * 5	; extended env
 16576 0000BB41 E87EC90000              	call malloc
 16577 0000BB46 488B7D10                	mov rdi, ENV
 16578 0000BB4A BE00000000              	mov rsi, 0
 16579 0000BB4F BA01000000              	mov rdx, 1
 16580                                  .L_lambda_simple_env_loop_0a86:	; ext_env[i + 1] <-- env[i]
 16581 0000BB54 4883FE04                	cmp rsi, 4
 16582 0000BB58 7410                    	je .L_lambda_simple_env_end_0a86
 16583 0000BB5A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16584 0000BB5E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16585 0000BB62 48FFC6                  	inc rsi
 16586 0000BB65 48FFC2                  	inc rdx
 16587 0000BB68 EBEA                    	jmp .L_lambda_simple_env_loop_0a86
 16588                                  .L_lambda_simple_env_end_0a86:
 16589 0000BB6A 5B                      	pop rbx
 16590 0000BB6B BE00000000              	mov rsi, 0
 16591                                  .L_lambda_simple_params_loop_0a86:	; copy params
 16592 0000BB70 4883FE01                	cmp rsi, 1
 16593 0000BB74 740E                    	je .L_lambda_simple_params_end_0a86
 16594 0000BB76 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16595 0000BB7B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16596 0000BB7F 48FFC6                  	inc rsi
 16597 0000BB82 EBEC                    	jmp .L_lambda_simple_params_loop_0a86
 16598                                  .L_lambda_simple_params_end_0a86:
 16599 0000BB84 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16600 0000BB87 4889C3                  	mov rbx, rax
 16601 0000BB8A 58                      	pop rax
 16602 0000BB8B C60004                  	mov byte [rax], T_closure
 16603 0000BB8E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16604 0000BB92 48C74009[9FBB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a86
 16605 0000BB9A E9A9000000              	jmp .L_lambda_simple_end_0a86
 16606                                  .L_lambda_simple_code_0a86:	; lambda-simple body
 16607 0000BB9F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16608 0000BBA5 740B                    	je .L_lambda_simple_arity_check_ok_0a86
 16609 0000BBA7 FF742410                	push qword [rsp + 8 * 2]
 16610 0000BBAB 6A02                    	push 2
 16611 0000BBAD E9CBC80000              	jmp L_error_incorrect_arity_simple
 16612                                  .L_lambda_simple_arity_check_ok_0a86:
 16613 0000BBB2 C8000000                	enter 0, 0
 16614                                  	; preparing a tail-call
 16615                                  	; preparing a non-tail-call
 16616 0000BBB6 488B4528                	mov rax, PARAM(1)	; param b
 16617 0000BBBA 50                      	push rax
 16618 0000BBBB 488B4520                	mov rax, PARAM(0)	; param a
 16619 0000BBBF 50                      	push rax
 16620 0000BBC0 6A02                    	push 2	; arg count
 16621 0000BBC2 488B4510                	mov rax, ENV
 16622 0000BBC6 488B4008                	mov rax, qword [rax + 8 * 1]
 16623 0000BBCA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16624 0000BBCD 803804                  	cmp byte [rax], T_closure
 16625 0000BBD0 0F8545C80000            	jne L_error_non_closure
 16626 0000BBD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16627 0000BBD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16628 0000BBDC 50                      	push rax
 16629 0000BBDD 6A01                    	push 1	; arg count
 16630 0000BBDF 488B0425[44160000]      	mov rax, qword [free_var_106]	; free var not
 16631 0000BBE7 803805                  	cmp byte [rax], T_undefined
 16632 0000BBEA 0F84A7C70000            	je L_error_fvar_undefined
 16633 0000BBF0 803804                  	cmp byte [rax], T_closure
 16634 0000BBF3 0F8522C80000            	jne L_error_non_closure
 16635 0000BBF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16636 0000BBFC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16637 0000BBFF FF7500                  	push qword[rbp]
 16638 0000BC02 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16639 0000BC05 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16640 0000BC09 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16641 0000BC0D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16642 0000BC11 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16643 0000BC14 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16644 0000BC17 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16645 0000BC1C 4983C103                	add r9, 3 	 ;for getting to the params
 16646 0000BC20 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16647 0000BC24 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16648                                  .L_tc_recycle_frame_loop_0edb:
 16649 0000BC27 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16650 0000BC2A 7410                    	je .L_tc_recycle_frame_done_0edb
 16651 0000BC2C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16652 0000BC2F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16653 0000BC32 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16654 0000BC36 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16655 0000BC3A EBEB                    	jmp .L_tc_recycle_frame_loop_0edb
 16656                                  .L_tc_recycle_frame_done_0edb:
 16657 0000BC3C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16658 0000BC3D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16659 0000BC41 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16660 0000BC44 C9                      	leave
 16661 0000BC45 C22000                  	ret AND_KILL_FRAME(2)
 16662                                  .L_lambda_simple_end_0a86:	; new closure is in rax
 16663 0000BC48 50                      	push rax
 16664 0000BC49 6A01                    	push 1	; arg count
 16665 0000BC4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16666 0000BC50 E86FC80000              	call malloc
 16667 0000BC55 50                      	push rax
 16668 0000BC56 BF08000000              	mov rdi, 8 * 1	; new rib
 16669 0000BC5B E864C80000              	call malloc
 16670 0000BC60 50                      	push rax
 16671 0000BC61 BF28000000              	mov rdi, 8 * 5	; extended env
 16672 0000BC66 E859C80000              	call malloc
 16673 0000BC6B 488B7D10                	mov rdi, ENV
 16674 0000BC6F BE00000000              	mov rsi, 0
 16675 0000BC74 BA01000000              	mov rdx, 1
 16676                                  .L_lambda_simple_env_loop_0a87:	; ext_env[i + 1] <-- env[i]
 16677 0000BC79 4883FE04                	cmp rsi, 4
 16678 0000BC7D 7410                    	je .L_lambda_simple_env_end_0a87
 16679 0000BC7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16680 0000BC83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16681 0000BC87 48FFC6                  	inc rsi
 16682 0000BC8A 48FFC2                  	inc rdx
 16683 0000BC8D EBEA                    	jmp .L_lambda_simple_env_loop_0a87
 16684                                  .L_lambda_simple_env_end_0a87:
 16685 0000BC8F 5B                      	pop rbx
 16686 0000BC90 BE00000000              	mov rsi, 0
 16687                                  .L_lambda_simple_params_loop_0a87:	; copy params
 16688 0000BC95 4883FE01                	cmp rsi, 1
 16689 0000BC99 740E                    	je .L_lambda_simple_params_end_0a87
 16690 0000BC9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16691 0000BCA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16692 0000BCA4 48FFC6                  	inc rsi
 16693 0000BCA7 EBEC                    	jmp .L_lambda_simple_params_loop_0a87
 16694                                  .L_lambda_simple_params_end_0a87:
 16695 0000BCA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16696 0000BCAC 4889C3                  	mov rbx, rax
 16697 0000BCAF 58                      	pop rax
 16698 0000BCB0 C60004                  	mov byte [rax], T_closure
 16699 0000BCB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16700 0000BCB7 48C74009[C4BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a87
 16701 0000BCBF E90E0C0000              	jmp .L_lambda_simple_end_0a87
 16702                                  .L_lambda_simple_code_0a87:	; lambda-simple body
 16703 0000BCC4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16704 0000BCCA 740B                    	je .L_lambda_simple_arity_check_ok_0a87
 16705 0000BCCC FF742410                	push qword [rsp + 8 * 2]
 16706 0000BCD0 6A01                    	push 1
 16707 0000BCD2 E9A6C70000              	jmp L_error_incorrect_arity_simple
 16708                                  .L_lambda_simple_arity_check_ok_0a87:
 16709 0000BCD7 C8000000                	enter 0, 0
 16710                                  	; preparing a tail-call
 16711 0000BCDB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16712 0000BCE0 E8DFC70000              	call malloc
 16713 0000BCE5 50                      	push rax
 16714 0000BCE6 BF08000000              	mov rdi, 8 * 1	; new rib
 16715 0000BCEB E8D4C70000              	call malloc
 16716 0000BCF0 50                      	push rax
 16717 0000BCF1 BF30000000              	mov rdi, 8 * 6	; extended env
 16718 0000BCF6 E8C9C70000              	call malloc
 16719 0000BCFB 488B7D10                	mov rdi, ENV
 16720 0000BCFF BE00000000              	mov rsi, 0
 16721 0000BD04 BA01000000              	mov rdx, 1
 16722                                  .L_lambda_simple_env_loop_0a88:	; ext_env[i + 1] <-- env[i]
 16723 0000BD09 4883FE05                	cmp rsi, 5
 16724 0000BD0D 7410                    	je .L_lambda_simple_env_end_0a88
 16725 0000BD0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16726 0000BD13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16727 0000BD17 48FFC6                  	inc rsi
 16728 0000BD1A 48FFC2                  	inc rdx
 16729 0000BD1D EBEA                    	jmp .L_lambda_simple_env_loop_0a88
 16730                                  .L_lambda_simple_env_end_0a88:
 16731 0000BD1F 5B                      	pop rbx
 16732 0000BD20 BE00000000              	mov rsi, 0
 16733                                  .L_lambda_simple_params_loop_0a88:	; copy params
 16734 0000BD25 4883FE01                	cmp rsi, 1
 16735 0000BD29 740E                    	je .L_lambda_simple_params_end_0a88
 16736 0000BD2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16737 0000BD30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16738 0000BD34 48FFC6                  	inc rsi
 16739 0000BD37 EBEC                    	jmp .L_lambda_simple_params_loop_0a88
 16740                                  .L_lambda_simple_params_end_0a88:
 16741 0000BD39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16742 0000BD3C 4889C3                  	mov rbx, rax
 16743 0000BD3F 58                      	pop rax
 16744 0000BD40 C60004                  	mov byte [rax], T_closure
 16745 0000BD43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16746 0000BD47 48C74009[54BD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a88
 16747 0000BD4F E986000000              	jmp .L_lambda_simple_end_0a88
 16748                                  .L_lambda_simple_code_0a88:	; lambda-simple body
 16749 0000BD54 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16750 0000BD5A 740B                    	je .L_lambda_simple_arity_check_ok_0a88
 16751 0000BD5C FF742410                	push qword [rsp + 8 * 2]
 16752 0000BD60 6A02                    	push 2
 16753 0000BD62 E916C70000              	jmp L_error_incorrect_arity_simple
 16754                                  .L_lambda_simple_arity_check_ok_0a88:
 16755 0000BD67 C8000000                	enter 0, 0
 16756                                  	; preparing a tail-call
 16757 0000BD6B 488B4520                	mov rax, PARAM(0)	; param a
 16758 0000BD6F 50                      	push rax
 16759 0000BD70 488B4528                	mov rax, PARAM(1)	; param b
 16760 0000BD74 50                      	push rax
 16761 0000BD75 6A02                    	push 2	; arg count
 16762 0000BD77 488B4510                	mov rax, ENV
 16763 0000BD7B 488B4010                	mov rax, qword [rax + 8 * 2]
 16764 0000BD7F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 16765 0000BD82 803804                  	cmp byte [rax], T_closure
 16766 0000BD85 0F8590C60000            	jne L_error_non_closure
 16767 0000BD8B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16768 0000BD8E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16769 0000BD91 FF7500                  	push qword[rbp]
 16770 0000BD94 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16771 0000BD97 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16772 0000BD9B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16773 0000BD9F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16774 0000BDA3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16775 0000BDA6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16776 0000BDA9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16777 0000BDAE 4983C103                	add r9, 3 	 ;for getting to the params
 16778 0000BDB2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16779 0000BDB6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16780                                  .L_tc_recycle_frame_loop_0edc:
 16781 0000BDB9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16782 0000BDBC 7410                    	je .L_tc_recycle_frame_done_0edc
 16783 0000BDBE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16784 0000BDC1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16785 0000BDC4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16786 0000BDC8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16787 0000BDCC EBEB                    	jmp .L_tc_recycle_frame_loop_0edc
 16788                                  .L_tc_recycle_frame_done_0edc:
 16789 0000BDCE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16790 0000BDCF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16791 0000BDD3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16792 0000BDD6 C9                      	leave
 16793 0000BDD7 C22000                  	ret AND_KILL_FRAME(2)
 16794                                  .L_lambda_simple_end_0a88:	; new closure is in rax
 16795 0000BDDA 50                      	push rax
 16796 0000BDDB 6A01                    	push 1	; arg count
 16797 0000BDDD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16798 0000BDE2 E8DDC60000              	call malloc
 16799 0000BDE7 50                      	push rax
 16800 0000BDE8 BF08000000              	mov rdi, 8 * 1	; new rib
 16801 0000BDED E8D2C60000              	call malloc
 16802 0000BDF2 50                      	push rax
 16803 0000BDF3 BF30000000              	mov rdi, 8 * 6	; extended env
 16804 0000BDF8 E8C7C60000              	call malloc
 16805 0000BDFD 488B7D10                	mov rdi, ENV
 16806 0000BE01 BE00000000              	mov rsi, 0
 16807 0000BE06 BA01000000              	mov rdx, 1
 16808                                  .L_lambda_simple_env_loop_0a89:	; ext_env[i + 1] <-- env[i]
 16809 0000BE0B 4883FE05                	cmp rsi, 5
 16810 0000BE0F 7410                    	je .L_lambda_simple_env_end_0a89
 16811 0000BE11 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16812 0000BE15 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16813 0000BE19 48FFC6                  	inc rsi
 16814 0000BE1C 48FFC2                  	inc rdx
 16815 0000BE1F EBEA                    	jmp .L_lambda_simple_env_loop_0a89
 16816                                  .L_lambda_simple_env_end_0a89:
 16817 0000BE21 5B                      	pop rbx
 16818 0000BE22 BE00000000              	mov rsi, 0
 16819                                  .L_lambda_simple_params_loop_0a89:	; copy params
 16820 0000BE27 4883FE01                	cmp rsi, 1
 16821 0000BE2B 740E                    	je .L_lambda_simple_params_end_0a89
 16822 0000BE2D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16823 0000BE32 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16824 0000BE36 48FFC6                  	inc rsi
 16825 0000BE39 EBEC                    	jmp .L_lambda_simple_params_loop_0a89
 16826                                  .L_lambda_simple_params_end_0a89:
 16827 0000BE3B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16828 0000BE3E 4889C3                  	mov rbx, rax
 16829 0000BE41 58                      	pop rax
 16830 0000BE42 C60004                  	mov byte [rax], T_closure
 16831 0000BE45 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16832 0000BE49 48C74009[56BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a89
 16833 0000BE51 E9240A0000              	jmp .L_lambda_simple_end_0a89
 16834                                  .L_lambda_simple_code_0a89:	; lambda-simple body
 16835 0000BE56 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16836 0000BE5C 740B                    	je .L_lambda_simple_arity_check_ok_0a89
 16837 0000BE5E FF742410                	push qword [rsp + 8 * 2]
 16838 0000BE62 6A01                    	push 1
 16839 0000BE64 E914C60000              	jmp L_error_incorrect_arity_simple
 16840                                  .L_lambda_simple_arity_check_ok_0a89:
 16841 0000BE69 C8000000                	enter 0, 0
 16842                                  	; preparing a tail-call
 16843 0000BE6D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16844 0000BE72 E84DC60000              	call malloc
 16845 0000BE77 50                      	push rax
 16846 0000BE78 BF08000000              	mov rdi, 8 * 1	; new rib
 16847 0000BE7D E842C60000              	call malloc
 16848 0000BE82 50                      	push rax
 16849 0000BE83 BF38000000              	mov rdi, 8 * 7	; extended env
 16850 0000BE88 E837C60000              	call malloc
 16851 0000BE8D 488B7D10                	mov rdi, ENV
 16852 0000BE91 BE00000000              	mov rsi, 0
 16853 0000BE96 BA01000000              	mov rdx, 1
 16854                                  .L_lambda_simple_env_loop_0a8a:	; ext_env[i + 1] <-- env[i]
 16855 0000BE9B 4883FE06                	cmp rsi, 6
 16856 0000BE9F 7410                    	je .L_lambda_simple_env_end_0a8a
 16857 0000BEA1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16858 0000BEA5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16859 0000BEA9 48FFC6                  	inc rsi
 16860 0000BEAC 48FFC2                  	inc rdx
 16861 0000BEAF EBEA                    	jmp .L_lambda_simple_env_loop_0a8a
 16862                                  .L_lambda_simple_env_end_0a8a:
 16863 0000BEB1 5B                      	pop rbx
 16864 0000BEB2 BE00000000              	mov rsi, 0
 16865                                  .L_lambda_simple_params_loop_0a8a:	; copy params
 16866 0000BEB7 4883FE01                	cmp rsi, 1
 16867 0000BEBB 740E                    	je .L_lambda_simple_params_end_0a8a
 16868 0000BEBD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16869 0000BEC2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16870 0000BEC6 48FFC6                  	inc rsi
 16871 0000BEC9 EBEC                    	jmp .L_lambda_simple_params_loop_0a8a
 16872                                  .L_lambda_simple_params_end_0a8a:
 16873 0000BECB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16874 0000BECE 4889C3                  	mov rbx, rax
 16875 0000BED1 58                      	pop rax
 16876 0000BED2 C60004                  	mov byte [rax], T_closure
 16877 0000BED5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16878 0000BED9 48C74009[E6BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a8a
 16879 0000BEE1 E9A8000000              	jmp .L_lambda_simple_end_0a8a
 16880                                  .L_lambda_simple_code_0a8a:	; lambda-simple body
 16881 0000BEE6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16882 0000BEEC 740B                    	je .L_lambda_simple_arity_check_ok_0a8a
 16883 0000BEEE FF742410                	push qword [rsp + 8 * 2]
 16884 0000BEF2 6A02                    	push 2
 16885 0000BEF4 E984C50000              	jmp L_error_incorrect_arity_simple
 16886                                  .L_lambda_simple_arity_check_ok_0a8a:
 16887 0000BEF9 C8000000                	enter 0, 0
 16888                                  	; preparing a tail-call
 16889                                  	; preparing a non-tail-call
 16890 0000BEFD 488B4528                	mov rax, PARAM(1)	; param b
 16891 0000BF01 50                      	push rax
 16892 0000BF02 488B4520                	mov rax, PARAM(0)	; param a
 16893 0000BF06 50                      	push rax
 16894 0000BF07 6A02                    	push 2	; arg count
 16895 0000BF09 488B4510                	mov rax, ENV
 16896 0000BF0D 488B00                  	mov rax, qword [rax + 8 * 0]
 16897 0000BF10 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 16898 0000BF13 803804                  	cmp byte [rax], T_closure
 16899 0000BF16 0F85FFC40000            	jne L_error_non_closure
 16900 0000BF1C FF7001                  	push SOB_CLOSURE_ENV(rax)
 16901 0000BF1F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16902 0000BF22 50                      	push rax
 16903 0000BF23 6A01                    	push 1	; arg count
 16904 0000BF25 488B0425[44160000]      	mov rax, qword [free_var_106]	; free var not
 16905 0000BF2D 803805                  	cmp byte [rax], T_undefined
 16906 0000BF30 0F8461C40000            	je L_error_fvar_undefined
 16907 0000BF36 803804                  	cmp byte [rax], T_closure
 16908 0000BF39 0F85DCC40000            	jne L_error_non_closure
 16909 0000BF3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 16910 0000BF42 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 16911 0000BF45 FF7500                  	push qword[rbp]
 16912 0000BF48 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 16913 0000BF4B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 16914 0000BF4F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 16915 0000BF53 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 16916 0000BF57 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 16917 0000BF5A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 16918 0000BF5D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 16919 0000BF62 4983C103                	add r9, 3 	 ;for getting to the params
 16920 0000BF66 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 16921 0000BF6A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 16922                                  .L_tc_recycle_frame_loop_0edd:
 16923 0000BF6D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 16924 0000BF70 7410                    	je .L_tc_recycle_frame_done_0edd
 16925 0000BF72 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 16926 0000BF75 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 16927 0000BF78 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 16928 0000BF7C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 16929 0000BF80 EBEB                    	jmp .L_tc_recycle_frame_loop_0edd
 16930                                  .L_tc_recycle_frame_done_0edd:
 16931 0000BF82 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 16932 0000BF83 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 16933 0000BF87 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16934 0000BF8A C9                      	leave
 16935 0000BF8B C22000                  	ret AND_KILL_FRAME(2)
 16936                                  .L_lambda_simple_end_0a8a:	; new closure is in rax
 16937 0000BF8E 50                      	push rax
 16938 0000BF8F 6A01                    	push 1	; arg count
 16939 0000BF91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16940 0000BF96 E829C50000              	call malloc
 16941 0000BF9B 50                      	push rax
 16942 0000BF9C BF08000000              	mov rdi, 8 * 1	; new rib
 16943 0000BFA1 E81EC50000              	call malloc
 16944 0000BFA6 50                      	push rax
 16945 0000BFA7 BF38000000              	mov rdi, 8 * 7	; extended env
 16946 0000BFAC E813C50000              	call malloc
 16947 0000BFB1 488B7D10                	mov rdi, ENV
 16948 0000BFB5 BE00000000              	mov rsi, 0
 16949 0000BFBA BA01000000              	mov rdx, 1
 16950                                  .L_lambda_simple_env_loop_0a8b:	; ext_env[i + 1] <-- env[i]
 16951 0000BFBF 4883FE06                	cmp rsi, 6
 16952 0000BFC3 7410                    	je .L_lambda_simple_env_end_0a8b
 16953 0000BFC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16954 0000BFC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16955 0000BFCD 48FFC6                  	inc rsi
 16956 0000BFD0 48FFC2                  	inc rdx
 16957 0000BFD3 EBEA                    	jmp .L_lambda_simple_env_loop_0a8b
 16958                                  .L_lambda_simple_env_end_0a8b:
 16959 0000BFD5 5B                      	pop rbx
 16960 0000BFD6 BE00000000              	mov rsi, 0
 16961                                  .L_lambda_simple_params_loop_0a8b:	; copy params
 16962 0000BFDB 4883FE01                	cmp rsi, 1
 16963 0000BFDF 740E                    	je .L_lambda_simple_params_end_0a8b
 16964 0000BFE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16965 0000BFE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16966 0000BFEA 48FFC6                  	inc rsi
 16967 0000BFED EBEC                    	jmp .L_lambda_simple_params_loop_0a8b
 16968                                  .L_lambda_simple_params_end_0a8b:
 16969 0000BFEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16970 0000BFF2 4889C3                  	mov rbx, rax
 16971 0000BFF5 58                      	pop rax
 16972 0000BFF6 C60004                  	mov byte [rax], T_closure
 16973 0000BFF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16974 0000BFFD 48C74009[0AC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a8b
 16975 0000C005 E918080000              	jmp .L_lambda_simple_end_0a8b
 16976                                  .L_lambda_simple_code_0a8b:	; lambda-simple body
 16977 0000C00A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16978 0000C010 740B                    	je .L_lambda_simple_arity_check_ok_0a8b
 16979 0000C012 FF742410                	push qword [rsp + 8 * 2]
 16980 0000C016 6A01                    	push 1
 16981 0000C018 E960C40000              	jmp L_error_incorrect_arity_simple
 16982                                  .L_lambda_simple_arity_check_ok_0a8b:
 16983 0000C01D C8000000                	enter 0, 0
 16984                                  	; preparing a tail-call
 16985 0000C021 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16986 0000C026 E899C40000              	call malloc
 16987 0000C02B 50                      	push rax
 16988 0000C02C BF08000000              	mov rdi, 8 * 1	; new rib
 16989 0000C031 E88EC40000              	call malloc
 16990 0000C036 50                      	push rax
 16991 0000C037 BF40000000              	mov rdi, 8 * 8	; extended env
 16992 0000C03C E883C40000              	call malloc
 16993 0000C041 488B7D10                	mov rdi, ENV
 16994 0000C045 BE00000000              	mov rsi, 0
 16995 0000C04A BA01000000              	mov rdx, 1
 16996                                  .L_lambda_simple_env_loop_0a8c:	; ext_env[i + 1] <-- env[i]
 16997 0000C04F 4883FE07                	cmp rsi, 7
 16998 0000C053 7410                    	je .L_lambda_simple_env_end_0a8c
 16999 0000C055 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17000 0000C059 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17001 0000C05D 48FFC6                  	inc rsi
 17002 0000C060 48FFC2                  	inc rdx
 17003 0000C063 EBEA                    	jmp .L_lambda_simple_env_loop_0a8c
 17004                                  .L_lambda_simple_env_end_0a8c:
 17005 0000C065 5B                      	pop rbx
 17006 0000C066 BE00000000              	mov rsi, 0
 17007                                  .L_lambda_simple_params_loop_0a8c:	; copy params
 17008 0000C06B 4883FE01                	cmp rsi, 1
 17009 0000C06F 740E                    	je .L_lambda_simple_params_end_0a8c
 17010 0000C071 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17011 0000C076 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17012 0000C07A 48FFC6                  	inc rsi
 17013 0000C07D EBEC                    	jmp .L_lambda_simple_params_loop_0a8c
 17014                                  .L_lambda_simple_params_end_0a8c:
 17015 0000C07F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17016 0000C082 4889C3                  	mov rbx, rax
 17017 0000C085 58                      	pop rax
 17018 0000C086 C60004                  	mov byte [rax], T_closure
 17019 0000C089 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17020 0000C08D 48C74009[9AC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a8c
 17021 0000C095 E99B050000              	jmp .L_lambda_simple_end_0a8c
 17022                                  .L_lambda_simple_code_0a8c:	; lambda-simple body
 17023 0000C09A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17024 0000C0A0 740B                    	je .L_lambda_simple_arity_check_ok_0a8c
 17025 0000C0A2 FF742410                	push qword [rsp + 8 * 2]
 17026 0000C0A6 6A01                    	push 1
 17027 0000C0A8 E9D0C30000              	jmp L_error_incorrect_arity_simple
 17028                                  .L_lambda_simple_arity_check_ok_0a8c:
 17029 0000C0AD C8000000                	enter 0, 0
 17030                                  	; preparing a tail-call
 17031 0000C0B1 48B8-                   	mov rax, L_constants + 1993
 17031 0000C0B3 [C907000000000000] 
 17032 0000C0BB 50                      	push rax
 17033 0000C0BC 6A01                    	push 1	; arg count
 17034 0000C0BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17035 0000C0C3 E8FCC30000              	call malloc
 17036 0000C0C8 50                      	push rax
 17037 0000C0C9 BF08000000              	mov rdi, 8 * 1	; new rib
 17038 0000C0CE E8F1C30000              	call malloc
 17039 0000C0D3 50                      	push rax
 17040 0000C0D4 BF48000000              	mov rdi, 8 * 9	; extended env
 17041 0000C0D9 E8E6C30000              	call malloc
 17042 0000C0DE 488B7D10                	mov rdi, ENV
 17043 0000C0E2 BE00000000              	mov rsi, 0
 17044 0000C0E7 BA01000000              	mov rdx, 1
 17045                                  .L_lambda_simple_env_loop_0a8d:	; ext_env[i + 1] <-- env[i]
 17046 0000C0EC 4883FE08                	cmp rsi, 8
 17047 0000C0F0 7410                    	je .L_lambda_simple_env_end_0a8d
 17048 0000C0F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17049 0000C0F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17050 0000C0FA 48FFC6                  	inc rsi
 17051 0000C0FD 48FFC2                  	inc rdx
 17052 0000C100 EBEA                    	jmp .L_lambda_simple_env_loop_0a8d
 17053                                  .L_lambda_simple_env_end_0a8d:
 17054 0000C102 5B                      	pop rbx
 17055 0000C103 BE00000000              	mov rsi, 0
 17056                                  .L_lambda_simple_params_loop_0a8d:	; copy params
 17057 0000C108 4883FE01                	cmp rsi, 1
 17058 0000C10C 740E                    	je .L_lambda_simple_params_end_0a8d
 17059 0000C10E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17060 0000C113 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17061 0000C117 48FFC6                  	inc rsi
 17062 0000C11A EBEC                    	jmp .L_lambda_simple_params_loop_0a8d
 17063                                  .L_lambda_simple_params_end_0a8d:
 17064 0000C11C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17065 0000C11F 4889C3                  	mov rbx, rax
 17066 0000C122 58                      	pop rax
 17067 0000C123 C60004                  	mov byte [rax], T_closure
 17068 0000C126 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17069 0000C12A 48C74009[37C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a8d
 17070 0000C132 E9A6040000              	jmp .L_lambda_simple_end_0a8d
 17071                                  .L_lambda_simple_code_0a8d:	; lambda-simple body
 17072 0000C137 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17073 0000C13D 740B                    	je .L_lambda_simple_arity_check_ok_0a8d
 17074 0000C13F FF742410                	push qword [rsp + 8 * 2]
 17075 0000C143 6A01                    	push 1
 17076 0000C145 E933C30000              	jmp L_error_incorrect_arity_simple
 17077                                  .L_lambda_simple_arity_check_ok_0a8d:
 17078 0000C14A C8000000                	enter 0, 0
 17079 0000C14E BF08000000              	mov rdi, 8*1
 17080 0000C153 E86CC30000              	call malloc
 17081 0000C158 488B5D20                	mov rbx, PARAM(0)
 17082 0000C15C 488918                  	mov qword[rax], rbx
 17083 0000C15F 48894520                	mov PARAM(0), rax
 17084 0000C163 48B8-                   	mov rax, sob_void
 17084 0000C165 [0000000000000000] 
 17085                                  
 17086 0000C16D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17087 0000C172 E84DC30000              	call malloc
 17088 0000C177 50                      	push rax
 17089 0000C178 BF08000000              	mov rdi, 8 * 1	; new rib
 17090 0000C17D E842C30000              	call malloc
 17091 0000C182 50                      	push rax
 17092 0000C183 BF50000000              	mov rdi, 8 * 10	; extended env
 17093 0000C188 E837C30000              	call malloc
 17094 0000C18D 488B7D10                	mov rdi, ENV
 17095 0000C191 BE00000000              	mov rsi, 0
 17096 0000C196 BA01000000              	mov rdx, 1
 17097                                  .L_lambda_simple_env_loop_0a8e:	; ext_env[i + 1] <-- env[i]
 17098 0000C19B 4883FE09                	cmp rsi, 9
 17099 0000C19F 7410                    	je .L_lambda_simple_env_end_0a8e
 17100 0000C1A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17101 0000C1A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17102 0000C1A9 48FFC6                  	inc rsi
 17103 0000C1AC 48FFC2                  	inc rdx
 17104 0000C1AF EBEA                    	jmp .L_lambda_simple_env_loop_0a8e
 17105                                  .L_lambda_simple_env_end_0a8e:
 17106 0000C1B1 5B                      	pop rbx
 17107 0000C1B2 BE00000000              	mov rsi, 0
 17108                                  .L_lambda_simple_params_loop_0a8e:	; copy params
 17109 0000C1B7 4883FE01                	cmp rsi, 1
 17110 0000C1BB 740E                    	je .L_lambda_simple_params_end_0a8e
 17111 0000C1BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17112 0000C1C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17113 0000C1C6 48FFC6                  	inc rsi
 17114 0000C1C9 EBEC                    	jmp .L_lambda_simple_params_loop_0a8e
 17115                                  .L_lambda_simple_params_end_0a8e:
 17116 0000C1CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17117 0000C1CE 4889C3                  	mov rbx, rax
 17118 0000C1D1 58                      	pop rax
 17119 0000C1D2 C60004                  	mov byte [rax], T_closure
 17120 0000C1D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17121 0000C1D9 48C74009[E6C10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a8e
 17122 0000C1E1 E962010000              	jmp .L_lambda_simple_end_0a8e
 17123                                  .L_lambda_simple_code_0a8e:	; lambda-simple body
 17124 0000C1E6 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17125 0000C1EC 740B                    	je .L_lambda_simple_arity_check_ok_0a8e
 17126 0000C1EE FF742410                	push qword [rsp + 8 * 2]
 17127 0000C1F2 6A02                    	push 2
 17128 0000C1F4 E984C20000              	jmp L_error_incorrect_arity_simple
 17129                                  .L_lambda_simple_arity_check_ok_0a8e:
 17130 0000C1F9 C8000000                	enter 0, 0
 17131                                  	; preparing a non-tail-call
 17132 0000C1FD 488B4528                	mov rax, PARAM(1)	; param s
 17133 0000C201 50                      	push rax
 17134 0000C202 6A01                    	push 1	; arg count
 17135 0000C204 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 17136 0000C20C 803805                  	cmp byte [rax], T_undefined
 17137 0000C20F 0F8482C10000            	je L_error_fvar_undefined
 17138 0000C215 803804                  	cmp byte [rax], T_closure
 17139 0000C218 0F85FDC10000            	jne L_error_non_closure
 17140 0000C21E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17141 0000C221 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17142 0000C224 483D[02000000]          	cmp rax, sob_boolean_false
 17143 0000C22A 0F8514010000            	jne .L_or_end_00e8
 17144                                  	; preparing a non-tail-call
 17145                                  	; preparing a non-tail-call
 17146 0000C230 488B4528                	mov rax, PARAM(1)	; param s
 17147 0000C234 50                      	push rax
 17148 0000C235 6A01                    	push 1	; arg count
 17149 0000C237 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 17150 0000C23F 803805                  	cmp byte [rax], T_undefined
 17151 0000C242 0F844FC10000            	je L_error_fvar_undefined
 17152 0000C248 803804                  	cmp byte [rax], T_closure
 17153 0000C24B 0F85CAC10000            	jne L_error_non_closure
 17154 0000C251 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17155 0000C254 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17156 0000C257 50                      	push rax
 17157 0000C258 488B4520                	mov rax, PARAM(0)	; param a
 17158 0000C25C 50                      	push rax
 17159 0000C25D 6A02                    	push 2	; arg count
 17160 0000C25F 488B4510                	mov rax, ENV
 17161 0000C263 488B4008                	mov rax, qword [rax + 8 * 1]
 17162 0000C267 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin-ordering
 17163 0000C26A 803804                  	cmp byte [rax], T_closure
 17164 0000C26D 0F85A8C10000            	jne L_error_non_closure
 17165 0000C273 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17166 0000C276 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17167 0000C279 483D[02000000]          	cmp rax, sob_boolean_false
 17168 0000C27F 0F84B5000000            	je .L_if_else_0800
 17169                                  	; preparing a tail-call
 17170                                  	; preparing a non-tail-call
 17171 0000C285 488B4528                	mov rax, PARAM(1)	; param s
 17172 0000C289 50                      	push rax
 17173 0000C28A 6A01                    	push 1	; arg count
 17174 0000C28C 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 17175 0000C294 803805                  	cmp byte [rax], T_undefined
 17176 0000C297 0F84FAC00000            	je L_error_fvar_undefined
 17177 0000C29D 803804                  	cmp byte [rax], T_closure
 17178 0000C2A0 0F8575C10000            	jne L_error_non_closure
 17179 0000C2A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17180 0000C2A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17181 0000C2AC 50                      	push rax
 17182                                  	; preparing a non-tail-call
 17183 0000C2AD 488B4528                	mov rax, PARAM(1)	; param s
 17184 0000C2B1 50                      	push rax
 17185 0000C2B2 6A01                    	push 1	; arg count
 17186 0000C2B4 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 17187 0000C2BC 803805                  	cmp byte [rax], T_undefined
 17188 0000C2BF 0F84D2C00000            	je L_error_fvar_undefined
 17189 0000C2C5 803804                  	cmp byte [rax], T_closure
 17190 0000C2C8 0F854DC10000            	jne L_error_non_closure
 17191 0000C2CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17192 0000C2D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17193 0000C2D4 50                      	push rax
 17194 0000C2D5 6A02                    	push 2	; arg count
 17195 0000C2D7 488B4510                	mov rax, ENV
 17196 0000C2DB 488B00                  	mov rax, qword [rax + 8 * 0]
 17197 0000C2DE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17198 0000C2E1 488B00                  	mov rax, qword [rax]
 17199 0000C2E4 803804                  	cmp byte [rax], T_closure
 17200 0000C2E7 0F852EC10000            	jne L_error_non_closure
 17201 0000C2ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 17202 0000C2F0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17203 0000C2F3 FF7500                  	push qword[rbp]
 17204 0000C2F6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17205 0000C2F9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17206 0000C2FD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17207 0000C301 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17208 0000C305 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17209 0000C308 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17210 0000C30B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17211 0000C310 4983C103                	add r9, 3 	 ;for getting to the params
 17212 0000C314 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17213 0000C318 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17214                                  .L_tc_recycle_frame_loop_0ede:
 17215 0000C31B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17216 0000C31E 7410                    	je .L_tc_recycle_frame_done_0ede
 17217 0000C320 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17218 0000C323 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17219 0000C326 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17220 0000C32A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17221 0000C32E EBEB                    	jmp .L_tc_recycle_frame_loop_0ede
 17222                                  .L_tc_recycle_frame_done_0ede:
 17223 0000C330 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17224 0000C331 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17225 0000C335 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17226 0000C338 EB0A                    	jmp .L_if_end_0800
 17227                                  .L_if_else_0800:
 17228 0000C33A 48B8-                   	mov rax, L_constants + 2
 17228 0000C33C [0200000000000000] 
 17229                                  .L_if_end_0800:
 17230                                  .L_or_end_00e8:
 17231 0000C344 C9                      	leave
 17232 0000C345 C22000                  	ret AND_KILL_FRAME(2)
 17233                                  .L_lambda_simple_end_0a8e:	; new closure is in rax
 17234 0000C348 50                      	push rax
 17235 0000C349 488B4520                	mov rax, PARAM(0)	; param run
 17236 0000C34D 8F00                    	pop qword [rax]
 17237 0000C34F 48B8-                   	mov rax, sob_void
 17237 0000C351 [0000000000000000] 
 17238                                  
 17239 0000C359 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17240 0000C35E E861C10000              	call malloc
 17241 0000C363 50                      	push rax
 17242 0000C364 BF08000000              	mov rdi, 8 * 1	; new rib
 17243 0000C369 E856C10000              	call malloc
 17244 0000C36E 50                      	push rax
 17245 0000C36F BF50000000              	mov rdi, 8 * 10	; extended env
 17246 0000C374 E84BC10000              	call malloc
 17247 0000C379 488B7D10                	mov rdi, ENV
 17248 0000C37D BE00000000              	mov rsi, 0
 17249 0000C382 BA01000000              	mov rdx, 1
 17250                                  .L_lambda_opt_env_loop_014c:	; ext_env[i + 1] <-- env[i]
 17251 0000C387 4883FE09                	cmp rsi, 9
 17252 0000C38B 7410                    	je .L_lambda_opt_env_end_014c
 17253 0000C38D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17254 0000C391 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17255 0000C395 48FFC6                  	inc rsi
 17256 0000C398 48FFC2                  	inc rdx
 17257 0000C39B EBEA                    	jmp .L_lambda_opt_env_loop_014c
 17258                                  .L_lambda_opt_env_end_014c:
 17259 0000C39D 5B                      	pop rbx
 17260 0000C39E BE00000000              	mov rsi, 0
 17261                                  .L_lambda_opt_params_loop_014c:	; copy params
 17262 0000C3A3 4883FE01                	cmp rsi, 1
 17263 0000C3A7 740E                    	je .L_lambda_opt_params_end_014c
 17264 0000C3A9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17265 0000C3AE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17266 0000C3B2 48FFC6                  	inc rsi
 17267 0000C3B5 EBEC                    	jmp .L_lambda_opt_params_loop_014c
 17268                                  .L_lambda_opt_params_end_014c:
 17269 0000C3B7 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 17270 0000C3BA 4889C3                  	mov rbx, rax
 17271 0000C3BD 58                      	pop rax
 17272 0000C3BE C60004                  	mov byte [rax], T_closure
 17273 0000C3C1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17274 0000C3C5 48C74009[D2C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_014c
 17275 0000C3CD E907020000              	jmp .L_lambda_opt_end_014c
 17276                                  .L_lambda_opt_code_014c:	; lambda-opt body
 17277 0000C3D2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17278 0000C3D8 7411                    	je .L_lambda_opt_arity_check_exact_014c
 17279 0000C3DA 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_014c
 17280 0000C3E0 FF742410                	push qword [rsp + 8 * 2]
 17281 0000C3E4 6A01                    	push 1
 17282 0000C3E6 E9A6C00000              	jmp L_error_incorrect_arity_opt
 17283                                  .L_lambda_opt_arity_check_exact_014c:
 17284 0000C3EB 4883EC08                	sub rsp, 8
 17285 0000C3EF 488B442408              	mov rax, qword[rsp + 8 *1]
 17286 0000C3F4 48890424                	mov qword[rsp], rax  
 17287 0000C3F8 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17288 0000C3FD 4889442408              	mov qword[rsp + 8 * 1], rax
 17289 0000C402 B802000000              	mov rax, 2
 17290 0000C407 4889442410              	mov qword[rsp + 8 *2], rax
 17291 0000C40C 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 17292 0000C411 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17293 0000C416 48B8-                   	mov rax, sob_nil
 17293 0000C418 [0100000000000000] 
 17294 0000C420 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 17295 0000C425 C8000000                	enter 0, 0
 17296                                  	; preparing a tail-call
 17297 0000C429 488B4528                	mov rax, PARAM(1)	; param s
 17298 0000C42D 50                      	push rax
 17299 0000C42E 488B4520                	mov rax, PARAM(0)	; param a
 17300 0000C432 50                      	push rax
 17301 0000C433 6A02                    	push 2	; arg count
 17302 0000C435 488B4510                	mov rax, ENV
 17303 0000C439 488B00                  	mov rax, qword [rax + 8 * 0]
 17304 0000C43C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17305 0000C43F 488B00                  	mov rax, qword [rax]
 17306 0000C442 803804                  	cmp byte [rax], T_closure
 17307 0000C445 0F85D0BF0000            	jne L_error_non_closure
 17308 0000C44B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17309 0000C44E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17310 0000C451 FF7500                  	push qword[rbp]
 17311 0000C454 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17312 0000C457 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17313 0000C45B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17314 0000C45F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17315 0000C463 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17316 0000C466 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17317 0000C469 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17318 0000C46E 4983C103                	add r9, 3 	 ;for getting to the params
 17319 0000C472 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17320 0000C476 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17321                                  .L_tc_recycle_frame_loop_0ee0:
 17322 0000C479 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17323 0000C47C 7410                    	je .L_tc_recycle_frame_done_0ee0
 17324 0000C47E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17325 0000C481 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17326 0000C484 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17327 0000C488 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17328 0000C48C EBEB                    	jmp .L_tc_recycle_frame_loop_0ee0
 17329                                  .L_tc_recycle_frame_done_0ee0:
 17330 0000C48E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17331 0000C48F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17332 0000C493 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17333 0000C496 C9                      	leave
 17334 0000C497 C22000                  	ret AND_KILL_FRAME(2)
 17335 0000C49A E93A010000              	jmp .L_lambda_opt_end_014c	; new closure is in rax
 17336                                  .L_lambda_opt_arity_check_more_014c:
 17337 0000C49F 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 17338 0000C4A4 49B9-                   	mov r9, sob_nil
 17338 0000C4A6 [0100000000000000] 
 17339 0000C4AE 4889E3                  	mov rbx, rsp 
 17340 0000C4B1 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 17341 0000C4B5 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 17342 0000C4B8 49C1E003                	shl r8, 3
 17343 0000C4BC 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 17344 0000C4BF 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 17345                                  .L_lambda_opt_stack_shrink_loop_014c:
 17346 0000C4C4 4983F801                	cmp r8, 1
 17347 0000C4C8 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_014c
 17348 0000C4CA BF11000000              	mov rdi, 1+8+8 ;for pair
 17349 0000C4CF E8F0BF0000              	call malloc;to create the pair in the stack
 17350 0000C4D4 C60021                  	mov byte [rax], T_pair ; to make it a pair
 17351 0000C4D7 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 17352 0000C4DA 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 17353 0000C4DE 4C894809                 	mov qword[rax+1+8],r9
 17354 0000C4E2 4989C1                  	mov r9, rax ;for the recursion 
 17355 0000C4E5 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 17356 0000C4E8 4883EB08                	sub rbx, 8 ;to get the next param to copy
 17357 0000C4EC EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_014c
 17358                                  .L_lambda_opt_stack_shrink_loop_exit_014c:
 17359 0000C4EE 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 17360 0000C4F3 4883E902                	sub rcx, 2
 17361 0000C4F7 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 17362 0000C4FB 4801CC                  	add rsp, rcx ;shrinking the stack
 17363 0000C4FE 4889E0                  	mov rax, rsp
 17364 0000C501 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 17365 0000C504 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 17366 0000C508 49FFC8                  	dec r8 ;we start with param 0, not 1 
 17367 0000C50B 4883C018                	add rax, 3 * 8;now rax is param 0
 17368 0000C50F 49C1E003                	shl r8, 3;convert to byte
 17369 0000C513 4C01C0                  	add rax, r8;now rax is the top of the stack
 17370 0000C516 4C8908                  	mov qword[rax], r9;puting the list at the top
 17371 0000C519 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 17372 0000C51D 4889E3                  	mov rbx, rsp 
 17373 0000C520 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 17374 0000C523 41BA01000000            	mov r10, 1;r10 is the not opt params length
 17375 0000C529 49FFCA                  	dec r10 
 17376 0000C52C 49C1E203                	shl r10, 3;to get bytes
 17377 0000C530 4883C318                	add rbx, 3*8;rbx is the first param
 17378 0000C534 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 17379 0000C537 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 17380 0000C53A 4C8900                  	mov qword[rax], r8
 17381 0000C53D 4883E808                	sub rax, 8
 17382 0000C541 4883EB08                	sub rbx, 8
 17383 0000C545 4889E0                  	mov rax, rsp
 17384 0000C548 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 17385 0000C54B 48C744241002000000      	mov qword [rsp+2*8], 2
 17386 0000C554 488B5808                	mov rbx, qword[rax + 8 *1]
 17387 0000C558 48895C2408              	mov qword [rsp + 1*8] ,rbx
 17388 0000C55D 488B18                  	mov rbx, qword[rax]
 17389 0000C560 48891C24                	mov qword [rsp], rbx
 17390 0000C564 C8000000                	enter 0, 0
 17391                                  	; preparing a tail-call
 17392 0000C568 488B4528                	mov rax, PARAM(1)	; param s
 17393 0000C56C 50                      	push rax
 17394 0000C56D 488B4520                	mov rax, PARAM(0)	; param a
 17395 0000C571 50                      	push rax
 17396 0000C572 6A02                    	push 2	; arg count
 17397 0000C574 488B4510                	mov rax, ENV
 17398 0000C578 488B00                  	mov rax, qword [rax + 8 * 0]
 17399 0000C57B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 17400 0000C57E 488B00                  	mov rax, qword [rax]
 17401 0000C581 803804                  	cmp byte [rax], T_closure
 17402 0000C584 0F8591BE0000            	jne L_error_non_closure
 17403 0000C58A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17404 0000C58D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17405 0000C590 FF7500                  	push qword[rbp]
 17406 0000C593 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17407 0000C596 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17408 0000C59A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17409 0000C59E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17410 0000C5A2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17411 0000C5A5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17412 0000C5A8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17413 0000C5AD 4983C103                	add r9, 3 	 ;for getting to the params
 17414 0000C5B1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17415 0000C5B5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17416                                  .L_tc_recycle_frame_loop_0edf:
 17417 0000C5B8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17418 0000C5BB 7410                    	je .L_tc_recycle_frame_done_0edf
 17419 0000C5BD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17420 0000C5C0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17421 0000C5C3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17422 0000C5C7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17423 0000C5CB EBEB                    	jmp .L_tc_recycle_frame_loop_0edf
 17424                                  .L_tc_recycle_frame_done_0edf:
 17425 0000C5CD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17426 0000C5CE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17427 0000C5D2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17428 0000C5D5 C9                      	leave
 17429 0000C5D6 C22000                  	ret AND_KILL_FRAME(2)
 17430                                  .L_lambda_opt_end_014c:	; new closure is in rax
 17431 0000C5D9 C9                      	leave
 17432 0000C5DA C21800                  	ret AND_KILL_FRAME(1)
 17433                                  .L_lambda_simple_end_0a8d:	; new closure is in rax
 17434 0000C5DD 803804                  	cmp byte [rax], T_closure
 17435 0000C5E0 0F8535BE0000            	jne L_error_non_closure
 17436 0000C5E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17437 0000C5E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17438 0000C5EC FF7500                  	push qword[rbp]
 17439 0000C5EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17440 0000C5F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17441 0000C5F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17442 0000C5FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17443 0000C5FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17444 0000C601 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17445 0000C604 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17446 0000C609 4983C103                	add r9, 3 	 ;for getting to the params
 17447 0000C60D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17448 0000C611 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17449                                  .L_tc_recycle_frame_loop_0ee1:
 17450 0000C614 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17451 0000C617 7410                    	je .L_tc_recycle_frame_done_0ee1
 17452 0000C619 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17453 0000C61C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17454 0000C61F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17455 0000C623 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17456 0000C627 EBEB                    	jmp .L_tc_recycle_frame_loop_0ee1
 17457                                  .L_tc_recycle_frame_done_0ee1:
 17458 0000C629 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17459 0000C62A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17460 0000C62E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17461 0000C631 C9                      	leave
 17462 0000C632 C21800                  	ret AND_KILL_FRAME(1)
 17463                                  .L_lambda_simple_end_0a8c:	; new closure is in rax
 17464 0000C635 50                      	push rax
 17465 0000C636 6A01                    	push 1	; arg count
 17466 0000C638 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17467 0000C63D E882BE0000              	call malloc
 17468 0000C642 50                      	push rax
 17469 0000C643 BF08000000              	mov rdi, 8 * 1	; new rib
 17470 0000C648 E877BE0000              	call malloc
 17471 0000C64D 50                      	push rax
 17472 0000C64E BF40000000              	mov rdi, 8 * 8	; extended env
 17473 0000C653 E86CBE0000              	call malloc
 17474 0000C658 488B7D10                	mov rdi, ENV
 17475 0000C65C BE00000000              	mov rsi, 0
 17476 0000C661 BA01000000              	mov rdx, 1
 17477                                  .L_lambda_simple_env_loop_0a8f:	; ext_env[i + 1] <-- env[i]
 17478 0000C666 4883FE07                	cmp rsi, 7
 17479 0000C66A 7410                    	je .L_lambda_simple_env_end_0a8f
 17480 0000C66C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17481 0000C670 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17482 0000C674 48FFC6                  	inc rsi
 17483 0000C677 48FFC2                  	inc rdx
 17484 0000C67A EBEA                    	jmp .L_lambda_simple_env_loop_0a8f
 17485                                  .L_lambda_simple_env_end_0a8f:
 17486 0000C67C 5B                      	pop rbx
 17487 0000C67D BE00000000              	mov rsi, 0
 17488                                  .L_lambda_simple_params_loop_0a8f:	; copy params
 17489 0000C682 4883FE01                	cmp rsi, 1
 17490 0000C686 740E                    	je .L_lambda_simple_params_end_0a8f
 17491 0000C688 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17492 0000C68D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17493 0000C691 48FFC6                  	inc rsi
 17494 0000C694 EBEC                    	jmp .L_lambda_simple_params_loop_0a8f
 17495                                  .L_lambda_simple_params_end_0a8f:
 17496 0000C696 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17497 0000C699 4889C3                  	mov rbx, rax
 17498 0000C69C 58                      	pop rax
 17499 0000C69D C60004                  	mov byte [rax], T_closure
 17500 0000C6A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17501 0000C6A4 48C74009[B1C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a8f
 17502 0000C6AC E919010000              	jmp .L_lambda_simple_end_0a8f
 17503                                  .L_lambda_simple_code_0a8f:	; lambda-simple body
 17504 0000C6B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17505 0000C6B7 740B                    	je .L_lambda_simple_arity_check_ok_0a8f
 17506 0000C6B9 FF742410                	push qword [rsp + 8 * 2]
 17507 0000C6BD 6A01                    	push 1
 17508 0000C6BF E9B9BD0000              	jmp L_error_incorrect_arity_simple
 17509                                  .L_lambda_simple_arity_check_ok_0a8f:
 17510 0000C6C4 C8000000                	enter 0, 0
 17511                                  	; preparing a non-tail-call
 17512 0000C6C8 488B4510                	mov rax, ENV
 17513 0000C6CC 488B4020                	mov rax, qword [rax + 8 * 4]
 17514 0000C6D0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<?
 17515 0000C6D3 50                      	push rax
 17516 0000C6D4 6A01                    	push 1	; arg count
 17517 0000C6D6 488B4520                	mov rax, PARAM(0)	; param make-run
 17518 0000C6DA 803804                  	cmp byte [rax], T_closure
 17519 0000C6DD 0F8538BD0000            	jne L_error_non_closure
 17520 0000C6E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17521 0000C6E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17522 0000C6E9 48890425[7E0F0000]      	mov qword [free_var_4], rax
 17523 0000C6F1 48B8-                   	mov rax, sob_void
 17523 0000C6F3 [0000000000000000] 
 17524                                  
 17525                                  	; preparing a non-tail-call
 17526 0000C6FB 488B4510                	mov rax, ENV
 17527 0000C6FF 488B00                  	mov rax, qword [rax + 8 * 0]
 17528 0000C702 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin<=?
 17529 0000C705 50                      	push rax
 17530 0000C706 6A01                    	push 1	; arg count
 17531 0000C708 488B4520                	mov rax, PARAM(0)	; param make-run
 17532 0000C70C 803804                  	cmp byte [rax], T_closure
 17533 0000C70F 0F8506BD0000            	jne L_error_non_closure
 17534 0000C715 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17535 0000C718 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17536 0000C71B 48890425[8F0F0000]      	mov qword [free_var_5], rax
 17537 0000C723 48B8-                   	mov rax, sob_void
 17537 0000C725 [0000000000000000] 
 17538                                  
 17539                                  	; preparing a non-tail-call
 17540 0000C72D 488B4510                	mov rax, ENV
 17541 0000C731 488B4008                	mov rax, qword [rax + 8 * 1]
 17542 0000C735 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>?
 17543 0000C738 50                      	push rax
 17544 0000C739 6A01                    	push 1	; arg count
 17545 0000C73B 488B4520                	mov rax, PARAM(0)	; param make-run
 17546 0000C73F 803804                  	cmp byte [rax], T_closure
 17547 0000C742 0F85D3BC0000            	jne L_error_non_closure
 17548 0000C748 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17549 0000C74B FF5009                  	call SOB_CLOSURE_CODE(rax)
 17550 0000C74E 48890425[B10F0000]      	mov qword [free_var_7], rax
 17551 0000C756 48B8-                   	mov rax, sob_void
 17551 0000C758 [0000000000000000] 
 17552                                  
 17553                                  	; preparing a non-tail-call
 17554 0000C760 488B4510                	mov rax, ENV
 17555 0000C764 488B4010                	mov rax, qword [rax + 8 * 2]
 17556 0000C768 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin>=?
 17557 0000C76B 50                      	push rax
 17558 0000C76C 6A01                    	push 1	; arg count
 17559 0000C76E 488B4520                	mov rax, PARAM(0)	; param make-run
 17560 0000C772 803804                  	cmp byte [rax], T_closure
 17561 0000C775 0F85A0BC0000            	jne L_error_non_closure
 17562 0000C77B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17563 0000C77E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17564 0000C781 48890425[C20F0000]      	mov qword [free_var_8], rax
 17565 0000C789 48B8-                   	mov rax, sob_void
 17565 0000C78B [0000000000000000] 
 17566                                  
 17567                                  	; preparing a non-tail-call
 17568 0000C793 488B4510                	mov rax, ENV
 17569 0000C797 488B4018                	mov rax, qword [rax + 8 * 3]
 17570 0000C79B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var bin=?
 17571 0000C79E 50                      	push rax
 17572 0000C79F 6A01                    	push 1	; arg count
 17573 0000C7A1 488B4520                	mov rax, PARAM(0)	; param make-run
 17574 0000C7A5 803804                  	cmp byte [rax], T_closure
 17575 0000C7A8 0F856DBC0000            	jne L_error_non_closure
 17576 0000C7AE FF7001                  	push SOB_CLOSURE_ENV(rax)
 17577 0000C7B1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17578 0000C7B4 48890425[A00F0000]      	mov qword [free_var_6], rax
 17579 0000C7BC 48B8-                   	mov rax, sob_void
 17579 0000C7BE [0000000000000000] 
 17580 0000C7C6 C9                      	leave
 17581 0000C7C7 C21800                  	ret AND_KILL_FRAME(1)
 17582                                  .L_lambda_simple_end_0a8f:	; new closure is in rax
 17583 0000C7CA 803804                  	cmp byte [rax], T_closure
 17584 0000C7CD 0F8548BC0000            	jne L_error_non_closure
 17585 0000C7D3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17586 0000C7D6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17587 0000C7D9 FF7500                  	push qword[rbp]
 17588 0000C7DC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17589 0000C7DF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17590 0000C7E3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17591 0000C7E7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17592 0000C7EB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17593 0000C7EE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17594 0000C7F1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17595 0000C7F6 4983C103                	add r9, 3 	 ;for getting to the params
 17596 0000C7FA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17597 0000C7FE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17598                                  .L_tc_recycle_frame_loop_0ee2:
 17599 0000C801 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17600 0000C804 7410                    	je .L_tc_recycle_frame_done_0ee2
 17601 0000C806 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17602 0000C809 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17603 0000C80C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17604 0000C810 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17605 0000C814 EBEB                    	jmp .L_tc_recycle_frame_loop_0ee2
 17606                                  .L_tc_recycle_frame_done_0ee2:
 17607 0000C816 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17608 0000C817 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17609 0000C81B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17610 0000C81E C9                      	leave
 17611 0000C81F C21800                  	ret AND_KILL_FRAME(1)
 17612                                  .L_lambda_simple_end_0a8b:	; new closure is in rax
 17613 0000C822 803804                  	cmp byte [rax], T_closure
 17614 0000C825 0F85F0BB0000            	jne L_error_non_closure
 17615 0000C82B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17616 0000C82E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17617 0000C831 FF7500                  	push qword[rbp]
 17618 0000C834 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17619 0000C837 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17620 0000C83B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17621 0000C83F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17622 0000C843 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17623 0000C846 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17624 0000C849 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17625 0000C84E 4983C103                	add r9, 3 	 ;for getting to the params
 17626 0000C852 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17627 0000C856 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17628                                  .L_tc_recycle_frame_loop_0ee3:
 17629 0000C859 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17630 0000C85C 7410                    	je .L_tc_recycle_frame_done_0ee3
 17631 0000C85E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17632 0000C861 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17633 0000C864 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17634 0000C868 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17635 0000C86C EBEB                    	jmp .L_tc_recycle_frame_loop_0ee3
 17636                                  .L_tc_recycle_frame_done_0ee3:
 17637 0000C86E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17638 0000C86F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17639 0000C873 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17640 0000C876 C9                      	leave
 17641 0000C877 C21800                  	ret AND_KILL_FRAME(1)
 17642                                  .L_lambda_simple_end_0a89:	; new closure is in rax
 17643 0000C87A 803804                  	cmp byte [rax], T_closure
 17644 0000C87D 0F8598BB0000            	jne L_error_non_closure
 17645 0000C883 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17646 0000C886 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17647 0000C889 FF7500                  	push qword[rbp]
 17648 0000C88C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17649 0000C88F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17650 0000C893 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17651 0000C897 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17652 0000C89B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17653 0000C89E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17654 0000C8A1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17655 0000C8A6 4983C103                	add r9, 3 	 ;for getting to the params
 17656 0000C8AA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17657 0000C8AE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17658                                  .L_tc_recycle_frame_loop_0ee4:
 17659 0000C8B1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17660 0000C8B4 7410                    	je .L_tc_recycle_frame_done_0ee4
 17661 0000C8B6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17662 0000C8B9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17663 0000C8BC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17664 0000C8C0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17665 0000C8C4 EBEB                    	jmp .L_tc_recycle_frame_loop_0ee4
 17666                                  .L_tc_recycle_frame_done_0ee4:
 17667 0000C8C6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17668 0000C8C7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17669 0000C8CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17670 0000C8CE C9                      	leave
 17671 0000C8CF C21800                  	ret AND_KILL_FRAME(1)
 17672                                  .L_lambda_simple_end_0a87:	; new closure is in rax
 17673 0000C8D2 803804                  	cmp byte [rax], T_closure
 17674 0000C8D5 0F8540BB0000            	jne L_error_non_closure
 17675 0000C8DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17676 0000C8DE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17677 0000C8E1 FF7500                  	push qword[rbp]
 17678 0000C8E4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17679 0000C8E7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17680 0000C8EB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17681 0000C8EF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17682 0000C8F3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17683 0000C8F6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17684 0000C8F9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17685 0000C8FE 4983C103                	add r9, 3 	 ;for getting to the params
 17686 0000C902 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17687 0000C906 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17688                                  .L_tc_recycle_frame_loop_0ee5:
 17689 0000C909 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17690 0000C90C 7410                    	je .L_tc_recycle_frame_done_0ee5
 17691 0000C90E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17692 0000C911 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17693 0000C914 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17694 0000C918 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17695 0000C91C EBEB                    	jmp .L_tc_recycle_frame_loop_0ee5
 17696                                  .L_tc_recycle_frame_done_0ee5:
 17697 0000C91E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17698 0000C91F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17699 0000C923 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17700 0000C926 C9                      	leave
 17701 0000C927 C21800                  	ret AND_KILL_FRAME(1)
 17702                                  .L_lambda_simple_end_0a85:	; new closure is in rax
 17703 0000C92A 803804                  	cmp byte [rax], T_closure
 17704 0000C92D 0F85E8BA0000            	jne L_error_non_closure
 17705 0000C933 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17706 0000C936 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17707 0000C939 FF7500                  	push qword[rbp]
 17708 0000C93C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17709 0000C93F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17710 0000C943 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17711 0000C947 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17712 0000C94B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17713 0000C94E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17714 0000C951 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17715 0000C956 4983C103                	add r9, 3 	 ;for getting to the params
 17716 0000C95A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17717 0000C95E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17718                                  .L_tc_recycle_frame_loop_0ee6:
 17719 0000C961 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17720 0000C964 7410                    	je .L_tc_recycle_frame_done_0ee6
 17721 0000C966 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17722 0000C969 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17723 0000C96C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17724 0000C970 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17725 0000C974 EBEB                    	jmp .L_tc_recycle_frame_loop_0ee6
 17726                                  .L_tc_recycle_frame_done_0ee6:
 17727 0000C976 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17728 0000C977 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17729 0000C97B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17730 0000C97E C9                      	leave
 17731 0000C97F C21800                  	ret AND_KILL_FRAME(1)
 17732                                  .L_lambda_simple_end_0a84:	; new closure is in rax
 17733 0000C982 803804                  	cmp byte [rax], T_closure
 17734 0000C985 0F8590BA0000            	jne L_error_non_closure
 17735 0000C98B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17736 0000C98E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17737 0000C991 FF7500                  	push qword[rbp]
 17738 0000C994 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17739 0000C997 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17740 0000C99B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17741 0000C99F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17742 0000C9A3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17743 0000C9A6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17744 0000C9A9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17745 0000C9AE 4983C103                	add r9, 3 	 ;for getting to the params
 17746 0000C9B2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17747 0000C9B6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17748                                  .L_tc_recycle_frame_loop_0ee7:
 17749 0000C9B9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17750 0000C9BC 7410                    	je .L_tc_recycle_frame_done_0ee7
 17751 0000C9BE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17752 0000C9C1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17753 0000C9C4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17754 0000C9C8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17755 0000C9CC EBEB                    	jmp .L_tc_recycle_frame_loop_0ee7
 17756                                  .L_tc_recycle_frame_done_0ee7:
 17757 0000C9CE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17758 0000C9CF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17759 0000C9D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17760 0000C9D6 C9                      	leave
 17761 0000C9D7 C21800                  	ret AND_KILL_FRAME(1)
 17762                                  .L_lambda_simple_end_0a83:	; new closure is in rax
 17763 0000C9DA 803804                  	cmp byte [rax], T_closure
 17764 0000C9DD 0F8538BA0000            	jne L_error_non_closure
 17765 0000C9E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17766 0000C9E6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17767 0000C9E9 FF7500                  	push qword[rbp]
 17768 0000C9EC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17769 0000C9EF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17770 0000C9F3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17771 0000C9F7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17772 0000C9FB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17773 0000C9FE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17774 0000CA01 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17775 0000CA06 4983C103                	add r9, 3 	 ;for getting to the params
 17776 0000CA0A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17777 0000CA0E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17778                                  .L_tc_recycle_frame_loop_0ee8:
 17779 0000CA11 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17780 0000CA14 7410                    	je .L_tc_recycle_frame_done_0ee8
 17781 0000CA16 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17782 0000CA19 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17783 0000CA1C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17784 0000CA20 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17785 0000CA24 EBEB                    	jmp .L_tc_recycle_frame_loop_0ee8
 17786                                  .L_tc_recycle_frame_done_0ee8:
 17787 0000CA26 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17788 0000CA27 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17789 0000CA2B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17790 0000CA2E C9                      	leave
 17791 0000CA2F C21800                  	ret AND_KILL_FRAME(1)
 17792                                  .L_lambda_simple_end_0a80:	; new closure is in rax
 17793 0000CA32 803804                  	cmp byte [rax], T_closure
 17794 0000CA35 0F85E0B90000            	jne L_error_non_closure
 17795 0000CA3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 17796 0000CA3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17797                                  
 17798 0000CA41 4889C7                  	mov rdi, rax
 17799 0000CA44 E8D0BC0000              	call print_sexpr_if_not_void
 17800 0000CA49 48B8-                   	mov rax, L_constants + 0
 17800 0000CA4B [0000000000000000] 
 17801 0000CA53 48890425[24140000]      	mov qword [free_var_74], rax
 17802 0000CA5B 48B8-                   	mov rax, sob_void
 17802 0000CA5D [0000000000000000] 
 17803                                  
 17804 0000CA65 4889C7                  	mov rdi, rax
 17805 0000CA68 E8ACBC0000              	call print_sexpr_if_not_void
 17806 0000CA6D 48B8-                   	mov rax, L_constants + 0
 17806 0000CA6F [0000000000000000] 
 17807 0000CA77 48890425[13140000]      	mov qword [free_var_73], rax
 17808 0000CA7F 48B8-                   	mov rax, sob_void
 17808 0000CA81 [0000000000000000] 
 17809                                  
 17810 0000CA89 4889C7                  	mov rdi, rax
 17811 0000CA8C E888BC0000              	call print_sexpr_if_not_void
 17812 0000CA91 48B8-                   	mov rax, L_constants + 0
 17812 0000CA93 [0000000000000000] 
 17813 0000CA9B 48890425[35140000]      	mov qword [free_var_75], rax
 17814 0000CAA3 48B8-                   	mov rax, sob_void
 17814 0000CAA5 [0000000000000000] 
 17815                                  
 17816 0000CAAD 4889C7                  	mov rdi, rax
 17817 0000CAB0 E864BC0000              	call print_sexpr_if_not_void
 17818 0000CAB5 48B8-                   	mov rax, L_constants + 0
 17818 0000CAB7 [0000000000000000] 
 17819 0000CABF 48890425[57140000]      	mov qword [free_var_77], rax
 17820 0000CAC7 48B8-                   	mov rax, sob_void
 17820 0000CAC9 [0000000000000000] 
 17821                                  
 17822 0000CAD1 4889C7                  	mov rdi, rax
 17823 0000CAD4 E840BC0000              	call print_sexpr_if_not_void
 17824 0000CAD9 48B8-                   	mov rax, L_constants + 0
 17824 0000CADB [0000000000000000] 
 17825 0000CAE3 48890425[46140000]      	mov qword [free_var_76], rax
 17826 0000CAEB 48B8-                   	mov rax, sob_void
 17826 0000CAED [0000000000000000] 
 17827                                  
 17828 0000CAF5 4889C7                  	mov rdi, rax
 17829 0000CAF8 E81CBC0000              	call print_sexpr_if_not_void
 17830                                  	; preparing a non-tail-call
 17831 0000CAFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17832 0000CB02 E8BDB90000              	call malloc
 17833 0000CB07 50                      	push rax
 17834 0000CB08 BF00000000              	mov rdi, 8 * 0	; new rib
 17835 0000CB0D E8B2B90000              	call malloc
 17836 0000CB12 50                      	push rax
 17837 0000CB13 BF08000000              	mov rdi, 8 * 1	; extended env
 17838 0000CB18 E8A7B90000              	call malloc
 17839 0000CB1D 488B7D10                	mov rdi, ENV
 17840 0000CB21 BE00000000              	mov rsi, 0
 17841 0000CB26 BA01000000              	mov rdx, 1
 17842                                  .L_lambda_simple_env_loop_0a90:	; ext_env[i + 1] <-- env[i]
 17843 0000CB2B 4883FE00                	cmp rsi, 0
 17844 0000CB2F 7410                    	je .L_lambda_simple_env_end_0a90
 17845 0000CB31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17846 0000CB35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17847 0000CB39 48FFC6                  	inc rsi
 17848 0000CB3C 48FFC2                  	inc rdx
 17849 0000CB3F EBEA                    	jmp .L_lambda_simple_env_loop_0a90
 17850                                  .L_lambda_simple_env_end_0a90:
 17851 0000CB41 5B                      	pop rbx
 17852 0000CB42 BE00000000              	mov rsi, 0
 17853                                  .L_lambda_simple_params_loop_0a90:	; copy params
 17854 0000CB47 4883FE00                	cmp rsi, 0
 17855 0000CB4B 740E                    	je .L_lambda_simple_params_end_0a90
 17856 0000CB4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17857 0000CB52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17858 0000CB56 48FFC6                  	inc rsi
 17859 0000CB59 EBEC                    	jmp .L_lambda_simple_params_loop_0a90
 17860                                  .L_lambda_simple_params_end_0a90:
 17861 0000CB5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17862 0000CB5E 4889C3                  	mov rbx, rax
 17863 0000CB61 58                      	pop rax
 17864 0000CB62 C60004                  	mov byte [rax], T_closure
 17865 0000CB65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17866 0000CB69 48C74009[76CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a90
 17867 0000CB71 E901030000              	jmp .L_lambda_simple_end_0a90
 17868                                  .L_lambda_simple_code_0a90:	; lambda-simple body
 17869 0000CB76 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17870 0000CB7C 740B                    	je .L_lambda_simple_arity_check_ok_0a90
 17871 0000CB7E FF742410                	push qword [rsp + 8 * 2]
 17872 0000CB82 6A01                    	push 1
 17873 0000CB84 E9F4B80000              	jmp L_error_incorrect_arity_simple
 17874                                  .L_lambda_simple_arity_check_ok_0a90:
 17875 0000CB89 C8000000                	enter 0, 0
 17876 0000CB8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17877 0000CB92 E82DB90000              	call malloc
 17878 0000CB97 50                      	push rax
 17879 0000CB98 BF08000000              	mov rdi, 8 * 1	; new rib
 17880 0000CB9D E822B90000              	call malloc
 17881 0000CBA2 50                      	push rax
 17882 0000CBA3 BF10000000              	mov rdi, 8 * 2	; extended env
 17883 0000CBA8 E817B90000              	call malloc
 17884 0000CBAD 488B7D10                	mov rdi, ENV
 17885 0000CBB1 BE00000000              	mov rsi, 0
 17886 0000CBB6 BA01000000              	mov rdx, 1
 17887                                  .L_lambda_opt_env_loop_014d:	; ext_env[i + 1] <-- env[i]
 17888 0000CBBB 4883FE01                	cmp rsi, 1
 17889 0000CBBF 7410                    	je .L_lambda_opt_env_end_014d
 17890 0000CBC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17891 0000CBC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17892 0000CBC9 48FFC6                  	inc rsi
 17893 0000CBCC 48FFC2                  	inc rdx
 17894 0000CBCF EBEA                    	jmp .L_lambda_opt_env_loop_014d
 17895                                  .L_lambda_opt_env_end_014d:
 17896 0000CBD1 5B                      	pop rbx
 17897 0000CBD2 BE00000000              	mov rsi, 0
 17898                                  .L_lambda_opt_params_loop_014d:	; copy params
 17899 0000CBD7 4883FE01                	cmp rsi, 1
 17900 0000CBDB 740E                    	je .L_lambda_opt_params_end_014d
 17901 0000CBDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17902 0000CBE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17903 0000CBE6 48FFC6                  	inc rsi
 17904 0000CBE9 EBEC                    	jmp .L_lambda_opt_params_loop_014d
 17905                                  .L_lambda_opt_params_end_014d:
 17906 0000CBEB 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 17907 0000CBEE 4889C3                  	mov rbx, rax
 17908 0000CBF1 58                      	pop rax
 17909 0000CBF2 C60004                  	mov byte [rax], T_closure
 17910 0000CBF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17911 0000CBF9 48C74009[06CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_014d
 17912 0000CC01 E96D020000              	jmp .L_lambda_opt_end_014d
 17913                                  .L_lambda_opt_code_014d:	; lambda-opt body
 17914 0000CC06 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17915 0000CC0C 7411                    	je .L_lambda_opt_arity_check_exact_014d
 17916 0000CC0E 0F8FF4000000            	jg .L_lambda_opt_arity_check_more_014d
 17917 0000CC14 FF742410                	push qword [rsp + 8 * 2]
 17918 0000CC18 6A00                    	push 0
 17919 0000CC1A E972B80000              	jmp L_error_incorrect_arity_opt
 17920                                  .L_lambda_opt_arity_check_exact_014d:
 17921 0000CC1F 4883EC08                	sub rsp, 8
 17922 0000CC23 488B442408              	mov rax, qword[rsp + 8 *1]
 17923 0000CC28 48890424                	mov qword[rsp], rax  
 17924 0000CC2C 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 17925 0000CC31 4889442408              	mov qword[rsp + 8 * 1], rax
 17926 0000CC36 B801000000              	mov rax, 1
 17927 0000CC3B 4889442410              	mov qword[rsp + 8 *2], rax
 17928 0000CC40 48B8-                   	mov rax, sob_nil
 17928 0000CC42 [0100000000000000] 
 17929 0000CC4A 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 17930 0000CC4F C8000000                	enter 0, 0
 17931                                  	; preparing a tail-call
 17932                                  	; preparing a non-tail-call
 17933 0000CC53 488B4520                	mov rax, PARAM(0)	; param s
 17934 0000CC57 50                      	push rax
 17935 0000CC58 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 17936 0000CC60 803805                  	cmp byte [rax], T_undefined
 17937 0000CC63 0F842EB70000            	je L_error_fvar_undefined
 17938 0000CC69 50                      	push rax
 17939 0000CC6A 6A02                    	push 2	; arg count
 17940 0000CC6C 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 17941 0000CC74 803805                  	cmp byte [rax], T_undefined
 17942 0000CC77 0F841AB70000            	je L_error_fvar_undefined
 17943 0000CC7D 803804                  	cmp byte [rax], T_closure
 17944 0000CC80 0F8595B70000            	jne L_error_non_closure
 17945 0000CC86 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17946 0000CC89 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17947 0000CC8C 50                      	push rax
 17948 0000CC8D 488B4510                	mov rax, ENV
 17949 0000CC91 488B00                  	mov rax, qword [rax + 8 * 0]
 17950 0000CC94 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 17951 0000CC97 50                      	push rax
 17952 0000CC98 6A02                    	push 2	; arg count
 17953 0000CC9A 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 17954 0000CCA2 803805                  	cmp byte [rax], T_undefined
 17955 0000CCA5 0F84ECB60000            	je L_error_fvar_undefined
 17956 0000CCAB 803804                  	cmp byte [rax], T_closure
 17957 0000CCAE 0F8567B70000            	jne L_error_non_closure
 17958 0000CCB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17959 0000CCB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 17960 0000CCBA FF7500                  	push qword[rbp]
 17961 0000CCBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 17962 0000CCC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 17963 0000CCC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 17964 0000CCC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 17965 0000CCCC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 17966 0000CCCF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 17967 0000CCD2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 17968 0000CCD7 4983C103                	add r9, 3 	 ;for getting to the params
 17969 0000CCDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 17970 0000CCDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 17971                                  .L_tc_recycle_frame_loop_0eea:
 17972 0000CCE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 17973 0000CCE5 7410                    	je .L_tc_recycle_frame_done_0eea
 17974 0000CCE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 17975 0000CCEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 17976 0000CCED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 17977 0000CCF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 17978 0000CCF5 EBEB                    	jmp .L_tc_recycle_frame_loop_0eea
 17979                                  .L_tc_recycle_frame_done_0eea:
 17980 0000CCF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 17981 0000CCF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 17982 0000CCFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17983 0000CCFF C9                      	leave
 17984 0000CD00 C21800                  	ret AND_KILL_FRAME(1)
 17985 0000CD03 E96B010000              	jmp .L_lambda_opt_end_014d	; new closure is in rax
 17986                                  .L_lambda_opt_arity_check_more_014d:
 17987 0000CD08 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 17988 0000CD0D 49B9-                   	mov r9, sob_nil
 17988 0000CD0F [0100000000000000] 
 17989 0000CD17 4889E3                  	mov rbx, rsp 
 17990 0000CD1A 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 17991 0000CD1E 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 17992 0000CD21 49C1E003                	shl r8, 3
 17993 0000CD25 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 17994 0000CD28 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 17995                                  .L_lambda_opt_stack_shrink_loop_014d:
 17996 0000CD2D 4983F800                	cmp r8, 0
 17997 0000CD31 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_014d
 17998 0000CD33 BF11000000              	mov rdi, 1+8+8 ;for pair
 17999 0000CD38 E887B70000              	call malloc;to create the pair in the stack
 18000 0000CD3D C60021                  	mov byte [rax], T_pair ; to make it a pair
 18001 0000CD40 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 18002 0000CD43 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 18003 0000CD47 4C894809                 	mov qword[rax+1+8],r9
 18004 0000CD4B 4989C1                  	mov r9, rax ;for the recursion 
 18005 0000CD4E 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 18006 0000CD51 4883EB08                	sub rbx, 8 ;to get the next param to copy
 18007 0000CD55 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_014d
 18008                                  .L_lambda_opt_stack_shrink_loop_exit_014d:
 18009 0000CD57 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 18010 0000CD5C 4883E901                	sub rcx, 1
 18011 0000CD60 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 18012 0000CD64 4801CC                  	add rsp, rcx ;shrinking the stack
 18013 0000CD67 4889E0                  	mov rax, rsp
 18014 0000CD6A 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 18015 0000CD6D 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 18016 0000CD71 49FFC8                  	dec r8 ;we start with param 0, not 1 
 18017 0000CD74 4883C018                	add rax, 3 * 8;now rax is param 0
 18018 0000CD78 49C1E003                	shl r8, 3;convert to byte
 18019 0000CD7C 4C01C0                  	add rax, r8;now rax is the top of the stack
 18020 0000CD7F 4C8908                  	mov qword[rax], r9;puting the list at the top
 18021 0000CD82 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 18022 0000CD86 4889E3                  	mov rbx, rsp 
 18023 0000CD89 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 18024 0000CD8C 41BA00000000            	mov r10, 0;r10 is the not opt params length
 18025 0000CD92 49FFCA                  	dec r10 
 18026 0000CD95 49C1E203                	shl r10, 3;to get bytes
 18027 0000CD99 4883C318                	add rbx, 3*8;rbx is the first param
 18028 0000CD9D 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 18029 0000CDA0 4889E0                  	mov rax, rsp
 18030 0000CDA3 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 18031 0000CDA6 48C744241001000000      	mov qword [rsp+2*8], 1
 18032 0000CDAF 488B5808                	mov rbx, qword[rax + 8 *1]
 18033 0000CDB3 48895C2408              	mov qword [rsp + 1*8] ,rbx
 18034 0000CDB8 488B18                  	mov rbx, qword[rax]
 18035 0000CDBB 48891C24                	mov qword [rsp], rbx
 18036 0000CDBF C8000000                	enter 0, 0
 18037                                  	; preparing a tail-call
 18038                                  	; preparing a non-tail-call
 18039 0000CDC3 488B4520                	mov rax, PARAM(0)	; param s
 18040 0000CDC7 50                      	push rax
 18041 0000CDC8 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18042 0000CDD0 803805                  	cmp byte [rax], T_undefined
 18043 0000CDD3 0F84BEB50000            	je L_error_fvar_undefined
 18044 0000CDD9 50                      	push rax
 18045 0000CDDA 6A02                    	push 2	; arg count
 18046 0000CDDC 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 18047 0000CDE4 803805                  	cmp byte [rax], T_undefined
 18048 0000CDE7 0F84AAB50000            	je L_error_fvar_undefined
 18049 0000CDED 803804                  	cmp byte [rax], T_closure
 18050 0000CDF0 0F8525B60000            	jne L_error_non_closure
 18051 0000CDF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18052 0000CDF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18053 0000CDFC 50                      	push rax
 18054 0000CDFD 488B4510                	mov rax, ENV
 18055 0000CE01 488B00                  	mov rax, qword [rax + 8 * 0]
 18056 0000CE04 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18057 0000CE07 50                      	push rax
 18058 0000CE08 6A02                    	push 2	; arg count
 18059 0000CE0A 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 18060 0000CE12 803805                  	cmp byte [rax], T_undefined
 18061 0000CE15 0F847CB50000            	je L_error_fvar_undefined
 18062 0000CE1B 803804                  	cmp byte [rax], T_closure
 18063 0000CE1E 0F85F7B50000            	jne L_error_non_closure
 18064 0000CE24 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18065 0000CE27 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18066 0000CE2A FF7500                  	push qword[rbp]
 18067 0000CE2D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18068 0000CE30 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18069 0000CE34 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18070 0000CE38 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18071 0000CE3C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18072 0000CE3F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18073 0000CE42 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18074 0000CE47 4983C103                	add r9, 3 	 ;for getting to the params
 18075 0000CE4B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18076 0000CE4F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18077                                  .L_tc_recycle_frame_loop_0ee9:
 18078 0000CE52 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18079 0000CE55 7410                    	je .L_tc_recycle_frame_done_0ee9
 18080 0000CE57 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18081 0000CE5A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18082 0000CE5D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18083 0000CE61 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18084 0000CE65 EBEB                    	jmp .L_tc_recycle_frame_loop_0ee9
 18085                                  .L_tc_recycle_frame_done_0ee9:
 18086 0000CE67 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18087 0000CE68 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18088 0000CE6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18089 0000CE6F C9                      	leave
 18090 0000CE70 C21800                  	ret AND_KILL_FRAME(1)
 18091                                  .L_lambda_opt_end_014d:	; new closure is in rax
 18092 0000CE73 C9                      	leave
 18093 0000CE74 C21800                  	ret AND_KILL_FRAME(1)
 18094                                  .L_lambda_simple_end_0a90:	; new closure is in rax
 18095 0000CE77 50                      	push rax
 18096 0000CE78 6A01                    	push 1	; arg count
 18097 0000CE7A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18098 0000CE7F E840B60000              	call malloc
 18099 0000CE84 50                      	push rax
 18100 0000CE85 BF00000000              	mov rdi, 8 * 0	; new rib
 18101 0000CE8A E835B60000              	call malloc
 18102 0000CE8F 50                      	push rax
 18103 0000CE90 BF08000000              	mov rdi, 8 * 1	; extended env
 18104 0000CE95 E82AB60000              	call malloc
 18105 0000CE9A 488B7D10                	mov rdi, ENV
 18106 0000CE9E BE00000000              	mov rsi, 0
 18107 0000CEA3 BA01000000              	mov rdx, 1
 18108                                  .L_lambda_simple_env_loop_0a91:	; ext_env[i + 1] <-- env[i]
 18109 0000CEA8 4883FE00                	cmp rsi, 0
 18110 0000CEAC 7410                    	je .L_lambda_simple_env_end_0a91
 18111 0000CEAE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18112 0000CEB2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18113 0000CEB6 48FFC6                  	inc rsi
 18114 0000CEB9 48FFC2                  	inc rdx
 18115 0000CEBC EBEA                    	jmp .L_lambda_simple_env_loop_0a91
 18116                                  .L_lambda_simple_env_end_0a91:
 18117 0000CEBE 5B                      	pop rbx
 18118 0000CEBF BE00000000              	mov rsi, 0
 18119                                  .L_lambda_simple_params_loop_0a91:	; copy params
 18120 0000CEC4 4883FE00                	cmp rsi, 0
 18121 0000CEC8 740E                    	je .L_lambda_simple_params_end_0a91
 18122 0000CECA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18123 0000CECF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18124 0000CED3 48FFC6                  	inc rsi
 18125 0000CED6 EBEC                    	jmp .L_lambda_simple_params_loop_0a91
 18126                                  .L_lambda_simple_params_end_0a91:
 18127 0000CED8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18128 0000CEDB 4889C3                  	mov rbx, rax
 18129 0000CEDE 58                      	pop rax
 18130 0000CEDF C60004                  	mov byte [rax], T_closure
 18131 0000CEE2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18132 0000CEE6 48C74009[F3CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a91
 18133 0000CEEE E938010000              	jmp .L_lambda_simple_end_0a91
 18134                                  .L_lambda_simple_code_0a91:	; lambda-simple body
 18135 0000CEF3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18136 0000CEF9 740B                    	je .L_lambda_simple_arity_check_ok_0a91
 18137 0000CEFB FF742410                	push qword [rsp + 8 * 2]
 18138 0000CEFF 6A01                    	push 1
 18139 0000CF01 E977B50000              	jmp L_error_incorrect_arity_simple
 18140                                  .L_lambda_simple_arity_check_ok_0a91:
 18141 0000CF06 C8000000                	enter 0, 0
 18142                                  	; preparing a non-tail-call
 18143 0000CF0A 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 18144 0000CF12 803805                  	cmp byte [rax], T_undefined
 18145 0000CF15 0F847CB40000            	je L_error_fvar_undefined
 18146 0000CF1B 50                      	push rax
 18147 0000CF1C 6A01                    	push 1	; arg count
 18148 0000CF1E 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18149 0000CF22 803804                  	cmp byte [rax], T_closure
 18150 0000CF25 0F85F0B40000            	jne L_error_non_closure
 18151 0000CF2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18152 0000CF2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18153 0000CF31 48890425[24140000]      	mov qword [free_var_74], rax
 18154 0000CF39 48B8-                   	mov rax, sob_void
 18154 0000CF3B [0000000000000000] 
 18155                                  
 18156                                  	; preparing a non-tail-call
 18157 0000CF43 488B0425[8F0F0000]      	mov rax, qword [free_var_5]	; free var <=
 18158 0000CF4B 803805                  	cmp byte [rax], T_undefined
 18159 0000CF4E 0F8443B40000            	je L_error_fvar_undefined
 18160 0000CF54 50                      	push rax
 18161 0000CF55 6A01                    	push 1	; arg count
 18162 0000CF57 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18163 0000CF5B 803804                  	cmp byte [rax], T_closure
 18164 0000CF5E 0F85B7B40000            	jne L_error_non_closure
 18165 0000CF64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18166 0000CF67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18167 0000CF6A 48890425[13140000]      	mov qword [free_var_73], rax
 18168 0000CF72 48B8-                   	mov rax, sob_void
 18168 0000CF74 [0000000000000000] 
 18169                                  
 18170                                  	; preparing a non-tail-call
 18171 0000CF7C 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 18172 0000CF84 803805                  	cmp byte [rax], T_undefined
 18173 0000CF87 0F840AB40000            	je L_error_fvar_undefined
 18174 0000CF8D 50                      	push rax
 18175 0000CF8E 6A01                    	push 1	; arg count
 18176 0000CF90 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18177 0000CF94 803804                  	cmp byte [rax], T_closure
 18178 0000CF97 0F857EB40000            	jne L_error_non_closure
 18179 0000CF9D FF7001                  	push SOB_CLOSURE_ENV(rax)
 18180 0000CFA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18181 0000CFA3 48890425[35140000]      	mov qword [free_var_75], rax
 18182 0000CFAB 48B8-                   	mov rax, sob_void
 18182 0000CFAD [0000000000000000] 
 18183                                  
 18184                                  	; preparing a non-tail-call
 18185 0000CFB5 488B0425[B10F0000]      	mov rax, qword [free_var_7]	; free var >
 18186 0000CFBD 803805                  	cmp byte [rax], T_undefined
 18187 0000CFC0 0F84D1B30000            	je L_error_fvar_undefined
 18188 0000CFC6 50                      	push rax
 18189 0000CFC7 6A01                    	push 1	; arg count
 18190 0000CFC9 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18191 0000CFCD 803804                  	cmp byte [rax], T_closure
 18192 0000CFD0 0F8545B40000            	jne L_error_non_closure
 18193 0000CFD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18194 0000CFD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18195 0000CFDC 48890425[57140000]      	mov qword [free_var_77], rax
 18196 0000CFE4 48B8-                   	mov rax, sob_void
 18196 0000CFE6 [0000000000000000] 
 18197                                  
 18198                                  	; preparing a non-tail-call
 18199 0000CFEE 488B0425[C20F0000]      	mov rax, qword [free_var_8]	; free var >=
 18200 0000CFF6 803805                  	cmp byte [rax], T_undefined
 18201 0000CFF9 0F8498B30000            	je L_error_fvar_undefined
 18202 0000CFFF 50                      	push rax
 18203 0000D000 6A01                    	push 1	; arg count
 18204 0000D002 488B4520                	mov rax, PARAM(0)	; param make-char-comparator
 18205 0000D006 803804                  	cmp byte [rax], T_closure
 18206 0000D009 0F850CB40000            	jne L_error_non_closure
 18207 0000D00F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18208 0000D012 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18209 0000D015 48890425[46140000]      	mov qword [free_var_76], rax
 18210 0000D01D 48B8-                   	mov rax, sob_void
 18210 0000D01F [0000000000000000] 
 18211 0000D027 C9                      	leave
 18212 0000D028 C21800                  	ret AND_KILL_FRAME(1)
 18213                                  .L_lambda_simple_end_0a91:	; new closure is in rax
 18214 0000D02B 803804                  	cmp byte [rax], T_closure
 18215 0000D02E 0F85E7B30000            	jne L_error_non_closure
 18216 0000D034 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18217 0000D037 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18218                                  
 18219 0000D03A 4889C7                  	mov rdi, rax
 18220 0000D03D E8D7B60000              	call print_sexpr_if_not_void
 18221 0000D042 48B8-                   	mov rax, L_constants + 0
 18221 0000D044 [0000000000000000] 
 18222 0000D04C 48890425[F1130000]      	mov qword [free_var_71], rax
 18223 0000D054 48B8-                   	mov rax, sob_void
 18223 0000D056 [0000000000000000] 
 18224                                  
 18225 0000D05E 4889C7                  	mov rdi, rax
 18226 0000D061 E8B3B60000              	call print_sexpr_if_not_void
 18227 0000D066 48B8-                   	mov rax, L_constants + 0
 18227 0000D068 [0000000000000000] 
 18228 0000D070 48890425[02140000]      	mov qword [free_var_72], rax
 18229 0000D078 48B8-                   	mov rax, sob_void
 18229 0000D07A [0000000000000000] 
 18230                                  
 18231 0000D082 4889C7                  	mov rdi, rax
 18232 0000D085 E88FB60000              	call print_sexpr_if_not_void
 18233                                  	; preparing a non-tail-call
 18234                                  	; preparing a non-tail-call
 18235                                  	; preparing a non-tail-call
 18236 0000D08A 48B8-                   	mov rax, L_constants + 2569
 18236 0000D08C [090A000000000000] 
 18237 0000D094 50                      	push rax
 18238 0000D095 6A01                    	push 1	; arg count
 18239 0000D097 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18240 0000D09F 803805                  	cmp byte [rax], T_undefined
 18241 0000D0A2 0F84EFB20000            	je L_error_fvar_undefined
 18242 0000D0A8 803804                  	cmp byte [rax], T_closure
 18243 0000D0AB 0F856AB30000            	jne L_error_non_closure
 18244 0000D0B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18245 0000D0B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18246 0000D0B7 50                      	push rax
 18247                                  	; preparing a non-tail-call
 18248 0000D0B8 48B8-                   	mov rax, L_constants + 2573
 18248 0000D0BA [0D0A000000000000] 
 18249 0000D0C2 50                      	push rax
 18250 0000D0C3 6A01                    	push 1	; arg count
 18251 0000D0C5 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18252 0000D0CD 803805                  	cmp byte [rax], T_undefined
 18253 0000D0D0 0F84C1B20000            	je L_error_fvar_undefined
 18254 0000D0D6 803804                  	cmp byte [rax], T_closure
 18255 0000D0D9 0F853CB30000            	jne L_error_non_closure
 18256 0000D0DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 18257 0000D0E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18258 0000D0E5 50                      	push rax
 18259 0000D0E6 6A02                    	push 2	; arg count
 18260 0000D0E8 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 18261 0000D0F0 803805                  	cmp byte [rax], T_undefined
 18262 0000D0F3 0F849EB20000            	je L_error_fvar_undefined
 18263 0000D0F9 803804                  	cmp byte [rax], T_closure
 18264 0000D0FC 0F8519B30000            	jne L_error_non_closure
 18265 0000D102 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18266 0000D105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18267 0000D108 50                      	push rax
 18268 0000D109 6A01                    	push 1	; arg count
 18269 0000D10B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18270 0000D110 E8AFB30000              	call malloc
 18271 0000D115 50                      	push rax
 18272 0000D116 BF00000000              	mov rdi, 8 * 0	; new rib
 18273 0000D11B E8A4B30000              	call malloc
 18274 0000D120 50                      	push rax
 18275 0000D121 BF08000000              	mov rdi, 8 * 1	; extended env
 18276 0000D126 E899B30000              	call malloc
 18277 0000D12B 488B7D10                	mov rdi, ENV
 18278 0000D12F BE00000000              	mov rsi, 0
 18279 0000D134 BA01000000              	mov rdx, 1
 18280                                  .L_lambda_simple_env_loop_0a92:	; ext_env[i + 1] <-- env[i]
 18281 0000D139 4883FE00                	cmp rsi, 0
 18282 0000D13D 7410                    	je .L_lambda_simple_env_end_0a92
 18283 0000D13F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18284 0000D143 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18285 0000D147 48FFC6                  	inc rsi
 18286 0000D14A 48FFC2                  	inc rdx
 18287 0000D14D EBEA                    	jmp .L_lambda_simple_env_loop_0a92
 18288                                  .L_lambda_simple_env_end_0a92:
 18289 0000D14F 5B                      	pop rbx
 18290 0000D150 BE00000000              	mov rsi, 0
 18291                                  .L_lambda_simple_params_loop_0a92:	; copy params
 18292 0000D155 4883FE00                	cmp rsi, 0
 18293 0000D159 740E                    	je .L_lambda_simple_params_end_0a92
 18294 0000D15B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18295 0000D160 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18296 0000D164 48FFC6                  	inc rsi
 18297 0000D167 EBEC                    	jmp .L_lambda_simple_params_loop_0a92
 18298                                  .L_lambda_simple_params_end_0a92:
 18299 0000D169 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18300 0000D16C 4889C3                  	mov rbx, rax
 18301 0000D16F 58                      	pop rax
 18302 0000D170 C60004                  	mov byte [rax], T_closure
 18303 0000D173 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18304 0000D177 48C74009[84D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a92
 18305 0000D17F E97F030000              	jmp .L_lambda_simple_end_0a92
 18306                                  .L_lambda_simple_code_0a92:	; lambda-simple body
 18307 0000D184 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18308 0000D18A 740B                    	je .L_lambda_simple_arity_check_ok_0a92
 18309 0000D18C FF742410                	push qword [rsp + 8 * 2]
 18310 0000D190 6A01                    	push 1
 18311 0000D192 E9E6B20000              	jmp L_error_incorrect_arity_simple
 18312                                  .L_lambda_simple_arity_check_ok_0a92:
 18313 0000D197 C8000000                	enter 0, 0
 18314 0000D19B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18315 0000D1A0 E81FB30000              	call malloc
 18316 0000D1A5 50                      	push rax
 18317 0000D1A6 BF08000000              	mov rdi, 8 * 1	; new rib
 18318 0000D1AB E814B30000              	call malloc
 18319 0000D1B0 50                      	push rax
 18320 0000D1B1 BF10000000              	mov rdi, 8 * 2	; extended env
 18321 0000D1B6 E809B30000              	call malloc
 18322 0000D1BB 488B7D10                	mov rdi, ENV
 18323 0000D1BF BE00000000              	mov rsi, 0
 18324 0000D1C4 BA01000000              	mov rdx, 1
 18325                                  .L_lambda_simple_env_loop_0a93:	; ext_env[i + 1] <-- env[i]
 18326 0000D1C9 4883FE01                	cmp rsi, 1
 18327 0000D1CD 7410                    	je .L_lambda_simple_env_end_0a93
 18328 0000D1CF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18329 0000D1D3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18330 0000D1D7 48FFC6                  	inc rsi
 18331 0000D1DA 48FFC2                  	inc rdx
 18332 0000D1DD EBEA                    	jmp .L_lambda_simple_env_loop_0a93
 18333                                  .L_lambda_simple_env_end_0a93:
 18334 0000D1DF 5B                      	pop rbx
 18335 0000D1E0 BE00000000              	mov rsi, 0
 18336                                  .L_lambda_simple_params_loop_0a93:	; copy params
 18337 0000D1E5 4883FE01                	cmp rsi, 1
 18338 0000D1E9 740E                    	je .L_lambda_simple_params_end_0a93
 18339 0000D1EB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18340 0000D1F0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18341 0000D1F4 48FFC6                  	inc rsi
 18342 0000D1F7 EBEC                    	jmp .L_lambda_simple_params_loop_0a93
 18343                                  .L_lambda_simple_params_end_0a93:
 18344 0000D1F9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18345 0000D1FC 4889C3                  	mov rbx, rax
 18346 0000D1FF 58                      	pop rax
 18347 0000D200 C60004                  	mov byte [rax], T_closure
 18348 0000D203 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18349 0000D207 48C74009[14D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a93
 18350 0000D20F E927010000              	jmp .L_lambda_simple_end_0a93
 18351                                  .L_lambda_simple_code_0a93:	; lambda-simple body
 18352 0000D214 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18353 0000D21A 740B                    	je .L_lambda_simple_arity_check_ok_0a93
 18354 0000D21C FF742410                	push qword [rsp + 8 * 2]
 18355 0000D220 6A01                    	push 1
 18356 0000D222 E956B20000              	jmp L_error_incorrect_arity_simple
 18357                                  .L_lambda_simple_arity_check_ok_0a93:
 18358 0000D227 C8000000                	enter 0, 0
 18359                                  	; preparing a non-tail-call
 18360 0000D22B 48B8-                   	mov rax, L_constants + 2571
 18360 0000D22D [0B0A000000000000] 
 18361 0000D235 50                      	push rax
 18362 0000D236 488B4520                	mov rax, PARAM(0)	; param ch
 18363 0000D23A 50                      	push rax
 18364 0000D23B 48B8-                   	mov rax, L_constants + 2569
 18364 0000D23D [090A000000000000] 
 18365 0000D245 50                      	push rax
 18366 0000D246 6A03                    	push 3	; arg count
 18367 0000D248 488B0425[13140000]      	mov rax, qword [free_var_73]	; free var char<=?
 18368 0000D250 803805                  	cmp byte [rax], T_undefined
 18369 0000D253 0F843EB10000            	je L_error_fvar_undefined
 18370 0000D259 803804                  	cmp byte [rax], T_closure
 18371 0000D25C 0F85B9B10000            	jne L_error_non_closure
 18372 0000D262 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18373 0000D265 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18374 0000D268 483D[02000000]          	cmp rax, sob_boolean_false
 18375 0000D26E 0F84BF000000            	je .L_if_else_0801
 18376                                  	; preparing a tail-call
 18377                                  	; preparing a non-tail-call
 18378 0000D274 488B4510                	mov rax, ENV
 18379 0000D278 488B00                  	mov rax, qword [rax + 8 * 0]
 18380 0000D27B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18381 0000D27E 50                      	push rax
 18382                                  	; preparing a non-tail-call
 18383 0000D27F 488B4520                	mov rax, PARAM(0)	; param ch
 18384 0000D283 50                      	push rax
 18385 0000D284 6A01                    	push 1	; arg count
 18386 0000D286 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18387 0000D28E 803805                  	cmp byte [rax], T_undefined
 18388 0000D291 0F8400B10000            	je L_error_fvar_undefined
 18389 0000D297 803804                  	cmp byte [rax], T_closure
 18390 0000D29A 0F857BB10000            	jne L_error_non_closure
 18391 0000D2A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18392 0000D2A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18393 0000D2A6 50                      	push rax
 18394 0000D2A7 6A02                    	push 2	; arg count
 18395 0000D2A9 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 18396 0000D2B1 803805                  	cmp byte [rax], T_undefined
 18397 0000D2B4 0F84DDB00000            	je L_error_fvar_undefined
 18398 0000D2BA 803804                  	cmp byte [rax], T_closure
 18399 0000D2BD 0F8558B10000            	jne L_error_non_closure
 18400 0000D2C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18401 0000D2C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18402 0000D2C9 50                      	push rax
 18403 0000D2CA 6A01                    	push 1	; arg count
 18404 0000D2CC 488B0425[23150000]      	mov rax, qword [free_var_89]	; free var integer->char
 18405 0000D2D4 803805                  	cmp byte [rax], T_undefined
 18406 0000D2D7 0F84BAB00000            	je L_error_fvar_undefined
 18407 0000D2DD 803804                  	cmp byte [rax], T_closure
 18408 0000D2E0 0F8535B10000            	jne L_error_non_closure
 18409 0000D2E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18410 0000D2E9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18411 0000D2EC FF7500                  	push qword[rbp]
 18412 0000D2EF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18413 0000D2F2 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18414 0000D2F6 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18415 0000D2FA 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18416 0000D2FE 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18417 0000D301 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18418 0000D304 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18419 0000D309 4983C103                	add r9, 3 	 ;for getting to the params
 18420 0000D30D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18421 0000D311 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18422                                  .L_tc_recycle_frame_loop_0eeb:
 18423 0000D314 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18424 0000D317 7410                    	je .L_tc_recycle_frame_done_0eeb
 18425 0000D319 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18426 0000D31C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18427 0000D31F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18428 0000D323 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18429 0000D327 EBEB                    	jmp .L_tc_recycle_frame_loop_0eeb
 18430                                  .L_tc_recycle_frame_done_0eeb:
 18431 0000D329 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18432 0000D32A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18433 0000D32E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18434 0000D331 EB04                    	jmp .L_if_end_0801
 18435                                  .L_if_else_0801:
 18436 0000D333 488B4520                	mov rax, PARAM(0)	; param ch
 18437                                  .L_if_end_0801:
 18438 0000D337 C9                      	leave
 18439 0000D338 C21800                  	ret AND_KILL_FRAME(1)
 18440                                  .L_lambda_simple_end_0a93:	; new closure is in rax
 18441 0000D33B 48890425[F1130000]      	mov qword [free_var_71], rax
 18442 0000D343 48B8-                   	mov rax, sob_void
 18442 0000D345 [0000000000000000] 
 18443                                  
 18444 0000D34D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18445 0000D352 E86DB10000              	call malloc
 18446 0000D357 50                      	push rax
 18447 0000D358 BF08000000              	mov rdi, 8 * 1	; new rib
 18448 0000D35D E862B10000              	call malloc
 18449 0000D362 50                      	push rax
 18450 0000D363 BF10000000              	mov rdi, 8 * 2	; extended env
 18451 0000D368 E857B10000              	call malloc
 18452 0000D36D 488B7D10                	mov rdi, ENV
 18453 0000D371 BE00000000              	mov rsi, 0
 18454 0000D376 BA01000000              	mov rdx, 1
 18455                                  .L_lambda_simple_env_loop_0a94:	; ext_env[i + 1] <-- env[i]
 18456 0000D37B 4883FE01                	cmp rsi, 1
 18457 0000D37F 7410                    	je .L_lambda_simple_env_end_0a94
 18458 0000D381 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18459 0000D385 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18460 0000D389 48FFC6                  	inc rsi
 18461 0000D38C 48FFC2                  	inc rdx
 18462 0000D38F EBEA                    	jmp .L_lambda_simple_env_loop_0a94
 18463                                  .L_lambda_simple_env_end_0a94:
 18464 0000D391 5B                      	pop rbx
 18465 0000D392 BE00000000              	mov rsi, 0
 18466                                  .L_lambda_simple_params_loop_0a94:	; copy params
 18467 0000D397 4883FE01                	cmp rsi, 1
 18468 0000D39B 740E                    	je .L_lambda_simple_params_end_0a94
 18469 0000D39D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18470 0000D3A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18471 0000D3A6 48FFC6                  	inc rsi
 18472 0000D3A9 EBEC                    	jmp .L_lambda_simple_params_loop_0a94
 18473                                  .L_lambda_simple_params_end_0a94:
 18474 0000D3AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18475 0000D3AE 4889C3                  	mov rbx, rax
 18476 0000D3B1 58                      	pop rax
 18477 0000D3B2 C60004                  	mov byte [rax], T_closure
 18478 0000D3B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18479 0000D3B9 48C74009[C6D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a94
 18480 0000D3C1 E927010000              	jmp .L_lambda_simple_end_0a94
 18481                                  .L_lambda_simple_code_0a94:	; lambda-simple body
 18482 0000D3C6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18483 0000D3CC 740B                    	je .L_lambda_simple_arity_check_ok_0a94
 18484 0000D3CE FF742410                	push qword [rsp + 8 * 2]
 18485 0000D3D2 6A01                    	push 1
 18486 0000D3D4 E9A4B00000              	jmp L_error_incorrect_arity_simple
 18487                                  .L_lambda_simple_arity_check_ok_0a94:
 18488 0000D3D9 C8000000                	enter 0, 0
 18489                                  	; preparing a non-tail-call
 18490 0000D3DD 48B8-                   	mov rax, L_constants + 2575
 18490 0000D3DF [0F0A000000000000] 
 18491 0000D3E7 50                      	push rax
 18492 0000D3E8 488B4520                	mov rax, PARAM(0)	; param ch
 18493 0000D3EC 50                      	push rax
 18494 0000D3ED 48B8-                   	mov rax, L_constants + 2573
 18494 0000D3EF [0D0A000000000000] 
 18495 0000D3F7 50                      	push rax
 18496 0000D3F8 6A03                    	push 3	; arg count
 18497 0000D3FA 488B0425[13140000]      	mov rax, qword [free_var_73]	; free var char<=?
 18498 0000D402 803805                  	cmp byte [rax], T_undefined
 18499 0000D405 0F848CAF0000            	je L_error_fvar_undefined
 18500 0000D40B 803804                  	cmp byte [rax], T_closure
 18501 0000D40E 0F8507B00000            	jne L_error_non_closure
 18502 0000D414 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18503 0000D417 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18504 0000D41A 483D[02000000]          	cmp rax, sob_boolean_false
 18505 0000D420 0F84BF000000            	je .L_if_else_0802
 18506                                  	; preparing a tail-call
 18507                                  	; preparing a non-tail-call
 18508 0000D426 488B4510                	mov rax, ENV
 18509 0000D42A 488B00                  	mov rax, qword [rax + 8 * 0]
 18510 0000D42D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var delta
 18511 0000D430 50                      	push rax
 18512                                  	; preparing a non-tail-call
 18513 0000D431 488B4520                	mov rax, PARAM(0)	; param ch
 18514 0000D435 50                      	push rax
 18515 0000D436 6A01                    	push 1	; arg count
 18516 0000D438 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18517 0000D440 803805                  	cmp byte [rax], T_undefined
 18518 0000D443 0F844EAF0000            	je L_error_fvar_undefined
 18519 0000D449 803804                  	cmp byte [rax], T_closure
 18520 0000D44C 0F85C9AF0000            	jne L_error_non_closure
 18521 0000D452 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18522 0000D455 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18523 0000D458 50                      	push rax
 18524 0000D459 6A02                    	push 2	; arg count
 18525 0000D45B 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 18526 0000D463 803805                  	cmp byte [rax], T_undefined
 18527 0000D466 0F842BAF0000            	je L_error_fvar_undefined
 18528 0000D46C 803804                  	cmp byte [rax], T_closure
 18529 0000D46F 0F85A6AF0000            	jne L_error_non_closure
 18530 0000D475 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18531 0000D478 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18532 0000D47B 50                      	push rax
 18533 0000D47C 6A01                    	push 1	; arg count
 18534 0000D47E 488B0425[23150000]      	mov rax, qword [free_var_89]	; free var integer->char
 18535 0000D486 803805                  	cmp byte [rax], T_undefined
 18536 0000D489 0F8408AF0000            	je L_error_fvar_undefined
 18537 0000D48F 803804                  	cmp byte [rax], T_closure
 18538 0000D492 0F8583AF0000            	jne L_error_non_closure
 18539 0000D498 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18540 0000D49B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18541 0000D49E FF7500                  	push qword[rbp]
 18542 0000D4A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18543 0000D4A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18544 0000D4A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18545 0000D4AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18546 0000D4B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18547 0000D4B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18548 0000D4B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18549 0000D4BB 4983C103                	add r9, 3 	 ;for getting to the params
 18550 0000D4BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18551 0000D4C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18552                                  .L_tc_recycle_frame_loop_0eec:
 18553 0000D4C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18554 0000D4C9 7410                    	je .L_tc_recycle_frame_done_0eec
 18555 0000D4CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18556 0000D4CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18557 0000D4D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18558 0000D4D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18559 0000D4D9 EBEB                    	jmp .L_tc_recycle_frame_loop_0eec
 18560                                  .L_tc_recycle_frame_done_0eec:
 18561 0000D4DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18562 0000D4DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18563 0000D4E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18564 0000D4E3 EB04                    	jmp .L_if_end_0802
 18565                                  .L_if_else_0802:
 18566 0000D4E5 488B4520                	mov rax, PARAM(0)	; param ch
 18567                                  .L_if_end_0802:
 18568 0000D4E9 C9                      	leave
 18569 0000D4EA C21800                  	ret AND_KILL_FRAME(1)
 18570                                  .L_lambda_simple_end_0a94:	; new closure is in rax
 18571 0000D4ED 48890425[02140000]      	mov qword [free_var_72], rax
 18572 0000D4F5 48B8-                   	mov rax, sob_void
 18572 0000D4F7 [0000000000000000] 
 18573 0000D4FF C9                      	leave
 18574 0000D500 C21800                  	ret AND_KILL_FRAME(1)
 18575                                  .L_lambda_simple_end_0a92:	; new closure is in rax
 18576 0000D503 803804                  	cmp byte [rax], T_closure
 18577 0000D506 0F850FAF0000            	jne L_error_non_closure
 18578 0000D50C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18579 0000D50F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18580                                  
 18581 0000D512 4889C7                  	mov rdi, rax
 18582 0000D515 E8FFB10000              	call print_sexpr_if_not_void
 18583 0000D51A 48B8-                   	mov rax, L_constants + 0
 18583 0000D51C [0000000000000000] 
 18584 0000D524 48890425[AD130000]      	mov qword [free_var_67], rax
 18585 0000D52C 48B8-                   	mov rax, sob_void
 18585 0000D52E [0000000000000000] 
 18586                                  
 18587 0000D536 4889C7                  	mov rdi, rax
 18588 0000D539 E8DBB10000              	call print_sexpr_if_not_void
 18589 0000D53E 48B8-                   	mov rax, L_constants + 0
 18589 0000D540 [0000000000000000] 
 18590 0000D548 48890425[9C130000]      	mov qword [free_var_66], rax
 18591 0000D550 48B8-                   	mov rax, sob_void
 18591 0000D552 [0000000000000000] 
 18592                                  
 18593 0000D55A 4889C7                  	mov rdi, rax
 18594 0000D55D E8B7B10000              	call print_sexpr_if_not_void
 18595 0000D562 48B8-                   	mov rax, L_constants + 0
 18595 0000D564 [0000000000000000] 
 18596 0000D56C 48890425[BE130000]      	mov qword [free_var_68], rax
 18597 0000D574 48B8-                   	mov rax, sob_void
 18597 0000D576 [0000000000000000] 
 18598                                  
 18599 0000D57E 4889C7                  	mov rdi, rax
 18600 0000D581 E893B10000              	call print_sexpr_if_not_void
 18601 0000D586 48B8-                   	mov rax, L_constants + 0
 18601 0000D588 [0000000000000000] 
 18602 0000D590 48890425[E0130000]      	mov qword [free_var_70], rax
 18603 0000D598 48B8-                   	mov rax, sob_void
 18603 0000D59A [0000000000000000] 
 18604                                  
 18605 0000D5A2 4889C7                  	mov rdi, rax
 18606 0000D5A5 E86FB10000              	call print_sexpr_if_not_void
 18607 0000D5AA 48B8-                   	mov rax, L_constants + 0
 18607 0000D5AC [0000000000000000] 
 18608 0000D5B4 48890425[CF130000]      	mov qword [free_var_69], rax
 18609 0000D5BC 48B8-                   	mov rax, sob_void
 18609 0000D5BE [0000000000000000] 
 18610                                  
 18611 0000D5C6 4889C7                  	mov rdi, rax
 18612 0000D5C9 E84BB10000              	call print_sexpr_if_not_void
 18613                                  	; preparing a non-tail-call
 18614 0000D5CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18615 0000D5D3 E8ECAE0000              	call malloc
 18616 0000D5D8 50                      	push rax
 18617 0000D5D9 BF00000000              	mov rdi, 8 * 0	; new rib
 18618 0000D5DE E8E1AE0000              	call malloc
 18619 0000D5E3 50                      	push rax
 18620 0000D5E4 BF08000000              	mov rdi, 8 * 1	; extended env
 18621 0000D5E9 E8D6AE0000              	call malloc
 18622 0000D5EE 488B7D10                	mov rdi, ENV
 18623 0000D5F2 BE00000000              	mov rsi, 0
 18624 0000D5F7 BA01000000              	mov rdx, 1
 18625                                  .L_lambda_simple_env_loop_0a95:	; ext_env[i + 1] <-- env[i]
 18626 0000D5FC 4883FE00                	cmp rsi, 0
 18627 0000D600 7410                    	je .L_lambda_simple_env_end_0a95
 18628 0000D602 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18629 0000D606 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18630 0000D60A 48FFC6                  	inc rsi
 18631 0000D60D 48FFC2                  	inc rdx
 18632 0000D610 EBEA                    	jmp .L_lambda_simple_env_loop_0a95
 18633                                  .L_lambda_simple_env_end_0a95:
 18634 0000D612 5B                      	pop rbx
 18635 0000D613 BE00000000              	mov rsi, 0
 18636                                  .L_lambda_simple_params_loop_0a95:	; copy params
 18637 0000D618 4883FE00                	cmp rsi, 0
 18638 0000D61C 740E                    	je .L_lambda_simple_params_end_0a95
 18639 0000D61E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18640 0000D623 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18641 0000D627 48FFC6                  	inc rsi
 18642 0000D62A EBEC                    	jmp .L_lambda_simple_params_loop_0a95
 18643                                  .L_lambda_simple_params_end_0a95:
 18644 0000D62C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18645 0000D62F 4889C3                  	mov rbx, rax
 18646 0000D632 58                      	pop rax
 18647 0000D633 C60004                  	mov byte [rax], T_closure
 18648 0000D636 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18649 0000D63A 48C74009[47D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a95
 18650 0000D642 E925050000              	jmp .L_lambda_simple_end_0a95
 18651                                  .L_lambda_simple_code_0a95:	; lambda-simple body
 18652 0000D647 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18653 0000D64D 740B                    	je .L_lambda_simple_arity_check_ok_0a95
 18654 0000D64F FF742410                	push qword [rsp + 8 * 2]
 18655 0000D653 6A01                    	push 1
 18656 0000D655 E923AE0000              	jmp L_error_incorrect_arity_simple
 18657                                  .L_lambda_simple_arity_check_ok_0a95:
 18658 0000D65A C8000000                	enter 0, 0
 18659 0000D65E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18660 0000D663 E85CAE0000              	call malloc
 18661 0000D668 50                      	push rax
 18662 0000D669 BF08000000              	mov rdi, 8 * 1	; new rib
 18663 0000D66E E851AE0000              	call malloc
 18664 0000D673 50                      	push rax
 18665 0000D674 BF10000000              	mov rdi, 8 * 2	; extended env
 18666 0000D679 E846AE0000              	call malloc
 18667 0000D67E 488B7D10                	mov rdi, ENV
 18668 0000D682 BE00000000              	mov rsi, 0
 18669 0000D687 BA01000000              	mov rdx, 1
 18670                                  .L_lambda_opt_env_loop_014e:	; ext_env[i + 1] <-- env[i]
 18671 0000D68C 4883FE01                	cmp rsi, 1
 18672 0000D690 7410                    	je .L_lambda_opt_env_end_014e
 18673 0000D692 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18674 0000D696 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18675 0000D69A 48FFC6                  	inc rsi
 18676 0000D69D 48FFC2                  	inc rdx
 18677 0000D6A0 EBEA                    	jmp .L_lambda_opt_env_loop_014e
 18678                                  .L_lambda_opt_env_end_014e:
 18679 0000D6A2 5B                      	pop rbx
 18680 0000D6A3 BE00000000              	mov rsi, 0
 18681                                  .L_lambda_opt_params_loop_014e:	; copy params
 18682 0000D6A8 4883FE01                	cmp rsi, 1
 18683 0000D6AC 740E                    	je .L_lambda_opt_params_end_014e
 18684 0000D6AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18685 0000D6B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18686 0000D6B7 48FFC6                  	inc rsi
 18687 0000D6BA EBEC                    	jmp .L_lambda_opt_params_loop_014e
 18688                                  .L_lambda_opt_params_end_014e:
 18689 0000D6BC 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 18690 0000D6BF 4889C3                  	mov rbx, rax
 18691 0000D6C2 58                      	pop rax
 18692 0000D6C3 C60004                  	mov byte [rax], T_closure
 18693 0000D6C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18694 0000D6CA 48C74009[D7D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_014e
 18695 0000D6D2 E991040000              	jmp .L_lambda_opt_end_014e
 18696                                  .L_lambda_opt_code_014e:	; lambda-opt body
 18697 0000D6D7 48837C241000            	cmp qword [rsp + 8 * 2], 0
 18698 0000D6DD 7411                    	je .L_lambda_opt_arity_check_exact_014e
 18699 0000D6DF 0F8F06020000            	jg .L_lambda_opt_arity_check_more_014e
 18700 0000D6E5 FF742410                	push qword [rsp + 8 * 2]
 18701 0000D6E9 6A00                    	push 0
 18702 0000D6EB E9A1AD0000              	jmp L_error_incorrect_arity_opt
 18703                                  .L_lambda_opt_arity_check_exact_014e:
 18704 0000D6F0 4883EC08                	sub rsp, 8
 18705 0000D6F4 488B442408              	mov rax, qword[rsp + 8 *1]
 18706 0000D6F9 48890424                	mov qword[rsp], rax  
 18707 0000D6FD 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 18708 0000D702 4889442408              	mov qword[rsp + 8 * 1], rax
 18709 0000D707 B801000000              	mov rax, 1
 18710 0000D70C 4889442410              	mov qword[rsp + 8 *2], rax
 18711 0000D711 48B8-                   	mov rax, sob_nil
 18711 0000D713 [0100000000000000] 
 18712 0000D71B 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 18713 0000D720 C8000000                	enter 0, 0
 18714                                  	; preparing a tail-call
 18715                                  	; preparing a non-tail-call
 18716 0000D724 488B4520                	mov rax, PARAM(0)	; param s
 18717 0000D728 50                      	push rax
 18718 0000D729 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18719 0000D72E E891AD0000              	call malloc
 18720 0000D733 50                      	push rax
 18721 0000D734 BF08000000              	mov rdi, 8 * 1	; new rib
 18722 0000D739 E886AD0000              	call malloc
 18723 0000D73E 50                      	push rax
 18724 0000D73F BF18000000              	mov rdi, 8 * 3	; extended env
 18725 0000D744 E87BAD0000              	call malloc
 18726 0000D749 488B7D10                	mov rdi, ENV
 18727 0000D74D BE00000000              	mov rsi, 0
 18728 0000D752 BA01000000              	mov rdx, 1
 18729                                  .L_lambda_simple_env_loop_0a97:	; ext_env[i + 1] <-- env[i]
 18730 0000D757 4883FE02                	cmp rsi, 2
 18731 0000D75B 7410                    	je .L_lambda_simple_env_end_0a97
 18732 0000D75D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18733 0000D761 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18734 0000D765 48FFC6                  	inc rsi
 18735 0000D768 48FFC2                  	inc rdx
 18736 0000D76B EBEA                    	jmp .L_lambda_simple_env_loop_0a97
 18737                                  .L_lambda_simple_env_end_0a97:
 18738 0000D76D 5B                      	pop rbx
 18739 0000D76E BE00000000              	mov rsi, 0
 18740                                  .L_lambda_simple_params_loop_0a97:	; copy params
 18741 0000D773 4883FE01                	cmp rsi, 1
 18742 0000D777 740E                    	je .L_lambda_simple_params_end_0a97
 18743 0000D779 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18744 0000D77E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18745 0000D782 48FFC6                  	inc rsi
 18746 0000D785 EBEC                    	jmp .L_lambda_simple_params_loop_0a97
 18747                                  .L_lambda_simple_params_end_0a97:
 18748 0000D787 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18749 0000D78A 4889C3                  	mov rbx, rax
 18750 0000D78D 58                      	pop rax
 18751 0000D78E C60004                  	mov byte [rax], T_closure
 18752 0000D791 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18753 0000D795 48C74009[A2D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a97
 18754 0000D79D E9AA000000              	jmp .L_lambda_simple_end_0a97
 18755                                  .L_lambda_simple_code_0a97:	; lambda-simple body
 18756 0000D7A2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18757 0000D7A8 740B                    	je .L_lambda_simple_arity_check_ok_0a97
 18758 0000D7AA FF742410                	push qword [rsp + 8 * 2]
 18759 0000D7AE 6A01                    	push 1
 18760 0000D7B0 E9C8AC0000              	jmp L_error_incorrect_arity_simple
 18761                                  .L_lambda_simple_arity_check_ok_0a97:
 18762 0000D7B5 C8000000                	enter 0, 0
 18763                                  	; preparing a tail-call
 18764                                  	; preparing a non-tail-call
 18765 0000D7B9 488B4520                	mov rax, PARAM(0)	; param ch
 18766 0000D7BD 50                      	push rax
 18767 0000D7BE 6A01                    	push 1	; arg count
 18768 0000D7C0 488B0425[F1130000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18769 0000D7C8 803805                  	cmp byte [rax], T_undefined
 18770 0000D7CB 0F84C6AB0000            	je L_error_fvar_undefined
 18771 0000D7D1 803804                  	cmp byte [rax], T_closure
 18772 0000D7D4 0F8541AC0000            	jne L_error_non_closure
 18773 0000D7DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 18774 0000D7DD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18775 0000D7E0 50                      	push rax
 18776 0000D7E1 6A01                    	push 1	; arg count
 18777 0000D7E3 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18778 0000D7EB 803805                  	cmp byte [rax], T_undefined
 18779 0000D7EE 0F84A3AB0000            	je L_error_fvar_undefined
 18780 0000D7F4 803804                  	cmp byte [rax], T_closure
 18781 0000D7F7 0F851EAC0000            	jne L_error_non_closure
 18782 0000D7FD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18783 0000D800 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18784 0000D803 FF7500                  	push qword[rbp]
 18785 0000D806 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18786 0000D809 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18787 0000D80D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18788 0000D811 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18789 0000D815 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18790 0000D818 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18791 0000D81B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18792 0000D820 4983C103                	add r9, 3 	 ;for getting to the params
 18793 0000D824 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18794 0000D828 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18795                                  .L_tc_recycle_frame_loop_0eef:
 18796 0000D82B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18797 0000D82E 7410                    	je .L_tc_recycle_frame_done_0eef
 18798 0000D830 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18799 0000D833 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18800 0000D836 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18801 0000D83A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18802 0000D83E EBEB                    	jmp .L_tc_recycle_frame_loop_0eef
 18803                                  .L_tc_recycle_frame_done_0eef:
 18804 0000D840 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18805 0000D841 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18806 0000D845 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18807 0000D848 C9                      	leave
 18808 0000D849 C21800                  	ret AND_KILL_FRAME(1)
 18809                                  .L_lambda_simple_end_0a97:	; new closure is in rax
 18810 0000D84C 50                      	push rax
 18811 0000D84D 6A02                    	push 2	; arg count
 18812 0000D84F 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 18813 0000D857 803805                  	cmp byte [rax], T_undefined
 18814 0000D85A 0F8437AB0000            	je L_error_fvar_undefined
 18815 0000D860 803804                  	cmp byte [rax], T_closure
 18816 0000D863 0F85B2AB0000            	jne L_error_non_closure
 18817 0000D869 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18818 0000D86C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18819 0000D86F 50                      	push rax
 18820 0000D870 488B4510                	mov rax, ENV
 18821 0000D874 488B00                  	mov rax, qword [rax + 8 * 0]
 18822 0000D877 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 18823 0000D87A 50                      	push rax
 18824 0000D87B 6A02                    	push 2	; arg count
 18825 0000D87D 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 18826 0000D885 803805                  	cmp byte [rax], T_undefined
 18827 0000D888 0F8409AB0000            	je L_error_fvar_undefined
 18828 0000D88E 803804                  	cmp byte [rax], T_closure
 18829 0000D891 0F8584AB0000            	jne L_error_non_closure
 18830 0000D897 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18831 0000D89A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18832 0000D89D FF7500                  	push qword[rbp]
 18833 0000D8A0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18834 0000D8A3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18835 0000D8A7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18836 0000D8AB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18837 0000D8AF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18838 0000D8B2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18839 0000D8B5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18840 0000D8BA 4983C103                	add r9, 3 	 ;for getting to the params
 18841 0000D8BE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18842 0000D8C2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18843                                  .L_tc_recycle_frame_loop_0ef0:
 18844 0000D8C5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18845 0000D8C8 7410                    	je .L_tc_recycle_frame_done_0ef0
 18846 0000D8CA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18847 0000D8CD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18848 0000D8D0 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18849 0000D8D4 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18850 0000D8D8 EBEB                    	jmp .L_tc_recycle_frame_loop_0ef0
 18851                                  .L_tc_recycle_frame_done_0ef0:
 18852 0000D8DA 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 18853 0000D8DB 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 18854 0000D8DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18855 0000D8E2 C9                      	leave
 18856 0000D8E3 C21800                  	ret AND_KILL_FRAME(1)
 18857 0000D8E6 E97D020000              	jmp .L_lambda_opt_end_014e	; new closure is in rax
 18858                                  .L_lambda_opt_arity_check_more_014e:
 18859 0000D8EB 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 18860 0000D8F0 49B9-                   	mov r9, sob_nil
 18860 0000D8F2 [0100000000000000] 
 18861 0000D8FA 4889E3                  	mov rbx, rsp 
 18862 0000D8FD 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 18863 0000D901 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 18864 0000D904 49C1E003                	shl r8, 3
 18865 0000D908 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 18866 0000D90B 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 18867                                  .L_lambda_opt_stack_shrink_loop_014e:
 18868 0000D910 4983F800                	cmp r8, 0
 18869 0000D914 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_014e
 18870 0000D916 BF11000000              	mov rdi, 1+8+8 ;for pair
 18871 0000D91B E8A4AB0000              	call malloc;to create the pair in the stack
 18872 0000D920 C60021                  	mov byte [rax], T_pair ; to make it a pair
 18873 0000D923 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 18874 0000D926 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 18875 0000D92A 4C894809                 	mov qword[rax+1+8],r9
 18876 0000D92E 4989C1                  	mov r9, rax ;for the recursion 
 18877 0000D931 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 18878 0000D934 4883EB08                	sub rbx, 8 ;to get the next param to copy
 18879 0000D938 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_014e
 18880                                  .L_lambda_opt_stack_shrink_loop_exit_014e:
 18881 0000D93A 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 18882 0000D93F 4883E901                	sub rcx, 1
 18883 0000D943 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 18884 0000D947 4801CC                  	add rsp, rcx ;shrinking the stack
 18885 0000D94A 4889E0                  	mov rax, rsp
 18886 0000D94D 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 18887 0000D950 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 18888 0000D954 49FFC8                  	dec r8 ;we start with param 0, not 1 
 18889 0000D957 4883C018                	add rax, 3 * 8;now rax is param 0
 18890 0000D95B 49C1E003                	shl r8, 3;convert to byte
 18891 0000D95F 4C01C0                  	add rax, r8;now rax is the top of the stack
 18892 0000D962 4C8908                  	mov qword[rax], r9;puting the list at the top
 18893 0000D965 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 18894 0000D969 4889E3                  	mov rbx, rsp 
 18895 0000D96C 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 18896 0000D96F 41BA00000000            	mov r10, 0;r10 is the not opt params length
 18897 0000D975 49FFCA                  	dec r10 
 18898 0000D978 49C1E203                	shl r10, 3;to get bytes
 18899 0000D97C 4883C318                	add rbx, 3*8;rbx is the first param
 18900 0000D980 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 18901 0000D983 4889E0                  	mov rax, rsp
 18902 0000D986 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 18903 0000D989 48C744241001000000      	mov qword [rsp+2*8], 1
 18904 0000D992 488B5808                	mov rbx, qword[rax + 8 *1]
 18905 0000D996 48895C2408              	mov qword [rsp + 1*8] ,rbx
 18906 0000D99B 488B18                  	mov rbx, qword[rax]
 18907 0000D99E 48891C24                	mov qword [rsp], rbx
 18908 0000D9A2 C8000000                	enter 0, 0
 18909                                  	; preparing a tail-call
 18910                                  	; preparing a non-tail-call
 18911 0000D9A6 488B4520                	mov rax, PARAM(0)	; param s
 18912 0000D9AA 50                      	push rax
 18913 0000D9AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18914 0000D9B0 E80FAB0000              	call malloc
 18915 0000D9B5 50                      	push rax
 18916 0000D9B6 BF08000000              	mov rdi, 8 * 1	; new rib
 18917 0000D9BB E804AB0000              	call malloc
 18918 0000D9C0 50                      	push rax
 18919 0000D9C1 BF18000000              	mov rdi, 8 * 3	; extended env
 18920 0000D9C6 E8F9AA0000              	call malloc
 18921 0000D9CB 488B7D10                	mov rdi, ENV
 18922 0000D9CF BE00000000              	mov rsi, 0
 18923 0000D9D4 BA01000000              	mov rdx, 1
 18924                                  .L_lambda_simple_env_loop_0a96:	; ext_env[i + 1] <-- env[i]
 18925 0000D9D9 4883FE02                	cmp rsi, 2
 18926 0000D9DD 7410                    	je .L_lambda_simple_env_end_0a96
 18927 0000D9DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18928 0000D9E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18929 0000D9E7 48FFC6                  	inc rsi
 18930 0000D9EA 48FFC2                  	inc rdx
 18931 0000D9ED EBEA                    	jmp .L_lambda_simple_env_loop_0a96
 18932                                  .L_lambda_simple_env_end_0a96:
 18933 0000D9EF 5B                      	pop rbx
 18934 0000D9F0 BE00000000              	mov rsi, 0
 18935                                  .L_lambda_simple_params_loop_0a96:	; copy params
 18936 0000D9F5 4883FE01                	cmp rsi, 1
 18937 0000D9F9 740E                    	je .L_lambda_simple_params_end_0a96
 18938 0000D9FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18939 0000DA00 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18940 0000DA04 48FFC6                  	inc rsi
 18941 0000DA07 EBEC                    	jmp .L_lambda_simple_params_loop_0a96
 18942                                  .L_lambda_simple_params_end_0a96:
 18943 0000DA09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18944 0000DA0C 4889C3                  	mov rbx, rax
 18945 0000DA0F 58                      	pop rax
 18946 0000DA10 C60004                  	mov byte [rax], T_closure
 18947 0000DA13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18948 0000DA17 48C74009[24DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a96
 18949 0000DA1F E9AA000000              	jmp .L_lambda_simple_end_0a96
 18950                                  .L_lambda_simple_code_0a96:	; lambda-simple body
 18951 0000DA24 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18952 0000DA2A 740B                    	je .L_lambda_simple_arity_check_ok_0a96
 18953 0000DA2C FF742410                	push qword [rsp + 8 * 2]
 18954 0000DA30 6A01                    	push 1
 18955 0000DA32 E946AA0000              	jmp L_error_incorrect_arity_simple
 18956                                  .L_lambda_simple_arity_check_ok_0a96:
 18957 0000DA37 C8000000                	enter 0, 0
 18958                                  	; preparing a tail-call
 18959                                  	; preparing a non-tail-call
 18960 0000DA3B 488B4520                	mov rax, PARAM(0)	; param ch
 18961 0000DA3F 50                      	push rax
 18962 0000DA40 6A01                    	push 1	; arg count
 18963 0000DA42 488B0425[F1130000]      	mov rax, qword [free_var_71]	; free var char-downcase
 18964 0000DA4A 803805                  	cmp byte [rax], T_undefined
 18965 0000DA4D 0F8444A90000            	je L_error_fvar_undefined
 18966 0000DA53 803804                  	cmp byte [rax], T_closure
 18967 0000DA56 0F85BFA90000            	jne L_error_non_closure
 18968 0000DA5C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18969 0000DA5F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18970 0000DA62 50                      	push rax
 18971 0000DA63 6A01                    	push 1	; arg count
 18972 0000DA65 488B0425[8B130000]      	mov rax, qword [free_var_65]	; free var char->integer
 18973 0000DA6D 803805                  	cmp byte [rax], T_undefined
 18974 0000DA70 0F8421A90000            	je L_error_fvar_undefined
 18975 0000DA76 803804                  	cmp byte [rax], T_closure
 18976 0000DA79 0F859CA90000            	jne L_error_non_closure
 18977 0000DA7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18978 0000DA82 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 18979 0000DA85 FF7500                  	push qword[rbp]
 18980 0000DA88 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 18981 0000DA8B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 18982 0000DA8F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 18983 0000DA93 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 18984 0000DA97 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 18985 0000DA9A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 18986 0000DA9D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 18987 0000DAA2 4983C103                	add r9, 3 	 ;for getting to the params
 18988 0000DAA6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 18989 0000DAAA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 18990                                  .L_tc_recycle_frame_loop_0eed:
 18991 0000DAAD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 18992 0000DAB0 7410                    	je .L_tc_recycle_frame_done_0eed
 18993 0000DAB2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 18994 0000DAB5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 18995 0000DAB8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 18996 0000DABC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 18997 0000DAC0 EBEB                    	jmp .L_tc_recycle_frame_loop_0eed
 18998                                  .L_tc_recycle_frame_done_0eed:
 18999 0000DAC2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19000 0000DAC3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19001 0000DAC7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19002 0000DACA C9                      	leave
 19003 0000DACB C21800                  	ret AND_KILL_FRAME(1)
 19004                                  .L_lambda_simple_end_0a96:	; new closure is in rax
 19005 0000DACE 50                      	push rax
 19006 0000DACF 6A02                    	push 2	; arg count
 19007 0000DAD1 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 19008 0000DAD9 803805                  	cmp byte [rax], T_undefined
 19009 0000DADC 0F84B5A80000            	je L_error_fvar_undefined
 19010 0000DAE2 803804                  	cmp byte [rax], T_closure
 19011 0000DAE5 0F8530A90000            	jne L_error_non_closure
 19012 0000DAEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19013 0000DAEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19014 0000DAF1 50                      	push rax
 19015 0000DAF2 488B4510                	mov rax, ENV
 19016 0000DAF6 488B00                  	mov rax, qword [rax + 8 * 0]
 19017 0000DAF9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var comparator
 19018 0000DAFC 50                      	push rax
 19019 0000DAFD 6A02                    	push 2	; arg count
 19020 0000DAFF 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 19021 0000DB07 803805                  	cmp byte [rax], T_undefined
 19022 0000DB0A 0F8487A80000            	je L_error_fvar_undefined
 19023 0000DB10 803804                  	cmp byte [rax], T_closure
 19024 0000DB13 0F8502A90000            	jne L_error_non_closure
 19025 0000DB19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19026 0000DB1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19027 0000DB1F FF7500                  	push qword[rbp]
 19028 0000DB22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19029 0000DB25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19030 0000DB29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19031 0000DB2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19032 0000DB31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19033 0000DB34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19034 0000DB37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19035 0000DB3C 4983C103                	add r9, 3 	 ;for getting to the params
 19036 0000DB40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19037 0000DB44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19038                                  .L_tc_recycle_frame_loop_0eee:
 19039 0000DB47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19040 0000DB4A 7410                    	je .L_tc_recycle_frame_done_0eee
 19041 0000DB4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19042 0000DB4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19043 0000DB52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19044 0000DB56 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19045 0000DB5A EBEB                    	jmp .L_tc_recycle_frame_loop_0eee
 19046                                  .L_tc_recycle_frame_done_0eee:
 19047 0000DB5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19048 0000DB5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19049 0000DB61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19050 0000DB64 C9                      	leave
 19051 0000DB65 C21800                  	ret AND_KILL_FRAME(1)
 19052                                  .L_lambda_opt_end_014e:	; new closure is in rax
 19053 0000DB68 C9                      	leave
 19054 0000DB69 C21800                  	ret AND_KILL_FRAME(1)
 19055                                  .L_lambda_simple_end_0a95:	; new closure is in rax
 19056 0000DB6C 50                      	push rax
 19057 0000DB6D 6A01                    	push 1	; arg count
 19058 0000DB6F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19059 0000DB74 E84BA90000              	call malloc
 19060 0000DB79 50                      	push rax
 19061 0000DB7A BF00000000              	mov rdi, 8 * 0	; new rib
 19062 0000DB7F E840A90000              	call malloc
 19063 0000DB84 50                      	push rax
 19064 0000DB85 BF08000000              	mov rdi, 8 * 1	; extended env
 19065 0000DB8A E835A90000              	call malloc
 19066 0000DB8F 488B7D10                	mov rdi, ENV
 19067 0000DB93 BE00000000              	mov rsi, 0
 19068 0000DB98 BA01000000              	mov rdx, 1
 19069                                  .L_lambda_simple_env_loop_0a98:	; ext_env[i + 1] <-- env[i]
 19070 0000DB9D 4883FE00                	cmp rsi, 0
 19071 0000DBA1 7410                    	je .L_lambda_simple_env_end_0a98
 19072 0000DBA3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19073 0000DBA7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19074 0000DBAB 48FFC6                  	inc rsi
 19075 0000DBAE 48FFC2                  	inc rdx
 19076 0000DBB1 EBEA                    	jmp .L_lambda_simple_env_loop_0a98
 19077                                  .L_lambda_simple_env_end_0a98:
 19078 0000DBB3 5B                      	pop rbx
 19079 0000DBB4 BE00000000              	mov rsi, 0
 19080                                  .L_lambda_simple_params_loop_0a98:	; copy params
 19081 0000DBB9 4883FE00                	cmp rsi, 0
 19082 0000DBBD 740E                    	je .L_lambda_simple_params_end_0a98
 19083 0000DBBF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19084 0000DBC4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19085 0000DBC8 48FFC6                  	inc rsi
 19086 0000DBCB EBEC                    	jmp .L_lambda_simple_params_loop_0a98
 19087                                  .L_lambda_simple_params_end_0a98:
 19088 0000DBCD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19089 0000DBD0 4889C3                  	mov rbx, rax
 19090 0000DBD3 58                      	pop rax
 19091 0000DBD4 C60004                  	mov byte [rax], T_closure
 19092 0000DBD7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19093 0000DBDB 48C74009[E8DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a98
 19094 0000DBE3 E938010000              	jmp .L_lambda_simple_end_0a98
 19095                                  .L_lambda_simple_code_0a98:	; lambda-simple body
 19096 0000DBE8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19097 0000DBEE 740B                    	je .L_lambda_simple_arity_check_ok_0a98
 19098 0000DBF0 FF742410                	push qword [rsp + 8 * 2]
 19099 0000DBF4 6A01                    	push 1
 19100 0000DBF6 E982A80000              	jmp L_error_incorrect_arity_simple
 19101                                  .L_lambda_simple_arity_check_ok_0a98:
 19102 0000DBFB C8000000                	enter 0, 0
 19103                                  	; preparing a non-tail-call
 19104 0000DBFF 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 19105 0000DC07 803805                  	cmp byte [rax], T_undefined
 19106 0000DC0A 0F8487A70000            	je L_error_fvar_undefined
 19107 0000DC10 50                      	push rax
 19108 0000DC11 6A01                    	push 1	; arg count
 19109 0000DC13 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19110 0000DC17 803804                  	cmp byte [rax], T_closure
 19111 0000DC1A 0F85FBA70000            	jne L_error_non_closure
 19112 0000DC20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19113 0000DC23 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19114 0000DC26 48890425[AD130000]      	mov qword [free_var_67], rax
 19115 0000DC2E 48B8-                   	mov rax, sob_void
 19115 0000DC30 [0000000000000000] 
 19116                                  
 19117                                  	; preparing a non-tail-call
 19118 0000DC38 488B0425[8F0F0000]      	mov rax, qword [free_var_5]	; free var <=
 19119 0000DC40 803805                  	cmp byte [rax], T_undefined
 19120 0000DC43 0F844EA70000            	je L_error_fvar_undefined
 19121 0000DC49 50                      	push rax
 19122 0000DC4A 6A01                    	push 1	; arg count
 19123 0000DC4C 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19124 0000DC50 803804                  	cmp byte [rax], T_closure
 19125 0000DC53 0F85C2A70000            	jne L_error_non_closure
 19126 0000DC59 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19127 0000DC5C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19128 0000DC5F 48890425[9C130000]      	mov qword [free_var_66], rax
 19129 0000DC67 48B8-                   	mov rax, sob_void
 19129 0000DC69 [0000000000000000] 
 19130                                  
 19131                                  	; preparing a non-tail-call
 19132 0000DC71 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 19133 0000DC79 803805                  	cmp byte [rax], T_undefined
 19134 0000DC7C 0F8415A70000            	je L_error_fvar_undefined
 19135 0000DC82 50                      	push rax
 19136 0000DC83 6A01                    	push 1	; arg count
 19137 0000DC85 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19138 0000DC89 803804                  	cmp byte [rax], T_closure
 19139 0000DC8C 0F8589A70000            	jne L_error_non_closure
 19140 0000DC92 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19141 0000DC95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19142 0000DC98 48890425[BE130000]      	mov qword [free_var_68], rax
 19143 0000DCA0 48B8-                   	mov rax, sob_void
 19143 0000DCA2 [0000000000000000] 
 19144                                  
 19145                                  	; preparing a non-tail-call
 19146 0000DCAA 488B0425[B10F0000]      	mov rax, qword [free_var_7]	; free var >
 19147 0000DCB2 803805                  	cmp byte [rax], T_undefined
 19148 0000DCB5 0F84DCA60000            	je L_error_fvar_undefined
 19149 0000DCBB 50                      	push rax
 19150 0000DCBC 6A01                    	push 1	; arg count
 19151 0000DCBE 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19152 0000DCC2 803804                  	cmp byte [rax], T_closure
 19153 0000DCC5 0F8550A70000            	jne L_error_non_closure
 19154 0000DCCB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19155 0000DCCE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19156 0000DCD1 48890425[E0130000]      	mov qword [free_var_70], rax
 19157 0000DCD9 48B8-                   	mov rax, sob_void
 19157 0000DCDB [0000000000000000] 
 19158                                  
 19159                                  	; preparing a non-tail-call
 19160 0000DCE3 488B0425[C20F0000]      	mov rax, qword [free_var_8]	; free var >=
 19161 0000DCEB 803805                  	cmp byte [rax], T_undefined
 19162 0000DCEE 0F84A3A60000            	je L_error_fvar_undefined
 19163 0000DCF4 50                      	push rax
 19164 0000DCF5 6A01                    	push 1	; arg count
 19165 0000DCF7 488B4520                	mov rax, PARAM(0)	; param make-char-ci-comparator
 19166 0000DCFB 803804                  	cmp byte [rax], T_closure
 19167 0000DCFE 0F8517A70000            	jne L_error_non_closure
 19168 0000DD04 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19169 0000DD07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19170 0000DD0A 48890425[CF130000]      	mov qword [free_var_69], rax
 19171 0000DD12 48B8-                   	mov rax, sob_void
 19171 0000DD14 [0000000000000000] 
 19172 0000DD1C C9                      	leave
 19173 0000DD1D C21800                  	ret AND_KILL_FRAME(1)
 19174                                  .L_lambda_simple_end_0a98:	; new closure is in rax
 19175 0000DD20 803804                  	cmp byte [rax], T_closure
 19176 0000DD23 0F85F2A60000            	jne L_error_non_closure
 19177 0000DD29 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19178 0000DD2C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19179                                  
 19180 0000DD2F 4889C7                  	mov rdi, rax
 19181 0000DD32 E8E2A90000              	call print_sexpr_if_not_void
 19182 0000DD37 48B8-                   	mov rax, L_constants + 0
 19182 0000DD39 [0000000000000000] 
 19183 0000DD41 48890425[98170000]      	mov qword [free_var_126], rax
 19184 0000DD49 48B8-                   	mov rax, sob_void
 19184 0000DD4B [0000000000000000] 
 19185                                  
 19186 0000DD53 4889C7                  	mov rdi, rax
 19187 0000DD56 E8BEA90000              	call print_sexpr_if_not_void
 19188 0000DD5B 48B8-                   	mov rax, L_constants + 0
 19188 0000DD5D [0000000000000000] 
 19189 0000DD65 48890425[FE170000]      	mov qword [free_var_132], rax
 19190 0000DD6D 48B8-                   	mov rax, sob_void
 19190 0000DD6F [0000000000000000] 
 19191                                  
 19192 0000DD77 4889C7                  	mov rdi, rax
 19193 0000DD7A E89AA90000              	call print_sexpr_if_not_void
 19194                                  	; preparing a non-tail-call
 19195 0000DD7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19196 0000DD84 E83BA70000              	call malloc
 19197 0000DD89 50                      	push rax
 19198 0000DD8A BF00000000              	mov rdi, 8 * 0	; new rib
 19199 0000DD8F E830A70000              	call malloc
 19200 0000DD94 50                      	push rax
 19201 0000DD95 BF08000000              	mov rdi, 8 * 1	; extended env
 19202 0000DD9A E825A70000              	call malloc
 19203 0000DD9F 488B7D10                	mov rdi, ENV
 19204 0000DDA3 BE00000000              	mov rsi, 0
 19205 0000DDA8 BA01000000              	mov rdx, 1
 19206                                  .L_lambda_simple_env_loop_0a99:	; ext_env[i + 1] <-- env[i]
 19207 0000DDAD 4883FE00                	cmp rsi, 0
 19208 0000DDB1 7410                    	je .L_lambda_simple_env_end_0a99
 19209 0000DDB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19210 0000DDB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19211 0000DDBB 48FFC6                  	inc rsi
 19212 0000DDBE 48FFC2                  	inc rdx
 19213 0000DDC1 EBEA                    	jmp .L_lambda_simple_env_loop_0a99
 19214                                  .L_lambda_simple_env_end_0a99:
 19215 0000DDC3 5B                      	pop rbx
 19216 0000DDC4 BE00000000              	mov rsi, 0
 19217                                  .L_lambda_simple_params_loop_0a99:	; copy params
 19218 0000DDC9 4883FE00                	cmp rsi, 0
 19219 0000DDCD 740E                    	je .L_lambda_simple_params_end_0a99
 19220 0000DDCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19221 0000DDD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19222 0000DDD8 48FFC6                  	inc rsi
 19223 0000DDDB EBEC                    	jmp .L_lambda_simple_params_loop_0a99
 19224                                  .L_lambda_simple_params_end_0a99:
 19225 0000DDDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19226 0000DDE0 4889C3                  	mov rbx, rax
 19227 0000DDE3 58                      	pop rax
 19228 0000DDE4 C60004                  	mov byte [rax], T_closure
 19229 0000DDE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19230 0000DDEB 48C74009[F8DD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a99
 19231 0000DDF3 E96C010000              	jmp .L_lambda_simple_end_0a99
 19232                                  .L_lambda_simple_code_0a99:	; lambda-simple body
 19233 0000DDF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19234 0000DDFE 740B                    	je .L_lambda_simple_arity_check_ok_0a99
 19235 0000DE00 FF742410                	push qword [rsp + 8 * 2]
 19236 0000DE04 6A01                    	push 1
 19237 0000DE06 E972A60000              	jmp L_error_incorrect_arity_simple
 19238                                  .L_lambda_simple_arity_check_ok_0a99:
 19239 0000DE0B C8000000                	enter 0, 0
 19240 0000DE0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19241 0000DE14 E8ABA60000              	call malloc
 19242 0000DE19 50                      	push rax
 19243 0000DE1A BF08000000              	mov rdi, 8 * 1	; new rib
 19244 0000DE1F E8A0A60000              	call malloc
 19245 0000DE24 50                      	push rax
 19246 0000DE25 BF10000000              	mov rdi, 8 * 2	; extended env
 19247 0000DE2A E895A60000              	call malloc
 19248 0000DE2F 488B7D10                	mov rdi, ENV
 19249 0000DE33 BE00000000              	mov rsi, 0
 19250 0000DE38 BA01000000              	mov rdx, 1
 19251                                  .L_lambda_simple_env_loop_0a9a:	; ext_env[i + 1] <-- env[i]
 19252 0000DE3D 4883FE01                	cmp rsi, 1
 19253 0000DE41 7410                    	je .L_lambda_simple_env_end_0a9a
 19254 0000DE43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19255 0000DE47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19256 0000DE4B 48FFC6                  	inc rsi
 19257 0000DE4E 48FFC2                  	inc rdx
 19258 0000DE51 EBEA                    	jmp .L_lambda_simple_env_loop_0a9a
 19259                                  .L_lambda_simple_env_end_0a9a:
 19260 0000DE53 5B                      	pop rbx
 19261 0000DE54 BE00000000              	mov rsi, 0
 19262                                  .L_lambda_simple_params_loop_0a9a:	; copy params
 19263 0000DE59 4883FE01                	cmp rsi, 1
 19264 0000DE5D 740E                    	je .L_lambda_simple_params_end_0a9a
 19265 0000DE5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19266 0000DE64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19267 0000DE68 48FFC6                  	inc rsi
 19268 0000DE6B EBEC                    	jmp .L_lambda_simple_params_loop_0a9a
 19269                                  .L_lambda_simple_params_end_0a9a:
 19270 0000DE6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19271 0000DE70 4889C3                  	mov rbx, rax
 19272 0000DE73 58                      	pop rax
 19273 0000DE74 C60004                  	mov byte [rax], T_closure
 19274 0000DE77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19275 0000DE7B 48C74009[88DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a9a
 19276 0000DE83 E9D8000000              	jmp .L_lambda_simple_end_0a9a
 19277                                  .L_lambda_simple_code_0a9a:	; lambda-simple body
 19278 0000DE88 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19279 0000DE8E 740B                    	je .L_lambda_simple_arity_check_ok_0a9a
 19280 0000DE90 FF742410                	push qword [rsp + 8 * 2]
 19281 0000DE94 6A01                    	push 1
 19282 0000DE96 E9E2A50000              	jmp L_error_incorrect_arity_simple
 19283                                  .L_lambda_simple_arity_check_ok_0a9a:
 19284 0000DE9B C8000000                	enter 0, 0
 19285                                  	; preparing a tail-call
 19286                                  	; preparing a non-tail-call
 19287                                  	; preparing a non-tail-call
 19288 0000DE9F 488B4520                	mov rax, PARAM(0)	; param str
 19289 0000DEA3 50                      	push rax
 19290 0000DEA4 6A01                    	push 1	; arg count
 19291 0000DEA6 488B0425[21170000]      	mov rax, qword [free_var_119]	; free var string->list
 19292 0000DEAE 803805                  	cmp byte [rax], T_undefined
 19293 0000DEB1 0F84E0A40000            	je L_error_fvar_undefined
 19294 0000DEB7 803804                  	cmp byte [rax], T_closure
 19295 0000DEBA 0F855BA50000            	jne L_error_non_closure
 19296 0000DEC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19297 0000DEC3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19298 0000DEC6 50                      	push rax
 19299 0000DEC7 488B4510                	mov rax, ENV
 19300 0000DECB 488B00                  	mov rax, qword [rax + 8 * 0]
 19301 0000DECE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char-case-converter
 19302 0000DED1 50                      	push rax
 19303 0000DED2 6A02                    	push 2	; arg count
 19304 0000DED4 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 19305 0000DEDC 803805                  	cmp byte [rax], T_undefined
 19306 0000DEDF 0F84B2A40000            	je L_error_fvar_undefined
 19307 0000DEE5 803804                  	cmp byte [rax], T_closure
 19308 0000DEE8 0F852DA50000            	jne L_error_non_closure
 19309 0000DEEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19310 0000DEF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19311 0000DEF4 50                      	push rax
 19312 0000DEF5 6A01                    	push 1	; arg count
 19313 0000DEF7 488B0425[78150000]      	mov rax, qword [free_var_94]	; free var list->string
 19314 0000DEFF 803805                  	cmp byte [rax], T_undefined
 19315 0000DF02 0F848FA40000            	je L_error_fvar_undefined
 19316 0000DF08 803804                  	cmp byte [rax], T_closure
 19317 0000DF0B 0F850AA50000            	jne L_error_non_closure
 19318 0000DF11 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19319 0000DF14 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19320 0000DF17 FF7500                  	push qword[rbp]
 19321 0000DF1A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19322 0000DF1D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19323 0000DF21 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19324 0000DF25 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19325 0000DF29 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19326 0000DF2C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19327 0000DF2F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19328 0000DF34 4983C103                	add r9, 3 	 ;for getting to the params
 19329 0000DF38 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19330 0000DF3C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19331                                  .L_tc_recycle_frame_loop_0ef1:
 19332 0000DF3F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19333 0000DF42 7410                    	je .L_tc_recycle_frame_done_0ef1
 19334 0000DF44 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19335 0000DF47 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19336 0000DF4A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19337 0000DF4E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19338 0000DF52 EBEB                    	jmp .L_tc_recycle_frame_loop_0ef1
 19339                                  .L_tc_recycle_frame_done_0ef1:
 19340 0000DF54 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19341 0000DF55 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19342 0000DF59 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19343 0000DF5C C9                      	leave
 19344 0000DF5D C21800                  	ret AND_KILL_FRAME(1)
 19345                                  .L_lambda_simple_end_0a9a:	; new closure is in rax
 19346 0000DF60 C9                      	leave
 19347 0000DF61 C21800                  	ret AND_KILL_FRAME(1)
 19348                                  .L_lambda_simple_end_0a99:	; new closure is in rax
 19349 0000DF64 50                      	push rax
 19350 0000DF65 6A01                    	push 1	; arg count
 19351 0000DF67 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19352 0000DF6C E853A50000              	call malloc
 19353 0000DF71 50                      	push rax
 19354 0000DF72 BF00000000              	mov rdi, 8 * 0	; new rib
 19355 0000DF77 E848A50000              	call malloc
 19356 0000DF7C 50                      	push rax
 19357 0000DF7D BF08000000              	mov rdi, 8 * 1	; extended env
 19358 0000DF82 E83DA50000              	call malloc
 19359 0000DF87 488B7D10                	mov rdi, ENV
 19360 0000DF8B BE00000000              	mov rsi, 0
 19361 0000DF90 BA01000000              	mov rdx, 1
 19362                                  .L_lambda_simple_env_loop_0a9b:	; ext_env[i + 1] <-- env[i]
 19363 0000DF95 4883FE00                	cmp rsi, 0
 19364 0000DF99 7410                    	je .L_lambda_simple_env_end_0a9b
 19365 0000DF9B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19366 0000DF9F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19367 0000DFA3 48FFC6                  	inc rsi
 19368 0000DFA6 48FFC2                  	inc rdx
 19369 0000DFA9 EBEA                    	jmp .L_lambda_simple_env_loop_0a9b
 19370                                  .L_lambda_simple_env_end_0a9b:
 19371 0000DFAB 5B                      	pop rbx
 19372 0000DFAC BE00000000              	mov rsi, 0
 19373                                  .L_lambda_simple_params_loop_0a9b:	; copy params
 19374 0000DFB1 4883FE00                	cmp rsi, 0
 19375 0000DFB5 740E                    	je .L_lambda_simple_params_end_0a9b
 19376 0000DFB7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19377 0000DFBC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19378 0000DFC0 48FFC6                  	inc rsi
 19379 0000DFC3 EBEC                    	jmp .L_lambda_simple_params_loop_0a9b
 19380                                  .L_lambda_simple_params_end_0a9b:
 19381 0000DFC5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19382 0000DFC8 4889C3                  	mov rbx, rax
 19383 0000DFCB 58                      	pop rax
 19384 0000DFCC C60004                  	mov byte [rax], T_closure
 19385 0000DFCF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19386 0000DFD3 48C74009[E0DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a9b
 19387 0000DFDB E98D000000              	jmp .L_lambda_simple_end_0a9b
 19388                                  .L_lambda_simple_code_0a9b:	; lambda-simple body
 19389 0000DFE0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19390 0000DFE6 740B                    	je .L_lambda_simple_arity_check_ok_0a9b
 19391 0000DFE8 FF742410                	push qword [rsp + 8 * 2]
 19392 0000DFEC 6A01                    	push 1
 19393 0000DFEE E98AA40000              	jmp L_error_incorrect_arity_simple
 19394                                  .L_lambda_simple_arity_check_ok_0a9b:
 19395 0000DFF3 C8000000                	enter 0, 0
 19396                                  	; preparing a non-tail-call
 19397 0000DFF7 488B0425[F1130000]      	mov rax, qword [free_var_71]	; free var char-downcase
 19398 0000DFFF 803805                  	cmp byte [rax], T_undefined
 19399 0000E002 0F848FA30000            	je L_error_fvar_undefined
 19400 0000E008 50                      	push rax
 19401 0000E009 6A01                    	push 1	; arg count
 19402 0000E00B 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19403 0000E00F 803804                  	cmp byte [rax], T_closure
 19404 0000E012 0F8503A40000            	jne L_error_non_closure
 19405 0000E018 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19406 0000E01B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19407 0000E01E 48890425[98170000]      	mov qword [free_var_126], rax
 19408 0000E026 48B8-                   	mov rax, sob_void
 19408 0000E028 [0000000000000000] 
 19409                                  
 19410                                  	; preparing a non-tail-call
 19411 0000E030 488B0425[02140000]      	mov rax, qword [free_var_72]	; free var char-upcase
 19412 0000E038 803805                  	cmp byte [rax], T_undefined
 19413 0000E03B 0F8456A30000            	je L_error_fvar_undefined
 19414 0000E041 50                      	push rax
 19415 0000E042 6A01                    	push 1	; arg count
 19416 0000E044 488B4520                	mov rax, PARAM(0)	; param make-string-case-converter
 19417 0000E048 803804                  	cmp byte [rax], T_closure
 19418 0000E04B 0F85CAA30000            	jne L_error_non_closure
 19419 0000E051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19420 0000E054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19421 0000E057 48890425[FE170000]      	mov qword [free_var_132], rax
 19422 0000E05F 48B8-                   	mov rax, sob_void
 19422 0000E061 [0000000000000000] 
 19423 0000E069 C9                      	leave
 19424 0000E06A C21800                  	ret AND_KILL_FRAME(1)
 19425                                  .L_lambda_simple_end_0a9b:	; new closure is in rax
 19426 0000E06D 803804                  	cmp byte [rax], T_closure
 19427 0000E070 0F85A5A30000            	jne L_error_non_closure
 19428 0000E076 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19429 0000E079 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19430                                  
 19431 0000E07C 4889C7                  	mov rdi, rax
 19432 0000E07F E895A60000              	call print_sexpr_if_not_void
 19433 0000E084 48B8-                   	mov rax, L_constants + 0
 19433 0000E086 [0000000000000000] 
 19434 0000E08E 48890425[20180000]      	mov qword [free_var_134], rax
 19435 0000E096 48B8-                   	mov rax, sob_void
 19435 0000E098 [0000000000000000] 
 19436                                  
 19437 0000E0A0 4889C7                  	mov rdi, rax
 19438 0000E0A3 E871A60000              	call print_sexpr_if_not_void
 19439 0000E0A8 48B8-                   	mov rax, L_constants + 0
 19439 0000E0AA [0000000000000000] 
 19440 0000E0B2 48890425[0F180000]      	mov qword [free_var_133], rax
 19441 0000E0BA 48B8-                   	mov rax, sob_void
 19441 0000E0BC [0000000000000000] 
 19442                                  
 19443 0000E0C4 4889C7                  	mov rdi, rax
 19444 0000E0C7 E84DA60000              	call print_sexpr_if_not_void
 19445 0000E0CC 48B8-                   	mov rax, L_constants + 0
 19445 0000E0CE [0000000000000000] 
 19446 0000E0D6 48890425[31180000]      	mov qword [free_var_135], rax
 19447 0000E0DE 48B8-                   	mov rax, sob_void
 19447 0000E0E0 [0000000000000000] 
 19448                                  
 19449 0000E0E8 4889C7                  	mov rdi, rax
 19450 0000E0EB E829A60000              	call print_sexpr_if_not_void
 19451 0000E0F0 48B8-                   	mov rax, L_constants + 0
 19451 0000E0F2 [0000000000000000] 
 19452 0000E0FA 48890425[42180000]      	mov qword [free_var_136], rax
 19453 0000E102 48B8-                   	mov rax, sob_void
 19453 0000E104 [0000000000000000] 
 19454                                  
 19455 0000E10C 4889C7                  	mov rdi, rax
 19456 0000E10F E805A60000              	call print_sexpr_if_not_void
 19457 0000E114 48B8-                   	mov rax, L_constants + 0
 19457 0000E116 [0000000000000000] 
 19458 0000E11E 48890425[53180000]      	mov qword [free_var_137], rax
 19459 0000E126 48B8-                   	mov rax, sob_void
 19459 0000E128 [0000000000000000] 
 19460                                  
 19461 0000E130 4889C7                  	mov rdi, rax
 19462 0000E133 E8E1A50000              	call print_sexpr_if_not_void
 19463 0000E138 48B8-                   	mov rax, L_constants + 0
 19463 0000E13A [0000000000000000] 
 19464 0000E142 48890425[54170000]      	mov qword [free_var_122], rax
 19465 0000E14A 48B8-                   	mov rax, sob_void
 19465 0000E14C [0000000000000000] 
 19466                                  
 19467 0000E154 4889C7                  	mov rdi, rax
 19468 0000E157 E8BDA50000              	call print_sexpr_if_not_void
 19469 0000E15C 48B8-                   	mov rax, L_constants + 0
 19469 0000E15E [0000000000000000] 
 19470 0000E166 48890425[43170000]      	mov qword [free_var_121], rax
 19471 0000E16E 48B8-                   	mov rax, sob_void
 19471 0000E170 [0000000000000000] 
 19472                                  
 19473 0000E178 4889C7                  	mov rdi, rax
 19474 0000E17B E899A50000              	call print_sexpr_if_not_void
 19475 0000E180 48B8-                   	mov rax, L_constants + 0
 19475 0000E182 [0000000000000000] 
 19476 0000E18A 48890425[65170000]      	mov qword [free_var_123], rax
 19477 0000E192 48B8-                   	mov rax, sob_void
 19477 0000E194 [0000000000000000] 
 19478                                  
 19479 0000E19C 4889C7                  	mov rdi, rax
 19480 0000E19F E875A50000              	call print_sexpr_if_not_void
 19481 0000E1A4 48B8-                   	mov rax, L_constants + 0
 19481 0000E1A6 [0000000000000000] 
 19482 0000E1AE 48890425[76170000]      	mov qword [free_var_124], rax
 19483 0000E1B6 48B8-                   	mov rax, sob_void
 19483 0000E1B8 [0000000000000000] 
 19484                                  
 19485 0000E1C0 4889C7                  	mov rdi, rax
 19486 0000E1C3 E851A50000              	call print_sexpr_if_not_void
 19487 0000E1C8 48B8-                   	mov rax, L_constants + 0
 19487 0000E1CA [0000000000000000] 
 19488 0000E1D2 48890425[87170000]      	mov qword [free_var_125], rax
 19489 0000E1DA 48B8-                   	mov rax, sob_void
 19489 0000E1DC [0000000000000000] 
 19490                                  
 19491 0000E1E4 4889C7                  	mov rdi, rax
 19492 0000E1E7 E82DA50000              	call print_sexpr_if_not_void
 19493                                  	; preparing a non-tail-call
 19494 0000E1EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19495 0000E1F1 E8CEA20000              	call malloc
 19496 0000E1F6 50                      	push rax
 19497 0000E1F7 BF00000000              	mov rdi, 8 * 0	; new rib
 19498 0000E1FC E8C3A20000              	call malloc
 19499 0000E201 50                      	push rax
 19500 0000E202 BF08000000              	mov rdi, 8 * 1	; extended env
 19501 0000E207 E8B8A20000              	call malloc
 19502 0000E20C 488B7D10                	mov rdi, ENV
 19503 0000E210 BE00000000              	mov rsi, 0
 19504 0000E215 BA01000000              	mov rdx, 1
 19505                                  .L_lambda_simple_env_loop_0a9c:	; ext_env[i + 1] <-- env[i]
 19506 0000E21A 4883FE00                	cmp rsi, 0
 19507 0000E21E 7410                    	je .L_lambda_simple_env_end_0a9c
 19508 0000E220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19509 0000E224 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19510 0000E228 48FFC6                  	inc rsi
 19511 0000E22B 48FFC2                  	inc rdx
 19512 0000E22E EBEA                    	jmp .L_lambda_simple_env_loop_0a9c
 19513                                  .L_lambda_simple_env_end_0a9c:
 19514 0000E230 5B                      	pop rbx
 19515 0000E231 BE00000000              	mov rsi, 0
 19516                                  .L_lambda_simple_params_loop_0a9c:	; copy params
 19517 0000E236 4883FE00                	cmp rsi, 0
 19518 0000E23A 740E                    	je .L_lambda_simple_params_end_0a9c
 19519 0000E23C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19520 0000E241 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19521 0000E245 48FFC6                  	inc rsi
 19522 0000E248 EBEC                    	jmp .L_lambda_simple_params_loop_0a9c
 19523                                  .L_lambda_simple_params_end_0a9c:
 19524 0000E24A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19525 0000E24D 4889C3                  	mov rbx, rax
 19526 0000E250 58                      	pop rax
 19527 0000E251 C60004                  	mov byte [rax], T_closure
 19528 0000E254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19529 0000E258 48C74009[65E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a9c
 19530 0000E260 E9E10D0000              	jmp .L_lambda_simple_end_0a9c
 19531                                  .L_lambda_simple_code_0a9c:	; lambda-simple body
 19532 0000E265 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19533 0000E26B 740B                    	je .L_lambda_simple_arity_check_ok_0a9c
 19534 0000E26D FF742410                	push qword [rsp + 8 * 2]
 19535 0000E271 6A02                    	push 2
 19536 0000E273 E905A20000              	jmp L_error_incorrect_arity_simple
 19537                                  .L_lambda_simple_arity_check_ok_0a9c:
 19538 0000E278 C8000000                	enter 0, 0
 19539                                  	; preparing a tail-call
 19540 0000E27C 48B8-                   	mov rax, L_constants + 1993
 19540 0000E27E [C907000000000000] 
 19541 0000E286 50                      	push rax
 19542 0000E287 6A01                    	push 1	; arg count
 19543 0000E289 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19544 0000E28E E831A20000              	call malloc
 19545 0000E293 50                      	push rax
 19546 0000E294 BF10000000              	mov rdi, 8 * 2	; new rib
 19547 0000E299 E826A20000              	call malloc
 19548 0000E29E 50                      	push rax
 19549 0000E29F BF10000000              	mov rdi, 8 * 2	; extended env
 19550 0000E2A4 E81BA20000              	call malloc
 19551 0000E2A9 488B7D10                	mov rdi, ENV
 19552 0000E2AD BE00000000              	mov rsi, 0
 19553 0000E2B2 BA01000000              	mov rdx, 1
 19554                                  .L_lambda_simple_env_loop_0a9d:	; ext_env[i + 1] <-- env[i]
 19555 0000E2B7 4883FE01                	cmp rsi, 1
 19556 0000E2BB 7410                    	je .L_lambda_simple_env_end_0a9d
 19557 0000E2BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19558 0000E2C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19559 0000E2C5 48FFC6                  	inc rsi
 19560 0000E2C8 48FFC2                  	inc rdx
 19561 0000E2CB EBEA                    	jmp .L_lambda_simple_env_loop_0a9d
 19562                                  .L_lambda_simple_env_end_0a9d:
 19563 0000E2CD 5B                      	pop rbx
 19564 0000E2CE BE00000000              	mov rsi, 0
 19565                                  .L_lambda_simple_params_loop_0a9d:	; copy params
 19566 0000E2D3 4883FE02                	cmp rsi, 2
 19567 0000E2D7 740E                    	je .L_lambda_simple_params_end_0a9d
 19568 0000E2D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19569 0000E2DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19570 0000E2E2 48FFC6                  	inc rsi
 19571 0000E2E5 EBEC                    	jmp .L_lambda_simple_params_loop_0a9d
 19572                                  .L_lambda_simple_params_end_0a9d:
 19573 0000E2E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19574 0000E2EA 4889C3                  	mov rbx, rax
 19575 0000E2ED 58                      	pop rax
 19576 0000E2EE C60004                  	mov byte [rax], T_closure
 19577 0000E2F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19578 0000E2F5 48C74009[02E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a9d
 19579 0000E2FD E9EC0C0000              	jmp .L_lambda_simple_end_0a9d
 19580                                  .L_lambda_simple_code_0a9d:	; lambda-simple body
 19581 0000E302 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19582 0000E308 740B                    	je .L_lambda_simple_arity_check_ok_0a9d
 19583 0000E30A FF742410                	push qword [rsp + 8 * 2]
 19584 0000E30E 6A01                    	push 1
 19585 0000E310 E968A10000              	jmp L_error_incorrect_arity_simple
 19586                                  .L_lambda_simple_arity_check_ok_0a9d:
 19587 0000E315 C8000000                	enter 0, 0
 19588 0000E319 BF08000000              	mov rdi, 8*1
 19589 0000E31E E8A1A10000              	call malloc
 19590 0000E323 488B5D20                	mov rbx, PARAM(0)
 19591 0000E327 488918                  	mov qword[rax], rbx
 19592 0000E32A 48894520                	mov PARAM(0), rax
 19593 0000E32E 48B8-                   	mov rax, sob_void
 19593 0000E330 [0000000000000000] 
 19594                                  
 19595 0000E338 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19596 0000E33D E882A10000              	call malloc
 19597 0000E342 50                      	push rax
 19598 0000E343 BF08000000              	mov rdi, 8 * 1	; new rib
 19599 0000E348 E877A10000              	call malloc
 19600 0000E34D 50                      	push rax
 19601 0000E34E BF18000000              	mov rdi, 8 * 3	; extended env
 19602 0000E353 E86CA10000              	call malloc
 19603 0000E358 488B7D10                	mov rdi, ENV
 19604 0000E35C BE00000000              	mov rsi, 0
 19605 0000E361 BA01000000              	mov rdx, 1
 19606                                  .L_lambda_simple_env_loop_0a9e:	; ext_env[i + 1] <-- env[i]
 19607 0000E366 4883FE02                	cmp rsi, 2
 19608 0000E36A 7410                    	je .L_lambda_simple_env_end_0a9e
 19609 0000E36C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19610 0000E370 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19611 0000E374 48FFC6                  	inc rsi
 19612 0000E377 48FFC2                  	inc rdx
 19613 0000E37A EBEA                    	jmp .L_lambda_simple_env_loop_0a9e
 19614                                  .L_lambda_simple_env_end_0a9e:
 19615 0000E37C 5B                      	pop rbx
 19616 0000E37D BE00000000              	mov rsi, 0
 19617                                  .L_lambda_simple_params_loop_0a9e:	; copy params
 19618 0000E382 4883FE01                	cmp rsi, 1
 19619 0000E386 740E                    	je .L_lambda_simple_params_end_0a9e
 19620 0000E388 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19621 0000E38D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19622 0000E391 48FFC6                  	inc rsi
 19623 0000E394 EBEC                    	jmp .L_lambda_simple_params_loop_0a9e
 19624                                  .L_lambda_simple_params_end_0a9e:
 19625 0000E396 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19626 0000E399 4889C3                  	mov rbx, rax
 19627 0000E39C 58                      	pop rax
 19628 0000E39D C60004                  	mov byte [rax], T_closure
 19629 0000E3A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19630 0000E3A4 48C74009[B1E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a9e
 19631 0000E3AC E992020000              	jmp .L_lambda_simple_end_0a9e
 19632                                  .L_lambda_simple_code_0a9e:	; lambda-simple body
 19633 0000E3B1 48837C241005            	cmp qword [rsp + 8 * 2], 5
 19634 0000E3B7 740B                    	je .L_lambda_simple_arity_check_ok_0a9e
 19635 0000E3B9 FF742410                	push qword [rsp + 8 * 2]
 19636 0000E3BD 6A05                    	push 5
 19637 0000E3BF E9B9A00000              	jmp L_error_incorrect_arity_simple
 19638                                  .L_lambda_simple_arity_check_ok_0a9e:
 19639 0000E3C4 C8000000                	enter 0, 0
 19640                                  	; preparing a non-tail-call
 19641 0000E3C8 488B4530                	mov rax, PARAM(2)	; param len1
 19642 0000E3CC 50                      	push rax
 19643 0000E3CD 488B4520                	mov rax, PARAM(0)	; param i
 19644 0000E3D1 50                      	push rax
 19645 0000E3D2 6A02                    	push 2	; arg count
 19646 0000E3D4 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 19647 0000E3DC 803805                  	cmp byte [rax], T_undefined
 19648 0000E3DF 0F84B29F0000            	je L_error_fvar_undefined
 19649 0000E3E5 803804                  	cmp byte [rax], T_closure
 19650 0000E3E8 0F852DA00000            	jne L_error_non_closure
 19651 0000E3EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19652 0000E3F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19653 0000E3F4 483D[02000000]          	cmp rax, sob_boolean_false
 19654 0000E3FA 742E                    	je .L_if_else_0803
 19655                                  	; preparing a non-tail-call
 19656 0000E3FC 488B4540                	mov rax, PARAM(4)	; param len2
 19657 0000E400 50                      	push rax
 19658 0000E401 488B4530                	mov rax, PARAM(2)	; param len1
 19659 0000E405 50                      	push rax
 19660 0000E406 6A02                    	push 2	; arg count
 19661 0000E408 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 19662 0000E410 803805                  	cmp byte [rax], T_undefined
 19663 0000E413 0F847E9F0000            	je L_error_fvar_undefined
 19664 0000E419 803804                  	cmp byte [rax], T_closure
 19665 0000E41C 0F85F99F0000            	jne L_error_non_closure
 19666 0000E422 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19667 0000E425 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19668 0000E428 EB0A                    	jmp .L_if_end_0803
 19669                                  .L_if_else_0803:
 19670 0000E42A 48B8-                   	mov rax, L_constants + 2
 19670 0000E42C [0200000000000000] 
 19671                                  .L_if_end_0803:
 19672 0000E434 483D[02000000]          	cmp rax, sob_boolean_false
 19673 0000E43A 0F85FF010000            	jne .L_or_end_00e9
 19674                                  	; preparing a non-tail-call
 19675 0000E440 488B4530                	mov rax, PARAM(2)	; param len1
 19676 0000E444 50                      	push rax
 19677 0000E445 488B4520                	mov rax, PARAM(0)	; param i
 19678 0000E449 50                      	push rax
 19679 0000E44A 6A02                    	push 2	; arg count
 19680 0000E44C 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 19681 0000E454 803805                  	cmp byte [rax], T_undefined
 19682 0000E457 0F843A9F0000            	je L_error_fvar_undefined
 19683 0000E45D 803804                  	cmp byte [rax], T_closure
 19684 0000E460 0F85B59F0000            	jne L_error_non_closure
 19685 0000E466 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19686 0000E469 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19687 0000E46C 483D[02000000]          	cmp rax, sob_boolean_false
 19688 0000E472 0F84BD010000            	je .L_if_else_0805
 19689                                  	; preparing a non-tail-call
 19690                                  	; preparing a non-tail-call
 19691 0000E478 488B4520                	mov rax, PARAM(0)	; param i
 19692 0000E47C 50                      	push rax
 19693 0000E47D 488B4538                	mov rax, PARAM(3)	; param str2
 19694 0000E481 50                      	push rax
 19695 0000E482 6A02                    	push 2	; arg count
 19696 0000E484 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 19697 0000E48C 803805                  	cmp byte [rax], T_undefined
 19698 0000E48F 0F84029F0000            	je L_error_fvar_undefined
 19699 0000E495 803804                  	cmp byte [rax], T_closure
 19700 0000E498 0F857D9F0000            	jne L_error_non_closure
 19701 0000E49E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19702 0000E4A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19703 0000E4A4 50                      	push rax
 19704                                  	; preparing a non-tail-call
 19705 0000E4A5 488B4520                	mov rax, PARAM(0)	; param i
 19706 0000E4A9 50                      	push rax
 19707 0000E4AA 488B4528                	mov rax, PARAM(1)	; param str1
 19708 0000E4AE 50                      	push rax
 19709 0000E4AF 6A02                    	push 2	; arg count
 19710 0000E4B1 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 19711 0000E4B9 803805                  	cmp byte [rax], T_undefined
 19712 0000E4BC 0F84D59E0000            	je L_error_fvar_undefined
 19713 0000E4C2 803804                  	cmp byte [rax], T_closure
 19714 0000E4C5 0F85509F0000            	jne L_error_non_closure
 19715 0000E4CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19716 0000E4CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19717 0000E4D1 50                      	push rax
 19718 0000E4D2 6A02                    	push 2	; arg count
 19719 0000E4D4 488B4510                	mov rax, ENV
 19720 0000E4D8 488B4008                	mov rax, qword [rax + 8 * 1]
 19721 0000E4DC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 19722 0000E4DF 803804                  	cmp byte [rax], T_closure
 19723 0000E4E2 0F85339F0000            	jne L_error_non_closure
 19724 0000E4E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19725 0000E4EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19726 0000E4EE 483D[02000000]          	cmp rax, sob_boolean_false
 19727 0000E4F4 0F8539010000            	jne .L_or_end_00ea
 19728                                  	; preparing a non-tail-call
 19729                                  	; preparing a non-tail-call
 19730 0000E4FA 488B4520                	mov rax, PARAM(0)	; param i
 19731 0000E4FE 50                      	push rax
 19732 0000E4FF 488B4538                	mov rax, PARAM(3)	; param str2
 19733 0000E503 50                      	push rax
 19734 0000E504 6A02                    	push 2	; arg count
 19735 0000E506 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 19736 0000E50E 803805                  	cmp byte [rax], T_undefined
 19737 0000E511 0F84809E0000            	je L_error_fvar_undefined
 19738 0000E517 803804                  	cmp byte [rax], T_closure
 19739 0000E51A 0F85FB9E0000            	jne L_error_non_closure
 19740 0000E520 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19741 0000E523 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19742 0000E526 50                      	push rax
 19743                                  	; preparing a non-tail-call
 19744 0000E527 488B4520                	mov rax, PARAM(0)	; param i
 19745 0000E52B 50                      	push rax
 19746 0000E52C 488B4528                	mov rax, PARAM(1)	; param str1
 19747 0000E530 50                      	push rax
 19748 0000E531 6A02                    	push 2	; arg count
 19749 0000E533 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 19750 0000E53B 803805                  	cmp byte [rax], T_undefined
 19751 0000E53E 0F84539E0000            	je L_error_fvar_undefined
 19752 0000E544 803804                  	cmp byte [rax], T_closure
 19753 0000E547 0F85CE9E0000            	jne L_error_non_closure
 19754 0000E54D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19755 0000E550 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19756 0000E553 50                      	push rax
 19757 0000E554 6A02                    	push 2	; arg count
 19758 0000E556 488B4510                	mov rax, ENV
 19759 0000E55A 488B4008                	mov rax, qword [rax + 8 * 1]
 19760 0000E55E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 19761 0000E562 803804                  	cmp byte [rax], T_closure
 19762 0000E565 0F85B09E0000            	jne L_error_non_closure
 19763 0000E56B FF7001                  	push SOB_CLOSURE_ENV(rax)
 19764 0000E56E FF5009                  	call SOB_CLOSURE_CODE(rax)
 19765 0000E571 483D[02000000]          	cmp rax, sob_boolean_false
 19766 0000E577 0F84AC000000            	je .L_if_else_0804
 19767                                  	; preparing a tail-call
 19768 0000E57D 488B4540                	mov rax, PARAM(4)	; param len2
 19769 0000E581 50                      	push rax
 19770 0000E582 488B4538                	mov rax, PARAM(3)	; param str2
 19771 0000E586 50                      	push rax
 19772 0000E587 488B4530                	mov rax, PARAM(2)	; param len1
 19773 0000E58B 50                      	push rax
 19774 0000E58C 488B4528                	mov rax, PARAM(1)	; param str1
 19775 0000E590 50                      	push rax
 19776                                  	; preparing a non-tail-call
 19777 0000E591 48B8-                   	mov rax, L_constants + 2270
 19777 0000E593 [DE08000000000000] 
 19778 0000E59B 50                      	push rax
 19779 0000E59C 488B4520                	mov rax, PARAM(0)	; param i
 19780 0000E5A0 50                      	push rax
 19781 0000E5A1 6A02                    	push 2	; arg count
 19782 0000E5A3 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 19783 0000E5AB 803805                  	cmp byte [rax], T_undefined
 19784 0000E5AE 0F84E39D0000            	je L_error_fvar_undefined
 19785 0000E5B4 803804                  	cmp byte [rax], T_closure
 19786 0000E5B7 0F855E9E0000            	jne L_error_non_closure
 19787 0000E5BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 19788 0000E5C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19789 0000E5C3 50                      	push rax
 19790 0000E5C4 6A05                    	push 5	; arg count
 19791 0000E5C6 488B4510                	mov rax, ENV
 19792 0000E5CA 488B00                  	mov rax, qword [rax + 8 * 0]
 19793 0000E5CD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19794 0000E5D0 488B00                  	mov rax, qword [rax]
 19795 0000E5D3 803804                  	cmp byte [rax], T_closure
 19796 0000E5D6 0F853F9E0000            	jne L_error_non_closure
 19797 0000E5DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19798 0000E5DF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19799 0000E5E2 FF7500                  	push qword[rbp]
 19800 0000E5E5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19801 0000E5E8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19802 0000E5EC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 19803 0000E5F0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 19804 0000E5F4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 19805 0000E5F7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 19806 0000E5FA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 19807 0000E5FF 4983C103                	add r9, 3 	 ;for getting to the params
 19808 0000E603 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 19809 0000E607 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 19810                                  .L_tc_recycle_frame_loop_0ef2:
 19811 0000E60A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 19812 0000E60D 7410                    	je .L_tc_recycle_frame_done_0ef2
 19813 0000E60F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 19814 0000E612 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 19815 0000E615 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 19816 0000E619 4983E808                	sub r8, 8	 ;move the top of the stack one down
 19817 0000E61D EBEB                    	jmp .L_tc_recycle_frame_loop_0ef2
 19818                                  .L_tc_recycle_frame_done_0ef2:
 19819 0000E61F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 19820 0000E620 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 19821 0000E624 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19822 0000E627 EB0A                    	jmp .L_if_end_0804
 19823                                  .L_if_else_0804:
 19824 0000E629 48B8-                   	mov rax, L_constants + 2
 19824 0000E62B [0200000000000000] 
 19825                                  .L_if_end_0804:
 19826                                  .L_or_end_00ea:
 19827 0000E633 EB0A                    	jmp .L_if_end_0805
 19828                                  .L_if_else_0805:
 19829 0000E635 48B8-                   	mov rax, L_constants + 2
 19829 0000E637 [0200000000000000] 
 19830                                  .L_if_end_0805:
 19831                                  .L_or_end_00e9:
 19832 0000E63F C9                      	leave
 19833 0000E640 C23800                  	ret AND_KILL_FRAME(5)
 19834                                  .L_lambda_simple_end_0a9e:	; new closure is in rax
 19835 0000E643 50                      	push rax
 19836 0000E644 488B4520                	mov rax, PARAM(0)	; param run
 19837 0000E648 8F00                    	pop qword [rax]
 19838 0000E64A 48B8-                   	mov rax, sob_void
 19838 0000E64C [0000000000000000] 
 19839                                  
 19840                                  	; preparing a tail-call
 19841 0000E654 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19842 0000E659 E8669E0000              	call malloc
 19843 0000E65E 50                      	push rax
 19844 0000E65F BF08000000              	mov rdi, 8 * 1	; new rib
 19845 0000E664 E85B9E0000              	call malloc
 19846 0000E669 50                      	push rax
 19847 0000E66A BF18000000              	mov rdi, 8 * 3	; extended env
 19848 0000E66F E8509E0000              	call malloc
 19849 0000E674 488B7D10                	mov rdi, ENV
 19850 0000E678 BE00000000              	mov rsi, 0
 19851 0000E67D BA01000000              	mov rdx, 1
 19852                                  .L_lambda_simple_env_loop_0a9f:	; ext_env[i + 1] <-- env[i]
 19853 0000E682 4883FE02                	cmp rsi, 2
 19854 0000E686 7410                    	je .L_lambda_simple_env_end_0a9f
 19855 0000E688 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19856 0000E68C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19857 0000E690 48FFC6                  	inc rsi
 19858 0000E693 48FFC2                  	inc rdx
 19859 0000E696 EBEA                    	jmp .L_lambda_simple_env_loop_0a9f
 19860                                  .L_lambda_simple_env_end_0a9f:
 19861 0000E698 5B                      	pop rbx
 19862 0000E699 BE00000000              	mov rsi, 0
 19863                                  .L_lambda_simple_params_loop_0a9f:	; copy params
 19864 0000E69E 4883FE01                	cmp rsi, 1
 19865 0000E6A2 740E                    	je .L_lambda_simple_params_end_0a9f
 19866 0000E6A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19867 0000E6A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19868 0000E6AD 48FFC6                  	inc rsi
 19869 0000E6B0 EBEC                    	jmp .L_lambda_simple_params_loop_0a9f
 19870                                  .L_lambda_simple_params_end_0a9f:
 19871 0000E6B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19872 0000E6B5 4889C3                  	mov rbx, rax
 19873 0000E6B8 58                      	pop rax
 19874 0000E6B9 C60004                  	mov byte [rax], T_closure
 19875 0000E6BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19876 0000E6C0 48C74009[CDE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0a9f
 19877 0000E6C8 E9B2020000              	jmp .L_lambda_simple_end_0a9f
 19878                                  .L_lambda_simple_code_0a9f:	; lambda-simple body
 19879 0000E6CD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19880 0000E6D3 740B                    	je .L_lambda_simple_arity_check_ok_0a9f
 19881 0000E6D5 FF742410                	push qword [rsp + 8 * 2]
 19882 0000E6D9 6A02                    	push 2
 19883 0000E6DB E99D9D0000              	jmp L_error_incorrect_arity_simple
 19884                                  .L_lambda_simple_arity_check_ok_0a9f:
 19885 0000E6E0 C8000000                	enter 0, 0
 19886                                  	; preparing a tail-call
 19887                                  	; preparing a non-tail-call
 19888 0000E6E4 488B4528                	mov rax, PARAM(1)	; param str2
 19889 0000E6E8 50                      	push rax
 19890 0000E6E9 6A01                    	push 1	; arg count
 19891 0000E6EB 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 19892 0000E6F3 803805                  	cmp byte [rax], T_undefined
 19893 0000E6F6 0F849B9C0000            	je L_error_fvar_undefined
 19894 0000E6FC 803804                  	cmp byte [rax], T_closure
 19895 0000E6FF 0F85169D0000            	jne L_error_non_closure
 19896 0000E705 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19897 0000E708 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19898 0000E70B 50                      	push rax
 19899                                  	; preparing a non-tail-call
 19900 0000E70C 488B4520                	mov rax, PARAM(0)	; param str1
 19901 0000E710 50                      	push rax
 19902 0000E711 6A01                    	push 1	; arg count
 19903 0000E713 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 19904 0000E71B 803805                  	cmp byte [rax], T_undefined
 19905 0000E71E 0F84739C0000            	je L_error_fvar_undefined
 19906 0000E724 803804                  	cmp byte [rax], T_closure
 19907 0000E727 0F85EE9C0000            	jne L_error_non_closure
 19908 0000E72D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19909 0000E730 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19910 0000E733 50                      	push rax
 19911 0000E734 6A02                    	push 2	; arg count
 19912 0000E736 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19913 0000E73B E8849D0000              	call malloc
 19914 0000E740 50                      	push rax
 19915 0000E741 BF10000000              	mov rdi, 8 * 2	; new rib
 19916 0000E746 E8799D0000              	call malloc
 19917 0000E74B 50                      	push rax
 19918 0000E74C BF20000000              	mov rdi, 8 * 4	; extended env
 19919 0000E751 E86E9D0000              	call malloc
 19920 0000E756 488B7D10                	mov rdi, ENV
 19921 0000E75A BE00000000              	mov rsi, 0
 19922 0000E75F BA01000000              	mov rdx, 1
 19923                                  .L_lambda_simple_env_loop_0aa0:	; ext_env[i + 1] <-- env[i]
 19924 0000E764 4883FE03                	cmp rsi, 3
 19925 0000E768 7410                    	je .L_lambda_simple_env_end_0aa0
 19926 0000E76A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19927 0000E76E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19928 0000E772 48FFC6                  	inc rsi
 19929 0000E775 48FFC2                  	inc rdx
 19930 0000E778 EBEA                    	jmp .L_lambda_simple_env_loop_0aa0
 19931                                  .L_lambda_simple_env_end_0aa0:
 19932 0000E77A 5B                      	pop rbx
 19933 0000E77B BE00000000              	mov rsi, 0
 19934                                  .L_lambda_simple_params_loop_0aa0:	; copy params
 19935 0000E780 4883FE02                	cmp rsi, 2
 19936 0000E784 740E                    	je .L_lambda_simple_params_end_0aa0
 19937 0000E786 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19938 0000E78B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19939 0000E78F 48FFC6                  	inc rsi
 19940 0000E792 EBEC                    	jmp .L_lambda_simple_params_loop_0aa0
 19941                                  .L_lambda_simple_params_end_0aa0:
 19942 0000E794 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19943 0000E797 4889C3                  	mov rbx, rax
 19944 0000E79A 58                      	pop rax
 19945 0000E79B C60004                  	mov byte [rax], T_closure
 19946 0000E79E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19947 0000E7A2 48C74009[AFE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa0
 19948 0000E7AA E978010000              	jmp .L_lambda_simple_end_0aa0
 19949                                  .L_lambda_simple_code_0aa0:	; lambda-simple body
 19950 0000E7AF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19951 0000E7B5 740B                    	je .L_lambda_simple_arity_check_ok_0aa0
 19952 0000E7B7 FF742410                	push qword [rsp + 8 * 2]
 19953 0000E7BB 6A02                    	push 2
 19954 0000E7BD E9BB9C0000              	jmp L_error_incorrect_arity_simple
 19955                                  .L_lambda_simple_arity_check_ok_0aa0:
 19956 0000E7C2 C8000000                	enter 0, 0
 19957                                  	; preparing a non-tail-call
 19958 0000E7C6 488B4528                	mov rax, PARAM(1)	; param len2
 19959 0000E7CA 50                      	push rax
 19960 0000E7CB 488B4520                	mov rax, PARAM(0)	; param len1
 19961 0000E7CF 50                      	push rax
 19962 0000E7D0 6A02                    	push 2	; arg count
 19963 0000E7D2 488B0425[8F0F0000]      	mov rax, qword [free_var_5]	; free var <=
 19964 0000E7DA 803805                  	cmp byte [rax], T_undefined
 19965 0000E7DD 0F84B49B0000            	je L_error_fvar_undefined
 19966 0000E7E3 803804                  	cmp byte [rax], T_closure
 19967 0000E7E6 0F852F9C0000            	jne L_error_non_closure
 19968 0000E7EC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19969 0000E7EF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19970 0000E7F2 483D[02000000]          	cmp rax, sob_boolean_false
 19971 0000E7F8 0F8495000000            	je .L_if_else_0806
 19972                                  	; preparing a tail-call
 19973 0000E7FE 488B4528                	mov rax, PARAM(1)	; param len2
 19974 0000E802 50                      	push rax
 19975 0000E803 488B4510                	mov rax, ENV
 19976 0000E807 488B00                  	mov rax, qword [rax + 8 * 0]
 19977 0000E80A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 19978 0000E80E 50                      	push rax
 19979 0000E80F 488B4520                	mov rax, PARAM(0)	; param len1
 19980 0000E813 50                      	push rax
 19981 0000E814 488B4510                	mov rax, ENV
 19982 0000E818 488B00                  	mov rax, qword [rax + 8 * 0]
 19983 0000E81B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 19984 0000E81E 50                      	push rax
 19985 0000E81F 48B8-                   	mov rax, L_constants + 2135
 19985 0000E821 [5708000000000000] 
 19986 0000E829 50                      	push rax
 19987 0000E82A 6A05                    	push 5	; arg count
 19988 0000E82C 488B4510                	mov rax, ENV
 19989 0000E830 488B4008                	mov rax, qword [rax + 8 * 1]
 19990 0000E834 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 19991 0000E837 488B00                  	mov rax, qword [rax]
 19992 0000E83A 803804                  	cmp byte [rax], T_closure
 19993 0000E83D 0F85D89B0000            	jne L_error_non_closure
 19994 0000E843 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19995 0000E846 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 19996 0000E849 FF7500                  	push qword[rbp]
 19997 0000E84C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 19998 0000E84F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 19999 0000E853 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20000 0000E857 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20001 0000E85B 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20002 0000E85E 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20003 0000E861 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20004 0000E866 4983C103                	add r9, 3 	 ;for getting to the params
 20005 0000E86A 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20006 0000E86E 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20007                                  .L_tc_recycle_frame_loop_0ef3:
 20008 0000E871 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20009 0000E874 7410                    	je .L_tc_recycle_frame_done_0ef3
 20010 0000E876 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20011 0000E879 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20012 0000E87C 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20013 0000E880 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20014 0000E884 EBEB                    	jmp .L_tc_recycle_frame_loop_0ef3
 20015                                  .L_tc_recycle_frame_done_0ef3:
 20016 0000E886 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20017 0000E887 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20018 0000E88B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20019 0000E88E E990000000              	jmp .L_if_end_0806
 20020                                  .L_if_else_0806:
 20021                                  	; preparing a tail-call
 20022 0000E893 488B4520                	mov rax, PARAM(0)	; param len1
 20023 0000E897 50                      	push rax
 20024 0000E898 488B4510                	mov rax, ENV
 20025 0000E89C 488B00                  	mov rax, qword [rax + 8 * 0]
 20026 0000E89F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 20027 0000E8A2 50                      	push rax
 20028 0000E8A3 488B4528                	mov rax, PARAM(1)	; param len2
 20029 0000E8A7 50                      	push rax
 20030 0000E8A8 488B4510                	mov rax, ENV
 20031 0000E8AC 488B00                  	mov rax, qword [rax + 8 * 0]
 20032 0000E8AF 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 20033 0000E8B3 50                      	push rax
 20034 0000E8B4 48B8-                   	mov rax, L_constants + 2135
 20034 0000E8B6 [5708000000000000] 
 20035 0000E8BE 50                      	push rax
 20036 0000E8BF 6A05                    	push 5	; arg count
 20037 0000E8C1 488B4510                	mov rax, ENV
 20038 0000E8C5 488B4008                	mov rax, qword [rax + 8 * 1]
 20039 0000E8C9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20040 0000E8CC 488B00                  	mov rax, qword [rax]
 20041 0000E8CF 803804                  	cmp byte [rax], T_closure
 20042 0000E8D2 0F85439B0000            	jne L_error_non_closure
 20043 0000E8D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20044 0000E8DB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20045 0000E8DE FF7500                  	push qword[rbp]
 20046 0000E8E1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20047 0000E8E4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20048 0000E8E8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20049 0000E8EC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20050 0000E8F0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20051 0000E8F3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20052 0000E8F6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20053 0000E8FB 4983C103                	add r9, 3 	 ;for getting to the params
 20054 0000E8FF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20055 0000E903 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20056                                  .L_tc_recycle_frame_loop_0ef4:
 20057 0000E906 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20058 0000E909 7410                    	je .L_tc_recycle_frame_done_0ef4
 20059 0000E90B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20060 0000E90E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20061 0000E911 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20062 0000E915 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20063 0000E919 EBEB                    	jmp .L_tc_recycle_frame_loop_0ef4
 20064                                  .L_tc_recycle_frame_done_0ef4:
 20065 0000E91B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20066 0000E91C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20067 0000E920 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20068                                  .L_if_end_0806:
 20069 0000E923 C9                      	leave
 20070 0000E924 C22000                  	ret AND_KILL_FRAME(2)
 20071                                  .L_lambda_simple_end_0aa0:	; new closure is in rax
 20072 0000E927 803804                  	cmp byte [rax], T_closure
 20073 0000E92A 0F85EB9A0000            	jne L_error_non_closure
 20074 0000E930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20075 0000E933 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20076 0000E936 FF7500                  	push qword[rbp]
 20077 0000E939 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20078 0000E93C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20079 0000E940 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20080 0000E944 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20081 0000E948 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20082 0000E94B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20083 0000E94E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20084 0000E953 4983C103                	add r9, 3 	 ;for getting to the params
 20085 0000E957 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20086 0000E95B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20087                                  .L_tc_recycle_frame_loop_0ef5:
 20088 0000E95E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20089 0000E961 7410                    	je .L_tc_recycle_frame_done_0ef5
 20090 0000E963 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20091 0000E966 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20092 0000E969 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20093 0000E96D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20094 0000E971 EBEB                    	jmp .L_tc_recycle_frame_loop_0ef5
 20095                                  .L_tc_recycle_frame_done_0ef5:
 20096 0000E973 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20097 0000E974 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20098 0000E978 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20099 0000E97B C9                      	leave
 20100 0000E97C C22000                  	ret AND_KILL_FRAME(2)
 20101                                  .L_lambda_simple_end_0a9f:	; new closure is in rax
 20102 0000E97F 50                      	push rax
 20103 0000E980 6A01                    	push 1	; arg count
 20104 0000E982 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20105 0000E987 E8389B0000              	call malloc
 20106 0000E98C 50                      	push rax
 20107 0000E98D BF08000000              	mov rdi, 8 * 1	; new rib
 20108 0000E992 E82D9B0000              	call malloc
 20109 0000E997 50                      	push rax
 20110 0000E998 BF18000000              	mov rdi, 8 * 3	; extended env
 20111 0000E99D E8229B0000              	call malloc
 20112 0000E9A2 488B7D10                	mov rdi, ENV
 20113 0000E9A6 BE00000000              	mov rsi, 0
 20114 0000E9AB BA01000000              	mov rdx, 1
 20115                                  .L_lambda_simple_env_loop_0aa1:	; ext_env[i + 1] <-- env[i]
 20116 0000E9B0 4883FE02                	cmp rsi, 2
 20117 0000E9B4 7410                    	je .L_lambda_simple_env_end_0aa1
 20118 0000E9B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20119 0000E9BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20120 0000E9BE 48FFC6                  	inc rsi
 20121 0000E9C1 48FFC2                  	inc rdx
 20122 0000E9C4 EBEA                    	jmp .L_lambda_simple_env_loop_0aa1
 20123                                  .L_lambda_simple_env_end_0aa1:
 20124 0000E9C6 5B                      	pop rbx
 20125 0000E9C7 BE00000000              	mov rsi, 0
 20126                                  .L_lambda_simple_params_loop_0aa1:	; copy params
 20127 0000E9CC 4883FE01                	cmp rsi, 1
 20128 0000E9D0 740E                    	je .L_lambda_simple_params_end_0aa1
 20129 0000E9D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20130 0000E9D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20131 0000E9DB 48FFC6                  	inc rsi
 20132 0000E9DE EBEC                    	jmp .L_lambda_simple_params_loop_0aa1
 20133                                  .L_lambda_simple_params_end_0aa1:
 20134 0000E9E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20135 0000E9E3 4889C3                  	mov rbx, rax
 20136 0000E9E6 58                      	pop rax
 20137 0000E9E7 C60004                  	mov byte [rax], T_closure
 20138 0000E9EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20139 0000E9EE 48C74009[FBE90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa1
 20140 0000E9F6 E99B050000              	jmp .L_lambda_simple_end_0aa1
 20141                                  .L_lambda_simple_code_0aa1:	; lambda-simple body
 20142 0000E9FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20143 0000EA01 740B                    	je .L_lambda_simple_arity_check_ok_0aa1
 20144 0000EA03 FF742410                	push qword [rsp + 8 * 2]
 20145 0000EA07 6A01                    	push 1
 20146 0000EA09 E96F9A0000              	jmp L_error_incorrect_arity_simple
 20147                                  .L_lambda_simple_arity_check_ok_0aa1:
 20148 0000EA0E C8000000                	enter 0, 0
 20149                                  	; preparing a tail-call
 20150 0000EA12 48B8-                   	mov rax, L_constants + 1993
 20150 0000EA14 [C907000000000000] 
 20151 0000EA1C 50                      	push rax
 20152 0000EA1D 6A01                    	push 1	; arg count
 20153 0000EA1F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20154 0000EA24 E89B9A0000              	call malloc
 20155 0000EA29 50                      	push rax
 20156 0000EA2A BF08000000              	mov rdi, 8 * 1	; new rib
 20157 0000EA2F E8909A0000              	call malloc
 20158 0000EA34 50                      	push rax
 20159 0000EA35 BF20000000              	mov rdi, 8 * 4	; extended env
 20160 0000EA3A E8859A0000              	call malloc
 20161 0000EA3F 488B7D10                	mov rdi, ENV
 20162 0000EA43 BE00000000              	mov rsi, 0
 20163 0000EA48 BA01000000              	mov rdx, 1
 20164                                  .L_lambda_simple_env_loop_0aa2:	; ext_env[i + 1] <-- env[i]
 20165 0000EA4D 4883FE03                	cmp rsi, 3
 20166 0000EA51 7410                    	je .L_lambda_simple_env_end_0aa2
 20167 0000EA53 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20168 0000EA57 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20169 0000EA5B 48FFC6                  	inc rsi
 20170 0000EA5E 48FFC2                  	inc rdx
 20171 0000EA61 EBEA                    	jmp .L_lambda_simple_env_loop_0aa2
 20172                                  .L_lambda_simple_env_end_0aa2:
 20173 0000EA63 5B                      	pop rbx
 20174 0000EA64 BE00000000              	mov rsi, 0
 20175                                  .L_lambda_simple_params_loop_0aa2:	; copy params
 20176 0000EA69 4883FE01                	cmp rsi, 1
 20177 0000EA6D 740E                    	je .L_lambda_simple_params_end_0aa2
 20178 0000EA6F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20179 0000EA74 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20180 0000EA78 48FFC6                  	inc rsi
 20181 0000EA7B EBEC                    	jmp .L_lambda_simple_params_loop_0aa2
 20182                                  .L_lambda_simple_params_end_0aa2:
 20183 0000EA7D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20184 0000EA80 4889C3                  	mov rbx, rax
 20185 0000EA83 58                      	pop rax
 20186 0000EA84 C60004                  	mov byte [rax], T_closure
 20187 0000EA87 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20188 0000EA8B 48C74009[98EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa2
 20189 0000EA93 E9A6040000              	jmp .L_lambda_simple_end_0aa2
 20190                                  .L_lambda_simple_code_0aa2:	; lambda-simple body
 20191 0000EA98 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20192 0000EA9E 740B                    	je .L_lambda_simple_arity_check_ok_0aa2
 20193 0000EAA0 FF742410                	push qword [rsp + 8 * 2]
 20194 0000EAA4 6A01                    	push 1
 20195 0000EAA6 E9D2990000              	jmp L_error_incorrect_arity_simple
 20196                                  .L_lambda_simple_arity_check_ok_0aa2:
 20197 0000EAAB C8000000                	enter 0, 0
 20198 0000EAAF BF08000000              	mov rdi, 8*1
 20199 0000EAB4 E80B9A0000              	call malloc
 20200 0000EAB9 488B5D20                	mov rbx, PARAM(0)
 20201 0000EABD 488918                  	mov qword[rax], rbx
 20202 0000EAC0 48894520                	mov PARAM(0), rax
 20203 0000EAC4 48B8-                   	mov rax, sob_void
 20203 0000EAC6 [0000000000000000] 
 20204                                  
 20205 0000EACE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20206 0000EAD3 E8EC990000              	call malloc
 20207 0000EAD8 50                      	push rax
 20208 0000EAD9 BF08000000              	mov rdi, 8 * 1	; new rib
 20209 0000EADE E8E1990000              	call malloc
 20210 0000EAE3 50                      	push rax
 20211 0000EAE4 BF28000000              	mov rdi, 8 * 5	; extended env
 20212 0000EAE9 E8D6990000              	call malloc
 20213 0000EAEE 488B7D10                	mov rdi, ENV
 20214 0000EAF2 BE00000000              	mov rsi, 0
 20215 0000EAF7 BA01000000              	mov rdx, 1
 20216                                  .L_lambda_simple_env_loop_0aa3:	; ext_env[i + 1] <-- env[i]
 20217 0000EAFC 4883FE04                	cmp rsi, 4
 20218 0000EB00 7410                    	je .L_lambda_simple_env_end_0aa3
 20219 0000EB02 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20220 0000EB06 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20221 0000EB0A 48FFC6                  	inc rsi
 20222 0000EB0D 48FFC2                  	inc rdx
 20223 0000EB10 EBEA                    	jmp .L_lambda_simple_env_loop_0aa3
 20224                                  .L_lambda_simple_env_end_0aa3:
 20225 0000EB12 5B                      	pop rbx
 20226 0000EB13 BE00000000              	mov rsi, 0
 20227                                  .L_lambda_simple_params_loop_0aa3:	; copy params
 20228 0000EB18 4883FE01                	cmp rsi, 1
 20229 0000EB1C 740E                    	je .L_lambda_simple_params_end_0aa3
 20230 0000EB1E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20231 0000EB23 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20232 0000EB27 48FFC6                  	inc rsi
 20233 0000EB2A EBEC                    	jmp .L_lambda_simple_params_loop_0aa3
 20234                                  .L_lambda_simple_params_end_0aa3:
 20235 0000EB2C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20236 0000EB2F 4889C3                  	mov rbx, rax
 20237 0000EB32 58                      	pop rax
 20238 0000EB33 C60004                  	mov byte [rax], T_closure
 20239 0000EB36 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20240 0000EB3A 48C74009[47EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa3
 20241 0000EB42 E962010000              	jmp .L_lambda_simple_end_0aa3
 20242                                  .L_lambda_simple_code_0aa3:	; lambda-simple body
 20243 0000EB47 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20244 0000EB4D 740B                    	je .L_lambda_simple_arity_check_ok_0aa3
 20245 0000EB4F FF742410                	push qword [rsp + 8 * 2]
 20246 0000EB53 6A02                    	push 2
 20247 0000EB55 E923990000              	jmp L_error_incorrect_arity_simple
 20248                                  .L_lambda_simple_arity_check_ok_0aa3:
 20249 0000EB5A C8000000                	enter 0, 0
 20250                                  	; preparing a non-tail-call
 20251 0000EB5E 488B4528                	mov rax, PARAM(1)	; param strs
 20252 0000EB62 50                      	push rax
 20253 0000EB63 6A01                    	push 1	; arg count
 20254 0000EB65 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 20255 0000EB6D 803805                  	cmp byte [rax], T_undefined
 20256 0000EB70 0F8421980000            	je L_error_fvar_undefined
 20257 0000EB76 803804                  	cmp byte [rax], T_closure
 20258 0000EB79 0F859C980000            	jne L_error_non_closure
 20259 0000EB7F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20260 0000EB82 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20261 0000EB85 483D[02000000]          	cmp rax, sob_boolean_false
 20262 0000EB8B 0F8514010000            	jne .L_or_end_00eb
 20263                                  	; preparing a non-tail-call
 20264                                  	; preparing a non-tail-call
 20265 0000EB91 488B4528                	mov rax, PARAM(1)	; param strs
 20266 0000EB95 50                      	push rax
 20267 0000EB96 6A01                    	push 1	; arg count
 20268 0000EB98 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 20269 0000EBA0 803805                  	cmp byte [rax], T_undefined
 20270 0000EBA3 0F84EE970000            	je L_error_fvar_undefined
 20271 0000EBA9 803804                  	cmp byte [rax], T_closure
 20272 0000EBAC 0F8569980000            	jne L_error_non_closure
 20273 0000EBB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20274 0000EBB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20275 0000EBB8 50                      	push rax
 20276 0000EBB9 488B4520                	mov rax, PARAM(0)	; param str
 20277 0000EBBD 50                      	push rax
 20278 0000EBBE 6A02                    	push 2	; arg count
 20279 0000EBC0 488B4510                	mov rax, ENV
 20280 0000EBC4 488B4008                	mov rax, qword [rax + 8 * 1]
 20281 0000EBC8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<?
 20282 0000EBCB 803804                  	cmp byte [rax], T_closure
 20283 0000EBCE 0F8547980000            	jne L_error_non_closure
 20284 0000EBD4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20285 0000EBD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20286 0000EBDA 483D[02000000]          	cmp rax, sob_boolean_false
 20287 0000EBE0 0F84B5000000            	je .L_if_else_0807
 20288                                  	; preparing a tail-call
 20289                                  	; preparing a non-tail-call
 20290 0000EBE6 488B4528                	mov rax, PARAM(1)	; param strs
 20291 0000EBEA 50                      	push rax
 20292 0000EBEB 6A01                    	push 1	; arg count
 20293 0000EBED 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 20294 0000EBF5 803805                  	cmp byte [rax], T_undefined
 20295 0000EBF8 0F8499970000            	je L_error_fvar_undefined
 20296 0000EBFE 803804                  	cmp byte [rax], T_closure
 20297 0000EC01 0F8514980000            	jne L_error_non_closure
 20298 0000EC07 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20299 0000EC0A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20300 0000EC0D 50                      	push rax
 20301                                  	; preparing a non-tail-call
 20302 0000EC0E 488B4528                	mov rax, PARAM(1)	; param strs
 20303 0000EC12 50                      	push rax
 20304 0000EC13 6A01                    	push 1	; arg count
 20305 0000EC15 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 20306 0000EC1D 803805                  	cmp byte [rax], T_undefined
 20307 0000EC20 0F8471970000            	je L_error_fvar_undefined
 20308 0000EC26 803804                  	cmp byte [rax], T_closure
 20309 0000EC29 0F85EC970000            	jne L_error_non_closure
 20310 0000EC2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20311 0000EC32 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20312 0000EC35 50                      	push rax
 20313 0000EC36 6A02                    	push 2	; arg count
 20314 0000EC38 488B4510                	mov rax, ENV
 20315 0000EC3C 488B00                  	mov rax, qword [rax + 8 * 0]
 20316 0000EC3F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20317 0000EC42 488B00                  	mov rax, qword [rax]
 20318 0000EC45 803804                  	cmp byte [rax], T_closure
 20319 0000EC48 0F85CD970000            	jne L_error_non_closure
 20320 0000EC4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 20321 0000EC51 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20322 0000EC54 FF7500                  	push qword[rbp]
 20323 0000EC57 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20324 0000EC5A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20325 0000EC5E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20326 0000EC62 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20327 0000EC66 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20328 0000EC69 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20329 0000EC6C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20330 0000EC71 4983C103                	add r9, 3 	 ;for getting to the params
 20331 0000EC75 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20332 0000EC79 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20333                                  .L_tc_recycle_frame_loop_0ef6:
 20334 0000EC7C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20335 0000EC7F 7410                    	je .L_tc_recycle_frame_done_0ef6
 20336 0000EC81 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20337 0000EC84 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20338 0000EC87 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20339 0000EC8B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20340 0000EC8F EBEB                    	jmp .L_tc_recycle_frame_loop_0ef6
 20341                                  .L_tc_recycle_frame_done_0ef6:
 20342 0000EC91 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20343 0000EC92 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20344 0000EC96 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20345 0000EC99 EB0A                    	jmp .L_if_end_0807
 20346                                  .L_if_else_0807:
 20347 0000EC9B 48B8-                   	mov rax, L_constants + 2
 20347 0000EC9D [0200000000000000] 
 20348                                  .L_if_end_0807:
 20349                                  .L_or_end_00eb:
 20350 0000ECA5 C9                      	leave
 20351 0000ECA6 C22000                  	ret AND_KILL_FRAME(2)
 20352                                  .L_lambda_simple_end_0aa3:	; new closure is in rax
 20353 0000ECA9 50                      	push rax
 20354 0000ECAA 488B4520                	mov rax, PARAM(0)	; param run
 20355 0000ECAE 8F00                    	pop qword [rax]
 20356 0000ECB0 48B8-                   	mov rax, sob_void
 20356 0000ECB2 [0000000000000000] 
 20357                                  
 20358 0000ECBA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20359 0000ECBF E800980000              	call malloc
 20360 0000ECC4 50                      	push rax
 20361 0000ECC5 BF08000000              	mov rdi, 8 * 1	; new rib
 20362 0000ECCA E8F5970000              	call malloc
 20363 0000ECCF 50                      	push rax
 20364 0000ECD0 BF28000000              	mov rdi, 8 * 5	; extended env
 20365 0000ECD5 E8EA970000              	call malloc
 20366 0000ECDA 488B7D10                	mov rdi, ENV
 20367 0000ECDE BE00000000              	mov rsi, 0
 20368 0000ECE3 BA01000000              	mov rdx, 1
 20369                                  .L_lambda_opt_env_loop_014f:	; ext_env[i + 1] <-- env[i]
 20370 0000ECE8 4883FE04                	cmp rsi, 4
 20371 0000ECEC 7410                    	je .L_lambda_opt_env_end_014f
 20372 0000ECEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20373 0000ECF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20374 0000ECF6 48FFC6                  	inc rsi
 20375 0000ECF9 48FFC2                  	inc rdx
 20376 0000ECFC EBEA                    	jmp .L_lambda_opt_env_loop_014f
 20377                                  .L_lambda_opt_env_end_014f:
 20378 0000ECFE 5B                      	pop rbx
 20379 0000ECFF BE00000000              	mov rsi, 0
 20380                                  .L_lambda_opt_params_loop_014f:	; copy params
 20381 0000ED04 4883FE01                	cmp rsi, 1
 20382 0000ED08 740E                    	je .L_lambda_opt_params_end_014f
 20383 0000ED0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20384 0000ED0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20385 0000ED13 48FFC6                  	inc rsi
 20386 0000ED16 EBEC                    	jmp .L_lambda_opt_params_loop_014f
 20387                                  .L_lambda_opt_params_end_014f:
 20388 0000ED18 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 20389 0000ED1B 4889C3                  	mov rbx, rax
 20390 0000ED1E 58                      	pop rax
 20391 0000ED1F C60004                  	mov byte [rax], T_closure
 20392 0000ED22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20393 0000ED26 48C74009[33ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_014f
 20394 0000ED2E E907020000              	jmp .L_lambda_opt_end_014f
 20395                                  .L_lambda_opt_code_014f:	; lambda-opt body
 20396 0000ED33 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20397 0000ED39 7411                    	je .L_lambda_opt_arity_check_exact_014f
 20398 0000ED3B 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_014f
 20399 0000ED41 FF742410                	push qword [rsp + 8 * 2]
 20400 0000ED45 6A01                    	push 1
 20401 0000ED47 E945970000              	jmp L_error_incorrect_arity_opt
 20402                                  .L_lambda_opt_arity_check_exact_014f:
 20403 0000ED4C 4883EC08                	sub rsp, 8
 20404 0000ED50 488B442408              	mov rax, qword[rsp + 8 *1]
 20405 0000ED55 48890424                	mov qword[rsp], rax  
 20406 0000ED59 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 20407 0000ED5E 4889442408              	mov qword[rsp + 8 * 1], rax
 20408 0000ED63 B802000000              	mov rax, 2
 20409 0000ED68 4889442410              	mov qword[rsp + 8 *2], rax
 20410 0000ED6D 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 20411 0000ED72 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 20412 0000ED77 48B8-                   	mov rax, sob_nil
 20412 0000ED79 [0100000000000000] 
 20413 0000ED81 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 20414 0000ED86 C8000000                	enter 0, 0
 20415                                  	; preparing a tail-call
 20416 0000ED8A 488B4528                	mov rax, PARAM(1)	; param strs
 20417 0000ED8E 50                      	push rax
 20418 0000ED8F 488B4520                	mov rax, PARAM(0)	; param str
 20419 0000ED93 50                      	push rax
 20420 0000ED94 6A02                    	push 2	; arg count
 20421 0000ED96 488B4510                	mov rax, ENV
 20422 0000ED9A 488B00                  	mov rax, qword [rax + 8 * 0]
 20423 0000ED9D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20424 0000EDA0 488B00                  	mov rax, qword [rax]
 20425 0000EDA3 803804                  	cmp byte [rax], T_closure
 20426 0000EDA6 0F856F960000            	jne L_error_non_closure
 20427 0000EDAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20428 0000EDAF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20429 0000EDB2 FF7500                  	push qword[rbp]
 20430 0000EDB5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20431 0000EDB8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20432 0000EDBC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20433 0000EDC0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20434 0000EDC4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20435 0000EDC7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20436 0000EDCA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20437 0000EDCF 4983C103                	add r9, 3 	 ;for getting to the params
 20438 0000EDD3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20439 0000EDD7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20440                                  .L_tc_recycle_frame_loop_0ef8:
 20441 0000EDDA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20442 0000EDDD 7410                    	je .L_tc_recycle_frame_done_0ef8
 20443 0000EDDF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20444 0000EDE2 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20445 0000EDE5 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20446 0000EDE9 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20447 0000EDED EBEB                    	jmp .L_tc_recycle_frame_loop_0ef8
 20448                                  .L_tc_recycle_frame_done_0ef8:
 20449 0000EDEF 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20450 0000EDF0 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20451 0000EDF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20452 0000EDF7 C9                      	leave
 20453 0000EDF8 C22000                  	ret AND_KILL_FRAME(2)
 20454 0000EDFB E93A010000              	jmp .L_lambda_opt_end_014f	; new closure is in rax
 20455                                  .L_lambda_opt_arity_check_more_014f:
 20456 0000EE00 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 20457 0000EE05 49B9-                   	mov r9, sob_nil
 20457 0000EE07 [0100000000000000] 
 20458 0000EE0F 4889E3                  	mov rbx, rsp 
 20459 0000EE12 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 20460 0000EE16 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 20461 0000EE19 49C1E003                	shl r8, 3
 20462 0000EE1D 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 20463 0000EE20 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 20464                                  .L_lambda_opt_stack_shrink_loop_014f:
 20465 0000EE25 4983F801                	cmp r8, 1
 20466 0000EE29 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_014f
 20467 0000EE2B BF11000000              	mov rdi, 1+8+8 ;for pair
 20468 0000EE30 E88F960000              	call malloc;to create the pair in the stack
 20469 0000EE35 C60021                  	mov byte [rax], T_pair ; to make it a pair
 20470 0000EE38 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 20471 0000EE3B 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 20472 0000EE3F 4C894809                 	mov qword[rax+1+8],r9
 20473 0000EE43 4989C1                  	mov r9, rax ;for the recursion 
 20474 0000EE46 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 20475 0000EE49 4883EB08                	sub rbx, 8 ;to get the next param to copy
 20476 0000EE4D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_014f
 20477                                  .L_lambda_opt_stack_shrink_loop_exit_014f:
 20478 0000EE4F 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 20479 0000EE54 4883E902                	sub rcx, 2
 20480 0000EE58 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 20481 0000EE5C 4801CC                  	add rsp, rcx ;shrinking the stack
 20482 0000EE5F 4889E0                  	mov rax, rsp
 20483 0000EE62 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 20484 0000EE65 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 20485 0000EE69 49FFC8                  	dec r8 ;we start with param 0, not 1 
 20486 0000EE6C 4883C018                	add rax, 3 * 8;now rax is param 0
 20487 0000EE70 49C1E003                	shl r8, 3;convert to byte
 20488 0000EE74 4C01C0                  	add rax, r8;now rax is the top of the stack
 20489 0000EE77 4C8908                  	mov qword[rax], r9;puting the list at the top
 20490 0000EE7A 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 20491 0000EE7E 4889E3                  	mov rbx, rsp 
 20492 0000EE81 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 20493 0000EE84 41BA01000000            	mov r10, 1;r10 is the not opt params length
 20494 0000EE8A 49FFCA                  	dec r10 
 20495 0000EE8D 49C1E203                	shl r10, 3;to get bytes
 20496 0000EE91 4883C318                	add rbx, 3*8;rbx is the first param
 20497 0000EE95 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 20498 0000EE98 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 20499 0000EE9B 4C8900                  	mov qword[rax], r8
 20500 0000EE9E 4883E808                	sub rax, 8
 20501 0000EEA2 4883EB08                	sub rbx, 8
 20502 0000EEA6 4889E0                  	mov rax, rsp
 20503 0000EEA9 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 20504 0000EEAC 48C744241002000000      	mov qword [rsp+2*8], 2
 20505 0000EEB5 488B5808                	mov rbx, qword[rax + 8 *1]
 20506 0000EEB9 48895C2408              	mov qword [rsp + 1*8] ,rbx
 20507 0000EEBE 488B18                  	mov rbx, qword[rax]
 20508 0000EEC1 48891C24                	mov qword [rsp], rbx
 20509 0000EEC5 C8000000                	enter 0, 0
 20510                                  	; preparing a tail-call
 20511 0000EEC9 488B4528                	mov rax, PARAM(1)	; param strs
 20512 0000EECD 50                      	push rax
 20513 0000EECE 488B4520                	mov rax, PARAM(0)	; param str
 20514 0000EED2 50                      	push rax
 20515 0000EED3 6A02                    	push 2	; arg count
 20516 0000EED5 488B4510                	mov rax, ENV
 20517 0000EED9 488B00                  	mov rax, qword [rax + 8 * 0]
 20518 0000EEDC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 20519 0000EEDF 488B00                  	mov rax, qword [rax]
 20520 0000EEE2 803804                  	cmp byte [rax], T_closure
 20521 0000EEE5 0F8530950000            	jne L_error_non_closure
 20522 0000EEEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 20523 0000EEEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20524 0000EEF1 FF7500                  	push qword[rbp]
 20525 0000EEF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20526 0000EEF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20527 0000EEFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20528 0000EEFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20529 0000EF03 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20530 0000EF06 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20531 0000EF09 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20532 0000EF0E 4983C103                	add r9, 3 	 ;for getting to the params
 20533 0000EF12 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20534 0000EF16 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20535                                  .L_tc_recycle_frame_loop_0ef7:
 20536 0000EF19 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20537 0000EF1C 7410                    	je .L_tc_recycle_frame_done_0ef7
 20538 0000EF1E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20539 0000EF21 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20540 0000EF24 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20541 0000EF28 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20542 0000EF2C EBEB                    	jmp .L_tc_recycle_frame_loop_0ef7
 20543                                  .L_tc_recycle_frame_done_0ef7:
 20544 0000EF2E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20545 0000EF2F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20546 0000EF33 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20547 0000EF36 C9                      	leave
 20548 0000EF37 C22000                  	ret AND_KILL_FRAME(2)
 20549                                  .L_lambda_opt_end_014f:	; new closure is in rax
 20550 0000EF3A C9                      	leave
 20551 0000EF3B C21800                  	ret AND_KILL_FRAME(1)
 20552                                  .L_lambda_simple_end_0aa2:	; new closure is in rax
 20553 0000EF3E 803804                  	cmp byte [rax], T_closure
 20554 0000EF41 0F85D4940000            	jne L_error_non_closure
 20555 0000EF47 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20556 0000EF4A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20557 0000EF4D FF7500                  	push qword[rbp]
 20558 0000EF50 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20559 0000EF53 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20560 0000EF57 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20561 0000EF5B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20562 0000EF5F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20563 0000EF62 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20564 0000EF65 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20565 0000EF6A 4983C103                	add r9, 3 	 ;for getting to the params
 20566 0000EF6E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20567 0000EF72 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20568                                  .L_tc_recycle_frame_loop_0ef9:
 20569 0000EF75 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20570 0000EF78 7410                    	je .L_tc_recycle_frame_done_0ef9
 20571 0000EF7A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20572 0000EF7D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20573 0000EF80 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20574 0000EF84 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20575 0000EF88 EBEB                    	jmp .L_tc_recycle_frame_loop_0ef9
 20576                                  .L_tc_recycle_frame_done_0ef9:
 20577 0000EF8A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20578 0000EF8B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20579 0000EF8F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20580 0000EF92 C9                      	leave
 20581 0000EF93 C21800                  	ret AND_KILL_FRAME(1)
 20582                                  .L_lambda_simple_end_0aa1:	; new closure is in rax
 20583 0000EF96 803804                  	cmp byte [rax], T_closure
 20584 0000EF99 0F857C940000            	jne L_error_non_closure
 20585 0000EF9F FF7001                  	push SOB_CLOSURE_ENV(rax)
 20586 0000EFA2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20587 0000EFA5 FF7500                  	push qword[rbp]
 20588 0000EFA8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20589 0000EFAB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20590 0000EFAF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20591 0000EFB3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20592 0000EFB7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20593 0000EFBA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20594 0000EFBD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20595 0000EFC2 4983C103                	add r9, 3 	 ;for getting to the params
 20596 0000EFC6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20597 0000EFCA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20598                                  .L_tc_recycle_frame_loop_0efa:
 20599 0000EFCD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20600 0000EFD0 7410                    	je .L_tc_recycle_frame_done_0efa
 20601 0000EFD2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20602 0000EFD5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20603 0000EFD8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20604 0000EFDC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20605 0000EFE0 EBEB                    	jmp .L_tc_recycle_frame_loop_0efa
 20606                                  .L_tc_recycle_frame_done_0efa:
 20607 0000EFE2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20608 0000EFE3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20609 0000EFE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20610 0000EFEA C9                      	leave
 20611 0000EFEB C21800                  	ret AND_KILL_FRAME(1)
 20612                                  .L_lambda_simple_end_0a9d:	; new closure is in rax
 20613 0000EFEE 803804                  	cmp byte [rax], T_closure
 20614 0000EFF1 0F8524940000            	jne L_error_non_closure
 20615 0000EFF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20616 0000EFFA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 20617 0000EFFD FF7500                  	push qword[rbp]
 20618 0000F000 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 20619 0000F003 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 20620 0000F007 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 20621 0000F00B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 20622 0000F00F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 20623 0000F012 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 20624 0000F015 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 20625 0000F01A 4983C103                	add r9, 3 	 ;for getting to the params
 20626 0000F01E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 20627 0000F022 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 20628                                  .L_tc_recycle_frame_loop_0efb:
 20629 0000F025 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 20630 0000F028 7410                    	je .L_tc_recycle_frame_done_0efb
 20631 0000F02A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 20632 0000F02D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 20633 0000F030 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 20634 0000F034 4983E808                	sub r8, 8	 ;move the top of the stack one down
 20635 0000F038 EBEB                    	jmp .L_tc_recycle_frame_loop_0efb
 20636                                  .L_tc_recycle_frame_done_0efb:
 20637 0000F03A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 20638 0000F03B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 20639 0000F03F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 20640 0000F042 C9                      	leave
 20641 0000F043 C22000                  	ret AND_KILL_FRAME(2)
 20642                                  .L_lambda_simple_end_0a9c:	; new closure is in rax
 20643 0000F046 50                      	push rax
 20644 0000F047 6A01                    	push 1	; arg count
 20645 0000F049 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20646 0000F04E E871940000              	call malloc
 20647 0000F053 50                      	push rax
 20648 0000F054 BF00000000              	mov rdi, 8 * 0	; new rib
 20649 0000F059 E866940000              	call malloc
 20650 0000F05E 50                      	push rax
 20651 0000F05F BF08000000              	mov rdi, 8 * 1	; extended env
 20652 0000F064 E85B940000              	call malloc
 20653 0000F069 488B7D10                	mov rdi, ENV
 20654 0000F06D BE00000000              	mov rsi, 0
 20655 0000F072 BA01000000              	mov rdx, 1
 20656                                  .L_lambda_simple_env_loop_0aa4:	; ext_env[i + 1] <-- env[i]
 20657 0000F077 4883FE00                	cmp rsi, 0
 20658 0000F07B 7410                    	je .L_lambda_simple_env_end_0aa4
 20659 0000F07D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20660 0000F081 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20661 0000F085 48FFC6                  	inc rsi
 20662 0000F088 48FFC2                  	inc rdx
 20663 0000F08B EBEA                    	jmp .L_lambda_simple_env_loop_0aa4
 20664                                  .L_lambda_simple_env_end_0aa4:
 20665 0000F08D 5B                      	pop rbx
 20666 0000F08E BE00000000              	mov rsi, 0
 20667                                  .L_lambda_simple_params_loop_0aa4:	; copy params
 20668 0000F093 4883FE00                	cmp rsi, 0
 20669 0000F097 740E                    	je .L_lambda_simple_params_end_0aa4
 20670 0000F099 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20671 0000F09E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20672 0000F0A2 48FFC6                  	inc rsi
 20673 0000F0A5 EBEC                    	jmp .L_lambda_simple_params_loop_0aa4
 20674                                  .L_lambda_simple_params_end_0aa4:
 20675 0000F0A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20676 0000F0AA 4889C3                  	mov rbx, rax
 20677 0000F0AD 58                      	pop rax
 20678 0000F0AE C60004                  	mov byte [rax], T_closure
 20679 0000F0B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20680 0000F0B5 48C74009[C2F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa4
 20681 0000F0BD E947010000              	jmp .L_lambda_simple_end_0aa4
 20682                                  .L_lambda_simple_code_0aa4:	; lambda-simple body
 20683 0000F0C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20684 0000F0C8 740B                    	je .L_lambda_simple_arity_check_ok_0aa4
 20685 0000F0CA FF742410                	push qword [rsp + 8 * 2]
 20686 0000F0CE 6A01                    	push 1
 20687 0000F0D0 E9A8930000              	jmp L_error_incorrect_arity_simple
 20688                                  .L_lambda_simple_arity_check_ok_0aa4:
 20689 0000F0D5 C8000000                	enter 0, 0
 20690                                  	; preparing a non-tail-call
 20691 0000F0D9 488B0425[35140000]      	mov rax, qword [free_var_75]	; free var char=?
 20692 0000F0E1 803805                  	cmp byte [rax], T_undefined
 20693 0000F0E4 0F84AD920000            	je L_error_fvar_undefined
 20694 0000F0EA 50                      	push rax
 20695 0000F0EB 488B0425[24140000]      	mov rax, qword [free_var_74]	; free var char<?
 20696 0000F0F3 803805                  	cmp byte [rax], T_undefined
 20697 0000F0F6 0F849B920000            	je L_error_fvar_undefined
 20698 0000F0FC 50                      	push rax
 20699 0000F0FD 6A02                    	push 2	; arg count
 20700 0000F0FF 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20701 0000F103 803804                  	cmp byte [rax], T_closure
 20702 0000F106 0F850F930000            	jne L_error_non_closure
 20703 0000F10C FF7001                  	push SOB_CLOSURE_ENV(rax)
 20704 0000F10F FF5009                  	call SOB_CLOSURE_CODE(rax)
 20705 0000F112 48890425[20180000]      	mov qword [free_var_134], rax
 20706 0000F11A 48B8-                   	mov rax, sob_void
 20706 0000F11C [0000000000000000] 
 20707                                  
 20708                                  	; preparing a non-tail-call
 20709 0000F124 488B0425[BE130000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20710 0000F12C 803805                  	cmp byte [rax], T_undefined
 20711 0000F12F 0F8462920000            	je L_error_fvar_undefined
 20712 0000F135 50                      	push rax
 20713 0000F136 488B0425[AD130000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 20714 0000F13E 803805                  	cmp byte [rax], T_undefined
 20715 0000F141 0F8450920000            	je L_error_fvar_undefined
 20716 0000F147 50                      	push rax
 20717 0000F148 6A02                    	push 2	; arg count
 20718 0000F14A 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20719 0000F14E 803804                  	cmp byte [rax], T_closure
 20720 0000F151 0F85C4920000            	jne L_error_non_closure
 20721 0000F157 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20722 0000F15A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20723 0000F15D 48890425[54170000]      	mov qword [free_var_122], rax
 20724 0000F165 48B8-                   	mov rax, sob_void
 20724 0000F167 [0000000000000000] 
 20725                                  
 20726                                  	; preparing a non-tail-call
 20727 0000F16F 488B0425[35140000]      	mov rax, qword [free_var_75]	; free var char=?
 20728 0000F177 803805                  	cmp byte [rax], T_undefined
 20729 0000F17A 0F8417920000            	je L_error_fvar_undefined
 20730 0000F180 50                      	push rax
 20731 0000F181 488B0425[57140000]      	mov rax, qword [free_var_77]	; free var char>?
 20732 0000F189 803805                  	cmp byte [rax], T_undefined
 20733 0000F18C 0F8405920000            	je L_error_fvar_undefined
 20734 0000F192 50                      	push rax
 20735 0000F193 6A02                    	push 2	; arg count
 20736 0000F195 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20737 0000F199 803804                  	cmp byte [rax], T_closure
 20738 0000F19C 0F8579920000            	jne L_error_non_closure
 20739 0000F1A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20740 0000F1A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20741 0000F1A8 48890425[53180000]      	mov qword [free_var_137], rax
 20742 0000F1B0 48B8-                   	mov rax, sob_void
 20742 0000F1B2 [0000000000000000] 
 20743                                  
 20744                                  	; preparing a non-tail-call
 20745 0000F1BA 488B0425[BE130000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 20746 0000F1C2 803805                  	cmp byte [rax], T_undefined
 20747 0000F1C5 0F84CC910000            	je L_error_fvar_undefined
 20748 0000F1CB 50                      	push rax
 20749 0000F1CC 488B0425[E0130000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 20750 0000F1D4 803805                  	cmp byte [rax], T_undefined
 20751 0000F1D7 0F84BA910000            	je L_error_fvar_undefined
 20752 0000F1DD 50                      	push rax
 20753 0000F1DE 6A02                    	push 2	; arg count
 20754 0000F1E0 488B4520                	mov rax, PARAM(0)	; param make-string<?
 20755 0000F1E4 803804                  	cmp byte [rax], T_closure
 20756 0000F1E7 0F852E920000            	jne L_error_non_closure
 20757 0000F1ED FF7001                  	push SOB_CLOSURE_ENV(rax)
 20758 0000F1F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20759 0000F1F3 48890425[87170000]      	mov qword [free_var_125], rax
 20760 0000F1FB 48B8-                   	mov rax, sob_void
 20760 0000F1FD [0000000000000000] 
 20761 0000F205 C9                      	leave
 20762 0000F206 C21800                  	ret AND_KILL_FRAME(1)
 20763                                  .L_lambda_simple_end_0aa4:	; new closure is in rax
 20764 0000F209 803804                  	cmp byte [rax], T_closure
 20765 0000F20C 0F8509920000            	jne L_error_non_closure
 20766 0000F212 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20767 0000F215 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20768                                  
 20769 0000F218 4889C7                  	mov rdi, rax
 20770 0000F21B E8F9940000              	call print_sexpr_if_not_void
 20771                                  	; preparing a non-tail-call
 20772 0000F220 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20773 0000F225 E89A920000              	call malloc
 20774 0000F22A 50                      	push rax
 20775 0000F22B BF00000000              	mov rdi, 8 * 0	; new rib
 20776 0000F230 E88F920000              	call malloc
 20777 0000F235 50                      	push rax
 20778 0000F236 BF08000000              	mov rdi, 8 * 1	; extended env
 20779 0000F23B E884920000              	call malloc
 20780 0000F240 488B7D10                	mov rdi, ENV
 20781 0000F244 BE00000000              	mov rsi, 0
 20782 0000F249 BA01000000              	mov rdx, 1
 20783                                  .L_lambda_simple_env_loop_0aa5:	; ext_env[i + 1] <-- env[i]
 20784 0000F24E 4883FE00                	cmp rsi, 0
 20785 0000F252 7410                    	je .L_lambda_simple_env_end_0aa5
 20786 0000F254 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20787 0000F258 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20788 0000F25C 48FFC6                  	inc rsi
 20789 0000F25F 48FFC2                  	inc rdx
 20790 0000F262 EBEA                    	jmp .L_lambda_simple_env_loop_0aa5
 20791                                  .L_lambda_simple_env_end_0aa5:
 20792 0000F264 5B                      	pop rbx
 20793 0000F265 BE00000000              	mov rsi, 0
 20794                                  .L_lambda_simple_params_loop_0aa5:	; copy params
 20795 0000F26A 4883FE00                	cmp rsi, 0
 20796 0000F26E 740E                    	je .L_lambda_simple_params_end_0aa5
 20797 0000F270 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20798 0000F275 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20799 0000F279 48FFC6                  	inc rsi
 20800 0000F27C EBEC                    	jmp .L_lambda_simple_params_loop_0aa5
 20801                                  .L_lambda_simple_params_end_0aa5:
 20802 0000F27E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20803 0000F281 4889C3                  	mov rbx, rax
 20804 0000F284 58                      	pop rax
 20805 0000F285 C60004                  	mov byte [rax], T_closure
 20806 0000F288 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20807 0000F28C 48C74009[99F20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa5
 20808 0000F294 E9A10D0000              	jmp .L_lambda_simple_end_0aa5
 20809                                  .L_lambda_simple_code_0aa5:	; lambda-simple body
 20810 0000F299 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20811 0000F29F 740B                    	je .L_lambda_simple_arity_check_ok_0aa5
 20812 0000F2A1 FF742410                	push qword [rsp + 8 * 2]
 20813 0000F2A5 6A02                    	push 2
 20814 0000F2A7 E9D1910000              	jmp L_error_incorrect_arity_simple
 20815                                  .L_lambda_simple_arity_check_ok_0aa5:
 20816 0000F2AC C8000000                	enter 0, 0
 20817                                  	; preparing a tail-call
 20818 0000F2B0 48B8-                   	mov rax, L_constants + 1993
 20818 0000F2B2 [C907000000000000] 
 20819 0000F2BA 50                      	push rax
 20820 0000F2BB 6A01                    	push 1	; arg count
 20821 0000F2BD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20822 0000F2C2 E8FD910000              	call malloc
 20823 0000F2C7 50                      	push rax
 20824 0000F2C8 BF10000000              	mov rdi, 8 * 2	; new rib
 20825 0000F2CD E8F2910000              	call malloc
 20826 0000F2D2 50                      	push rax
 20827 0000F2D3 BF10000000              	mov rdi, 8 * 2	; extended env
 20828 0000F2D8 E8E7910000              	call malloc
 20829 0000F2DD 488B7D10                	mov rdi, ENV
 20830 0000F2E1 BE00000000              	mov rsi, 0
 20831 0000F2E6 BA01000000              	mov rdx, 1
 20832                                  .L_lambda_simple_env_loop_0aa6:	; ext_env[i + 1] <-- env[i]
 20833 0000F2EB 4883FE01                	cmp rsi, 1
 20834 0000F2EF 7410                    	je .L_lambda_simple_env_end_0aa6
 20835 0000F2F1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20836 0000F2F5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20837 0000F2F9 48FFC6                  	inc rsi
 20838 0000F2FC 48FFC2                  	inc rdx
 20839 0000F2FF EBEA                    	jmp .L_lambda_simple_env_loop_0aa6
 20840                                  .L_lambda_simple_env_end_0aa6:
 20841 0000F301 5B                      	pop rbx
 20842 0000F302 BE00000000              	mov rsi, 0
 20843                                  .L_lambda_simple_params_loop_0aa6:	; copy params
 20844 0000F307 4883FE02                	cmp rsi, 2
 20845 0000F30B 740E                    	je .L_lambda_simple_params_end_0aa6
 20846 0000F30D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20847 0000F312 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20848 0000F316 48FFC6                  	inc rsi
 20849 0000F319 EBEC                    	jmp .L_lambda_simple_params_loop_0aa6
 20850                                  .L_lambda_simple_params_end_0aa6:
 20851 0000F31B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20852 0000F31E 4889C3                  	mov rbx, rax
 20853 0000F321 58                      	pop rax
 20854 0000F322 C60004                  	mov byte [rax], T_closure
 20855 0000F325 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20856 0000F329 48C74009[36F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa6
 20857 0000F331 E9AC0C0000              	jmp .L_lambda_simple_end_0aa6
 20858                                  .L_lambda_simple_code_0aa6:	; lambda-simple body
 20859 0000F336 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20860 0000F33C 740B                    	je .L_lambda_simple_arity_check_ok_0aa6
 20861 0000F33E FF742410                	push qword [rsp + 8 * 2]
 20862 0000F342 6A01                    	push 1
 20863 0000F344 E934910000              	jmp L_error_incorrect_arity_simple
 20864                                  .L_lambda_simple_arity_check_ok_0aa6:
 20865 0000F349 C8000000                	enter 0, 0
 20866 0000F34D BF08000000              	mov rdi, 8*1
 20867 0000F352 E86D910000              	call malloc
 20868 0000F357 488B5D20                	mov rbx, PARAM(0)
 20869 0000F35B 488918                  	mov qword[rax], rbx
 20870 0000F35E 48894520                	mov PARAM(0), rax
 20871 0000F362 48B8-                   	mov rax, sob_void
 20871 0000F364 [0000000000000000] 
 20872                                  
 20873 0000F36C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20874 0000F371 E84E910000              	call malloc
 20875 0000F376 50                      	push rax
 20876 0000F377 BF08000000              	mov rdi, 8 * 1	; new rib
 20877 0000F37C E843910000              	call malloc
 20878 0000F381 50                      	push rax
 20879 0000F382 BF18000000              	mov rdi, 8 * 3	; extended env
 20880 0000F387 E838910000              	call malloc
 20881 0000F38C 488B7D10                	mov rdi, ENV
 20882 0000F390 BE00000000              	mov rsi, 0
 20883 0000F395 BA01000000              	mov rdx, 1
 20884                                  .L_lambda_simple_env_loop_0aa7:	; ext_env[i + 1] <-- env[i]
 20885 0000F39A 4883FE02                	cmp rsi, 2
 20886 0000F39E 7410                    	je .L_lambda_simple_env_end_0aa7
 20887 0000F3A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20888 0000F3A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20889 0000F3A8 48FFC6                  	inc rsi
 20890 0000F3AB 48FFC2                  	inc rdx
 20891 0000F3AE EBEA                    	jmp .L_lambda_simple_env_loop_0aa7
 20892                                  .L_lambda_simple_env_end_0aa7:
 20893 0000F3B0 5B                      	pop rbx
 20894 0000F3B1 BE00000000              	mov rsi, 0
 20895                                  .L_lambda_simple_params_loop_0aa7:	; copy params
 20896 0000F3B6 4883FE01                	cmp rsi, 1
 20897 0000F3BA 740E                    	je .L_lambda_simple_params_end_0aa7
 20898 0000F3BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20899 0000F3C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20900 0000F3C5 48FFC6                  	inc rsi
 20901 0000F3C8 EBEC                    	jmp .L_lambda_simple_params_loop_0aa7
 20902                                  .L_lambda_simple_params_end_0aa7:
 20903 0000F3CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20904 0000F3CD 4889C3                  	mov rbx, rax
 20905 0000F3D0 58                      	pop rax
 20906 0000F3D1 C60004                  	mov byte [rax], T_closure
 20907 0000F3D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20908 0000F3D8 48C74009[E5F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa7
 20909 0000F3E0 E952020000              	jmp .L_lambda_simple_end_0aa7
 20910                                  .L_lambda_simple_code_0aa7:	; lambda-simple body
 20911 0000F3E5 48837C241005            	cmp qword [rsp + 8 * 2], 5
 20912 0000F3EB 740B                    	je .L_lambda_simple_arity_check_ok_0aa7
 20913 0000F3ED FF742410                	push qword [rsp + 8 * 2]
 20914 0000F3F1 6A05                    	push 5
 20915 0000F3F3 E985900000              	jmp L_error_incorrect_arity_simple
 20916                                  .L_lambda_simple_arity_check_ok_0aa7:
 20917 0000F3F8 C8000000                	enter 0, 0
 20918                                  	; preparing a non-tail-call
 20919 0000F3FC 488B4530                	mov rax, PARAM(2)	; param len1
 20920 0000F400 50                      	push rax
 20921 0000F401 488B4520                	mov rax, PARAM(0)	; param i
 20922 0000F405 50                      	push rax
 20923 0000F406 6A02                    	push 2	; arg count
 20924 0000F408 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 20925 0000F410 803805                  	cmp byte [rax], T_undefined
 20926 0000F413 0F847E8F0000            	je L_error_fvar_undefined
 20927 0000F419 803804                  	cmp byte [rax], T_closure
 20928 0000F41C 0F85F98F0000            	jne L_error_non_closure
 20929 0000F422 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20930 0000F425 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20931 0000F428 483D[02000000]          	cmp rax, sob_boolean_false
 20932 0000F42E 0F85FF010000            	jne .L_or_end_00ec
 20933                                  	; preparing a non-tail-call
 20934                                  	; preparing a non-tail-call
 20935 0000F434 488B4520                	mov rax, PARAM(0)	; param i
 20936 0000F438 50                      	push rax
 20937 0000F439 488B4538                	mov rax, PARAM(3)	; param str2
 20938 0000F43D 50                      	push rax
 20939 0000F43E 6A02                    	push 2	; arg count
 20940 0000F440 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 20941 0000F448 803805                  	cmp byte [rax], T_undefined
 20942 0000F44B 0F84468F0000            	je L_error_fvar_undefined
 20943 0000F451 803804                  	cmp byte [rax], T_closure
 20944 0000F454 0F85C18F0000            	jne L_error_non_closure
 20945 0000F45A FF7001                  	push SOB_CLOSURE_ENV(rax)
 20946 0000F45D FF5009                  	call SOB_CLOSURE_CODE(rax)
 20947 0000F460 50                      	push rax
 20948                                  	; preparing a non-tail-call
 20949 0000F461 488B4520                	mov rax, PARAM(0)	; param i
 20950 0000F465 50                      	push rax
 20951 0000F466 488B4528                	mov rax, PARAM(1)	; param str1
 20952 0000F46A 50                      	push rax
 20953 0000F46B 6A02                    	push 2	; arg count
 20954 0000F46D 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 20955 0000F475 803805                  	cmp byte [rax], T_undefined
 20956 0000F478 0F84198F0000            	je L_error_fvar_undefined
 20957 0000F47E 803804                  	cmp byte [rax], T_closure
 20958 0000F481 0F85948F0000            	jne L_error_non_closure
 20959 0000F487 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20960 0000F48A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20961 0000F48D 50                      	push rax
 20962 0000F48E 6A02                    	push 2	; arg count
 20963 0000F490 488B4510                	mov rax, ENV
 20964 0000F494 488B4008                	mov rax, qword [rax + 8 * 1]
 20965 0000F498 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char<?
 20966 0000F49B 803804                  	cmp byte [rax], T_closure
 20967 0000F49E 0F85778F0000            	jne L_error_non_closure
 20968 0000F4A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 20969 0000F4A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20970 0000F4AA 483D[02000000]          	cmp rax, sob_boolean_false
 20971 0000F4B0 0F857D010000            	jne .L_or_end_00ec
 20972                                  	; preparing a non-tail-call
 20973 0000F4B6 488B4530                	mov rax, PARAM(2)	; param len1
 20974 0000F4BA 50                      	push rax
 20975 0000F4BB 488B4520                	mov rax, PARAM(0)	; param i
 20976 0000F4BF 50                      	push rax
 20977 0000F4C0 6A02                    	push 2	; arg count
 20978 0000F4C2 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 20979 0000F4CA 803805                  	cmp byte [rax], T_undefined
 20980 0000F4CD 0F84C48E0000            	je L_error_fvar_undefined
 20981 0000F4D3 803804                  	cmp byte [rax], T_closure
 20982 0000F4D6 0F853F8F0000            	jne L_error_non_closure
 20983 0000F4DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 20984 0000F4DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 20985 0000F4E2 483D[02000000]          	cmp rax, sob_boolean_false
 20986 0000F4E8 0F843B010000            	je .L_if_else_0809
 20987                                  	; preparing a non-tail-call
 20988                                  	; preparing a non-tail-call
 20989 0000F4EE 488B4520                	mov rax, PARAM(0)	; param i
 20990 0000F4F2 50                      	push rax
 20991 0000F4F3 488B4538                	mov rax, PARAM(3)	; param str2
 20992 0000F4F7 50                      	push rax
 20993 0000F4F8 6A02                    	push 2	; arg count
 20994 0000F4FA 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 20995 0000F502 803805                  	cmp byte [rax], T_undefined
 20996 0000F505 0F848C8E0000            	je L_error_fvar_undefined
 20997 0000F50B 803804                  	cmp byte [rax], T_closure
 20998 0000F50E 0F85078F0000            	jne L_error_non_closure
 20999 0000F514 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21000 0000F517 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21001 0000F51A 50                      	push rax
 21002                                  	; preparing a non-tail-call
 21003 0000F51B 488B4520                	mov rax, PARAM(0)	; param i
 21004 0000F51F 50                      	push rax
 21005 0000F520 488B4528                	mov rax, PARAM(1)	; param str1
 21006 0000F524 50                      	push rax
 21007 0000F525 6A02                    	push 2	; arg count
 21008 0000F527 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 21009 0000F52F 803805                  	cmp byte [rax], T_undefined
 21010 0000F532 0F845F8E0000            	je L_error_fvar_undefined
 21011 0000F538 803804                  	cmp byte [rax], T_closure
 21012 0000F53B 0F85DA8E0000            	jne L_error_non_closure
 21013 0000F541 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21014 0000F544 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21015 0000F547 50                      	push rax
 21016 0000F548 6A02                    	push 2	; arg count
 21017 0000F54A 488B4510                	mov rax, ENV
 21018 0000F54E 488B4008                	mov rax, qword [rax + 8 * 1]
 21019 0000F552 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var char=?
 21020 0000F556 803804                  	cmp byte [rax], T_closure
 21021 0000F559 0F85BC8E0000            	jne L_error_non_closure
 21022 0000F55F FF7001                  	push SOB_CLOSURE_ENV(rax)
 21023 0000F562 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21024 0000F565 483D[02000000]          	cmp rax, sob_boolean_false
 21025 0000F56B 0F84AC000000            	je .L_if_else_0808
 21026                                  	; preparing a tail-call
 21027 0000F571 488B4540                	mov rax, PARAM(4)	; param len2
 21028 0000F575 50                      	push rax
 21029 0000F576 488B4538                	mov rax, PARAM(3)	; param str2
 21030 0000F57A 50                      	push rax
 21031 0000F57B 488B4530                	mov rax, PARAM(2)	; param len1
 21032 0000F57F 50                      	push rax
 21033 0000F580 488B4528                	mov rax, PARAM(1)	; param str1
 21034 0000F584 50                      	push rax
 21035                                  	; preparing a non-tail-call
 21036 0000F585 48B8-                   	mov rax, L_constants + 2270
 21036 0000F587 [DE08000000000000] 
 21037 0000F58F 50                      	push rax
 21038 0000F590 488B4520                	mov rax, PARAM(0)	; param i
 21039 0000F594 50                      	push rax
 21040 0000F595 6A02                    	push 2	; arg count
 21041 0000F597 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 21042 0000F59F 803805                  	cmp byte [rax], T_undefined
 21043 0000F5A2 0F84EF8D0000            	je L_error_fvar_undefined
 21044 0000F5A8 803804                  	cmp byte [rax], T_closure
 21045 0000F5AB 0F856A8E0000            	jne L_error_non_closure
 21046 0000F5B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21047 0000F5B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21048 0000F5B7 50                      	push rax
 21049 0000F5B8 6A05                    	push 5	; arg count
 21050 0000F5BA 488B4510                	mov rax, ENV
 21051 0000F5BE 488B00                  	mov rax, qword [rax + 8 * 0]
 21052 0000F5C1 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21053 0000F5C4 488B00                  	mov rax, qword [rax]
 21054 0000F5C7 803804                  	cmp byte [rax], T_closure
 21055 0000F5CA 0F854B8E0000            	jne L_error_non_closure
 21056 0000F5D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21057 0000F5D3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21058 0000F5D6 FF7500                  	push qword[rbp]
 21059 0000F5D9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21060 0000F5DC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21061 0000F5E0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21062 0000F5E4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21063 0000F5E8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21064 0000F5EB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21065 0000F5EE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21066 0000F5F3 4983C103                	add r9, 3 	 ;for getting to the params
 21067 0000F5F7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21068 0000F5FB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21069                                  .L_tc_recycle_frame_loop_0efc:
 21070 0000F5FE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21071 0000F601 7410                    	je .L_tc_recycle_frame_done_0efc
 21072 0000F603 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21073 0000F606 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21074 0000F609 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21075 0000F60D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21076 0000F611 EBEB                    	jmp .L_tc_recycle_frame_loop_0efc
 21077                                  .L_tc_recycle_frame_done_0efc:
 21078 0000F613 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21079 0000F614 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21080 0000F618 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21081 0000F61B EB0A                    	jmp .L_if_end_0808
 21082                                  .L_if_else_0808:
 21083 0000F61D 48B8-                   	mov rax, L_constants + 2
 21083 0000F61F [0200000000000000] 
 21084                                  .L_if_end_0808:
 21085 0000F627 EB0A                    	jmp .L_if_end_0809
 21086                                  .L_if_else_0809:
 21087 0000F629 48B8-                   	mov rax, L_constants + 2
 21087 0000F62B [0200000000000000] 
 21088                                  .L_if_end_0809:
 21089                                  .L_or_end_00ec:
 21090 0000F633 C9                      	leave
 21091 0000F634 C23800                  	ret AND_KILL_FRAME(5)
 21092                                  .L_lambda_simple_end_0aa7:	; new closure is in rax
 21093 0000F637 50                      	push rax
 21094 0000F638 488B4520                	mov rax, PARAM(0)	; param run
 21095 0000F63C 8F00                    	pop qword [rax]
 21096 0000F63E 48B8-                   	mov rax, sob_void
 21096 0000F640 [0000000000000000] 
 21097                                  
 21098                                  	; preparing a tail-call
 21099 0000F648 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21100 0000F64D E8728E0000              	call malloc
 21101 0000F652 50                      	push rax
 21102 0000F653 BF08000000              	mov rdi, 8 * 1	; new rib
 21103 0000F658 E8678E0000              	call malloc
 21104 0000F65D 50                      	push rax
 21105 0000F65E BF18000000              	mov rdi, 8 * 3	; extended env
 21106 0000F663 E85C8E0000              	call malloc
 21107 0000F668 488B7D10                	mov rdi, ENV
 21108 0000F66C BE00000000              	mov rsi, 0
 21109 0000F671 BA01000000              	mov rdx, 1
 21110                                  .L_lambda_simple_env_loop_0aa8:	; ext_env[i + 1] <-- env[i]
 21111 0000F676 4883FE02                	cmp rsi, 2
 21112 0000F67A 7410                    	je .L_lambda_simple_env_end_0aa8
 21113 0000F67C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21114 0000F680 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21115 0000F684 48FFC6                  	inc rsi
 21116 0000F687 48FFC2                  	inc rdx
 21117 0000F68A EBEA                    	jmp .L_lambda_simple_env_loop_0aa8
 21118                                  .L_lambda_simple_env_end_0aa8:
 21119 0000F68C 5B                      	pop rbx
 21120 0000F68D BE00000000              	mov rsi, 0
 21121                                  .L_lambda_simple_params_loop_0aa8:	; copy params
 21122 0000F692 4883FE01                	cmp rsi, 1
 21123 0000F696 740E                    	je .L_lambda_simple_params_end_0aa8
 21124 0000F698 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21125 0000F69D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21126 0000F6A1 48FFC6                  	inc rsi
 21127 0000F6A4 EBEC                    	jmp .L_lambda_simple_params_loop_0aa8
 21128                                  .L_lambda_simple_params_end_0aa8:
 21129 0000F6A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21130 0000F6A9 4889C3                  	mov rbx, rax
 21131 0000F6AC 58                      	pop rax
 21132 0000F6AD C60004                  	mov byte [rax], T_closure
 21133 0000F6B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21134 0000F6B4 48C74009[C1F60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa8
 21135 0000F6BC E9B2020000              	jmp .L_lambda_simple_end_0aa8
 21136                                  .L_lambda_simple_code_0aa8:	; lambda-simple body
 21137 0000F6C1 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21138 0000F6C7 740B                    	je .L_lambda_simple_arity_check_ok_0aa8
 21139 0000F6C9 FF742410                	push qword [rsp + 8 * 2]
 21140 0000F6CD 6A02                    	push 2
 21141 0000F6CF E9A98D0000              	jmp L_error_incorrect_arity_simple
 21142                                  .L_lambda_simple_arity_check_ok_0aa8:
 21143 0000F6D4 C8000000                	enter 0, 0
 21144                                  	; preparing a tail-call
 21145                                  	; preparing a non-tail-call
 21146 0000F6D8 488B4528                	mov rax, PARAM(1)	; param str2
 21147 0000F6DC 50                      	push rax
 21148 0000F6DD 6A01                    	push 1	; arg count
 21149 0000F6DF 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 21150 0000F6E7 803805                  	cmp byte [rax], T_undefined
 21151 0000F6EA 0F84A78C0000            	je L_error_fvar_undefined
 21152 0000F6F0 803804                  	cmp byte [rax], T_closure
 21153 0000F6F3 0F85228D0000            	jne L_error_non_closure
 21154 0000F6F9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21155 0000F6FC FF5009                  	call SOB_CLOSURE_CODE(rax)
 21156 0000F6FF 50                      	push rax
 21157                                  	; preparing a non-tail-call
 21158 0000F700 488B4520                	mov rax, PARAM(0)	; param str1
 21159 0000F704 50                      	push rax
 21160 0000F705 6A01                    	push 1	; arg count
 21161 0000F707 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 21162 0000F70F 803805                  	cmp byte [rax], T_undefined
 21163 0000F712 0F847F8C0000            	je L_error_fvar_undefined
 21164 0000F718 803804                  	cmp byte [rax], T_closure
 21165 0000F71B 0F85FA8C0000            	jne L_error_non_closure
 21166 0000F721 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21167 0000F724 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21168 0000F727 50                      	push rax
 21169 0000F728 6A02                    	push 2	; arg count
 21170 0000F72A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21171 0000F72F E8908D0000              	call malloc
 21172 0000F734 50                      	push rax
 21173 0000F735 BF10000000              	mov rdi, 8 * 2	; new rib
 21174 0000F73A E8858D0000              	call malloc
 21175 0000F73F 50                      	push rax
 21176 0000F740 BF20000000              	mov rdi, 8 * 4	; extended env
 21177 0000F745 E87A8D0000              	call malloc
 21178 0000F74A 488B7D10                	mov rdi, ENV
 21179 0000F74E BE00000000              	mov rsi, 0
 21180 0000F753 BA01000000              	mov rdx, 1
 21181                                  .L_lambda_simple_env_loop_0aa9:	; ext_env[i + 1] <-- env[i]
 21182 0000F758 4883FE03                	cmp rsi, 3
 21183 0000F75C 7410                    	je .L_lambda_simple_env_end_0aa9
 21184 0000F75E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21185 0000F762 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21186 0000F766 48FFC6                  	inc rsi
 21187 0000F769 48FFC2                  	inc rdx
 21188 0000F76C EBEA                    	jmp .L_lambda_simple_env_loop_0aa9
 21189                                  .L_lambda_simple_env_end_0aa9:
 21190 0000F76E 5B                      	pop rbx
 21191 0000F76F BE00000000              	mov rsi, 0
 21192                                  .L_lambda_simple_params_loop_0aa9:	; copy params
 21193 0000F774 4883FE02                	cmp rsi, 2
 21194 0000F778 740E                    	je .L_lambda_simple_params_end_0aa9
 21195 0000F77A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21196 0000F77F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21197 0000F783 48FFC6                  	inc rsi
 21198 0000F786 EBEC                    	jmp .L_lambda_simple_params_loop_0aa9
 21199                                  .L_lambda_simple_params_end_0aa9:
 21200 0000F788 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21201 0000F78B 4889C3                  	mov rbx, rax
 21202 0000F78E 58                      	pop rax
 21203 0000F78F C60004                  	mov byte [rax], T_closure
 21204 0000F792 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21205 0000F796 48C74009[A3F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aa9
 21206 0000F79E E978010000              	jmp .L_lambda_simple_end_0aa9
 21207                                  .L_lambda_simple_code_0aa9:	; lambda-simple body
 21208 0000F7A3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21209 0000F7A9 740B                    	je .L_lambda_simple_arity_check_ok_0aa9
 21210 0000F7AB FF742410                	push qword [rsp + 8 * 2]
 21211 0000F7AF 6A02                    	push 2
 21212 0000F7B1 E9C78C0000              	jmp L_error_incorrect_arity_simple
 21213                                  .L_lambda_simple_arity_check_ok_0aa9:
 21214 0000F7B6 C8000000                	enter 0, 0
 21215                                  	; preparing a non-tail-call
 21216 0000F7BA 488B4528                	mov rax, PARAM(1)	; param len2
 21217 0000F7BE 50                      	push rax
 21218 0000F7BF 488B4520                	mov rax, PARAM(0)	; param len1
 21219 0000F7C3 50                      	push rax
 21220 0000F7C4 6A02                    	push 2	; arg count
 21221 0000F7C6 488B0425[8F0F0000]      	mov rax, qword [free_var_5]	; free var <=
 21222 0000F7CE 803805                  	cmp byte [rax], T_undefined
 21223 0000F7D1 0F84C08B0000            	je L_error_fvar_undefined
 21224 0000F7D7 803804                  	cmp byte [rax], T_closure
 21225 0000F7DA 0F853B8C0000            	jne L_error_non_closure
 21226 0000F7E0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21227 0000F7E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21228 0000F7E6 483D[02000000]          	cmp rax, sob_boolean_false
 21229 0000F7EC 0F8495000000            	je .L_if_else_080a
 21230                                  	; preparing a tail-call
 21231 0000F7F2 488B4528                	mov rax, PARAM(1)	; param len2
 21232 0000F7F6 50                      	push rax
 21233 0000F7F7 488B4510                	mov rax, ENV
 21234 0000F7FB 488B00                  	mov rax, qword [rax + 8 * 0]
 21235 0000F7FE 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21236 0000F802 50                      	push rax
 21237 0000F803 488B4520                	mov rax, PARAM(0)	; param len1
 21238 0000F807 50                      	push rax
 21239 0000F808 488B4510                	mov rax, ENV
 21240 0000F80C 488B00                  	mov rax, qword [rax + 8 * 0]
 21241 0000F80F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21242 0000F812 50                      	push rax
 21243 0000F813 48B8-                   	mov rax, L_constants + 2135
 21243 0000F815 [5708000000000000] 
 21244 0000F81D 50                      	push rax
 21245 0000F81E 6A05                    	push 5	; arg count
 21246 0000F820 488B4510                	mov rax, ENV
 21247 0000F824 488B4008                	mov rax, qword [rax + 8 * 1]
 21248 0000F828 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21249 0000F82B 488B00                  	mov rax, qword [rax]
 21250 0000F82E 803804                  	cmp byte [rax], T_closure
 21251 0000F831 0F85E48B0000            	jne L_error_non_closure
 21252 0000F837 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21253 0000F83A FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21254 0000F83D FF7500                  	push qword[rbp]
 21255 0000F840 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21256 0000F843 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21257 0000F847 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21258 0000F84B 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21259 0000F84F 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21260 0000F852 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21261 0000F855 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21262 0000F85A 4983C103                	add r9, 3 	 ;for getting to the params
 21263 0000F85E 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21264 0000F862 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21265                                  .L_tc_recycle_frame_loop_0efd:
 21266 0000F865 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21267 0000F868 7410                    	je .L_tc_recycle_frame_done_0efd
 21268 0000F86A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21269 0000F86D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21270 0000F870 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21271 0000F874 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21272 0000F878 EBEB                    	jmp .L_tc_recycle_frame_loop_0efd
 21273                                  .L_tc_recycle_frame_done_0efd:
 21274 0000F87A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21275 0000F87B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21276 0000F87F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21277 0000F882 E990000000              	jmp .L_if_end_080a
 21278                                  .L_if_else_080a:
 21279                                  	; preparing a tail-call
 21280 0000F887 488B4520                	mov rax, PARAM(0)	; param len1
 21281 0000F88B 50                      	push rax
 21282 0000F88C 488B4510                	mov rax, ENV
 21283 0000F890 488B00                  	mov rax, qword [rax + 8 * 0]
 21284 0000F893 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 21285 0000F896 50                      	push rax
 21286 0000F897 488B4528                	mov rax, PARAM(1)	; param len2
 21287 0000F89B 50                      	push rax
 21288 0000F89C 488B4510                	mov rax, ENV
 21289 0000F8A0 488B00                  	mov rax, qword [rax + 8 * 0]
 21290 0000F8A3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 21291 0000F8A7 50                      	push rax
 21292 0000F8A8 48B8-                   	mov rax, L_constants + 2135
 21292 0000F8AA [5708000000000000] 
 21293 0000F8B2 50                      	push rax
 21294 0000F8B3 6A05                    	push 5	; arg count
 21295 0000F8B5 488B4510                	mov rax, ENV
 21296 0000F8B9 488B4008                	mov rax, qword [rax + 8 * 1]
 21297 0000F8BD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21298 0000F8C0 488B00                  	mov rax, qword [rax]
 21299 0000F8C3 803804                  	cmp byte [rax], T_closure
 21300 0000F8C6 0F854F8B0000            	jne L_error_non_closure
 21301 0000F8CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 21302 0000F8CF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21303 0000F8D2 FF7500                  	push qword[rbp]
 21304 0000F8D5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21305 0000F8D8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21306 0000F8DC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21307 0000F8E0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21308 0000F8E4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21309 0000F8E7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21310 0000F8EA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21311 0000F8EF 4983C103                	add r9, 3 	 ;for getting to the params
 21312 0000F8F3 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21313 0000F8F7 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21314                                  .L_tc_recycle_frame_loop_0efe:
 21315 0000F8FA 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21316 0000F8FD 7410                    	je .L_tc_recycle_frame_done_0efe
 21317 0000F8FF 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21318 0000F902 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21319 0000F905 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21320 0000F909 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21321 0000F90D EBEB                    	jmp .L_tc_recycle_frame_loop_0efe
 21322                                  .L_tc_recycle_frame_done_0efe:
 21323 0000F90F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21324 0000F910 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21325 0000F914 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21326                                  .L_if_end_080a:
 21327 0000F917 C9                      	leave
 21328 0000F918 C22000                  	ret AND_KILL_FRAME(2)
 21329                                  .L_lambda_simple_end_0aa9:	; new closure is in rax
 21330 0000F91B 803804                  	cmp byte [rax], T_closure
 21331 0000F91E 0F85F78A0000            	jne L_error_non_closure
 21332 0000F924 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21333 0000F927 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21334 0000F92A FF7500                  	push qword[rbp]
 21335 0000F92D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21336 0000F930 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21337 0000F934 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21338 0000F938 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21339 0000F93C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21340 0000F93F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21341 0000F942 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21342 0000F947 4983C103                	add r9, 3 	 ;for getting to the params
 21343 0000F94B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21344 0000F94F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21345                                  .L_tc_recycle_frame_loop_0eff:
 21346 0000F952 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21347 0000F955 7410                    	je .L_tc_recycle_frame_done_0eff
 21348 0000F957 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21349 0000F95A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21350 0000F95D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21351 0000F961 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21352 0000F965 EBEB                    	jmp .L_tc_recycle_frame_loop_0eff
 21353                                  .L_tc_recycle_frame_done_0eff:
 21354 0000F967 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21355 0000F968 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21356 0000F96C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21357 0000F96F C9                      	leave
 21358 0000F970 C22000                  	ret AND_KILL_FRAME(2)
 21359                                  .L_lambda_simple_end_0aa8:	; new closure is in rax
 21360 0000F973 50                      	push rax
 21361 0000F974 6A01                    	push 1	; arg count
 21362 0000F976 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21363 0000F97B E8448B0000              	call malloc
 21364 0000F980 50                      	push rax
 21365 0000F981 BF08000000              	mov rdi, 8 * 1	; new rib
 21366 0000F986 E8398B0000              	call malloc
 21367 0000F98B 50                      	push rax
 21368 0000F98C BF18000000              	mov rdi, 8 * 3	; extended env
 21369 0000F991 E82E8B0000              	call malloc
 21370 0000F996 488B7D10                	mov rdi, ENV
 21371 0000F99A BE00000000              	mov rsi, 0
 21372 0000F99F BA01000000              	mov rdx, 1
 21373                                  .L_lambda_simple_env_loop_0aaa:	; ext_env[i + 1] <-- env[i]
 21374 0000F9A4 4883FE02                	cmp rsi, 2
 21375 0000F9A8 7410                    	je .L_lambda_simple_env_end_0aaa
 21376 0000F9AA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21377 0000F9AE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21378 0000F9B2 48FFC6                  	inc rsi
 21379 0000F9B5 48FFC2                  	inc rdx
 21380 0000F9B8 EBEA                    	jmp .L_lambda_simple_env_loop_0aaa
 21381                                  .L_lambda_simple_env_end_0aaa:
 21382 0000F9BA 5B                      	pop rbx
 21383 0000F9BB BE00000000              	mov rsi, 0
 21384                                  .L_lambda_simple_params_loop_0aaa:	; copy params
 21385 0000F9C0 4883FE01                	cmp rsi, 1
 21386 0000F9C4 740E                    	je .L_lambda_simple_params_end_0aaa
 21387 0000F9C6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21388 0000F9CB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21389 0000F9CF 48FFC6                  	inc rsi
 21390 0000F9D2 EBEC                    	jmp .L_lambda_simple_params_loop_0aaa
 21391                                  .L_lambda_simple_params_end_0aaa:
 21392 0000F9D4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21393 0000F9D7 4889C3                  	mov rbx, rax
 21394 0000F9DA 58                      	pop rax
 21395 0000F9DB C60004                  	mov byte [rax], T_closure
 21396 0000F9DE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21397 0000F9E2 48C74009[EFF90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aaa
 21398 0000F9EA E99B050000              	jmp .L_lambda_simple_end_0aaa
 21399                                  .L_lambda_simple_code_0aaa:	; lambda-simple body
 21400 0000F9EF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21401 0000F9F5 740B                    	je .L_lambda_simple_arity_check_ok_0aaa
 21402 0000F9F7 FF742410                	push qword [rsp + 8 * 2]
 21403 0000F9FB 6A01                    	push 1
 21404 0000F9FD E97B8A0000              	jmp L_error_incorrect_arity_simple
 21405                                  .L_lambda_simple_arity_check_ok_0aaa:
 21406 0000FA02 C8000000                	enter 0, 0
 21407                                  	; preparing a tail-call
 21408 0000FA06 48B8-                   	mov rax, L_constants + 1993
 21408 0000FA08 [C907000000000000] 
 21409 0000FA10 50                      	push rax
 21410 0000FA11 6A01                    	push 1	; arg count
 21411 0000FA13 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21412 0000FA18 E8A78A0000              	call malloc
 21413 0000FA1D 50                      	push rax
 21414 0000FA1E BF08000000              	mov rdi, 8 * 1	; new rib
 21415 0000FA23 E89C8A0000              	call malloc
 21416 0000FA28 50                      	push rax
 21417 0000FA29 BF20000000              	mov rdi, 8 * 4	; extended env
 21418 0000FA2E E8918A0000              	call malloc
 21419 0000FA33 488B7D10                	mov rdi, ENV
 21420 0000FA37 BE00000000              	mov rsi, 0
 21421 0000FA3C BA01000000              	mov rdx, 1
 21422                                  .L_lambda_simple_env_loop_0aab:	; ext_env[i + 1] <-- env[i]
 21423 0000FA41 4883FE03                	cmp rsi, 3
 21424 0000FA45 7410                    	je .L_lambda_simple_env_end_0aab
 21425 0000FA47 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21426 0000FA4B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21427 0000FA4F 48FFC6                  	inc rsi
 21428 0000FA52 48FFC2                  	inc rdx
 21429 0000FA55 EBEA                    	jmp .L_lambda_simple_env_loop_0aab
 21430                                  .L_lambda_simple_env_end_0aab:
 21431 0000FA57 5B                      	pop rbx
 21432 0000FA58 BE00000000              	mov rsi, 0
 21433                                  .L_lambda_simple_params_loop_0aab:	; copy params
 21434 0000FA5D 4883FE01                	cmp rsi, 1
 21435 0000FA61 740E                    	je .L_lambda_simple_params_end_0aab
 21436 0000FA63 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21437 0000FA68 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21438 0000FA6C 48FFC6                  	inc rsi
 21439 0000FA6F EBEC                    	jmp .L_lambda_simple_params_loop_0aab
 21440                                  .L_lambda_simple_params_end_0aab:
 21441 0000FA71 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21442 0000FA74 4889C3                  	mov rbx, rax
 21443 0000FA77 58                      	pop rax
 21444 0000FA78 C60004                  	mov byte [rax], T_closure
 21445 0000FA7B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21446 0000FA7F 48C74009[8CFA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aab
 21447 0000FA87 E9A6040000              	jmp .L_lambda_simple_end_0aab
 21448                                  .L_lambda_simple_code_0aab:	; lambda-simple body
 21449 0000FA8C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21450 0000FA92 740B                    	je .L_lambda_simple_arity_check_ok_0aab
 21451 0000FA94 FF742410                	push qword [rsp + 8 * 2]
 21452 0000FA98 6A01                    	push 1
 21453 0000FA9A E9DE890000              	jmp L_error_incorrect_arity_simple
 21454                                  .L_lambda_simple_arity_check_ok_0aab:
 21455 0000FA9F C8000000                	enter 0, 0
 21456 0000FAA3 BF08000000              	mov rdi, 8*1
 21457 0000FAA8 E8178A0000              	call malloc
 21458 0000FAAD 488B5D20                	mov rbx, PARAM(0)
 21459 0000FAB1 488918                  	mov qword[rax], rbx
 21460 0000FAB4 48894520                	mov PARAM(0), rax
 21461 0000FAB8 48B8-                   	mov rax, sob_void
 21461 0000FABA [0000000000000000] 
 21462                                  
 21463 0000FAC2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21464 0000FAC7 E8F8890000              	call malloc
 21465 0000FACC 50                      	push rax
 21466 0000FACD BF08000000              	mov rdi, 8 * 1	; new rib
 21467 0000FAD2 E8ED890000              	call malloc
 21468 0000FAD7 50                      	push rax
 21469 0000FAD8 BF28000000              	mov rdi, 8 * 5	; extended env
 21470 0000FADD E8E2890000              	call malloc
 21471 0000FAE2 488B7D10                	mov rdi, ENV
 21472 0000FAE6 BE00000000              	mov rsi, 0
 21473 0000FAEB BA01000000              	mov rdx, 1
 21474                                  .L_lambda_simple_env_loop_0aac:	; ext_env[i + 1] <-- env[i]
 21475 0000FAF0 4883FE04                	cmp rsi, 4
 21476 0000FAF4 7410                    	je .L_lambda_simple_env_end_0aac
 21477 0000FAF6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21478 0000FAFA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21479 0000FAFE 48FFC6                  	inc rsi
 21480 0000FB01 48FFC2                  	inc rdx
 21481 0000FB04 EBEA                    	jmp .L_lambda_simple_env_loop_0aac
 21482                                  .L_lambda_simple_env_end_0aac:
 21483 0000FB06 5B                      	pop rbx
 21484 0000FB07 BE00000000              	mov rsi, 0
 21485                                  .L_lambda_simple_params_loop_0aac:	; copy params
 21486 0000FB0C 4883FE01                	cmp rsi, 1
 21487 0000FB10 740E                    	je .L_lambda_simple_params_end_0aac
 21488 0000FB12 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21489 0000FB17 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21490 0000FB1B 48FFC6                  	inc rsi
 21491 0000FB1E EBEC                    	jmp .L_lambda_simple_params_loop_0aac
 21492                                  .L_lambda_simple_params_end_0aac:
 21493 0000FB20 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21494 0000FB23 4889C3                  	mov rbx, rax
 21495 0000FB26 58                      	pop rax
 21496 0000FB27 C60004                  	mov byte [rax], T_closure
 21497 0000FB2A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21498 0000FB2E 48C74009[3BFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aac
 21499 0000FB36 E962010000              	jmp .L_lambda_simple_end_0aac
 21500                                  .L_lambda_simple_code_0aac:	; lambda-simple body
 21501 0000FB3B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21502 0000FB41 740B                    	je .L_lambda_simple_arity_check_ok_0aac
 21503 0000FB43 FF742410                	push qword [rsp + 8 * 2]
 21504 0000FB47 6A02                    	push 2
 21505 0000FB49 E92F890000              	jmp L_error_incorrect_arity_simple
 21506                                  .L_lambda_simple_arity_check_ok_0aac:
 21507 0000FB4E C8000000                	enter 0, 0
 21508                                  	; preparing a non-tail-call
 21509 0000FB52 488B4528                	mov rax, PARAM(1)	; param strs
 21510 0000FB56 50                      	push rax
 21511 0000FB57 6A01                    	push 1	; arg count
 21512 0000FB59 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 21513 0000FB61 803805                  	cmp byte [rax], T_undefined
 21514 0000FB64 0F842D880000            	je L_error_fvar_undefined
 21515 0000FB6A 803804                  	cmp byte [rax], T_closure
 21516 0000FB6D 0F85A8880000            	jne L_error_non_closure
 21517 0000FB73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21518 0000FB76 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21519 0000FB79 483D[02000000]          	cmp rax, sob_boolean_false
 21520 0000FB7F 0F8514010000            	jne .L_or_end_00ed
 21521                                  	; preparing a non-tail-call
 21522                                  	; preparing a non-tail-call
 21523 0000FB85 488B4528                	mov rax, PARAM(1)	; param strs
 21524 0000FB89 50                      	push rax
 21525 0000FB8A 6A01                    	push 1	; arg count
 21526 0000FB8C 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 21527 0000FB94 803805                  	cmp byte [rax], T_undefined
 21528 0000FB97 0F84FA870000            	je L_error_fvar_undefined
 21529 0000FB9D 803804                  	cmp byte [rax], T_closure
 21530 0000FBA0 0F8575880000            	jne L_error_non_closure
 21531 0000FBA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21532 0000FBA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21533 0000FBAC 50                      	push rax
 21534 0000FBAD 488B4520                	mov rax, PARAM(0)	; param str
 21535 0000FBB1 50                      	push rax
 21536 0000FBB2 6A02                    	push 2	; arg count
 21537 0000FBB4 488B4510                	mov rax, ENV
 21538 0000FBB8 488B4008                	mov rax, qword [rax + 8 * 1]
 21539 0000FBBC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string<=?
 21540 0000FBBF 803804                  	cmp byte [rax], T_closure
 21541 0000FBC2 0F8553880000            	jne L_error_non_closure
 21542 0000FBC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21543 0000FBCB FF5009                  	call SOB_CLOSURE_CODE(rax)
 21544 0000FBCE 483D[02000000]          	cmp rax, sob_boolean_false
 21545 0000FBD4 0F84B5000000            	je .L_if_else_080b
 21546                                  	; preparing a tail-call
 21547                                  	; preparing a non-tail-call
 21548 0000FBDA 488B4528                	mov rax, PARAM(1)	; param strs
 21549 0000FBDE 50                      	push rax
 21550 0000FBDF 6A01                    	push 1	; arg count
 21551 0000FBE1 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 21552 0000FBE9 803805                  	cmp byte [rax], T_undefined
 21553 0000FBEC 0F84A5870000            	je L_error_fvar_undefined
 21554 0000FBF2 803804                  	cmp byte [rax], T_closure
 21555 0000FBF5 0F8520880000            	jne L_error_non_closure
 21556 0000FBFB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21557 0000FBFE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21558 0000FC01 50                      	push rax
 21559                                  	; preparing a non-tail-call
 21560 0000FC02 488B4528                	mov rax, PARAM(1)	; param strs
 21561 0000FC06 50                      	push rax
 21562 0000FC07 6A01                    	push 1	; arg count
 21563 0000FC09 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 21564 0000FC11 803805                  	cmp byte [rax], T_undefined
 21565 0000FC14 0F847D870000            	je L_error_fvar_undefined
 21566 0000FC1A 803804                  	cmp byte [rax], T_closure
 21567 0000FC1D 0F85F8870000            	jne L_error_non_closure
 21568 0000FC23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21569 0000FC26 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21570 0000FC29 50                      	push rax
 21571 0000FC2A 6A02                    	push 2	; arg count
 21572 0000FC2C 488B4510                	mov rax, ENV
 21573 0000FC30 488B00                  	mov rax, qword [rax + 8 * 0]
 21574 0000FC33 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21575 0000FC36 488B00                  	mov rax, qword [rax]
 21576 0000FC39 803804                  	cmp byte [rax], T_closure
 21577 0000FC3C 0F85D9870000            	jne L_error_non_closure
 21578 0000FC42 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21579 0000FC45 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21580 0000FC48 FF7500                  	push qword[rbp]
 21581 0000FC4B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21582 0000FC4E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21583 0000FC52 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21584 0000FC56 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21585 0000FC5A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21586 0000FC5D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21587 0000FC60 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21588 0000FC65 4983C103                	add r9, 3 	 ;for getting to the params
 21589 0000FC69 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21590 0000FC6D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21591                                  .L_tc_recycle_frame_loop_0f00:
 21592 0000FC70 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21593 0000FC73 7410                    	je .L_tc_recycle_frame_done_0f00
 21594 0000FC75 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21595 0000FC78 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21596 0000FC7B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21597 0000FC7F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21598 0000FC83 EBEB                    	jmp .L_tc_recycle_frame_loop_0f00
 21599                                  .L_tc_recycle_frame_done_0f00:
 21600 0000FC85 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21601 0000FC86 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21602 0000FC8A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21603 0000FC8D EB0A                    	jmp .L_if_end_080b
 21604                                  .L_if_else_080b:
 21605 0000FC8F 48B8-                   	mov rax, L_constants + 2
 21605 0000FC91 [0200000000000000] 
 21606                                  .L_if_end_080b:
 21607                                  .L_or_end_00ed:
 21608 0000FC99 C9                      	leave
 21609 0000FC9A C22000                  	ret AND_KILL_FRAME(2)
 21610                                  .L_lambda_simple_end_0aac:	; new closure is in rax
 21611 0000FC9D 50                      	push rax
 21612 0000FC9E 488B4520                	mov rax, PARAM(0)	; param run
 21613 0000FCA2 8F00                    	pop qword [rax]
 21614 0000FCA4 48B8-                   	mov rax, sob_void
 21614 0000FCA6 [0000000000000000] 
 21615                                  
 21616 0000FCAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21617 0000FCB3 E80C880000              	call malloc
 21618 0000FCB8 50                      	push rax
 21619 0000FCB9 BF08000000              	mov rdi, 8 * 1	; new rib
 21620 0000FCBE E801880000              	call malloc
 21621 0000FCC3 50                      	push rax
 21622 0000FCC4 BF28000000              	mov rdi, 8 * 5	; extended env
 21623 0000FCC9 E8F6870000              	call malloc
 21624 0000FCCE 488B7D10                	mov rdi, ENV
 21625 0000FCD2 BE00000000              	mov rsi, 0
 21626 0000FCD7 BA01000000              	mov rdx, 1
 21627                                  .L_lambda_opt_env_loop_0150:	; ext_env[i + 1] <-- env[i]
 21628 0000FCDC 4883FE04                	cmp rsi, 4
 21629 0000FCE0 7410                    	je .L_lambda_opt_env_end_0150
 21630 0000FCE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21631 0000FCE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21632 0000FCEA 48FFC6                  	inc rsi
 21633 0000FCED 48FFC2                  	inc rdx
 21634 0000FCF0 EBEA                    	jmp .L_lambda_opt_env_loop_0150
 21635                                  .L_lambda_opt_env_end_0150:
 21636 0000FCF2 5B                      	pop rbx
 21637 0000FCF3 BE00000000              	mov rsi, 0
 21638                                  .L_lambda_opt_params_loop_0150:	; copy params
 21639 0000FCF8 4883FE01                	cmp rsi, 1
 21640 0000FCFC 740E                    	je .L_lambda_opt_params_end_0150
 21641 0000FCFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21642 0000FD03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21643 0000FD07 48FFC6                  	inc rsi
 21644 0000FD0A EBEC                    	jmp .L_lambda_opt_params_loop_0150
 21645                                  .L_lambda_opt_params_end_0150:
 21646 0000FD0C 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 21647 0000FD0F 4889C3                  	mov rbx, rax
 21648 0000FD12 58                      	pop rax
 21649 0000FD13 C60004                  	mov byte [rax], T_closure
 21650 0000FD16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21651 0000FD1A 48C74009[27FD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0150
 21652 0000FD22 E907020000              	jmp .L_lambda_opt_end_0150
 21653                                  .L_lambda_opt_code_0150:	; lambda-opt body
 21654 0000FD27 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21655 0000FD2D 7411                    	je .L_lambda_opt_arity_check_exact_0150
 21656 0000FD2F 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0150
 21657 0000FD35 FF742410                	push qword [rsp + 8 * 2]
 21658 0000FD39 6A01                    	push 1
 21659 0000FD3B E951870000              	jmp L_error_incorrect_arity_opt
 21660                                  .L_lambda_opt_arity_check_exact_0150:
 21661 0000FD40 4883EC08                	sub rsp, 8
 21662 0000FD44 488B442408              	mov rax, qword[rsp + 8 *1]
 21663 0000FD49 48890424                	mov qword[rsp], rax  
 21664 0000FD4D 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 21665 0000FD52 4889442408              	mov qword[rsp + 8 * 1], rax
 21666 0000FD57 B802000000              	mov rax, 2
 21667 0000FD5C 4889442410              	mov qword[rsp + 8 *2], rax
 21668 0000FD61 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 21669 0000FD66 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 21670 0000FD6B 48B8-                   	mov rax, sob_nil
 21670 0000FD6D [0100000000000000] 
 21671 0000FD75 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 21672 0000FD7A C8000000                	enter 0, 0
 21673                                  	; preparing a tail-call
 21674 0000FD7E 488B4528                	mov rax, PARAM(1)	; param strs
 21675 0000FD82 50                      	push rax
 21676 0000FD83 488B4520                	mov rax, PARAM(0)	; param str
 21677 0000FD87 50                      	push rax
 21678 0000FD88 6A02                    	push 2	; arg count
 21679 0000FD8A 488B4510                	mov rax, ENV
 21680 0000FD8E 488B00                  	mov rax, qword [rax + 8 * 0]
 21681 0000FD91 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21682 0000FD94 488B00                  	mov rax, qword [rax]
 21683 0000FD97 803804                  	cmp byte [rax], T_closure
 21684 0000FD9A 0F857B860000            	jne L_error_non_closure
 21685 0000FDA0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21686 0000FDA3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21687 0000FDA6 FF7500                  	push qword[rbp]
 21688 0000FDA9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21689 0000FDAC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21690 0000FDB0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21691 0000FDB4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21692 0000FDB8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21693 0000FDBB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21694 0000FDBE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21695 0000FDC3 4983C103                	add r9, 3 	 ;for getting to the params
 21696 0000FDC7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21697 0000FDCB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21698                                  .L_tc_recycle_frame_loop_0f02:
 21699 0000FDCE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21700 0000FDD1 7410                    	je .L_tc_recycle_frame_done_0f02
 21701 0000FDD3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21702 0000FDD6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21703 0000FDD9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21704 0000FDDD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21705 0000FDE1 EBEB                    	jmp .L_tc_recycle_frame_loop_0f02
 21706                                  .L_tc_recycle_frame_done_0f02:
 21707 0000FDE3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21708 0000FDE4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21709 0000FDE8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21710 0000FDEB C9                      	leave
 21711 0000FDEC C22000                  	ret AND_KILL_FRAME(2)
 21712 0000FDEF E93A010000              	jmp .L_lambda_opt_end_0150	; new closure is in rax
 21713                                  .L_lambda_opt_arity_check_more_0150:
 21714 0000FDF4 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 21715 0000FDF9 49B9-                   	mov r9, sob_nil
 21715 0000FDFB [0100000000000000] 
 21716 0000FE03 4889E3                  	mov rbx, rsp 
 21717 0000FE06 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 21718 0000FE0A 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 21719 0000FE0D 49C1E003                	shl r8, 3
 21720 0000FE11 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 21721 0000FE14 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 21722                                  .L_lambda_opt_stack_shrink_loop_0150:
 21723 0000FE19 4983F801                	cmp r8, 1
 21724 0000FE1D 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0150
 21725 0000FE1F BF11000000              	mov rdi, 1+8+8 ;for pair
 21726 0000FE24 E89B860000              	call malloc;to create the pair in the stack
 21727 0000FE29 C60021                  	mov byte [rax], T_pair ; to make it a pair
 21728 0000FE2C 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 21729 0000FE2F 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 21730 0000FE33 4C894809                 	mov qword[rax+1+8],r9
 21731 0000FE37 4989C1                  	mov r9, rax ;for the recursion 
 21732 0000FE3A 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 21733 0000FE3D 4883EB08                	sub rbx, 8 ;to get the next param to copy
 21734 0000FE41 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0150
 21735                                  .L_lambda_opt_stack_shrink_loop_exit_0150:
 21736 0000FE43 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 21737 0000FE48 4883E902                	sub rcx, 2
 21738 0000FE4C 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 21739 0000FE50 4801CC                  	add rsp, rcx ;shrinking the stack
 21740 0000FE53 4889E0                  	mov rax, rsp
 21741 0000FE56 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 21742 0000FE59 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 21743 0000FE5D 49FFC8                  	dec r8 ;we start with param 0, not 1 
 21744 0000FE60 4883C018                	add rax, 3 * 8;now rax is param 0
 21745 0000FE64 49C1E003                	shl r8, 3;convert to byte
 21746 0000FE68 4C01C0                  	add rax, r8;now rax is the top of the stack
 21747 0000FE6B 4C8908                  	mov qword[rax], r9;puting the list at the top
 21748 0000FE6E 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 21749 0000FE72 4889E3                  	mov rbx, rsp 
 21750 0000FE75 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 21751 0000FE78 41BA01000000            	mov r10, 1;r10 is the not opt params length
 21752 0000FE7E 49FFCA                  	dec r10 
 21753 0000FE81 49C1E203                	shl r10, 3;to get bytes
 21754 0000FE85 4883C318                	add rbx, 3*8;rbx is the first param
 21755 0000FE89 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 21756 0000FE8C 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 21757 0000FE8F 4C8900                  	mov qword[rax], r8
 21758 0000FE92 4883E808                	sub rax, 8
 21759 0000FE96 4883EB08                	sub rbx, 8
 21760 0000FE9A 4889E0                  	mov rax, rsp
 21761 0000FE9D 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 21762 0000FEA0 48C744241002000000      	mov qword [rsp+2*8], 2
 21763 0000FEA9 488B5808                	mov rbx, qword[rax + 8 *1]
 21764 0000FEAD 48895C2408              	mov qword [rsp + 1*8] ,rbx
 21765 0000FEB2 488B18                  	mov rbx, qword[rax]
 21766 0000FEB5 48891C24                	mov qword [rsp], rbx
 21767 0000FEB9 C8000000                	enter 0, 0
 21768                                  	; preparing a tail-call
 21769 0000FEBD 488B4528                	mov rax, PARAM(1)	; param strs
 21770 0000FEC1 50                      	push rax
 21771 0000FEC2 488B4520                	mov rax, PARAM(0)	; param str
 21772 0000FEC6 50                      	push rax
 21773 0000FEC7 6A02                    	push 2	; arg count
 21774 0000FEC9 488B4510                	mov rax, ENV
 21775 0000FECD 488B00                  	mov rax, qword [rax + 8 * 0]
 21776 0000FED0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 21777 0000FED3 488B00                  	mov rax, qword [rax]
 21778 0000FED6 803804                  	cmp byte [rax], T_closure
 21779 0000FED9 0F853C850000            	jne L_error_non_closure
 21780 0000FEDF FF7001                  	push SOB_CLOSURE_ENV(rax)
 21781 0000FEE2 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21782 0000FEE5 FF7500                  	push qword[rbp]
 21783 0000FEE8 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21784 0000FEEB 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21785 0000FEEF 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21786 0000FEF3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21787 0000FEF7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21788 0000FEFA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21789 0000FEFD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21790 0000FF02 4983C103                	add r9, 3 	 ;for getting to the params
 21791 0000FF06 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21792 0000FF0A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21793                                  .L_tc_recycle_frame_loop_0f01:
 21794 0000FF0D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21795 0000FF10 7410                    	je .L_tc_recycle_frame_done_0f01
 21796 0000FF12 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21797 0000FF15 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21798 0000FF18 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21799 0000FF1C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21800 0000FF20 EBEB                    	jmp .L_tc_recycle_frame_loop_0f01
 21801                                  .L_tc_recycle_frame_done_0f01:
 21802 0000FF22 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21803 0000FF23 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21804 0000FF27 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21805 0000FF2A C9                      	leave
 21806 0000FF2B C22000                  	ret AND_KILL_FRAME(2)
 21807                                  .L_lambda_opt_end_0150:	; new closure is in rax
 21808 0000FF2E C9                      	leave
 21809 0000FF2F C21800                  	ret AND_KILL_FRAME(1)
 21810                                  .L_lambda_simple_end_0aab:	; new closure is in rax
 21811 0000FF32 803804                  	cmp byte [rax], T_closure
 21812 0000FF35 0F85E0840000            	jne L_error_non_closure
 21813 0000FF3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21814 0000FF3E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21815 0000FF41 FF7500                  	push qword[rbp]
 21816 0000FF44 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21817 0000FF47 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21818 0000FF4B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21819 0000FF4F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21820 0000FF53 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21821 0000FF56 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21822 0000FF59 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21823 0000FF5E 4983C103                	add r9, 3 	 ;for getting to the params
 21824 0000FF62 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21825 0000FF66 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21826                                  .L_tc_recycle_frame_loop_0f03:
 21827 0000FF69 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21828 0000FF6C 7410                    	je .L_tc_recycle_frame_done_0f03
 21829 0000FF6E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21830 0000FF71 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21831 0000FF74 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21832 0000FF78 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21833 0000FF7C EBEB                    	jmp .L_tc_recycle_frame_loop_0f03
 21834                                  .L_tc_recycle_frame_done_0f03:
 21835 0000FF7E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21836 0000FF7F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21837 0000FF83 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21838 0000FF86 C9                      	leave
 21839 0000FF87 C21800                  	ret AND_KILL_FRAME(1)
 21840                                  .L_lambda_simple_end_0aaa:	; new closure is in rax
 21841 0000FF8A 803804                  	cmp byte [rax], T_closure
 21842 0000FF8D 0F8588840000            	jne L_error_non_closure
 21843 0000FF93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21844 0000FF96 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21845 0000FF99 FF7500                  	push qword[rbp]
 21846 0000FF9C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21847 0000FF9F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21848 0000FFA3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21849 0000FFA7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21850 0000FFAB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21851 0000FFAE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21852 0000FFB1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21853 0000FFB6 4983C103                	add r9, 3 	 ;for getting to the params
 21854 0000FFBA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21855 0000FFBE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21856                                  .L_tc_recycle_frame_loop_0f04:
 21857 0000FFC1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21858 0000FFC4 7410                    	je .L_tc_recycle_frame_done_0f04
 21859 0000FFC6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21860 0000FFC9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21861 0000FFCC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21862 0000FFD0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21863 0000FFD4 EBEB                    	jmp .L_tc_recycle_frame_loop_0f04
 21864                                  .L_tc_recycle_frame_done_0f04:
 21865 0000FFD6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21866 0000FFD7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21867 0000FFDB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21868 0000FFDE C9                      	leave
 21869 0000FFDF C21800                  	ret AND_KILL_FRAME(1)
 21870                                  .L_lambda_simple_end_0aa6:	; new closure is in rax
 21871 0000FFE2 803804                  	cmp byte [rax], T_closure
 21872 0000FFE5 0F8530840000            	jne L_error_non_closure
 21873 0000FFEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 21874 0000FFEE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 21875 0000FFF1 FF7500                  	push qword[rbp]
 21876 0000FFF4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 21877 0000FFF7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 21878 0000FFFB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 21879 0000FFFF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 21880 00010003 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 21881 00010006 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 21882 00010009 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 21883 0001000E 4983C103                	add r9, 3 	 ;for getting to the params
 21884 00010012 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 21885 00010016 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 21886                                  .L_tc_recycle_frame_loop_0f05:
 21887 00010019 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 21888 0001001C 7410                    	je .L_tc_recycle_frame_done_0f05
 21889 0001001E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 21890 00010021 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 21891 00010024 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 21892 00010028 4983E808                	sub r8, 8	 ;move the top of the stack one down
 21893 0001002C EBEB                    	jmp .L_tc_recycle_frame_loop_0f05
 21894                                  .L_tc_recycle_frame_done_0f05:
 21895 0001002E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 21896 0001002F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 21897 00010033 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 21898 00010036 C9                      	leave
 21899 00010037 C22000                  	ret AND_KILL_FRAME(2)
 21900                                  .L_lambda_simple_end_0aa5:	; new closure is in rax
 21901 0001003A 50                      	push rax
 21902 0001003B 6A01                    	push 1	; arg count
 21903 0001003D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21904 00010042 E87D840000              	call malloc
 21905 00010047 50                      	push rax
 21906 00010048 BF00000000              	mov rdi, 8 * 0	; new rib
 21907 0001004D E872840000              	call malloc
 21908 00010052 50                      	push rax
 21909 00010053 BF08000000              	mov rdi, 8 * 1	; extended env
 21910 00010058 E867840000              	call malloc
 21911 0001005D 488B7D10                	mov rdi, ENV
 21912 00010061 BE00000000              	mov rsi, 0
 21913 00010066 BA01000000              	mov rdx, 1
 21914                                  .L_lambda_simple_env_loop_0aad:	; ext_env[i + 1] <-- env[i]
 21915 0001006B 4883FE00                	cmp rsi, 0
 21916 0001006F 7410                    	je .L_lambda_simple_env_end_0aad
 21917 00010071 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21918 00010075 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21919 00010079 48FFC6                  	inc rsi
 21920 0001007C 48FFC2                  	inc rdx
 21921 0001007F EBEA                    	jmp .L_lambda_simple_env_loop_0aad
 21922                                  .L_lambda_simple_env_end_0aad:
 21923 00010081 5B                      	pop rbx
 21924 00010082 BE00000000              	mov rsi, 0
 21925                                  .L_lambda_simple_params_loop_0aad:	; copy params
 21926 00010087 4883FE00                	cmp rsi, 0
 21927 0001008B 740E                    	je .L_lambda_simple_params_end_0aad
 21928 0001008D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21929 00010092 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21930 00010096 48FFC6                  	inc rsi
 21931 00010099 EBEC                    	jmp .L_lambda_simple_params_loop_0aad
 21932                                  .L_lambda_simple_params_end_0aad:
 21933 0001009B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21934 0001009E 4889C3                  	mov rbx, rax
 21935 000100A1 58                      	pop rax
 21936 000100A2 C60004                  	mov byte [rax], T_closure
 21937 000100A5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21938 000100A9 48C74009[B6000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aad
 21939 000100B1 E947010000              	jmp .L_lambda_simple_end_0aad
 21940                                  .L_lambda_simple_code_0aad:	; lambda-simple body
 21941 000100B6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21942 000100BC 740B                    	je .L_lambda_simple_arity_check_ok_0aad
 21943 000100BE FF742410                	push qword [rsp + 8 * 2]
 21944 000100C2 6A01                    	push 1
 21945 000100C4 E9B4830000              	jmp L_error_incorrect_arity_simple
 21946                                  .L_lambda_simple_arity_check_ok_0aad:
 21947 000100C9 C8000000                	enter 0, 0
 21948                                  	; preparing a non-tail-call
 21949 000100CD 488B0425[35140000]      	mov rax, qword [free_var_75]	; free var char=?
 21950 000100D5 803805                  	cmp byte [rax], T_undefined
 21951 000100D8 0F84B9820000            	je L_error_fvar_undefined
 21952 000100DE 50                      	push rax
 21953 000100DF 488B0425[24140000]      	mov rax, qword [free_var_74]	; free var char<?
 21954 000100E7 803805                  	cmp byte [rax], T_undefined
 21955 000100EA 0F84A7820000            	je L_error_fvar_undefined
 21956 000100F0 50                      	push rax
 21957 000100F1 6A02                    	push 2	; arg count
 21958 000100F3 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21959 000100F7 803804                  	cmp byte [rax], T_closure
 21960 000100FA 0F851B830000            	jne L_error_non_closure
 21961 00010100 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21962 00010103 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21963 00010106 48890425[0F180000]      	mov qword [free_var_133], rax
 21964 0001010E 48B8-                   	mov rax, sob_void
 21964 00010110 [0000000000000000] 
 21965                                  
 21966                                  	; preparing a non-tail-call
 21967 00010118 488B0425[BE130000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 21968 00010120 803805                  	cmp byte [rax], T_undefined
 21969 00010123 0F846E820000            	je L_error_fvar_undefined
 21970 00010129 50                      	push rax
 21971 0001012A 488B0425[AD130000]      	mov rax, qword [free_var_67]	; free var char-ci<?
 21972 00010132 803805                  	cmp byte [rax], T_undefined
 21973 00010135 0F845C820000            	je L_error_fvar_undefined
 21974 0001013B 50                      	push rax
 21975 0001013C 6A02                    	push 2	; arg count
 21976 0001013E 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21977 00010142 803804                  	cmp byte [rax], T_closure
 21978 00010145 0F85D0820000            	jne L_error_non_closure
 21979 0001014B FF7001                  	push SOB_CLOSURE_ENV(rax)
 21980 0001014E FF5009                  	call SOB_CLOSURE_CODE(rax)
 21981 00010151 48890425[43170000]      	mov qword [free_var_121], rax
 21982 00010159 48B8-                   	mov rax, sob_void
 21982 0001015B [0000000000000000] 
 21983                                  
 21984                                  	; preparing a non-tail-call
 21985 00010163 488B0425[35140000]      	mov rax, qword [free_var_75]	; free var char=?
 21986 0001016B 803805                  	cmp byte [rax], T_undefined
 21987 0001016E 0F8423820000            	je L_error_fvar_undefined
 21988 00010174 50                      	push rax
 21989 00010175 488B0425[57140000]      	mov rax, qword [free_var_77]	; free var char>?
 21990 0001017D 803805                  	cmp byte [rax], T_undefined
 21991 00010180 0F8411820000            	je L_error_fvar_undefined
 21992 00010186 50                      	push rax
 21993 00010187 6A02                    	push 2	; arg count
 21994 00010189 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 21995 0001018D 803804                  	cmp byte [rax], T_closure
 21996 00010190 0F8585820000            	jne L_error_non_closure
 21997 00010196 FF7001                  	push SOB_CLOSURE_ENV(rax)
 21998 00010199 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21999 0001019C 48890425[42180000]      	mov qword [free_var_136], rax
 22000 000101A4 48B8-                   	mov rax, sob_void
 22000 000101A6 [0000000000000000] 
 22001                                  
 22002                                  	; preparing a non-tail-call
 22003 000101AE 488B0425[BE130000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 22004 000101B6 803805                  	cmp byte [rax], T_undefined
 22005 000101B9 0F84D8810000            	je L_error_fvar_undefined
 22006 000101BF 50                      	push rax
 22007 000101C0 488B0425[E0130000]      	mov rax, qword [free_var_70]	; free var char-ci>?
 22008 000101C8 803805                  	cmp byte [rax], T_undefined
 22009 000101CB 0F84C6810000            	je L_error_fvar_undefined
 22010 000101D1 50                      	push rax
 22011 000101D2 6A02                    	push 2	; arg count
 22012 000101D4 488B4520                	mov rax, PARAM(0)	; param make-string<=?
 22013 000101D8 803804                  	cmp byte [rax], T_closure
 22014 000101DB 0F853A820000            	jne L_error_non_closure
 22015 000101E1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22016 000101E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22017 000101E7 48890425[76170000]      	mov qword [free_var_124], rax
 22018 000101EF 48B8-                   	mov rax, sob_void
 22018 000101F1 [0000000000000000] 
 22019 000101F9 C9                      	leave
 22020 000101FA C21800                  	ret AND_KILL_FRAME(1)
 22021                                  .L_lambda_simple_end_0aad:	; new closure is in rax
 22022 000101FD 803804                  	cmp byte [rax], T_closure
 22023 00010200 0F8515820000            	jne L_error_non_closure
 22024 00010206 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22025 00010209 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22026                                  
 22027 0001020C 4889C7                  	mov rdi, rax
 22028 0001020F E805850000              	call print_sexpr_if_not_void
 22029                                  	; preparing a non-tail-call
 22030 00010214 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22031 00010219 E8A6820000              	call malloc
 22032 0001021E 50                      	push rax
 22033 0001021F BF00000000              	mov rdi, 8 * 0	; new rib
 22034 00010224 E89B820000              	call malloc
 22035 00010229 50                      	push rax
 22036 0001022A BF08000000              	mov rdi, 8 * 1	; extended env
 22037 0001022F E890820000              	call malloc
 22038 00010234 488B7D10                	mov rdi, ENV
 22039 00010238 BE00000000              	mov rsi, 0
 22040 0001023D BA01000000              	mov rdx, 1
 22041                                  .L_lambda_simple_env_loop_0aae:	; ext_env[i + 1] <-- env[i]
 22042 00010242 4883FE00                	cmp rsi, 0
 22043 00010246 7410                    	je .L_lambda_simple_env_end_0aae
 22044 00010248 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22045 0001024C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22046 00010250 48FFC6                  	inc rsi
 22047 00010253 48FFC2                  	inc rdx
 22048 00010256 EBEA                    	jmp .L_lambda_simple_env_loop_0aae
 22049                                  .L_lambda_simple_env_end_0aae:
 22050 00010258 5B                      	pop rbx
 22051 00010259 BE00000000              	mov rsi, 0
 22052                                  .L_lambda_simple_params_loop_0aae:	; copy params
 22053 0001025E 4883FE00                	cmp rsi, 0
 22054 00010262 740E                    	je .L_lambda_simple_params_end_0aae
 22055 00010264 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22056 00010269 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22057 0001026D 48FFC6                  	inc rsi
 22058 00010270 EBEC                    	jmp .L_lambda_simple_params_loop_0aae
 22059                                  .L_lambda_simple_params_end_0aae:
 22060 00010272 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22061 00010275 4889C3                  	mov rbx, rax
 22062 00010278 58                      	pop rax
 22063 00010279 C60004                  	mov byte [rax], T_closure
 22064 0001027C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22065 00010280 48C74009[8D020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aae
 22066 00010288 E98B0C0000              	jmp .L_lambda_simple_end_0aae
 22067                                  .L_lambda_simple_code_0aae:	; lambda-simple body
 22068 0001028D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22069 00010293 740B                    	je .L_lambda_simple_arity_check_ok_0aae
 22070 00010295 FF742410                	push qword [rsp + 8 * 2]
 22071 00010299 6A01                    	push 1
 22072 0001029B E9DD810000              	jmp L_error_incorrect_arity_simple
 22073                                  .L_lambda_simple_arity_check_ok_0aae:
 22074 000102A0 C8000000                	enter 0, 0
 22075                                  	; preparing a tail-call
 22076 000102A4 48B8-                   	mov rax, L_constants + 1993
 22076 000102A6 [C907000000000000] 
 22077 000102AE 50                      	push rax
 22078 000102AF 6A01                    	push 1	; arg count
 22079 000102B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22080 000102B6 E809820000              	call malloc
 22081 000102BB 50                      	push rax
 22082 000102BC BF08000000              	mov rdi, 8 * 1	; new rib
 22083 000102C1 E8FE810000              	call malloc
 22084 000102C6 50                      	push rax
 22085 000102C7 BF10000000              	mov rdi, 8 * 2	; extended env
 22086 000102CC E8F3810000              	call malloc
 22087 000102D1 488B7D10                	mov rdi, ENV
 22088 000102D5 BE00000000              	mov rsi, 0
 22089 000102DA BA01000000              	mov rdx, 1
 22090                                  .L_lambda_simple_env_loop_0aaf:	; ext_env[i + 1] <-- env[i]
 22091 000102DF 4883FE01                	cmp rsi, 1
 22092 000102E3 7410                    	je .L_lambda_simple_env_end_0aaf
 22093 000102E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22094 000102E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22095 000102ED 48FFC6                  	inc rsi
 22096 000102F0 48FFC2                  	inc rdx
 22097 000102F3 EBEA                    	jmp .L_lambda_simple_env_loop_0aaf
 22098                                  .L_lambda_simple_env_end_0aaf:
 22099 000102F5 5B                      	pop rbx
 22100 000102F6 BE00000000              	mov rsi, 0
 22101                                  .L_lambda_simple_params_loop_0aaf:	; copy params
 22102 000102FB 4883FE01                	cmp rsi, 1
 22103 000102FF 740E                    	je .L_lambda_simple_params_end_0aaf
 22104 00010301 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22105 00010306 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22106 0001030A 48FFC6                  	inc rsi
 22107 0001030D EBEC                    	jmp .L_lambda_simple_params_loop_0aaf
 22108                                  .L_lambda_simple_params_end_0aaf:
 22109 0001030F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22110 00010312 4889C3                  	mov rbx, rax
 22111 00010315 58                      	pop rax
 22112 00010316 C60004                  	mov byte [rax], T_closure
 22113 00010319 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22114 0001031D 48C74009[2A030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aaf
 22115 00010325 E9960B0000              	jmp .L_lambda_simple_end_0aaf
 22116                                  .L_lambda_simple_code_0aaf:	; lambda-simple body
 22117 0001032A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22118 00010330 740B                    	je .L_lambda_simple_arity_check_ok_0aaf
 22119 00010332 FF742410                	push qword [rsp + 8 * 2]
 22120 00010336 6A01                    	push 1
 22121 00010338 E940810000              	jmp L_error_incorrect_arity_simple
 22122                                  .L_lambda_simple_arity_check_ok_0aaf:
 22123 0001033D C8000000                	enter 0, 0
 22124 00010341 BF08000000              	mov rdi, 8*1
 22125 00010346 E879810000              	call malloc
 22126 0001034B 488B5D20                	mov rbx, PARAM(0)
 22127 0001034F 488918                  	mov qword[rax], rbx
 22128 00010352 48894520                	mov PARAM(0), rax
 22129 00010356 48B8-                   	mov rax, sob_void
 22129 00010358 [0000000000000000] 
 22130                                  
 22131 00010360 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22132 00010365 E85A810000              	call malloc
 22133 0001036A 50                      	push rax
 22134 0001036B BF08000000              	mov rdi, 8 * 1	; new rib
 22135 00010370 E84F810000              	call malloc
 22136 00010375 50                      	push rax
 22137 00010376 BF18000000              	mov rdi, 8 * 3	; extended env
 22138 0001037B E844810000              	call malloc
 22139 00010380 488B7D10                	mov rdi, ENV
 22140 00010384 BE00000000              	mov rsi, 0
 22141 00010389 BA01000000              	mov rdx, 1
 22142                                  .L_lambda_simple_env_loop_0ab0:	; ext_env[i + 1] <-- env[i]
 22143 0001038E 4883FE02                	cmp rsi, 2
 22144 00010392 7410                    	je .L_lambda_simple_env_end_0ab0
 22145 00010394 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22146 00010398 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22147 0001039C 48FFC6                  	inc rsi
 22148 0001039F 48FFC2                  	inc rdx
 22149 000103A2 EBEA                    	jmp .L_lambda_simple_env_loop_0ab0
 22150                                  .L_lambda_simple_env_end_0ab0:
 22151 000103A4 5B                      	pop rbx
 22152 000103A5 BE00000000              	mov rsi, 0
 22153                                  .L_lambda_simple_params_loop_0ab0:	; copy params
 22154 000103AA 4883FE01                	cmp rsi, 1
 22155 000103AE 740E                    	je .L_lambda_simple_params_end_0ab0
 22156 000103B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22157 000103B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22158 000103B9 48FFC6                  	inc rsi
 22159 000103BC EBEC                    	jmp .L_lambda_simple_params_loop_0ab0
 22160                                  .L_lambda_simple_params_end_0ab0:
 22161 000103BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22162 000103C1 4889C3                  	mov rbx, rax
 22163 000103C4 58                      	pop rax
 22164 000103C5 C60004                  	mov byte [rax], T_closure
 22165 000103C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22166 000103CC 48C74009[D9030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab0
 22167 000103D4 E9CA010000              	jmp .L_lambda_simple_end_0ab0
 22168                                  .L_lambda_simple_code_0ab0:	; lambda-simple body
 22169 000103D9 48837C241004            	cmp qword [rsp + 8 * 2], 4
 22170 000103DF 740B                    	je .L_lambda_simple_arity_check_ok_0ab0
 22171 000103E1 FF742410                	push qword [rsp + 8 * 2]
 22172 000103E5 6A04                    	push 4
 22173 000103E7 E991800000              	jmp L_error_incorrect_arity_simple
 22174                                  .L_lambda_simple_arity_check_ok_0ab0:
 22175 000103EC C8000000                	enter 0, 0
 22176                                  	; preparing a non-tail-call
 22177 000103F0 488B4538                	mov rax, PARAM(3)	; param len
 22178 000103F4 50                      	push rax
 22179 000103F5 488B4520                	mov rax, PARAM(0)	; param i
 22180 000103F9 50                      	push rax
 22181 000103FA 6A02                    	push 2	; arg count
 22182 000103FC 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 22183 00010404 803805                  	cmp byte [rax], T_undefined
 22184 00010407 0F848A7F0000            	je L_error_fvar_undefined
 22185 0001040D 803804                  	cmp byte [rax], T_closure
 22186 00010410 0F8505800000            	jne L_error_non_closure
 22187 00010416 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22188 00010419 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22189 0001041C 483D[02000000]          	cmp rax, sob_boolean_false
 22190 00010422 0F8577010000            	jne .L_or_end_00ee
 22191                                  	; preparing a non-tail-call
 22192 00010428 488B4538                	mov rax, PARAM(3)	; param len
 22193 0001042C 50                      	push rax
 22194 0001042D 488B4520                	mov rax, PARAM(0)	; param i
 22195 00010431 50                      	push rax
 22196 00010432 6A02                    	push 2	; arg count
 22197 00010434 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 22198 0001043C 803805                  	cmp byte [rax], T_undefined
 22199 0001043F 0F84527F0000            	je L_error_fvar_undefined
 22200 00010445 803804                  	cmp byte [rax], T_closure
 22201 00010448 0F85CD7F0000            	jne L_error_non_closure
 22202 0001044E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22203 00010451 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22204 00010454 483D[02000000]          	cmp rax, sob_boolean_false
 22205 0001045A 0F8435010000            	je .L_if_else_080d
 22206                                  	; preparing a non-tail-call
 22207                                  	; preparing a non-tail-call
 22208 00010460 488B4520                	mov rax, PARAM(0)	; param i
 22209 00010464 50                      	push rax
 22210 00010465 488B4530                	mov rax, PARAM(2)	; param str2
 22211 00010469 50                      	push rax
 22212 0001046A 6A02                    	push 2	; arg count
 22213 0001046C 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 22214 00010474 803805                  	cmp byte [rax], T_undefined
 22215 00010477 0F841A7F0000            	je L_error_fvar_undefined
 22216 0001047D 803804                  	cmp byte [rax], T_closure
 22217 00010480 0F85957F0000            	jne L_error_non_closure
 22218 00010486 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22219 00010489 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22220 0001048C 50                      	push rax
 22221                                  	; preparing a non-tail-call
 22222 0001048D 488B4520                	mov rax, PARAM(0)	; param i
 22223 00010491 50                      	push rax
 22224 00010492 488B4528                	mov rax, PARAM(1)	; param str1
 22225 00010496 50                      	push rax
 22226 00010497 6A02                    	push 2	; arg count
 22227 00010499 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 22228 000104A1 803805                  	cmp byte [rax], T_undefined
 22229 000104A4 0F84ED7E0000            	je L_error_fvar_undefined
 22230 000104AA 803804                  	cmp byte [rax], T_closure
 22231 000104AD 0F85687F0000            	jne L_error_non_closure
 22232 000104B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22233 000104B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22234 000104B9 50                      	push rax
 22235 000104BA 6A02                    	push 2	; arg count
 22236 000104BC 488B4510                	mov rax, ENV
 22237 000104C0 488B4008                	mov rax, qword [rax + 8 * 1]
 22238 000104C4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var char=?
 22239 000104C7 803804                  	cmp byte [rax], T_closure
 22240 000104CA 0F854B7F0000            	jne L_error_non_closure
 22241 000104D0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22242 000104D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22243 000104D6 483D[02000000]          	cmp rax, sob_boolean_false
 22244 000104DC 0F84A7000000            	je .L_if_else_080c
 22245                                  	; preparing a tail-call
 22246 000104E2 488B4538                	mov rax, PARAM(3)	; param len
 22247 000104E6 50                      	push rax
 22248 000104E7 488B4530                	mov rax, PARAM(2)	; param str2
 22249 000104EB 50                      	push rax
 22250 000104EC 488B4528                	mov rax, PARAM(1)	; param str1
 22251 000104F0 50                      	push rax
 22252                                  	; preparing a non-tail-call
 22253 000104F1 48B8-                   	mov rax, L_constants + 2270
 22253 000104F3 [DE08000000000000] 
 22254 000104FB 50                      	push rax
 22255 000104FC 488B4520                	mov rax, PARAM(0)	; param i
 22256 00010500 50                      	push rax
 22257 00010501 6A02                    	push 2	; arg count
 22258 00010503 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 22259 0001050B 803805                  	cmp byte [rax], T_undefined
 22260 0001050E 0F84837E0000            	je L_error_fvar_undefined
 22261 00010514 803804                  	cmp byte [rax], T_closure
 22262 00010517 0F85FE7E0000            	jne L_error_non_closure
 22263 0001051D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22264 00010520 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22265 00010523 50                      	push rax
 22266 00010524 6A04                    	push 4	; arg count
 22267 00010526 488B4510                	mov rax, ENV
 22268 0001052A 488B00                  	mov rax, qword [rax + 8 * 0]
 22269 0001052D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22270 00010530 488B00                  	mov rax, qword [rax]
 22271 00010533 803804                  	cmp byte [rax], T_closure
 22272 00010536 0F85DF7E0000            	jne L_error_non_closure
 22273 0001053C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22274 0001053F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22275 00010542 FF7500                  	push qword[rbp]
 22276 00010545 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22277 00010548 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22278 0001054C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22279 00010550 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22280 00010554 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22281 00010557 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22282 0001055A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22283 0001055F 4983C103                	add r9, 3 	 ;for getting to the params
 22284 00010563 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22285 00010567 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22286                                  .L_tc_recycle_frame_loop_0f06:
 22287 0001056A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22288 0001056D 7410                    	je .L_tc_recycle_frame_done_0f06
 22289 0001056F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22290 00010572 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22291 00010575 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22292 00010579 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22293 0001057D EBEB                    	jmp .L_tc_recycle_frame_loop_0f06
 22294                                  .L_tc_recycle_frame_done_0f06:
 22295 0001057F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22296 00010580 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22297 00010584 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22298 00010587 EB0A                    	jmp .L_if_end_080c
 22299                                  .L_if_else_080c:
 22300 00010589 48B8-                   	mov rax, L_constants + 2
 22300 0001058B [0200000000000000] 
 22301                                  .L_if_end_080c:
 22302 00010593 EB0A                    	jmp .L_if_end_080d
 22303                                  .L_if_else_080d:
 22304 00010595 48B8-                   	mov rax, L_constants + 2
 22304 00010597 [0200000000000000] 
 22305                                  .L_if_end_080d:
 22306                                  .L_or_end_00ee:
 22307 0001059F C9                      	leave
 22308 000105A0 C23000                  	ret AND_KILL_FRAME(4)
 22309                                  .L_lambda_simple_end_0ab0:	; new closure is in rax
 22310 000105A3 50                      	push rax
 22311 000105A4 488B4520                	mov rax, PARAM(0)	; param run
 22312 000105A8 8F00                    	pop qword [rax]
 22313 000105AA 48B8-                   	mov rax, sob_void
 22313 000105AC [0000000000000000] 
 22314                                  
 22315                                  	; preparing a tail-call
 22316 000105B4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22317 000105B9 E8067F0000              	call malloc
 22318 000105BE 50                      	push rax
 22319 000105BF BF08000000              	mov rdi, 8 * 1	; new rib
 22320 000105C4 E8FB7E0000              	call malloc
 22321 000105C9 50                      	push rax
 22322 000105CA BF18000000              	mov rdi, 8 * 3	; extended env
 22323 000105CF E8F07E0000              	call malloc
 22324 000105D4 488B7D10                	mov rdi, ENV
 22325 000105D8 BE00000000              	mov rsi, 0
 22326 000105DD BA01000000              	mov rdx, 1
 22327                                  .L_lambda_simple_env_loop_0ab1:	; ext_env[i + 1] <-- env[i]
 22328 000105E2 4883FE02                	cmp rsi, 2
 22329 000105E6 7410                    	je .L_lambda_simple_env_end_0ab1
 22330 000105E8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22331 000105EC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22332 000105F0 48FFC6                  	inc rsi
 22333 000105F3 48FFC2                  	inc rdx
 22334 000105F6 EBEA                    	jmp .L_lambda_simple_env_loop_0ab1
 22335                                  .L_lambda_simple_env_end_0ab1:
 22336 000105F8 5B                      	pop rbx
 22337 000105F9 BE00000000              	mov rsi, 0
 22338                                  .L_lambda_simple_params_loop_0ab1:	; copy params
 22339 000105FE 4883FE01                	cmp rsi, 1
 22340 00010602 740E                    	je .L_lambda_simple_params_end_0ab1
 22341 00010604 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22342 00010609 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22343 0001060D 48FFC6                  	inc rsi
 22344 00010610 EBEC                    	jmp .L_lambda_simple_params_loop_0ab1
 22345                                  .L_lambda_simple_params_end_0ab1:
 22346 00010612 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22347 00010615 4889C3                  	mov rbx, rax
 22348 00010618 58                      	pop rax
 22349 00010619 C60004                  	mov byte [rax], T_closure
 22350 0001061C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22351 00010620 48C74009[2D060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab1
 22352 00010628 E924020000              	jmp .L_lambda_simple_end_0ab1
 22353                                  .L_lambda_simple_code_0ab1:	; lambda-simple body
 22354 0001062D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22355 00010633 740B                    	je .L_lambda_simple_arity_check_ok_0ab1
 22356 00010635 FF742410                	push qword [rsp + 8 * 2]
 22357 00010639 6A02                    	push 2
 22358 0001063B E93D7E0000              	jmp L_error_incorrect_arity_simple
 22359                                  .L_lambda_simple_arity_check_ok_0ab1:
 22360 00010640 C8000000                	enter 0, 0
 22361                                  	; preparing a tail-call
 22362                                  	; preparing a non-tail-call
 22363 00010644 488B4528                	mov rax, PARAM(1)	; param str2
 22364 00010648 50                      	push rax
 22365 00010649 6A01                    	push 1	; arg count
 22366 0001064B 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 22367 00010653 803805                  	cmp byte [rax], T_undefined
 22368 00010656 0F843B7D0000            	je L_error_fvar_undefined
 22369 0001065C 803804                  	cmp byte [rax], T_closure
 22370 0001065F 0F85B67D0000            	jne L_error_non_closure
 22371 00010665 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22372 00010668 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22373 0001066B 50                      	push rax
 22374                                  	; preparing a non-tail-call
 22375 0001066C 488B4520                	mov rax, PARAM(0)	; param str1
 22376 00010670 50                      	push rax
 22377 00010671 6A01                    	push 1	; arg count
 22378 00010673 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 22379 0001067B 803805                  	cmp byte [rax], T_undefined
 22380 0001067E 0F84137D0000            	je L_error_fvar_undefined
 22381 00010684 803804                  	cmp byte [rax], T_closure
 22382 00010687 0F858E7D0000            	jne L_error_non_closure
 22383 0001068D FF7001                  	push SOB_CLOSURE_ENV(rax)
 22384 00010690 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22385 00010693 50                      	push rax
 22386 00010694 6A02                    	push 2	; arg count
 22387 00010696 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22388 0001069B E8247E0000              	call malloc
 22389 000106A0 50                      	push rax
 22390 000106A1 BF10000000              	mov rdi, 8 * 2	; new rib
 22391 000106A6 E8197E0000              	call malloc
 22392 000106AB 50                      	push rax
 22393 000106AC BF20000000              	mov rdi, 8 * 4	; extended env
 22394 000106B1 E80E7E0000              	call malloc
 22395 000106B6 488B7D10                	mov rdi, ENV
 22396 000106BA BE00000000              	mov rsi, 0
 22397 000106BF BA01000000              	mov rdx, 1
 22398                                  .L_lambda_simple_env_loop_0ab2:	; ext_env[i + 1] <-- env[i]
 22399 000106C4 4883FE03                	cmp rsi, 3
 22400 000106C8 7410                    	je .L_lambda_simple_env_end_0ab2
 22401 000106CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22402 000106CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22403 000106D2 48FFC6                  	inc rsi
 22404 000106D5 48FFC2                  	inc rdx
 22405 000106D8 EBEA                    	jmp .L_lambda_simple_env_loop_0ab2
 22406                                  .L_lambda_simple_env_end_0ab2:
 22407 000106DA 5B                      	pop rbx
 22408 000106DB BE00000000              	mov rsi, 0
 22409                                  .L_lambda_simple_params_loop_0ab2:	; copy params
 22410 000106E0 4883FE02                	cmp rsi, 2
 22411 000106E4 740E                    	je .L_lambda_simple_params_end_0ab2
 22412 000106E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22413 000106EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22414 000106EF 48FFC6                  	inc rsi
 22415 000106F2 EBEC                    	jmp .L_lambda_simple_params_loop_0ab2
 22416                                  .L_lambda_simple_params_end_0ab2:
 22417 000106F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22418 000106F7 4889C3                  	mov rbx, rax
 22419 000106FA 58                      	pop rax
 22420 000106FB C60004                  	mov byte [rax], T_closure
 22421 000106FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22422 00010702 48C74009[0F070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab2
 22423 0001070A E9EA000000              	jmp .L_lambda_simple_end_0ab2
 22424                                  .L_lambda_simple_code_0ab2:	; lambda-simple body
 22425 0001070F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22426 00010715 740B                    	je .L_lambda_simple_arity_check_ok_0ab2
 22427 00010717 FF742410                	push qword [rsp + 8 * 2]
 22428 0001071B 6A02                    	push 2
 22429 0001071D E95B7D0000              	jmp L_error_incorrect_arity_simple
 22430                                  .L_lambda_simple_arity_check_ok_0ab2:
 22431 00010722 C8000000                	enter 0, 0
 22432                                  	; preparing a non-tail-call
 22433 00010726 488B4528                	mov rax, PARAM(1)	; param len2
 22434 0001072A 50                      	push rax
 22435 0001072B 488B4520                	mov rax, PARAM(0)	; param len1
 22436 0001072F 50                      	push rax
 22437 00010730 6A02                    	push 2	; arg count
 22438 00010732 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 22439 0001073A 803805                  	cmp byte [rax], T_undefined
 22440 0001073D 0F84547C0000            	je L_error_fvar_undefined
 22441 00010743 803804                  	cmp byte [rax], T_closure
 22442 00010746 0F85CF7C0000            	jne L_error_non_closure
 22443 0001074C FF7001                  	push SOB_CLOSURE_ENV(rax)
 22444 0001074F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22445 00010752 483D[02000000]          	cmp rax, sob_boolean_false
 22446 00010758 0F848D000000            	je .L_if_else_080e
 22447                                  	; preparing a tail-call
 22448 0001075E 488B4520                	mov rax, PARAM(0)	; param len1
 22449 00010762 50                      	push rax
 22450 00010763 488B4510                	mov rax, ENV
 22451 00010767 488B00                  	mov rax, qword [rax + 8 * 0]
 22452 0001076A 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var str2
 22453 0001076E 50                      	push rax
 22454 0001076F 488B4510                	mov rax, ENV
 22455 00010773 488B00                  	mov rax, qword [rax + 8 * 0]
 22456 00010776 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str1
 22457 00010779 50                      	push rax
 22458 0001077A 48B8-                   	mov rax, L_constants + 2135
 22458 0001077C [5708000000000000] 
 22459 00010784 50                      	push rax
 22460 00010785 6A04                    	push 4	; arg count
 22461 00010787 488B4510                	mov rax, ENV
 22462 0001078B 488B4008                	mov rax, qword [rax + 8 * 1]
 22463 0001078F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22464 00010792 488B00                  	mov rax, qword [rax]
 22465 00010795 803804                  	cmp byte [rax], T_closure
 22466 00010798 0F857D7C0000            	jne L_error_non_closure
 22467 0001079E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22468 000107A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22469 000107A4 FF7500                  	push qword[rbp]
 22470 000107A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22471 000107AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22472 000107AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22473 000107B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22474 000107B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22475 000107B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22476 000107BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22477 000107C1 4983C103                	add r9, 3 	 ;for getting to the params
 22478 000107C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22479 000107C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22480                                  .L_tc_recycle_frame_loop_0f07:
 22481 000107CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22482 000107CF 7410                    	je .L_tc_recycle_frame_done_0f07
 22483 000107D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22484 000107D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22485 000107D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22486 000107DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22487 000107DF EBEB                    	jmp .L_tc_recycle_frame_loop_0f07
 22488                                  .L_tc_recycle_frame_done_0f07:
 22489 000107E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22490 000107E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22491 000107E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22492 000107E9 EB0A                    	jmp .L_if_end_080e
 22493                                  .L_if_else_080e:
 22494 000107EB 48B8-                   	mov rax, L_constants + 2
 22494 000107ED [0200000000000000] 
 22495                                  .L_if_end_080e:
 22496 000107F5 C9                      	leave
 22497 000107F6 C22000                  	ret AND_KILL_FRAME(2)
 22498                                  .L_lambda_simple_end_0ab2:	; new closure is in rax
 22499 000107F9 803804                  	cmp byte [rax], T_closure
 22500 000107FC 0F85197C0000            	jne L_error_non_closure
 22501 00010802 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22502 00010805 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22503 00010808 FF7500                  	push qword[rbp]
 22504 0001080B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22505 0001080E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22506 00010812 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22507 00010816 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22508 0001081A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22509 0001081D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22510 00010820 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22511 00010825 4983C103                	add r9, 3 	 ;for getting to the params
 22512 00010829 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22513 0001082D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22514                                  .L_tc_recycle_frame_loop_0f08:
 22515 00010830 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22516 00010833 7410                    	je .L_tc_recycle_frame_done_0f08
 22517 00010835 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22518 00010838 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22519 0001083B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22520 0001083F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22521 00010843 EBEB                    	jmp .L_tc_recycle_frame_loop_0f08
 22522                                  .L_tc_recycle_frame_done_0f08:
 22523 00010845 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22524 00010846 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22525 0001084A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22526 0001084D C9                      	leave
 22527 0001084E C22000                  	ret AND_KILL_FRAME(2)
 22528                                  .L_lambda_simple_end_0ab1:	; new closure is in rax
 22529 00010851 50                      	push rax
 22530 00010852 6A01                    	push 1	; arg count
 22531 00010854 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22532 00010859 E8667C0000              	call malloc
 22533 0001085E 50                      	push rax
 22534 0001085F BF08000000              	mov rdi, 8 * 1	; new rib
 22535 00010864 E85B7C0000              	call malloc
 22536 00010869 50                      	push rax
 22537 0001086A BF18000000              	mov rdi, 8 * 3	; extended env
 22538 0001086F E8507C0000              	call malloc
 22539 00010874 488B7D10                	mov rdi, ENV
 22540 00010878 BE00000000              	mov rsi, 0
 22541 0001087D BA01000000              	mov rdx, 1
 22542                                  .L_lambda_simple_env_loop_0ab3:	; ext_env[i + 1] <-- env[i]
 22543 00010882 4883FE02                	cmp rsi, 2
 22544 00010886 7410                    	je .L_lambda_simple_env_end_0ab3
 22545 00010888 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22546 0001088C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22547 00010890 48FFC6                  	inc rsi
 22548 00010893 48FFC2                  	inc rdx
 22549 00010896 EBEA                    	jmp .L_lambda_simple_env_loop_0ab3
 22550                                  .L_lambda_simple_env_end_0ab3:
 22551 00010898 5B                      	pop rbx
 22552 00010899 BE00000000              	mov rsi, 0
 22553                                  .L_lambda_simple_params_loop_0ab3:	; copy params
 22554 0001089E 4883FE01                	cmp rsi, 1
 22555 000108A2 740E                    	je .L_lambda_simple_params_end_0ab3
 22556 000108A4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22557 000108A9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22558 000108AD 48FFC6                  	inc rsi
 22559 000108B0 EBEC                    	jmp .L_lambda_simple_params_loop_0ab3
 22560                                  .L_lambda_simple_params_end_0ab3:
 22561 000108B2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22562 000108B5 4889C3                  	mov rbx, rax
 22563 000108B8 58                      	pop rax
 22564 000108B9 C60004                  	mov byte [rax], T_closure
 22565 000108BC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22566 000108C0 48C74009[CD080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab3
 22567 000108C8 E99B050000              	jmp .L_lambda_simple_end_0ab3
 22568                                  .L_lambda_simple_code_0ab3:	; lambda-simple body
 22569 000108CD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22570 000108D3 740B                    	je .L_lambda_simple_arity_check_ok_0ab3
 22571 000108D5 FF742410                	push qword [rsp + 8 * 2]
 22572 000108D9 6A01                    	push 1
 22573 000108DB E99D7B0000              	jmp L_error_incorrect_arity_simple
 22574                                  .L_lambda_simple_arity_check_ok_0ab3:
 22575 000108E0 C8000000                	enter 0, 0
 22576                                  	; preparing a tail-call
 22577 000108E4 48B8-                   	mov rax, L_constants + 1993
 22577 000108E6 [C907000000000000] 
 22578 000108EE 50                      	push rax
 22579 000108EF 6A01                    	push 1	; arg count
 22580 000108F1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22581 000108F6 E8C97B0000              	call malloc
 22582 000108FB 50                      	push rax
 22583 000108FC BF08000000              	mov rdi, 8 * 1	; new rib
 22584 00010901 E8BE7B0000              	call malloc
 22585 00010906 50                      	push rax
 22586 00010907 BF20000000              	mov rdi, 8 * 4	; extended env
 22587 0001090C E8B37B0000              	call malloc
 22588 00010911 488B7D10                	mov rdi, ENV
 22589 00010915 BE00000000              	mov rsi, 0
 22590 0001091A BA01000000              	mov rdx, 1
 22591                                  .L_lambda_simple_env_loop_0ab4:	; ext_env[i + 1] <-- env[i]
 22592 0001091F 4883FE03                	cmp rsi, 3
 22593 00010923 7410                    	je .L_lambda_simple_env_end_0ab4
 22594 00010925 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22595 00010929 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22596 0001092D 48FFC6                  	inc rsi
 22597 00010930 48FFC2                  	inc rdx
 22598 00010933 EBEA                    	jmp .L_lambda_simple_env_loop_0ab4
 22599                                  .L_lambda_simple_env_end_0ab4:
 22600 00010935 5B                      	pop rbx
 22601 00010936 BE00000000              	mov rsi, 0
 22602                                  .L_lambda_simple_params_loop_0ab4:	; copy params
 22603 0001093B 4883FE01                	cmp rsi, 1
 22604 0001093F 740E                    	je .L_lambda_simple_params_end_0ab4
 22605 00010941 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22606 00010946 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22607 0001094A 48FFC6                  	inc rsi
 22608 0001094D EBEC                    	jmp .L_lambda_simple_params_loop_0ab4
 22609                                  .L_lambda_simple_params_end_0ab4:
 22610 0001094F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22611 00010952 4889C3                  	mov rbx, rax
 22612 00010955 58                      	pop rax
 22613 00010956 C60004                  	mov byte [rax], T_closure
 22614 00010959 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22615 0001095D 48C74009[6A090100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab4
 22616 00010965 E9A6040000              	jmp .L_lambda_simple_end_0ab4
 22617                                  .L_lambda_simple_code_0ab4:	; lambda-simple body
 22618 0001096A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22619 00010970 740B                    	je .L_lambda_simple_arity_check_ok_0ab4
 22620 00010972 FF742410                	push qword [rsp + 8 * 2]
 22621 00010976 6A01                    	push 1
 22622 00010978 E9007B0000              	jmp L_error_incorrect_arity_simple
 22623                                  .L_lambda_simple_arity_check_ok_0ab4:
 22624 0001097D C8000000                	enter 0, 0
 22625 00010981 BF08000000              	mov rdi, 8*1
 22626 00010986 E8397B0000              	call malloc
 22627 0001098B 488B5D20                	mov rbx, PARAM(0)
 22628 0001098F 488918                  	mov qword[rax], rbx
 22629 00010992 48894520                	mov PARAM(0), rax
 22630 00010996 48B8-                   	mov rax, sob_void
 22630 00010998 [0000000000000000] 
 22631                                  
 22632 000109A0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22633 000109A5 E81A7B0000              	call malloc
 22634 000109AA 50                      	push rax
 22635 000109AB BF08000000              	mov rdi, 8 * 1	; new rib
 22636 000109B0 E80F7B0000              	call malloc
 22637 000109B5 50                      	push rax
 22638 000109B6 BF28000000              	mov rdi, 8 * 5	; extended env
 22639 000109BB E8047B0000              	call malloc
 22640 000109C0 488B7D10                	mov rdi, ENV
 22641 000109C4 BE00000000              	mov rsi, 0
 22642 000109C9 BA01000000              	mov rdx, 1
 22643                                  .L_lambda_simple_env_loop_0ab5:	; ext_env[i + 1] <-- env[i]
 22644 000109CE 4883FE04                	cmp rsi, 4
 22645 000109D2 7410                    	je .L_lambda_simple_env_end_0ab5
 22646 000109D4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22647 000109D8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22648 000109DC 48FFC6                  	inc rsi
 22649 000109DF 48FFC2                  	inc rdx
 22650 000109E2 EBEA                    	jmp .L_lambda_simple_env_loop_0ab5
 22651                                  .L_lambda_simple_env_end_0ab5:
 22652 000109E4 5B                      	pop rbx
 22653 000109E5 BE00000000              	mov rsi, 0
 22654                                  .L_lambda_simple_params_loop_0ab5:	; copy params
 22655 000109EA 4883FE01                	cmp rsi, 1
 22656 000109EE 740E                    	je .L_lambda_simple_params_end_0ab5
 22657 000109F0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22658 000109F5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22659 000109F9 48FFC6                  	inc rsi
 22660 000109FC EBEC                    	jmp .L_lambda_simple_params_loop_0ab5
 22661                                  .L_lambda_simple_params_end_0ab5:
 22662 000109FE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22663 00010A01 4889C3                  	mov rbx, rax
 22664 00010A04 58                      	pop rax
 22665 00010A05 C60004                  	mov byte [rax], T_closure
 22666 00010A08 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22667 00010A0C 48C74009[190A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab5
 22668 00010A14 E962010000              	jmp .L_lambda_simple_end_0ab5
 22669                                  .L_lambda_simple_code_0ab5:	; lambda-simple body
 22670 00010A19 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22671 00010A1F 740B                    	je .L_lambda_simple_arity_check_ok_0ab5
 22672 00010A21 FF742410                	push qword [rsp + 8 * 2]
 22673 00010A25 6A02                    	push 2
 22674 00010A27 E9517A0000              	jmp L_error_incorrect_arity_simple
 22675                                  .L_lambda_simple_arity_check_ok_0ab5:
 22676 00010A2C C8000000                	enter 0, 0
 22677                                  	; preparing a non-tail-call
 22678 00010A30 488B4528                	mov rax, PARAM(1)	; param strs
 22679 00010A34 50                      	push rax
 22680 00010A35 6A01                    	push 1	; arg count
 22681 00010A37 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 22682 00010A3F 803805                  	cmp byte [rax], T_undefined
 22683 00010A42 0F844F790000            	je L_error_fvar_undefined
 22684 00010A48 803804                  	cmp byte [rax], T_closure
 22685 00010A4B 0F85CA790000            	jne L_error_non_closure
 22686 00010A51 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22687 00010A54 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22688 00010A57 483D[02000000]          	cmp rax, sob_boolean_false
 22689 00010A5D 0F8514010000            	jne .L_or_end_00ef
 22690                                  	; preparing a non-tail-call
 22691                                  	; preparing a non-tail-call
 22692 00010A63 488B4528                	mov rax, PARAM(1)	; param strs
 22693 00010A67 50                      	push rax
 22694 00010A68 6A01                    	push 1	; arg count
 22695 00010A6A 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 22696 00010A72 803805                  	cmp byte [rax], T_undefined
 22697 00010A75 0F841C790000            	je L_error_fvar_undefined
 22698 00010A7B 803804                  	cmp byte [rax], T_closure
 22699 00010A7E 0F8597790000            	jne L_error_non_closure
 22700 00010A84 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22701 00010A87 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22702 00010A8A 50                      	push rax
 22703 00010A8B 488B4520                	mov rax, PARAM(0)	; param str
 22704 00010A8F 50                      	push rax
 22705 00010A90 6A02                    	push 2	; arg count
 22706 00010A92 488B4510                	mov rax, ENV
 22707 00010A96 488B4008                	mov rax, qword [rax + 8 * 1]
 22708 00010A9A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var binary-string=?
 22709 00010A9D 803804                  	cmp byte [rax], T_closure
 22710 00010AA0 0F8575790000            	jne L_error_non_closure
 22711 00010AA6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22712 00010AA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22713 00010AAC 483D[02000000]          	cmp rax, sob_boolean_false
 22714 00010AB2 0F84B5000000            	je .L_if_else_080f
 22715                                  	; preparing a tail-call
 22716                                  	; preparing a non-tail-call
 22717 00010AB8 488B4528                	mov rax, PARAM(1)	; param strs
 22718 00010ABC 50                      	push rax
 22719 00010ABD 6A01                    	push 1	; arg count
 22720 00010ABF 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 22721 00010AC7 803805                  	cmp byte [rax], T_undefined
 22722 00010ACA 0F84C7780000            	je L_error_fvar_undefined
 22723 00010AD0 803804                  	cmp byte [rax], T_closure
 22724 00010AD3 0F8542790000            	jne L_error_non_closure
 22725 00010AD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22726 00010ADC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22727 00010ADF 50                      	push rax
 22728                                  	; preparing a non-tail-call
 22729 00010AE0 488B4528                	mov rax, PARAM(1)	; param strs
 22730 00010AE4 50                      	push rax
 22731 00010AE5 6A01                    	push 1	; arg count
 22732 00010AE7 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 22733 00010AEF 803805                  	cmp byte [rax], T_undefined
 22734 00010AF2 0F849F780000            	je L_error_fvar_undefined
 22735 00010AF8 803804                  	cmp byte [rax], T_closure
 22736 00010AFB 0F851A790000            	jne L_error_non_closure
 22737 00010B01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22738 00010B04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22739 00010B07 50                      	push rax
 22740 00010B08 6A02                    	push 2	; arg count
 22741 00010B0A 488B4510                	mov rax, ENV
 22742 00010B0E 488B00                  	mov rax, qword [rax + 8 * 0]
 22743 00010B11 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22744 00010B14 488B00                  	mov rax, qword [rax]
 22745 00010B17 803804                  	cmp byte [rax], T_closure
 22746 00010B1A 0F85FB780000            	jne L_error_non_closure
 22747 00010B20 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22748 00010B23 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22749 00010B26 FF7500                  	push qword[rbp]
 22750 00010B29 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22751 00010B2C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22752 00010B30 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22753 00010B34 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22754 00010B38 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22755 00010B3B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22756 00010B3E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22757 00010B43 4983C103                	add r9, 3 	 ;for getting to the params
 22758 00010B47 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22759 00010B4B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22760                                  .L_tc_recycle_frame_loop_0f09:
 22761 00010B4E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22762 00010B51 7410                    	je .L_tc_recycle_frame_done_0f09
 22763 00010B53 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22764 00010B56 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22765 00010B59 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22766 00010B5D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22767 00010B61 EBEB                    	jmp .L_tc_recycle_frame_loop_0f09
 22768                                  .L_tc_recycle_frame_done_0f09:
 22769 00010B63 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22770 00010B64 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22771 00010B68 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22772 00010B6B EB0A                    	jmp .L_if_end_080f
 22773                                  .L_if_else_080f:
 22774 00010B6D 48B8-                   	mov rax, L_constants + 2
 22774 00010B6F [0200000000000000] 
 22775                                  .L_if_end_080f:
 22776                                  .L_or_end_00ef:
 22777 00010B77 C9                      	leave
 22778 00010B78 C22000                  	ret AND_KILL_FRAME(2)
 22779                                  .L_lambda_simple_end_0ab5:	; new closure is in rax
 22780 00010B7B 50                      	push rax
 22781 00010B7C 488B4520                	mov rax, PARAM(0)	; param run
 22782 00010B80 8F00                    	pop qword [rax]
 22783 00010B82 48B8-                   	mov rax, sob_void
 22783 00010B84 [0000000000000000] 
 22784                                  
 22785 00010B8C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22786 00010B91 E82E790000              	call malloc
 22787 00010B96 50                      	push rax
 22788 00010B97 BF08000000              	mov rdi, 8 * 1	; new rib
 22789 00010B9C E823790000              	call malloc
 22790 00010BA1 50                      	push rax
 22791 00010BA2 BF28000000              	mov rdi, 8 * 5	; extended env
 22792 00010BA7 E818790000              	call malloc
 22793 00010BAC 488B7D10                	mov rdi, ENV
 22794 00010BB0 BE00000000              	mov rsi, 0
 22795 00010BB5 BA01000000              	mov rdx, 1
 22796                                  .L_lambda_opt_env_loop_0151:	; ext_env[i + 1] <-- env[i]
 22797 00010BBA 4883FE04                	cmp rsi, 4
 22798 00010BBE 7410                    	je .L_lambda_opt_env_end_0151
 22799 00010BC0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22800 00010BC4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22801 00010BC8 48FFC6                  	inc rsi
 22802 00010BCB 48FFC2                  	inc rdx
 22803 00010BCE EBEA                    	jmp .L_lambda_opt_env_loop_0151
 22804                                  .L_lambda_opt_env_end_0151:
 22805 00010BD0 5B                      	pop rbx
 22806 00010BD1 BE00000000              	mov rsi, 0
 22807                                  .L_lambda_opt_params_loop_0151:	; copy params
 22808 00010BD6 4883FE01                	cmp rsi, 1
 22809 00010BDA 740E                    	je .L_lambda_opt_params_end_0151
 22810 00010BDC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22811 00010BE1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22812 00010BE5 48FFC6                  	inc rsi
 22813 00010BE8 EBEC                    	jmp .L_lambda_opt_params_loop_0151
 22814                                  .L_lambda_opt_params_end_0151:
 22815 00010BEA 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 22816 00010BED 4889C3                  	mov rbx, rax
 22817 00010BF0 58                      	pop rax
 22818 00010BF1 C60004                  	mov byte [rax], T_closure
 22819 00010BF4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22820 00010BF8 48C74009[050C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0151
 22821 00010C00 E907020000              	jmp .L_lambda_opt_end_0151
 22822                                  .L_lambda_opt_code_0151:	; lambda-opt body
 22823 00010C05 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22824 00010C0B 7411                    	je .L_lambda_opt_arity_check_exact_0151
 22825 00010C0D 0F8FBF000000            	jg .L_lambda_opt_arity_check_more_0151
 22826 00010C13 FF742410                	push qword [rsp + 8 * 2]
 22827 00010C17 6A01                    	push 1
 22828 00010C19 E973780000              	jmp L_error_incorrect_arity_opt
 22829                                  .L_lambda_opt_arity_check_exact_0151:
 22830 00010C1E 4883EC08                	sub rsp, 8
 22831 00010C22 488B442408              	mov rax, qword[rsp + 8 *1]
 22832 00010C27 48890424                	mov qword[rsp], rax  
 22833 00010C2B 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 22834 00010C30 4889442408              	mov qword[rsp + 8 * 1], rax
 22835 00010C35 B802000000              	mov rax, 2
 22836 00010C3A 4889442410              	mov qword[rsp + 8 *2], rax
 22837 00010C3F 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 22838 00010C44 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 22839 00010C49 48B8-                   	mov rax, sob_nil
 22839 00010C4B [0100000000000000] 
 22840 00010C53 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 22841 00010C58 C8000000                	enter 0, 0
 22842                                  	; preparing a tail-call
 22843 00010C5C 488B4528                	mov rax, PARAM(1)	; param strs
 22844 00010C60 50                      	push rax
 22845 00010C61 488B4520                	mov rax, PARAM(0)	; param str
 22846 00010C65 50                      	push rax
 22847 00010C66 6A02                    	push 2	; arg count
 22848 00010C68 488B4510                	mov rax, ENV
 22849 00010C6C 488B00                  	mov rax, qword [rax + 8 * 0]
 22850 00010C6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22851 00010C72 488B00                  	mov rax, qword [rax]
 22852 00010C75 803804                  	cmp byte [rax], T_closure
 22853 00010C78 0F859D770000            	jne L_error_non_closure
 22854 00010C7E FF7001                  	push SOB_CLOSURE_ENV(rax)
 22855 00010C81 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22856 00010C84 FF7500                  	push qword[rbp]
 22857 00010C87 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22858 00010C8A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22859 00010C8E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22860 00010C92 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22861 00010C96 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22862 00010C99 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22863 00010C9C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22864 00010CA1 4983C103                	add r9, 3 	 ;for getting to the params
 22865 00010CA5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22866 00010CA9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22867                                  .L_tc_recycle_frame_loop_0f0b:
 22868 00010CAC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22869 00010CAF 7410                    	je .L_tc_recycle_frame_done_0f0b
 22870 00010CB1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22871 00010CB4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22872 00010CB7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22873 00010CBB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22874 00010CBF EBEB                    	jmp .L_tc_recycle_frame_loop_0f0b
 22875                                  .L_tc_recycle_frame_done_0f0b:
 22876 00010CC1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22877 00010CC2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22878 00010CC6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22879 00010CC9 C9                      	leave
 22880 00010CCA C22000                  	ret AND_KILL_FRAME(2)
 22881 00010CCD E93A010000              	jmp .L_lambda_opt_end_0151	; new closure is in rax
 22882                                  .L_lambda_opt_arity_check_more_0151:
 22883 00010CD2 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 22884 00010CD7 49B9-                   	mov r9, sob_nil
 22884 00010CD9 [0100000000000000] 
 22885 00010CE1 4889E3                  	mov rbx, rsp 
 22886 00010CE4 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 22887 00010CE8 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 22888 00010CEB 49C1E003                	shl r8, 3
 22889 00010CEF 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 22890 00010CF2 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 22891                                  .L_lambda_opt_stack_shrink_loop_0151:
 22892 00010CF7 4983F801                	cmp r8, 1
 22893 00010CFB 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0151
 22894 00010CFD BF11000000              	mov rdi, 1+8+8 ;for pair
 22895 00010D02 E8BD770000              	call malloc;to create the pair in the stack
 22896 00010D07 C60021                  	mov byte [rax], T_pair ; to make it a pair
 22897 00010D0A 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 22898 00010D0D 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 22899 00010D11 4C894809                 	mov qword[rax+1+8],r9
 22900 00010D15 4989C1                  	mov r9, rax ;for the recursion 
 22901 00010D18 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 22902 00010D1B 4883EB08                	sub rbx, 8 ;to get the next param to copy
 22903 00010D1F EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0151
 22904                                  .L_lambda_opt_stack_shrink_loop_exit_0151:
 22905 00010D21 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 22906 00010D26 4883E902                	sub rcx, 2
 22907 00010D2A 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 22908 00010D2E 4801CC                  	add rsp, rcx ;shrinking the stack
 22909 00010D31 4889E0                  	mov rax, rsp
 22910 00010D34 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 22911 00010D37 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 22912 00010D3B 49FFC8                  	dec r8 ;we start with param 0, not 1 
 22913 00010D3E 4883C018                	add rax, 3 * 8;now rax is param 0
 22914 00010D42 49C1E003                	shl r8, 3;convert to byte
 22915 00010D46 4C01C0                  	add rax, r8;now rax is the top of the stack
 22916 00010D49 4C8908                  	mov qword[rax], r9;puting the list at the top
 22917 00010D4C 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 22918 00010D50 4889E3                  	mov rbx, rsp 
 22919 00010D53 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 22920 00010D56 41BA01000000            	mov r10, 1;r10 is the not opt params length
 22921 00010D5C 49FFCA                  	dec r10 
 22922 00010D5F 49C1E203                	shl r10, 3;to get bytes
 22923 00010D63 4883C318                	add rbx, 3*8;rbx is the first param
 22924 00010D67 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 22925 00010D6A 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 22926 00010D6D 4C8900                  	mov qword[rax], r8
 22927 00010D70 4883E808                	sub rax, 8
 22928 00010D74 4883EB08                	sub rbx, 8
 22929 00010D78 4889E0                  	mov rax, rsp
 22930 00010D7B 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 22931 00010D7E 48C744241002000000      	mov qword [rsp+2*8], 2
 22932 00010D87 488B5808                	mov rbx, qword[rax + 8 *1]
 22933 00010D8B 48895C2408              	mov qword [rsp + 1*8] ,rbx
 22934 00010D90 488B18                  	mov rbx, qword[rax]
 22935 00010D93 48891C24                	mov qword [rsp], rbx
 22936 00010D97 C8000000                	enter 0, 0
 22937                                  	; preparing a tail-call
 22938 00010D9B 488B4528                	mov rax, PARAM(1)	; param strs
 22939 00010D9F 50                      	push rax
 22940 00010DA0 488B4520                	mov rax, PARAM(0)	; param str
 22941 00010DA4 50                      	push rax
 22942 00010DA5 6A02                    	push 2	; arg count
 22943 00010DA7 488B4510                	mov rax, ENV
 22944 00010DAB 488B00                  	mov rax, qword [rax + 8 * 0]
 22945 00010DAE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 22946 00010DB1 488B00                  	mov rax, qword [rax]
 22947 00010DB4 803804                  	cmp byte [rax], T_closure
 22948 00010DB7 0F855E760000            	jne L_error_non_closure
 22949 00010DBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 22950 00010DC0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22951 00010DC3 FF7500                  	push qword[rbp]
 22952 00010DC6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22953 00010DC9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22954 00010DCD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22955 00010DD1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22956 00010DD5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22957 00010DD8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22958 00010DDB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22959 00010DE0 4983C103                	add r9, 3 	 ;for getting to the params
 22960 00010DE4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22961 00010DE8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22962                                  .L_tc_recycle_frame_loop_0f0a:
 22963 00010DEB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22964 00010DEE 7410                    	je .L_tc_recycle_frame_done_0f0a
 22965 00010DF0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22966 00010DF3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 22967 00010DF6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 22968 00010DFA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 22969 00010DFE EBEB                    	jmp .L_tc_recycle_frame_loop_0f0a
 22970                                  .L_tc_recycle_frame_done_0f0a:
 22971 00010E00 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 22972 00010E01 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 22973 00010E05 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 22974 00010E08 C9                      	leave
 22975 00010E09 C22000                  	ret AND_KILL_FRAME(2)
 22976                                  .L_lambda_opt_end_0151:	; new closure is in rax
 22977 00010E0C C9                      	leave
 22978 00010E0D C21800                  	ret AND_KILL_FRAME(1)
 22979                                  .L_lambda_simple_end_0ab4:	; new closure is in rax
 22980 00010E10 803804                  	cmp byte [rax], T_closure
 22981 00010E13 0F8502760000            	jne L_error_non_closure
 22982 00010E19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 22983 00010E1C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 22984 00010E1F FF7500                  	push qword[rbp]
 22985 00010E22 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 22986 00010E25 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 22987 00010E29 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 22988 00010E2D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 22989 00010E31 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 22990 00010E34 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 22991 00010E37 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 22992 00010E3C 4983C103                	add r9, 3 	 ;for getting to the params
 22993 00010E40 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 22994 00010E44 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 22995                                  .L_tc_recycle_frame_loop_0f0c:
 22996 00010E47 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 22997 00010E4A 7410                    	je .L_tc_recycle_frame_done_0f0c
 22998 00010E4C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 22999 00010E4F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23000 00010E52 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23001 00010E56 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23002 00010E5A EBEB                    	jmp .L_tc_recycle_frame_loop_0f0c
 23003                                  .L_tc_recycle_frame_done_0f0c:
 23004 00010E5C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23005 00010E5D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23006 00010E61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23007 00010E64 C9                      	leave
 23008 00010E65 C21800                  	ret AND_KILL_FRAME(1)
 23009                                  .L_lambda_simple_end_0ab3:	; new closure is in rax
 23010 00010E68 803804                  	cmp byte [rax], T_closure
 23011 00010E6B 0F85AA750000            	jne L_error_non_closure
 23012 00010E71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23013 00010E74 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23014 00010E77 FF7500                  	push qword[rbp]
 23015 00010E7A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23016 00010E7D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23017 00010E81 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23018 00010E85 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23019 00010E89 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23020 00010E8C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23021 00010E8F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23022 00010E94 4983C103                	add r9, 3 	 ;for getting to the params
 23023 00010E98 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23024 00010E9C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23025                                  .L_tc_recycle_frame_loop_0f0d:
 23026 00010E9F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23027 00010EA2 7410                    	je .L_tc_recycle_frame_done_0f0d
 23028 00010EA4 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23029 00010EA7 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23030 00010EAA 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23031 00010EAE 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23032 00010EB2 EBEB                    	jmp .L_tc_recycle_frame_loop_0f0d
 23033                                  .L_tc_recycle_frame_done_0f0d:
 23034 00010EB4 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23035 00010EB5 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23036 00010EB9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23037 00010EBC C9                      	leave
 23038 00010EBD C21800                  	ret AND_KILL_FRAME(1)
 23039                                  .L_lambda_simple_end_0aaf:	; new closure is in rax
 23040 00010EC0 803804                  	cmp byte [rax], T_closure
 23041 00010EC3 0F8552750000            	jne L_error_non_closure
 23042 00010EC9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23043 00010ECC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23044 00010ECF FF7500                  	push qword[rbp]
 23045 00010ED2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23046 00010ED5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23047 00010ED9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23048 00010EDD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23049 00010EE1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23050 00010EE4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23051 00010EE7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23052 00010EEC 4983C103                	add r9, 3 	 ;for getting to the params
 23053 00010EF0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23054 00010EF4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23055                                  .L_tc_recycle_frame_loop_0f0e:
 23056 00010EF7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23057 00010EFA 7410                    	je .L_tc_recycle_frame_done_0f0e
 23058 00010EFC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23059 00010EFF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23060 00010F02 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23061 00010F06 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23062 00010F0A EBEB                    	jmp .L_tc_recycle_frame_loop_0f0e
 23063                                  .L_tc_recycle_frame_done_0f0e:
 23064 00010F0C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23065 00010F0D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23066 00010F11 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23067 00010F14 C9                      	leave
 23068 00010F15 C21800                  	ret AND_KILL_FRAME(1)
 23069                                  .L_lambda_simple_end_0aae:	; new closure is in rax
 23070 00010F18 50                      	push rax
 23071 00010F19 6A01                    	push 1	; arg count
 23072 00010F1B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23073 00010F20 E89F750000              	call malloc
 23074 00010F25 50                      	push rax
 23075 00010F26 BF00000000              	mov rdi, 8 * 0	; new rib
 23076 00010F2B E894750000              	call malloc
 23077 00010F30 50                      	push rax
 23078 00010F31 BF08000000              	mov rdi, 8 * 1	; extended env
 23079 00010F36 E889750000              	call malloc
 23080 00010F3B 488B7D10                	mov rdi, ENV
 23081 00010F3F BE00000000              	mov rsi, 0
 23082 00010F44 BA01000000              	mov rdx, 1
 23083                                  .L_lambda_simple_env_loop_0ab6:	; ext_env[i + 1] <-- env[i]
 23084 00010F49 4883FE00                	cmp rsi, 0
 23085 00010F4D 7410                    	je .L_lambda_simple_env_end_0ab6
 23086 00010F4F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23087 00010F53 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23088 00010F57 48FFC6                  	inc rsi
 23089 00010F5A 48FFC2                  	inc rdx
 23090 00010F5D EBEA                    	jmp .L_lambda_simple_env_loop_0ab6
 23091                                  .L_lambda_simple_env_end_0ab6:
 23092 00010F5F 5B                      	pop rbx
 23093 00010F60 BE00000000              	mov rsi, 0
 23094                                  .L_lambda_simple_params_loop_0ab6:	; copy params
 23095 00010F65 4883FE00                	cmp rsi, 0
 23096 00010F69 740E                    	je .L_lambda_simple_params_end_0ab6
 23097 00010F6B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23098 00010F70 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23099 00010F74 48FFC6                  	inc rsi
 23100 00010F77 EBEC                    	jmp .L_lambda_simple_params_loop_0ab6
 23101                                  .L_lambda_simple_params_end_0ab6:
 23102 00010F79 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23103 00010F7C 4889C3                  	mov rbx, rax
 23104 00010F7F 58                      	pop rax
 23105 00010F80 C60004                  	mov byte [rax], T_closure
 23106 00010F83 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23107 00010F87 48C74009[940F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab6
 23108 00010F8F E98D000000              	jmp .L_lambda_simple_end_0ab6
 23109                                  .L_lambda_simple_code_0ab6:	; lambda-simple body
 23110 00010F94 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23111 00010F9A 740B                    	je .L_lambda_simple_arity_check_ok_0ab6
 23112 00010F9C FF742410                	push qword [rsp + 8 * 2]
 23113 00010FA0 6A01                    	push 1
 23114 00010FA2 E9D6740000              	jmp L_error_incorrect_arity_simple
 23115                                  .L_lambda_simple_arity_check_ok_0ab6:
 23116 00010FA7 C8000000                	enter 0, 0
 23117                                  	; preparing a non-tail-call
 23118 00010FAB 488B0425[35140000]      	mov rax, qword [free_var_75]	; free var char=?
 23119 00010FB3 803805                  	cmp byte [rax], T_undefined
 23120 00010FB6 0F84DB730000            	je L_error_fvar_undefined
 23121 00010FBC 50                      	push rax
 23122 00010FBD 6A01                    	push 1	; arg count
 23123 00010FBF 488B4520                	mov rax, PARAM(0)	; param make-string=?
 23124 00010FC3 803804                  	cmp byte [rax], T_closure
 23125 00010FC6 0F854F740000            	jne L_error_non_closure
 23126 00010FCC FF7001                  	push SOB_CLOSURE_ENV(rax)
 23127 00010FCF FF5009                  	call SOB_CLOSURE_CODE(rax)
 23128 00010FD2 48890425[31180000]      	mov qword [free_var_135], rax
 23129 00010FDA 48B8-                   	mov rax, sob_void
 23129 00010FDC [0000000000000000] 
 23130                                  
 23131                                  	; preparing a non-tail-call
 23132 00010FE4 488B0425[BE130000]      	mov rax, qword [free_var_68]	; free var char-ci=?
 23133 00010FEC 803805                  	cmp byte [rax], T_undefined
 23134 00010FEF 0F84A2730000            	je L_error_fvar_undefined
 23135 00010FF5 50                      	push rax
 23136 00010FF6 6A01                    	push 1	; arg count
 23137 00010FF8 488B4520                	mov rax, PARAM(0)	; param make-string=?
 23138 00010FFC 803804                  	cmp byte [rax], T_closure
 23139 00010FFF 0F8516740000            	jne L_error_non_closure
 23140 00011005 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23141 00011008 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23142 0001100B 48890425[65170000]      	mov qword [free_var_123], rax
 23143 00011013 48B8-                   	mov rax, sob_void
 23143 00011015 [0000000000000000] 
 23144 0001101D C9                      	leave
 23145 0001101E C21800                  	ret AND_KILL_FRAME(1)
 23146                                  .L_lambda_simple_end_0ab6:	; new closure is in rax
 23147 00011021 803804                  	cmp byte [rax], T_closure
 23148 00011024 0F85F1730000            	jne L_error_non_closure
 23149 0001102A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23150 0001102D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23151                                  
 23152 00011030 4889C7                  	mov rdi, rax
 23153 00011033 E8E1760000              	call print_sexpr_if_not_void
 23154 00011038 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23155 0001103D E882740000              	call malloc
 23156 00011042 50                      	push rax
 23157 00011043 BF00000000              	mov rdi, 8 * 0	; new rib
 23158 00011048 E877740000              	call malloc
 23159 0001104D 50                      	push rax
 23160 0001104E BF08000000              	mov rdi, 8 * 1	; extended env
 23161 00011053 E86C740000              	call malloc
 23162 00011058 488B7D10                	mov rdi, ENV
 23163 0001105C BE00000000              	mov rsi, 0
 23164 00011061 BA01000000              	mov rdx, 1
 23165                                  .L_lambda_simple_env_loop_0ab7:	; ext_env[i + 1] <-- env[i]
 23166 00011066 4883FE00                	cmp rsi, 0
 23167 0001106A 7410                    	je .L_lambda_simple_env_end_0ab7
 23168 0001106C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23169 00011070 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23170 00011074 48FFC6                  	inc rsi
 23171 00011077 48FFC2                  	inc rdx
 23172 0001107A EBEA                    	jmp .L_lambda_simple_env_loop_0ab7
 23173                                  .L_lambda_simple_env_end_0ab7:
 23174 0001107C 5B                      	pop rbx
 23175 0001107D BE00000000              	mov rsi, 0
 23176                                  .L_lambda_simple_params_loop_0ab7:	; copy params
 23177 00011082 4883FE00                	cmp rsi, 0
 23178 00011086 740E                    	je .L_lambda_simple_params_end_0ab7
 23179 00011088 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23180 0001108D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23181 00011091 48FFC6                  	inc rsi
 23182 00011094 EBEC                    	jmp .L_lambda_simple_params_loop_0ab7
 23183                                  .L_lambda_simple_params_end_0ab7:
 23184 00011096 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23185 00011099 4889C3                  	mov rbx, rax
 23186 0001109C 58                      	pop rax
 23187 0001109D C60004                  	mov byte [rax], T_closure
 23188 000110A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23189 000110A4 48C74009[B1100100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab7
 23190 000110AC E91C010000              	jmp .L_lambda_simple_end_0ab7
 23191                                  .L_lambda_simple_code_0ab7:	; lambda-simple body
 23192 000110B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23193 000110B7 740B                    	je .L_lambda_simple_arity_check_ok_0ab7
 23194 000110B9 FF742410                	push qword [rsp + 8 * 2]
 23195 000110BD 6A01                    	push 1
 23196 000110BF E9B9730000              	jmp L_error_incorrect_arity_simple
 23197                                  .L_lambda_simple_arity_check_ok_0ab7:
 23198 000110C4 C8000000                	enter 0, 0
 23199                                  	; preparing a non-tail-call
 23200 000110C8 488B4520                	mov rax, PARAM(0)	; param e
 23201 000110CC 50                      	push rax
 23202 000110CD 6A01                    	push 1	; arg count
 23203 000110CF 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 23204 000110D7 803805                  	cmp byte [rax], T_undefined
 23205 000110DA 0F84B7720000            	je L_error_fvar_undefined
 23206 000110E0 803804                  	cmp byte [rax], T_closure
 23207 000110E3 0F8532730000            	jne L_error_non_closure
 23208 000110E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23209 000110EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23210 000110EF 483D[02000000]          	cmp rax, sob_boolean_false
 23211 000110F5 0F85CE000000            	jne .L_or_end_00f0
 23212                                  	; preparing a non-tail-call
 23213 000110FB 488B4520                	mov rax, PARAM(0)	; param e
 23214 000110FF 50                      	push rax
 23215 00011100 6A01                    	push 1	; arg count
 23216 00011102 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 23217 0001110A 803805                  	cmp byte [rax], T_undefined
 23218 0001110D 0F8484720000            	je L_error_fvar_undefined
 23219 00011113 803804                  	cmp byte [rax], T_closure
 23220 00011116 0F85FF720000            	jne L_error_non_closure
 23221 0001111C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23222 0001111F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23223 00011122 483D[02000000]          	cmp rax, sob_boolean_false
 23224 00011128 0F8491000000            	je .L_if_else_0810
 23225                                  	; preparing a tail-call
 23226                                  	; preparing a non-tail-call
 23227 0001112E 488B4520                	mov rax, PARAM(0)	; param e
 23228 00011132 50                      	push rax
 23229 00011133 6A01                    	push 1	; arg count
 23230 00011135 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 23231 0001113D 803805                  	cmp byte [rax], T_undefined
 23232 00011140 0F8451720000            	je L_error_fvar_undefined
 23233 00011146 803804                  	cmp byte [rax], T_closure
 23234 00011149 0F85CC720000            	jne L_error_non_closure
 23235 0001114F FF7001                  	push SOB_CLOSURE_ENV(rax)
 23236 00011152 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23237 00011155 50                      	push rax
 23238 00011156 6A01                    	push 1	; arg count
 23239 00011158 488B0425[9A150000]      	mov rax, qword [free_var_96]	; free var list?
 23240 00011160 803805                  	cmp byte [rax], T_undefined
 23241 00011163 0F842E720000            	je L_error_fvar_undefined
 23242 00011169 803804                  	cmp byte [rax], T_closure
 23243 0001116C 0F85A9720000            	jne L_error_non_closure
 23244 00011172 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23245 00011175 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23246 00011178 FF7500                  	push qword[rbp]
 23247 0001117B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23248 0001117E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23249 00011182 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23250 00011186 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23251 0001118A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23252 0001118D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23253 00011190 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23254 00011195 4983C103                	add r9, 3 	 ;for getting to the params
 23255 00011199 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23256 0001119D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23257                                  .L_tc_recycle_frame_loop_0f0f:
 23258 000111A0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23259 000111A3 7410                    	je .L_tc_recycle_frame_done_0f0f
 23260 000111A5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23261 000111A8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23262 000111AB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23263 000111AF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23264 000111B3 EBEB                    	jmp .L_tc_recycle_frame_loop_0f0f
 23265                                  .L_tc_recycle_frame_done_0f0f:
 23266 000111B5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23267 000111B6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23268 000111BA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23269 000111BD EB0A                    	jmp .L_if_end_0810
 23270                                  .L_if_else_0810:
 23271 000111BF 48B8-                   	mov rax, L_constants + 2
 23271 000111C1 [0200000000000000] 
 23272                                  .L_if_end_0810:
 23273                                  .L_or_end_00f0:
 23274 000111C9 C9                      	leave
 23275 000111CA C21800                  	ret AND_KILL_FRAME(1)
 23276                                  .L_lambda_simple_end_0ab7:	; new closure is in rax
 23277 000111CD 48890425[9A150000]      	mov qword [free_var_96], rax
 23278 000111D5 48B8-                   	mov rax, sob_void
 23278 000111D7 [0000000000000000] 
 23279                                  
 23280 000111DF 4889C7                  	mov rdi, rax
 23281 000111E2 E832750000              	call print_sexpr_if_not_void
 23282                                  	; preparing a non-tail-call
 23283 000111E7 488B0425[EF150000]      	mov rax, qword [free_var_101]	; free var make-vector
 23284 000111EF 803805                  	cmp byte [rax], T_undefined
 23285 000111F2 0F849F710000            	je L_error_fvar_undefined
 23286 000111F8 50                      	push rax
 23287 000111F9 6A01                    	push 1	; arg count
 23288 000111FB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23289 00011200 E8BF720000              	call malloc
 23290 00011205 50                      	push rax
 23291 00011206 BF00000000              	mov rdi, 8 * 0	; new rib
 23292 0001120B E8B4720000              	call malloc
 23293 00011210 50                      	push rax
 23294 00011211 BF08000000              	mov rdi, 8 * 1	; extended env
 23295 00011216 E8A9720000              	call malloc
 23296 0001121B 488B7D10                	mov rdi, ENV
 23297 0001121F BE00000000              	mov rsi, 0
 23298 00011224 BA01000000              	mov rdx, 1
 23299                                  .L_lambda_simple_env_loop_0ab8:	; ext_env[i + 1] <-- env[i]
 23300 00011229 4883FE00                	cmp rsi, 0
 23301 0001122D 7410                    	je .L_lambda_simple_env_end_0ab8
 23302 0001122F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23303 00011233 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23304 00011237 48FFC6                  	inc rsi
 23305 0001123A 48FFC2                  	inc rdx
 23306 0001123D EBEA                    	jmp .L_lambda_simple_env_loop_0ab8
 23307                                  .L_lambda_simple_env_end_0ab8:
 23308 0001123F 5B                      	pop rbx
 23309 00011240 BE00000000              	mov rsi, 0
 23310                                  .L_lambda_simple_params_loop_0ab8:	; copy params
 23311 00011245 4883FE00                	cmp rsi, 0
 23312 00011249 740E                    	je .L_lambda_simple_params_end_0ab8
 23313 0001124B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23314 00011250 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23315 00011254 48FFC6                  	inc rsi
 23316 00011257 EBEC                    	jmp .L_lambda_simple_params_loop_0ab8
 23317                                  .L_lambda_simple_params_end_0ab8:
 23318 00011259 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23319 0001125C 4889C3                  	mov rbx, rax
 23320 0001125F 58                      	pop rax
 23321 00011260 C60004                  	mov byte [rax], T_closure
 23322 00011263 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23323 00011267 48C74009[74120100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab8
 23324 0001126F E9D1060000              	jmp .L_lambda_simple_end_0ab8
 23325                                  .L_lambda_simple_code_0ab8:	; lambda-simple body
 23326 00011274 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23327 0001127A 740B                    	je .L_lambda_simple_arity_check_ok_0ab8
 23328 0001127C FF742410                	push qword [rsp + 8 * 2]
 23329 00011280 6A01                    	push 1
 23330 00011282 E9F6710000              	jmp L_error_incorrect_arity_simple
 23331                                  .L_lambda_simple_arity_check_ok_0ab8:
 23332 00011287 C8000000                	enter 0, 0
 23333 0001128B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23334 00011290 E82F720000              	call malloc
 23335 00011295 50                      	push rax
 23336 00011296 BF08000000              	mov rdi, 8 * 1	; new rib
 23337 0001129B E824720000              	call malloc
 23338 000112A0 50                      	push rax
 23339 000112A1 BF10000000              	mov rdi, 8 * 2	; extended env
 23340 000112A6 E819720000              	call malloc
 23341 000112AB 488B7D10                	mov rdi, ENV
 23342 000112AF BE00000000              	mov rsi, 0
 23343 000112B4 BA01000000              	mov rdx, 1
 23344                                  .L_lambda_opt_env_loop_0152:	; ext_env[i + 1] <-- env[i]
 23345 000112B9 4883FE01                	cmp rsi, 1
 23346 000112BD 7410                    	je .L_lambda_opt_env_end_0152
 23347 000112BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23348 000112C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23349 000112C7 48FFC6                  	inc rsi
 23350 000112CA 48FFC2                  	inc rdx
 23351 000112CD EBEA                    	jmp .L_lambda_opt_env_loop_0152
 23352                                  .L_lambda_opt_env_end_0152:
 23353 000112CF 5B                      	pop rbx
 23354 000112D0 BE00000000              	mov rsi, 0
 23355                                  .L_lambda_opt_params_loop_0152:	; copy params
 23356 000112D5 4883FE01                	cmp rsi, 1
 23357 000112D9 740E                    	je .L_lambda_opt_params_end_0152
 23358 000112DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23359 000112E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23360 000112E4 48FFC6                  	inc rsi
 23361 000112E7 EBEC                    	jmp .L_lambda_opt_params_loop_0152
 23362                                  .L_lambda_opt_params_end_0152:
 23363 000112E9 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 23364 000112EC 4889C3                  	mov rbx, rax
 23365 000112EF 58                      	pop rax
 23366 000112F0 C60004                  	mov byte [rax], T_closure
 23367 000112F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23368 000112F7 48C74009[04130100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0152
 23369 000112FF E93D060000              	jmp .L_lambda_opt_end_0152
 23370                                  .L_lambda_opt_code_0152:	; lambda-opt body
 23371 00011304 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23372 0001130A 7411                    	je .L_lambda_opt_arity_check_exact_0152
 23373 0001130C 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_0152
 23374 00011312 FF742410                	push qword [rsp + 8 * 2]
 23375 00011316 6A01                    	push 1
 23376 00011318 E974710000              	jmp L_error_incorrect_arity_opt
 23377                                  .L_lambda_opt_arity_check_exact_0152:
 23378 0001131D 4883EC08                	sub rsp, 8
 23379 00011321 488B442408              	mov rax, qword[rsp + 8 *1]
 23380 00011326 48890424                	mov qword[rsp], rax  
 23381 0001132A 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23382 0001132F 4889442408              	mov qword[rsp + 8 * 1], rax
 23383 00011334 B802000000              	mov rax, 2
 23384 00011339 4889442410              	mov qword[rsp + 8 *2], rax
 23385 0001133E 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23386 00011343 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23387 00011348 48B8-                   	mov rax, sob_nil
 23387 0001134A [0100000000000000] 
 23388 00011352 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23389 00011357 C8000000                	enter 0, 0
 23390                                  	; preparing a tail-call
 23391                                  	; preparing a non-tail-call
 23392 0001135B 488B4528                	mov rax, PARAM(1)	; param xs
 23393 0001135F 50                      	push rax
 23394 00011360 6A01                    	push 1	; arg count
 23395 00011362 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 23396 0001136A 803805                  	cmp byte [rax], T_undefined
 23397 0001136D 0F8424700000            	je L_error_fvar_undefined
 23398 00011373 803804                  	cmp byte [rax], T_closure
 23399 00011376 0F859F700000            	jne L_error_non_closure
 23400 0001137C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23401 0001137F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23402 00011382 483D[02000000]          	cmp rax, sob_boolean_false
 23403 00011388 740F                    	je .L_if_else_0816
 23404 0001138A 48B8-                   	mov rax, L_constants + 0
 23404 0001138C [0000000000000000] 
 23405 00011394 E9EE000000              	jmp .L_if_end_0816
 23406                                  .L_if_else_0816:
 23407                                  	; preparing a non-tail-call
 23408 00011399 488B4528                	mov rax, PARAM(1)	; param xs
 23409 0001139D 50                      	push rax
 23410 0001139E 6A01                    	push 1	; arg count
 23411 000113A0 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 23412 000113A8 803805                  	cmp byte [rax], T_undefined
 23413 000113AB 0F84E66F0000            	je L_error_fvar_undefined
 23414 000113B1 803804                  	cmp byte [rax], T_closure
 23415 000113B4 0F8561700000            	jne L_error_non_closure
 23416 000113BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 23417 000113BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 23418 000113C0 483D[02000000]          	cmp rax, sob_boolean_false
 23419 000113C6 744C                    	je .L_if_else_0814
 23420                                  	; preparing a non-tail-call
 23421                                  	; preparing a non-tail-call
 23422 000113C8 488B4528                	mov rax, PARAM(1)	; param xs
 23423 000113CC 50                      	push rax
 23424 000113CD 6A01                    	push 1	; arg count
 23425 000113CF 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 23426 000113D7 803805                  	cmp byte [rax], T_undefined
 23427 000113DA 0F84B76F0000            	je L_error_fvar_undefined
 23428 000113E0 803804                  	cmp byte [rax], T_closure
 23429 000113E3 0F8532700000            	jne L_error_non_closure
 23430 000113E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23431 000113EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23432 000113EF 50                      	push rax
 23433 000113F0 6A01                    	push 1	; arg count
 23434 000113F2 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 23435 000113FA 803805                  	cmp byte [rax], T_undefined
 23436 000113FD 0F84946F0000            	je L_error_fvar_undefined
 23437 00011403 803804                  	cmp byte [rax], T_closure
 23438 00011406 0F850F700000            	jne L_error_non_closure
 23439 0001140C FF7001                  	push SOB_CLOSURE_ENV(rax)
 23440 0001140F FF5009                  	call SOB_CLOSURE_CODE(rax)
 23441 00011412 EB0A                    	jmp .L_if_end_0814
 23442                                  .L_if_else_0814:
 23443 00011414 48B8-                   	mov rax, L_constants + 2
 23443 00011416 [0200000000000000] 
 23444                                  .L_if_end_0814:
 23445 0001141E 483D[02000000]          	cmp rax, sob_boolean_false
 23446 00011424 7429                    	je .L_if_else_0815
 23447                                  	; preparing a non-tail-call
 23448 00011426 488B4528                	mov rax, PARAM(1)	; param xs
 23449 0001142A 50                      	push rax
 23450 0001142B 6A01                    	push 1	; arg count
 23451 0001142D 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 23452 00011435 803805                  	cmp byte [rax], T_undefined
 23453 00011438 0F84596F0000            	je L_error_fvar_undefined
 23454 0001143E 803804                  	cmp byte [rax], T_closure
 23455 00011441 0F85D46F0000            	jne L_error_non_closure
 23456 00011447 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23457 0001144A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23458 0001144D EB38                    	jmp .L_if_end_0815
 23459                                  .L_if_else_0815:
 23460                                  	; preparing a non-tail-call
 23461 0001144F 48B8-                   	mov rax, L_constants + 2955
 23461 00011451 [8B0B000000000000] 
 23462 00011459 50                      	push rax
 23463 0001145A 48B8-                   	mov rax, L_constants + 2946
 23463 0001145C [820B000000000000] 
 23464 00011464 50                      	push rax
 23465 00011465 6A02                    	push 2	; arg count
 23466 00011467 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 23467 0001146F 803805                  	cmp byte [rax], T_undefined
 23468 00011472 0F841F6F0000            	je L_error_fvar_undefined
 23469 00011478 803804                  	cmp byte [rax], T_closure
 23470 0001147B 0F859A6F0000            	jne L_error_non_closure
 23471 00011481 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23472 00011484 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23473                                  .L_if_end_0815:
 23474                                  .L_if_end_0816:
 23475 00011487 50                      	push rax
 23476 00011488 6A01                    	push 1	; arg count
 23477 0001148A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23478 0001148F E830700000              	call malloc
 23479 00011494 50                      	push rax
 23480 00011495 BF10000000              	mov rdi, 8 * 2	; new rib
 23481 0001149A E825700000              	call malloc
 23482 0001149F 50                      	push rax
 23483 000114A0 BF18000000              	mov rdi, 8 * 3	; extended env
 23484 000114A5 E81A700000              	call malloc
 23485 000114AA 488B7D10                	mov rdi, ENV
 23486 000114AE BE00000000              	mov rsi, 0
 23487 000114B3 BA01000000              	mov rdx, 1
 23488                                  .L_lambda_simple_env_loop_0aba:	; ext_env[i + 1] <-- env[i]
 23489 000114B8 4883FE02                	cmp rsi, 2
 23490 000114BC 7410                    	je .L_lambda_simple_env_end_0aba
 23491 000114BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23492 000114C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23493 000114C6 48FFC6                  	inc rsi
 23494 000114C9 48FFC2                  	inc rdx
 23495 000114CC EBEA                    	jmp .L_lambda_simple_env_loop_0aba
 23496                                  .L_lambda_simple_env_end_0aba:
 23497 000114CE 5B                      	pop rbx
 23498 000114CF BE00000000              	mov rsi, 0
 23499                                  .L_lambda_simple_params_loop_0aba:	; copy params
 23500 000114D4 4883FE02                	cmp rsi, 2
 23501 000114D8 740E                    	je .L_lambda_simple_params_end_0aba
 23502 000114DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23503 000114DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23504 000114E3 48FFC6                  	inc rsi
 23505 000114E6 EBEC                    	jmp .L_lambda_simple_params_loop_0aba
 23506                                  .L_lambda_simple_params_end_0aba:
 23507 000114E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23508 000114EB 4889C3                  	mov rbx, rax
 23509 000114EE 58                      	pop rax
 23510 000114EF C60004                  	mov byte [rax], T_closure
 23511 000114F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23512 000114F6 48C74009[03150100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aba
 23513 000114FE E98C000000              	jmp .L_lambda_simple_end_0aba
 23514                                  .L_lambda_simple_code_0aba:	; lambda-simple body
 23515 00011503 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23516 00011509 740B                    	je .L_lambda_simple_arity_check_ok_0aba
 23517 0001150B FF742410                	push qword [rsp + 8 * 2]
 23518 0001150F 6A01                    	push 1
 23519 00011511 E9676F0000              	jmp L_error_incorrect_arity_simple
 23520                                  .L_lambda_simple_arity_check_ok_0aba:
 23521 00011516 C8000000                	enter 0, 0
 23522                                  	; preparing a tail-call
 23523 0001151A 488B4520                	mov rax, PARAM(0)	; param x
 23524 0001151E 50                      	push rax
 23525 0001151F 488B4510                	mov rax, ENV
 23526 00011523 488B00                  	mov rax, qword [rax + 8 * 0]
 23527 00011526 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23528 00011529 50                      	push rax
 23529 0001152A 6A02                    	push 2	; arg count
 23530 0001152C 488B4510                	mov rax, ENV
 23531 00011530 488B4008                	mov rax, qword [rax + 8 * 1]
 23532 00011534 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23533 00011537 803804                  	cmp byte [rax], T_closure
 23534 0001153A 0F85DB6E0000            	jne L_error_non_closure
 23535 00011540 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23536 00011543 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23537 00011546 FF7500                  	push qword[rbp]
 23538 00011549 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23539 0001154C 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23540 00011550 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23541 00011554 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23542 00011558 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23543 0001155B 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23544 0001155E 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23545 00011563 4983C103                	add r9, 3 	 ;for getting to the params
 23546 00011567 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23547 0001156B 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23548                                  .L_tc_recycle_frame_loop_0f12:
 23549 0001156E 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23550 00011571 7410                    	je .L_tc_recycle_frame_done_0f12
 23551 00011573 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23552 00011576 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23553 00011579 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23554 0001157D 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23555 00011581 EBEB                    	jmp .L_tc_recycle_frame_loop_0f12
 23556                                  .L_tc_recycle_frame_done_0f12:
 23557 00011583 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23558 00011584 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23559 00011588 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23560 0001158B C9                      	leave
 23561 0001158C C21800                  	ret AND_KILL_FRAME(1)
 23562                                  .L_lambda_simple_end_0aba:	; new closure is in rax
 23563 0001158F 803804                  	cmp byte [rax], T_closure
 23564 00011592 0F85836E0000            	jne L_error_non_closure
 23565 00011598 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23566 0001159B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23567 0001159E FF7500                  	push qword[rbp]
 23568 000115A1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23569 000115A4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23570 000115A8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23571 000115AC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23572 000115B0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23573 000115B3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23574 000115B6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23575 000115BB 4983C103                	add r9, 3 	 ;for getting to the params
 23576 000115BF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23577 000115C3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23578                                  .L_tc_recycle_frame_loop_0f13:
 23579 000115C6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23580 000115C9 7410                    	je .L_tc_recycle_frame_done_0f13
 23581 000115CB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23582 000115CE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23583 000115D1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23584 000115D5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23585 000115D9 EBEB                    	jmp .L_tc_recycle_frame_loop_0f13
 23586                                  .L_tc_recycle_frame_done_0f13:
 23587 000115DB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23588 000115DC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23589 000115E0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23590 000115E3 C9                      	leave
 23591 000115E4 C22000                  	ret AND_KILL_FRAME(2)
 23592 000115E7 E955030000              	jmp .L_lambda_opt_end_0152	; new closure is in rax
 23593                                  .L_lambda_opt_arity_check_more_0152:
 23594 000115EC 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 23595 000115F1 49B9-                   	mov r9, sob_nil
 23595 000115F3 [0100000000000000] 
 23596 000115FB 4889E3                  	mov rbx, rsp 
 23597 000115FE 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 23598 00011602 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 23599 00011605 49C1E003                	shl r8, 3
 23600 00011609 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 23601 0001160C 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 23602                                  .L_lambda_opt_stack_shrink_loop_0152:
 23603 00011611 4983F801                	cmp r8, 1
 23604 00011615 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0152
 23605 00011617 BF11000000              	mov rdi, 1+8+8 ;for pair
 23606 0001161C E8A36E0000              	call malloc;to create the pair in the stack
 23607 00011621 C60021                  	mov byte [rax], T_pair ; to make it a pair
 23608 00011624 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 23609 00011627 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 23610 0001162B 4C894809                 	mov qword[rax+1+8],r9
 23611 0001162F 4989C1                  	mov r9, rax ;for the recursion 
 23612 00011632 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 23613 00011635 4883EB08                	sub rbx, 8 ;to get the next param to copy
 23614 00011639 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0152
 23615                                  .L_lambda_opt_stack_shrink_loop_exit_0152:
 23616 0001163B 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 23617 00011640 4883E902                	sub rcx, 2
 23618 00011644 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 23619 00011648 4801CC                  	add rsp, rcx ;shrinking the stack
 23620 0001164B 4889E0                  	mov rax, rsp
 23621 0001164E 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 23622 00011651 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 23623 00011655 49FFC8                  	dec r8 ;we start with param 0, not 1 
 23624 00011658 4883C018                	add rax, 3 * 8;now rax is param 0
 23625 0001165C 49C1E003                	shl r8, 3;convert to byte
 23626 00011660 4C01C0                  	add rax, r8;now rax is the top of the stack
 23627 00011663 4C8908                  	mov qword[rax], r9;puting the list at the top
 23628 00011666 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 23629 0001166A 4889E3                  	mov rbx, rsp 
 23630 0001166D 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 23631 00011670 41BA01000000            	mov r10, 1;r10 is the not opt params length
 23632 00011676 49FFCA                  	dec r10 
 23633 00011679 49C1E203                	shl r10, 3;to get bytes
 23634 0001167D 4883C318                	add rbx, 3*8;rbx is the first param
 23635 00011681 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 23636 00011684 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 23637 00011687 4C8900                  	mov qword[rax], r8
 23638 0001168A 4883E808                	sub rax, 8
 23639 0001168E 4883EB08                	sub rbx, 8
 23640 00011692 4889E0                  	mov rax, rsp
 23641 00011695 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 23642 00011698 48C744241002000000      	mov qword [rsp+2*8], 2
 23643 000116A1 488B5808                	mov rbx, qword[rax + 8 *1]
 23644 000116A5 48895C2408              	mov qword [rsp + 1*8] ,rbx
 23645 000116AA 488B18                  	mov rbx, qword[rax]
 23646 000116AD 48891C24                	mov qword [rsp], rbx
 23647 000116B1 C8000000                	enter 0, 0
 23648                                  	; preparing a tail-call
 23649                                  	; preparing a non-tail-call
 23650 000116B5 488B4528                	mov rax, PARAM(1)	; param xs
 23651 000116B9 50                      	push rax
 23652 000116BA 6A01                    	push 1	; arg count
 23653 000116BC 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 23654 000116C4 803805                  	cmp byte [rax], T_undefined
 23655 000116C7 0F84CA6C0000            	je L_error_fvar_undefined
 23656 000116CD 803804                  	cmp byte [rax], T_closure
 23657 000116D0 0F85456D0000            	jne L_error_non_closure
 23658 000116D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23659 000116D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23660 000116DC 483D[02000000]          	cmp rax, sob_boolean_false
 23661 000116E2 740F                    	je .L_if_else_0813
 23662 000116E4 48B8-                   	mov rax, L_constants + 0
 23662 000116E6 [0000000000000000] 
 23663 000116EE E9EE000000              	jmp .L_if_end_0813
 23664                                  .L_if_else_0813:
 23665                                  	; preparing a non-tail-call
 23666 000116F3 488B4528                	mov rax, PARAM(1)	; param xs
 23667 000116F7 50                      	push rax
 23668 000116F8 6A01                    	push 1	; arg count
 23669 000116FA 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 23670 00011702 803805                  	cmp byte [rax], T_undefined
 23671 00011705 0F848C6C0000            	je L_error_fvar_undefined
 23672 0001170B 803804                  	cmp byte [rax], T_closure
 23673 0001170E 0F85076D0000            	jne L_error_non_closure
 23674 00011714 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23675 00011717 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23676 0001171A 483D[02000000]          	cmp rax, sob_boolean_false
 23677 00011720 744C                    	je .L_if_else_0811
 23678                                  	; preparing a non-tail-call
 23679                                  	; preparing a non-tail-call
 23680 00011722 488B4528                	mov rax, PARAM(1)	; param xs
 23681 00011726 50                      	push rax
 23682 00011727 6A01                    	push 1	; arg count
 23683 00011729 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 23684 00011731 803805                  	cmp byte [rax], T_undefined
 23685 00011734 0F845D6C0000            	je L_error_fvar_undefined
 23686 0001173A 803804                  	cmp byte [rax], T_closure
 23687 0001173D 0F85D86C0000            	jne L_error_non_closure
 23688 00011743 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23689 00011746 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23690 00011749 50                      	push rax
 23691 0001174A 6A01                    	push 1	; arg count
 23692 0001174C 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 23693 00011754 803805                  	cmp byte [rax], T_undefined
 23694 00011757 0F843A6C0000            	je L_error_fvar_undefined
 23695 0001175D 803804                  	cmp byte [rax], T_closure
 23696 00011760 0F85B56C0000            	jne L_error_non_closure
 23697 00011766 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23698 00011769 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23699 0001176C EB0A                    	jmp .L_if_end_0811
 23700                                  .L_if_else_0811:
 23701 0001176E 48B8-                   	mov rax, L_constants + 2
 23701 00011770 [0200000000000000] 
 23702                                  .L_if_end_0811:
 23703 00011778 483D[02000000]          	cmp rax, sob_boolean_false
 23704 0001177E 7429                    	je .L_if_else_0812
 23705                                  	; preparing a non-tail-call
 23706 00011780 488B4528                	mov rax, PARAM(1)	; param xs
 23707 00011784 50                      	push rax
 23708 00011785 6A01                    	push 1	; arg count
 23709 00011787 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 23710 0001178F 803805                  	cmp byte [rax], T_undefined
 23711 00011792 0F84FF6B0000            	je L_error_fvar_undefined
 23712 00011798 803804                  	cmp byte [rax], T_closure
 23713 0001179B 0F857A6C0000            	jne L_error_non_closure
 23714 000117A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23715 000117A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23716 000117A7 EB38                    	jmp .L_if_end_0812
 23717                                  .L_if_else_0812:
 23718                                  	; preparing a non-tail-call
 23719 000117A9 48B8-                   	mov rax, L_constants + 2955
 23719 000117AB [8B0B000000000000] 
 23720 000117B3 50                      	push rax
 23721 000117B4 48B8-                   	mov rax, L_constants + 2946
 23721 000117B6 [820B000000000000] 
 23722 000117BE 50                      	push rax
 23723 000117BF 6A02                    	push 2	; arg count
 23724 000117C1 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 23725 000117C9 803805                  	cmp byte [rax], T_undefined
 23726 000117CC 0F84C56B0000            	je L_error_fvar_undefined
 23727 000117D2 803804                  	cmp byte [rax], T_closure
 23728 000117D5 0F85406C0000            	jne L_error_non_closure
 23729 000117DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 23730 000117DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23731                                  .L_if_end_0812:
 23732                                  .L_if_end_0813:
 23733 000117E1 50                      	push rax
 23734 000117E2 6A01                    	push 1	; arg count
 23735 000117E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23736 000117E9 E8D66C0000              	call malloc
 23737 000117EE 50                      	push rax
 23738 000117EF BF10000000              	mov rdi, 8 * 2	; new rib
 23739 000117F4 E8CB6C0000              	call malloc
 23740 000117F9 50                      	push rax
 23741 000117FA BF18000000              	mov rdi, 8 * 3	; extended env
 23742 000117FF E8C06C0000              	call malloc
 23743 00011804 488B7D10                	mov rdi, ENV
 23744 00011808 BE00000000              	mov rsi, 0
 23745 0001180D BA01000000              	mov rdx, 1
 23746                                  .L_lambda_simple_env_loop_0ab9:	; ext_env[i + 1] <-- env[i]
 23747 00011812 4883FE02                	cmp rsi, 2
 23748 00011816 7410                    	je .L_lambda_simple_env_end_0ab9
 23749 00011818 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23750 0001181C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23751 00011820 48FFC6                  	inc rsi
 23752 00011823 48FFC2                  	inc rdx
 23753 00011826 EBEA                    	jmp .L_lambda_simple_env_loop_0ab9
 23754                                  .L_lambda_simple_env_end_0ab9:
 23755 00011828 5B                      	pop rbx
 23756 00011829 BE00000000              	mov rsi, 0
 23757                                  .L_lambda_simple_params_loop_0ab9:	; copy params
 23758 0001182E 4883FE02                	cmp rsi, 2
 23759 00011832 740E                    	je .L_lambda_simple_params_end_0ab9
 23760 00011834 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23761 00011839 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23762 0001183D 48FFC6                  	inc rsi
 23763 00011840 EBEC                    	jmp .L_lambda_simple_params_loop_0ab9
 23764                                  .L_lambda_simple_params_end_0ab9:
 23765 00011842 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23766 00011845 4889C3                  	mov rbx, rax
 23767 00011848 58                      	pop rax
 23768 00011849 C60004                  	mov byte [rax], T_closure
 23769 0001184C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23770 00011850 48C74009[5D180100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ab9
 23771 00011858 E98C000000              	jmp .L_lambda_simple_end_0ab9
 23772                                  .L_lambda_simple_code_0ab9:	; lambda-simple body
 23773 0001185D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23774 00011863 740B                    	je .L_lambda_simple_arity_check_ok_0ab9
 23775 00011865 FF742410                	push qword [rsp + 8 * 2]
 23776 00011869 6A01                    	push 1
 23777 0001186B E90D6C0000              	jmp L_error_incorrect_arity_simple
 23778                                  .L_lambda_simple_arity_check_ok_0ab9:
 23779 00011870 C8000000                	enter 0, 0
 23780                                  	; preparing a tail-call
 23781 00011874 488B4520                	mov rax, PARAM(0)	; param x
 23782 00011878 50                      	push rax
 23783 00011879 488B4510                	mov rax, ENV
 23784 0001187D 488B00                  	mov rax, qword [rax + 8 * 0]
 23785 00011880 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 23786 00011883 50                      	push rax
 23787 00011884 6A02                    	push 2	; arg count
 23788 00011886 488B4510                	mov rax, ENV
 23789 0001188A 488B4008                	mov rax, qword [rax + 8 * 1]
 23790 0001188E 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-vector
 23791 00011891 803804                  	cmp byte [rax], T_closure
 23792 00011894 0F85816B0000            	jne L_error_non_closure
 23793 0001189A FF7001                  	push SOB_CLOSURE_ENV(rax)
 23794 0001189D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23795 000118A0 FF7500                  	push qword[rbp]
 23796 000118A3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23797 000118A6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23798 000118AA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23799 000118AE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23800 000118B2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23801 000118B5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23802 000118B8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23803 000118BD 4983C103                	add r9, 3 	 ;for getting to the params
 23804 000118C1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23805 000118C5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23806                                  .L_tc_recycle_frame_loop_0f10:
 23807 000118C8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23808 000118CB 7410                    	je .L_tc_recycle_frame_done_0f10
 23809 000118CD 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23810 000118D0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23811 000118D3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23812 000118D7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23813 000118DB EBEB                    	jmp .L_tc_recycle_frame_loop_0f10
 23814                                  .L_tc_recycle_frame_done_0f10:
 23815 000118DD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23816 000118DE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23817 000118E2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23818 000118E5 C9                      	leave
 23819 000118E6 C21800                  	ret AND_KILL_FRAME(1)
 23820                                  .L_lambda_simple_end_0ab9:	; new closure is in rax
 23821 000118E9 803804                  	cmp byte [rax], T_closure
 23822 000118EC 0F85296B0000            	jne L_error_non_closure
 23823 000118F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23824 000118F5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 23825 000118F8 FF7500                  	push qword[rbp]
 23826 000118FB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 23827 000118FE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 23828 00011902 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 23829 00011906 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 23830 0001190A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 23831 0001190D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 23832 00011910 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 23833 00011915 4983C103                	add r9, 3 	 ;for getting to the params
 23834 00011919 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 23835 0001191D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 23836                                  .L_tc_recycle_frame_loop_0f11:
 23837 00011920 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 23838 00011923 7410                    	je .L_tc_recycle_frame_done_0f11
 23839 00011925 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 23840 00011928 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 23841 0001192B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 23842 0001192F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 23843 00011933 EBEB                    	jmp .L_tc_recycle_frame_loop_0f11
 23844                                  .L_tc_recycle_frame_done_0f11:
 23845 00011935 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 23846 00011936 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 23847 0001193A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 23848 0001193D C9                      	leave
 23849 0001193E C22000                  	ret AND_KILL_FRAME(2)
 23850                                  .L_lambda_opt_end_0152:	; new closure is in rax
 23851 00011941 C9                      	leave
 23852 00011942 C21800                  	ret AND_KILL_FRAME(1)
 23853                                  .L_lambda_simple_end_0ab8:	; new closure is in rax
 23854 00011945 803804                  	cmp byte [rax], T_closure
 23855 00011948 0F85CD6A0000            	jne L_error_non_closure
 23856 0001194E FF7001                  	push SOB_CLOSURE_ENV(rax)
 23857 00011951 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23858 00011954 48890425[EF150000]      	mov qword [free_var_101], rax
 23859 0001195C 48B8-                   	mov rax, sob_void
 23859 0001195E [0000000000000000] 
 23860                                  
 23861 00011966 4889C7                  	mov rdi, rax
 23862 00011969 E8AB6D0000              	call print_sexpr_if_not_void
 23863                                  	; preparing a non-tail-call
 23864 0001196E 488B0425[CD150000]      	mov rax, qword [free_var_99]	; free var make-string
 23865 00011976 803805                  	cmp byte [rax], T_undefined
 23866 00011979 0F84186A0000            	je L_error_fvar_undefined
 23867 0001197F 50                      	push rax
 23868 00011980 6A01                    	push 1	; arg count
 23869 00011982 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23870 00011987 E8386B0000              	call malloc
 23871 0001198C 50                      	push rax
 23872 0001198D BF00000000              	mov rdi, 8 * 0	; new rib
 23873 00011992 E82D6B0000              	call malloc
 23874 00011997 50                      	push rax
 23875 00011998 BF08000000              	mov rdi, 8 * 1	; extended env
 23876 0001199D E8226B0000              	call malloc
 23877 000119A2 488B7D10                	mov rdi, ENV
 23878 000119A6 BE00000000              	mov rsi, 0
 23879 000119AB BA01000000              	mov rdx, 1
 23880                                  .L_lambda_simple_env_loop_0abb:	; ext_env[i + 1] <-- env[i]
 23881 000119B0 4883FE00                	cmp rsi, 0
 23882 000119B4 7410                    	je .L_lambda_simple_env_end_0abb
 23883 000119B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23884 000119BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23885 000119BE 48FFC6                  	inc rsi
 23886 000119C1 48FFC2                  	inc rdx
 23887 000119C4 EBEA                    	jmp .L_lambda_simple_env_loop_0abb
 23888                                  .L_lambda_simple_env_end_0abb:
 23889 000119C6 5B                      	pop rbx
 23890 000119C7 BE00000000              	mov rsi, 0
 23891                                  .L_lambda_simple_params_loop_0abb:	; copy params
 23892 000119CC 4883FE00                	cmp rsi, 0
 23893 000119D0 740E                    	je .L_lambda_simple_params_end_0abb
 23894 000119D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23895 000119D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23896 000119DB 48FFC6                  	inc rsi
 23897 000119DE EBEC                    	jmp .L_lambda_simple_params_loop_0abb
 23898                                  .L_lambda_simple_params_end_0abb:
 23899 000119E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23900 000119E3 4889C3                  	mov rbx, rax
 23901 000119E6 58                      	pop rax
 23902 000119E7 C60004                  	mov byte [rax], T_closure
 23903 000119EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23904 000119EE 48C74009[FB190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0abb
 23905 000119F6 E9D1060000              	jmp .L_lambda_simple_end_0abb
 23906                                  .L_lambda_simple_code_0abb:	; lambda-simple body
 23907 000119FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23908 00011A01 740B                    	je .L_lambda_simple_arity_check_ok_0abb
 23909 00011A03 FF742410                	push qword [rsp + 8 * 2]
 23910 00011A07 6A01                    	push 1
 23911 00011A09 E96F6A0000              	jmp L_error_incorrect_arity_simple
 23912                                  .L_lambda_simple_arity_check_ok_0abb:
 23913 00011A0E C8000000                	enter 0, 0
 23914 00011A12 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23915 00011A17 E8A86A0000              	call malloc
 23916 00011A1C 50                      	push rax
 23917 00011A1D BF08000000              	mov rdi, 8 * 1	; new rib
 23918 00011A22 E89D6A0000              	call malloc
 23919 00011A27 50                      	push rax
 23920 00011A28 BF10000000              	mov rdi, 8 * 2	; extended env
 23921 00011A2D E8926A0000              	call malloc
 23922 00011A32 488B7D10                	mov rdi, ENV
 23923 00011A36 BE00000000              	mov rsi, 0
 23924 00011A3B BA01000000              	mov rdx, 1
 23925                                  .L_lambda_opt_env_loop_0153:	; ext_env[i + 1] <-- env[i]
 23926 00011A40 4883FE01                	cmp rsi, 1
 23927 00011A44 7410                    	je .L_lambda_opt_env_end_0153
 23928 00011A46 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23929 00011A4A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23930 00011A4E 48FFC6                  	inc rsi
 23931 00011A51 48FFC2                  	inc rdx
 23932 00011A54 EBEA                    	jmp .L_lambda_opt_env_loop_0153
 23933                                  .L_lambda_opt_env_end_0153:
 23934 00011A56 5B                      	pop rbx
 23935 00011A57 BE00000000              	mov rsi, 0
 23936                                  .L_lambda_opt_params_loop_0153:	; copy params
 23937 00011A5C 4883FE01                	cmp rsi, 1
 23938 00011A60 740E                    	je .L_lambda_opt_params_end_0153
 23939 00011A62 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23940 00011A67 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23941 00011A6B 48FFC6                  	inc rsi
 23942 00011A6E EBEC                    	jmp .L_lambda_opt_params_loop_0153
 23943                                  .L_lambda_opt_params_end_0153:
 23944 00011A70 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 23945 00011A73 4889C3                  	mov rbx, rax
 23946 00011A76 58                      	pop rax
 23947 00011A77 C60004                  	mov byte [rax], T_closure
 23948 00011A7A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23949 00011A7E 48C74009[8B1A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0153
 23950 00011A86 E93D060000              	jmp .L_lambda_opt_end_0153
 23951                                  .L_lambda_opt_code_0153:	; lambda-opt body
 23952 00011A8B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23953 00011A91 7411                    	je .L_lambda_opt_arity_check_exact_0153
 23954 00011A93 0F8FDA020000            	jg .L_lambda_opt_arity_check_more_0153
 23955 00011A99 FF742410                	push qword [rsp + 8 * 2]
 23956 00011A9D 6A01                    	push 1
 23957 00011A9F E9ED690000              	jmp L_error_incorrect_arity_opt
 23958                                  .L_lambda_opt_arity_check_exact_0153:
 23959 00011AA4 4883EC08                	sub rsp, 8
 23960 00011AA8 488B442408              	mov rax, qword[rsp + 8 *1]
 23961 00011AAD 48890424                	mov qword[rsp], rax  
 23962 00011AB1 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 23963 00011AB6 4889442408              	mov qword[rsp + 8 * 1], rax
 23964 00011ABB B802000000              	mov rax, 2
 23965 00011AC0 4889442410              	mov qword[rsp + 8 *2], rax
 23966 00011AC5 488B442420              	mov rax, qword[rsp + 8 * (4 + 0)]
 23967 00011ACA 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 23968 00011ACF 48B8-                   	mov rax, sob_nil
 23968 00011AD1 [0100000000000000] 
 23969 00011AD9 4889442420              	mov qword[rsp + 8 * (3 + 1)], rax
 23970 00011ADE C8000000                	enter 0, 0
 23971                                  	; preparing a tail-call
 23972                                  	; preparing a non-tail-call
 23973 00011AE2 488B4528                	mov rax, PARAM(1)	; param chs
 23974 00011AE6 50                      	push rax
 23975 00011AE7 6A01                    	push 1	; arg count
 23976 00011AE9 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 23977 00011AF1 803805                  	cmp byte [rax], T_undefined
 23978 00011AF4 0F849D680000            	je L_error_fvar_undefined
 23979 00011AFA 803804                  	cmp byte [rax], T_closure
 23980 00011AFD 0F8518690000            	jne L_error_non_closure
 23981 00011B03 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23982 00011B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23983 00011B09 483D[02000000]          	cmp rax, sob_boolean_false
 23984 00011B0F 740F                    	je .L_if_else_081c
 23985 00011B11 48B8-                   	mov rax, L_constants + 4
 23985 00011B13 [0400000000000000] 
 23986 00011B1B E9EE000000              	jmp .L_if_end_081c
 23987                                  .L_if_else_081c:
 23988                                  	; preparing a non-tail-call
 23989 00011B20 488B4528                	mov rax, PARAM(1)	; param chs
 23990 00011B24 50                      	push rax
 23991 00011B25 6A01                    	push 1	; arg count
 23992 00011B27 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 23993 00011B2F 803805                  	cmp byte [rax], T_undefined
 23994 00011B32 0F845F680000            	je L_error_fvar_undefined
 23995 00011B38 803804                  	cmp byte [rax], T_closure
 23996 00011B3B 0F85DA680000            	jne L_error_non_closure
 23997 00011B41 FF7001                  	push SOB_CLOSURE_ENV(rax)
 23998 00011B44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23999 00011B47 483D[02000000]          	cmp rax, sob_boolean_false
 24000 00011B4D 744C                    	je .L_if_else_081a
 24001                                  	; preparing a non-tail-call
 24002                                  	; preparing a non-tail-call
 24003 00011B4F 488B4528                	mov rax, PARAM(1)	; param chs
 24004 00011B53 50                      	push rax
 24005 00011B54 6A01                    	push 1	; arg count
 24006 00011B56 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 24007 00011B5E 803805                  	cmp byte [rax], T_undefined
 24008 00011B61 0F8430680000            	je L_error_fvar_undefined
 24009 00011B67 803804                  	cmp byte [rax], T_closure
 24010 00011B6A 0F85AB680000            	jne L_error_non_closure
 24011 00011B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24012 00011B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24013 00011B76 50                      	push rax
 24014 00011B77 6A01                    	push 1	; arg count
 24015 00011B79 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 24016 00011B81 803805                  	cmp byte [rax], T_undefined
 24017 00011B84 0F840D680000            	je L_error_fvar_undefined
 24018 00011B8A 803804                  	cmp byte [rax], T_closure
 24019 00011B8D 0F8588680000            	jne L_error_non_closure
 24020 00011B93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24021 00011B96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24022 00011B99 EB0A                    	jmp .L_if_end_081a
 24023                                  .L_if_else_081a:
 24024 00011B9B 48B8-                   	mov rax, L_constants + 2
 24024 00011B9D [0200000000000000] 
 24025                                  .L_if_end_081a:
 24026 00011BA5 483D[02000000]          	cmp rax, sob_boolean_false
 24027 00011BAB 7429                    	je .L_if_else_081b
 24028                                  	; preparing a non-tail-call
 24029 00011BAD 488B4528                	mov rax, PARAM(1)	; param chs
 24030 00011BB1 50                      	push rax
 24031 00011BB2 6A01                    	push 1	; arg count
 24032 00011BB4 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 24033 00011BBC 803805                  	cmp byte [rax], T_undefined
 24034 00011BBF 0F84D2670000            	je L_error_fvar_undefined
 24035 00011BC5 803804                  	cmp byte [rax], T_closure
 24036 00011BC8 0F854D680000            	jne L_error_non_closure
 24037 00011BCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 24038 00011BD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24039 00011BD4 EB38                    	jmp .L_if_end_081b
 24040                                  .L_if_else_081b:
 24041                                  	; preparing a non-tail-call
 24042 00011BD6 48B8-                   	mov rax, L_constants + 3016
 24042 00011BD8 [C80B000000000000] 
 24043 00011BE0 50                      	push rax
 24044 00011BE1 48B8-                   	mov rax, L_constants + 3007
 24044 00011BE3 [BF0B000000000000] 
 24045 00011BEB 50                      	push rax
 24046 00011BEC 6A02                    	push 2	; arg count
 24047 00011BEE 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 24048 00011BF6 803805                  	cmp byte [rax], T_undefined
 24049 00011BF9 0F8498670000            	je L_error_fvar_undefined
 24050 00011BFF 803804                  	cmp byte [rax], T_closure
 24051 00011C02 0F8513680000            	jne L_error_non_closure
 24052 00011C08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24053 00011C0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 24054                                  .L_if_end_081b:
 24055                                  .L_if_end_081c:
 24056 00011C0E 50                      	push rax
 24057 00011C0F 6A01                    	push 1	; arg count
 24058 00011C11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24059 00011C16 E8A9680000              	call malloc
 24060 00011C1B 50                      	push rax
 24061 00011C1C BF10000000              	mov rdi, 8 * 2	; new rib
 24062 00011C21 E89E680000              	call malloc
 24063 00011C26 50                      	push rax
 24064 00011C27 BF18000000              	mov rdi, 8 * 3	; extended env
 24065 00011C2C E893680000              	call malloc
 24066 00011C31 488B7D10                	mov rdi, ENV
 24067 00011C35 BE00000000              	mov rsi, 0
 24068 00011C3A BA01000000              	mov rdx, 1
 24069                                  .L_lambda_simple_env_loop_0abd:	; ext_env[i + 1] <-- env[i]
 24070 00011C3F 4883FE02                	cmp rsi, 2
 24071 00011C43 7410                    	je .L_lambda_simple_env_end_0abd
 24072 00011C45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24073 00011C49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24074 00011C4D 48FFC6                  	inc rsi
 24075 00011C50 48FFC2                  	inc rdx
 24076 00011C53 EBEA                    	jmp .L_lambda_simple_env_loop_0abd
 24077                                  .L_lambda_simple_env_end_0abd:
 24078 00011C55 5B                      	pop rbx
 24079 00011C56 BE00000000              	mov rsi, 0
 24080                                  .L_lambda_simple_params_loop_0abd:	; copy params
 24081 00011C5B 4883FE02                	cmp rsi, 2
 24082 00011C5F 740E                    	je .L_lambda_simple_params_end_0abd
 24083 00011C61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24084 00011C66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24085 00011C6A 48FFC6                  	inc rsi
 24086 00011C6D EBEC                    	jmp .L_lambda_simple_params_loop_0abd
 24087                                  .L_lambda_simple_params_end_0abd:
 24088 00011C6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24089 00011C72 4889C3                  	mov rbx, rax
 24090 00011C75 58                      	pop rax
 24091 00011C76 C60004                  	mov byte [rax], T_closure
 24092 00011C79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24093 00011C7D 48C74009[8A1C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0abd
 24094 00011C85 E98C000000              	jmp .L_lambda_simple_end_0abd
 24095                                  .L_lambda_simple_code_0abd:	; lambda-simple body
 24096 00011C8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24097 00011C90 740B                    	je .L_lambda_simple_arity_check_ok_0abd
 24098 00011C92 FF742410                	push qword [rsp + 8 * 2]
 24099 00011C96 6A01                    	push 1
 24100 00011C98 E9E0670000              	jmp L_error_incorrect_arity_simple
 24101                                  .L_lambda_simple_arity_check_ok_0abd:
 24102 00011C9D C8000000                	enter 0, 0
 24103                                  	; preparing a tail-call
 24104 00011CA1 488B4520                	mov rax, PARAM(0)	; param ch
 24105 00011CA5 50                      	push rax
 24106 00011CA6 488B4510                	mov rax, ENV
 24107 00011CAA 488B00                  	mov rax, qword [rax + 8 * 0]
 24108 00011CAD 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24109 00011CB0 50                      	push rax
 24110 00011CB1 6A02                    	push 2	; arg count
 24111 00011CB3 488B4510                	mov rax, ENV
 24112 00011CB7 488B4008                	mov rax, qword [rax + 8 * 1]
 24113 00011CBB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24114 00011CBE 803804                  	cmp byte [rax], T_closure
 24115 00011CC1 0F8554670000            	jne L_error_non_closure
 24116 00011CC7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24117 00011CCA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24118 00011CCD FF7500                  	push qword[rbp]
 24119 00011CD0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24120 00011CD3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24121 00011CD7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24122 00011CDB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24123 00011CDF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24124 00011CE2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24125 00011CE5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24126 00011CEA 4983C103                	add r9, 3 	 ;for getting to the params
 24127 00011CEE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24128 00011CF2 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24129                                  .L_tc_recycle_frame_loop_0f16:
 24130 00011CF5 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24131 00011CF8 7410                    	je .L_tc_recycle_frame_done_0f16
 24132 00011CFA 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24133 00011CFD 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24134 00011D00 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24135 00011D04 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24136 00011D08 EBEB                    	jmp .L_tc_recycle_frame_loop_0f16
 24137                                  .L_tc_recycle_frame_done_0f16:
 24138 00011D0A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24139 00011D0B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24140 00011D0F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24141 00011D12 C9                      	leave
 24142 00011D13 C21800                  	ret AND_KILL_FRAME(1)
 24143                                  .L_lambda_simple_end_0abd:	; new closure is in rax
 24144 00011D16 803804                  	cmp byte [rax], T_closure
 24145 00011D19 0F85FC660000            	jne L_error_non_closure
 24146 00011D1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24147 00011D22 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24148 00011D25 FF7500                  	push qword[rbp]
 24149 00011D28 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24150 00011D2B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24151 00011D2F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24152 00011D33 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24153 00011D37 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24154 00011D3A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24155 00011D3D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24156 00011D42 4983C103                	add r9, 3 	 ;for getting to the params
 24157 00011D46 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24158 00011D4A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24159                                  .L_tc_recycle_frame_loop_0f17:
 24160 00011D4D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24161 00011D50 7410                    	je .L_tc_recycle_frame_done_0f17
 24162 00011D52 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24163 00011D55 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24164 00011D58 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24165 00011D5C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24166 00011D60 EBEB                    	jmp .L_tc_recycle_frame_loop_0f17
 24167                                  .L_tc_recycle_frame_done_0f17:
 24168 00011D62 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24169 00011D63 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24170 00011D67 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24171 00011D6A C9                      	leave
 24172 00011D6B C22000                  	ret AND_KILL_FRAME(2)
 24173 00011D6E E955030000              	jmp .L_lambda_opt_end_0153	; new closure is in rax
 24174                                  .L_lambda_opt_arity_check_more_0153:
 24175 00011D73 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 24176 00011D78 49B9-                   	mov r9, sob_nil
 24176 00011D7A [0100000000000000] 
 24177 00011D82 4889E3                  	mov rbx, rsp 
 24178 00011D85 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 24179 00011D89 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 24180 00011D8C 49C1E003                	shl r8, 3
 24181 00011D90 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 24182 00011D93 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 24183                                  .L_lambda_opt_stack_shrink_loop_0153:
 24184 00011D98 4983F801                	cmp r8, 1
 24185 00011D9C 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0153
 24186 00011D9E BF11000000              	mov rdi, 1+8+8 ;for pair
 24187 00011DA3 E81C670000              	call malloc;to create the pair in the stack
 24188 00011DA8 C60021                  	mov byte [rax], T_pair ; to make it a pair
 24189 00011DAB 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 24190 00011DAE 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 24191 00011DB2 4C894809                 	mov qword[rax+1+8],r9
 24192 00011DB6 4989C1                  	mov r9, rax ;for the recursion 
 24193 00011DB9 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 24194 00011DBC 4883EB08                	sub rbx, 8 ;to get the next param to copy
 24195 00011DC0 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0153
 24196                                  .L_lambda_opt_stack_shrink_loop_exit_0153:
 24197 00011DC2 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 24198 00011DC7 4883E902                	sub rcx, 2
 24199 00011DCB 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 24200 00011DCF 4801CC                  	add rsp, rcx ;shrinking the stack
 24201 00011DD2 4889E0                  	mov rax, rsp
 24202 00011DD5 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 24203 00011DD8 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 24204 00011DDC 49FFC8                  	dec r8 ;we start with param 0, not 1 
 24205 00011DDF 4883C018                	add rax, 3 * 8;now rax is param 0
 24206 00011DE3 49C1E003                	shl r8, 3;convert to byte
 24207 00011DE7 4C01C0                  	add rax, r8;now rax is the top of the stack
 24208 00011DEA 4C8908                  	mov qword[rax], r9;puting the list at the top
 24209 00011DED 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 24210 00011DF1 4889E3                  	mov rbx, rsp 
 24211 00011DF4 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 24212 00011DF7 41BA01000000            	mov r10, 1;r10 is the not opt params length
 24213 00011DFD 49FFCA                  	dec r10 
 24214 00011E00 49C1E203                	shl r10, 3;to get bytes
 24215 00011E04 4883C318                	add rbx, 3*8;rbx is the first param
 24216 00011E08 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 24217 00011E0B 4C8B03                  	mov r8, qword [rbx] 	;r8 is holding the param to copy
 24218 00011E0E 4C8900                  	mov qword[rax], r8
 24219 00011E11 4883E808                	sub rax, 8
 24220 00011E15 4883EB08                	sub rbx, 8
 24221 00011E19 4889E0                  	mov rax, rsp
 24222 00011E1C 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 24223 00011E1F 48C744241002000000      	mov qword [rsp+2*8], 2
 24224 00011E28 488B5808                	mov rbx, qword[rax + 8 *1]
 24225 00011E2C 48895C2408              	mov qword [rsp + 1*8] ,rbx
 24226 00011E31 488B18                  	mov rbx, qword[rax]
 24227 00011E34 48891C24                	mov qword [rsp], rbx
 24228 00011E38 C8000000                	enter 0, 0
 24229                                  	; preparing a tail-call
 24230                                  	; preparing a non-tail-call
 24231 00011E3C 488B4528                	mov rax, PARAM(1)	; param chs
 24232 00011E40 50                      	push rax
 24233 00011E41 6A01                    	push 1	; arg count
 24234 00011E43 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 24235 00011E4B 803805                  	cmp byte [rax], T_undefined
 24236 00011E4E 0F8443650000            	je L_error_fvar_undefined
 24237 00011E54 803804                  	cmp byte [rax], T_closure
 24238 00011E57 0F85BE650000            	jne L_error_non_closure
 24239 00011E5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 24240 00011E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24241 00011E63 483D[02000000]          	cmp rax, sob_boolean_false
 24242 00011E69 740F                    	je .L_if_else_0819
 24243 00011E6B 48B8-                   	mov rax, L_constants + 4
 24243 00011E6D [0400000000000000] 
 24244 00011E75 E9EE000000              	jmp .L_if_end_0819
 24245                                  .L_if_else_0819:
 24246                                  	; preparing a non-tail-call
 24247 00011E7A 488B4528                	mov rax, PARAM(1)	; param chs
 24248 00011E7E 50                      	push rax
 24249 00011E7F 6A01                    	push 1	; arg count
 24250 00011E81 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 24251 00011E89 803805                  	cmp byte [rax], T_undefined
 24252 00011E8C 0F8405650000            	je L_error_fvar_undefined
 24253 00011E92 803804                  	cmp byte [rax], T_closure
 24254 00011E95 0F8580650000            	jne L_error_non_closure
 24255 00011E9B FF7001                  	push SOB_CLOSURE_ENV(rax)
 24256 00011E9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 24257 00011EA1 483D[02000000]          	cmp rax, sob_boolean_false
 24258 00011EA7 744C                    	je .L_if_else_0817
 24259                                  	; preparing a non-tail-call
 24260                                  	; preparing a non-tail-call
 24261 00011EA9 488B4528                	mov rax, PARAM(1)	; param chs
 24262 00011EAD 50                      	push rax
 24263 00011EAE 6A01                    	push 1	; arg count
 24264 00011EB0 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 24265 00011EB8 803805                  	cmp byte [rax], T_undefined
 24266 00011EBB 0F84D6640000            	je L_error_fvar_undefined
 24267 00011EC1 803804                  	cmp byte [rax], T_closure
 24268 00011EC4 0F8551650000            	jne L_error_non_closure
 24269 00011ECA FF7001                  	push SOB_CLOSURE_ENV(rax)
 24270 00011ECD FF5009                  	call SOB_CLOSURE_CODE(rax)
 24271 00011ED0 50                      	push rax
 24272 00011ED1 6A01                    	push 1	; arg count
 24273 00011ED3 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 24274 00011EDB 803805                  	cmp byte [rax], T_undefined
 24275 00011EDE 0F84B3640000            	je L_error_fvar_undefined
 24276 00011EE4 803804                  	cmp byte [rax], T_closure
 24277 00011EE7 0F852E650000            	jne L_error_non_closure
 24278 00011EED FF7001                  	push SOB_CLOSURE_ENV(rax)
 24279 00011EF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24280 00011EF3 EB0A                    	jmp .L_if_end_0817
 24281                                  .L_if_else_0817:
 24282 00011EF5 48B8-                   	mov rax, L_constants + 2
 24282 00011EF7 [0200000000000000] 
 24283                                  .L_if_end_0817:
 24284 00011EFF 483D[02000000]          	cmp rax, sob_boolean_false
 24285 00011F05 7429                    	je .L_if_else_0818
 24286                                  	; preparing a non-tail-call
 24287 00011F07 488B4528                	mov rax, PARAM(1)	; param chs
 24288 00011F0B 50                      	push rax
 24289 00011F0C 6A01                    	push 1	; arg count
 24290 00011F0E 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 24291 00011F16 803805                  	cmp byte [rax], T_undefined
 24292 00011F19 0F8478640000            	je L_error_fvar_undefined
 24293 00011F1F 803804                  	cmp byte [rax], T_closure
 24294 00011F22 0F85F3640000            	jne L_error_non_closure
 24295 00011F28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24296 00011F2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 24297 00011F2E EB38                    	jmp .L_if_end_0818
 24298                                  .L_if_else_0818:
 24299                                  	; preparing a non-tail-call
 24300 00011F30 48B8-                   	mov rax, L_constants + 3016
 24300 00011F32 [C80B000000000000] 
 24301 00011F3A 50                      	push rax
 24302 00011F3B 48B8-                   	mov rax, L_constants + 3007
 24302 00011F3D [BF0B000000000000] 
 24303 00011F45 50                      	push rax
 24304 00011F46 6A02                    	push 2	; arg count
 24305 00011F48 488B0425[AC140000]      	mov rax, qword [free_var_82]	; free var error
 24306 00011F50 803805                  	cmp byte [rax], T_undefined
 24307 00011F53 0F843E640000            	je L_error_fvar_undefined
 24308 00011F59 803804                  	cmp byte [rax], T_closure
 24309 00011F5C 0F85B9640000            	jne L_error_non_closure
 24310 00011F62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24311 00011F65 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24312                                  .L_if_end_0818:
 24313                                  .L_if_end_0819:
 24314 00011F68 50                      	push rax
 24315 00011F69 6A01                    	push 1	; arg count
 24316 00011F6B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24317 00011F70 E84F650000              	call malloc
 24318 00011F75 50                      	push rax
 24319 00011F76 BF10000000              	mov rdi, 8 * 2	; new rib
 24320 00011F7B E844650000              	call malloc
 24321 00011F80 50                      	push rax
 24322 00011F81 BF18000000              	mov rdi, 8 * 3	; extended env
 24323 00011F86 E839650000              	call malloc
 24324 00011F8B 488B7D10                	mov rdi, ENV
 24325 00011F8F BE00000000              	mov rsi, 0
 24326 00011F94 BA01000000              	mov rdx, 1
 24327                                  .L_lambda_simple_env_loop_0abc:	; ext_env[i + 1] <-- env[i]
 24328 00011F99 4883FE02                	cmp rsi, 2
 24329 00011F9D 7410                    	je .L_lambda_simple_env_end_0abc
 24330 00011F9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24331 00011FA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24332 00011FA7 48FFC6                  	inc rsi
 24333 00011FAA 48FFC2                  	inc rdx
 24334 00011FAD EBEA                    	jmp .L_lambda_simple_env_loop_0abc
 24335                                  .L_lambda_simple_env_end_0abc:
 24336 00011FAF 5B                      	pop rbx
 24337 00011FB0 BE00000000              	mov rsi, 0
 24338                                  .L_lambda_simple_params_loop_0abc:	; copy params
 24339 00011FB5 4883FE02                	cmp rsi, 2
 24340 00011FB9 740E                    	je .L_lambda_simple_params_end_0abc
 24341 00011FBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24342 00011FC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24343 00011FC4 48FFC6                  	inc rsi
 24344 00011FC7 EBEC                    	jmp .L_lambda_simple_params_loop_0abc
 24345                                  .L_lambda_simple_params_end_0abc:
 24346 00011FC9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24347 00011FCC 4889C3                  	mov rbx, rax
 24348 00011FCF 58                      	pop rax
 24349 00011FD0 C60004                  	mov byte [rax], T_closure
 24350 00011FD3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24351 00011FD7 48C74009[E41F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0abc
 24352 00011FDF E98C000000              	jmp .L_lambda_simple_end_0abc
 24353                                  .L_lambda_simple_code_0abc:	; lambda-simple body
 24354 00011FE4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24355 00011FEA 740B                    	je .L_lambda_simple_arity_check_ok_0abc
 24356 00011FEC FF742410                	push qword [rsp + 8 * 2]
 24357 00011FF0 6A01                    	push 1
 24358 00011FF2 E986640000              	jmp L_error_incorrect_arity_simple
 24359                                  .L_lambda_simple_arity_check_ok_0abc:
 24360 00011FF7 C8000000                	enter 0, 0
 24361                                  	; preparing a tail-call
 24362 00011FFB 488B4520                	mov rax, PARAM(0)	; param ch
 24363 00011FFF 50                      	push rax
 24364 00012000 488B4510                	mov rax, ENV
 24365 00012004 488B00                  	mov rax, qword [rax + 8 * 0]
 24366 00012007 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 24367 0001200A 50                      	push rax
 24368 0001200B 6A02                    	push 2	; arg count
 24369 0001200D 488B4510                	mov rax, ENV
 24370 00012011 488B4008                	mov rax, qword [rax + 8 * 1]
 24371 00012015 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var asm-make-string
 24372 00012018 803804                  	cmp byte [rax], T_closure
 24373 0001201B 0F85FA630000            	jne L_error_non_closure
 24374 00012021 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24375 00012024 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24376 00012027 FF7500                  	push qword[rbp]
 24377 0001202A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24378 0001202D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24379 00012031 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24380 00012035 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24381 00012039 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24382 0001203C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24383 0001203F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24384 00012044 4983C103                	add r9, 3 	 ;for getting to the params
 24385 00012048 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24386 0001204C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24387                                  .L_tc_recycle_frame_loop_0f14:
 24388 0001204F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24389 00012052 7410                    	je .L_tc_recycle_frame_done_0f14
 24390 00012054 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24391 00012057 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24392 0001205A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24393 0001205E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24394 00012062 EBEB                    	jmp .L_tc_recycle_frame_loop_0f14
 24395                                  .L_tc_recycle_frame_done_0f14:
 24396 00012064 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24397 00012065 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24398 00012069 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24399 0001206C C9                      	leave
 24400 0001206D C21800                  	ret AND_KILL_FRAME(1)
 24401                                  .L_lambda_simple_end_0abc:	; new closure is in rax
 24402 00012070 803804                  	cmp byte [rax], T_closure
 24403 00012073 0F85A2630000            	jne L_error_non_closure
 24404 00012079 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24405 0001207C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24406 0001207F FF7500                  	push qword[rbp]
 24407 00012082 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24408 00012085 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24409 00012089 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24410 0001208D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24411 00012091 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24412 00012094 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24413 00012097 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24414 0001209C 4983C103                	add r9, 3 	 ;for getting to the params
 24415 000120A0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24416 000120A4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24417                                  .L_tc_recycle_frame_loop_0f15:
 24418 000120A7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24419 000120AA 7410                    	je .L_tc_recycle_frame_done_0f15
 24420 000120AC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24421 000120AF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24422 000120B2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24423 000120B6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24424 000120BA EBEB                    	jmp .L_tc_recycle_frame_loop_0f15
 24425                                  .L_tc_recycle_frame_done_0f15:
 24426 000120BC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24427 000120BD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24428 000120C1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24429 000120C4 C9                      	leave
 24430 000120C5 C22000                  	ret AND_KILL_FRAME(2)
 24431                                  .L_lambda_opt_end_0153:	; new closure is in rax
 24432 000120C8 C9                      	leave
 24433 000120C9 C21800                  	ret AND_KILL_FRAME(1)
 24434                                  .L_lambda_simple_end_0abb:	; new closure is in rax
 24435 000120CC 803804                  	cmp byte [rax], T_closure
 24436 000120CF 0F8546630000            	jne L_error_non_closure
 24437 000120D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24438 000120D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24439 000120DB 48890425[CD150000]      	mov qword [free_var_99], rax
 24440 000120E3 48B8-                   	mov rax, sob_void
 24440 000120E5 [0000000000000000] 
 24441                                  
 24442 000120ED 4889C7                  	mov rdi, rax
 24443 000120F0 E824660000              	call print_sexpr_if_not_void
 24444                                  	; preparing a non-tail-call
 24445 000120F5 48B8-                   	mov rax, L_constants + 1993
 24445 000120F7 [C907000000000000] 
 24446 000120FF 50                      	push rax
 24447 00012100 6A01                    	push 1	; arg count
 24448 00012102 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24449 00012107 E8B8630000              	call malloc
 24450 0001210C 50                      	push rax
 24451 0001210D BF00000000              	mov rdi, 8 * 0	; new rib
 24452 00012112 E8AD630000              	call malloc
 24453 00012117 50                      	push rax
 24454 00012118 BF08000000              	mov rdi, 8 * 1	; extended env
 24455 0001211D E8A2630000              	call malloc
 24456 00012122 488B7D10                	mov rdi, ENV
 24457 00012126 BE00000000              	mov rsi, 0
 24458 0001212B BA01000000              	mov rdx, 1
 24459                                  .L_lambda_simple_env_loop_0abe:	; ext_env[i + 1] <-- env[i]
 24460 00012130 4883FE00                	cmp rsi, 0
 24461 00012134 7410                    	je .L_lambda_simple_env_end_0abe
 24462 00012136 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24463 0001213A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24464 0001213E 48FFC6                  	inc rsi
 24465 00012141 48FFC2                  	inc rdx
 24466 00012144 EBEA                    	jmp .L_lambda_simple_env_loop_0abe
 24467                                  .L_lambda_simple_env_end_0abe:
 24468 00012146 5B                      	pop rbx
 24469 00012147 BE00000000              	mov rsi, 0
 24470                                  .L_lambda_simple_params_loop_0abe:	; copy params
 24471 0001214C 4883FE00                	cmp rsi, 0
 24472 00012150 740E                    	je .L_lambda_simple_params_end_0abe
 24473 00012152 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24474 00012157 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24475 0001215B 48FFC6                  	inc rsi
 24476 0001215E EBEC                    	jmp .L_lambda_simple_params_loop_0abe
 24477                                  .L_lambda_simple_params_end_0abe:
 24478 00012160 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24479 00012163 4889C3                  	mov rbx, rax
 24480 00012166 58                      	pop rax
 24481 00012167 C60004                  	mov byte [rax], T_closure
 24482 0001216A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24483 0001216E 48C74009[7B210100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0abe
 24484 00012176 E95E040000              	jmp .L_lambda_simple_end_0abe
 24485                                  .L_lambda_simple_code_0abe:	; lambda-simple body
 24486 0001217B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24487 00012181 740B                    	je .L_lambda_simple_arity_check_ok_0abe
 24488 00012183 FF742410                	push qword [rsp + 8 * 2]
 24489 00012187 6A01                    	push 1
 24490 00012189 E9EF620000              	jmp L_error_incorrect_arity_simple
 24491                                  .L_lambda_simple_arity_check_ok_0abe:
 24492 0001218E C8000000                	enter 0, 0
 24493 00012192 BF08000000              	mov rdi, 8*1
 24494 00012197 E828630000              	call malloc
 24495 0001219C 488B5D20                	mov rbx, PARAM(0)
 24496 000121A0 488918                  	mov qword[rax], rbx
 24497 000121A3 48894520                	mov PARAM(0), rax
 24498 000121A7 48B8-                   	mov rax, sob_void
 24498 000121A9 [0000000000000000] 
 24499                                  
 24500 000121B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24501 000121B6 E809630000              	call malloc
 24502 000121BB 50                      	push rax
 24503 000121BC BF08000000              	mov rdi, 8 * 1	; new rib
 24504 000121C1 E8FE620000              	call malloc
 24505 000121C6 50                      	push rax
 24506 000121C7 BF10000000              	mov rdi, 8 * 2	; extended env
 24507 000121CC E8F3620000              	call malloc
 24508 000121D1 488B7D10                	mov rdi, ENV
 24509 000121D5 BE00000000              	mov rsi, 0
 24510 000121DA BA01000000              	mov rdx, 1
 24511                                  .L_lambda_simple_env_loop_0abf:	; ext_env[i + 1] <-- env[i]
 24512 000121DF 4883FE01                	cmp rsi, 1
 24513 000121E3 7410                    	je .L_lambda_simple_env_end_0abf
 24514 000121E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24515 000121E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24516 000121ED 48FFC6                  	inc rsi
 24517 000121F0 48FFC2                  	inc rdx
 24518 000121F3 EBEA                    	jmp .L_lambda_simple_env_loop_0abf
 24519                                  .L_lambda_simple_env_end_0abf:
 24520 000121F5 5B                      	pop rbx
 24521 000121F6 BE00000000              	mov rsi, 0
 24522                                  .L_lambda_simple_params_loop_0abf:	; copy params
 24523 000121FB 4883FE01                	cmp rsi, 1
 24524 000121FF 740E                    	je .L_lambda_simple_params_end_0abf
 24525 00012201 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24526 00012206 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24527 0001220A 48FFC6                  	inc rsi
 24528 0001220D EBEC                    	jmp .L_lambda_simple_params_loop_0abf
 24529                                  .L_lambda_simple_params_end_0abf:
 24530 0001220F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24531 00012212 4889C3                  	mov rbx, rax
 24532 00012215 58                      	pop rax
 24533 00012216 C60004                  	mov byte [rax], T_closure
 24534 00012219 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24535 0001221D 48C74009[2A220100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0abf
 24536 00012225 E993020000              	jmp .L_lambda_simple_end_0abf
 24537                                  .L_lambda_simple_code_0abf:	; lambda-simple body
 24538 0001222A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24539 00012230 740B                    	je .L_lambda_simple_arity_check_ok_0abf
 24540 00012232 FF742410                	push qword [rsp + 8 * 2]
 24541 00012236 6A02                    	push 2
 24542 00012238 E940620000              	jmp L_error_incorrect_arity_simple
 24543                                  .L_lambda_simple_arity_check_ok_0abf:
 24544 0001223D C8000000                	enter 0, 0
 24545                                  	; preparing a non-tail-call
 24546 00012241 488B4520                	mov rax, PARAM(0)	; param s
 24547 00012245 50                      	push rax
 24548 00012246 6A01                    	push 1	; arg count
 24549 00012248 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 24550 00012250 803805                  	cmp byte [rax], T_undefined
 24551 00012253 0F843E610000            	je L_error_fvar_undefined
 24552 00012259 803804                  	cmp byte [rax], T_closure
 24553 0001225C 0F85B9610000            	jne L_error_non_closure
 24554 00012262 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24555 00012265 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24556 00012268 483D[02000000]          	cmp rax, sob_boolean_false
 24557 0001226E 0F847C000000            	je .L_if_else_081d
 24558                                  	; preparing a tail-call
 24559 00012274 48B8-                   	mov rax, L_constants + 0
 24559 00012276 [0000000000000000] 
 24560 0001227E 50                      	push rax
 24561 0001227F 488B4528                	mov rax, PARAM(1)	; param i
 24562 00012283 50                      	push rax
 24563 00012284 6A02                    	push 2	; arg count
 24564 00012286 488B0425[EF150000]      	mov rax, qword [free_var_101]	; free var make-vector
 24565 0001228E 803805                  	cmp byte [rax], T_undefined
 24566 00012291 0F8400610000            	je L_error_fvar_undefined
 24567 00012297 803804                  	cmp byte [rax], T_closure
 24568 0001229A 0F857B610000            	jne L_error_non_closure
 24569 000122A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24570 000122A3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24571 000122A6 FF7500                  	push qword[rbp]
 24572 000122A9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24573 000122AC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24574 000122B0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24575 000122B4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24576 000122B8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24577 000122BB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24578 000122BE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24579 000122C3 4983C103                	add r9, 3 	 ;for getting to the params
 24580 000122C7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24581 000122CB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24582                                  .L_tc_recycle_frame_loop_0f18:
 24583 000122CE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24584 000122D1 7410                    	je .L_tc_recycle_frame_done_0f18
 24585 000122D3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24586 000122D6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24587 000122D9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24588 000122DD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24589 000122E1 EBEB                    	jmp .L_tc_recycle_frame_loop_0f18
 24590                                  .L_tc_recycle_frame_done_0f18:
 24591 000122E3 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24592 000122E4 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24593 000122E8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24594 000122EB E9C9010000              	jmp .L_if_end_081d
 24595                                  .L_if_else_081d:
 24596                                  	; preparing a tail-call
 24597                                  	; preparing a non-tail-call
 24598                                  	; preparing a non-tail-call
 24599 000122F0 48B8-                   	mov rax, L_constants + 2270
 24599 000122F2 [DE08000000000000] 
 24600 000122FA 50                      	push rax
 24601 000122FB 488B4528                	mov rax, PARAM(1)	; param i
 24602 000122FF 50                      	push rax
 24603 00012300 6A02                    	push 2	; arg count
 24604 00012302 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 24605 0001230A 803805                  	cmp byte [rax], T_undefined
 24606 0001230D 0F8484600000            	je L_error_fvar_undefined
 24607 00012313 803804                  	cmp byte [rax], T_closure
 24608 00012316 0F85FF600000            	jne L_error_non_closure
 24609 0001231C FF7001                  	push SOB_CLOSURE_ENV(rax)
 24610 0001231F FF5009                  	call SOB_CLOSURE_CODE(rax)
 24611 00012322 50                      	push rax
 24612                                  	; preparing a non-tail-call
 24613 00012323 488B4520                	mov rax, PARAM(0)	; param s
 24614 00012327 50                      	push rax
 24615 00012328 6A01                    	push 1	; arg count
 24616 0001232A 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 24617 00012332 803805                  	cmp byte [rax], T_undefined
 24618 00012335 0F845C600000            	je L_error_fvar_undefined
 24619 0001233B 803804                  	cmp byte [rax], T_closure
 24620 0001233E 0F85D7600000            	jne L_error_non_closure
 24621 00012344 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24622 00012347 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24623 0001234A 50                      	push rax
 24624 0001234B 6A02                    	push 2	; arg count
 24625 0001234D 488B4510                	mov rax, ENV
 24626 00012351 488B00                  	mov rax, qword [rax + 8 * 0]
 24627 00012354 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24628 00012357 488B00                  	mov rax, qword [rax]
 24629 0001235A 803804                  	cmp byte [rax], T_closure
 24630 0001235D 0F85B8600000            	jne L_error_non_closure
 24631 00012363 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24632 00012366 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24633 00012369 50                      	push rax
 24634 0001236A 6A01                    	push 1	; arg count
 24635 0001236C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24636 00012371 E84E610000              	call malloc
 24637 00012376 50                      	push rax
 24638 00012377 BF10000000              	mov rdi, 8 * 2	; new rib
 24639 0001237C E843610000              	call malloc
 24640 00012381 50                      	push rax
 24641 00012382 BF18000000              	mov rdi, 8 * 3	; extended env
 24642 00012387 E838610000              	call malloc
 24643 0001238C 488B7D10                	mov rdi, ENV
 24644 00012390 BE00000000              	mov rsi, 0
 24645 00012395 BA01000000              	mov rdx, 1
 24646                                  .L_lambda_simple_env_loop_0ac0:	; ext_env[i + 1] <-- env[i]
 24647 0001239A 4883FE02                	cmp rsi, 2
 24648 0001239E 7410                    	je .L_lambda_simple_env_end_0ac0
 24649 000123A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24650 000123A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24651 000123A8 48FFC6                  	inc rsi
 24652 000123AB 48FFC2                  	inc rdx
 24653 000123AE EBEA                    	jmp .L_lambda_simple_env_loop_0ac0
 24654                                  .L_lambda_simple_env_end_0ac0:
 24655 000123B0 5B                      	pop rbx
 24656 000123B1 BE00000000              	mov rsi, 0
 24657                                  .L_lambda_simple_params_loop_0ac0:	; copy params
 24658 000123B6 4883FE02                	cmp rsi, 2
 24659 000123BA 740E                    	je .L_lambda_simple_params_end_0ac0
 24660 000123BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24661 000123C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24662 000123C5 48FFC6                  	inc rsi
 24663 000123C8 EBEC                    	jmp .L_lambda_simple_params_loop_0ac0
 24664                                  .L_lambda_simple_params_end_0ac0:
 24665 000123CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24666 000123CD 4889C3                  	mov rbx, rax
 24667 000123D0 58                      	pop rax
 24668 000123D1 C60004                  	mov byte [rax], T_closure
 24669 000123D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24670 000123D8 48C74009[E5230100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac0
 24671 000123E0 E980000000              	jmp .L_lambda_simple_end_0ac0
 24672                                  .L_lambda_simple_code_0ac0:	; lambda-simple body
 24673 000123E5 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24674 000123EB 740B                    	je .L_lambda_simple_arity_check_ok_0ac0
 24675 000123ED FF742410                	push qword [rsp + 8 * 2]
 24676 000123F1 6A01                    	push 1
 24677 000123F3 E985600000              	jmp L_error_incorrect_arity_simple
 24678                                  .L_lambda_simple_arity_check_ok_0ac0:
 24679 000123F8 C8000000                	enter 0, 0
 24680                                  	; preparing a non-tail-call
 24681                                  	; preparing a non-tail-call
 24682 000123FC 488B4510                	mov rax, ENV
 24683 00012400 488B00                  	mov rax, qword [rax + 8 * 0]
 24684 00012403 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 24685 00012406 50                      	push rax
 24686 00012407 6A01                    	push 1	; arg count
 24687 00012409 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 24688 00012411 803805                  	cmp byte [rax], T_undefined
 24689 00012414 0F847D5F0000            	je L_error_fvar_undefined
 24690 0001241A 803804                  	cmp byte [rax], T_closure
 24691 0001241D 0F85F85F0000            	jne L_error_non_closure
 24692 00012423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24693 00012426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24694 00012429 50                      	push rax
 24695 0001242A 488B4510                	mov rax, ENV
 24696 0001242E 488B00                  	mov rax, qword [rax + 8 * 0]
 24697 00012431 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 24698 00012435 50                      	push rax
 24699 00012436 488B4520                	mov rax, PARAM(0)	; param v
 24700 0001243A 50                      	push rax
 24701 0001243B 6A03                    	push 3	; arg count
 24702 0001243D 488B0425[0E190000]      	mov rax, qword [free_var_148]	; free var vector-set!
 24703 00012445 803805                  	cmp byte [rax], T_undefined
 24704 00012448 0F84495F0000            	je L_error_fvar_undefined
 24705 0001244E 803804                  	cmp byte [rax], T_closure
 24706 00012451 0F85C45F0000            	jne L_error_non_closure
 24707 00012457 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24708 0001245A FF5009                  	call SOB_CLOSURE_CODE(rax)
 24709                                  
 24710 0001245D 488B4520                	mov rax, PARAM(0)	; param v
 24711 00012461 C9                      	leave
 24712 00012462 C21800                  	ret AND_KILL_FRAME(1)
 24713                                  .L_lambda_simple_end_0ac0:	; new closure is in rax
 24714 00012465 803804                  	cmp byte [rax], T_closure
 24715 00012468 0F85AD5F0000            	jne L_error_non_closure
 24716 0001246E FF7001                  	push SOB_CLOSURE_ENV(rax)
 24717 00012471 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24718 00012474 FF7500                  	push qword[rbp]
 24719 00012477 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24720 0001247A 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24721 0001247E 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24722 00012482 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24723 00012486 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24724 00012489 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24725 0001248C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24726 00012491 4983C103                	add r9, 3 	 ;for getting to the params
 24727 00012495 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24728 00012499 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24729                                  .L_tc_recycle_frame_loop_0f19:
 24730 0001249C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24731 0001249F 7410                    	je .L_tc_recycle_frame_done_0f19
 24732 000124A1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24733 000124A4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24734 000124A7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24735 000124AB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24736 000124AF EBEB                    	jmp .L_tc_recycle_frame_loop_0f19
 24737                                  .L_tc_recycle_frame_done_0f19:
 24738 000124B1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24739 000124B2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24740 000124B6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24741                                  .L_if_end_081d:
 24742 000124B9 C9                      	leave
 24743 000124BA C22000                  	ret AND_KILL_FRAME(2)
 24744                                  .L_lambda_simple_end_0abf:	; new closure is in rax
 24745 000124BD 50                      	push rax
 24746 000124BE 488B4520                	mov rax, PARAM(0)	; param run
 24747 000124C2 8F00                    	pop qword [rax]
 24748 000124C4 48B8-                   	mov rax, sob_void
 24748 000124C6 [0000000000000000] 
 24749                                  
 24750 000124CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24751 000124D3 E8EC5F0000              	call malloc
 24752 000124D8 50                      	push rax
 24753 000124D9 BF08000000              	mov rdi, 8 * 1	; new rib
 24754 000124DE E8E15F0000              	call malloc
 24755 000124E3 50                      	push rax
 24756 000124E4 BF10000000              	mov rdi, 8 * 2	; extended env
 24757 000124E9 E8D65F0000              	call malloc
 24758 000124EE 488B7D10                	mov rdi, ENV
 24759 000124F2 BE00000000              	mov rsi, 0
 24760 000124F7 BA01000000              	mov rdx, 1
 24761                                  .L_lambda_simple_env_loop_0ac1:	; ext_env[i + 1] <-- env[i]
 24762 000124FC 4883FE01                	cmp rsi, 1
 24763 00012500 7410                    	je .L_lambda_simple_env_end_0ac1
 24764 00012502 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24765 00012506 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24766 0001250A 48FFC6                  	inc rsi
 24767 0001250D 48FFC2                  	inc rdx
 24768 00012510 EBEA                    	jmp .L_lambda_simple_env_loop_0ac1
 24769                                  .L_lambda_simple_env_end_0ac1:
 24770 00012512 5B                      	pop rbx
 24771 00012513 BE00000000              	mov rsi, 0
 24772                                  .L_lambda_simple_params_loop_0ac1:	; copy params
 24773 00012518 4883FE01                	cmp rsi, 1
 24774 0001251C 740E                    	je .L_lambda_simple_params_end_0ac1
 24775 0001251E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24776 00012523 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24777 00012527 48FFC6                  	inc rsi
 24778 0001252A EBEC                    	jmp .L_lambda_simple_params_loop_0ac1
 24779                                  .L_lambda_simple_params_end_0ac1:
 24780 0001252C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24781 0001252F 4889C3                  	mov rbx, rax
 24782 00012532 58                      	pop rax
 24783 00012533 C60004                  	mov byte [rax], T_closure
 24784 00012536 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24785 0001253A 48C74009[47250100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac1
 24786 00012542 E98E000000              	jmp .L_lambda_simple_end_0ac1
 24787                                  .L_lambda_simple_code_0ac1:	; lambda-simple body
 24788 00012547 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24789 0001254D 740B                    	je .L_lambda_simple_arity_check_ok_0ac1
 24790 0001254F FF742410                	push qword [rsp + 8 * 2]
 24791 00012553 6A01                    	push 1
 24792 00012555 E9235F0000              	jmp L_error_incorrect_arity_simple
 24793                                  .L_lambda_simple_arity_check_ok_0ac1:
 24794 0001255A C8000000                	enter 0, 0
 24795                                  	; preparing a tail-call
 24796 0001255E 48B8-                   	mov rax, L_constants + 2135
 24796 00012560 [5708000000000000] 
 24797 00012568 50                      	push rax
 24798 00012569 488B4520                	mov rax, PARAM(0)	; param s
 24799 0001256D 50                      	push rax
 24800 0001256E 6A02                    	push 2	; arg count
 24801 00012570 488B4510                	mov rax, ENV
 24802 00012574 488B00                  	mov rax, qword [rax + 8 * 0]
 24803 00012577 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 24804 0001257A 488B00                  	mov rax, qword [rax]
 24805 0001257D 803804                  	cmp byte [rax], T_closure
 24806 00012580 0F85955E0000            	jne L_error_non_closure
 24807 00012586 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24808 00012589 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24809 0001258C FF7500                  	push qword[rbp]
 24810 0001258F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24811 00012592 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24812 00012596 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24813 0001259A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24814 0001259E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24815 000125A1 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24816 000125A4 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24817 000125A9 4983C103                	add r9, 3 	 ;for getting to the params
 24818 000125AD 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24819 000125B1 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24820                                  .L_tc_recycle_frame_loop_0f1a:
 24821 000125B4 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24822 000125B7 7410                    	je .L_tc_recycle_frame_done_0f1a
 24823 000125B9 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24824 000125BC 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24825 000125BF 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24826 000125C3 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24827 000125C7 EBEB                    	jmp .L_tc_recycle_frame_loop_0f1a
 24828                                  .L_tc_recycle_frame_done_0f1a:
 24829 000125C9 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24830 000125CA 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24831 000125CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24832 000125D1 C9                      	leave
 24833 000125D2 C21800                  	ret AND_KILL_FRAME(1)
 24834                                  .L_lambda_simple_end_0ac1:	; new closure is in rax
 24835 000125D5 C9                      	leave
 24836 000125D6 C21800                  	ret AND_KILL_FRAME(1)
 24837                                  .L_lambda_simple_end_0abe:	; new closure is in rax
 24838 000125D9 803804                  	cmp byte [rax], T_closure
 24839 000125DC 0F85395E0000            	jne L_error_non_closure
 24840 000125E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 24841 000125E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24842 000125E8 48890425[89150000]      	mov qword [free_var_95], rax
 24843 000125F0 48B8-                   	mov rax, sob_void
 24843 000125F2 [0000000000000000] 
 24844                                  
 24845 000125FA 4889C7                  	mov rdi, rax
 24846 000125FD E817610000              	call print_sexpr_if_not_void
 24847                                  	; preparing a non-tail-call
 24848 00012602 48B8-                   	mov rax, L_constants + 1993
 24848 00012604 [C907000000000000] 
 24849 0001260C 50                      	push rax
 24850 0001260D 6A01                    	push 1	; arg count
 24851 0001260F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24852 00012614 E8AB5E0000              	call malloc
 24853 00012619 50                      	push rax
 24854 0001261A BF00000000              	mov rdi, 8 * 0	; new rib
 24855 0001261F E8A05E0000              	call malloc
 24856 00012624 50                      	push rax
 24857 00012625 BF08000000              	mov rdi, 8 * 1	; extended env
 24858 0001262A E8955E0000              	call malloc
 24859 0001262F 488B7D10                	mov rdi, ENV
 24860 00012633 BE00000000              	mov rsi, 0
 24861 00012638 BA01000000              	mov rdx, 1
 24862                                  .L_lambda_simple_env_loop_0ac2:	; ext_env[i + 1] <-- env[i]
 24863 0001263D 4883FE00                	cmp rsi, 0
 24864 00012641 7410                    	je .L_lambda_simple_env_end_0ac2
 24865 00012643 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24866 00012647 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24867 0001264B 48FFC6                  	inc rsi
 24868 0001264E 48FFC2                  	inc rdx
 24869 00012651 EBEA                    	jmp .L_lambda_simple_env_loop_0ac2
 24870                                  .L_lambda_simple_env_end_0ac2:
 24871 00012653 5B                      	pop rbx
 24872 00012654 BE00000000              	mov rsi, 0
 24873                                  .L_lambda_simple_params_loop_0ac2:	; copy params
 24874 00012659 4883FE00                	cmp rsi, 0
 24875 0001265D 740E                    	je .L_lambda_simple_params_end_0ac2
 24876 0001265F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24877 00012664 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24878 00012668 48FFC6                  	inc rsi
 24879 0001266B EBEC                    	jmp .L_lambda_simple_params_loop_0ac2
 24880                                  .L_lambda_simple_params_end_0ac2:
 24881 0001266D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24882 00012670 4889C3                  	mov rbx, rax
 24883 00012673 58                      	pop rax
 24884 00012674 C60004                  	mov byte [rax], T_closure
 24885 00012677 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24886 0001267B 48C74009[88260100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac2
 24887 00012683 E95E040000              	jmp .L_lambda_simple_end_0ac2
 24888                                  .L_lambda_simple_code_0ac2:	; lambda-simple body
 24889 00012688 48837C241001            	cmp qword [rsp + 8 * 2], 1
 24890 0001268E 740B                    	je .L_lambda_simple_arity_check_ok_0ac2
 24891 00012690 FF742410                	push qword [rsp + 8 * 2]
 24892 00012694 6A01                    	push 1
 24893 00012696 E9E25D0000              	jmp L_error_incorrect_arity_simple
 24894                                  .L_lambda_simple_arity_check_ok_0ac2:
 24895 0001269B C8000000                	enter 0, 0
 24896 0001269F BF08000000              	mov rdi, 8*1
 24897 000126A4 E81B5E0000              	call malloc
 24898 000126A9 488B5D20                	mov rbx, PARAM(0)
 24899 000126AD 488918                  	mov qword[rax], rbx
 24900 000126B0 48894520                	mov PARAM(0), rax
 24901 000126B4 48B8-                   	mov rax, sob_void
 24901 000126B6 [0000000000000000] 
 24902                                  
 24903 000126BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24904 000126C3 E8FC5D0000              	call malloc
 24905 000126C8 50                      	push rax
 24906 000126C9 BF08000000              	mov rdi, 8 * 1	; new rib
 24907 000126CE E8F15D0000              	call malloc
 24908 000126D3 50                      	push rax
 24909 000126D4 BF10000000              	mov rdi, 8 * 2	; extended env
 24910 000126D9 E8E65D0000              	call malloc
 24911 000126DE 488B7D10                	mov rdi, ENV
 24912 000126E2 BE00000000              	mov rsi, 0
 24913 000126E7 BA01000000              	mov rdx, 1
 24914                                  .L_lambda_simple_env_loop_0ac3:	; ext_env[i + 1] <-- env[i]
 24915 000126EC 4883FE01                	cmp rsi, 1
 24916 000126F0 7410                    	je .L_lambda_simple_env_end_0ac3
 24917 000126F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24918 000126F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24919 000126FA 48FFC6                  	inc rsi
 24920 000126FD 48FFC2                  	inc rdx
 24921 00012700 EBEA                    	jmp .L_lambda_simple_env_loop_0ac3
 24922                                  .L_lambda_simple_env_end_0ac3:
 24923 00012702 5B                      	pop rbx
 24924 00012703 BE00000000              	mov rsi, 0
 24925                                  .L_lambda_simple_params_loop_0ac3:	; copy params
 24926 00012708 4883FE01                	cmp rsi, 1
 24927 0001270C 740E                    	je .L_lambda_simple_params_end_0ac3
 24928 0001270E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24929 00012713 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24930 00012717 48FFC6                  	inc rsi
 24931 0001271A EBEC                    	jmp .L_lambda_simple_params_loop_0ac3
 24932                                  .L_lambda_simple_params_end_0ac3:
 24933 0001271C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24934 0001271F 4889C3                  	mov rbx, rax
 24935 00012722 58                      	pop rax
 24936 00012723 C60004                  	mov byte [rax], T_closure
 24937 00012726 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24938 0001272A 48C74009[37270100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac3
 24939 00012732 E993020000              	jmp .L_lambda_simple_end_0ac3
 24940                                  .L_lambda_simple_code_0ac3:	; lambda-simple body
 24941 00012737 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24942 0001273D 740B                    	je .L_lambda_simple_arity_check_ok_0ac3
 24943 0001273F FF742410                	push qword [rsp + 8 * 2]
 24944 00012743 6A02                    	push 2
 24945 00012745 E9335D0000              	jmp L_error_incorrect_arity_simple
 24946                                  .L_lambda_simple_arity_check_ok_0ac3:
 24947 0001274A C8000000                	enter 0, 0
 24948                                  	; preparing a non-tail-call
 24949 0001274E 488B4520                	mov rax, PARAM(0)	; param s
 24950 00012752 50                      	push rax
 24951 00012753 6A01                    	push 1	; arg count
 24952 00012755 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 24953 0001275D 803805                  	cmp byte [rax], T_undefined
 24954 00012760 0F84315C0000            	je L_error_fvar_undefined
 24955 00012766 803804                  	cmp byte [rax], T_closure
 24956 00012769 0F85AC5C0000            	jne L_error_non_closure
 24957 0001276F FF7001                  	push SOB_CLOSURE_ENV(rax)
 24958 00012772 FF5009                  	call SOB_CLOSURE_CODE(rax)
 24959 00012775 483D[02000000]          	cmp rax, sob_boolean_false
 24960 0001277B 0F847C000000            	je .L_if_else_081e
 24961                                  	; preparing a tail-call
 24962 00012781 48B8-                   	mov rax, L_constants + 4
 24962 00012783 [0400000000000000] 
 24963 0001278B 50                      	push rax
 24964 0001278C 488B4528                	mov rax, PARAM(1)	; param i
 24965 00012790 50                      	push rax
 24966 00012791 6A02                    	push 2	; arg count
 24967 00012793 488B0425[CD150000]      	mov rax, qword [free_var_99]	; free var make-string
 24968 0001279B 803805                  	cmp byte [rax], T_undefined
 24969 0001279E 0F84F35B0000            	je L_error_fvar_undefined
 24970 000127A4 803804                  	cmp byte [rax], T_closure
 24971 000127A7 0F856E5C0000            	jne L_error_non_closure
 24972 000127AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 24973 000127B0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 24974 000127B3 FF7500                  	push qword[rbp]
 24975 000127B6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 24976 000127B9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 24977 000127BD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 24978 000127C1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 24979 000127C5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 24980 000127C8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 24981 000127CB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 24982 000127D0 4983C103                	add r9, 3 	 ;for getting to the params
 24983 000127D4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 24984 000127D8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 24985                                  .L_tc_recycle_frame_loop_0f1b:
 24986 000127DB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 24987 000127DE 7410                    	je .L_tc_recycle_frame_done_0f1b
 24988 000127E0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 24989 000127E3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 24990 000127E6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 24991 000127EA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 24992 000127EE EBEB                    	jmp .L_tc_recycle_frame_loop_0f1b
 24993                                  .L_tc_recycle_frame_done_0f1b:
 24994 000127F0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 24995 000127F1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 24996 000127F5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 24997 000127F8 E9C9010000              	jmp .L_if_end_081e
 24998                                  .L_if_else_081e:
 24999                                  	; preparing a tail-call
 25000                                  	; preparing a non-tail-call
 25001                                  	; preparing a non-tail-call
 25002 000127FD 48B8-                   	mov rax, L_constants + 2270
 25002 000127FF [DE08000000000000] 
 25003 00012807 50                      	push rax
 25004 00012808 488B4528                	mov rax, PARAM(1)	; param i
 25005 0001280C 50                      	push rax
 25006 0001280D 6A02                    	push 2	; arg count
 25007 0001280F 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 25008 00012817 803805                  	cmp byte [rax], T_undefined
 25009 0001281A 0F84775B0000            	je L_error_fvar_undefined
 25010 00012820 803804                  	cmp byte [rax], T_closure
 25011 00012823 0F85F25B0000            	jne L_error_non_closure
 25012 00012829 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25013 0001282C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25014 0001282F 50                      	push rax
 25015                                  	; preparing a non-tail-call
 25016 00012830 488B4520                	mov rax, PARAM(0)	; param s
 25017 00012834 50                      	push rax
 25018 00012835 6A01                    	push 1	; arg count
 25019 00012837 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 25020 0001283F 803805                  	cmp byte [rax], T_undefined
 25021 00012842 0F844F5B0000            	je L_error_fvar_undefined
 25022 00012848 803804                  	cmp byte [rax], T_closure
 25023 0001284B 0F85CA5B0000            	jne L_error_non_closure
 25024 00012851 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25025 00012854 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25026 00012857 50                      	push rax
 25027 00012858 6A02                    	push 2	; arg count
 25028 0001285A 488B4510                	mov rax, ENV
 25029 0001285E 488B00                  	mov rax, qword [rax + 8 * 0]
 25030 00012861 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25031 00012864 488B00                  	mov rax, qword [rax]
 25032 00012867 803804                  	cmp byte [rax], T_closure
 25033 0001286A 0F85AB5B0000            	jne L_error_non_closure
 25034 00012870 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25035 00012873 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25036 00012876 50                      	push rax
 25037 00012877 6A01                    	push 1	; arg count
 25038 00012879 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25039 0001287E E8415C0000              	call malloc
 25040 00012883 50                      	push rax
 25041 00012884 BF10000000              	mov rdi, 8 * 2	; new rib
 25042 00012889 E8365C0000              	call malloc
 25043 0001288E 50                      	push rax
 25044 0001288F BF18000000              	mov rdi, 8 * 3	; extended env
 25045 00012894 E82B5C0000              	call malloc
 25046 00012899 488B7D10                	mov rdi, ENV
 25047 0001289D BE00000000              	mov rsi, 0
 25048 000128A2 BA01000000              	mov rdx, 1
 25049                                  .L_lambda_simple_env_loop_0ac4:	; ext_env[i + 1] <-- env[i]
 25050 000128A7 4883FE02                	cmp rsi, 2
 25051 000128AB 7410                    	je .L_lambda_simple_env_end_0ac4
 25052 000128AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25053 000128B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25054 000128B5 48FFC6                  	inc rsi
 25055 000128B8 48FFC2                  	inc rdx
 25056 000128BB EBEA                    	jmp .L_lambda_simple_env_loop_0ac4
 25057                                  .L_lambda_simple_env_end_0ac4:
 25058 000128BD 5B                      	pop rbx
 25059 000128BE BE00000000              	mov rsi, 0
 25060                                  .L_lambda_simple_params_loop_0ac4:	; copy params
 25061 000128C3 4883FE02                	cmp rsi, 2
 25062 000128C7 740E                    	je .L_lambda_simple_params_end_0ac4
 25063 000128C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25064 000128CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25065 000128D2 48FFC6                  	inc rsi
 25066 000128D5 EBEC                    	jmp .L_lambda_simple_params_loop_0ac4
 25067                                  .L_lambda_simple_params_end_0ac4:
 25068 000128D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25069 000128DA 4889C3                  	mov rbx, rax
 25070 000128DD 58                      	pop rax
 25071 000128DE C60004                  	mov byte [rax], T_closure
 25072 000128E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25073 000128E5 48C74009[F2280100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac4
 25074 000128ED E980000000              	jmp .L_lambda_simple_end_0ac4
 25075                                  .L_lambda_simple_code_0ac4:	; lambda-simple body
 25076 000128F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25077 000128F8 740B                    	je .L_lambda_simple_arity_check_ok_0ac4
 25078 000128FA FF742410                	push qword [rsp + 8 * 2]
 25079 000128FE 6A01                    	push 1
 25080 00012900 E9785B0000              	jmp L_error_incorrect_arity_simple
 25081                                  .L_lambda_simple_arity_check_ok_0ac4:
 25082 00012905 C8000000                	enter 0, 0
 25083                                  	; preparing a non-tail-call
 25084                                  	; preparing a non-tail-call
 25085 00012909 488B4510                	mov rax, ENV
 25086 0001290D 488B00                  	mov rax, qword [rax + 8 * 0]
 25087 00012910 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var s
 25088 00012913 50                      	push rax
 25089 00012914 6A01                    	push 1	; arg count
 25090 00012916 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 25091 0001291E 803805                  	cmp byte [rax], T_undefined
 25092 00012921 0F84705A0000            	je L_error_fvar_undefined
 25093 00012927 803804                  	cmp byte [rax], T_closure
 25094 0001292A 0F85EB5A0000            	jne L_error_non_closure
 25095 00012930 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25096 00012933 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25097 00012936 50                      	push rax
 25098 00012937 488B4510                	mov rax, ENV
 25099 0001293B 488B00                  	mov rax, qword [rax + 8 * 0]
 25100 0001293E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 25101 00012942 50                      	push rax
 25102 00012943 488B4520                	mov rax, PARAM(0)	; param str
 25103 00012947 50                      	push rax
 25104 00012948 6A03                    	push 3	; arg count
 25105 0001294A 488B0425[ED170000]      	mov rax, qword [free_var_131]	; free var string-set!
 25106 00012952 803805                  	cmp byte [rax], T_undefined
 25107 00012955 0F843C5A0000            	je L_error_fvar_undefined
 25108 0001295B 803804                  	cmp byte [rax], T_closure
 25109 0001295E 0F85B75A0000            	jne L_error_non_closure
 25110 00012964 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25111 00012967 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25112                                  
 25113 0001296A 488B4520                	mov rax, PARAM(0)	; param str
 25114 0001296E C9                      	leave
 25115 0001296F C21800                  	ret AND_KILL_FRAME(1)
 25116                                  .L_lambda_simple_end_0ac4:	; new closure is in rax
 25117 00012972 803804                  	cmp byte [rax], T_closure
 25118 00012975 0F85A05A0000            	jne L_error_non_closure
 25119 0001297B FF7001                  	push SOB_CLOSURE_ENV(rax)
 25120 0001297E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25121 00012981 FF7500                  	push qword[rbp]
 25122 00012984 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25123 00012987 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25124 0001298B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25125 0001298F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25126 00012993 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25127 00012996 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25128 00012999 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25129 0001299E 4983C103                	add r9, 3 	 ;for getting to the params
 25130 000129A2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25131 000129A6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25132                                  .L_tc_recycle_frame_loop_0f1c:
 25133 000129A9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25134 000129AC 7410                    	je .L_tc_recycle_frame_done_0f1c
 25135 000129AE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25136 000129B1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25137 000129B4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25138 000129B8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25139 000129BC EBEB                    	jmp .L_tc_recycle_frame_loop_0f1c
 25140                                  .L_tc_recycle_frame_done_0f1c:
 25141 000129BE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25142 000129BF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25143 000129C3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25144                                  .L_if_end_081e:
 25145 000129C6 C9                      	leave
 25146 000129C7 C22000                  	ret AND_KILL_FRAME(2)
 25147                                  .L_lambda_simple_end_0ac3:	; new closure is in rax
 25148 000129CA 50                      	push rax
 25149 000129CB 488B4520                	mov rax, PARAM(0)	; param run
 25150 000129CF 8F00                    	pop qword [rax]
 25151 000129D1 48B8-                   	mov rax, sob_void
 25151 000129D3 [0000000000000000] 
 25152                                  
 25153 000129DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25154 000129E0 E8DF5A0000              	call malloc
 25155 000129E5 50                      	push rax
 25156 000129E6 BF08000000              	mov rdi, 8 * 1	; new rib
 25157 000129EB E8D45A0000              	call malloc
 25158 000129F0 50                      	push rax
 25159 000129F1 BF10000000              	mov rdi, 8 * 2	; extended env
 25160 000129F6 E8C95A0000              	call malloc
 25161 000129FB 488B7D10                	mov rdi, ENV
 25162 000129FF BE00000000              	mov rsi, 0
 25163 00012A04 BA01000000              	mov rdx, 1
 25164                                  .L_lambda_simple_env_loop_0ac5:	; ext_env[i + 1] <-- env[i]
 25165 00012A09 4883FE01                	cmp rsi, 1
 25166 00012A0D 7410                    	je .L_lambda_simple_env_end_0ac5
 25167 00012A0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25168 00012A13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25169 00012A17 48FFC6                  	inc rsi
 25170 00012A1A 48FFC2                  	inc rdx
 25171 00012A1D EBEA                    	jmp .L_lambda_simple_env_loop_0ac5
 25172                                  .L_lambda_simple_env_end_0ac5:
 25173 00012A1F 5B                      	pop rbx
 25174 00012A20 BE00000000              	mov rsi, 0
 25175                                  .L_lambda_simple_params_loop_0ac5:	; copy params
 25176 00012A25 4883FE01                	cmp rsi, 1
 25177 00012A29 740E                    	je .L_lambda_simple_params_end_0ac5
 25178 00012A2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25179 00012A30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25180 00012A34 48FFC6                  	inc rsi
 25181 00012A37 EBEC                    	jmp .L_lambda_simple_params_loop_0ac5
 25182                                  .L_lambda_simple_params_end_0ac5:
 25183 00012A39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25184 00012A3C 4889C3                  	mov rbx, rax
 25185 00012A3F 58                      	pop rax
 25186 00012A40 C60004                  	mov byte [rax], T_closure
 25187 00012A43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25188 00012A47 48C74009[542A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac5
 25189 00012A4F E98E000000              	jmp .L_lambda_simple_end_0ac5
 25190                                  .L_lambda_simple_code_0ac5:	; lambda-simple body
 25191 00012A54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25192 00012A5A 740B                    	je .L_lambda_simple_arity_check_ok_0ac5
 25193 00012A5C FF742410                	push qword [rsp + 8 * 2]
 25194 00012A60 6A01                    	push 1
 25195 00012A62 E9165A0000              	jmp L_error_incorrect_arity_simple
 25196                                  .L_lambda_simple_arity_check_ok_0ac5:
 25197 00012A67 C8000000                	enter 0, 0
 25198                                  	; preparing a tail-call
 25199 00012A6B 48B8-                   	mov rax, L_constants + 2135
 25199 00012A6D [5708000000000000] 
 25200 00012A75 50                      	push rax
 25201 00012A76 488B4520                	mov rax, PARAM(0)	; param s
 25202 00012A7A 50                      	push rax
 25203 00012A7B 6A02                    	push 2	; arg count
 25204 00012A7D 488B4510                	mov rax, ENV
 25205 00012A81 488B00                  	mov rax, qword [rax + 8 * 0]
 25206 00012A84 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25207 00012A87 488B00                  	mov rax, qword [rax]
 25208 00012A8A 803804                  	cmp byte [rax], T_closure
 25209 00012A8D 0F8588590000            	jne L_error_non_closure
 25210 00012A93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25211 00012A96 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25212 00012A99 FF7500                  	push qword[rbp]
 25213 00012A9C 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25214 00012A9F 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25215 00012AA3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25216 00012AA7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25217 00012AAB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25218 00012AAE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25219 00012AB1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25220 00012AB6 4983C103                	add r9, 3 	 ;for getting to the params
 25221 00012ABA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25222 00012ABE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25223                                  .L_tc_recycle_frame_loop_0f1d:
 25224 00012AC1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25225 00012AC4 7410                    	je .L_tc_recycle_frame_done_0f1d
 25226 00012AC6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25227 00012AC9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25228 00012ACC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25229 00012AD0 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25230 00012AD4 EBEB                    	jmp .L_tc_recycle_frame_loop_0f1d
 25231                                  .L_tc_recycle_frame_done_0f1d:
 25232 00012AD6 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25233 00012AD7 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25234 00012ADB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25235 00012ADE C9                      	leave
 25236 00012ADF C21800                  	ret AND_KILL_FRAME(1)
 25237                                  .L_lambda_simple_end_0ac5:	; new closure is in rax
 25238 00012AE2 C9                      	leave
 25239 00012AE3 C21800                  	ret AND_KILL_FRAME(1)
 25240                                  .L_lambda_simple_end_0ac2:	; new closure is in rax
 25241 00012AE6 803804                  	cmp byte [rax], T_closure
 25242 00012AE9 0F852C590000            	jne L_error_non_closure
 25243 00012AEF FF7001                  	push SOB_CLOSURE_ENV(rax)
 25244 00012AF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25245 00012AF5 48890425[78150000]      	mov qword [free_var_94], rax
 25246 00012AFD 48B8-                   	mov rax, sob_void
 25246 00012AFF [0000000000000000] 
 25247                                  
 25248 00012B07 4889C7                  	mov rdi, rax
 25249 00012B0A E80A5C0000              	call print_sexpr_if_not_void
 25250 00012B0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25251 00012B14 E8AB590000              	call malloc
 25252 00012B19 50                      	push rax
 25253 00012B1A BF00000000              	mov rdi, 8 * 0	; new rib
 25254 00012B1F E8A0590000              	call malloc
 25255 00012B24 50                      	push rax
 25256 00012B25 BF08000000              	mov rdi, 8 * 1	; extended env
 25257 00012B2A E895590000              	call malloc
 25258 00012B2F 488B7D10                	mov rdi, ENV
 25259 00012B33 BE00000000              	mov rsi, 0
 25260 00012B38 BA01000000              	mov rdx, 1
 25261                                  .L_lambda_opt_env_loop_0154:	; ext_env[i + 1] <-- env[i]
 25262 00012B3D 4883FE00                	cmp rsi, 0
 25263 00012B41 7410                    	je .L_lambda_opt_env_end_0154
 25264 00012B43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25265 00012B47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25266 00012B4B 48FFC6                  	inc rsi
 25267 00012B4E 48FFC2                  	inc rdx
 25268 00012B51 EBEA                    	jmp .L_lambda_opt_env_loop_0154
 25269                                  .L_lambda_opt_env_end_0154:
 25270 00012B53 5B                      	pop rbx
 25271 00012B54 BE00000000              	mov rsi, 0
 25272                                  .L_lambda_opt_params_loop_0154:	; copy params
 25273 00012B59 4883FE00                	cmp rsi, 0
 25274 00012B5D 740E                    	je .L_lambda_opt_params_end_0154
 25275 00012B5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25276 00012B64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25277 00012B68 48FFC6                  	inc rsi
 25278 00012B6B EBEC                    	jmp .L_lambda_opt_params_loop_0154
 25279                                  .L_lambda_opt_params_end_0154:
 25280 00012B6D 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 25281 00012B70 4889C3                  	mov rbx, rax
 25282 00012B73 58                      	pop rax
 25283 00012B74 C60004                  	mov byte [rax], T_closure
 25284 00012B77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25285 00012B7B 48C74009[882B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0154
 25286 00012B83 E9ED010000              	jmp .L_lambda_opt_end_0154
 25287                                  .L_lambda_opt_code_0154:	; lambda-opt body
 25288 00012B88 48837C241000            	cmp qword [rsp + 8 * 2], 0
 25289 00012B8E 7411                    	je .L_lambda_opt_arity_check_exact_0154
 25290 00012B90 0F8FB4000000            	jg .L_lambda_opt_arity_check_more_0154
 25291 00012B96 FF742410                	push qword [rsp + 8 * 2]
 25292 00012B9A 6A00                    	push 0
 25293 00012B9C E9F0580000              	jmp L_error_incorrect_arity_opt
 25294                                  .L_lambda_opt_arity_check_exact_0154:
 25295 00012BA1 4883EC08                	sub rsp, 8
 25296 00012BA5 488B442408              	mov rax, qword[rsp + 8 *1]
 25297 00012BAA 48890424                	mov qword[rsp], rax  
 25298 00012BAE 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 25299 00012BB3 4889442408              	mov qword[rsp + 8 * 1], rax
 25300 00012BB8 B801000000              	mov rax, 1
 25301 00012BBD 4889442410              	mov qword[rsp + 8 *2], rax
 25302 00012BC2 48B8-                   	mov rax, sob_nil
 25302 00012BC4 [0100000000000000] 
 25303 00012BCC 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 25304 00012BD1 C8000000                	enter 0, 0
 25305                                  	; preparing a tail-call
 25306 00012BD5 488B4520                	mov rax, PARAM(0)	; param s
 25307 00012BD9 50                      	push rax
 25308 00012BDA 6A01                    	push 1	; arg count
 25309 00012BDC 488B0425[89150000]      	mov rax, qword [free_var_95]	; free var list->vector
 25310 00012BE4 803805                  	cmp byte [rax], T_undefined
 25311 00012BE7 0F84AA570000            	je L_error_fvar_undefined
 25312 00012BED 803804                  	cmp byte [rax], T_closure
 25313 00012BF0 0F8525580000            	jne L_error_non_closure
 25314 00012BF6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25315 00012BF9 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25316 00012BFC FF7500                  	push qword[rbp]
 25317 00012BFF 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25318 00012C02 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25319 00012C06 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25320 00012C0A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25321 00012C0E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25322 00012C11 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25323 00012C14 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25324 00012C19 4983C103                	add r9, 3 	 ;for getting to the params
 25325 00012C1D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25326 00012C21 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25327                                  .L_tc_recycle_frame_loop_0f1f:
 25328 00012C24 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25329 00012C27 7410                    	je .L_tc_recycle_frame_done_0f1f
 25330 00012C29 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25331 00012C2C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25332 00012C2F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25333 00012C33 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25334 00012C37 EBEB                    	jmp .L_tc_recycle_frame_loop_0f1f
 25335                                  .L_tc_recycle_frame_done_0f1f:
 25336 00012C39 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25337 00012C3A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25338 00012C3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25339 00012C41 C9                      	leave
 25340 00012C42 C21800                  	ret AND_KILL_FRAME(1)
 25341 00012C45 E92B010000              	jmp .L_lambda_opt_end_0154	; new closure is in rax
 25342                                  .L_lambda_opt_arity_check_more_0154:
 25343 00012C4A 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 25344 00012C4F 49B9-                   	mov r9, sob_nil
 25344 00012C51 [0100000000000000] 
 25345 00012C59 4889E3                  	mov rbx, rsp 
 25346 00012C5C 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 25347 00012C60 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 25348 00012C63 49C1E003                	shl r8, 3
 25349 00012C67 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 25350 00012C6A 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 25351                                  .L_lambda_opt_stack_shrink_loop_0154:
 25352 00012C6F 4983F800                	cmp r8, 0
 25353 00012C73 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0154
 25354 00012C75 BF11000000              	mov rdi, 1+8+8 ;for pair
 25355 00012C7A E845580000              	call malloc;to create the pair in the stack
 25356 00012C7F C60021                  	mov byte [rax], T_pair ; to make it a pair
 25357 00012C82 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 25358 00012C85 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 25359 00012C89 4C894809                 	mov qword[rax+1+8],r9
 25360 00012C8D 4989C1                  	mov r9, rax ;for the recursion 
 25361 00012C90 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 25362 00012C93 4883EB08                	sub rbx, 8 ;to get the next param to copy
 25363 00012C97 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0154
 25364                                  .L_lambda_opt_stack_shrink_loop_exit_0154:
 25365 00012C99 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 25366 00012C9E 4883E901                	sub rcx, 1
 25367 00012CA2 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 25368 00012CA6 4801CC                  	add rsp, rcx ;shrinking the stack
 25369 00012CA9 4889E0                  	mov rax, rsp
 25370 00012CAC 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 25371 00012CAF 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 25372 00012CB3 49FFC8                  	dec r8 ;we start with param 0, not 1 
 25373 00012CB6 4883C018                	add rax, 3 * 8;now rax is param 0
 25374 00012CBA 49C1E003                	shl r8, 3;convert to byte
 25375 00012CBE 4C01C0                  	add rax, r8;now rax is the top of the stack
 25376 00012CC1 4C8908                  	mov qword[rax], r9;puting the list at the top
 25377 00012CC4 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 25378 00012CC8 4889E3                  	mov rbx, rsp 
 25379 00012CCB 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 25380 00012CCE 41BA00000000            	mov r10, 0;r10 is the not opt params length
 25381 00012CD4 49FFCA                  	dec r10 
 25382 00012CD7 49C1E203                	shl r10, 3;to get bytes
 25383 00012CDB 4883C318                	add rbx, 3*8;rbx is the first param
 25384 00012CDF 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 25385 00012CE2 4889E0                  	mov rax, rsp
 25386 00012CE5 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 25387 00012CE8 48C744241001000000      	mov qword [rsp+2*8], 1
 25388 00012CF1 488B5808                	mov rbx, qword[rax + 8 *1]
 25389 00012CF5 48895C2408              	mov qword [rsp + 1*8] ,rbx
 25390 00012CFA 488B18                  	mov rbx, qword[rax]
 25391 00012CFD 48891C24                	mov qword [rsp], rbx
 25392 00012D01 C8000000                	enter 0, 0
 25393                                  	; preparing a tail-call
 25394 00012D05 488B4520                	mov rax, PARAM(0)	; param s
 25395 00012D09 50                      	push rax
 25396 00012D0A 6A01                    	push 1	; arg count
 25397 00012D0C 488B0425[89150000]      	mov rax, qword [free_var_95]	; free var list->vector
 25398 00012D14 803805                  	cmp byte [rax], T_undefined
 25399 00012D17 0F847A560000            	je L_error_fvar_undefined
 25400 00012D1D 803804                  	cmp byte [rax], T_closure
 25401 00012D20 0F85F5560000            	jne L_error_non_closure
 25402 00012D26 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25403 00012D29 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25404 00012D2C FF7500                  	push qword[rbp]
 25405 00012D2F 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25406 00012D32 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25407 00012D36 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25408 00012D3A 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25409 00012D3E 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25410 00012D41 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25411 00012D44 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25412 00012D49 4983C103                	add r9, 3 	 ;for getting to the params
 25413 00012D4D 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25414 00012D51 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25415                                  .L_tc_recycle_frame_loop_0f1e:
 25416 00012D54 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25417 00012D57 7410                    	je .L_tc_recycle_frame_done_0f1e
 25418 00012D59 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25419 00012D5C 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25420 00012D5F 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25421 00012D63 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25422 00012D67 EBEB                    	jmp .L_tc_recycle_frame_loop_0f1e
 25423                                  .L_tc_recycle_frame_done_0f1e:
 25424 00012D69 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25425 00012D6A 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25426 00012D6E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25427 00012D71 C9                      	leave
 25428 00012D72 C21800                  	ret AND_KILL_FRAME(1)
 25429                                  .L_lambda_opt_end_0154:	; new closure is in rax
 25430 00012D75 48890425[97180000]      	mov qword [free_var_141], rax
 25431 00012D7D 48B8-                   	mov rax, sob_void
 25431 00012D7F [0000000000000000] 
 25432                                  
 25433 00012D87 4889C7                  	mov rdi, rax
 25434 00012D8A E88A590000              	call print_sexpr_if_not_void
 25435                                  	; preparing a non-tail-call
 25436 00012D8F 48B8-                   	mov rax, L_constants + 1993
 25436 00012D91 [C907000000000000] 
 25437 00012D99 50                      	push rax
 25438 00012D9A 6A01                    	push 1	; arg count
 25439 00012D9C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25440 00012DA1 E81E570000              	call malloc
 25441 00012DA6 50                      	push rax
 25442 00012DA7 BF00000000              	mov rdi, 8 * 0	; new rib
 25443 00012DAC E813570000              	call malloc
 25444 00012DB1 50                      	push rax
 25445 00012DB2 BF08000000              	mov rdi, 8 * 1	; extended env
 25446 00012DB7 E808570000              	call malloc
 25447 00012DBC 488B7D10                	mov rdi, ENV
 25448 00012DC0 BE00000000              	mov rsi, 0
 25449 00012DC5 BA01000000              	mov rdx, 1
 25450                                  .L_lambda_simple_env_loop_0ac6:	; ext_env[i + 1] <-- env[i]
 25451 00012DCA 4883FE00                	cmp rsi, 0
 25452 00012DCE 7410                    	je .L_lambda_simple_env_end_0ac6
 25453 00012DD0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25454 00012DD4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25455 00012DD8 48FFC6                  	inc rsi
 25456 00012DDB 48FFC2                  	inc rdx
 25457 00012DDE EBEA                    	jmp .L_lambda_simple_env_loop_0ac6
 25458                                  .L_lambda_simple_env_end_0ac6:
 25459 00012DE0 5B                      	pop rbx
 25460 00012DE1 BE00000000              	mov rsi, 0
 25461                                  .L_lambda_simple_params_loop_0ac6:	; copy params
 25462 00012DE6 4883FE00                	cmp rsi, 0
 25463 00012DEA 740E                    	je .L_lambda_simple_params_end_0ac6
 25464 00012DEC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25465 00012DF1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25466 00012DF5 48FFC6                  	inc rsi
 25467 00012DF8 EBEC                    	jmp .L_lambda_simple_params_loop_0ac6
 25468                                  .L_lambda_simple_params_end_0ac6:
 25469 00012DFA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25470 00012DFD 4889C3                  	mov rbx, rax
 25471 00012E00 58                      	pop rax
 25472 00012E01 C60004                  	mov byte [rax], T_closure
 25473 00012E04 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25474 00012E08 48C74009[152E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac6
 25475 00012E10 E942030000              	jmp .L_lambda_simple_end_0ac6
 25476                                  .L_lambda_simple_code_0ac6:	; lambda-simple body
 25477 00012E15 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25478 00012E1B 740B                    	je .L_lambda_simple_arity_check_ok_0ac6
 25479 00012E1D FF742410                	push qword [rsp + 8 * 2]
 25480 00012E21 6A01                    	push 1
 25481 00012E23 E955560000              	jmp L_error_incorrect_arity_simple
 25482                                  .L_lambda_simple_arity_check_ok_0ac6:
 25483 00012E28 C8000000                	enter 0, 0
 25484 00012E2C BF08000000              	mov rdi, 8*1
 25485 00012E31 E88E560000              	call malloc
 25486 00012E36 488B5D20                	mov rbx, PARAM(0)
 25487 00012E3A 488918                  	mov qword[rax], rbx
 25488 00012E3D 48894520                	mov PARAM(0), rax
 25489 00012E41 48B8-                   	mov rax, sob_void
 25489 00012E43 [0000000000000000] 
 25490                                  
 25491 00012E4B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25492 00012E50 E86F560000              	call malloc
 25493 00012E55 50                      	push rax
 25494 00012E56 BF08000000              	mov rdi, 8 * 1	; new rib
 25495 00012E5B E864560000              	call malloc
 25496 00012E60 50                      	push rax
 25497 00012E61 BF10000000              	mov rdi, 8 * 2	; extended env
 25498 00012E66 E859560000              	call malloc
 25499 00012E6B 488B7D10                	mov rdi, ENV
 25500 00012E6F BE00000000              	mov rsi, 0
 25501 00012E74 BA01000000              	mov rdx, 1
 25502                                  .L_lambda_simple_env_loop_0ac7:	; ext_env[i + 1] <-- env[i]
 25503 00012E79 4883FE01                	cmp rsi, 1
 25504 00012E7D 7410                    	je .L_lambda_simple_env_end_0ac7
 25505 00012E7F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25506 00012E83 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25507 00012E87 48FFC6                  	inc rsi
 25508 00012E8A 48FFC2                  	inc rdx
 25509 00012E8D EBEA                    	jmp .L_lambda_simple_env_loop_0ac7
 25510                                  .L_lambda_simple_env_end_0ac7:
 25511 00012E8F 5B                      	pop rbx
 25512 00012E90 BE00000000              	mov rsi, 0
 25513                                  .L_lambda_simple_params_loop_0ac7:	; copy params
 25514 00012E95 4883FE01                	cmp rsi, 1
 25515 00012E99 740E                    	je .L_lambda_simple_params_end_0ac7
 25516 00012E9B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25517 00012EA0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25518 00012EA4 48FFC6                  	inc rsi
 25519 00012EA7 EBEC                    	jmp .L_lambda_simple_params_loop_0ac7
 25520                                  .L_lambda_simple_params_end_0ac7:
 25521 00012EA9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25522 00012EAC 4889C3                  	mov rbx, rax
 25523 00012EAF 58                      	pop rax
 25524 00012EB0 C60004                  	mov byte [rax], T_closure
 25525 00012EB3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25526 00012EB7 48C74009[C42E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac7
 25527 00012EBF E94F010000              	jmp .L_lambda_simple_end_0ac7
 25528                                  .L_lambda_simple_code_0ac7:	; lambda-simple body
 25529 00012EC4 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25530 00012ECA 740B                    	je .L_lambda_simple_arity_check_ok_0ac7
 25531 00012ECC FF742410                	push qword [rsp + 8 * 2]
 25532 00012ED0 6A03                    	push 3
 25533 00012ED2 E9A6550000              	jmp L_error_incorrect_arity_simple
 25534                                  .L_lambda_simple_arity_check_ok_0ac7:
 25535 00012ED7 C8000000                	enter 0, 0
 25536                                  	; preparing a non-tail-call
 25537 00012EDB 488B4530                	mov rax, PARAM(2)	; param n
 25538 00012EDF 50                      	push rax
 25539 00012EE0 488B4528                	mov rax, PARAM(1)	; param i
 25540 00012EE4 50                      	push rax
 25541 00012EE5 6A02                    	push 2	; arg count
 25542 00012EE7 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 25543 00012EEF 803805                  	cmp byte [rax], T_undefined
 25544 00012EF2 0F849F540000            	je L_error_fvar_undefined
 25545 00012EF8 803804                  	cmp byte [rax], T_closure
 25546 00012EFB 0F851A550000            	jne L_error_non_closure
 25547 00012F01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25548 00012F04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25549 00012F07 483D[02000000]          	cmp rax, sob_boolean_false
 25550 00012F0D 0F84F2000000            	je .L_if_else_081f
 25551                                  	; preparing a tail-call
 25552                                  	; preparing a non-tail-call
 25553 00012F13 488B4530                	mov rax, PARAM(2)	; param n
 25554 00012F17 50                      	push rax
 25555                                  	; preparing a non-tail-call
 25556 00012F18 48B8-                   	mov rax, L_constants + 2270
 25556 00012F1A [DE08000000000000] 
 25557 00012F22 50                      	push rax
 25558 00012F23 488B4528                	mov rax, PARAM(1)	; param i
 25559 00012F27 50                      	push rax
 25560 00012F28 6A02                    	push 2	; arg count
 25561 00012F2A 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 25562 00012F32 803805                  	cmp byte [rax], T_undefined
 25563 00012F35 0F845C540000            	je L_error_fvar_undefined
 25564 00012F3B 803804                  	cmp byte [rax], T_closure
 25565 00012F3E 0F85D7540000            	jne L_error_non_closure
 25566 00012F44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25567 00012F47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25568 00012F4A 50                      	push rax
 25569 00012F4B 488B4520                	mov rax, PARAM(0)	; param str
 25570 00012F4F 50                      	push rax
 25571 00012F50 6A03                    	push 3	; arg count
 25572 00012F52 488B4510                	mov rax, ENV
 25573 00012F56 488B00                  	mov rax, qword [rax + 8 * 0]
 25574 00012F59 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25575 00012F5C 488B00                  	mov rax, qword [rax]
 25576 00012F5F 803804                  	cmp byte [rax], T_closure
 25577 00012F62 0F85B3540000            	jne L_error_non_closure
 25578 00012F68 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25579 00012F6B FF5009                  	call SOB_CLOSURE_CODE(rax)
 25580 00012F6E 50                      	push rax
 25581                                  	; preparing a non-tail-call
 25582 00012F6F 488B4528                	mov rax, PARAM(1)	; param i
 25583 00012F73 50                      	push rax
 25584 00012F74 488B4520                	mov rax, PARAM(0)	; param str
 25585 00012F78 50                      	push rax
 25586 00012F79 6A02                    	push 2	; arg count
 25587 00012F7B 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 25588 00012F83 803805                  	cmp byte [rax], T_undefined
 25589 00012F86 0F840B540000            	je L_error_fvar_undefined
 25590 00012F8C 803804                  	cmp byte [rax], T_closure
 25591 00012F8F 0F8586540000            	jne L_error_non_closure
 25592 00012F95 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25593 00012F98 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25594 00012F9B 50                      	push rax
 25595 00012F9C 6A02                    	push 2	; arg count
 25596 00012F9E 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
 25597 00012FA6 803805                  	cmp byte [rax], T_undefined
 25598 00012FA9 0F84E8530000            	je L_error_fvar_undefined
 25599 00012FAF 803804                  	cmp byte [rax], T_closure
 25600 00012FB2 0F8563540000            	jne L_error_non_closure
 25601 00012FB8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25602 00012FBB FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25603 00012FBE FF7500                  	push qword[rbp]
 25604 00012FC1 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25605 00012FC4 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25606 00012FC8 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25607 00012FCC 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25608 00012FD0 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25609 00012FD3 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25610 00012FD6 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25611 00012FDB 4983C103                	add r9, 3 	 ;for getting to the params
 25612 00012FDF 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25613 00012FE3 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25614                                  .L_tc_recycle_frame_loop_0f20:
 25615 00012FE6 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25616 00012FE9 7410                    	je .L_tc_recycle_frame_done_0f20
 25617 00012FEB 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25618 00012FEE 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25619 00012FF1 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25620 00012FF5 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25621 00012FF9 EBEB                    	jmp .L_tc_recycle_frame_loop_0f20
 25622                                  .L_tc_recycle_frame_done_0f20:
 25623 00012FFB 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25624 00012FFC 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25625 00013000 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25626 00013003 EB0A                    	jmp .L_if_end_081f
 25627                                  .L_if_else_081f:
 25628 00013005 48B8-                   	mov rax, L_constants + 1
 25628 00013007 [0100000000000000] 
 25629                                  .L_if_end_081f:
 25630 0001300F C9                      	leave
 25631 00013010 C22800                  	ret AND_KILL_FRAME(3)
 25632                                  .L_lambda_simple_end_0ac7:	; new closure is in rax
 25633 00013013 50                      	push rax
 25634 00013014 488B4520                	mov rax, PARAM(0)	; param run
 25635 00013018 8F00                    	pop qword [rax]
 25636 0001301A 48B8-                   	mov rax, sob_void
 25636 0001301C [0000000000000000] 
 25637                                  
 25638 00013024 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25639 00013029 E896540000              	call malloc
 25640 0001302E 50                      	push rax
 25641 0001302F BF08000000              	mov rdi, 8 * 1	; new rib
 25642 00013034 E88B540000              	call malloc
 25643 00013039 50                      	push rax
 25644 0001303A BF10000000              	mov rdi, 8 * 2	; extended env
 25645 0001303F E880540000              	call malloc
 25646 00013044 488B7D10                	mov rdi, ENV
 25647 00013048 BE00000000              	mov rsi, 0
 25648 0001304D BA01000000              	mov rdx, 1
 25649                                  .L_lambda_simple_env_loop_0ac8:	; ext_env[i + 1] <-- env[i]
 25650 00013052 4883FE01                	cmp rsi, 1
 25651 00013056 7410                    	je .L_lambda_simple_env_end_0ac8
 25652 00013058 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25653 0001305C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25654 00013060 48FFC6                  	inc rsi
 25655 00013063 48FFC2                  	inc rdx
 25656 00013066 EBEA                    	jmp .L_lambda_simple_env_loop_0ac8
 25657                                  .L_lambda_simple_env_end_0ac8:
 25658 00013068 5B                      	pop rbx
 25659 00013069 BE00000000              	mov rsi, 0
 25660                                  .L_lambda_simple_params_loop_0ac8:	; copy params
 25661 0001306E 4883FE01                	cmp rsi, 1
 25662 00013072 740E                    	je .L_lambda_simple_params_end_0ac8
 25663 00013074 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25664 00013079 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25665 0001307D 48FFC6                  	inc rsi
 25666 00013080 EBEC                    	jmp .L_lambda_simple_params_loop_0ac8
 25667                                  .L_lambda_simple_params_end_0ac8:
 25668 00013082 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25669 00013085 4889C3                  	mov rbx, rax
 25670 00013088 58                      	pop rax
 25671 00013089 C60004                  	mov byte [rax], T_closure
 25672 0001308C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25673 00013090 48C74009[9D300100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac8
 25674 00013098 E9B6000000              	jmp .L_lambda_simple_end_0ac8
 25675                                  .L_lambda_simple_code_0ac8:	; lambda-simple body
 25676 0001309D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25677 000130A3 740B                    	je .L_lambda_simple_arity_check_ok_0ac8
 25678 000130A5 FF742410                	push qword [rsp + 8 * 2]
 25679 000130A9 6A01                    	push 1
 25680 000130AB E9CD530000              	jmp L_error_incorrect_arity_simple
 25681                                  .L_lambda_simple_arity_check_ok_0ac8:
 25682 000130B0 C8000000                	enter 0, 0
 25683                                  	; preparing a tail-call
 25684                                  	; preparing a non-tail-call
 25685 000130B4 488B4520                	mov rax, PARAM(0)	; param str
 25686 000130B8 50                      	push rax
 25687 000130B9 6A01                    	push 1	; arg count
 25688 000130BB 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 25689 000130C3 803805                  	cmp byte [rax], T_undefined
 25690 000130C6 0F84CB520000            	je L_error_fvar_undefined
 25691 000130CC 803804                  	cmp byte [rax], T_closure
 25692 000130CF 0F8546530000            	jne L_error_non_closure
 25693 000130D5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25694 000130D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25695 000130DB 50                      	push rax
 25696 000130DC 48B8-                   	mov rax, L_constants + 2135
 25696 000130DE [5708000000000000] 
 25697 000130E6 50                      	push rax
 25698 000130E7 488B4520                	mov rax, PARAM(0)	; param str
 25699 000130EB 50                      	push rax
 25700 000130EC 6A03                    	push 3	; arg count
 25701 000130EE 488B4510                	mov rax, ENV
 25702 000130F2 488B00                  	mov rax, qword [rax + 8 * 0]
 25703 000130F5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25704 000130F8 488B00                  	mov rax, qword [rax]
 25705 000130FB 803804                  	cmp byte [rax], T_closure
 25706 000130FE 0F8517530000            	jne L_error_non_closure
 25707 00013104 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25708 00013107 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25709 0001310A FF7500                  	push qword[rbp]
 25710 0001310D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25711 00013110 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25712 00013114 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25713 00013118 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25714 0001311C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25715 0001311F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25716 00013122 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25717 00013127 4983C103                	add r9, 3 	 ;for getting to the params
 25718 0001312B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25719 0001312F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25720                                  .L_tc_recycle_frame_loop_0f21:
 25721 00013132 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25722 00013135 7410                    	je .L_tc_recycle_frame_done_0f21
 25723 00013137 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25724 0001313A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25725 0001313D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25726 00013141 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25727 00013145 EBEB                    	jmp .L_tc_recycle_frame_loop_0f21
 25728                                  .L_tc_recycle_frame_done_0f21:
 25729 00013147 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25730 00013148 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25731 0001314C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25732 0001314F C9                      	leave
 25733 00013150 C21800                  	ret AND_KILL_FRAME(1)
 25734                                  .L_lambda_simple_end_0ac8:	; new closure is in rax
 25735 00013153 C9                      	leave
 25736 00013154 C21800                  	ret AND_KILL_FRAME(1)
 25737                                  .L_lambda_simple_end_0ac6:	; new closure is in rax
 25738 00013157 803804                  	cmp byte [rax], T_closure
 25739 0001315A 0F85BB520000            	jne L_error_non_closure
 25740 00013160 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25741 00013163 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25742 00013166 48890425[21170000]      	mov qword [free_var_119], rax
 25743 0001316E 48B8-                   	mov rax, sob_void
 25743 00013170 [0000000000000000] 
 25744                                  
 25745 00013178 4889C7                  	mov rdi, rax
 25746 0001317B E899550000              	call print_sexpr_if_not_void
 25747                                  	; preparing a non-tail-call
 25748 00013180 48B8-                   	mov rax, L_constants + 1993
 25748 00013182 [C907000000000000] 
 25749 0001318A 50                      	push rax
 25750 0001318B 6A01                    	push 1	; arg count
 25751 0001318D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25752 00013192 E82D530000              	call malloc
 25753 00013197 50                      	push rax
 25754 00013198 BF00000000              	mov rdi, 8 * 0	; new rib
 25755 0001319D E822530000              	call malloc
 25756 000131A2 50                      	push rax
 25757 000131A3 BF08000000              	mov rdi, 8 * 1	; extended env
 25758 000131A8 E817530000              	call malloc
 25759 000131AD 488B7D10                	mov rdi, ENV
 25760 000131B1 BE00000000              	mov rsi, 0
 25761 000131B6 BA01000000              	mov rdx, 1
 25762                                  .L_lambda_simple_env_loop_0ac9:	; ext_env[i + 1] <-- env[i]
 25763 000131BB 4883FE00                	cmp rsi, 0
 25764 000131BF 7410                    	je .L_lambda_simple_env_end_0ac9
 25765 000131C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25766 000131C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25767 000131C9 48FFC6                  	inc rsi
 25768 000131CC 48FFC2                  	inc rdx
 25769 000131CF EBEA                    	jmp .L_lambda_simple_env_loop_0ac9
 25770                                  .L_lambda_simple_env_end_0ac9:
 25771 000131D1 5B                      	pop rbx
 25772 000131D2 BE00000000              	mov rsi, 0
 25773                                  .L_lambda_simple_params_loop_0ac9:	; copy params
 25774 000131D7 4883FE00                	cmp rsi, 0
 25775 000131DB 740E                    	je .L_lambda_simple_params_end_0ac9
 25776 000131DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25777 000131E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25778 000131E6 48FFC6                  	inc rsi
 25779 000131E9 EBEC                    	jmp .L_lambda_simple_params_loop_0ac9
 25780                                  .L_lambda_simple_params_end_0ac9:
 25781 000131EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25782 000131EE 4889C3                  	mov rbx, rax
 25783 000131F1 58                      	pop rax
 25784 000131F2 C60004                  	mov byte [rax], T_closure
 25785 000131F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25786 000131F9 48C74009[06320100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ac9
 25787 00013201 E942030000              	jmp .L_lambda_simple_end_0ac9
 25788                                  .L_lambda_simple_code_0ac9:	; lambda-simple body
 25789 00013206 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25790 0001320C 740B                    	je .L_lambda_simple_arity_check_ok_0ac9
 25791 0001320E FF742410                	push qword [rsp + 8 * 2]
 25792 00013212 6A01                    	push 1
 25793 00013214 E964520000              	jmp L_error_incorrect_arity_simple
 25794                                  .L_lambda_simple_arity_check_ok_0ac9:
 25795 00013219 C8000000                	enter 0, 0
 25796 0001321D BF08000000              	mov rdi, 8*1
 25797 00013222 E89D520000              	call malloc
 25798 00013227 488B5D20                	mov rbx, PARAM(0)
 25799 0001322B 488918                  	mov qword[rax], rbx
 25800 0001322E 48894520                	mov PARAM(0), rax
 25801 00013232 48B8-                   	mov rax, sob_void
 25801 00013234 [0000000000000000] 
 25802                                  
 25803 0001323C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25804 00013241 E87E520000              	call malloc
 25805 00013246 50                      	push rax
 25806 00013247 BF08000000              	mov rdi, 8 * 1	; new rib
 25807 0001324C E873520000              	call malloc
 25808 00013251 50                      	push rax
 25809 00013252 BF10000000              	mov rdi, 8 * 2	; extended env
 25810 00013257 E868520000              	call malloc
 25811 0001325C 488B7D10                	mov rdi, ENV
 25812 00013260 BE00000000              	mov rsi, 0
 25813 00013265 BA01000000              	mov rdx, 1
 25814                                  .L_lambda_simple_env_loop_0aca:	; ext_env[i + 1] <-- env[i]
 25815 0001326A 4883FE01                	cmp rsi, 1
 25816 0001326E 7410                    	je .L_lambda_simple_env_end_0aca
 25817 00013270 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25818 00013274 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25819 00013278 48FFC6                  	inc rsi
 25820 0001327B 48FFC2                  	inc rdx
 25821 0001327E EBEA                    	jmp .L_lambda_simple_env_loop_0aca
 25822                                  .L_lambda_simple_env_end_0aca:
 25823 00013280 5B                      	pop rbx
 25824 00013281 BE00000000              	mov rsi, 0
 25825                                  .L_lambda_simple_params_loop_0aca:	; copy params
 25826 00013286 4883FE01                	cmp rsi, 1
 25827 0001328A 740E                    	je .L_lambda_simple_params_end_0aca
 25828 0001328C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25829 00013291 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25830 00013295 48FFC6                  	inc rsi
 25831 00013298 EBEC                    	jmp .L_lambda_simple_params_loop_0aca
 25832                                  .L_lambda_simple_params_end_0aca:
 25833 0001329A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25834 0001329D 4889C3                  	mov rbx, rax
 25835 000132A0 58                      	pop rax
 25836 000132A1 C60004                  	mov byte [rax], T_closure
 25837 000132A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25838 000132A8 48C74009[B5320100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aca
 25839 000132B0 E94F010000              	jmp .L_lambda_simple_end_0aca
 25840                                  .L_lambda_simple_code_0aca:	; lambda-simple body
 25841 000132B5 48837C241003            	cmp qword [rsp + 8 * 2], 3
 25842 000132BB 740B                    	je .L_lambda_simple_arity_check_ok_0aca
 25843 000132BD FF742410                	push qword [rsp + 8 * 2]
 25844 000132C1 6A03                    	push 3
 25845 000132C3 E9B5510000              	jmp L_error_incorrect_arity_simple
 25846                                  .L_lambda_simple_arity_check_ok_0aca:
 25847 000132C8 C8000000                	enter 0, 0
 25848                                  	; preparing a non-tail-call
 25849 000132CC 488B4530                	mov rax, PARAM(2)	; param n
 25850 000132D0 50                      	push rax
 25851 000132D1 488B4528                	mov rax, PARAM(1)	; param i
 25852 000132D5 50                      	push rax
 25853 000132D6 6A02                    	push 2	; arg count
 25854 000132D8 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 25855 000132E0 803805                  	cmp byte [rax], T_undefined
 25856 000132E3 0F84AE500000            	je L_error_fvar_undefined
 25857 000132E9 803804                  	cmp byte [rax], T_closure
 25858 000132EC 0F8529510000            	jne L_error_non_closure
 25859 000132F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25860 000132F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25861 000132F8 483D[02000000]          	cmp rax, sob_boolean_false
 25862 000132FE 0F84F2000000            	je .L_if_else_0820
 25863                                  	; preparing a tail-call
 25864                                  	; preparing a non-tail-call
 25865 00013304 488B4530                	mov rax, PARAM(2)	; param n
 25866 00013308 50                      	push rax
 25867                                  	; preparing a non-tail-call
 25868 00013309 48B8-                   	mov rax, L_constants + 2270
 25868 0001330B [DE08000000000000] 
 25869 00013313 50                      	push rax
 25870 00013314 488B4528                	mov rax, PARAM(1)	; param i
 25871 00013318 50                      	push rax
 25872 00013319 6A02                    	push 2	; arg count
 25873 0001331B 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 25874 00013323 803805                  	cmp byte [rax], T_undefined
 25875 00013326 0F846B500000            	je L_error_fvar_undefined
 25876 0001332C 803804                  	cmp byte [rax], T_closure
 25877 0001332F 0F85E6500000            	jne L_error_non_closure
 25878 00013335 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25879 00013338 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25880 0001333B 50                      	push rax
 25881 0001333C 488B4520                	mov rax, PARAM(0)	; param v
 25882 00013340 50                      	push rax
 25883 00013341 6A03                    	push 3	; arg count
 25884 00013343 488B4510                	mov rax, ENV
 25885 00013347 488B00                  	mov rax, qword [rax + 8 * 0]
 25886 0001334A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 25887 0001334D 488B00                  	mov rax, qword [rax]
 25888 00013350 803804                  	cmp byte [rax], T_closure
 25889 00013353 0F85C2500000            	jne L_error_non_closure
 25890 00013359 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25891 0001335C FF5009                  	call SOB_CLOSURE_CODE(rax)
 25892 0001335F 50                      	push rax
 25893                                  	; preparing a non-tail-call
 25894 00013360 488B4528                	mov rax, PARAM(1)	; param i
 25895 00013364 50                      	push rax
 25896 00013365 488B4520                	mov rax, PARAM(0)	; param v
 25897 00013369 50                      	push rax
 25898 0001336A 6A02                    	push 2	; arg count
 25899 0001336C 488B0425[DB180000]      	mov rax, qword [free_var_145]	; free var vector-ref
 25900 00013374 803805                  	cmp byte [rax], T_undefined
 25901 00013377 0F841A500000            	je L_error_fvar_undefined
 25902 0001337D 803804                  	cmp byte [rax], T_closure
 25903 00013380 0F8595500000            	jne L_error_non_closure
 25904 00013386 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25905 00013389 FF5009                  	call SOB_CLOSURE_CODE(rax)
 25906 0001338C 50                      	push rax
 25907 0001338D 6A02                    	push 2	; arg count
 25908 0001338F 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
 25909 00013397 803805                  	cmp byte [rax], T_undefined
 25910 0001339A 0F84F74F0000            	je L_error_fvar_undefined
 25911 000133A0 803804                  	cmp byte [rax], T_closure
 25912 000133A3 0F8572500000            	jne L_error_non_closure
 25913 000133A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 25914 000133AC FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 25915 000133AF FF7500                  	push qword[rbp]
 25916 000133B2 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 25917 000133B5 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 25918 000133B9 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 25919 000133BD 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 25920 000133C1 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 25921 000133C4 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 25922 000133C7 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 25923 000133CC 4983C103                	add r9, 3 	 ;for getting to the params
 25924 000133D0 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 25925 000133D4 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 25926                                  .L_tc_recycle_frame_loop_0f22:
 25927 000133D7 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 25928 000133DA 7410                    	je .L_tc_recycle_frame_done_0f22
 25929 000133DC 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 25930 000133DF 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 25931 000133E2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 25932 000133E6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 25933 000133EA EBEB                    	jmp .L_tc_recycle_frame_loop_0f22
 25934                                  .L_tc_recycle_frame_done_0f22:
 25935 000133EC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 25936 000133ED 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 25937 000133F1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 25938 000133F4 EB0A                    	jmp .L_if_end_0820
 25939                                  .L_if_else_0820:
 25940 000133F6 48B8-                   	mov rax, L_constants + 1
 25940 000133F8 [0100000000000000] 
 25941                                  .L_if_end_0820:
 25942 00013400 C9                      	leave
 25943 00013401 C22800                  	ret AND_KILL_FRAME(3)
 25944                                  .L_lambda_simple_end_0aca:	; new closure is in rax
 25945 00013404 50                      	push rax
 25946 00013405 488B4520                	mov rax, PARAM(0)	; param run
 25947 00013409 8F00                    	pop qword [rax]
 25948 0001340B 48B8-                   	mov rax, sob_void
 25948 0001340D [0000000000000000] 
 25949                                  
 25950 00013415 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 25951 0001341A E8A5500000              	call malloc
 25952 0001341F 50                      	push rax
 25953 00013420 BF08000000              	mov rdi, 8 * 1	; new rib
 25954 00013425 E89A500000              	call malloc
 25955 0001342A 50                      	push rax
 25956 0001342B BF10000000              	mov rdi, 8 * 2	; extended env
 25957 00013430 E88F500000              	call malloc
 25958 00013435 488B7D10                	mov rdi, ENV
 25959 00013439 BE00000000              	mov rsi, 0
 25960 0001343E BA01000000              	mov rdx, 1
 25961                                  .L_lambda_simple_env_loop_0acb:	; ext_env[i + 1] <-- env[i]
 25962 00013443 4883FE01                	cmp rsi, 1
 25963 00013447 7410                    	je .L_lambda_simple_env_end_0acb
 25964 00013449 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 25965 0001344D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 25966 00013451 48FFC6                  	inc rsi
 25967 00013454 48FFC2                  	inc rdx
 25968 00013457 EBEA                    	jmp .L_lambda_simple_env_loop_0acb
 25969                                  .L_lambda_simple_env_end_0acb:
 25970 00013459 5B                      	pop rbx
 25971 0001345A BE00000000              	mov rsi, 0
 25972                                  .L_lambda_simple_params_loop_0acb:	; copy params
 25973 0001345F 4883FE01                	cmp rsi, 1
 25974 00013463 740E                    	je .L_lambda_simple_params_end_0acb
 25975 00013465 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 25976 0001346A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 25977 0001346E 48FFC6                  	inc rsi
 25978 00013471 EBEC                    	jmp .L_lambda_simple_params_loop_0acb
 25979                                  .L_lambda_simple_params_end_0acb:
 25980 00013473 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 25981 00013476 4889C3                  	mov rbx, rax
 25982 00013479 58                      	pop rax
 25983 0001347A C60004                  	mov byte [rax], T_closure
 25984 0001347D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 25985 00013481 48C74009[8E340100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0acb
 25986 00013489 E9B6000000              	jmp .L_lambda_simple_end_0acb
 25987                                  .L_lambda_simple_code_0acb:	; lambda-simple body
 25988 0001348E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 25989 00013494 740B                    	je .L_lambda_simple_arity_check_ok_0acb
 25990 00013496 FF742410                	push qword [rsp + 8 * 2]
 25991 0001349A 6A01                    	push 1
 25992 0001349C E9DC4F0000              	jmp L_error_incorrect_arity_simple
 25993                                  .L_lambda_simple_arity_check_ok_0acb:
 25994 000134A1 C8000000                	enter 0, 0
 25995                                  	; preparing a tail-call
 25996                                  	; preparing a non-tail-call
 25997 000134A5 488B4520                	mov rax, PARAM(0)	; param v
 25998 000134A9 50                      	push rax
 25999 000134AA 6A01                    	push 1	; arg count
 26000 000134AC 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 26001 000134B4 803805                  	cmp byte [rax], T_undefined
 26002 000134B7 0F84DA4E0000            	je L_error_fvar_undefined
 26003 000134BD 803804                  	cmp byte [rax], T_closure
 26004 000134C0 0F85554F0000            	jne L_error_non_closure
 26005 000134C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26006 000134C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26007 000134CC 50                      	push rax
 26008 000134CD 48B8-                   	mov rax, L_constants + 2135
 26008 000134CF [5708000000000000] 
 26009 000134D7 50                      	push rax
 26010 000134D8 488B4520                	mov rax, PARAM(0)	; param v
 26011 000134DC 50                      	push rax
 26012 000134DD 6A03                    	push 3	; arg count
 26013 000134DF 488B4510                	mov rax, ENV
 26014 000134E3 488B00                  	mov rax, qword [rax + 8 * 0]
 26015 000134E6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 26016 000134E9 488B00                  	mov rax, qword [rax]
 26017 000134EC 803804                  	cmp byte [rax], T_closure
 26018 000134EF 0F85264F0000            	jne L_error_non_closure
 26019 000134F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26020 000134F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26021 000134FB FF7500                  	push qword[rbp]
 26022 000134FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26023 00013501 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26024 00013505 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26025 00013509 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26026 0001350D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26027 00013510 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26028 00013513 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26029 00013518 4983C103                	add r9, 3 	 ;for getting to the params
 26030 0001351C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26031 00013520 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26032                                  .L_tc_recycle_frame_loop_0f23:
 26033 00013523 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26034 00013526 7410                    	je .L_tc_recycle_frame_done_0f23
 26035 00013528 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26036 0001352B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26037 0001352E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26038 00013532 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26039 00013536 EBEB                    	jmp .L_tc_recycle_frame_loop_0f23
 26040                                  .L_tc_recycle_frame_done_0f23:
 26041 00013538 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26042 00013539 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26043 0001353D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26044 00013540 C9                      	leave
 26045 00013541 C21800                  	ret AND_KILL_FRAME(1)
 26046                                  .L_lambda_simple_end_0acb:	; new closure is in rax
 26047 00013544 C9                      	leave
 26048 00013545 C21800                  	ret AND_KILL_FRAME(1)
 26049                                  .L_lambda_simple_end_0ac9:	; new closure is in rax
 26050 00013548 803804                  	cmp byte [rax], T_closure
 26051 0001354B 0F85CA4E0000            	jne L_error_non_closure
 26052 00013551 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26053 00013554 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26054 00013557 48890425[A8180000]      	mov qword [free_var_142], rax
 26055 0001355F 48B8-                   	mov rax, sob_void
 26055 00013561 [0000000000000000] 
 26056                                  
 26057 00013569 4889C7                  	mov rdi, rax
 26058 0001356C E8A8510000              	call print_sexpr_if_not_void
 26059 00013571 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26060 00013576 E8494F0000              	call malloc
 26061 0001357B 50                      	push rax
 26062 0001357C BF00000000              	mov rdi, 8 * 0	; new rib
 26063 00013581 E83E4F0000              	call malloc
 26064 00013586 50                      	push rax
 26065 00013587 BF08000000              	mov rdi, 8 * 1	; extended env
 26066 0001358C E8334F0000              	call malloc
 26067 00013591 488B7D10                	mov rdi, ENV
 26068 00013595 BE00000000              	mov rsi, 0
 26069 0001359A BA01000000              	mov rdx, 1
 26070                                  .L_lambda_simple_env_loop_0acc:	; ext_env[i + 1] <-- env[i]
 26071 0001359F 4883FE00                	cmp rsi, 0
 26072 000135A3 7410                    	je .L_lambda_simple_env_end_0acc
 26073 000135A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26074 000135A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26075 000135AD 48FFC6                  	inc rsi
 26076 000135B0 48FFC2                  	inc rdx
 26077 000135B3 EBEA                    	jmp .L_lambda_simple_env_loop_0acc
 26078                                  .L_lambda_simple_env_end_0acc:
 26079 000135B5 5B                      	pop rbx
 26080 000135B6 BE00000000              	mov rsi, 0
 26081                                  .L_lambda_simple_params_loop_0acc:	; copy params
 26082 000135BB 4883FE00                	cmp rsi, 0
 26083 000135BF 740E                    	je .L_lambda_simple_params_end_0acc
 26084 000135C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26085 000135C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26086 000135CA 48FFC6                  	inc rsi
 26087 000135CD EBEC                    	jmp .L_lambda_simple_params_loop_0acc
 26088                                  .L_lambda_simple_params_end_0acc:
 26089 000135CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26090 000135D2 4889C3                  	mov rbx, rax
 26091 000135D5 58                      	pop rax
 26092 000135D6 C60004                  	mov byte [rax], T_closure
 26093 000135D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26094 000135DD 48C74009[EA350100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0acc
 26095 000135E5 E9AA000000              	jmp .L_lambda_simple_end_0acc
 26096                                  .L_lambda_simple_code_0acc:	; lambda-simple body
 26097 000135EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26098 000135F0 740B                    	je .L_lambda_simple_arity_check_ok_0acc
 26099 000135F2 FF742410                	push qword [rsp + 8 * 2]
 26100 000135F6 6A01                    	push 1
 26101 000135F8 E9804E0000              	jmp L_error_incorrect_arity_simple
 26102                                  .L_lambda_simple_arity_check_ok_0acc:
 26103 000135FD C8000000                	enter 0, 0
 26104                                  	; preparing a tail-call
 26105 00013601 488B4520                	mov rax, PARAM(0)	; param n
 26106 00013605 50                      	push rax
 26107                                  	; preparing a non-tail-call
 26108 00013606 6A00                    	push 0	; arg count
 26109 00013608 488B0425[86180000]      	mov rax, qword [free_var_140]	; free var trng
 26110 00013610 803805                  	cmp byte [rax], T_undefined
 26111 00013613 0F847E4D0000            	je L_error_fvar_undefined
 26112 00013619 803804                  	cmp byte [rax], T_closure
 26113 0001361C 0F85F94D0000            	jne L_error_non_closure
 26114 00013622 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26115 00013625 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26116 00013628 50                      	push rax
 26117 00013629 6A02                    	push 2	; arg count
 26118 0001362B 488B0425[FF160000]      	mov rax, qword [free_var_117]	; free var remainder
 26119 00013633 803805                  	cmp byte [rax], T_undefined
 26120 00013636 0F845B4D0000            	je L_error_fvar_undefined
 26121 0001363C 803804                  	cmp byte [rax], T_closure
 26122 0001363F 0F85D64D0000            	jne L_error_non_closure
 26123 00013645 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26124 00013648 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26125 0001364B FF7500                  	push qword[rbp]
 26126 0001364E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26127 00013651 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26128 00013655 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26129 00013659 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26130 0001365D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26131 00013660 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26132 00013663 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26133 00013668 4983C103                	add r9, 3 	 ;for getting to the params
 26134 0001366C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26135 00013670 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26136                                  .L_tc_recycle_frame_loop_0f24:
 26137 00013673 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26138 00013676 7410                    	je .L_tc_recycle_frame_done_0f24
 26139 00013678 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26140 0001367B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26141 0001367E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26142 00013682 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26143 00013686 EBEB                    	jmp .L_tc_recycle_frame_loop_0f24
 26144                                  .L_tc_recycle_frame_done_0f24:
 26145 00013688 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26146 00013689 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26147 0001368D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26148 00013690 C9                      	leave
 26149 00013691 C21800                  	ret AND_KILL_FRAME(1)
 26150                                  .L_lambda_simple_end_0acc:	; new closure is in rax
 26151 00013694 48890425[BB160000]      	mov qword [free_var_113], rax
 26152 0001369C 48B8-                   	mov rax, sob_void
 26152 0001369E [0000000000000000] 
 26153                                  
 26154 000136A6 4889C7                  	mov rdi, rax
 26155 000136A9 E86B500000              	call print_sexpr_if_not_void
 26156 000136AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26157 000136B3 E80C4E0000              	call malloc
 26158 000136B8 50                      	push rax
 26159 000136B9 BF00000000              	mov rdi, 8 * 0	; new rib
 26160 000136BE E8014E0000              	call malloc
 26161 000136C3 50                      	push rax
 26162 000136C4 BF08000000              	mov rdi, 8 * 1	; extended env
 26163 000136C9 E8F64D0000              	call malloc
 26164 000136CE 488B7D10                	mov rdi, ENV
 26165 000136D2 BE00000000              	mov rsi, 0
 26166 000136D7 BA01000000              	mov rdx, 1
 26167                                  .L_lambda_simple_env_loop_0acd:	; ext_env[i + 1] <-- env[i]
 26168 000136DC 4883FE00                	cmp rsi, 0
 26169 000136E0 7410                    	je .L_lambda_simple_env_end_0acd
 26170 000136E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26171 000136E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26172 000136EA 48FFC6                  	inc rsi
 26173 000136ED 48FFC2                  	inc rdx
 26174 000136F0 EBEA                    	jmp .L_lambda_simple_env_loop_0acd
 26175                                  .L_lambda_simple_env_end_0acd:
 26176 000136F2 5B                      	pop rbx
 26177 000136F3 BE00000000              	mov rsi, 0
 26178                                  .L_lambda_simple_params_loop_0acd:	; copy params
 26179 000136F8 4883FE00                	cmp rsi, 0
 26180 000136FC 740E                    	je .L_lambda_simple_params_end_0acd
 26181 000136FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26182 00013703 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26183 00013707 48FFC6                  	inc rsi
 26184 0001370A EBEC                    	jmp .L_lambda_simple_params_loop_0acd
 26185                                  .L_lambda_simple_params_end_0acd:
 26186 0001370C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26187 0001370F 4889C3                  	mov rbx, rax
 26188 00013712 58                      	pop rax
 26189 00013713 C60004                  	mov byte [rax], T_closure
 26190 00013716 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26191 0001371A 48C74009[27370100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0acd
 26192 00013722 E992000000              	jmp .L_lambda_simple_end_0acd
 26193                                  .L_lambda_simple_code_0acd:	; lambda-simple body
 26194 00013727 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26195 0001372D 740B                    	je .L_lambda_simple_arity_check_ok_0acd
 26196 0001372F FF742410                	push qword [rsp + 8 * 2]
 26197 00013733 6A01                    	push 1
 26198 00013735 E9434D0000              	jmp L_error_incorrect_arity_simple
 26199                                  .L_lambda_simple_arity_check_ok_0acd:
 26200 0001373A C8000000                	enter 0, 0
 26201                                  	; preparing a tail-call
 26202 0001373E 488B4520                	mov rax, PARAM(0)	; param x
 26203 00013742 50                      	push rax
 26204 00013743 48B8-                   	mov rax, L_constants + 2135
 26204 00013745 [5708000000000000] 
 26205 0001374D 50                      	push rax
 26206 0001374E 6A02                    	push 2	; arg count
 26207 00013750 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 26208 00013758 803805                  	cmp byte [rax], T_undefined
 26209 0001375B 0F84364C0000            	je L_error_fvar_undefined
 26210 00013761 803804                  	cmp byte [rax], T_closure
 26211 00013764 0F85B14C0000            	jne L_error_non_closure
 26212 0001376A FF7001                  	push SOB_CLOSURE_ENV(rax)
 26213 0001376D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26214 00013770 FF7500                  	push qword[rbp]
 26215 00013773 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26216 00013776 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26217 0001377A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26218 0001377E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26219 00013782 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26220 00013785 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26221 00013788 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26222 0001378D 4983C103                	add r9, 3 	 ;for getting to the params
 26223 00013791 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26224 00013795 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26225                                  .L_tc_recycle_frame_loop_0f25:
 26226 00013798 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26227 0001379B 7410                    	je .L_tc_recycle_frame_done_0f25
 26228 0001379D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26229 000137A0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26230 000137A3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26231 000137A7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26232 000137AB EBEB                    	jmp .L_tc_recycle_frame_loop_0f25
 26233                                  .L_tc_recycle_frame_done_0f25:
 26234 000137AD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26235 000137AE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26236 000137B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26237 000137B5 C9                      	leave
 26238 000137B6 C21800                  	ret AND_KILL_FRAME(1)
 26239                                  .L_lambda_simple_end_0acd:	; new closure is in rax
 26240 000137B9 48890425[AA160000]      	mov qword [free_var_112], rax
 26241 000137C1 48B8-                   	mov rax, sob_void
 26241 000137C3 [0000000000000000] 
 26242                                  
 26243 000137CB 4889C7                  	mov rdi, rax
 26244 000137CE E8464F0000              	call print_sexpr_if_not_void
 26245 000137D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26246 000137D8 E8E74C0000              	call malloc
 26247 000137DD 50                      	push rax
 26248 000137DE BF00000000              	mov rdi, 8 * 0	; new rib
 26249 000137E3 E8DC4C0000              	call malloc
 26250 000137E8 50                      	push rax
 26251 000137E9 BF08000000              	mov rdi, 8 * 1	; extended env
 26252 000137EE E8D14C0000              	call malloc
 26253 000137F3 488B7D10                	mov rdi, ENV
 26254 000137F7 BE00000000              	mov rsi, 0
 26255 000137FC BA01000000              	mov rdx, 1
 26256                                  .L_lambda_simple_env_loop_0ace:	; ext_env[i + 1] <-- env[i]
 26257 00013801 4883FE00                	cmp rsi, 0
 26258 00013805 7410                    	je .L_lambda_simple_env_end_0ace
 26259 00013807 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26260 0001380B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26261 0001380F 48FFC6                  	inc rsi
 26262 00013812 48FFC2                  	inc rdx
 26263 00013815 EBEA                    	jmp .L_lambda_simple_env_loop_0ace
 26264                                  .L_lambda_simple_env_end_0ace:
 26265 00013817 5B                      	pop rbx
 26266 00013818 BE00000000              	mov rsi, 0
 26267                                  .L_lambda_simple_params_loop_0ace:	; copy params
 26268 0001381D 4883FE00                	cmp rsi, 0
 26269 00013821 740E                    	je .L_lambda_simple_params_end_0ace
 26270 00013823 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26271 00013828 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26272 0001382C 48FFC6                  	inc rsi
 26273 0001382F EBEC                    	jmp .L_lambda_simple_params_loop_0ace
 26274                                  .L_lambda_simple_params_end_0ace:
 26275 00013831 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26276 00013834 4889C3                  	mov rbx, rax
 26277 00013837 58                      	pop rax
 26278 00013838 C60004                  	mov byte [rax], T_closure
 26279 0001383B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26280 0001383F 48C74009[4C380100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ace
 26281 00013847 E992000000              	jmp .L_lambda_simple_end_0ace
 26282                                  .L_lambda_simple_code_0ace:	; lambda-simple body
 26283 0001384C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26284 00013852 740B                    	je .L_lambda_simple_arity_check_ok_0ace
 26285 00013854 FF742410                	push qword [rsp + 8 * 2]
 26286 00013858 6A01                    	push 1
 26287 0001385A E91E4C0000              	jmp L_error_incorrect_arity_simple
 26288                                  .L_lambda_simple_arity_check_ok_0ace:
 26289 0001385F C8000000                	enter 0, 0
 26290                                  	; preparing a tail-call
 26291 00013863 48B8-                   	mov rax, L_constants + 2135
 26291 00013865 [5708000000000000] 
 26292 0001386D 50                      	push rax
 26293 0001386E 488B4520                	mov rax, PARAM(0)	; param x
 26294 00013872 50                      	push rax
 26295 00013873 6A02                    	push 2	; arg count
 26296 00013875 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 26297 0001387D 803805                  	cmp byte [rax], T_undefined
 26298 00013880 0F84114B0000            	je L_error_fvar_undefined
 26299 00013886 803804                  	cmp byte [rax], T_closure
 26300 00013889 0F858C4B0000            	jne L_error_non_closure
 26301 0001388F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26302 00013892 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26303 00013895 FF7500                  	push qword[rbp]
 26304 00013898 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26305 0001389B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26306 0001389F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26307 000138A3 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26308 000138A7 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26309 000138AA 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26310 000138AD 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26311 000138B2 4983C103                	add r9, 3 	 ;for getting to the params
 26312 000138B6 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26313 000138BA 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26314                                  .L_tc_recycle_frame_loop_0f26:
 26315 000138BD 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26316 000138C0 7410                    	je .L_tc_recycle_frame_done_0f26
 26317 000138C2 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26318 000138C5 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26319 000138C8 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26320 000138CC 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26321 000138D0 EBEB                    	jmp .L_tc_recycle_frame_loop_0f26
 26322                                  .L_tc_recycle_frame_done_0f26:
 26323 000138D2 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26324 000138D3 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26325 000138D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26326 000138DA C9                      	leave
 26327 000138DB C21800                  	ret AND_KILL_FRAME(1)
 26328                                  .L_lambda_simple_end_0ace:	; new closure is in rax
 26329 000138DE 48890425[22160000]      	mov qword [free_var_104], rax
 26330 000138E6 48B8-                   	mov rax, sob_void
 26330 000138E8 [0000000000000000] 
 26331                                  
 26332 000138F0 4889C7                  	mov rdi, rax
 26333 000138F3 E8214E0000              	call print_sexpr_if_not_void
 26334 000138F8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26335 000138FD E8C24B0000              	call malloc
 26336 00013902 50                      	push rax
 26337 00013903 BF00000000              	mov rdi, 8 * 0	; new rib
 26338 00013908 E8B74B0000              	call malloc
 26339 0001390D 50                      	push rax
 26340 0001390E BF08000000              	mov rdi, 8 * 1	; extended env
 26341 00013913 E8AC4B0000              	call malloc
 26342 00013918 488B7D10                	mov rdi, ENV
 26343 0001391C BE00000000              	mov rsi, 0
 26344 00013921 BA01000000              	mov rdx, 1
 26345                                  .L_lambda_simple_env_loop_0acf:	; ext_env[i + 1] <-- env[i]
 26346 00013926 4883FE00                	cmp rsi, 0
 26347 0001392A 7410                    	je .L_lambda_simple_env_end_0acf
 26348 0001392C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26349 00013930 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26350 00013934 48FFC6                  	inc rsi
 26351 00013937 48FFC2                  	inc rdx
 26352 0001393A EBEA                    	jmp .L_lambda_simple_env_loop_0acf
 26353                                  .L_lambda_simple_env_end_0acf:
 26354 0001393C 5B                      	pop rbx
 26355 0001393D BE00000000              	mov rsi, 0
 26356                                  .L_lambda_simple_params_loop_0acf:	; copy params
 26357 00013942 4883FE00                	cmp rsi, 0
 26358 00013946 740E                    	je .L_lambda_simple_params_end_0acf
 26359 00013948 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26360 0001394D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26361 00013951 48FFC6                  	inc rsi
 26362 00013954 EBEC                    	jmp .L_lambda_simple_params_loop_0acf
 26363                                  .L_lambda_simple_params_end_0acf:
 26364 00013956 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26365 00013959 4889C3                  	mov rbx, rax
 26366 0001395C 58                      	pop rax
 26367 0001395D C60004                  	mov byte [rax], T_closure
 26368 00013960 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26369 00013964 48C74009[71390100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0acf
 26370 0001396C E9B5000000              	jmp .L_lambda_simple_end_0acf
 26371                                  .L_lambda_simple_code_0acf:	; lambda-simple body
 26372 00013971 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26373 00013977 740B                    	je .L_lambda_simple_arity_check_ok_0acf
 26374 00013979 FF742410                	push qword [rsp + 8 * 2]
 26375 0001397D 6A01                    	push 1
 26376 0001397F E9F94A0000              	jmp L_error_incorrect_arity_simple
 26377                                  .L_lambda_simple_arity_check_ok_0acf:
 26378 00013984 C8000000                	enter 0, 0
 26379                                  	; preparing a tail-call
 26380                                  	; preparing a non-tail-call
 26381 00013988 48B8-                   	mov rax, L_constants + 3190
 26381 0001398A [760C000000000000] 
 26382 00013992 50                      	push rax
 26383 00013993 488B4520                	mov rax, PARAM(0)	; param n
 26384 00013997 50                      	push rax
 26385 00013998 6A02                    	push 2	; arg count
 26386 0001399A 488B0425[FF160000]      	mov rax, qword [free_var_117]	; free var remainder
 26387 000139A2 803805                  	cmp byte [rax], T_undefined
 26388 000139A5 0F84EC490000            	je L_error_fvar_undefined
 26389 000139AB 803804                  	cmp byte [rax], T_closure
 26390 000139AE 0F85674A0000            	jne L_error_non_closure
 26391 000139B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26392 000139B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26393 000139BA 50                      	push rax
 26394 000139BB 6A01                    	push 1	; arg count
 26395 000139BD 488B0425[52190000]      	mov rax, qword [free_var_152]	; free var zero?
 26396 000139C5 803805                  	cmp byte [rax], T_undefined
 26397 000139C8 0F84C9490000            	je L_error_fvar_undefined
 26398 000139CE 803804                  	cmp byte [rax], T_closure
 26399 000139D1 0F85444A0000            	jne L_error_non_closure
 26400 000139D7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26401 000139DA FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26402 000139DD FF7500                  	push qword[rbp]
 26403 000139E0 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26404 000139E3 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26405 000139E7 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26406 000139EB 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26407 000139EF 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26408 000139F2 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26409 000139F5 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26410 000139FA 4983C103                	add r9, 3 	 ;for getting to the params
 26411 000139FE 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26412 00013A02 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26413                                  .L_tc_recycle_frame_loop_0f27:
 26414 00013A05 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26415 00013A08 7410                    	je .L_tc_recycle_frame_done_0f27
 26416 00013A0A 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26417 00013A0D 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26418 00013A10 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26419 00013A14 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26420 00013A18 EBEB                    	jmp .L_tc_recycle_frame_loop_0f27
 26421                                  .L_tc_recycle_frame_done_0f27:
 26422 00013A1A 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26423 00013A1B 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26424 00013A1F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26425 00013A22 C9                      	leave
 26426 00013A23 C21800                  	ret AND_KILL_FRAME(1)
 26427                                  .L_lambda_simple_end_0acf:	; new closure is in rax
 26428 00013A26 48890425[BD140000]      	mov qword [free_var_83], rax
 26429 00013A2E 48B8-                   	mov rax, sob_void
 26429 00013A30 [0000000000000000] 
 26430                                  
 26431 00013A38 4889C7                  	mov rdi, rax
 26432 00013A3B E8D94C0000              	call print_sexpr_if_not_void
 26433 00013A40 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26434 00013A45 E87A4A0000              	call malloc
 26435 00013A4A 50                      	push rax
 26436 00013A4B BF00000000              	mov rdi, 8 * 0	; new rib
 26437 00013A50 E86F4A0000              	call malloc
 26438 00013A55 50                      	push rax
 26439 00013A56 BF08000000              	mov rdi, 8 * 1	; extended env
 26440 00013A5B E8644A0000              	call malloc
 26441 00013A60 488B7D10                	mov rdi, ENV
 26442 00013A64 BE00000000              	mov rsi, 0
 26443 00013A69 BA01000000              	mov rdx, 1
 26444                                  .L_lambda_simple_env_loop_0ad0:	; ext_env[i + 1] <-- env[i]
 26445 00013A6E 4883FE00                	cmp rsi, 0
 26446 00013A72 7410                    	je .L_lambda_simple_env_end_0ad0
 26447 00013A74 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26448 00013A78 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26449 00013A7C 48FFC6                  	inc rsi
 26450 00013A7F 48FFC2                  	inc rdx
 26451 00013A82 EBEA                    	jmp .L_lambda_simple_env_loop_0ad0
 26452                                  .L_lambda_simple_env_end_0ad0:
 26453 00013A84 5B                      	pop rbx
 26454 00013A85 BE00000000              	mov rsi, 0
 26455                                  .L_lambda_simple_params_loop_0ad0:	; copy params
 26456 00013A8A 4883FE00                	cmp rsi, 0
 26457 00013A8E 740E                    	je .L_lambda_simple_params_end_0ad0
 26458 00013A90 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26459 00013A95 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26460 00013A99 48FFC6                  	inc rsi
 26461 00013A9C EBEC                    	jmp .L_lambda_simple_params_loop_0ad0
 26462                                  .L_lambda_simple_params_end_0ad0:
 26463 00013A9E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26464 00013AA1 4889C3                  	mov rbx, rax
 26465 00013AA4 58                      	pop rax
 26466 00013AA5 C60004                  	mov byte [rax], T_closure
 26467 00013AA8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26468 00013AAC 48C74009[B93A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad0
 26469 00013AB4 E9AA000000              	jmp .L_lambda_simple_end_0ad0
 26470                                  .L_lambda_simple_code_0ad0:	; lambda-simple body
 26471 00013AB9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26472 00013ABF 740B                    	je .L_lambda_simple_arity_check_ok_0ad0
 26473 00013AC1 FF742410                	push qword [rsp + 8 * 2]
 26474 00013AC5 6A01                    	push 1
 26475 00013AC7 E9B1490000              	jmp L_error_incorrect_arity_simple
 26476                                  .L_lambda_simple_arity_check_ok_0ad0:
 26477 00013ACC C8000000                	enter 0, 0
 26478                                  	; preparing a tail-call
 26479                                  	; preparing a non-tail-call
 26480 00013AD0 488B4520                	mov rax, PARAM(0)	; param n
 26481 00013AD4 50                      	push rax
 26482 00013AD5 6A01                    	push 1	; arg count
 26483 00013AD7 488B0425[BD140000]      	mov rax, qword [free_var_83]	; free var even?
 26484 00013ADF 803805                  	cmp byte [rax], T_undefined
 26485 00013AE2 0F84AF480000            	je L_error_fvar_undefined
 26486 00013AE8 803804                  	cmp byte [rax], T_closure
 26487 00013AEB 0F852A490000            	jne L_error_non_closure
 26488 00013AF1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26489 00013AF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26490 00013AF7 50                      	push rax
 26491 00013AF8 6A01                    	push 1	; arg count
 26492 00013AFA 488B0425[44160000]      	mov rax, qword [free_var_106]	; free var not
 26493 00013B02 803805                  	cmp byte [rax], T_undefined
 26494 00013B05 0F848C480000            	je L_error_fvar_undefined
 26495 00013B0B 803804                  	cmp byte [rax], T_closure
 26496 00013B0E 0F8507490000            	jne L_error_non_closure
 26497 00013B14 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26498 00013B17 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26499 00013B1A FF7500                  	push qword[rbp]
 26500 00013B1D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26501 00013B20 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26502 00013B24 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26503 00013B28 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26504 00013B2C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26505 00013B2F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26506 00013B32 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26507 00013B37 4983C103                	add r9, 3 	 ;for getting to the params
 26508 00013B3B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26509 00013B3F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26510                                  .L_tc_recycle_frame_loop_0f28:
 26511 00013B42 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26512 00013B45 7410                    	je .L_tc_recycle_frame_done_0f28
 26513 00013B47 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26514 00013B4A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26515 00013B4D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26516 00013B51 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26517 00013B55 EBEB                    	jmp .L_tc_recycle_frame_loop_0f28
 26518                                  .L_tc_recycle_frame_done_0f28:
 26519 00013B57 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26520 00013B58 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26521 00013B5C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26522 00013B5F C9                      	leave
 26523 00013B60 C21800                  	ret AND_KILL_FRAME(1)
 26524                                  .L_lambda_simple_end_0ad0:	; new closure is in rax
 26525 00013B63 48890425[77160000]      	mov qword [free_var_109], rax
 26526 00013B6B 48B8-                   	mov rax, sob_void
 26526 00013B6D [0000000000000000] 
 26527                                  
 26528 00013B75 4889C7                  	mov rdi, rax
 26529 00013B78 E89C4B0000              	call print_sexpr_if_not_void
 26530 00013B7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26531 00013B82 E83D490000              	call malloc
 26532 00013B87 50                      	push rax
 26533 00013B88 BF00000000              	mov rdi, 8 * 0	; new rib
 26534 00013B8D E832490000              	call malloc
 26535 00013B92 50                      	push rax
 26536 00013B93 BF08000000              	mov rdi, 8 * 1	; extended env
 26537 00013B98 E827490000              	call malloc
 26538 00013B9D 488B7D10                	mov rdi, ENV
 26539 00013BA1 BE00000000              	mov rsi, 0
 26540 00013BA6 BA01000000              	mov rdx, 1
 26541                                  .L_lambda_simple_env_loop_0ad1:	; ext_env[i + 1] <-- env[i]
 26542 00013BAB 4883FE00                	cmp rsi, 0
 26543 00013BAF 7410                    	je .L_lambda_simple_env_end_0ad1
 26544 00013BB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26545 00013BB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26546 00013BB9 48FFC6                  	inc rsi
 26547 00013BBC 48FFC2                  	inc rdx
 26548 00013BBF EBEA                    	jmp .L_lambda_simple_env_loop_0ad1
 26549                                  .L_lambda_simple_env_end_0ad1:
 26550 00013BC1 5B                      	pop rbx
 26551 00013BC2 BE00000000              	mov rsi, 0
 26552                                  .L_lambda_simple_params_loop_0ad1:	; copy params
 26553 00013BC7 4883FE00                	cmp rsi, 0
 26554 00013BCB 740E                    	je .L_lambda_simple_params_end_0ad1
 26555 00013BCD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26556 00013BD2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26557 00013BD6 48FFC6                  	inc rsi
 26558 00013BD9 EBEC                    	jmp .L_lambda_simple_params_loop_0ad1
 26559                                  .L_lambda_simple_params_end_0ad1:
 26560 00013BDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26561 00013BDE 4889C3                  	mov rbx, rax
 26562 00013BE1 58                      	pop rax
 26563 00013BE2 C60004                  	mov byte [rax], T_closure
 26564 00013BE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26565 00013BE9 48C74009[F63B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad1
 26566 00013BF1 E9BC000000              	jmp .L_lambda_simple_end_0ad1
 26567                                  .L_lambda_simple_code_0ad1:	; lambda-simple body
 26568 00013BF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 26569 00013BFC 740B                    	je .L_lambda_simple_arity_check_ok_0ad1
 26570 00013BFE FF742410                	push qword [rsp + 8 * 2]
 26571 00013C02 6A01                    	push 1
 26572 00013C04 E974480000              	jmp L_error_incorrect_arity_simple
 26573                                  .L_lambda_simple_arity_check_ok_0ad1:
 26574 00013C09 C8000000                	enter 0, 0
 26575                                  	; preparing a non-tail-call
 26576 00013C0D 488B4520                	mov rax, PARAM(0)	; param x
 26577 00013C11 50                      	push rax
 26578 00013C12 6A01                    	push 1	; arg count
 26579 00013C14 488B0425[22160000]      	mov rax, qword [free_var_104]	; free var negative?
 26580 00013C1C 803805                  	cmp byte [rax], T_undefined
 26581 00013C1F 0F8472470000            	je L_error_fvar_undefined
 26582 00013C25 803804                  	cmp byte [rax], T_closure
 26583 00013C28 0F85ED470000            	jne L_error_non_closure
 26584 00013C2E FF7001                  	push SOB_CLOSURE_ENV(rax)
 26585 00013C31 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26586 00013C34 483D[02000000]          	cmp rax, sob_boolean_false
 26587 00013C3A 746E                    	je .L_if_else_0821
 26588                                  	; preparing a tail-call
 26589 00013C3C 488B4520                	mov rax, PARAM(0)	; param x
 26590 00013C40 50                      	push rax
 26591 00013C41 6A01                    	push 1	; arg count
 26592 00013C43 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 26593 00013C4B 803805                  	cmp byte [rax], T_undefined
 26594 00013C4E 0F8443470000            	je L_error_fvar_undefined
 26595 00013C54 803804                  	cmp byte [rax], T_closure
 26596 00013C57 0F85BE470000            	jne L_error_non_closure
 26597 00013C5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26598 00013C60 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26599 00013C63 FF7500                  	push qword[rbp]
 26600 00013C66 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26601 00013C69 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26602 00013C6D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26603 00013C71 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26604 00013C75 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26605 00013C78 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26606 00013C7B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26607 00013C80 4983C103                	add r9, 3 	 ;for getting to the params
 26608 00013C84 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26609 00013C88 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26610                                  .L_tc_recycle_frame_loop_0f29:
 26611 00013C8B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26612 00013C8E 7410                    	je .L_tc_recycle_frame_done_0f29
 26613 00013C90 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26614 00013C93 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26615 00013C96 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26616 00013C9A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26617 00013C9E EBEB                    	jmp .L_tc_recycle_frame_loop_0f29
 26618                                  .L_tc_recycle_frame_done_0f29:
 26619 00013CA0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26620 00013CA1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26621 00013CA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26622 00013CA8 EB04                    	jmp .L_if_end_0821
 26623                                  .L_if_else_0821:
 26624 00013CAA 488B4520                	mov rax, PARAM(0)	; param x
 26625                                  .L_if_end_0821:
 26626 00013CAE C9                      	leave
 26627 00013CAF C21800                  	ret AND_KILL_FRAME(1)
 26628                                  .L_lambda_simple_end_0ad1:	; new closure is in rax
 26629 00013CB2 48890425[38110000]      	mov qword [free_var_30], rax
 26630 00013CBA 48B8-                   	mov rax, sob_void
 26630 00013CBC [0000000000000000] 
 26631                                  
 26632 00013CC4 4889C7                  	mov rdi, rax
 26633 00013CC7 E84D4A0000              	call print_sexpr_if_not_void
 26634 00013CCC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 26635 00013CD1 E8EE470000              	call malloc
 26636 00013CD6 50                      	push rax
 26637 00013CD7 BF00000000              	mov rdi, 8 * 0	; new rib
 26638 00013CDC E8E3470000              	call malloc
 26639 00013CE1 50                      	push rax
 26640 00013CE2 BF08000000              	mov rdi, 8 * 1	; extended env
 26641 00013CE7 E8D8470000              	call malloc
 26642 00013CEC 488B7D10                	mov rdi, ENV
 26643 00013CF0 BE00000000              	mov rsi, 0
 26644 00013CF5 BA01000000              	mov rdx, 1
 26645                                  .L_lambda_simple_env_loop_0ad2:	; ext_env[i + 1] <-- env[i]
 26646 00013CFA 4883FE00                	cmp rsi, 0
 26647 00013CFE 7410                    	je .L_lambda_simple_env_end_0ad2
 26648 00013D00 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 26649 00013D04 48890CD0                	mov qword [rax + 8 * rdx], rcx
 26650 00013D08 48FFC6                  	inc rsi
 26651 00013D0B 48FFC2                  	inc rdx
 26652 00013D0E EBEA                    	jmp .L_lambda_simple_env_loop_0ad2
 26653                                  .L_lambda_simple_env_end_0ad2:
 26654 00013D10 5B                      	pop rbx
 26655 00013D11 BE00000000              	mov rsi, 0
 26656                                  .L_lambda_simple_params_loop_0ad2:	; copy params
 26657 00013D16 4883FE00                	cmp rsi, 0
 26658 00013D1A 740E                    	je .L_lambda_simple_params_end_0ad2
 26659 00013D1C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 26660 00013D21 488914F3                	mov qword [rbx + 8 * rsi], rdx
 26661 00013D25 48FFC6                  	inc rsi
 26662 00013D28 EBEC                    	jmp .L_lambda_simple_params_loop_0ad2
 26663                                  .L_lambda_simple_params_end_0ad2:
 26664 00013D2A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 26665 00013D2D 4889C3                  	mov rbx, rax
 26666 00013D30 58                      	pop rax
 26667 00013D31 C60004                  	mov byte [rax], T_closure
 26668 00013D34 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 26669 00013D38 48C74009[453D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad2
 26670 00013D40 E91B070000              	jmp .L_lambda_simple_end_0ad2
 26671                                  .L_lambda_simple_code_0ad2:	; lambda-simple body
 26672 00013D45 48837C241002            	cmp qword [rsp + 8 * 2], 2
 26673 00013D4B 740B                    	je .L_lambda_simple_arity_check_ok_0ad2
 26674 00013D4D FF742410                	push qword [rsp + 8 * 2]
 26675 00013D51 6A02                    	push 2
 26676 00013D53 E925470000              	jmp L_error_incorrect_arity_simple
 26677                                  .L_lambda_simple_arity_check_ok_0ad2:
 26678 00013D58 C8000000                	enter 0, 0
 26679                                  	; preparing a non-tail-call
 26680 00013D5C 488B4520                	mov rax, PARAM(0)	; param e1
 26681 00013D60 50                      	push rax
 26682 00013D61 6A01                    	push 1	; arg count
 26683 00013D63 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 26684 00013D6B 803805                  	cmp byte [rax], T_undefined
 26685 00013D6E 0F8423460000            	je L_error_fvar_undefined
 26686 00013D74 803804                  	cmp byte [rax], T_closure
 26687 00013D77 0F859E460000            	jne L_error_non_closure
 26688 00013D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 26689 00013D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26690 00013D83 483D[02000000]          	cmp rax, sob_boolean_false
 26691 00013D89 7429                    	je .L_if_else_0822
 26692                                  	; preparing a non-tail-call
 26693 00013D8B 488B4528                	mov rax, PARAM(1)	; param e2
 26694 00013D8F 50                      	push rax
 26695 00013D90 6A01                    	push 1	; arg count
 26696 00013D92 488B0425[99160000]      	mov rax, qword [free_var_111]	; free var pair?
 26697 00013D9A 803805                  	cmp byte [rax], T_undefined
 26698 00013D9D 0F84F4450000            	je L_error_fvar_undefined
 26699 00013DA3 803804                  	cmp byte [rax], T_closure
 26700 00013DA6 0F856F460000            	jne L_error_non_closure
 26701 00013DAC FF7001                  	push SOB_CLOSURE_ENV(rax)
 26702 00013DAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 26703 00013DB2 EB0A                    	jmp .L_if_end_0822
 26704                                  .L_if_else_0822:
 26705 00013DB4 48B8-                   	mov rax, L_constants + 2
 26705 00013DB6 [0200000000000000] 
 26706                                  .L_if_end_0822:
 26707 00013DBE 483D[02000000]          	cmp rax, sob_boolean_false
 26708 00013DC4 0F8446010000            	je .L_if_else_082e
 26709                                  	; preparing a non-tail-call
 26710                                  	; preparing a non-tail-call
 26711 00013DCA 488B4528                	mov rax, PARAM(1)	; param e2
 26712 00013DCE 50                      	push rax
 26713 00013DCF 6A01                    	push 1	; arg count
 26714 00013DD1 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 26715 00013DD9 803805                  	cmp byte [rax], T_undefined
 26716 00013DDC 0F84B5450000            	je L_error_fvar_undefined
 26717 00013DE2 803804                  	cmp byte [rax], T_closure
 26718 00013DE5 0F8530460000            	jne L_error_non_closure
 26719 00013DEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26720 00013DEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26721 00013DF1 50                      	push rax
 26722                                  	; preparing a non-tail-call
 26723 00013DF2 488B4520                	mov rax, PARAM(0)	; param e1
 26724 00013DF6 50                      	push rax
 26725 00013DF7 6A01                    	push 1	; arg count
 26726 00013DF9 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 26727 00013E01 803805                  	cmp byte [rax], T_undefined
 26728 00013E04 0F848D450000            	je L_error_fvar_undefined
 26729 00013E0A 803804                  	cmp byte [rax], T_closure
 26730 00013E0D 0F8508460000            	jne L_error_non_closure
 26731 00013E13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26732 00013E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26733 00013E19 50                      	push rax
 26734 00013E1A 6A02                    	push 2	; arg count
 26735 00013E1C 488B0425[9B140000]      	mov rax, qword [free_var_81]	; free var equal?
 26736 00013E24 803805                  	cmp byte [rax], T_undefined
 26737 00013E27 0F846A450000            	je L_error_fvar_undefined
 26738 00013E2D 803804                  	cmp byte [rax], T_closure
 26739 00013E30 0F85E5450000            	jne L_error_non_closure
 26740 00013E36 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26741 00013E39 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26742 00013E3C 483D[02000000]          	cmp rax, sob_boolean_false
 26743 00013E42 0F84B9000000            	je .L_if_else_0823
 26744                                  	; preparing a tail-call
 26745                                  	; preparing a non-tail-call
 26746 00013E48 488B4528                	mov rax, PARAM(1)	; param e2
 26747 00013E4C 50                      	push rax
 26748 00013E4D 6A01                    	push 1	; arg count
 26749 00013E4F 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 26750 00013E57 803805                  	cmp byte [rax], T_undefined
 26751 00013E5A 0F8437450000            	je L_error_fvar_undefined
 26752 00013E60 803804                  	cmp byte [rax], T_closure
 26753 00013E63 0F85B2450000            	jne L_error_non_closure
 26754 00013E69 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26755 00013E6C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26756 00013E6F 50                      	push rax
 26757                                  	; preparing a non-tail-call
 26758 00013E70 488B4520                	mov rax, PARAM(0)	; param e1
 26759 00013E74 50                      	push rax
 26760 00013E75 6A01                    	push 1	; arg count
 26761 00013E77 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 26762 00013E7F 803805                  	cmp byte [rax], T_undefined
 26763 00013E82 0F840F450000            	je L_error_fvar_undefined
 26764 00013E88 803804                  	cmp byte [rax], T_closure
 26765 00013E8B 0F858A450000            	jne L_error_non_closure
 26766 00013E91 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26767 00013E94 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26768 00013E97 50                      	push rax
 26769 00013E98 6A02                    	push 2	; arg count
 26770 00013E9A 488B0425[9B140000]      	mov rax, qword [free_var_81]	; free var equal?
 26771 00013EA2 803805                  	cmp byte [rax], T_undefined
 26772 00013EA5 0F84EC440000            	je L_error_fvar_undefined
 26773 00013EAB 803804                  	cmp byte [rax], T_closure
 26774 00013EAE 0F8567450000            	jne L_error_non_closure
 26775 00013EB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26776 00013EB7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26777 00013EBA FF7500                  	push qword[rbp]
 26778 00013EBD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26779 00013EC0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26780 00013EC4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26781 00013EC8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26782 00013ECC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26783 00013ECF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26784 00013ED2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26785 00013ED7 4983C103                	add r9, 3 	 ;for getting to the params
 26786 00013EDB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26787 00013EDF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26788                                  .L_tc_recycle_frame_loop_0f2a:
 26789 00013EE2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26790 00013EE5 7410                    	je .L_tc_recycle_frame_done_0f2a
 26791 00013EE7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26792 00013EEA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26793 00013EED 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26794 00013EF1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26795 00013EF5 EBEB                    	jmp .L_tc_recycle_frame_loop_0f2a
 26796                                  .L_tc_recycle_frame_done_0f2a:
 26797 00013EF7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26798 00013EF8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26799 00013EFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26800 00013EFF EB0A                    	jmp .L_if_end_0823
 26801                                  .L_if_else_0823:
 26802 00013F01 48B8-                   	mov rax, L_constants + 2
 26802 00013F03 [0200000000000000] 
 26803                                  .L_if_end_0823:
 26804 00013F0B E94C050000              	jmp .L_if_end_082e
 26805                                  .L_if_else_082e:
 26806                                  	; preparing a non-tail-call
 26807 00013F10 488B4520                	mov rax, PARAM(0)	; param e1
 26808 00013F14 50                      	push rax
 26809 00013F15 6A01                    	push 1	; arg count
 26810 00013F17 488B0425[1F190000]      	mov rax, qword [free_var_149]	; free var vector?
 26811 00013F1F 803805                  	cmp byte [rax], T_undefined
 26812 00013F22 0F846F440000            	je L_error_fvar_undefined
 26813 00013F28 803804                  	cmp byte [rax], T_closure
 26814 00013F2B 0F85EA440000            	jne L_error_non_closure
 26815 00013F31 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26816 00013F34 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26817 00013F37 483D[02000000]          	cmp rax, sob_boolean_false
 26818 00013F3D 0F84AF000000            	je .L_if_else_0825
 26819                                  	; preparing a non-tail-call
 26820 00013F43 488B4528                	mov rax, PARAM(1)	; param e2
 26821 00013F47 50                      	push rax
 26822 00013F48 6A01                    	push 1	; arg count
 26823 00013F4A 488B0425[1F190000]      	mov rax, qword [free_var_149]	; free var vector?
 26824 00013F52 803805                  	cmp byte [rax], T_undefined
 26825 00013F55 0F843C440000            	je L_error_fvar_undefined
 26826 00013F5B 803804                  	cmp byte [rax], T_closure
 26827 00013F5E 0F85B7440000            	jne L_error_non_closure
 26828 00013F64 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26829 00013F67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26830 00013F6A 483D[02000000]          	cmp rax, sob_boolean_false
 26831 00013F70 7474                    	je .L_if_else_0824
 26832                                  	; preparing a non-tail-call
 26833                                  	; preparing a non-tail-call
 26834 00013F72 488B4528                	mov rax, PARAM(1)	; param e2
 26835 00013F76 50                      	push rax
 26836 00013F77 6A01                    	push 1	; arg count
 26837 00013F79 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 26838 00013F81 803805                  	cmp byte [rax], T_undefined
 26839 00013F84 0F840D440000            	je L_error_fvar_undefined
 26840 00013F8A 803804                  	cmp byte [rax], T_closure
 26841 00013F8D 0F8588440000            	jne L_error_non_closure
 26842 00013F93 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26843 00013F96 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26844 00013F99 50                      	push rax
 26845                                  	; preparing a non-tail-call
 26846 00013F9A 488B4520                	mov rax, PARAM(0)	; param e1
 26847 00013F9E 50                      	push rax
 26848 00013F9F 6A01                    	push 1	; arg count
 26849 00013FA1 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 26850 00013FA9 803805                  	cmp byte [rax], T_undefined
 26851 00013FAC 0F84E5430000            	je L_error_fvar_undefined
 26852 00013FB2 803804                  	cmp byte [rax], T_closure
 26853 00013FB5 0F8560440000            	jne L_error_non_closure
 26854 00013FBB FF7001                  	push SOB_CLOSURE_ENV(rax)
 26855 00013FBE FF5009                  	call SOB_CLOSURE_CODE(rax)
 26856 00013FC1 50                      	push rax
 26857 00013FC2 6A02                    	push 2	; arg count
 26858 00013FC4 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 26859 00013FCC 803805                  	cmp byte [rax], T_undefined
 26860 00013FCF 0F84C2430000            	je L_error_fvar_undefined
 26861 00013FD5 803804                  	cmp byte [rax], T_closure
 26862 00013FD8 0F853D440000            	jne L_error_non_closure
 26863 00013FDE FF7001                  	push SOB_CLOSURE_ENV(rax)
 26864 00013FE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26865 00013FE4 EB0A                    	jmp .L_if_end_0824
 26866                                  .L_if_else_0824:
 26867 00013FE6 48B8-                   	mov rax, L_constants + 2
 26867 00013FE8 [0200000000000000] 
 26868                                  .L_if_end_0824:
 26869 00013FF0 EB0A                    	jmp .L_if_end_0825
 26870                                  .L_if_else_0825:
 26871 00013FF2 48B8-                   	mov rax, L_constants + 2
 26871 00013FF4 [0200000000000000] 
 26872                                  .L_if_end_0825:
 26873 00013FFC 483D[02000000]          	cmp rax, sob_boolean_false
 26874 00014002 0F84BC000000            	je .L_if_else_082d
 26875                                  	; preparing a tail-call
 26876                                  	; preparing a non-tail-call
 26877 00014008 488B4528                	mov rax, PARAM(1)	; param e2
 26878 0001400C 50                      	push rax
 26879 0001400D 6A01                    	push 1	; arg count
 26880 0001400F 488B0425[A8180000]      	mov rax, qword [free_var_142]	; free var vector->list
 26881 00014017 803805                  	cmp byte [rax], T_undefined
 26882 0001401A 0F8477430000            	je L_error_fvar_undefined
 26883 00014020 803804                  	cmp byte [rax], T_closure
 26884 00014023 0F85F2430000            	jne L_error_non_closure
 26885 00014029 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26886 0001402C FF5009                  	call SOB_CLOSURE_CODE(rax)
 26887 0001402F 50                      	push rax
 26888                                  	; preparing a non-tail-call
 26889 00014030 488B4520                	mov rax, PARAM(0)	; param e1
 26890 00014034 50                      	push rax
 26891 00014035 6A01                    	push 1	; arg count
 26892 00014037 488B0425[A8180000]      	mov rax, qword [free_var_142]	; free var vector->list
 26893 0001403F 803805                  	cmp byte [rax], T_undefined
 26894 00014042 0F844F430000            	je L_error_fvar_undefined
 26895 00014048 803804                  	cmp byte [rax], T_closure
 26896 0001404B 0F85CA430000            	jne L_error_non_closure
 26897 00014051 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26898 00014054 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26899 00014057 50                      	push rax
 26900 00014058 6A02                    	push 2	; arg count
 26901 0001405A 488B0425[9B140000]      	mov rax, qword [free_var_81]	; free var equal?
 26902 00014062 803805                  	cmp byte [rax], T_undefined
 26903 00014065 0F842C430000            	je L_error_fvar_undefined
 26904 0001406B 803804                  	cmp byte [rax], T_closure
 26905 0001406E 0F85A7430000            	jne L_error_non_closure
 26906 00014074 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26907 00014077 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 26908 0001407A FF7500                  	push qword[rbp]
 26909 0001407D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 26910 00014080 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 26911 00014084 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 26912 00014088 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 26913 0001408C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 26914 0001408F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 26915 00014092 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 26916 00014097 4983C103                	add r9, 3 	 ;for getting to the params
 26917 0001409B 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 26918 0001409F 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 26919                                  .L_tc_recycle_frame_loop_0f2b:
 26920 000140A2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 26921 000140A5 7410                    	je .L_tc_recycle_frame_done_0f2b
 26922 000140A7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 26923 000140AA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 26924 000140AD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 26925 000140B1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 26926 000140B5 EBEB                    	jmp .L_tc_recycle_frame_loop_0f2b
 26927                                  .L_tc_recycle_frame_done_0f2b:
 26928 000140B7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 26929 000140B8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 26930 000140BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 26931 000140BF E998030000              	jmp .L_if_end_082d
 26932                                  .L_if_else_082d:
 26933                                  	; preparing a non-tail-call
 26934 000140C4 488B4520                	mov rax, PARAM(0)	; param e1
 26935 000140C8 50                      	push rax
 26936 000140C9 6A01                    	push 1	; arg count
 26937 000140CB 488B0425[64180000]      	mov rax, qword [free_var_138]	; free var string?
 26938 000140D3 803805                  	cmp byte [rax], T_undefined
 26939 000140D6 0F84BB420000            	je L_error_fvar_undefined
 26940 000140DC 803804                  	cmp byte [rax], T_closure
 26941 000140DF 0F8536430000            	jne L_error_non_closure
 26942 000140E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26943 000140E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26944 000140EB 483D[02000000]          	cmp rax, sob_boolean_false
 26945 000140F1 0F84AF000000            	je .L_if_else_0827
 26946                                  	; preparing a non-tail-call
 26947 000140F7 488B4528                	mov rax, PARAM(1)	; param e2
 26948 000140FB 50                      	push rax
 26949 000140FC 6A01                    	push 1	; arg count
 26950 000140FE 488B0425[64180000]      	mov rax, qword [free_var_138]	; free var string?
 26951 00014106 803805                  	cmp byte [rax], T_undefined
 26952 00014109 0F8488420000            	je L_error_fvar_undefined
 26953 0001410F 803804                  	cmp byte [rax], T_closure
 26954 00014112 0F8503430000            	jne L_error_non_closure
 26955 00014118 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26956 0001411B FF5009                  	call SOB_CLOSURE_CODE(rax)
 26957 0001411E 483D[02000000]          	cmp rax, sob_boolean_false
 26958 00014124 7474                    	je .L_if_else_0826
 26959                                  	; preparing a non-tail-call
 26960                                  	; preparing a non-tail-call
 26961 00014126 488B4528                	mov rax, PARAM(1)	; param e2
 26962 0001412A 50                      	push rax
 26963 0001412B 6A01                    	push 1	; arg count
 26964 0001412D 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 26965 00014135 803805                  	cmp byte [rax], T_undefined
 26966 00014138 0F8459420000            	je L_error_fvar_undefined
 26967 0001413E 803804                  	cmp byte [rax], T_closure
 26968 00014141 0F85D4420000            	jne L_error_non_closure
 26969 00014147 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26970 0001414A FF5009                  	call SOB_CLOSURE_CODE(rax)
 26971 0001414D 50                      	push rax
 26972                                  	; preparing a non-tail-call
 26973 0001414E 488B4520                	mov rax, PARAM(0)	; param e1
 26974 00014152 50                      	push rax
 26975 00014153 6A01                    	push 1	; arg count
 26976 00014155 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 26977 0001415D 803805                  	cmp byte [rax], T_undefined
 26978 00014160 0F8431420000            	je L_error_fvar_undefined
 26979 00014166 803804                  	cmp byte [rax], T_closure
 26980 00014169 0F85AC420000            	jne L_error_non_closure
 26981 0001416F FF7001                  	push SOB_CLOSURE_ENV(rax)
 26982 00014172 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26983 00014175 50                      	push rax
 26984 00014176 6A02                    	push 2	; arg count
 26985 00014178 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 26986 00014180 803805                  	cmp byte [rax], T_undefined
 26987 00014183 0F840E420000            	je L_error_fvar_undefined
 26988 00014189 803804                  	cmp byte [rax], T_closure
 26989 0001418C 0F8589420000            	jne L_error_non_closure
 26990 00014192 FF7001                  	push SOB_CLOSURE_ENV(rax)
 26991 00014195 FF5009                  	call SOB_CLOSURE_CODE(rax)
 26992 00014198 EB0A                    	jmp .L_if_end_0826
 26993                                  .L_if_else_0826:
 26994 0001419A 48B8-                   	mov rax, L_constants + 2
 26994 0001419C [0200000000000000] 
 26995                                  .L_if_end_0826:
 26996 000141A4 EB0A                    	jmp .L_if_end_0827
 26997                                  .L_if_else_0827:
 26998 000141A6 48B8-                   	mov rax, L_constants + 2
 26998 000141A8 [0200000000000000] 
 26999                                  .L_if_end_0827:
 27000 000141B0 483D[02000000]          	cmp rax, sob_boolean_false
 27001 000141B6 7476                    	je .L_if_else_082c
 27002                                  	; preparing a tail-call
 27003 000141B8 488B4528                	mov rax, PARAM(1)	; param e2
 27004 000141BC 50                      	push rax
 27005 000141BD 488B4520                	mov rax, PARAM(0)	; param e1
 27006 000141C1 50                      	push rax
 27007 000141C2 6A02                    	push 2	; arg count
 27008 000141C4 488B0425[31180000]      	mov rax, qword [free_var_135]	; free var string=?
 27009 000141CC 803805                  	cmp byte [rax], T_undefined
 27010 000141CF 0F84C2410000            	je L_error_fvar_undefined
 27011 000141D5 803804                  	cmp byte [rax], T_closure
 27012 000141D8 0F853D420000            	jne L_error_non_closure
 27013 000141DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 27014 000141E1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27015 000141E4 FF7500                  	push qword[rbp]
 27016 000141E7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27017 000141EA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27018 000141EE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27019 000141F2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27020 000141F6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27021 000141F9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27022 000141FC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27023 00014201 4983C103                	add r9, 3 	 ;for getting to the params
 27024 00014205 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27025 00014209 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27026                                  .L_tc_recycle_frame_loop_0f2c:
 27027 0001420C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27028 0001420F 7410                    	je .L_tc_recycle_frame_done_0f2c
 27029 00014211 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27030 00014214 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27031 00014217 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27032 0001421B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27033 0001421F EBEB                    	jmp .L_tc_recycle_frame_loop_0f2c
 27034                                  .L_tc_recycle_frame_done_0f2c:
 27035 00014221 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27036 00014222 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27037 00014226 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27038 00014229 E92E020000              	jmp .L_if_end_082c
 27039                                  .L_if_else_082c:
 27040                                  	; preparing a non-tail-call
 27041 0001422E 488B4520                	mov rax, PARAM(0)	; param e1
 27042 00014232 50                      	push rax
 27043 00014233 6A01                    	push 1	; arg count
 27044 00014235 488B0425[66160000]      	mov rax, qword [free_var_108]	; free var number?
 27045 0001423D 803805                  	cmp byte [rax], T_undefined
 27046 00014240 0F8451410000            	je L_error_fvar_undefined
 27047 00014246 803804                  	cmp byte [rax], T_closure
 27048 00014249 0F85CC410000            	jne L_error_non_closure
 27049 0001424F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27050 00014252 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27051 00014255 483D[02000000]          	cmp rax, sob_boolean_false
 27052 0001425B 7429                    	je .L_if_else_0828
 27053                                  	; preparing a non-tail-call
 27054 0001425D 488B4528                	mov rax, PARAM(1)	; param e2
 27055 00014261 50                      	push rax
 27056 00014262 6A01                    	push 1	; arg count
 27057 00014264 488B0425[66160000]      	mov rax, qword [free_var_108]	; free var number?
 27058 0001426C 803805                  	cmp byte [rax], T_undefined
 27059 0001426F 0F8422410000            	je L_error_fvar_undefined
 27060 00014275 803804                  	cmp byte [rax], T_closure
 27061 00014278 0F859D410000            	jne L_error_non_closure
 27062 0001427E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27063 00014281 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27064 00014284 EB0A                    	jmp .L_if_end_0828
 27065                                  .L_if_else_0828:
 27066 00014286 48B8-                   	mov rax, L_constants + 2
 27066 00014288 [0200000000000000] 
 27067                                  .L_if_end_0828:
 27068 00014290 483D[02000000]          	cmp rax, sob_boolean_false
 27069 00014296 7476                    	je .L_if_else_082b
 27070                                  	; preparing a tail-call
 27071 00014298 488B4528                	mov rax, PARAM(1)	; param e2
 27072 0001429C 50                      	push rax
 27073 0001429D 488B4520                	mov rax, PARAM(0)	; param e1
 27074 000142A1 50                      	push rax
 27075 000142A2 6A02                    	push 2	; arg count
 27076 000142A4 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 27077 000142AC 803805                  	cmp byte [rax], T_undefined
 27078 000142AF 0F84E2400000            	je L_error_fvar_undefined
 27079 000142B5 803804                  	cmp byte [rax], T_closure
 27080 000142B8 0F855D410000            	jne L_error_non_closure
 27081 000142BE FF7001                  	push SOB_CLOSURE_ENV(rax)
 27082 000142C1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27083 000142C4 FF7500                  	push qword[rbp]
 27084 000142C7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27085 000142CA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27086 000142CE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27087 000142D2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27088 000142D6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27089 000142D9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27090 000142DC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27091 000142E1 4983C103                	add r9, 3 	 ;for getting to the params
 27092 000142E5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27093 000142E9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27094                                  .L_tc_recycle_frame_loop_0f2d:
 27095 000142EC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27096 000142EF 7410                    	je .L_tc_recycle_frame_done_0f2d
 27097 000142F1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27098 000142F4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27099 000142F7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27100 000142FB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27101 000142FF EBEB                    	jmp .L_tc_recycle_frame_loop_0f2d
 27102                                  .L_tc_recycle_frame_done_0f2d:
 27103 00014301 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27104 00014302 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27105 00014306 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27106 00014309 E94E010000              	jmp .L_if_end_082b
 27107                                  .L_if_else_082b:
 27108                                  	; preparing a non-tail-call
 27109 0001430E 488B4520                	mov rax, PARAM(0)	; param e1
 27110 00014312 50                      	push rax
 27111 00014313 6A01                    	push 1	; arg count
 27112 00014315 488B0425[68140000]      	mov rax, qword [free_var_78]	; free var char?
 27113 0001431D 803805                  	cmp byte [rax], T_undefined
 27114 00014320 0F8471400000            	je L_error_fvar_undefined
 27115 00014326 803804                  	cmp byte [rax], T_closure
 27116 00014329 0F85EC400000            	jne L_error_non_closure
 27117 0001432F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27118 00014332 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27119 00014335 483D[02000000]          	cmp rax, sob_boolean_false
 27120 0001433B 7429                    	je .L_if_else_0829
 27121                                  	; preparing a non-tail-call
 27122 0001433D 488B4528                	mov rax, PARAM(1)	; param e2
 27123 00014341 50                      	push rax
 27124 00014342 6A01                    	push 1	; arg count
 27125 00014344 488B0425[68140000]      	mov rax, qword [free_var_78]	; free var char?
 27126 0001434C 803805                  	cmp byte [rax], T_undefined
 27127 0001434F 0F8442400000            	je L_error_fvar_undefined
 27128 00014355 803804                  	cmp byte [rax], T_closure
 27129 00014358 0F85BD400000            	jne L_error_non_closure
 27130 0001435E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27131 00014361 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27132 00014364 EB0A                    	jmp .L_if_end_0829
 27133                                  .L_if_else_0829:
 27134 00014366 48B8-                   	mov rax, L_constants + 2
 27134 00014368 [0200000000000000] 
 27135                                  .L_if_end_0829:
 27136 00014370 483D[02000000]          	cmp rax, sob_boolean_false
 27137 00014376 7473                    	je .L_if_else_082a
 27138                                  	; preparing a tail-call
 27139 00014378 488B4528                	mov rax, PARAM(1)	; param e2
 27140 0001437C 50                      	push rax
 27141 0001437D 488B4520                	mov rax, PARAM(0)	; param e1
 27142 00014381 50                      	push rax
 27143 00014382 6A02                    	push 2	; arg count
 27144 00014384 488B0425[35140000]      	mov rax, qword [free_var_75]	; free var char=?
 27145 0001438C 803805                  	cmp byte [rax], T_undefined
 27146 0001438F 0F8402400000            	je L_error_fvar_undefined
 27147 00014395 803804                  	cmp byte [rax], T_closure
 27148 00014398 0F857D400000            	jne L_error_non_closure
 27149 0001439E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27150 000143A1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27151 000143A4 FF7500                  	push qword[rbp]
 27152 000143A7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27153 000143AA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27154 000143AE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27155 000143B2 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27156 000143B6 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27157 000143B9 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27158 000143BC 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27159 000143C1 4983C103                	add r9, 3 	 ;for getting to the params
 27160 000143C5 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27161 000143C9 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27162                                  .L_tc_recycle_frame_loop_0f2e:
 27163 000143CC 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27164 000143CF 7410                    	je .L_tc_recycle_frame_done_0f2e
 27165 000143D1 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27166 000143D4 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27167 000143D7 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27168 000143DB 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27169 000143DF EBEB                    	jmp .L_tc_recycle_frame_loop_0f2e
 27170                                  .L_tc_recycle_frame_done_0f2e:
 27171 000143E1 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27172 000143E2 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27173 000143E6 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27174 000143E9 EB71                    	jmp .L_if_end_082a
 27175                                  .L_if_else_082a:
 27176                                  	; preparing a tail-call
 27177 000143EB 488B4528                	mov rax, PARAM(1)	; param e2
 27178 000143EF 50                      	push rax
 27179 000143F0 488B4520                	mov rax, PARAM(0)	; param e1
 27180 000143F4 50                      	push rax
 27181 000143F5 6A02                    	push 2	; arg count
 27182 000143F7 488B0425[8A140000]      	mov rax, qword [free_var_80]	; free var eq?
 27183 000143FF 803805                  	cmp byte [rax], T_undefined
 27184 00014402 0F848F3F0000            	je L_error_fvar_undefined
 27185 00014408 803804                  	cmp byte [rax], T_closure
 27186 0001440B 0F850A400000            	jne L_error_non_closure
 27187 00014411 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27188 00014414 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27189 00014417 FF7500                  	push qword[rbp]
 27190 0001441A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27191 0001441D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27192 00014421 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27193 00014425 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27194 00014429 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27195 0001442C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27196 0001442F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27197 00014434 4983C103                	add r9, 3 	 ;for getting to the params
 27198 00014438 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27199 0001443C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27200                                  .L_tc_recycle_frame_loop_0f2f:
 27201 0001443F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27202 00014442 7410                    	je .L_tc_recycle_frame_done_0f2f
 27203 00014444 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27204 00014447 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27205 0001444A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27206 0001444E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27207 00014452 EBEB                    	jmp .L_tc_recycle_frame_loop_0f2f
 27208                                  .L_tc_recycle_frame_done_0f2f:
 27209 00014454 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27210 00014455 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27211 00014459 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27212                                  .L_if_end_082a:
 27213                                  .L_if_end_082b:
 27214                                  .L_if_end_082c:
 27215                                  .L_if_end_082d:
 27216                                  .L_if_end_082e:
 27217 0001445C C9                      	leave
 27218 0001445D C22000                  	ret AND_KILL_FRAME(2)
 27219                                  .L_lambda_simple_end_0ad2:	; new closure is in rax
 27220 00014460 48890425[9B140000]      	mov qword [free_var_81], rax
 27221 00014468 48B8-                   	mov rax, sob_void
 27221 0001446A [0000000000000000] 
 27222                                  
 27223 00014472 4889C7                  	mov rdi, rax
 27224 00014475 E89F420000              	call print_sexpr_if_not_void
 27225 0001447A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27226 0001447F E840400000              	call malloc
 27227 00014484 50                      	push rax
 27228 00014485 BF00000000              	mov rdi, 8 * 0	; new rib
 27229 0001448A E835400000              	call malloc
 27230 0001448F 50                      	push rax
 27231 00014490 BF08000000              	mov rdi, 8 * 1	; extended env
 27232 00014495 E82A400000              	call malloc
 27233 0001449A 488B7D10                	mov rdi, ENV
 27234 0001449E BE00000000              	mov rsi, 0
 27235 000144A3 BA01000000              	mov rdx, 1
 27236                                  .L_lambda_simple_env_loop_0ad3:	; ext_env[i + 1] <-- env[i]
 27237 000144A8 4883FE00                	cmp rsi, 0
 27238 000144AC 7410                    	je .L_lambda_simple_env_end_0ad3
 27239 000144AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27240 000144B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27241 000144B6 48FFC6                  	inc rsi
 27242 000144B9 48FFC2                  	inc rdx
 27243 000144BC EBEA                    	jmp .L_lambda_simple_env_loop_0ad3
 27244                                  .L_lambda_simple_env_end_0ad3:
 27245 000144BE 5B                      	pop rbx
 27246 000144BF BE00000000              	mov rsi, 0
 27247                                  .L_lambda_simple_params_loop_0ad3:	; copy params
 27248 000144C4 4883FE00                	cmp rsi, 0
 27249 000144C8 740E                    	je .L_lambda_simple_params_end_0ad3
 27250 000144CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27251 000144CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27252 000144D3 48FFC6                  	inc rsi
 27253 000144D6 EBEC                    	jmp .L_lambda_simple_params_loop_0ad3
 27254                                  .L_lambda_simple_params_end_0ad3:
 27255 000144D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27256 000144DB 4889C3                  	mov rbx, rax
 27257 000144DE 58                      	pop rax
 27258 000144DF C60004                  	mov byte [rax], T_closure
 27259 000144E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27260 000144E6 48C74009[F3440100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad3
 27261 000144EE E9B5010000              	jmp .L_lambda_simple_end_0ad3
 27262                                  .L_lambda_simple_code_0ad3:	; lambda-simple body
 27263 000144F3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27264 000144F9 740B                    	je .L_lambda_simple_arity_check_ok_0ad3
 27265 000144FB FF742410                	push qword [rsp + 8 * 2]
 27266 000144FF 6A02                    	push 2
 27267 00014501 E9773F0000              	jmp L_error_incorrect_arity_simple
 27268                                  .L_lambda_simple_arity_check_ok_0ad3:
 27269 00014506 C8000000                	enter 0, 0
 27270                                  	; preparing a non-tail-call
 27271 0001450A 488B4528                	mov rax, PARAM(1)	; param s
 27272 0001450E 50                      	push rax
 27273 0001450F 6A01                    	push 1	; arg count
 27274 00014511 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 27275 00014519 803805                  	cmp byte [rax], T_undefined
 27276 0001451C 0F84753E0000            	je L_error_fvar_undefined
 27277 00014522 803804                  	cmp byte [rax], T_closure
 27278 00014525 0F85F03E0000            	jne L_error_non_closure
 27279 0001452B FF7001                  	push SOB_CLOSURE_ENV(rax)
 27280 0001452E FF5009                  	call SOB_CLOSURE_CODE(rax)
 27281 00014531 483D[02000000]          	cmp rax, sob_boolean_false
 27282 00014537 740F                    	je .L_if_else_0830
 27283 00014539 48B8-                   	mov rax, L_constants + 2
 27283 0001453B [0200000000000000] 
 27284 00014543 E95C010000              	jmp .L_if_end_0830
 27285                                  .L_if_else_0830:
 27286                                  	; preparing a non-tail-call
 27287 00014548 488B4520                	mov rax, PARAM(0)	; param a
 27288 0001454C 50                      	push rax
 27289                                  	; preparing a non-tail-call
 27290 0001454D 488B4528                	mov rax, PARAM(1)	; param s
 27291 00014551 50                      	push rax
 27292 00014552 6A01                    	push 1	; arg count
 27293 00014554 488B0425[F3110000]      	mov rax, qword [free_var_41]	; free var caar
 27294 0001455C 803805                  	cmp byte [rax], T_undefined
 27295 0001455F 0F84323E0000            	je L_error_fvar_undefined
 27296 00014565 803804                  	cmp byte [rax], T_closure
 27297 00014568 0F85AD3E0000            	jne L_error_non_closure
 27298 0001456E FF7001                  	push SOB_CLOSURE_ENV(rax)
 27299 00014571 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27300 00014574 50                      	push rax
 27301 00014575 6A02                    	push 2	; arg count
 27302 00014577 488B0425[8A140000]      	mov rax, qword [free_var_80]	; free var eq?
 27303 0001457F 803805                  	cmp byte [rax], T_undefined
 27304 00014582 0F840F3E0000            	je L_error_fvar_undefined
 27305 00014588 803804                  	cmp byte [rax], T_closure
 27306 0001458B 0F858A3E0000            	jne L_error_non_closure
 27307 00014591 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27308 00014594 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27309 00014597 483D[02000000]          	cmp rax, sob_boolean_false
 27310 0001459D 7471                    	je .L_if_else_082f
 27311                                  	; preparing a tail-call
 27312 0001459F 488B4528                	mov rax, PARAM(1)	; param s
 27313 000145A3 50                      	push rax
 27314 000145A4 6A01                    	push 1	; arg count
 27315 000145A6 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 27316 000145AE 803805                  	cmp byte [rax], T_undefined
 27317 000145B1 0F84E03D0000            	je L_error_fvar_undefined
 27318 000145B7 803804                  	cmp byte [rax], T_closure
 27319 000145BA 0F855B3E0000            	jne L_error_non_closure
 27320 000145C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27321 000145C3 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27322 000145C6 FF7500                  	push qword[rbp]
 27323 000145C9 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27324 000145CC 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27325 000145D0 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27326 000145D4 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27327 000145D8 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27328 000145DB 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27329 000145DE 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27330 000145E3 4983C103                	add r9, 3 	 ;for getting to the params
 27331 000145E7 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27332 000145EB 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27333                                  .L_tc_recycle_frame_loop_0f30:
 27334 000145EE 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27335 000145F1 7410                    	je .L_tc_recycle_frame_done_0f30
 27336 000145F3 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27337 000145F6 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27338 000145F9 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27339 000145FD 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27340 00014601 EBEB                    	jmp .L_tc_recycle_frame_loop_0f30
 27341                                  .L_tc_recycle_frame_done_0f30:
 27342 00014603 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27343 00014604 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27344 00014608 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27345 0001460B E994000000              	jmp .L_if_end_082f
 27346                                  .L_if_else_082f:
 27347                                  	; preparing a tail-call
 27348                                  	; preparing a non-tail-call
 27349 00014610 488B4528                	mov rax, PARAM(1)	; param s
 27350 00014614 50                      	push rax
 27351 00014615 6A01                    	push 1	; arg count
 27352 00014617 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 27353 0001461F 803805                  	cmp byte [rax], T_undefined
 27354 00014622 0F846F3D0000            	je L_error_fvar_undefined
 27355 00014628 803804                  	cmp byte [rax], T_closure
 27356 0001462B 0F85EA3D0000            	jne L_error_non_closure
 27357 00014631 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27358 00014634 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27359 00014637 50                      	push rax
 27360 00014638 488B4520                	mov rax, PARAM(0)	; param a
 27361 0001463C 50                      	push rax
 27362 0001463D 6A02                    	push 2	; arg count
 27363 0001463F 488B0425[7C110000]      	mov rax, qword [free_var_34]	; free var assoc
 27364 00014647 803805                  	cmp byte [rax], T_undefined
 27365 0001464A 0F84473D0000            	je L_error_fvar_undefined
 27366 00014650 803804                  	cmp byte [rax], T_closure
 27367 00014653 0F85C23D0000            	jne L_error_non_closure
 27368 00014659 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27369 0001465C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27370 0001465F FF7500                  	push qword[rbp]
 27371 00014662 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27372 00014665 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27373 00014669 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27374 0001466D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27375 00014671 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27376 00014674 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27377 00014677 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27378 0001467C 4983C103                	add r9, 3 	 ;for getting to the params
 27379 00014680 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27380 00014684 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27381                                  .L_tc_recycle_frame_loop_0f31:
 27382 00014687 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27383 0001468A 7410                    	je .L_tc_recycle_frame_done_0f31
 27384 0001468C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27385 0001468F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27386 00014692 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27387 00014696 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27388 0001469A EBEB                    	jmp .L_tc_recycle_frame_loop_0f31
 27389                                  .L_tc_recycle_frame_done_0f31:
 27390 0001469C 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27391 0001469D 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27392 000146A1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27393                                  .L_if_end_082f:
 27394                                  .L_if_end_0830:
 27395 000146A4 C9                      	leave
 27396 000146A5 C22000                  	ret AND_KILL_FRAME(2)
 27397                                  .L_lambda_simple_end_0ad3:	; new closure is in rax
 27398 000146A8 48890425[7C110000]      	mov qword [free_var_34], rax
 27399 000146B0 48B8-                   	mov rax, sob_void
 27399 000146B2 [0000000000000000] 
 27400                                  
 27401 000146BA 4889C7                  	mov rdi, rax
 27402 000146BD E857400000              	call print_sexpr_if_not_void
 27403                                  	; preparing a non-tail-call
 27404 000146C2 48B8-                   	mov rax, L_constants + 1993
 27404 000146C4 [C907000000000000] 
 27405 000146CC 50                      	push rax
 27406 000146CD 48B8-                   	mov rax, L_constants + 1993
 27406 000146CF [C907000000000000] 
 27407 000146D7 50                      	push rax
 27408 000146D8 6A02                    	push 2	; arg count
 27409 000146DA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27410 000146DF E8E03D0000              	call malloc
 27411 000146E4 50                      	push rax
 27412 000146E5 BF00000000              	mov rdi, 8 * 0	; new rib
 27413 000146EA E8D53D0000              	call malloc
 27414 000146EF 50                      	push rax
 27415 000146F0 BF08000000              	mov rdi, 8 * 1	; extended env
 27416 000146F5 E8CA3D0000              	call malloc
 27417 000146FA 488B7D10                	mov rdi, ENV
 27418 000146FE BE00000000              	mov rsi, 0
 27419 00014703 BA01000000              	mov rdx, 1
 27420                                  .L_lambda_simple_env_loop_0ad4:	; ext_env[i + 1] <-- env[i]
 27421 00014708 4883FE00                	cmp rsi, 0
 27422 0001470C 7410                    	je .L_lambda_simple_env_end_0ad4
 27423 0001470E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27424 00014712 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27425 00014716 48FFC6                  	inc rsi
 27426 00014719 48FFC2                  	inc rdx
 27427 0001471C EBEA                    	jmp .L_lambda_simple_env_loop_0ad4
 27428                                  .L_lambda_simple_env_end_0ad4:
 27429 0001471E 5B                      	pop rbx
 27430 0001471F BE00000000              	mov rsi, 0
 27431                                  .L_lambda_simple_params_loop_0ad4:	; copy params
 27432 00014724 4883FE00                	cmp rsi, 0
 27433 00014728 740E                    	je .L_lambda_simple_params_end_0ad4
 27434 0001472A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27435 0001472F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27436 00014733 48FFC6                  	inc rsi
 27437 00014736 EBEC                    	jmp .L_lambda_simple_params_loop_0ad4
 27438                                  .L_lambda_simple_params_end_0ad4:
 27439 00014738 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27440 0001473B 4889C3                  	mov rbx, rax
 27441 0001473E 58                      	pop rax
 27442 0001473F C60004                  	mov byte [rax], T_closure
 27443 00014742 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27444 00014746 48C74009[53470100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad4
 27445 0001474E E918090000              	jmp .L_lambda_simple_end_0ad4
 27446                                  .L_lambda_simple_code_0ad4:	; lambda-simple body
 27447 00014753 48837C241002            	cmp qword [rsp + 8 * 2], 2
 27448 00014759 740B                    	je .L_lambda_simple_arity_check_ok_0ad4
 27449 0001475B FF742410                	push qword [rsp + 8 * 2]
 27450 0001475F 6A02                    	push 2
 27451 00014761 E9173D0000              	jmp L_error_incorrect_arity_simple
 27452                                  .L_lambda_simple_arity_check_ok_0ad4:
 27453 00014766 C8000000                	enter 0, 0
 27454 0001476A BF08000000              	mov rdi, 8*1
 27455 0001476F E8503D0000              	call malloc
 27456 00014774 488B5D20                	mov rbx, PARAM(0)
 27457 00014778 488918                  	mov qword[rax], rbx
 27458 0001477B 48894520                	mov PARAM(0), rax
 27459 0001477F 48B8-                   	mov rax, sob_void
 27459 00014781 [0000000000000000] 
 27460                                  
 27461 00014789 BF08000000              	mov rdi, 8*1
 27462 0001478E E8313D0000              	call malloc
 27463 00014793 488B5D28                	mov rbx, PARAM(1)
 27464 00014797 488918                  	mov qword[rax], rbx
 27465 0001479A 48894528                	mov PARAM(1), rax
 27466 0001479E 48B8-                   	mov rax, sob_void
 27466 000147A0 [0000000000000000] 
 27467                                  
 27468 000147A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27469 000147AD E8123D0000              	call malloc
 27470 000147B2 50                      	push rax
 27471 000147B3 BF10000000              	mov rdi, 8 * 2	; new rib
 27472 000147B8 E8073D0000              	call malloc
 27473 000147BD 50                      	push rax
 27474 000147BE BF10000000              	mov rdi, 8 * 2	; extended env
 27475 000147C3 E8FC3C0000              	call malloc
 27476 000147C8 488B7D10                	mov rdi, ENV
 27477 000147CC BE00000000              	mov rsi, 0
 27478 000147D1 BA01000000              	mov rdx, 1
 27479                                  .L_lambda_simple_env_loop_0ad5:	; ext_env[i + 1] <-- env[i]
 27480 000147D6 4883FE01                	cmp rsi, 1
 27481 000147DA 7410                    	je .L_lambda_simple_env_end_0ad5
 27482 000147DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27483 000147E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27484 000147E4 48FFC6                  	inc rsi
 27485 000147E7 48FFC2                  	inc rdx
 27486 000147EA EBEA                    	jmp .L_lambda_simple_env_loop_0ad5
 27487                                  .L_lambda_simple_env_end_0ad5:
 27488 000147EC 5B                      	pop rbx
 27489 000147ED BE00000000              	mov rsi, 0
 27490                                  .L_lambda_simple_params_loop_0ad5:	; copy params
 27491 000147F2 4883FE02                	cmp rsi, 2
 27492 000147F6 740E                    	je .L_lambda_simple_params_end_0ad5
 27493 000147F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27494 000147FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27495 00014801 48FFC6                  	inc rsi
 27496 00014804 EBEC                    	jmp .L_lambda_simple_params_loop_0ad5
 27497                                  .L_lambda_simple_params_end_0ad5:
 27498 00014806 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27499 00014809 4889C3                  	mov rbx, rax
 27500 0001480C 58                      	pop rax
 27501 0001480D C60004                  	mov byte [rax], T_closure
 27502 00014810 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27503 00014814 48C74009[21480100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad5
 27504 0001481C E988020000              	jmp .L_lambda_simple_end_0ad5
 27505                                  .L_lambda_simple_code_0ad5:	; lambda-simple body
 27506 00014821 48837C241003            	cmp qword [rsp + 8 * 2], 3
 27507 00014827 740B                    	je .L_lambda_simple_arity_check_ok_0ad5
 27508 00014829 FF742410                	push qword [rsp + 8 * 2]
 27509 0001482D 6A03                    	push 3
 27510 0001482F E9493C0000              	jmp L_error_incorrect_arity_simple
 27511                                  .L_lambda_simple_arity_check_ok_0ad5:
 27512 00014834 C8000000                	enter 0, 0
 27513                                  	; preparing a non-tail-call
 27514 00014838 488B4530                	mov rax, PARAM(2)	; param s
 27515 0001483C 50                      	push rax
 27516 0001483D 6A01                    	push 1	; arg count
 27517 0001483F 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 27518 00014847 803805                  	cmp byte [rax], T_undefined
 27519 0001484A 0F84473B0000            	je L_error_fvar_undefined
 27520 00014850 803804                  	cmp byte [rax], T_closure
 27521 00014853 0F85C23B0000            	jne L_error_non_closure
 27522 00014859 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27523 0001485C FF5009                  	call SOB_CLOSURE_CODE(rax)
 27524 0001485F 483D[02000000]          	cmp rax, sob_boolean_false
 27525 00014865 7409                    	je .L_if_else_0831
 27526 00014867 488B4520                	mov rax, PARAM(0)	; param target
 27527 0001486B E935020000              	jmp .L_if_end_0831
 27528                                  .L_if_else_0831:
 27529                                  	; preparing a tail-call
 27530                                  	; preparing a non-tail-call
 27531                                  	; preparing a non-tail-call
 27532                                  	; preparing a non-tail-call
 27533 00014870 488B4530                	mov rax, PARAM(2)	; param s
 27534 00014874 50                      	push rax
 27535 00014875 6A01                    	push 1	; arg count
 27536 00014877 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 27537 0001487F 803805                  	cmp byte [rax], T_undefined
 27538 00014882 0F840F3B0000            	je L_error_fvar_undefined
 27539 00014888 803804                  	cmp byte [rax], T_closure
 27540 0001488B 0F858A3B0000            	jne L_error_non_closure
 27541 00014891 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27542 00014894 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27543 00014897 50                      	push rax
 27544 00014898 6A01                    	push 1	; arg count
 27545 0001489A 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 27546 000148A2 803805                  	cmp byte [rax], T_undefined
 27547 000148A5 0F84EC3A0000            	je L_error_fvar_undefined
 27548 000148AB 803804                  	cmp byte [rax], T_closure
 27549 000148AE 0F85673B0000            	jne L_error_non_closure
 27550 000148B4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27551 000148B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27552 000148BA 50                      	push rax
 27553 000148BB 48B8-                   	mov rax, L_constants + 2135
 27553 000148BD [5708000000000000] 
 27554 000148C5 50                      	push rax
 27555                                  	; preparing a non-tail-call
 27556 000148C6 488B4530                	mov rax, PARAM(2)	; param s
 27557 000148CA 50                      	push rax
 27558 000148CB 6A01                    	push 1	; arg count
 27559 000148CD 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 27560 000148D5 803805                  	cmp byte [rax], T_undefined
 27561 000148D8 0F84B93A0000            	je L_error_fvar_undefined
 27562 000148DE 803804                  	cmp byte [rax], T_closure
 27563 000148E1 0F85343B0000            	jne L_error_non_closure
 27564 000148E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27565 000148EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 27566 000148ED 50                      	push rax
 27567 000148EE 488B4528                	mov rax, PARAM(1)	; param i
 27568 000148F2 50                      	push rax
 27569 000148F3 488B4520                	mov rax, PARAM(0)	; param target
 27570 000148F7 50                      	push rax
 27571 000148F8 6A05                    	push 5	; arg count
 27572 000148FA 488B4510                	mov rax, ENV
 27573 000148FE 488B00                  	mov rax, qword [rax + 8 * 0]
 27574 00014901 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27575 00014905 488B00                  	mov rax, qword [rax]
 27576 00014908 803804                  	cmp byte [rax], T_closure
 27577 0001490B 0F850A3B0000            	jne L_error_non_closure
 27578 00014911 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27579 00014914 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27580 00014917 50                      	push rax
 27581 00014918 6A01                    	push 1	; arg count
 27582 0001491A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27583 0001491F E8A03B0000              	call malloc
 27584 00014924 50                      	push rax
 27585 00014925 BF18000000              	mov rdi, 8 * 3	; new rib
 27586 0001492A E8953B0000              	call malloc
 27587 0001492F 50                      	push rax
 27588 00014930 BF18000000              	mov rdi, 8 * 3	; extended env
 27589 00014935 E88A3B0000              	call malloc
 27590 0001493A 488B7D10                	mov rdi, ENV
 27591 0001493E BE00000000              	mov rsi, 0
 27592 00014943 BA01000000              	mov rdx, 1
 27593                                  .L_lambda_simple_env_loop_0ad6:	; ext_env[i + 1] <-- env[i]
 27594 00014948 4883FE02                	cmp rsi, 2
 27595 0001494C 7410                    	je .L_lambda_simple_env_end_0ad6
 27596 0001494E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27597 00014952 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27598 00014956 48FFC6                  	inc rsi
 27599 00014959 48FFC2                  	inc rdx
 27600 0001495C EBEA                    	jmp .L_lambda_simple_env_loop_0ad6
 27601                                  .L_lambda_simple_env_end_0ad6:
 27602 0001495E 5B                      	pop rbx
 27603 0001495F BE00000000              	mov rsi, 0
 27604                                  .L_lambda_simple_params_loop_0ad6:	; copy params
 27605 00014964 4883FE03                	cmp rsi, 3
 27606 00014968 740E                    	je .L_lambda_simple_params_end_0ad6
 27607 0001496A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27608 0001496F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27609 00014973 48FFC6                  	inc rsi
 27610 00014976 EBEC                    	jmp .L_lambda_simple_params_loop_0ad6
 27611                                  .L_lambda_simple_params_end_0ad6:
 27612 00014978 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27613 0001497B 4889C3                  	mov rbx, rax
 27614 0001497E 58                      	pop rax
 27615 0001497F C60004                  	mov byte [rax], T_closure
 27616 00014982 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27617 00014986 48C74009[93490100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad6
 27618 0001498E E9BE000000              	jmp .L_lambda_simple_end_0ad6
 27619                                  .L_lambda_simple_code_0ad6:	; lambda-simple body
 27620 00014993 48837C241001            	cmp qword [rsp + 8 * 2], 1
 27621 00014999 740B                    	je .L_lambda_simple_arity_check_ok_0ad6
 27622 0001499B FF742410                	push qword [rsp + 8 * 2]
 27623 0001499F 6A01                    	push 1
 27624 000149A1 E9D73A0000              	jmp L_error_incorrect_arity_simple
 27625                                  .L_lambda_simple_arity_check_ok_0ad6:
 27626 000149A6 C8000000                	enter 0, 0
 27627                                  	; preparing a tail-call
 27628                                  	; preparing a non-tail-call
 27629 000149AA 488B4510                	mov rax, ENV
 27630 000149AE 488B00                  	mov rax, qword [rax + 8 * 0]
 27631 000149B1 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 27632 000149B5 50                      	push rax
 27633 000149B6 6A01                    	push 1	; arg count
 27634 000149B8 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 27635 000149C0 803805                  	cmp byte [rax], T_undefined
 27636 000149C3 0F84CE390000            	je L_error_fvar_undefined
 27637 000149C9 803804                  	cmp byte [rax], T_closure
 27638 000149CC 0F85493A0000            	jne L_error_non_closure
 27639 000149D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27640 000149D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27641 000149D8 50                      	push rax
 27642 000149D9 488B4520                	mov rax, PARAM(0)	; param i
 27643 000149DD 50                      	push rax
 27644 000149DE 488B4510                	mov rax, ENV
 27645 000149E2 488B00                  	mov rax, qword [rax + 8 * 0]
 27646 000149E5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 27647 000149E8 50                      	push rax
 27648 000149E9 6A03                    	push 3	; arg count
 27649 000149EB 488B4510                	mov rax, ENV
 27650 000149EF 488B4008                	mov rax, qword [rax + 8 * 1]
 27651 000149F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27652 000149F6 488B00                  	mov rax, qword [rax]
 27653 000149F9 803804                  	cmp byte [rax], T_closure
 27654 000149FC 0F85193A0000            	jne L_error_non_closure
 27655 00014A02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27656 00014A05 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27657 00014A08 FF7500                  	push qword[rbp]
 27658 00014A0B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27659 00014A0E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27660 00014A12 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27661 00014A16 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27662 00014A1A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27663 00014A1D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27664 00014A20 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27665 00014A25 4983C103                	add r9, 3 	 ;for getting to the params
 27666 00014A29 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27667 00014A2D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27668                                  .L_tc_recycle_frame_loop_0f32:
 27669 00014A30 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27670 00014A33 7410                    	je .L_tc_recycle_frame_done_0f32
 27671 00014A35 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27672 00014A38 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27673 00014A3B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27674 00014A3F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27675 00014A43 EBEB                    	jmp .L_tc_recycle_frame_loop_0f32
 27676                                  .L_tc_recycle_frame_done_0f32:
 27677 00014A45 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27678 00014A46 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27679 00014A4A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27680 00014A4D C9                      	leave
 27681 00014A4E C21800                  	ret AND_KILL_FRAME(1)
 27682                                  .L_lambda_simple_end_0ad6:	; new closure is in rax
 27683 00014A51 803804                  	cmp byte [rax], T_closure
 27684 00014A54 0F85C1390000            	jne L_error_non_closure
 27685 00014A5A FF7001                  	push SOB_CLOSURE_ENV(rax)
 27686 00014A5D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27687 00014A60 FF7500                  	push qword[rbp]
 27688 00014A63 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27689 00014A66 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27690 00014A6A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27691 00014A6E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27692 00014A72 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27693 00014A75 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27694 00014A78 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27695 00014A7D 4983C103                	add r9, 3 	 ;for getting to the params
 27696 00014A81 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27697 00014A85 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27698                                  .L_tc_recycle_frame_loop_0f33:
 27699 00014A88 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27700 00014A8B 7410                    	je .L_tc_recycle_frame_done_0f33
 27701 00014A8D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27702 00014A90 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27703 00014A93 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27704 00014A97 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27705 00014A9B EBEB                    	jmp .L_tc_recycle_frame_loop_0f33
 27706                                  .L_tc_recycle_frame_done_0f33:
 27707 00014A9D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27708 00014A9E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27709 00014AA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27710                                  .L_if_end_0831:
 27711 00014AA5 C9                      	leave
 27712 00014AA6 C22800                  	ret AND_KILL_FRAME(3)
 27713                                  .L_lambda_simple_end_0ad5:	; new closure is in rax
 27714 00014AA9 50                      	push rax
 27715 00014AAA 488B4520                	mov rax, PARAM(0)	; param run
 27716 00014AAE 8F00                    	pop qword [rax]
 27717 00014AB0 48B8-                   	mov rax, sob_void
 27717 00014AB2 [0000000000000000] 
 27718                                  
 27719 00014ABA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27720 00014ABF E8003A0000              	call malloc
 27721 00014AC4 50                      	push rax
 27722 00014AC5 BF10000000              	mov rdi, 8 * 2	; new rib
 27723 00014ACA E8F5390000              	call malloc
 27724 00014ACF 50                      	push rax
 27725 00014AD0 BF10000000              	mov rdi, 8 * 2	; extended env
 27726 00014AD5 E8EA390000              	call malloc
 27727 00014ADA 488B7D10                	mov rdi, ENV
 27728 00014ADE BE00000000              	mov rsi, 0
 27729 00014AE3 BA01000000              	mov rdx, 1
 27730                                  .L_lambda_simple_env_loop_0ad7:	; ext_env[i + 1] <-- env[i]
 27731 00014AE8 4883FE01                	cmp rsi, 1
 27732 00014AEC 7410                    	je .L_lambda_simple_env_end_0ad7
 27733 00014AEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27734 00014AF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27735 00014AF6 48FFC6                  	inc rsi
 27736 00014AF9 48FFC2                  	inc rdx
 27737 00014AFC EBEA                    	jmp .L_lambda_simple_env_loop_0ad7
 27738                                  .L_lambda_simple_env_end_0ad7:
 27739 00014AFE 5B                      	pop rbx
 27740 00014AFF BE00000000              	mov rsi, 0
 27741                                  .L_lambda_simple_params_loop_0ad7:	; copy params
 27742 00014B04 4883FE02                	cmp rsi, 2
 27743 00014B08 740E                    	je .L_lambda_simple_params_end_0ad7
 27744 00014B0A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27745 00014B0F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27746 00014B13 48FFC6                  	inc rsi
 27747 00014B16 EBEC                    	jmp .L_lambda_simple_params_loop_0ad7
 27748                                  .L_lambda_simple_params_end_0ad7:
 27749 00014B18 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 27750 00014B1B 4889C3                  	mov rbx, rax
 27751 00014B1E 58                      	pop rax
 27752 00014B1F C60004                  	mov byte [rax], T_closure
 27753 00014B22 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27754 00014B26 48C74009[334B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad7
 27755 00014B2E E98B010000              	jmp .L_lambda_simple_end_0ad7
 27756                                  .L_lambda_simple_code_0ad7:	; lambda-simple body
 27757 00014B33 48837C241005            	cmp qword [rsp + 8 * 2], 5
 27758 00014B39 740B                    	je .L_lambda_simple_arity_check_ok_0ad7
 27759 00014B3B FF742410                	push qword [rsp + 8 * 2]
 27760 00014B3F 6A05                    	push 5
 27761 00014B41 E937390000              	jmp L_error_incorrect_arity_simple
 27762                                  .L_lambda_simple_arity_check_ok_0ad7:
 27763 00014B46 C8000000                	enter 0, 0
 27764                                  	; preparing a non-tail-call
 27765 00014B4A 488B4540                	mov rax, PARAM(4)	; param limit
 27766 00014B4E 50                      	push rax
 27767 00014B4F 488B4538                	mov rax, PARAM(3)	; param j
 27768 00014B53 50                      	push rax
 27769 00014B54 6A02                    	push 2	; arg count
 27770 00014B56 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 27771 00014B5E 803805                  	cmp byte [rax], T_undefined
 27772 00014B61 0F8430380000            	je L_error_fvar_undefined
 27773 00014B67 803804                  	cmp byte [rax], T_closure
 27774 00014B6A 0F85AB380000            	jne L_error_non_closure
 27775 00014B70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27776 00014B73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27777 00014B76 483D[02000000]          	cmp rax, sob_boolean_false
 27778 00014B7C 0F8434010000            	je .L_if_else_0832
 27779                                  	; preparing a non-tail-call
 27780                                  	; preparing a non-tail-call
 27781 00014B82 488B4538                	mov rax, PARAM(3)	; param j
 27782 00014B86 50                      	push rax
 27783 00014B87 488B4530                	mov rax, PARAM(2)	; param str
 27784 00014B8B 50                      	push rax
 27785 00014B8C 6A02                    	push 2	; arg count
 27786 00014B8E 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 27787 00014B96 803805                  	cmp byte [rax], T_undefined
 27788 00014B99 0F84F8370000            	je L_error_fvar_undefined
 27789 00014B9F 803804                  	cmp byte [rax], T_closure
 27790 00014BA2 0F8573380000            	jne L_error_non_closure
 27791 00014BA8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27792 00014BAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 27793 00014BAE 50                      	push rax
 27794 00014BAF 488B4528                	mov rax, PARAM(1)	; param i
 27795 00014BB3 50                      	push rax
 27796 00014BB4 488B4520                	mov rax, PARAM(0)	; param target
 27797 00014BB8 50                      	push rax
 27798 00014BB9 6A03                    	push 3	; arg count
 27799 00014BBB 488B0425[ED170000]      	mov rax, qword [free_var_131]	; free var string-set!
 27800 00014BC3 803805                  	cmp byte [rax], T_undefined
 27801 00014BC6 0F84CB370000            	je L_error_fvar_undefined
 27802 00014BCC 803804                  	cmp byte [rax], T_closure
 27803 00014BCF 0F8546380000            	jne L_error_non_closure
 27804 00014BD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27805 00014BD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27806                                  
 27807                                  	; preparing a tail-call
 27808 00014BDB 488B4540                	mov rax, PARAM(4)	; param limit
 27809 00014BDF 50                      	push rax
 27810                                  	; preparing a non-tail-call
 27811 00014BE0 48B8-                   	mov rax, L_constants + 2270
 27811 00014BE2 [DE08000000000000] 
 27812 00014BEA 50                      	push rax
 27813 00014BEB 488B4538                	mov rax, PARAM(3)	; param j
 27814 00014BEF 50                      	push rax
 27815 00014BF0 6A02                    	push 2	; arg count
 27816 00014BF2 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 27817 00014BFA 803805                  	cmp byte [rax], T_undefined
 27818 00014BFD 0F8494370000            	je L_error_fvar_undefined
 27819 00014C03 803804                  	cmp byte [rax], T_closure
 27820 00014C06 0F850F380000            	jne L_error_non_closure
 27821 00014C0C FF7001                  	push SOB_CLOSURE_ENV(rax)
 27822 00014C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 27823 00014C12 50                      	push rax
 27824 00014C13 488B4530                	mov rax, PARAM(2)	; param str
 27825 00014C17 50                      	push rax
 27826                                  	; preparing a non-tail-call
 27827 00014C18 48B8-                   	mov rax, L_constants + 2270
 27827 00014C1A [DE08000000000000] 
 27828 00014C22 50                      	push rax
 27829 00014C23 488B4528                	mov rax, PARAM(1)	; param i
 27830 00014C27 50                      	push rax
 27831 00014C28 6A02                    	push 2	; arg count
 27832 00014C2A 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 27833 00014C32 803805                  	cmp byte [rax], T_undefined
 27834 00014C35 0F845C370000            	je L_error_fvar_undefined
 27835 00014C3B 803804                  	cmp byte [rax], T_closure
 27836 00014C3E 0F85D7370000            	jne L_error_non_closure
 27837 00014C44 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27838 00014C47 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27839 00014C4A 50                      	push rax
 27840 00014C4B 488B4520                	mov rax, PARAM(0)	; param target
 27841 00014C4F 50                      	push rax
 27842 00014C50 6A05                    	push 5	; arg count
 27843 00014C52 488B4510                	mov rax, ENV
 27844 00014C56 488B00                  	mov rax, qword [rax + 8 * 0]
 27845 00014C59 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 27846 00014C5D 488B00                  	mov rax, qword [rax]
 27847 00014C60 803804                  	cmp byte [rax], T_closure
 27848 00014C63 0F85B2370000            	jne L_error_non_closure
 27849 00014C69 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27850 00014C6C FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27851 00014C6F FF7500                  	push qword[rbp]
 27852 00014C72 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27853 00014C75 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27854 00014C79 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27855 00014C7D 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 27856 00014C81 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 27857 00014C84 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 27858 00014C87 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 27859 00014C8C 4983C103                	add r9, 3 	 ;for getting to the params
 27860 00014C90 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 27861 00014C94 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 27862                                  .L_tc_recycle_frame_loop_0f34:
 27863 00014C97 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 27864 00014C9A 7410                    	je .L_tc_recycle_frame_done_0f34
 27865 00014C9C 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 27866 00014C9F 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 27867 00014CA2 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 27868 00014CA6 4983E808                	sub r8, 8	 ;move the top of the stack one down
 27869 00014CAA EBEB                    	jmp .L_tc_recycle_frame_loop_0f34
 27870                                  .L_tc_recycle_frame_done_0f34:
 27871 00014CAC 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 27872 00014CAD 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 27873 00014CB1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 27874 00014CB4 EB04                    	jmp .L_if_end_0832
 27875                                  .L_if_else_0832:
 27876 00014CB6 488B4528                	mov rax, PARAM(1)	; param i
 27877                                  .L_if_end_0832:
 27878 00014CBA C9                      	leave
 27879 00014CBB C23800                  	ret AND_KILL_FRAME(5)
 27880                                  .L_lambda_simple_end_0ad7:	; new closure is in rax
 27881 00014CBE 50                      	push rax
 27882 00014CBF 488B4528                	mov rax, PARAM(1)	; param add
 27883 00014CC3 8F00                    	pop qword [rax]
 27884 00014CC5 48B8-                   	mov rax, sob_void
 27884 00014CC7 [0000000000000000] 
 27885                                  
 27886 00014CCF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 27887 00014CD4 E8EB370000              	call malloc
 27888 00014CD9 50                      	push rax
 27889 00014CDA BF10000000              	mov rdi, 8 * 2	; new rib
 27890 00014CDF E8E0370000              	call malloc
 27891 00014CE4 50                      	push rax
 27892 00014CE5 BF10000000              	mov rdi, 8 * 2	; extended env
 27893 00014CEA E8D5370000              	call malloc
 27894 00014CEF 488B7D10                	mov rdi, ENV
 27895 00014CF3 BE00000000              	mov rsi, 0
 27896 00014CF8 BA01000000              	mov rdx, 1
 27897                                  .L_lambda_opt_env_loop_0155:	; ext_env[i + 1] <-- env[i]
 27898 00014CFD 4883FE01                	cmp rsi, 1
 27899 00014D01 7410                    	je .L_lambda_opt_env_end_0155
 27900 00014D03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 27901 00014D07 48890CD0                	mov qword [rax + 8 * rdx], rcx
 27902 00014D0B 48FFC6                  	inc rsi
 27903 00014D0E 48FFC2                  	inc rdx
 27904 00014D11 EBEA                    	jmp .L_lambda_opt_env_loop_0155
 27905                                  .L_lambda_opt_env_end_0155:
 27906 00014D13 5B                      	pop rbx
 27907 00014D14 BE00000000              	mov rsi, 0
 27908                                  .L_lambda_opt_params_loop_0155:	; copy params
 27909 00014D19 4883FE02                	cmp rsi, 2
 27910 00014D1D 740E                    	je .L_lambda_opt_params_end_0155
 27911 00014D1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 27912 00014D24 488914F3                	mov qword [rbx + 8 * rsi], rdx
 27913 00014D28 48FFC6                  	inc rsi
 27914 00014D2B EBEC                    	jmp .L_lambda_opt_params_loop_0155
 27915                                  .L_lambda_opt_params_end_0155:
 27916 00014D2D 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 27917 00014D30 4889C3                  	mov rbx, rax
 27918 00014D33 58                      	pop rax
 27919 00014D34 C60004                  	mov byte [rax], T_closure
 27920 00014D37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 27921 00014D3B 48C74009[484D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0155
 27922 00014D43 E91F030000              	jmp .L_lambda_opt_end_0155
 27923                                  .L_lambda_opt_code_0155:	; lambda-opt body
 27924 00014D48 48837C241000            	cmp qword [rsp + 8 * 2], 0
 27925 00014D4E 7411                    	je .L_lambda_opt_arity_check_exact_0155
 27926 00014D50 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0155
 27927 00014D56 FF742410                	push qword [rsp + 8 * 2]
 27928 00014D5A 6A00                    	push 0
 27929 00014D5C E930370000              	jmp L_error_incorrect_arity_opt
 27930                                  .L_lambda_opt_arity_check_exact_0155:
 27931 00014D61 4883EC08                	sub rsp, 8
 27932 00014D65 488B442408              	mov rax, qword[rsp + 8 *1]
 27933 00014D6A 48890424                	mov qword[rsp], rax  
 27934 00014D6E 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 27935 00014D73 4889442408              	mov qword[rsp + 8 * 1], rax
 27936 00014D78 B801000000              	mov rax, 1
 27937 00014D7D 4889442410              	mov qword[rsp + 8 *2], rax
 27938 00014D82 48B8-                   	mov rax, sob_nil
 27938 00014D84 [0100000000000000] 
 27939 00014D8C 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 27940 00014D91 C8000000                	enter 0, 0
 27941                                  	; preparing a tail-call
 27942 00014D95 488B4520                	mov rax, PARAM(0)	; param strings
 27943 00014D99 50                      	push rax
 27944 00014D9A 48B8-                   	mov rax, L_constants + 2135
 27944 00014D9C [5708000000000000] 
 27945 00014DA4 50                      	push rax
 27946                                  	; preparing a non-tail-call
 27947                                  	; preparing a non-tail-call
 27948                                  	; preparing a non-tail-call
 27949 00014DA5 488B4520                	mov rax, PARAM(0)	; param strings
 27950 00014DA9 50                      	push rax
 27951 00014DAA 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 27952 00014DB2 803805                  	cmp byte [rax], T_undefined
 27953 00014DB5 0F84DC350000            	je L_error_fvar_undefined
 27954 00014DBB 50                      	push rax
 27955 00014DBC 6A02                    	push 2	; arg count
 27956 00014DBE 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 27957 00014DC6 803805                  	cmp byte [rax], T_undefined
 27958 00014DC9 0F84C8350000            	je L_error_fvar_undefined
 27959 00014DCF 803804                  	cmp byte [rax], T_closure
 27960 00014DD2 0F8543360000            	jne L_error_non_closure
 27961 00014DD8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27962 00014DDB FF5009                  	call SOB_CLOSURE_CODE(rax)
 27963 00014DDE 50                      	push rax
 27964 00014DDF 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 27965 00014DE7 803805                  	cmp byte [rax], T_undefined
 27966 00014DEA 0F84A7350000            	je L_error_fvar_undefined
 27967 00014DF0 50                      	push rax
 27968 00014DF1 6A02                    	push 2	; arg count
 27969 00014DF3 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 27970 00014DFB 803805                  	cmp byte [rax], T_undefined
 27971 00014DFE 0F8493350000            	je L_error_fvar_undefined
 27972 00014E04 803804                  	cmp byte [rax], T_closure
 27973 00014E07 0F850E360000            	jne L_error_non_closure
 27974 00014E0D FF7001                  	push SOB_CLOSURE_ENV(rax)
 27975 00014E10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27976 00014E13 50                      	push rax
 27977 00014E14 6A01                    	push 1	; arg count
 27978 00014E16 488B0425[CD150000]      	mov rax, qword [free_var_99]	; free var make-string
 27979 00014E1E 803805                  	cmp byte [rax], T_undefined
 27980 00014E21 0F8470350000            	je L_error_fvar_undefined
 27981 00014E27 803804                  	cmp byte [rax], T_closure
 27982 00014E2A 0F85EB350000            	jne L_error_non_closure
 27983 00014E30 FF7001                  	push SOB_CLOSURE_ENV(rax)
 27984 00014E33 FF5009                  	call SOB_CLOSURE_CODE(rax)
 27985 00014E36 50                      	push rax
 27986 00014E37 6A03                    	push 3	; arg count
 27987 00014E39 488B4510                	mov rax, ENV
 27988 00014E3D 488B00                  	mov rax, qword [rax + 8 * 0]
 27989 00014E40 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 27990 00014E43 488B00                  	mov rax, qword [rax]
 27991 00014E46 803804                  	cmp byte [rax], T_closure
 27992 00014E49 0F85CC350000            	jne L_error_non_closure
 27993 00014E4F FF7001                  	push SOB_CLOSURE_ENV(rax)
 27994 00014E52 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 27995 00014E55 FF7500                  	push qword[rbp]
 27996 00014E58 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 27997 00014E5B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 27998 00014E5F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 27999 00014E63 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28000 00014E67 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28001 00014E6A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28002 00014E6D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28003 00014E72 4983C103                	add r9, 3 	 ;for getting to the params
 28004 00014E76 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28005 00014E7A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28006                                  .L_tc_recycle_frame_loop_0f36:
 28007 00014E7D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28008 00014E80 7410                    	je .L_tc_recycle_frame_done_0f36
 28009 00014E82 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28010 00014E85 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28011 00014E88 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28012 00014E8C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28013 00014E90 EBEB                    	jmp .L_tc_recycle_frame_loop_0f36
 28014                                  .L_tc_recycle_frame_done_0f36:
 28015 00014E92 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28016 00014E93 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28017 00014E97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28018 00014E9A C9                      	leave
 28019 00014E9B C21800                  	ret AND_KILL_FRAME(1)
 28020 00014E9E E9C4010000              	jmp .L_lambda_opt_end_0155	; new closure is in rax
 28021                                  .L_lambda_opt_arity_check_more_0155:
 28022 00014EA3 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 28023 00014EA8 49B9-                   	mov r9, sob_nil
 28023 00014EAA [0100000000000000] 
 28024 00014EB2 4889E3                  	mov rbx, rsp 
 28025 00014EB5 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 28026 00014EB9 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 28027 00014EBC 49C1E003                	shl r8, 3
 28028 00014EC0 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 28029 00014EC3 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 28030                                  .L_lambda_opt_stack_shrink_loop_0155:
 28031 00014EC8 4983F800                	cmp r8, 0
 28032 00014ECC 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0155
 28033 00014ECE BF11000000              	mov rdi, 1+8+8 ;for pair
 28034 00014ED3 E8EC350000              	call malloc;to create the pair in the stack
 28035 00014ED8 C60021                  	mov byte [rax], T_pair ; to make it a pair
 28036 00014EDB 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 28037 00014EDE 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 28038 00014EE2 4C894809                 	mov qword[rax+1+8],r9
 28039 00014EE6 4989C1                  	mov r9, rax ;for the recursion 
 28040 00014EE9 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 28041 00014EEC 4883EB08                	sub rbx, 8 ;to get the next param to copy
 28042 00014EF0 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0155
 28043                                  .L_lambda_opt_stack_shrink_loop_exit_0155:
 28044 00014EF2 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 28045 00014EF7 4883E901                	sub rcx, 1
 28046 00014EFB 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 28047 00014EFF 4801CC                  	add rsp, rcx ;shrinking the stack
 28048 00014F02 4889E0                  	mov rax, rsp
 28049 00014F05 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 28050 00014F08 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 28051 00014F0C 49FFC8                  	dec r8 ;we start with param 0, not 1 
 28052 00014F0F 4883C018                	add rax, 3 * 8;now rax is param 0
 28053 00014F13 49C1E003                	shl r8, 3;convert to byte
 28054 00014F17 4C01C0                  	add rax, r8;now rax is the top of the stack
 28055 00014F1A 4C8908                  	mov qword[rax], r9;puting the list at the top
 28056 00014F1D 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 28057 00014F21 4889E3                  	mov rbx, rsp 
 28058 00014F24 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 28059 00014F27 41BA00000000            	mov r10, 0;r10 is the not opt params length
 28060 00014F2D 49FFCA                  	dec r10 
 28061 00014F30 49C1E203                	shl r10, 3;to get bytes
 28062 00014F34 4883C318                	add rbx, 3*8;rbx is the first param
 28063 00014F38 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 28064 00014F3B 4889E0                  	mov rax, rsp
 28065 00014F3E 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 28066 00014F41 48C744241001000000      	mov qword [rsp+2*8], 1
 28067 00014F4A 488B5808                	mov rbx, qword[rax + 8 *1]
 28068 00014F4E 48895C2408              	mov qword [rsp + 1*8] ,rbx
 28069 00014F53 488B18                  	mov rbx, qword[rax]
 28070 00014F56 48891C24                	mov qword [rsp], rbx
 28071 00014F5A C8000000                	enter 0, 0
 28072                                  	; preparing a tail-call
 28073 00014F5E 488B4520                	mov rax, PARAM(0)	; param strings
 28074 00014F62 50                      	push rax
 28075 00014F63 48B8-                   	mov rax, L_constants + 2135
 28075 00014F65 [5708000000000000] 
 28076 00014F6D 50                      	push rax
 28077                                  	; preparing a non-tail-call
 28078                                  	; preparing a non-tail-call
 28079                                  	; preparing a non-tail-call
 28080 00014F6E 488B4520                	mov rax, PARAM(0)	; param strings
 28081 00014F72 50                      	push rax
 28082 00014F73 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 28083 00014F7B 803805                  	cmp byte [rax], T_undefined
 28084 00014F7E 0F8413340000            	je L_error_fvar_undefined
 28085 00014F84 50                      	push rax
 28086 00014F85 6A02                    	push 2	; arg count
 28087 00014F87 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 28088 00014F8F 803805                  	cmp byte [rax], T_undefined
 28089 00014F92 0F84FF330000            	je L_error_fvar_undefined
 28090 00014F98 803804                  	cmp byte [rax], T_closure
 28091 00014F9B 0F857A340000            	jne L_error_non_closure
 28092 00014FA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28093 00014FA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28094 00014FA7 50                      	push rax
 28095 00014FA8 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 28096 00014FB0 803805                  	cmp byte [rax], T_undefined
 28097 00014FB3 0F84DE330000            	je L_error_fvar_undefined
 28098 00014FB9 50                      	push rax
 28099 00014FBA 6A02                    	push 2	; arg count
 28100 00014FBC 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 28101 00014FC4 803805                  	cmp byte [rax], T_undefined
 28102 00014FC7 0F84CA330000            	je L_error_fvar_undefined
 28103 00014FCD 803804                  	cmp byte [rax], T_closure
 28104 00014FD0 0F8545340000            	jne L_error_non_closure
 28105 00014FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28106 00014FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28107 00014FDC 50                      	push rax
 28108 00014FDD 6A01                    	push 1	; arg count
 28109 00014FDF 488B0425[CD150000]      	mov rax, qword [free_var_99]	; free var make-string
 28110 00014FE7 803805                  	cmp byte [rax], T_undefined
 28111 00014FEA 0F84A7330000            	je L_error_fvar_undefined
 28112 00014FF0 803804                  	cmp byte [rax], T_closure
 28113 00014FF3 0F8522340000            	jne L_error_non_closure
 28114 00014FF9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28115 00014FFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28116 00014FFF 50                      	push rax
 28117 00015000 6A03                    	push 3	; arg count
 28118 00015002 488B4510                	mov rax, ENV
 28119 00015006 488B00                  	mov rax, qword [rax + 8 * 0]
 28120 00015009 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28121 0001500C 488B00                  	mov rax, qword [rax]
 28122 0001500F 803804                  	cmp byte [rax], T_closure
 28123 00015012 0F8503340000            	jne L_error_non_closure
 28124 00015018 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28125 0001501B FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28126 0001501E FF7500                  	push qword[rbp]
 28127 00015021 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28128 00015024 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28129 00015028 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28130 0001502C 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28131 00015030 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28132 00015033 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28133 00015036 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28134 0001503B 4983C103                	add r9, 3 	 ;for getting to the params
 28135 0001503F 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28136 00015043 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28137                                  .L_tc_recycle_frame_loop_0f35:
 28138 00015046 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28139 00015049 7410                    	je .L_tc_recycle_frame_done_0f35
 28140 0001504B 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28141 0001504E 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28142 00015051 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28143 00015055 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28144 00015059 EBEB                    	jmp .L_tc_recycle_frame_loop_0f35
 28145                                  .L_tc_recycle_frame_done_0f35:
 28146 0001505B 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28147 0001505C 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28148 00015060 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28149 00015063 C9                      	leave
 28150 00015064 C21800                  	ret AND_KILL_FRAME(1)
 28151                                  .L_lambda_opt_end_0155:	; new closure is in rax
 28152 00015067 C9                      	leave
 28153 00015068 C22000                  	ret AND_KILL_FRAME(2)
 28154                                  .L_lambda_simple_end_0ad4:	; new closure is in rax
 28155 0001506B 803804                  	cmp byte [rax], T_closure
 28156 0001506E 0F85A7330000            	jne L_error_non_closure
 28157 00015074 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28158 00015077 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28159 0001507A 48890425[32170000]      	mov qword [free_var_120], rax
 28160 00015082 48B8-                   	mov rax, sob_void
 28160 00015084 [0000000000000000] 
 28161                                  
 28162 0001508C 4889C7                  	mov rdi, rax
 28163 0001508F E885360000              	call print_sexpr_if_not_void
 28164                                  	; preparing a non-tail-call
 28165 00015094 48B8-                   	mov rax, L_constants + 1993
 28165 00015096 [C907000000000000] 
 28166 0001509E 50                      	push rax
 28167 0001509F 48B8-                   	mov rax, L_constants + 1993
 28167 000150A1 [C907000000000000] 
 28168 000150A9 50                      	push rax
 28169 000150AA 6A02                    	push 2	; arg count
 28170 000150AC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28171 000150B1 E80E340000              	call malloc
 28172 000150B6 50                      	push rax
 28173 000150B7 BF00000000              	mov rdi, 8 * 0	; new rib
 28174 000150BC E803340000              	call malloc
 28175 000150C1 50                      	push rax
 28176 000150C2 BF08000000              	mov rdi, 8 * 1	; extended env
 28177 000150C7 E8F8330000              	call malloc
 28178 000150CC 488B7D10                	mov rdi, ENV
 28179 000150D0 BE00000000              	mov rsi, 0
 28180 000150D5 BA01000000              	mov rdx, 1
 28181                                  .L_lambda_simple_env_loop_0ad8:	; ext_env[i + 1] <-- env[i]
 28182 000150DA 4883FE00                	cmp rsi, 0
 28183 000150DE 7410                    	je .L_lambda_simple_env_end_0ad8
 28184 000150E0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28185 000150E4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28186 000150E8 48FFC6                  	inc rsi
 28187 000150EB 48FFC2                  	inc rdx
 28188 000150EE EBEA                    	jmp .L_lambda_simple_env_loop_0ad8
 28189                                  .L_lambda_simple_env_end_0ad8:
 28190 000150F0 5B                      	pop rbx
 28191 000150F1 BE00000000              	mov rsi, 0
 28192                                  .L_lambda_simple_params_loop_0ad8:	; copy params
 28193 000150F6 4883FE00                	cmp rsi, 0
 28194 000150FA 740E                    	je .L_lambda_simple_params_end_0ad8
 28195 000150FC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28196 00015101 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28197 00015105 48FFC6                  	inc rsi
 28198 00015108 EBEC                    	jmp .L_lambda_simple_params_loop_0ad8
 28199                                  .L_lambda_simple_params_end_0ad8:
 28200 0001510A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28201 0001510D 4889C3                  	mov rbx, rax
 28202 00015110 58                      	pop rax
 28203 00015111 C60004                  	mov byte [rax], T_closure
 28204 00015114 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28205 00015118 48C74009[25510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad8
 28206 00015120 E918090000              	jmp .L_lambda_simple_end_0ad8
 28207                                  .L_lambda_simple_code_0ad8:	; lambda-simple body
 28208 00015125 48837C241002            	cmp qword [rsp + 8 * 2], 2
 28209 0001512B 740B                    	je .L_lambda_simple_arity_check_ok_0ad8
 28210 0001512D FF742410                	push qword [rsp + 8 * 2]
 28211 00015131 6A02                    	push 2
 28212 00015133 E945330000              	jmp L_error_incorrect_arity_simple
 28213                                  .L_lambda_simple_arity_check_ok_0ad8:
 28214 00015138 C8000000                	enter 0, 0
 28215 0001513C BF08000000              	mov rdi, 8*1
 28216 00015141 E87E330000              	call malloc
 28217 00015146 488B5D20                	mov rbx, PARAM(0)
 28218 0001514A 488918                  	mov qword[rax], rbx
 28219 0001514D 48894520                	mov PARAM(0), rax
 28220 00015151 48B8-                   	mov rax, sob_void
 28220 00015153 [0000000000000000] 
 28221                                  
 28222 0001515B BF08000000              	mov rdi, 8*1
 28223 00015160 E85F330000              	call malloc
 28224 00015165 488B5D28                	mov rbx, PARAM(1)
 28225 00015169 488918                  	mov qword[rax], rbx
 28226 0001516C 48894528                	mov PARAM(1), rax
 28227 00015170 48B8-                   	mov rax, sob_void
 28227 00015172 [0000000000000000] 
 28228                                  
 28229 0001517A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28230 0001517F E840330000              	call malloc
 28231 00015184 50                      	push rax
 28232 00015185 BF10000000              	mov rdi, 8 * 2	; new rib
 28233 0001518A E835330000              	call malloc
 28234 0001518F 50                      	push rax
 28235 00015190 BF10000000              	mov rdi, 8 * 2	; extended env
 28236 00015195 E82A330000              	call malloc
 28237 0001519A 488B7D10                	mov rdi, ENV
 28238 0001519E BE00000000              	mov rsi, 0
 28239 000151A3 BA01000000              	mov rdx, 1
 28240                                  .L_lambda_simple_env_loop_0ad9:	; ext_env[i + 1] <-- env[i]
 28241 000151A8 4883FE01                	cmp rsi, 1
 28242 000151AC 7410                    	je .L_lambda_simple_env_end_0ad9
 28243 000151AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28244 000151B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28245 000151B6 48FFC6                  	inc rsi
 28246 000151B9 48FFC2                  	inc rdx
 28247 000151BC EBEA                    	jmp .L_lambda_simple_env_loop_0ad9
 28248                                  .L_lambda_simple_env_end_0ad9:
 28249 000151BE 5B                      	pop rbx
 28250 000151BF BE00000000              	mov rsi, 0
 28251                                  .L_lambda_simple_params_loop_0ad9:	; copy params
 28252 000151C4 4883FE02                	cmp rsi, 2
 28253 000151C8 740E                    	je .L_lambda_simple_params_end_0ad9
 28254 000151CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28255 000151CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28256 000151D3 48FFC6                  	inc rsi
 28257 000151D6 EBEC                    	jmp .L_lambda_simple_params_loop_0ad9
 28258                                  .L_lambda_simple_params_end_0ad9:
 28259 000151D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28260 000151DB 4889C3                  	mov rbx, rax
 28261 000151DE 58                      	pop rax
 28262 000151DF C60004                  	mov byte [rax], T_closure
 28263 000151E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28264 000151E6 48C74009[F3510100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ad9
 28265 000151EE E988020000              	jmp .L_lambda_simple_end_0ad9
 28266                                  .L_lambda_simple_code_0ad9:	; lambda-simple body
 28267 000151F3 48837C241003            	cmp qword [rsp + 8 * 2], 3
 28268 000151F9 740B                    	je .L_lambda_simple_arity_check_ok_0ad9
 28269 000151FB FF742410                	push qword [rsp + 8 * 2]
 28270 000151FF 6A03                    	push 3
 28271 00015201 E977320000              	jmp L_error_incorrect_arity_simple
 28272                                  .L_lambda_simple_arity_check_ok_0ad9:
 28273 00015206 C8000000                	enter 0, 0
 28274                                  	; preparing a non-tail-call
 28275 0001520A 488B4530                	mov rax, PARAM(2)	; param s
 28276 0001520E 50                      	push rax
 28277 0001520F 6A01                    	push 1	; arg count
 28278 00015211 488B0425[55160000]      	mov rax, qword [free_var_107]	; free var null?
 28279 00015219 803805                  	cmp byte [rax], T_undefined
 28280 0001521C 0F8475310000            	je L_error_fvar_undefined
 28281 00015222 803804                  	cmp byte [rax], T_closure
 28282 00015225 0F85F0310000            	jne L_error_non_closure
 28283 0001522B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28284 0001522E FF5009                  	call SOB_CLOSURE_CODE(rax)
 28285 00015231 483D[02000000]          	cmp rax, sob_boolean_false
 28286 00015237 7409                    	je .L_if_else_0833
 28287 00015239 488B4520                	mov rax, PARAM(0)	; param target
 28288 0001523D E935020000              	jmp .L_if_end_0833
 28289                                  .L_if_else_0833:
 28290                                  	; preparing a tail-call
 28291                                  	; preparing a non-tail-call
 28292                                  	; preparing a non-tail-call
 28293                                  	; preparing a non-tail-call
 28294 00015242 488B4530                	mov rax, PARAM(2)	; param s
 28295 00015246 50                      	push rax
 28296 00015247 6A01                    	push 1	; arg count
 28297 00015249 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 28298 00015251 803805                  	cmp byte [rax], T_undefined
 28299 00015254 0F843D310000            	je L_error_fvar_undefined
 28300 0001525A 803804                  	cmp byte [rax], T_closure
 28301 0001525D 0F85B8310000            	jne L_error_non_closure
 28302 00015263 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28303 00015266 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28304 00015269 50                      	push rax
 28305 0001526A 6A01                    	push 1	; arg count
 28306 0001526C 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 28307 00015274 803805                  	cmp byte [rax], T_undefined
 28308 00015277 0F841A310000            	je L_error_fvar_undefined
 28309 0001527D 803804                  	cmp byte [rax], T_closure
 28310 00015280 0F8595310000            	jne L_error_non_closure
 28311 00015286 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28312 00015289 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28313 0001528C 50                      	push rax
 28314 0001528D 48B8-                   	mov rax, L_constants + 2135
 28314 0001528F [5708000000000000] 
 28315 00015297 50                      	push rax
 28316                                  	; preparing a non-tail-call
 28317 00015298 488B4530                	mov rax, PARAM(2)	; param s
 28318 0001529C 50                      	push rax
 28319 0001529D 6A01                    	push 1	; arg count
 28320 0001529F 488B0425[7B120000]      	mov rax, qword [free_var_49]	; free var car
 28321 000152A7 803805                  	cmp byte [rax], T_undefined
 28322 000152AA 0F84E7300000            	je L_error_fvar_undefined
 28323 000152B0 803804                  	cmp byte [rax], T_closure
 28324 000152B3 0F8562310000            	jne L_error_non_closure
 28325 000152B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28326 000152BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 28327 000152BF 50                      	push rax
 28328 000152C0 488B4528                	mov rax, PARAM(1)	; param i
 28329 000152C4 50                      	push rax
 28330 000152C5 488B4520                	mov rax, PARAM(0)	; param target
 28331 000152C9 50                      	push rax
 28332 000152CA 6A05                    	push 5	; arg count
 28333 000152CC 488B4510                	mov rax, ENV
 28334 000152D0 488B00                  	mov rax, qword [rax + 8 * 0]
 28335 000152D3 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28336 000152D7 488B00                  	mov rax, qword [rax]
 28337 000152DA 803804                  	cmp byte [rax], T_closure
 28338 000152DD 0F8538310000            	jne L_error_non_closure
 28339 000152E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28340 000152E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28341 000152E9 50                      	push rax
 28342 000152EA 6A01                    	push 1	; arg count
 28343 000152EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28344 000152F1 E8CE310000              	call malloc
 28345 000152F6 50                      	push rax
 28346 000152F7 BF18000000              	mov rdi, 8 * 3	; new rib
 28347 000152FC E8C3310000              	call malloc
 28348 00015301 50                      	push rax
 28349 00015302 BF18000000              	mov rdi, 8 * 3	; extended env
 28350 00015307 E8B8310000              	call malloc
 28351 0001530C 488B7D10                	mov rdi, ENV
 28352 00015310 BE00000000              	mov rsi, 0
 28353 00015315 BA01000000              	mov rdx, 1
 28354                                  .L_lambda_simple_env_loop_0ada:	; ext_env[i + 1] <-- env[i]
 28355 0001531A 4883FE02                	cmp rsi, 2
 28356 0001531E 7410                    	je .L_lambda_simple_env_end_0ada
 28357 00015320 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28358 00015324 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28359 00015328 48FFC6                  	inc rsi
 28360 0001532B 48FFC2                  	inc rdx
 28361 0001532E EBEA                    	jmp .L_lambda_simple_env_loop_0ada
 28362                                  .L_lambda_simple_env_end_0ada:
 28363 00015330 5B                      	pop rbx
 28364 00015331 BE00000000              	mov rsi, 0
 28365                                  .L_lambda_simple_params_loop_0ada:	; copy params
 28366 00015336 4883FE03                	cmp rsi, 3
 28367 0001533A 740E                    	je .L_lambda_simple_params_end_0ada
 28368 0001533C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28369 00015341 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28370 00015345 48FFC6                  	inc rsi
 28371 00015348 EBEC                    	jmp .L_lambda_simple_params_loop_0ada
 28372                                  .L_lambda_simple_params_end_0ada:
 28373 0001534A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28374 0001534D 4889C3                  	mov rbx, rax
 28375 00015350 58                      	pop rax
 28376 00015351 C60004                  	mov byte [rax], T_closure
 28377 00015354 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28378 00015358 48C74009[65530100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ada
 28379 00015360 E9BE000000              	jmp .L_lambda_simple_end_0ada
 28380                                  .L_lambda_simple_code_0ada:	; lambda-simple body
 28381 00015365 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28382 0001536B 740B                    	je .L_lambda_simple_arity_check_ok_0ada
 28383 0001536D FF742410                	push qword [rsp + 8 * 2]
 28384 00015371 6A01                    	push 1
 28385 00015373 E905310000              	jmp L_error_incorrect_arity_simple
 28386                                  .L_lambda_simple_arity_check_ok_0ada:
 28387 00015378 C8000000                	enter 0, 0
 28388                                  	; preparing a tail-call
 28389                                  	; preparing a non-tail-call
 28390 0001537C 488B4510                	mov rax, ENV
 28391 00015380 488B00                  	mov rax, qword [rax + 8 * 0]
 28392 00015383 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var s
 28393 00015387 50                      	push rax
 28394 00015388 6A01                    	push 1	; arg count
 28395 0001538A 488B0425[7A130000]      	mov rax, qword [free_var_64]	; free var cdr
 28396 00015392 803805                  	cmp byte [rax], T_undefined
 28397 00015395 0F84FC2F0000            	je L_error_fvar_undefined
 28398 0001539B 803804                  	cmp byte [rax], T_closure
 28399 0001539E 0F8577300000            	jne L_error_non_closure
 28400 000153A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28401 000153A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28402 000153AA 50                      	push rax
 28403 000153AB 488B4520                	mov rax, PARAM(0)	; param i
 28404 000153AF 50                      	push rax
 28405 000153B0 488B4510                	mov rax, ENV
 28406 000153B4 488B00                  	mov rax, qword [rax + 8 * 0]
 28407 000153B7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var target
 28408 000153BA 50                      	push rax
 28409 000153BB 6A03                    	push 3	; arg count
 28410 000153BD 488B4510                	mov rax, ENV
 28411 000153C1 488B4008                	mov rax, qword [rax + 8 * 1]
 28412 000153C5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28413 000153C8 488B00                  	mov rax, qword [rax]
 28414 000153CB 803804                  	cmp byte [rax], T_closure
 28415 000153CE 0F8547300000            	jne L_error_non_closure
 28416 000153D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28417 000153D7 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28418 000153DA FF7500                  	push qword[rbp]
 28419 000153DD 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28420 000153E0 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28421 000153E4 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28422 000153E8 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28423 000153EC 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28424 000153EF 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28425 000153F2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28426 000153F7 4983C103                	add r9, 3 	 ;for getting to the params
 28427 000153FB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28428 000153FF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28429                                  .L_tc_recycle_frame_loop_0f37:
 28430 00015402 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28431 00015405 7410                    	je .L_tc_recycle_frame_done_0f37
 28432 00015407 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28433 0001540A 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28434 0001540D 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28435 00015411 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28436 00015415 EBEB                    	jmp .L_tc_recycle_frame_loop_0f37
 28437                                  .L_tc_recycle_frame_done_0f37:
 28438 00015417 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28439 00015418 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28440 0001541C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28441 0001541F C9                      	leave
 28442 00015420 C21800                  	ret AND_KILL_FRAME(1)
 28443                                  .L_lambda_simple_end_0ada:	; new closure is in rax
 28444 00015423 803804                  	cmp byte [rax], T_closure
 28445 00015426 0F85EF2F0000            	jne L_error_non_closure
 28446 0001542C FF7001                  	push SOB_CLOSURE_ENV(rax)
 28447 0001542F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28448 00015432 FF7500                  	push qword[rbp]
 28449 00015435 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28450 00015438 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28451 0001543C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28452 00015440 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28453 00015444 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28454 00015447 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28455 0001544A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28456 0001544F 4983C103                	add r9, 3 	 ;for getting to the params
 28457 00015453 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28458 00015457 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28459                                  .L_tc_recycle_frame_loop_0f38:
 28460 0001545A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28461 0001545D 7410                    	je .L_tc_recycle_frame_done_0f38
 28462 0001545F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28463 00015462 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28464 00015465 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28465 00015469 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28466 0001546D EBEB                    	jmp .L_tc_recycle_frame_loop_0f38
 28467                                  .L_tc_recycle_frame_done_0f38:
 28468 0001546F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28469 00015470 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28470 00015474 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28471                                  .L_if_end_0833:
 28472 00015477 C9                      	leave
 28473 00015478 C22800                  	ret AND_KILL_FRAME(3)
 28474                                  .L_lambda_simple_end_0ad9:	; new closure is in rax
 28475 0001547B 50                      	push rax
 28476 0001547C 488B4520                	mov rax, PARAM(0)	; param run
 28477 00015480 8F00                    	pop qword [rax]
 28478 00015482 48B8-                   	mov rax, sob_void
 28478 00015484 [0000000000000000] 
 28479                                  
 28480 0001548C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28481 00015491 E82E300000              	call malloc
 28482 00015496 50                      	push rax
 28483 00015497 BF10000000              	mov rdi, 8 * 2	; new rib
 28484 0001549C E823300000              	call malloc
 28485 000154A1 50                      	push rax
 28486 000154A2 BF10000000              	mov rdi, 8 * 2	; extended env
 28487 000154A7 E818300000              	call malloc
 28488 000154AC 488B7D10                	mov rdi, ENV
 28489 000154B0 BE00000000              	mov rsi, 0
 28490 000154B5 BA01000000              	mov rdx, 1
 28491                                  .L_lambda_simple_env_loop_0adb:	; ext_env[i + 1] <-- env[i]
 28492 000154BA 4883FE01                	cmp rsi, 1
 28493 000154BE 7410                    	je .L_lambda_simple_env_end_0adb
 28494 000154C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28495 000154C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28496 000154C8 48FFC6                  	inc rsi
 28497 000154CB 48FFC2                  	inc rdx
 28498 000154CE EBEA                    	jmp .L_lambda_simple_env_loop_0adb
 28499                                  .L_lambda_simple_env_end_0adb:
 28500 000154D0 5B                      	pop rbx
 28501 000154D1 BE00000000              	mov rsi, 0
 28502                                  .L_lambda_simple_params_loop_0adb:	; copy params
 28503 000154D6 4883FE02                	cmp rsi, 2
 28504 000154DA 740E                    	je .L_lambda_simple_params_end_0adb
 28505 000154DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28506 000154E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28507 000154E5 48FFC6                  	inc rsi
 28508 000154E8 EBEC                    	jmp .L_lambda_simple_params_loop_0adb
 28509                                  .L_lambda_simple_params_end_0adb:
 28510 000154EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28511 000154ED 4889C3                  	mov rbx, rax
 28512 000154F0 58                      	pop rax
 28513 000154F1 C60004                  	mov byte [rax], T_closure
 28514 000154F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28515 000154F8 48C74009[05550100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0adb
 28516 00015500 E98B010000              	jmp .L_lambda_simple_end_0adb
 28517                                  .L_lambda_simple_code_0adb:	; lambda-simple body
 28518 00015505 48837C241005            	cmp qword [rsp + 8 * 2], 5
 28519 0001550B 740B                    	je .L_lambda_simple_arity_check_ok_0adb
 28520 0001550D FF742410                	push qword [rsp + 8 * 2]
 28521 00015511 6A05                    	push 5
 28522 00015513 E9652F0000              	jmp L_error_incorrect_arity_simple
 28523                                  .L_lambda_simple_arity_check_ok_0adb:
 28524 00015518 C8000000                	enter 0, 0
 28525                                  	; preparing a non-tail-call
 28526 0001551C 488B4540                	mov rax, PARAM(4)	; param limit
 28527 00015520 50                      	push rax
 28528 00015521 488B4538                	mov rax, PARAM(3)	; param j
 28529 00015525 50                      	push rax
 28530 00015526 6A02                    	push 2	; arg count
 28531 00015528 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 28532 00015530 803805                  	cmp byte [rax], T_undefined
 28533 00015533 0F845E2E0000            	je L_error_fvar_undefined
 28534 00015539 803804                  	cmp byte [rax], T_closure
 28535 0001553C 0F85D92E0000            	jne L_error_non_closure
 28536 00015542 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28537 00015545 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28538 00015548 483D[02000000]          	cmp rax, sob_boolean_false
 28539 0001554E 0F8434010000            	je .L_if_else_0834
 28540                                  	; preparing a non-tail-call
 28541                                  	; preparing a non-tail-call
 28542 00015554 488B4538                	mov rax, PARAM(3)	; param j
 28543 00015558 50                      	push rax
 28544 00015559 488B4530                	mov rax, PARAM(2)	; param vec
 28545 0001555D 50                      	push rax
 28546 0001555E 6A02                    	push 2	; arg count
 28547 00015560 488B0425[DB180000]      	mov rax, qword [free_var_145]	; free var vector-ref
 28548 00015568 803805                  	cmp byte [rax], T_undefined
 28549 0001556B 0F84262E0000            	je L_error_fvar_undefined
 28550 00015571 803804                  	cmp byte [rax], T_closure
 28551 00015574 0F85A12E0000            	jne L_error_non_closure
 28552 0001557A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28553 0001557D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28554 00015580 50                      	push rax
 28555 00015581 488B4528                	mov rax, PARAM(1)	; param i
 28556 00015585 50                      	push rax
 28557 00015586 488B4520                	mov rax, PARAM(0)	; param target
 28558 0001558A 50                      	push rax
 28559 0001558B 6A03                    	push 3	; arg count
 28560 0001558D 488B0425[0E190000]      	mov rax, qword [free_var_148]	; free var vector-set!
 28561 00015595 803805                  	cmp byte [rax], T_undefined
 28562 00015598 0F84F92D0000            	je L_error_fvar_undefined
 28563 0001559E 803804                  	cmp byte [rax], T_closure
 28564 000155A1 0F85742E0000            	jne L_error_non_closure
 28565 000155A7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28566 000155AA FF5009                  	call SOB_CLOSURE_CODE(rax)
 28567                                  
 28568                                  	; preparing a tail-call
 28569 000155AD 488B4540                	mov rax, PARAM(4)	; param limit
 28570 000155B1 50                      	push rax
 28571                                  	; preparing a non-tail-call
 28572 000155B2 48B8-                   	mov rax, L_constants + 2270
 28572 000155B4 [DE08000000000000] 
 28573 000155BC 50                      	push rax
 28574 000155BD 488B4538                	mov rax, PARAM(3)	; param j
 28575 000155C1 50                      	push rax
 28576 000155C2 6A02                    	push 2	; arg count
 28577 000155C4 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 28578 000155CC 803805                  	cmp byte [rax], T_undefined
 28579 000155CF 0F84C22D0000            	je L_error_fvar_undefined
 28580 000155D5 803804                  	cmp byte [rax], T_closure
 28581 000155D8 0F853D2E0000            	jne L_error_non_closure
 28582 000155DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 28583 000155E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28584 000155E4 50                      	push rax
 28585 000155E5 488B4530                	mov rax, PARAM(2)	; param vec
 28586 000155E9 50                      	push rax
 28587                                  	; preparing a non-tail-call
 28588 000155EA 48B8-                   	mov rax, L_constants + 2270
 28588 000155EC [DE08000000000000] 
 28589 000155F4 50                      	push rax
 28590 000155F5 488B4528                	mov rax, PARAM(1)	; param i
 28591 000155F9 50                      	push rax
 28592 000155FA 6A02                    	push 2	; arg count
 28593 000155FC 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 28594 00015604 803805                  	cmp byte [rax], T_undefined
 28595 00015607 0F848A2D0000            	je L_error_fvar_undefined
 28596 0001560D 803804                  	cmp byte [rax], T_closure
 28597 00015610 0F85052E0000            	jne L_error_non_closure
 28598 00015616 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28599 00015619 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28600 0001561C 50                      	push rax
 28601 0001561D 488B4520                	mov rax, PARAM(0)	; param target
 28602 00015621 50                      	push rax
 28603 00015622 6A05                    	push 5	; arg count
 28604 00015624 488B4510                	mov rax, ENV
 28605 00015628 488B00                  	mov rax, qword [rax + 8 * 0]
 28606 0001562B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var add
 28607 0001562F 488B00                  	mov rax, qword [rax]
 28608 00015632 803804                  	cmp byte [rax], T_closure
 28609 00015635 0F85E02D0000            	jne L_error_non_closure
 28610 0001563B FF7001                  	push SOB_CLOSURE_ENV(rax)
 28611 0001563E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28612 00015641 FF7500                  	push qword[rbp]
 28613 00015644 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28614 00015647 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28615 0001564B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28616 0001564F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28617 00015653 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28618 00015656 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28619 00015659 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28620 0001565E 4983C103                	add r9, 3 	 ;for getting to the params
 28621 00015662 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28622 00015666 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28623                                  .L_tc_recycle_frame_loop_0f39:
 28624 00015669 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28625 0001566C 7410                    	je .L_tc_recycle_frame_done_0f39
 28626 0001566E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28627 00015671 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28628 00015674 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28629 00015678 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28630 0001567C EBEB                    	jmp .L_tc_recycle_frame_loop_0f39
 28631                                  .L_tc_recycle_frame_done_0f39:
 28632 0001567E 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28633 0001567F 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28634 00015683 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28635 00015686 EB04                    	jmp .L_if_end_0834
 28636                                  .L_if_else_0834:
 28637 00015688 488B4528                	mov rax, PARAM(1)	; param i
 28638                                  .L_if_end_0834:
 28639 0001568C C9                      	leave
 28640 0001568D C23800                  	ret AND_KILL_FRAME(5)
 28641                                  .L_lambda_simple_end_0adb:	; new closure is in rax
 28642 00015690 50                      	push rax
 28643 00015691 488B4528                	mov rax, PARAM(1)	; param add
 28644 00015695 8F00                    	pop qword [rax]
 28645 00015697 48B8-                   	mov rax, sob_void
 28645 00015699 [0000000000000000] 
 28646                                  
 28647 000156A1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28648 000156A6 E8192E0000              	call malloc
 28649 000156AB 50                      	push rax
 28650 000156AC BF10000000              	mov rdi, 8 * 2	; new rib
 28651 000156B1 E80E2E0000              	call malloc
 28652 000156B6 50                      	push rax
 28653 000156B7 BF10000000              	mov rdi, 8 * 2	; extended env
 28654 000156BC E8032E0000              	call malloc
 28655 000156C1 488B7D10                	mov rdi, ENV
 28656 000156C5 BE00000000              	mov rsi, 0
 28657 000156CA BA01000000              	mov rdx, 1
 28658                                  .L_lambda_opt_env_loop_0156:	; ext_env[i + 1] <-- env[i]
 28659 000156CF 4883FE01                	cmp rsi, 1
 28660 000156D3 7410                    	je .L_lambda_opt_env_end_0156
 28661 000156D5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28662 000156D9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28663 000156DD 48FFC6                  	inc rsi
 28664 000156E0 48FFC2                  	inc rdx
 28665 000156E3 EBEA                    	jmp .L_lambda_opt_env_loop_0156
 28666                                  .L_lambda_opt_env_end_0156:
 28667 000156E5 5B                      	pop rbx
 28668 000156E6 BE00000000              	mov rsi, 0
 28669                                  .L_lambda_opt_params_loop_0156:	; copy params
 28670 000156EB 4883FE02                	cmp rsi, 2
 28671 000156EF 740E                    	je .L_lambda_opt_params_end_0156
 28672 000156F1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28673 000156F6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28674 000156FA 48FFC6                  	inc rsi
 28675 000156FD EBEC                    	jmp .L_lambda_opt_params_loop_0156
 28676                                  .L_lambda_opt_params_end_0156:
 28677 000156FF 488918                  	mov qword [rax], rbx	 ;ext_env[0] <-- new_rib 
 28678 00015702 4889C3                  	mov rbx, rax
 28679 00015705 58                      	pop rax
 28680 00015706 C60004                  	mov byte [rax], T_closure
 28681 00015709 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28682 0001570D 48C74009[1A570100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0156
 28683 00015715 E91F030000              	jmp .L_lambda_opt_end_0156
 28684                                  .L_lambda_opt_code_0156:	; lambda-opt body
 28685 0001571A 48837C241000            	cmp qword [rsp + 8 * 2], 0
 28686 00015720 7411                    	je .L_lambda_opt_arity_check_exact_0156
 28687 00015722 0F8F4D010000            	jg .L_lambda_opt_arity_check_more_0156
 28688 00015728 FF742410                	push qword [rsp + 8 * 2]
 28689 0001572C 6A00                    	push 0
 28690 0001572E E95E2D0000              	jmp L_error_incorrect_arity_opt
 28691                                  .L_lambda_opt_arity_check_exact_0156:
 28692 00015733 4883EC08                	sub rsp, 8
 28693 00015737 488B442408              	mov rax, qword[rsp + 8 *1]
 28694 0001573C 48890424                	mov qword[rsp], rax  
 28695 00015740 488B442410              	mov rax, qword[rsp + 8 *2] ;rax now holds env 
 28696 00015745 4889442408              	mov qword[rsp + 8 * 1], rax
 28697 0001574A B801000000              	mov rax, 1
 28698 0001574F 4889442410              	mov qword[rsp + 8 *2], rax
 28699 00015754 48B8-                   	mov rax, sob_nil
 28699 00015756 [0100000000000000] 
 28700 0001575E 4889442418              	mov qword[rsp + 8 * (3 + 0)], rax
 28701 00015763 C8000000                	enter 0, 0
 28702                                  	; preparing a tail-call
 28703 00015767 488B4520                	mov rax, PARAM(0)	; param vectors
 28704 0001576B 50                      	push rax
 28705 0001576C 48B8-                   	mov rax, L_constants + 2135
 28705 0001576E [5708000000000000] 
 28706 00015776 50                      	push rax
 28707                                  	; preparing a non-tail-call
 28708                                  	; preparing a non-tail-call
 28709                                  	; preparing a non-tail-call
 28710 00015777 488B4520                	mov rax, PARAM(0)	; param vectors
 28711 0001577B 50                      	push rax
 28712 0001577C 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 28713 00015784 803805                  	cmp byte [rax], T_undefined
 28714 00015787 0F840A2C0000            	je L_error_fvar_undefined
 28715 0001578D 50                      	push rax
 28716 0001578E 6A02                    	push 2	; arg count
 28717 00015790 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 28718 00015798 803805                  	cmp byte [rax], T_undefined
 28719 0001579B 0F84F62B0000            	je L_error_fvar_undefined
 28720 000157A1 803804                  	cmp byte [rax], T_closure
 28721 000157A4 0F85712C0000            	jne L_error_non_closure
 28722 000157AA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28723 000157AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 28724 000157B0 50                      	push rax
 28725 000157B1 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 28726 000157B9 803805                  	cmp byte [rax], T_undefined
 28727 000157BC 0F84D52B0000            	je L_error_fvar_undefined
 28728 000157C2 50                      	push rax
 28729 000157C3 6A02                    	push 2	; arg count
 28730 000157C5 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 28731 000157CD 803805                  	cmp byte [rax], T_undefined
 28732 000157D0 0F84C12B0000            	je L_error_fvar_undefined
 28733 000157D6 803804                  	cmp byte [rax], T_closure
 28734 000157D9 0F853C2C0000            	jne L_error_non_closure
 28735 000157DF FF7001                  	push SOB_CLOSURE_ENV(rax)
 28736 000157E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28737 000157E5 50                      	push rax
 28738 000157E6 6A01                    	push 1	; arg count
 28739 000157E8 488B0425[EF150000]      	mov rax, qword [free_var_101]	; free var make-vector
 28740 000157F0 803805                  	cmp byte [rax], T_undefined
 28741 000157F3 0F849E2B0000            	je L_error_fvar_undefined
 28742 000157F9 803804                  	cmp byte [rax], T_closure
 28743 000157FC 0F85192C0000            	jne L_error_non_closure
 28744 00015802 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28745 00015805 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28746 00015808 50                      	push rax
 28747 00015809 6A03                    	push 3	; arg count
 28748 0001580B 488B4510                	mov rax, ENV
 28749 0001580F 488B00                  	mov rax, qword [rax + 8 * 0]
 28750 00015812 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28751 00015815 488B00                  	mov rax, qword [rax]
 28752 00015818 803804                  	cmp byte [rax], T_closure
 28753 0001581B 0F85FA2B0000            	jne L_error_non_closure
 28754 00015821 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28755 00015824 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28756 00015827 FF7500                  	push qword[rbp]
 28757 0001582A 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28758 0001582D 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28759 00015831 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28760 00015835 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28761 00015839 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28762 0001583C 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28763 0001583F 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28764 00015844 4983C103                	add r9, 3 	 ;for getting to the params
 28765 00015848 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28766 0001584C 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28767                                  .L_tc_recycle_frame_loop_0f3b:
 28768 0001584F 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28769 00015852 7410                    	je .L_tc_recycle_frame_done_0f3b
 28770 00015854 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28771 00015857 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28772 0001585A 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28773 0001585E 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28774 00015862 EBEB                    	jmp .L_tc_recycle_frame_loop_0f3b
 28775                                  .L_tc_recycle_frame_done_0f3b:
 28776 00015864 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28777 00015865 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28778 00015869 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28779 0001586C C9                      	leave
 28780 0001586D C21800                  	ret AND_KILL_FRAME(1)
 28781 00015870 E9C4010000              	jmp .L_lambda_opt_end_0156	; new closure is in rax
 28782                                  .L_lambda_opt_arity_check_more_0156:
 28783 00015875 4C8B442410              	mov r8, qword[rsp + 2 * 8]	;;rax is holding arg count
 28784 0001587A 49B9-                   	mov r9, sob_nil
 28784 0001587C [0100000000000000] 
 28785 00015884 4889E3                  	mov rbx, rsp 
 28786 00015887 4883C318                	add rbx, 3*8 	; now rbx is pointing to the first param
 28787 0001588B 49FFC8                  	dec r8	 ;to get to the top - starting at 0 not 1
 28788 0001588E 49C1E003                	shl r8, 3
 28789 00015892 4C01C3                  	add rbx, r8	 ;rbx now points to the last opt param that was pushed
 28790 00015895 4C8B442410              	mov r8, qword[rsp + 2* 8]	;r8 is our loop counter
 28791                                  .L_lambda_opt_stack_shrink_loop_0156:
 28792 0001589A 4983F800                	cmp r8, 0
 28793 0001589E 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0156
 28794 000158A0 BF11000000              	mov rdi, 1+8+8 ;for pair
 28795 000158A5 E81A2C0000              	call malloc;to create the pair in the stack
 28796 000158AA C60021                  	mov byte [rax], T_pair ; to make it a pair
 28797 000158AD 488B0B                  	mov rcx, qword[rbx] ;rcx is holding the param to copy
 28798 000158B0 48894801                	mov qword[rax+1], rcx ;put the car in the last (not inside of the list yet) in the pair
 28799 000158B4 4C894809                 	mov qword[rax+1+8],r9
 28800 000158B8 4989C1                  	mov r9, rax ;for the recursion 
 28801 000158BB 49FFC8                  	dec r8 ;we finished copy another opt param to the list
 28802 000158BE 4883EB08                	sub rbx, 8 ;to get the next param to copy
 28803 000158C2 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0156
 28804                                  .L_lambda_opt_stack_shrink_loop_exit_0156:
 28805 000158C4 488B4C2410              	mov rcx, qword[rsp + 2 * 8] ;rcx is holding the total number of params including opt
 28806 000158C9 4883E901                	sub rcx, 1
 28807 000158CD 48C1E103                	shl rcx, 3 ;rcx is now holding in how much bytes e need to shrink the stack
 28808 000158D1 4801CC                  	add rsp, rcx ;shrinking the stack
 28809 000158D4 4889E0                  	mov rax, rsp
 28810 000158D7 4829C8                  	sub rax, rcx ;now rax is pointing on the original ret
 28811 000158DA 4C8B4010                	mov r8, qword[rax + 2 * 8] ;r8 is holding the arg count including opt
 28812 000158DE 49FFC8                  	dec r8 ;we start with param 0, not 1 
 28813 000158E1 4883C018                	add rax, 3 * 8;now rax is param 0
 28814 000158E5 49C1E003                	shl r8, 3;convert to byte
 28815 000158E9 4C01C0                  	add rax, r8;now rax is the top of the stack
 28816 000158EC 4C8908                  	mov qword[rax], r9;puting the list at the top
 28817 000158EF 4883E808                	sub rax, 8;rax is the adress to copy to the not optional params
 28818 000158F3 4889E3                  	mov rbx, rsp 
 28819 000158F6 4829CB                  	sub rbx, rcx;rbx is the ret adress in the original
 28820 000158F9 41BA00000000            	mov r10, 0;r10 is the not opt params length
 28821 000158FF 49FFCA                  	dec r10 
 28822 00015902 49C1E203                	shl r10, 3;to get bytes
 28823 00015906 4883C318                	add rbx, 3*8;rbx is the first param
 28824 0001590A 4C01D3                  	add rbx, r10; rbx is where the address to copy to
 28825 0001590D 4889E0                  	mov rax, rsp
 28826 00015910 4829C8                  	sub rax, rcx 	 ;now rax is original ret
 28827 00015913 48C744241001000000      	mov qword [rsp+2*8], 1
 28828 0001591C 488B5808                	mov rbx, qword[rax + 8 *1]
 28829 00015920 48895C2408              	mov qword [rsp + 1*8] ,rbx
 28830 00015925 488B18                  	mov rbx, qword[rax]
 28831 00015928 48891C24                	mov qword [rsp], rbx
 28832 0001592C C8000000                	enter 0, 0
 28833                                  	; preparing a tail-call
 28834 00015930 488B4520                	mov rax, PARAM(0)	; param vectors
 28835 00015934 50                      	push rax
 28836 00015935 48B8-                   	mov rax, L_constants + 2135
 28836 00015937 [5708000000000000] 
 28837 0001593F 50                      	push rax
 28838                                  	; preparing a non-tail-call
 28839                                  	; preparing a non-tail-call
 28840                                  	; preparing a non-tail-call
 28841 00015940 488B4520                	mov rax, PARAM(0)	; param vectors
 28842 00015944 50                      	push rax
 28843 00015945 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 28844 0001594D 803805                  	cmp byte [rax], T_undefined
 28845 00015950 0F84412A0000            	je L_error_fvar_undefined
 28846 00015956 50                      	push rax
 28847 00015957 6A02                    	push 2	; arg count
 28848 00015959 488B0425[11160000]      	mov rax, qword [free_var_103]	; free var map
 28849 00015961 803805                  	cmp byte [rax], T_undefined
 28850 00015964 0F842D2A0000            	je L_error_fvar_undefined
 28851 0001596A 803804                  	cmp byte [rax], T_closure
 28852 0001596D 0F85A82A0000            	jne L_error_non_closure
 28853 00015973 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28854 00015976 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28855 00015979 50                      	push rax
 28856 0001597A 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 28857 00015982 803805                  	cmp byte [rax], T_undefined
 28858 00015985 0F840C2A0000            	je L_error_fvar_undefined
 28859 0001598B 50                      	push rax
 28860 0001598C 6A02                    	push 2	; arg count
 28861 0001598E 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 28862 00015996 803805                  	cmp byte [rax], T_undefined
 28863 00015999 0F84F8290000            	je L_error_fvar_undefined
 28864 0001599F 803804                  	cmp byte [rax], T_closure
 28865 000159A2 0F85732A0000            	jne L_error_non_closure
 28866 000159A8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28867 000159AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 28868 000159AE 50                      	push rax
 28869 000159AF 6A01                    	push 1	; arg count
 28870 000159B1 488B0425[EF150000]      	mov rax, qword [free_var_101]	; free var make-vector
 28871 000159B9 803805                  	cmp byte [rax], T_undefined
 28872 000159BC 0F84D5290000            	je L_error_fvar_undefined
 28873 000159C2 803804                  	cmp byte [rax], T_closure
 28874 000159C5 0F85502A0000            	jne L_error_non_closure
 28875 000159CB FF7001                  	push SOB_CLOSURE_ENV(rax)
 28876 000159CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 28877 000159D1 50                      	push rax
 28878 000159D2 6A03                    	push 3	; arg count
 28879 000159D4 488B4510                	mov rax, ENV
 28880 000159D8 488B00                  	mov rax, qword [rax + 8 * 0]
 28881 000159DB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 28882 000159DE 488B00                  	mov rax, qword [rax]
 28883 000159E1 803804                  	cmp byte [rax], T_closure
 28884 000159E4 0F85312A0000            	jne L_error_non_closure
 28885 000159EA FF7001                  	push SOB_CLOSURE_ENV(rax)
 28886 000159ED FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 28887 000159F0 FF7500                  	push qword[rbp]
 28888 000159F3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 28889 000159F6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 28890 000159FA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 28891 000159FE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 28892 00015A02 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 28893 00015A05 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 28894 00015A08 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 28895 00015A0D 4983C103                	add r9, 3 	 ;for getting to the params
 28896 00015A11 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 28897 00015A15 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 28898                                  .L_tc_recycle_frame_loop_0f3a:
 28899 00015A18 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 28900 00015A1B 7410                    	je .L_tc_recycle_frame_done_0f3a
 28901 00015A1D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 28902 00015A20 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 28903 00015A23 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 28904 00015A27 4983E808                	sub r8, 8	 ;move the top of the stack one down
 28905 00015A2B EBEB                    	jmp .L_tc_recycle_frame_loop_0f3a
 28906                                  .L_tc_recycle_frame_done_0f3a:
 28907 00015A2D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 28908 00015A2E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 28909 00015A32 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 28910 00015A35 C9                      	leave
 28911 00015A36 C21800                  	ret AND_KILL_FRAME(1)
 28912                                  .L_lambda_opt_end_0156:	; new closure is in rax
 28913 00015A39 C9                      	leave
 28914 00015A3A C22000                  	ret AND_KILL_FRAME(2)
 28915                                  .L_lambda_simple_end_0ad8:	; new closure is in rax
 28916 00015A3D 803804                  	cmp byte [rax], T_closure
 28917 00015A40 0F85D5290000            	jne L_error_non_closure
 28918 00015A46 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28919 00015A49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 28920 00015A4C 48890425[B9180000]      	mov qword [free_var_143], rax
 28921 00015A54 48B8-                   	mov rax, sob_void
 28921 00015A56 [0000000000000000] 
 28922                                  
 28923 00015A5E 4889C7                  	mov rdi, rax
 28924 00015A61 E8B32C0000              	call print_sexpr_if_not_void
 28925 00015A66 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 28926 00015A6B E8542A0000              	call malloc
 28927 00015A70 50                      	push rax
 28928 00015A71 BF00000000              	mov rdi, 8 * 0	; new rib
 28929 00015A76 E8492A0000              	call malloc
 28930 00015A7B 50                      	push rax
 28931 00015A7C BF08000000              	mov rdi, 8 * 1	; extended env
 28932 00015A81 E83E2A0000              	call malloc
 28933 00015A86 488B7D10                	mov rdi, ENV
 28934 00015A8A BE00000000              	mov rsi, 0
 28935 00015A8F BA01000000              	mov rdx, 1
 28936                                  .L_lambda_simple_env_loop_0adc:	; ext_env[i + 1] <-- env[i]
 28937 00015A94 4883FE00                	cmp rsi, 0
 28938 00015A98 7410                    	je .L_lambda_simple_env_end_0adc
 28939 00015A9A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 28940 00015A9E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 28941 00015AA2 48FFC6                  	inc rsi
 28942 00015AA5 48FFC2                  	inc rdx
 28943 00015AA8 EBEA                    	jmp .L_lambda_simple_env_loop_0adc
 28944                                  .L_lambda_simple_env_end_0adc:
 28945 00015AAA 5B                      	pop rbx
 28946 00015AAB BE00000000              	mov rsi, 0
 28947                                  .L_lambda_simple_params_loop_0adc:	; copy params
 28948 00015AB0 4883FE00                	cmp rsi, 0
 28949 00015AB4 740E                    	je .L_lambda_simple_params_end_0adc
 28950 00015AB6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 28951 00015ABB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 28952 00015ABF 48FFC6                  	inc rsi
 28953 00015AC2 EBEC                    	jmp .L_lambda_simple_params_loop_0adc
 28954                                  .L_lambda_simple_params_end_0adc:
 28955 00015AC4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 28956 00015AC7 4889C3                  	mov rbx, rax
 28957 00015ACA 58                      	pop rax
 28958 00015ACB C60004                  	mov byte [rax], T_closure
 28959 00015ACE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 28960 00015AD2 48C74009[DF5A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0adc
 28961 00015ADA E9CD000000              	jmp .L_lambda_simple_end_0adc
 28962                                  .L_lambda_simple_code_0adc:	; lambda-simple body
 28963 00015ADF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 28964 00015AE5 740B                    	je .L_lambda_simple_arity_check_ok_0adc
 28965 00015AE7 FF742410                	push qword [rsp + 8 * 2]
 28966 00015AEB 6A01                    	push 1
 28967 00015AED E98B290000              	jmp L_error_incorrect_arity_simple
 28968                                  .L_lambda_simple_arity_check_ok_0adc:
 28969 00015AF2 C8000000                	enter 0, 0
 28970                                  	; preparing a tail-call
 28971                                  	; preparing a non-tail-call
 28972                                  	; preparing a non-tail-call
 28973 00015AF6 488B4520                	mov rax, PARAM(0)	; param str
 28974 00015AFA 50                      	push rax
 28975 00015AFB 6A01                    	push 1	; arg count
 28976 00015AFD 488B0425[21170000]      	mov rax, qword [free_var_119]	; free var string->list
 28977 00015B05 803805                  	cmp byte [rax], T_undefined
 28978 00015B08 0F8489280000            	je L_error_fvar_undefined
 28979 00015B0E 803804                  	cmp byte [rax], T_closure
 28980 00015B11 0F8504290000            	jne L_error_non_closure
 28981 00015B17 FF7001                  	push SOB_CLOSURE_ENV(rax)
 28982 00015B1A FF5009                  	call SOB_CLOSURE_CODE(rax)
 28983 00015B1D 50                      	push rax
 28984 00015B1E 6A01                    	push 1	; arg count
 28985 00015B20 488B0425[10170000]      	mov rax, qword [free_var_118]	; free var reverse
 28986 00015B28 803805                  	cmp byte [rax], T_undefined
 28987 00015B2B 0F8466280000            	je L_error_fvar_undefined
 28988 00015B31 803804                  	cmp byte [rax], T_closure
 28989 00015B34 0F85E1280000            	jne L_error_non_closure
 28990 00015B3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 28991 00015B3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 28992 00015B40 50                      	push rax
 28993 00015B41 6A01                    	push 1	; arg count
 28994 00015B43 488B0425[78150000]      	mov rax, qword [free_var_94]	; free var list->string
 28995 00015B4B 803805                  	cmp byte [rax], T_undefined
 28996 00015B4E 0F8443280000            	je L_error_fvar_undefined
 28997 00015B54 803804                  	cmp byte [rax], T_closure
 28998 00015B57 0F85BE280000            	jne L_error_non_closure
 28999 00015B5D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29000 00015B60 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29001 00015B63 FF7500                  	push qword[rbp]
 29002 00015B66 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29003 00015B69 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29004 00015B6D 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29005 00015B71 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29006 00015B75 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29007 00015B78 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29008 00015B7B 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29009 00015B80 4983C103                	add r9, 3 	 ;for getting to the params
 29010 00015B84 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29011 00015B88 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29012                                  .L_tc_recycle_frame_loop_0f3c:
 29013 00015B8B 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29014 00015B8E 7410                    	je .L_tc_recycle_frame_done_0f3c
 29015 00015B90 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29016 00015B93 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29017 00015B96 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29018 00015B9A 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29019 00015B9E EBEB                    	jmp .L_tc_recycle_frame_loop_0f3c
 29020                                  .L_tc_recycle_frame_done_0f3c:
 29021 00015BA0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29022 00015BA1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29023 00015BA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29024 00015BA8 C9                      	leave
 29025 00015BA9 C21800                  	ret AND_KILL_FRAME(1)
 29026                                  .L_lambda_simple_end_0adc:	; new closure is in rax
 29027 00015BAC 48890425[CB170000]      	mov qword [free_var_129], rax
 29028 00015BB4 48B8-                   	mov rax, sob_void
 29028 00015BB6 [0000000000000000] 
 29029                                  
 29030 00015BBE 4889C7                  	mov rdi, rax
 29031 00015BC1 E8532B0000              	call print_sexpr_if_not_void
 29032 00015BC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29033 00015BCB E8F4280000              	call malloc
 29034 00015BD0 50                      	push rax
 29035 00015BD1 BF00000000              	mov rdi, 8 * 0	; new rib
 29036 00015BD6 E8E9280000              	call malloc
 29037 00015BDB 50                      	push rax
 29038 00015BDC BF08000000              	mov rdi, 8 * 1	; extended env
 29039 00015BE1 E8DE280000              	call malloc
 29040 00015BE6 488B7D10                	mov rdi, ENV
 29041 00015BEA BE00000000              	mov rsi, 0
 29042 00015BEF BA01000000              	mov rdx, 1
 29043                                  .L_lambda_simple_env_loop_0add:	; ext_env[i + 1] <-- env[i]
 29044 00015BF4 4883FE00                	cmp rsi, 0
 29045 00015BF8 7410                    	je .L_lambda_simple_env_end_0add
 29046 00015BFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29047 00015BFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29048 00015C02 48FFC6                  	inc rsi
 29049 00015C05 48FFC2                  	inc rdx
 29050 00015C08 EBEA                    	jmp .L_lambda_simple_env_loop_0add
 29051                                  .L_lambda_simple_env_end_0add:
 29052 00015C0A 5B                      	pop rbx
 29053 00015C0B BE00000000              	mov rsi, 0
 29054                                  .L_lambda_simple_params_loop_0add:	; copy params
 29055 00015C10 4883FE00                	cmp rsi, 0
 29056 00015C14 740E                    	je .L_lambda_simple_params_end_0add
 29057 00015C16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29058 00015C1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29059 00015C1F 48FFC6                  	inc rsi
 29060 00015C22 EBEC                    	jmp .L_lambda_simple_params_loop_0add
 29061                                  .L_lambda_simple_params_end_0add:
 29062 00015C24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29063 00015C27 4889C3                  	mov rbx, rax
 29064 00015C2A 58                      	pop rax
 29065 00015C2B C60004                  	mov byte [rax], T_closure
 29066 00015C2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29067 00015C32 48C74009[3F5C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0add
 29068 00015C3A E9CD000000              	jmp .L_lambda_simple_end_0add
 29069                                  .L_lambda_simple_code_0add:	; lambda-simple body
 29070 00015C3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29071 00015C45 740B                    	je .L_lambda_simple_arity_check_ok_0add
 29072 00015C47 FF742410                	push qword [rsp + 8 * 2]
 29073 00015C4B 6A01                    	push 1
 29074 00015C4D E92B280000              	jmp L_error_incorrect_arity_simple
 29075                                  .L_lambda_simple_arity_check_ok_0add:
 29076 00015C52 C8000000                	enter 0, 0
 29077                                  	; preparing a tail-call
 29078                                  	; preparing a non-tail-call
 29079                                  	; preparing a non-tail-call
 29080 00015C56 488B4520                	mov rax, PARAM(0)	; param vec
 29081 00015C5A 50                      	push rax
 29082 00015C5B 6A01                    	push 1	; arg count
 29083 00015C5D 488B0425[A8180000]      	mov rax, qword [free_var_142]	; free var vector->list
 29084 00015C65 803805                  	cmp byte [rax], T_undefined
 29085 00015C68 0F8429270000            	je L_error_fvar_undefined
 29086 00015C6E 803804                  	cmp byte [rax], T_closure
 29087 00015C71 0F85A4270000            	jne L_error_non_closure
 29088 00015C77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29089 00015C7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 29090 00015C7D 50                      	push rax
 29091 00015C7E 6A01                    	push 1	; arg count
 29092 00015C80 488B0425[10170000]      	mov rax, qword [free_var_118]	; free var reverse
 29093 00015C88 803805                  	cmp byte [rax], T_undefined
 29094 00015C8B 0F8406270000            	je L_error_fvar_undefined
 29095 00015C91 803804                  	cmp byte [rax], T_closure
 29096 00015C94 0F8581270000            	jne L_error_non_closure
 29097 00015C9A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29098 00015C9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 29099 00015CA0 50                      	push rax
 29100 00015CA1 6A01                    	push 1	; arg count
 29101 00015CA3 488B0425[89150000]      	mov rax, qword [free_var_95]	; free var list->vector
 29102 00015CAB 803805                  	cmp byte [rax], T_undefined
 29103 00015CAE 0F84E3260000            	je L_error_fvar_undefined
 29104 00015CB4 803804                  	cmp byte [rax], T_closure
 29105 00015CB7 0F855E270000            	jne L_error_non_closure
 29106 00015CBD FF7001                  	push SOB_CLOSURE_ENV(rax)
 29107 00015CC0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29108 00015CC3 FF7500                  	push qword[rbp]
 29109 00015CC6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29110 00015CC9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29111 00015CCD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29112 00015CD1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29113 00015CD5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29114 00015CD8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29115 00015CDB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29116 00015CE0 4983C103                	add r9, 3 	 ;for getting to the params
 29117 00015CE4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29118 00015CE8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29119                                  .L_tc_recycle_frame_loop_0f3d:
 29120 00015CEB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29121 00015CEE 7410                    	je .L_tc_recycle_frame_done_0f3d
 29122 00015CF0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29123 00015CF3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29124 00015CF6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29125 00015CFA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29126 00015CFE EBEB                    	jmp .L_tc_recycle_frame_loop_0f3d
 29127                                  .L_tc_recycle_frame_done_0f3d:
 29128 00015D00 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29129 00015D01 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29130 00015D05 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29131 00015D08 C9                      	leave
 29132 00015D09 C21800                  	ret AND_KILL_FRAME(1)
 29133                                  .L_lambda_simple_end_0add:	; new closure is in rax
 29134 00015D0C 48890425[EC180000]      	mov qword [free_var_146], rax
 29135 00015D14 48B8-                   	mov rax, sob_void
 29135 00015D16 [0000000000000000] 
 29136                                  
 29137 00015D1E 4889C7                  	mov rdi, rax
 29138 00015D21 E8F3290000              	call print_sexpr_if_not_void
 29139                                  	; preparing a non-tail-call
 29140 00015D26 48B8-                   	mov rax, L_constants + 1993
 29140 00015D28 [C907000000000000] 
 29141 00015D30 50                      	push rax
 29142 00015D31 6A01                    	push 1	; arg count
 29143 00015D33 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29144 00015D38 E887270000              	call malloc
 29145 00015D3D 50                      	push rax
 29146 00015D3E BF00000000              	mov rdi, 8 * 0	; new rib
 29147 00015D43 E87C270000              	call malloc
 29148 00015D48 50                      	push rax
 29149 00015D49 BF08000000              	mov rdi, 8 * 1	; extended env
 29150 00015D4E E871270000              	call malloc
 29151 00015D53 488B7D10                	mov rdi, ENV
 29152 00015D57 BE00000000              	mov rsi, 0
 29153 00015D5C BA01000000              	mov rdx, 1
 29154                                  .L_lambda_simple_env_loop_0ade:	; ext_env[i + 1] <-- env[i]
 29155 00015D61 4883FE00                	cmp rsi, 0
 29156 00015D65 7410                    	je .L_lambda_simple_env_end_0ade
 29157 00015D67 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29158 00015D6B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29159 00015D6F 48FFC6                  	inc rsi
 29160 00015D72 48FFC2                  	inc rdx
 29161 00015D75 EBEA                    	jmp .L_lambda_simple_env_loop_0ade
 29162                                  .L_lambda_simple_env_end_0ade:
 29163 00015D77 5B                      	pop rbx
 29164 00015D78 BE00000000              	mov rsi, 0
 29165                                  .L_lambda_simple_params_loop_0ade:	; copy params
 29166 00015D7D 4883FE00                	cmp rsi, 0
 29167 00015D81 740E                    	je .L_lambda_simple_params_end_0ade
 29168 00015D83 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29169 00015D88 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29170 00015D8C 48FFC6                  	inc rsi
 29171 00015D8F EBEC                    	jmp .L_lambda_simple_params_loop_0ade
 29172                                  .L_lambda_simple_params_end_0ade:
 29173 00015D91 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29174 00015D94 4889C3                  	mov rbx, rax
 29175 00015D97 58                      	pop rax
 29176 00015D98 C60004                  	mov byte [rax], T_closure
 29177 00015D9B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29178 00015D9F 48C74009[AC5D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ade
 29179 00015DA7 E959060000              	jmp .L_lambda_simple_end_0ade
 29180                                  .L_lambda_simple_code_0ade:	; lambda-simple body
 29181 00015DAC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29182 00015DB2 740B                    	je .L_lambda_simple_arity_check_ok_0ade
 29183 00015DB4 FF742410                	push qword [rsp + 8 * 2]
 29184 00015DB8 6A01                    	push 1
 29185 00015DBA E9BE260000              	jmp L_error_incorrect_arity_simple
 29186                                  .L_lambda_simple_arity_check_ok_0ade:
 29187 00015DBF C8000000                	enter 0, 0
 29188 00015DC3 BF08000000              	mov rdi, 8*1
 29189 00015DC8 E8F7260000              	call malloc
 29190 00015DCD 488B5D20                	mov rbx, PARAM(0)
 29191 00015DD1 488918                  	mov qword[rax], rbx
 29192 00015DD4 48894520                	mov PARAM(0), rax
 29193 00015DD8 48B8-                   	mov rax, sob_void
 29193 00015DDA [0000000000000000] 
 29194                                  
 29195 00015DE2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29196 00015DE7 E8D8260000              	call malloc
 29197 00015DEC 50                      	push rax
 29198 00015DED BF08000000              	mov rdi, 8 * 1	; new rib
 29199 00015DF2 E8CD260000              	call malloc
 29200 00015DF7 50                      	push rax
 29201 00015DF8 BF10000000              	mov rdi, 8 * 2	; extended env
 29202 00015DFD E8C2260000              	call malloc
 29203 00015E02 488B7D10                	mov rdi, ENV
 29204 00015E06 BE00000000              	mov rsi, 0
 29205 00015E0B BA01000000              	mov rdx, 1
 29206                                  .L_lambda_simple_env_loop_0adf:	; ext_env[i + 1] <-- env[i]
 29207 00015E10 4883FE01                	cmp rsi, 1
 29208 00015E14 7410                    	je .L_lambda_simple_env_end_0adf
 29209 00015E16 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29210 00015E1A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29211 00015E1E 48FFC6                  	inc rsi
 29212 00015E21 48FFC2                  	inc rdx
 29213 00015E24 EBEA                    	jmp .L_lambda_simple_env_loop_0adf
 29214                                  .L_lambda_simple_env_end_0adf:
 29215 00015E26 5B                      	pop rbx
 29216 00015E27 BE00000000              	mov rsi, 0
 29217                                  .L_lambda_simple_params_loop_0adf:	; copy params
 29218 00015E2C 4883FE01                	cmp rsi, 1
 29219 00015E30 740E                    	je .L_lambda_simple_params_end_0adf
 29220 00015E32 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29221 00015E37 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29222 00015E3B 48FFC6                  	inc rsi
 29223 00015E3E EBEC                    	jmp .L_lambda_simple_params_loop_0adf
 29224                                  .L_lambda_simple_params_end_0adf:
 29225 00015E40 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29226 00015E43 4889C3                  	mov rbx, rax
 29227 00015E46 58                      	pop rax
 29228 00015E47 C60004                  	mov byte [rax], T_closure
 29229 00015E4A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29230 00015E4E 48C74009[5B5E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0adf
 29231 00015E56 E904030000              	jmp .L_lambda_simple_end_0adf
 29232                                  .L_lambda_simple_code_0adf:	; lambda-simple body
 29233 00015E5B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29234 00015E61 740B                    	je .L_lambda_simple_arity_check_ok_0adf
 29235 00015E63 FF742410                	push qword [rsp + 8 * 2]
 29236 00015E67 6A03                    	push 3
 29237 00015E69 E90F260000              	jmp L_error_incorrect_arity_simple
 29238                                  .L_lambda_simple_arity_check_ok_0adf:
 29239 00015E6E C8000000                	enter 0, 0
 29240                                  	; preparing a non-tail-call
 29241 00015E72 488B4530                	mov rax, PARAM(2)	; param j
 29242 00015E76 50                      	push rax
 29243 00015E77 488B4528                	mov rax, PARAM(1)	; param i
 29244 00015E7B 50                      	push rax
 29245 00015E7C 6A02                    	push 2	; arg count
 29246 00015E7E 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 29247 00015E86 803805                  	cmp byte [rax], T_undefined
 29248 00015E89 0F8408250000            	je L_error_fvar_undefined
 29249 00015E8F 803804                  	cmp byte [rax], T_closure
 29250 00015E92 0F8583250000            	jne L_error_non_closure
 29251 00015E98 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29252 00015E9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 29253 00015E9E 483D[02000000]          	cmp rax, sob_boolean_false
 29254 00015EA4 0F84AD020000            	je .L_if_else_0835
 29255                                  	; preparing a tail-call
 29256                                  	; preparing a non-tail-call
 29257 00015EAA 488B4528                	mov rax, PARAM(1)	; param i
 29258 00015EAE 50                      	push rax
 29259 00015EAF 488B4520                	mov rax, PARAM(0)	; param str
 29260 00015EB3 50                      	push rax
 29261 00015EB4 6A02                    	push 2	; arg count
 29262 00015EB6 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 29263 00015EBE 803805                  	cmp byte [rax], T_undefined
 29264 00015EC1 0F84D0240000            	je L_error_fvar_undefined
 29265 00015EC7 803804                  	cmp byte [rax], T_closure
 29266 00015ECA 0F854B250000            	jne L_error_non_closure
 29267 00015ED0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29268 00015ED3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29269 00015ED6 50                      	push rax
 29270 00015ED7 6A01                    	push 1	; arg count
 29271 00015ED9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29272 00015EDE E8E1250000              	call malloc
 29273 00015EE3 50                      	push rax
 29274 00015EE4 BF18000000              	mov rdi, 8 * 3	; new rib
 29275 00015EE9 E8D6250000              	call malloc
 29276 00015EEE 50                      	push rax
 29277 00015EEF BF18000000              	mov rdi, 8 * 3	; extended env
 29278 00015EF4 E8CB250000              	call malloc
 29279 00015EF9 488B7D10                	mov rdi, ENV
 29280 00015EFD BE00000000              	mov rsi, 0
 29281 00015F02 BA01000000              	mov rdx, 1
 29282                                  .L_lambda_simple_env_loop_0ae0:	; ext_env[i + 1] <-- env[i]
 29283 00015F07 4883FE02                	cmp rsi, 2
 29284 00015F0B 7410                    	je .L_lambda_simple_env_end_0ae0
 29285 00015F0D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29286 00015F11 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29287 00015F15 48FFC6                  	inc rsi
 29288 00015F18 48FFC2                  	inc rdx
 29289 00015F1B EBEA                    	jmp .L_lambda_simple_env_loop_0ae0
 29290                                  .L_lambda_simple_env_end_0ae0:
 29291 00015F1D 5B                      	pop rbx
 29292 00015F1E BE00000000              	mov rsi, 0
 29293                                  .L_lambda_simple_params_loop_0ae0:	; copy params
 29294 00015F23 4883FE03                	cmp rsi, 3
 29295 00015F27 740E                    	je .L_lambda_simple_params_end_0ae0
 29296 00015F29 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29297 00015F2E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29298 00015F32 48FFC6                  	inc rsi
 29299 00015F35 EBEC                    	jmp .L_lambda_simple_params_loop_0ae0
 29300                                  .L_lambda_simple_params_end_0ae0:
 29301 00015F37 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29302 00015F3A 4889C3                  	mov rbx, rax
 29303 00015F3D 58                      	pop rax
 29304 00015F3E C60004                  	mov byte [rax], T_closure
 29305 00015F41 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29306 00015F45 48C74009[525F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae0
 29307 00015F4D E9AF010000              	jmp .L_lambda_simple_end_0ae0
 29308                                  .L_lambda_simple_code_0ae0:	; lambda-simple body
 29309 00015F52 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29310 00015F58 740B                    	je .L_lambda_simple_arity_check_ok_0ae0
 29311 00015F5A FF742410                	push qword [rsp + 8 * 2]
 29312 00015F5E 6A01                    	push 1
 29313 00015F60 E918250000              	jmp L_error_incorrect_arity_simple
 29314                                  .L_lambda_simple_arity_check_ok_0ae0:
 29315 00015F65 C8000000                	enter 0, 0
 29316                                  	; preparing a non-tail-call
 29317                                  	; preparing a non-tail-call
 29318 00015F69 488B4510                	mov rax, ENV
 29319 00015F6D 488B00                  	mov rax, qword [rax + 8 * 0]
 29320 00015F70 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29321 00015F74 50                      	push rax
 29322 00015F75 488B4510                	mov rax, ENV
 29323 00015F79 488B00                  	mov rax, qword [rax + 8 * 0]
 29324 00015F7C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29325 00015F7F 50                      	push rax
 29326 00015F80 6A02                    	push 2	; arg count
 29327 00015F82 488B0425[BA170000]      	mov rax, qword [free_var_128]	; free var string-ref
 29328 00015F8A 803805                  	cmp byte [rax], T_undefined
 29329 00015F8D 0F8404240000            	je L_error_fvar_undefined
 29330 00015F93 803804                  	cmp byte [rax], T_closure
 29331 00015F96 0F857F240000            	jne L_error_non_closure
 29332 00015F9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29333 00015F9F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29334 00015FA2 50                      	push rax
 29335 00015FA3 488B4510                	mov rax, ENV
 29336 00015FA7 488B00                  	mov rax, qword [rax + 8 * 0]
 29337 00015FAA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29338 00015FAE 50                      	push rax
 29339 00015FAF 488B4510                	mov rax, ENV
 29340 00015FB3 488B00                  	mov rax, qword [rax + 8 * 0]
 29341 00015FB6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29342 00015FB9 50                      	push rax
 29343 00015FBA 6A03                    	push 3	; arg count
 29344 00015FBC 488B0425[ED170000]      	mov rax, qword [free_var_131]	; free var string-set!
 29345 00015FC4 803805                  	cmp byte [rax], T_undefined
 29346 00015FC7 0F84CA230000            	je L_error_fvar_undefined
 29347 00015FCD 803804                  	cmp byte [rax], T_closure
 29348 00015FD0 0F8545240000            	jne L_error_non_closure
 29349 00015FD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29350 00015FD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29351                                  
 29352                                  	; preparing a non-tail-call
 29353 00015FDC 488B4520                	mov rax, PARAM(0)	; param ch
 29354 00015FE0 50                      	push rax
 29355 00015FE1 488B4510                	mov rax, ENV
 29356 00015FE5 488B00                  	mov rax, qword [rax + 8 * 0]
 29357 00015FE8 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29358 00015FEC 50                      	push rax
 29359 00015FED 488B4510                	mov rax, ENV
 29360 00015FF1 488B00                  	mov rax, qword [rax + 8 * 0]
 29361 00015FF4 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29362 00015FF7 50                      	push rax
 29363 00015FF8 6A03                    	push 3	; arg count
 29364 00015FFA 488B0425[ED170000]      	mov rax, qword [free_var_131]	; free var string-set!
 29365 00016002 803805                  	cmp byte [rax], T_undefined
 29366 00016005 0F848C230000            	je L_error_fvar_undefined
 29367 0001600B 803804                  	cmp byte [rax], T_closure
 29368 0001600E 0F8507240000            	jne L_error_non_closure
 29369 00016014 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29370 00016017 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29371                                  
 29372                                  	; preparing a tail-call
 29373                                  	; preparing a non-tail-call
 29374 0001601A 48B8-                   	mov rax, L_constants + 2270
 29374 0001601C [DE08000000000000] 
 29375 00016024 50                      	push rax
 29376 00016025 488B4510                	mov rax, ENV
 29377 00016029 488B00                  	mov rax, qword [rax + 8 * 0]
 29378 0001602C 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29379 00016030 50                      	push rax
 29380 00016031 6A02                    	push 2	; arg count
 29381 00016033 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 29382 0001603B 803805                  	cmp byte [rax], T_undefined
 29383 0001603E 0F8453230000            	je L_error_fvar_undefined
 29384 00016044 803804                  	cmp byte [rax], T_closure
 29385 00016047 0F85CE230000            	jne L_error_non_closure
 29386 0001604D FF7001                  	push SOB_CLOSURE_ENV(rax)
 29387 00016050 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29388 00016053 50                      	push rax
 29389                                  	; preparing a non-tail-call
 29390 00016054 48B8-                   	mov rax, L_constants + 2270
 29390 00016056 [DE08000000000000] 
 29391 0001605E 50                      	push rax
 29392 0001605F 488B4510                	mov rax, ENV
 29393 00016063 488B00                  	mov rax, qword [rax + 8 * 0]
 29394 00016066 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29395 0001606A 50                      	push rax
 29396 0001606B 6A02                    	push 2	; arg count
 29397 0001606D 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 29398 00016075 803805                  	cmp byte [rax], T_undefined
 29399 00016078 0F8419230000            	je L_error_fvar_undefined
 29400 0001607E 803804                  	cmp byte [rax], T_closure
 29401 00016081 0F8594230000            	jne L_error_non_closure
 29402 00016087 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29403 0001608A FF5009                  	call SOB_CLOSURE_CODE(rax)
 29404 0001608D 50                      	push rax
 29405 0001608E 488B4510                	mov rax, ENV
 29406 00016092 488B00                  	mov rax, qword [rax + 8 * 0]
 29407 00016095 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29408 00016098 50                      	push rax
 29409 00016099 6A03                    	push 3	; arg count
 29410 0001609B 488B4510                	mov rax, ENV
 29411 0001609F 488B4008                	mov rax, qword [rax + 8 * 1]
 29412 000160A3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29413 000160A6 488B00                  	mov rax, qword [rax]
 29414 000160A9 803804                  	cmp byte [rax], T_closure
 29415 000160AC 0F8569230000            	jne L_error_non_closure
 29416 000160B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29417 000160B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29418 000160B8 FF7500                  	push qword[rbp]
 29419 000160BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29420 000160BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29421 000160C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29422 000160C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29423 000160CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29424 000160CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29425 000160D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29426 000160D5 4983C103                	add r9, 3 	 ;for getting to the params
 29427 000160D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29428 000160DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29429                                  .L_tc_recycle_frame_loop_0f3e:
 29430 000160E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29431 000160E3 7410                    	je .L_tc_recycle_frame_done_0f3e
 29432 000160E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29433 000160E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29434 000160EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29435 000160EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29436 000160F3 EBEB                    	jmp .L_tc_recycle_frame_loop_0f3e
 29437                                  .L_tc_recycle_frame_done_0f3e:
 29438 000160F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29439 000160F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29440 000160FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29441 000160FD C9                      	leave
 29442 000160FE C21800                  	ret AND_KILL_FRAME(1)
 29443                                  .L_lambda_simple_end_0ae0:	; new closure is in rax
 29444 00016101 803804                  	cmp byte [rax], T_closure
 29445 00016104 0F8511230000            	jne L_error_non_closure
 29446 0001610A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29447 0001610D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29448 00016110 FF7500                  	push qword[rbp]
 29449 00016113 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29450 00016116 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29451 0001611A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29452 0001611E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29453 00016122 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29454 00016125 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29455 00016128 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29456 0001612D 4983C103                	add r9, 3 	 ;for getting to the params
 29457 00016131 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29458 00016135 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29459                                  .L_tc_recycle_frame_loop_0f3f:
 29460 00016138 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29461 0001613B 7410                    	je .L_tc_recycle_frame_done_0f3f
 29462 0001613D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29463 00016140 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29464 00016143 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29465 00016147 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29466 0001614B EBEB                    	jmp .L_tc_recycle_frame_loop_0f3f
 29467                                  .L_tc_recycle_frame_done_0f3f:
 29468 0001614D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29469 0001614E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29470 00016152 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29471 00016155 EB04                    	jmp .L_if_end_0835
 29472                                  .L_if_else_0835:
 29473 00016157 488B4520                	mov rax, PARAM(0)	; param str
 29474                                  .L_if_end_0835:
 29475 0001615B C9                      	leave
 29476 0001615C C22800                  	ret AND_KILL_FRAME(3)
 29477                                  .L_lambda_simple_end_0adf:	; new closure is in rax
 29478 0001615F 50                      	push rax
 29479 00016160 488B4520                	mov rax, PARAM(0)	; param run
 29480 00016164 8F00                    	pop qword [rax]
 29481 00016166 48B8-                   	mov rax, sob_void
 29481 00016168 [0000000000000000] 
 29482                                  
 29483 00016170 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29484 00016175 E84A230000              	call malloc
 29485 0001617A 50                      	push rax
 29486 0001617B BF08000000              	mov rdi, 8 * 1	; new rib
 29487 00016180 E83F230000              	call malloc
 29488 00016185 50                      	push rax
 29489 00016186 BF10000000              	mov rdi, 8 * 2	; extended env
 29490 0001618B E834230000              	call malloc
 29491 00016190 488B7D10                	mov rdi, ENV
 29492 00016194 BE00000000              	mov rsi, 0
 29493 00016199 BA01000000              	mov rdx, 1
 29494                                  .L_lambda_simple_env_loop_0ae1:	; ext_env[i + 1] <-- env[i]
 29495 0001619E 4883FE01                	cmp rsi, 1
 29496 000161A2 7410                    	je .L_lambda_simple_env_end_0ae1
 29497 000161A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29498 000161A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29499 000161AC 48FFC6                  	inc rsi
 29500 000161AF 48FFC2                  	inc rdx
 29501 000161B2 EBEA                    	jmp .L_lambda_simple_env_loop_0ae1
 29502                                  .L_lambda_simple_env_end_0ae1:
 29503 000161B4 5B                      	pop rbx
 29504 000161B5 BE00000000              	mov rsi, 0
 29505                                  .L_lambda_simple_params_loop_0ae1:	; copy params
 29506 000161BA 4883FE01                	cmp rsi, 1
 29507 000161BE 740E                    	je .L_lambda_simple_params_end_0ae1
 29508 000161C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29509 000161C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29510 000161C9 48FFC6                  	inc rsi
 29511 000161CC EBEC                    	jmp .L_lambda_simple_params_loop_0ae1
 29512                                  .L_lambda_simple_params_end_0ae1:
 29513 000161CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29514 000161D1 4889C3                  	mov rbx, rax
 29515 000161D4 58                      	pop rax
 29516 000161D5 C60004                  	mov byte [rax], T_closure
 29517 000161D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29518 000161DC 48C74009[E9610100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae1
 29519 000161E4 E918020000              	jmp .L_lambda_simple_end_0ae1
 29520                                  .L_lambda_simple_code_0ae1:	; lambda-simple body
 29521 000161E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29522 000161EF 740B                    	je .L_lambda_simple_arity_check_ok_0ae1
 29523 000161F1 FF742410                	push qword [rsp + 8 * 2]
 29524 000161F5 6A01                    	push 1
 29525 000161F7 E981220000              	jmp L_error_incorrect_arity_simple
 29526                                  .L_lambda_simple_arity_check_ok_0ae1:
 29527 000161FC C8000000                	enter 0, 0
 29528                                  	; preparing a tail-call
 29529                                  	; preparing a non-tail-call
 29530 00016200 488B4520                	mov rax, PARAM(0)	; param str
 29531 00016204 50                      	push rax
 29532 00016205 6A01                    	push 1	; arg count
 29533 00016207 488B0425[A9170000]      	mov rax, qword [free_var_127]	; free var string-length
 29534 0001620F 803805                  	cmp byte [rax], T_undefined
 29535 00016212 0F847F210000            	je L_error_fvar_undefined
 29536 00016218 803804                  	cmp byte [rax], T_closure
 29537 0001621B 0F85FA210000            	jne L_error_non_closure
 29538 00016221 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29539 00016224 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29540 00016227 50                      	push rax
 29541 00016228 6A01                    	push 1	; arg count
 29542 0001622A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29543 0001622F E890220000              	call malloc
 29544 00016234 50                      	push rax
 29545 00016235 BF08000000              	mov rdi, 8 * 1	; new rib
 29546 0001623A E885220000              	call malloc
 29547 0001623F 50                      	push rax
 29548 00016240 BF18000000              	mov rdi, 8 * 3	; extended env
 29549 00016245 E87A220000              	call malloc
 29550 0001624A 488B7D10                	mov rdi, ENV
 29551 0001624E BE00000000              	mov rsi, 0
 29552 00016253 BA01000000              	mov rdx, 1
 29553                                  .L_lambda_simple_env_loop_0ae2:	; ext_env[i + 1] <-- env[i]
 29554 00016258 4883FE02                	cmp rsi, 2
 29555 0001625C 7410                    	je .L_lambda_simple_env_end_0ae2
 29556 0001625E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29557 00016262 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29558 00016266 48FFC6                  	inc rsi
 29559 00016269 48FFC2                  	inc rdx
 29560 0001626C EBEA                    	jmp .L_lambda_simple_env_loop_0ae2
 29561                                  .L_lambda_simple_env_end_0ae2:
 29562 0001626E 5B                      	pop rbx
 29563 0001626F BE00000000              	mov rsi, 0
 29564                                  .L_lambda_simple_params_loop_0ae2:	; copy params
 29565 00016274 4883FE01                	cmp rsi, 1
 29566 00016278 740E                    	je .L_lambda_simple_params_end_0ae2
 29567 0001627A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29568 0001627F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29569 00016283 48FFC6                  	inc rsi
 29570 00016286 EBEC                    	jmp .L_lambda_simple_params_loop_0ae2
 29571                                  .L_lambda_simple_params_end_0ae2:
 29572 00016288 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29573 0001628B 4889C3                  	mov rbx, rax
 29574 0001628E 58                      	pop rax
 29575 0001628F C60004                  	mov byte [rax], T_closure
 29576 00016292 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29577 00016296 48C74009[A3620100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae2
 29578 0001629E E906010000              	jmp .L_lambda_simple_end_0ae2
 29579                                  .L_lambda_simple_code_0ae2:	; lambda-simple body
 29580 000162A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29581 000162A9 740B                    	je .L_lambda_simple_arity_check_ok_0ae2
 29582 000162AB FF742410                	push qword [rsp + 8 * 2]
 29583 000162AF 6A01                    	push 1
 29584 000162B1 E9C7210000              	jmp L_error_incorrect_arity_simple
 29585                                  .L_lambda_simple_arity_check_ok_0ae2:
 29586 000162B6 C8000000                	enter 0, 0
 29587                                  	; preparing a non-tail-call
 29588 000162BA 488B4520                	mov rax, PARAM(0)	; param n
 29589 000162BE 50                      	push rax
 29590 000162BF 6A01                    	push 1	; arg count
 29591 000162C1 488B0425[52190000]      	mov rax, qword [free_var_152]	; free var zero?
 29592 000162C9 803805                  	cmp byte [rax], T_undefined
 29593 000162CC 0F84C5200000            	je L_error_fvar_undefined
 29594 000162D2 803804                  	cmp byte [rax], T_closure
 29595 000162D5 0F8540210000            	jne L_error_non_closure
 29596 000162DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 29597 000162DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 29598 000162E1 483D[02000000]          	cmp rax, sob_boolean_false
 29599 000162E7 740F                    	je .L_if_else_0836
 29600 000162E9 488B4510                	mov rax, ENV
 29601 000162ED 488B00                  	mov rax, qword [rax + 8 * 0]
 29602 000162F0 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29603 000162F3 E9AD000000              	jmp .L_if_end_0836
 29604                                  .L_if_else_0836:
 29605                                  	; preparing a tail-call
 29606                                  	; preparing a non-tail-call
 29607 000162F8 48B8-                   	mov rax, L_constants + 2270
 29607 000162FA [DE08000000000000] 
 29608 00016302 50                      	push rax
 29609 00016303 488B4520                	mov rax, PARAM(0)	; param n
 29610 00016307 50                      	push rax
 29611 00016308 6A02                    	push 2	; arg count
 29612 0001630A 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 29613 00016312 803805                  	cmp byte [rax], T_undefined
 29614 00016315 0F847C200000            	je L_error_fvar_undefined
 29615 0001631B 803804                  	cmp byte [rax], T_closure
 29616 0001631E 0F85F7200000            	jne L_error_non_closure
 29617 00016324 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29618 00016327 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29619 0001632A 50                      	push rax
 29620 0001632B 48B8-                   	mov rax, L_constants + 2135
 29620 0001632D [5708000000000000] 
 29621 00016335 50                      	push rax
 29622 00016336 488B4510                	mov rax, ENV
 29623 0001633A 488B00                  	mov rax, qword [rax + 8 * 0]
 29624 0001633D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 29625 00016340 50                      	push rax
 29626 00016341 6A03                    	push 3	; arg count
 29627 00016343 488B4510                	mov rax, ENV
 29628 00016347 488B4008                	mov rax, qword [rax + 8 * 1]
 29629 0001634B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29630 0001634E 488B00                  	mov rax, qword [rax]
 29631 00016351 803804                  	cmp byte [rax], T_closure
 29632 00016354 0F85C1200000            	jne L_error_non_closure
 29633 0001635A FF7001                  	push SOB_CLOSURE_ENV(rax)
 29634 0001635D FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29635 00016360 FF7500                  	push qword[rbp]
 29636 00016363 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29637 00016366 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29638 0001636A 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29639 0001636E 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29640 00016372 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29641 00016375 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29642 00016378 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29643 0001637D 4983C103                	add r9, 3 	 ;for getting to the params
 29644 00016381 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29645 00016385 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29646                                  .L_tc_recycle_frame_loop_0f40:
 29647 00016388 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29648 0001638B 7410                    	je .L_tc_recycle_frame_done_0f40
 29649 0001638D 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29650 00016390 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29651 00016393 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29652 00016397 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29653 0001639B EBEB                    	jmp .L_tc_recycle_frame_loop_0f40
 29654                                  .L_tc_recycle_frame_done_0f40:
 29655 0001639D 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29656 0001639E 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29657 000163A2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29658                                  .L_if_end_0836:
 29659 000163A5 C9                      	leave
 29660 000163A6 C21800                  	ret AND_KILL_FRAME(1)
 29661                                  .L_lambda_simple_end_0ae2:	; new closure is in rax
 29662 000163A9 803804                  	cmp byte [rax], T_closure
 29663 000163AC 0F8569200000            	jne L_error_non_closure
 29664 000163B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29665 000163B5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29666 000163B8 FF7500                  	push qword[rbp]
 29667 000163BB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29668 000163BE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29669 000163C2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29670 000163C6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29671 000163CA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29672 000163CD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29673 000163D0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29674 000163D5 4983C103                	add r9, 3 	 ;for getting to the params
 29675 000163D9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29676 000163DD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29677                                  .L_tc_recycle_frame_loop_0f41:
 29678 000163E0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29679 000163E3 7410                    	je .L_tc_recycle_frame_done_0f41
 29680 000163E5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29681 000163E8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29682 000163EB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 29683 000163EF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 29684 000163F3 EBEB                    	jmp .L_tc_recycle_frame_loop_0f41
 29685                                  .L_tc_recycle_frame_done_0f41:
 29686 000163F5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 29687 000163F6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 29688 000163FA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 29689 000163FD C9                      	leave
 29690 000163FE C21800                  	ret AND_KILL_FRAME(1)
 29691                                  .L_lambda_simple_end_0ae1:	; new closure is in rax
 29692 00016401 C9                      	leave
 29693 00016402 C21800                  	ret AND_KILL_FRAME(1)
 29694                                  .L_lambda_simple_end_0ade:	; new closure is in rax
 29695 00016405 803804                  	cmp byte [rax], T_closure
 29696 00016408 0F850D200000            	jne L_error_non_closure
 29697 0001640E FF7001                  	push SOB_CLOSURE_ENV(rax)
 29698 00016411 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29699 00016414 48890425[DC170000]      	mov qword [free_var_130], rax
 29700 0001641C 48B8-                   	mov rax, sob_void
 29700 0001641E [0000000000000000] 
 29701                                  
 29702 00016426 4889C7                  	mov rdi, rax
 29703 00016429 E8EB220000              	call print_sexpr_if_not_void
 29704                                  	; preparing a non-tail-call
 29705 0001642E 48B8-                   	mov rax, L_constants + 1993
 29705 00016430 [C907000000000000] 
 29706 00016438 50                      	push rax
 29707 00016439 6A01                    	push 1	; arg count
 29708 0001643B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29709 00016440 E87F200000              	call malloc
 29710 00016445 50                      	push rax
 29711 00016446 BF00000000              	mov rdi, 8 * 0	; new rib
 29712 0001644B E874200000              	call malloc
 29713 00016450 50                      	push rax
 29714 00016451 BF08000000              	mov rdi, 8 * 1	; extended env
 29715 00016456 E869200000              	call malloc
 29716 0001645B 488B7D10                	mov rdi, ENV
 29717 0001645F BE00000000              	mov rsi, 0
 29718 00016464 BA01000000              	mov rdx, 1
 29719                                  .L_lambda_simple_env_loop_0ae3:	; ext_env[i + 1] <-- env[i]
 29720 00016469 4883FE00                	cmp rsi, 0
 29721 0001646D 7410                    	je .L_lambda_simple_env_end_0ae3
 29722 0001646F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29723 00016473 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29724 00016477 48FFC6                  	inc rsi
 29725 0001647A 48FFC2                  	inc rdx
 29726 0001647D EBEA                    	jmp .L_lambda_simple_env_loop_0ae3
 29727                                  .L_lambda_simple_env_end_0ae3:
 29728 0001647F 5B                      	pop rbx
 29729 00016480 BE00000000              	mov rsi, 0
 29730                                  .L_lambda_simple_params_loop_0ae3:	; copy params
 29731 00016485 4883FE00                	cmp rsi, 0
 29732 00016489 740E                    	je .L_lambda_simple_params_end_0ae3
 29733 0001648B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29734 00016490 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29735 00016494 48FFC6                  	inc rsi
 29736 00016497 EBEC                    	jmp .L_lambda_simple_params_loop_0ae3
 29737                                  .L_lambda_simple_params_end_0ae3:
 29738 00016499 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29739 0001649C 4889C3                  	mov rbx, rax
 29740 0001649F 58                      	pop rax
 29741 000164A0 C60004                  	mov byte [rax], T_closure
 29742 000164A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29743 000164A7 48C74009[B4640100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae3
 29744 000164AF E959060000              	jmp .L_lambda_simple_end_0ae3
 29745                                  .L_lambda_simple_code_0ae3:	; lambda-simple body
 29746 000164B4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29747 000164BA 740B                    	je .L_lambda_simple_arity_check_ok_0ae3
 29748 000164BC FF742410                	push qword [rsp + 8 * 2]
 29749 000164C0 6A01                    	push 1
 29750 000164C2 E9B61F0000              	jmp L_error_incorrect_arity_simple
 29751                                  .L_lambda_simple_arity_check_ok_0ae3:
 29752 000164C7 C8000000                	enter 0, 0
 29753 000164CB BF08000000              	mov rdi, 8*1
 29754 000164D0 E8EF1F0000              	call malloc
 29755 000164D5 488B5D20                	mov rbx, PARAM(0)
 29756 000164D9 488918                  	mov qword[rax], rbx
 29757 000164DC 48894520                	mov PARAM(0), rax
 29758 000164E0 48B8-                   	mov rax, sob_void
 29758 000164E2 [0000000000000000] 
 29759                                  
 29760 000164EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29761 000164EF E8D01F0000              	call malloc
 29762 000164F4 50                      	push rax
 29763 000164F5 BF08000000              	mov rdi, 8 * 1	; new rib
 29764 000164FA E8C51F0000              	call malloc
 29765 000164FF 50                      	push rax
 29766 00016500 BF10000000              	mov rdi, 8 * 2	; extended env
 29767 00016505 E8BA1F0000              	call malloc
 29768 0001650A 488B7D10                	mov rdi, ENV
 29769 0001650E BE00000000              	mov rsi, 0
 29770 00016513 BA01000000              	mov rdx, 1
 29771                                  .L_lambda_simple_env_loop_0ae4:	; ext_env[i + 1] <-- env[i]
 29772 00016518 4883FE01                	cmp rsi, 1
 29773 0001651C 7410                    	je .L_lambda_simple_env_end_0ae4
 29774 0001651E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29775 00016522 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29776 00016526 48FFC6                  	inc rsi
 29777 00016529 48FFC2                  	inc rdx
 29778 0001652C EBEA                    	jmp .L_lambda_simple_env_loop_0ae4
 29779                                  .L_lambda_simple_env_end_0ae4:
 29780 0001652E 5B                      	pop rbx
 29781 0001652F BE00000000              	mov rsi, 0
 29782                                  .L_lambda_simple_params_loop_0ae4:	; copy params
 29783 00016534 4883FE01                	cmp rsi, 1
 29784 00016538 740E                    	je .L_lambda_simple_params_end_0ae4
 29785 0001653A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29786 0001653F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29787 00016543 48FFC6                  	inc rsi
 29788 00016546 EBEC                    	jmp .L_lambda_simple_params_loop_0ae4
 29789                                  .L_lambda_simple_params_end_0ae4:
 29790 00016548 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29791 0001654B 4889C3                  	mov rbx, rax
 29792 0001654E 58                      	pop rax
 29793 0001654F C60004                  	mov byte [rax], T_closure
 29794 00016552 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29795 00016556 48C74009[63650100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae4
 29796 0001655E E904030000              	jmp .L_lambda_simple_end_0ae4
 29797                                  .L_lambda_simple_code_0ae4:	; lambda-simple body
 29798 00016563 48837C241003            	cmp qword [rsp + 8 * 2], 3
 29799 00016569 740B                    	je .L_lambda_simple_arity_check_ok_0ae4
 29800 0001656B FF742410                	push qword [rsp + 8 * 2]
 29801 0001656F 6A03                    	push 3
 29802 00016571 E9071F0000              	jmp L_error_incorrect_arity_simple
 29803                                  .L_lambda_simple_arity_check_ok_0ae4:
 29804 00016576 C8000000                	enter 0, 0
 29805                                  	; preparing a non-tail-call
 29806 0001657A 488B4530                	mov rax, PARAM(2)	; param j
 29807 0001657E 50                      	push rax
 29808 0001657F 488B4528                	mov rax, PARAM(1)	; param i
 29809 00016583 50                      	push rax
 29810 00016584 6A02                    	push 2	; arg count
 29811 00016586 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 29812 0001658E 803805                  	cmp byte [rax], T_undefined
 29813 00016591 0F84001E0000            	je L_error_fvar_undefined
 29814 00016597 803804                  	cmp byte [rax], T_closure
 29815 0001659A 0F857B1E0000            	jne L_error_non_closure
 29816 000165A0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29817 000165A3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29818 000165A6 483D[02000000]          	cmp rax, sob_boolean_false
 29819 000165AC 0F84AD020000            	je .L_if_else_0837
 29820                                  	; preparing a tail-call
 29821                                  	; preparing a non-tail-call
 29822 000165B2 488B4528                	mov rax, PARAM(1)	; param i
 29823 000165B6 50                      	push rax
 29824 000165B7 488B4520                	mov rax, PARAM(0)	; param vec
 29825 000165BB 50                      	push rax
 29826 000165BC 6A02                    	push 2	; arg count
 29827 000165BE 488B0425[DB180000]      	mov rax, qword [free_var_145]	; free var vector-ref
 29828 000165C6 803805                  	cmp byte [rax], T_undefined
 29829 000165C9 0F84C81D0000            	je L_error_fvar_undefined
 29830 000165CF 803804                  	cmp byte [rax], T_closure
 29831 000165D2 0F85431E0000            	jne L_error_non_closure
 29832 000165D8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29833 000165DB FF5009                  	call SOB_CLOSURE_CODE(rax)
 29834 000165DE 50                      	push rax
 29835 000165DF 6A01                    	push 1	; arg count
 29836 000165E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 29837 000165E6 E8D91E0000              	call malloc
 29838 000165EB 50                      	push rax
 29839 000165EC BF18000000              	mov rdi, 8 * 3	; new rib
 29840 000165F1 E8CE1E0000              	call malloc
 29841 000165F6 50                      	push rax
 29842 000165F7 BF18000000              	mov rdi, 8 * 3	; extended env
 29843 000165FC E8C31E0000              	call malloc
 29844 00016601 488B7D10                	mov rdi, ENV
 29845 00016605 BE00000000              	mov rsi, 0
 29846 0001660A BA01000000              	mov rdx, 1
 29847                                  .L_lambda_simple_env_loop_0ae5:	; ext_env[i + 1] <-- env[i]
 29848 0001660F 4883FE02                	cmp rsi, 2
 29849 00016613 7410                    	je .L_lambda_simple_env_end_0ae5
 29850 00016615 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 29851 00016619 48890CD0                	mov qword [rax + 8 * rdx], rcx
 29852 0001661D 48FFC6                  	inc rsi
 29853 00016620 48FFC2                  	inc rdx
 29854 00016623 EBEA                    	jmp .L_lambda_simple_env_loop_0ae5
 29855                                  .L_lambda_simple_env_end_0ae5:
 29856 00016625 5B                      	pop rbx
 29857 00016626 BE00000000              	mov rsi, 0
 29858                                  .L_lambda_simple_params_loop_0ae5:	; copy params
 29859 0001662B 4883FE03                	cmp rsi, 3
 29860 0001662F 740E                    	je .L_lambda_simple_params_end_0ae5
 29861 00016631 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 29862 00016636 488914F3                	mov qword [rbx + 8 * rsi], rdx
 29863 0001663A 48FFC6                  	inc rsi
 29864 0001663D EBEC                    	jmp .L_lambda_simple_params_loop_0ae5
 29865                                  .L_lambda_simple_params_end_0ae5:
 29866 0001663F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 29867 00016642 4889C3                  	mov rbx, rax
 29868 00016645 58                      	pop rax
 29869 00016646 C60004                  	mov byte [rax], T_closure
 29870 00016649 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 29871 0001664D 48C74009[5A660100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae5
 29872 00016655 E9AF010000              	jmp .L_lambda_simple_end_0ae5
 29873                                  .L_lambda_simple_code_0ae5:	; lambda-simple body
 29874 0001665A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 29875 00016660 740B                    	je .L_lambda_simple_arity_check_ok_0ae5
 29876 00016662 FF742410                	push qword [rsp + 8 * 2]
 29877 00016666 6A01                    	push 1
 29878 00016668 E9101E0000              	jmp L_error_incorrect_arity_simple
 29879                                  .L_lambda_simple_arity_check_ok_0ae5:
 29880 0001666D C8000000                	enter 0, 0
 29881                                  	; preparing a non-tail-call
 29882                                  	; preparing a non-tail-call
 29883 00016671 488B4510                	mov rax, ENV
 29884 00016675 488B00                  	mov rax, qword [rax + 8 * 0]
 29885 00016678 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29886 0001667C 50                      	push rax
 29887 0001667D 488B4510                	mov rax, ENV
 29888 00016681 488B00                  	mov rax, qword [rax + 8 * 0]
 29889 00016684 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29890 00016687 50                      	push rax
 29891 00016688 6A02                    	push 2	; arg count
 29892 0001668A 488B0425[DB180000]      	mov rax, qword [free_var_145]	; free var vector-ref
 29893 00016692 803805                  	cmp byte [rax], T_undefined
 29894 00016695 0F84FC1C0000            	je L_error_fvar_undefined
 29895 0001669B 803804                  	cmp byte [rax], T_closure
 29896 0001669E 0F85771D0000            	jne L_error_non_closure
 29897 000166A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29898 000166A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29899 000166AA 50                      	push rax
 29900 000166AB 488B4510                	mov rax, ENV
 29901 000166AF 488B00                  	mov rax, qword [rax + 8 * 0]
 29902 000166B2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29903 000166B6 50                      	push rax
 29904 000166B7 488B4510                	mov rax, ENV
 29905 000166BB 488B00                  	mov rax, qword [rax + 8 * 0]
 29906 000166BE 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29907 000166C1 50                      	push rax
 29908 000166C2 6A03                    	push 3	; arg count
 29909 000166C4 488B0425[0E190000]      	mov rax, qword [free_var_148]	; free var vector-set!
 29910 000166CC 803805                  	cmp byte [rax], T_undefined
 29911 000166CF 0F84C21C0000            	je L_error_fvar_undefined
 29912 000166D5 803804                  	cmp byte [rax], T_closure
 29913 000166D8 0F853D1D0000            	jne L_error_non_closure
 29914 000166DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 29915 000166E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29916                                  
 29917                                  	; preparing a non-tail-call
 29918 000166E4 488B4520                	mov rax, PARAM(0)	; param ch
 29919 000166E8 50                      	push rax
 29920 000166E9 488B4510                	mov rax, ENV
 29921 000166ED 488B00                  	mov rax, qword [rax + 8 * 0]
 29922 000166F0 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29923 000166F4 50                      	push rax
 29924 000166F5 488B4510                	mov rax, ENV
 29925 000166F9 488B00                  	mov rax, qword [rax + 8 * 0]
 29926 000166FC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29927 000166FF 50                      	push rax
 29928 00016700 6A03                    	push 3	; arg count
 29929 00016702 488B0425[0E190000]      	mov rax, qword [free_var_148]	; free var vector-set!
 29930 0001670A 803805                  	cmp byte [rax], T_undefined
 29931 0001670D 0F84841C0000            	je L_error_fvar_undefined
 29932 00016713 803804                  	cmp byte [rax], T_closure
 29933 00016716 0F85FF1C0000            	jne L_error_non_closure
 29934 0001671C FF7001                  	push SOB_CLOSURE_ENV(rax)
 29935 0001671F FF5009                  	call SOB_CLOSURE_CODE(rax)
 29936                                  
 29937                                  	; preparing a tail-call
 29938                                  	; preparing a non-tail-call
 29939 00016722 48B8-                   	mov rax, L_constants + 2270
 29939 00016724 [DE08000000000000] 
 29940 0001672C 50                      	push rax
 29941 0001672D 488B4510                	mov rax, ENV
 29942 00016731 488B00                  	mov rax, qword [rax + 8 * 0]
 29943 00016734 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var j
 29944 00016738 50                      	push rax
 29945 00016739 6A02                    	push 2	; arg count
 29946 0001673B 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 29947 00016743 803805                  	cmp byte [rax], T_undefined
 29948 00016746 0F844B1C0000            	je L_error_fvar_undefined
 29949 0001674C 803804                  	cmp byte [rax], T_closure
 29950 0001674F 0F85C61C0000            	jne L_error_non_closure
 29951 00016755 FF7001                  	push SOB_CLOSURE_ENV(rax)
 29952 00016758 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29953 0001675B 50                      	push rax
 29954                                  	; preparing a non-tail-call
 29955 0001675C 48B8-                   	mov rax, L_constants + 2270
 29955 0001675E [DE08000000000000] 
 29956 00016766 50                      	push rax
 29957 00016767 488B4510                	mov rax, ENV
 29958 0001676B 488B00                  	mov rax, qword [rax + 8 * 0]
 29959 0001676E 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var i
 29960 00016772 50                      	push rax
 29961 00016773 6A02                    	push 2	; arg count
 29962 00016775 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 29963 0001677D 803805                  	cmp byte [rax], T_undefined
 29964 00016780 0F84111C0000            	je L_error_fvar_undefined
 29965 00016786 803804                  	cmp byte [rax], T_closure
 29966 00016789 0F858C1C0000            	jne L_error_non_closure
 29967 0001678F FF7001                  	push SOB_CLOSURE_ENV(rax)
 29968 00016792 FF5009                  	call SOB_CLOSURE_CODE(rax)
 29969 00016795 50                      	push rax
 29970 00016796 488B4510                	mov rax, ENV
 29971 0001679A 488B00                  	mov rax, qword [rax + 8 * 0]
 29972 0001679D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 29973 000167A0 50                      	push rax
 29974 000167A1 6A03                    	push 3	; arg count
 29975 000167A3 488B4510                	mov rax, ENV
 29976 000167A7 488B4008                	mov rax, qword [rax + 8 * 1]
 29977 000167AB 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 29978 000167AE 488B00                  	mov rax, qword [rax]
 29979 000167B1 803804                  	cmp byte [rax], T_closure
 29980 000167B4 0F85611C0000            	jne L_error_non_closure
 29981 000167BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 29982 000167BD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 29983 000167C0 FF7500                  	push qword[rbp]
 29984 000167C3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 29985 000167C6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 29986 000167CA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 29987 000167CE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 29988 000167D2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 29989 000167D5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 29990 000167D8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 29991 000167DD 4983C103                	add r9, 3 	 ;for getting to the params
 29992 000167E1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 29993 000167E5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 29994                                  .L_tc_recycle_frame_loop_0f42:
 29995 000167E8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 29996 000167EB 7410                    	je .L_tc_recycle_frame_done_0f42
 29997 000167ED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 29998 000167F0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 29999 000167F3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30000 000167F7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30001 000167FB EBEB                    	jmp .L_tc_recycle_frame_loop_0f42
 30002                                  .L_tc_recycle_frame_done_0f42:
 30003 000167FD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30004 000167FE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30005 00016802 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30006 00016805 C9                      	leave
 30007 00016806 C21800                  	ret AND_KILL_FRAME(1)
 30008                                  .L_lambda_simple_end_0ae5:	; new closure is in rax
 30009 00016809 803804                  	cmp byte [rax], T_closure
 30010 0001680C 0F85091C0000            	jne L_error_non_closure
 30011 00016812 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30012 00016815 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30013 00016818 FF7500                  	push qword[rbp]
 30014 0001681B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30015 0001681E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30016 00016822 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30017 00016826 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30018 0001682A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30019 0001682D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30020 00016830 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30021 00016835 4983C103                	add r9, 3 	 ;for getting to the params
 30022 00016839 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30023 0001683D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30024                                  .L_tc_recycle_frame_loop_0f43:
 30025 00016840 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30026 00016843 7410                    	je .L_tc_recycle_frame_done_0f43
 30027 00016845 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30028 00016848 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30029 0001684B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30030 0001684F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30031 00016853 EBEB                    	jmp .L_tc_recycle_frame_loop_0f43
 30032                                  .L_tc_recycle_frame_done_0f43:
 30033 00016855 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30034 00016856 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30035 0001685A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30036 0001685D EB04                    	jmp .L_if_end_0837
 30037                                  .L_if_else_0837:
 30038 0001685F 488B4520                	mov rax, PARAM(0)	; param vec
 30039                                  .L_if_end_0837:
 30040 00016863 C9                      	leave
 30041 00016864 C22800                  	ret AND_KILL_FRAME(3)
 30042                                  .L_lambda_simple_end_0ae4:	; new closure is in rax
 30043 00016867 50                      	push rax
 30044 00016868 488B4520                	mov rax, PARAM(0)	; param run
 30045 0001686C 8F00                    	pop qword [rax]
 30046 0001686E 48B8-                   	mov rax, sob_void
 30046 00016870 [0000000000000000] 
 30047                                  
 30048 00016878 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30049 0001687D E8421C0000              	call malloc
 30050 00016882 50                      	push rax
 30051 00016883 BF08000000              	mov rdi, 8 * 1	; new rib
 30052 00016888 E8371C0000              	call malloc
 30053 0001688D 50                      	push rax
 30054 0001688E BF10000000              	mov rdi, 8 * 2	; extended env
 30055 00016893 E82C1C0000              	call malloc
 30056 00016898 488B7D10                	mov rdi, ENV
 30057 0001689C BE00000000              	mov rsi, 0
 30058 000168A1 BA01000000              	mov rdx, 1
 30059                                  .L_lambda_simple_env_loop_0ae6:	; ext_env[i + 1] <-- env[i]
 30060 000168A6 4883FE01                	cmp rsi, 1
 30061 000168AA 7410                    	je .L_lambda_simple_env_end_0ae6
 30062 000168AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30063 000168B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30064 000168B4 48FFC6                  	inc rsi
 30065 000168B7 48FFC2                  	inc rdx
 30066 000168BA EBEA                    	jmp .L_lambda_simple_env_loop_0ae6
 30067                                  .L_lambda_simple_env_end_0ae6:
 30068 000168BC 5B                      	pop rbx
 30069 000168BD BE00000000              	mov rsi, 0
 30070                                  .L_lambda_simple_params_loop_0ae6:	; copy params
 30071 000168C2 4883FE01                	cmp rsi, 1
 30072 000168C6 740E                    	je .L_lambda_simple_params_end_0ae6
 30073 000168C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30074 000168CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30075 000168D1 48FFC6                  	inc rsi
 30076 000168D4 EBEC                    	jmp .L_lambda_simple_params_loop_0ae6
 30077                                  .L_lambda_simple_params_end_0ae6:
 30078 000168D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30079 000168D9 4889C3                  	mov rbx, rax
 30080 000168DC 58                      	pop rax
 30081 000168DD C60004                  	mov byte [rax], T_closure
 30082 000168E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30083 000168E4 48C74009[F1680100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae6
 30084 000168EC E918020000              	jmp .L_lambda_simple_end_0ae6
 30085                                  .L_lambda_simple_code_0ae6:	; lambda-simple body
 30086 000168F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30087 000168F7 740B                    	je .L_lambda_simple_arity_check_ok_0ae6
 30088 000168F9 FF742410                	push qword [rsp + 8 * 2]
 30089 000168FD 6A01                    	push 1
 30090 000168FF E9791B0000              	jmp L_error_incorrect_arity_simple
 30091                                  .L_lambda_simple_arity_check_ok_0ae6:
 30092 00016904 C8000000                	enter 0, 0
 30093                                  	; preparing a tail-call
 30094                                  	; preparing a non-tail-call
 30095 00016908 488B4520                	mov rax, PARAM(0)	; param vec
 30096 0001690C 50                      	push rax
 30097 0001690D 6A01                    	push 1	; arg count
 30098 0001690F 488B0425[CA180000]      	mov rax, qword [free_var_144]	; free var vector-length
 30099 00016917 803805                  	cmp byte [rax], T_undefined
 30100 0001691A 0F84771A0000            	je L_error_fvar_undefined
 30101 00016920 803804                  	cmp byte [rax], T_closure
 30102 00016923 0F85F21A0000            	jne L_error_non_closure
 30103 00016929 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30104 0001692C FF5009                  	call SOB_CLOSURE_CODE(rax)
 30105 0001692F 50                      	push rax
 30106 00016930 6A01                    	push 1	; arg count
 30107 00016932 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30108 00016937 E8881B0000              	call malloc
 30109 0001693C 50                      	push rax
 30110 0001693D BF08000000              	mov rdi, 8 * 1	; new rib
 30111 00016942 E87D1B0000              	call malloc
 30112 00016947 50                      	push rax
 30113 00016948 BF18000000              	mov rdi, 8 * 3	; extended env
 30114 0001694D E8721B0000              	call malloc
 30115 00016952 488B7D10                	mov rdi, ENV
 30116 00016956 BE00000000              	mov rsi, 0
 30117 0001695B BA01000000              	mov rdx, 1
 30118                                  .L_lambda_simple_env_loop_0ae7:	; ext_env[i + 1] <-- env[i]
 30119 00016960 4883FE02                	cmp rsi, 2
 30120 00016964 7410                    	je .L_lambda_simple_env_end_0ae7
 30121 00016966 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30122 0001696A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30123 0001696E 48FFC6                  	inc rsi
 30124 00016971 48FFC2                  	inc rdx
 30125 00016974 EBEA                    	jmp .L_lambda_simple_env_loop_0ae7
 30126                                  .L_lambda_simple_env_end_0ae7:
 30127 00016976 5B                      	pop rbx
 30128 00016977 BE00000000              	mov rsi, 0
 30129                                  .L_lambda_simple_params_loop_0ae7:	; copy params
 30130 0001697C 4883FE01                	cmp rsi, 1
 30131 00016980 740E                    	je .L_lambda_simple_params_end_0ae7
 30132 00016982 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30133 00016987 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30134 0001698B 48FFC6                  	inc rsi
 30135 0001698E EBEC                    	jmp .L_lambda_simple_params_loop_0ae7
 30136                                  .L_lambda_simple_params_end_0ae7:
 30137 00016990 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30138 00016993 4889C3                  	mov rbx, rax
 30139 00016996 58                      	pop rax
 30140 00016997 C60004                  	mov byte [rax], T_closure
 30141 0001699A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30142 0001699E 48C74009[AB690100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae7
 30143 000169A6 E906010000              	jmp .L_lambda_simple_end_0ae7
 30144                                  .L_lambda_simple_code_0ae7:	; lambda-simple body
 30145 000169AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30146 000169B1 740B                    	je .L_lambda_simple_arity_check_ok_0ae7
 30147 000169B3 FF742410                	push qword [rsp + 8 * 2]
 30148 000169B7 6A01                    	push 1
 30149 000169B9 E9BF1A0000              	jmp L_error_incorrect_arity_simple
 30150                                  .L_lambda_simple_arity_check_ok_0ae7:
 30151 000169BE C8000000                	enter 0, 0
 30152                                  	; preparing a non-tail-call
 30153 000169C2 488B4520                	mov rax, PARAM(0)	; param n
 30154 000169C6 50                      	push rax
 30155 000169C7 6A01                    	push 1	; arg count
 30156 000169C9 488B0425[52190000]      	mov rax, qword [free_var_152]	; free var zero?
 30157 000169D1 803805                  	cmp byte [rax], T_undefined
 30158 000169D4 0F84BD190000            	je L_error_fvar_undefined
 30159 000169DA 803804                  	cmp byte [rax], T_closure
 30160 000169DD 0F85381A0000            	jne L_error_non_closure
 30161 000169E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30162 000169E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30163 000169E9 483D[02000000]          	cmp rax, sob_boolean_false
 30164 000169EF 740F                    	je .L_if_else_0838
 30165 000169F1 488B4510                	mov rax, ENV
 30166 000169F5 488B00                  	mov rax, qword [rax + 8 * 0]
 30167 000169F8 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30168 000169FB E9AD000000              	jmp .L_if_end_0838
 30169                                  .L_if_else_0838:
 30170                                  	; preparing a tail-call
 30171                                  	; preparing a non-tail-call
 30172 00016A00 48B8-                   	mov rax, L_constants + 2270
 30172 00016A02 [DE08000000000000] 
 30173 00016A0A 50                      	push rax
 30174 00016A0B 488B4520                	mov rax, PARAM(0)	; param n
 30175 00016A0F 50                      	push rax
 30176 00016A10 6A02                    	push 2	; arg count
 30177 00016A12 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 30178 00016A1A 803805                  	cmp byte [rax], T_undefined
 30179 00016A1D 0F8474190000            	je L_error_fvar_undefined
 30180 00016A23 803804                  	cmp byte [rax], T_closure
 30181 00016A26 0F85EF190000            	jne L_error_non_closure
 30182 00016A2C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30183 00016A2F FF5009                  	call SOB_CLOSURE_CODE(rax)
 30184 00016A32 50                      	push rax
 30185 00016A33 48B8-                   	mov rax, L_constants + 2135
 30185 00016A35 [5708000000000000] 
 30186 00016A3D 50                      	push rax
 30187 00016A3E 488B4510                	mov rax, ENV
 30188 00016A42 488B00                  	mov rax, qword [rax + 8 * 0]
 30189 00016A45 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 30190 00016A48 50                      	push rax
 30191 00016A49 6A03                    	push 3	; arg count
 30192 00016A4B 488B4510                	mov rax, ENV
 30193 00016A4F 488B4008                	mov rax, qword [rax + 8 * 1]
 30194 00016A53 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30195 00016A56 488B00                  	mov rax, qword [rax]
 30196 00016A59 803804                  	cmp byte [rax], T_closure
 30197 00016A5C 0F85B9190000            	jne L_error_non_closure
 30198 00016A62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30199 00016A65 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30200 00016A68 FF7500                  	push qword[rbp]
 30201 00016A6B 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30202 00016A6E 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30203 00016A72 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30204 00016A76 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30205 00016A7A 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30206 00016A7D 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30207 00016A80 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30208 00016A85 4983C103                	add r9, 3 	 ;for getting to the params
 30209 00016A89 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30210 00016A8D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30211                                  .L_tc_recycle_frame_loop_0f44:
 30212 00016A90 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30213 00016A93 7410                    	je .L_tc_recycle_frame_done_0f44
 30214 00016A95 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30215 00016A98 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30216 00016A9B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30217 00016A9F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30218 00016AA3 EBEB                    	jmp .L_tc_recycle_frame_loop_0f44
 30219                                  .L_tc_recycle_frame_done_0f44:
 30220 00016AA5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30221 00016AA6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30222 00016AAA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30223                                  .L_if_end_0838:
 30224 00016AAD C9                      	leave
 30225 00016AAE C21800                  	ret AND_KILL_FRAME(1)
 30226                                  .L_lambda_simple_end_0ae7:	; new closure is in rax
 30227 00016AB1 803804                  	cmp byte [rax], T_closure
 30228 00016AB4 0F8561190000            	jne L_error_non_closure
 30229 00016ABA FF7001                  	push SOB_CLOSURE_ENV(rax)
 30230 00016ABD FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30231 00016AC0 FF7500                  	push qword[rbp]
 30232 00016AC3 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30233 00016AC6 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30234 00016ACA 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30235 00016ACE 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30236 00016AD2 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30237 00016AD5 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30238 00016AD8 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30239 00016ADD 4983C103                	add r9, 3 	 ;for getting to the params
 30240 00016AE1 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30241 00016AE5 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30242                                  .L_tc_recycle_frame_loop_0f45:
 30243 00016AE8 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30244 00016AEB 7410                    	je .L_tc_recycle_frame_done_0f45
 30245 00016AED 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30246 00016AF0 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30247 00016AF3 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30248 00016AF7 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30249 00016AFB EBEB                    	jmp .L_tc_recycle_frame_loop_0f45
 30250                                  .L_tc_recycle_frame_done_0f45:
 30251 00016AFD 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30252 00016AFE 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30253 00016B02 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30254 00016B05 C9                      	leave
 30255 00016B06 C21800                  	ret AND_KILL_FRAME(1)
 30256                                  .L_lambda_simple_end_0ae6:	; new closure is in rax
 30257 00016B09 C9                      	leave
 30258 00016B0A C21800                  	ret AND_KILL_FRAME(1)
 30259                                  .L_lambda_simple_end_0ae3:	; new closure is in rax
 30260 00016B0D 803804                  	cmp byte [rax], T_closure
 30261 00016B10 0F8505190000            	jne L_error_non_closure
 30262 00016B16 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30263 00016B19 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30264 00016B1C 48890425[FD180000]      	mov qword [free_var_147], rax
 30265 00016B24 48B8-                   	mov rax, sob_void
 30265 00016B26 [0000000000000000] 
 30266                                  
 30267 00016B2E 4889C7                  	mov rdi, rax
 30268 00016B31 E8E31B0000              	call print_sexpr_if_not_void
 30269 00016B36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30270 00016B3B E884190000              	call malloc
 30271 00016B40 50                      	push rax
 30272 00016B41 BF00000000              	mov rdi, 8 * 0	; new rib
 30273 00016B46 E879190000              	call malloc
 30274 00016B4B 50                      	push rax
 30275 00016B4C BF08000000              	mov rdi, 8 * 1	; extended env
 30276 00016B51 E86E190000              	call malloc
 30277 00016B56 488B7D10                	mov rdi, ENV
 30278 00016B5A BE00000000              	mov rsi, 0
 30279 00016B5F BA01000000              	mov rdx, 1
 30280                                  .L_lambda_simple_env_loop_0ae8:	; ext_env[i + 1] <-- env[i]
 30281 00016B64 4883FE00                	cmp rsi, 0
 30282 00016B68 7410                    	je .L_lambda_simple_env_end_0ae8
 30283 00016B6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30284 00016B6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30285 00016B72 48FFC6                  	inc rsi
 30286 00016B75 48FFC2                  	inc rdx
 30287 00016B78 EBEA                    	jmp .L_lambda_simple_env_loop_0ae8
 30288                                  .L_lambda_simple_env_end_0ae8:
 30289 00016B7A 5B                      	pop rbx
 30290 00016B7B BE00000000              	mov rsi, 0
 30291                                  .L_lambda_simple_params_loop_0ae8:	; copy params
 30292 00016B80 4883FE00                	cmp rsi, 0
 30293 00016B84 740E                    	je .L_lambda_simple_params_end_0ae8
 30294 00016B86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30295 00016B8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30296 00016B8F 48FFC6                  	inc rsi
 30297 00016B92 EBEC                    	jmp .L_lambda_simple_params_loop_0ae8
 30298                                  .L_lambda_simple_params_end_0ae8:
 30299 00016B94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30300 00016B97 4889C3                  	mov rbx, rax
 30301 00016B9A 58                      	pop rax
 30302 00016B9B C60004                  	mov byte [rax], T_closure
 30303 00016B9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30304 00016BA2 48C74009[AF6B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae8
 30305 00016BAA E963030000              	jmp .L_lambda_simple_end_0ae8
 30306                                  .L_lambda_simple_code_0ae8:	; lambda-simple body
 30307 00016BAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30308 00016BB5 740B                    	je .L_lambda_simple_arity_check_ok_0ae8
 30309 00016BB7 FF742410                	push qword [rsp + 8 * 2]
 30310 00016BBB 6A02                    	push 2
 30311 00016BBD E9BB180000              	jmp L_error_incorrect_arity_simple
 30312                                  .L_lambda_simple_arity_check_ok_0ae8:
 30313 00016BC2 C8000000                	enter 0, 0
 30314                                  	; preparing a tail-call
 30315 00016BC6 48B8-                   	mov rax, L_constants + 1993
 30315 00016BC8 [C907000000000000] 
 30316 00016BD0 50                      	push rax
 30317 00016BD1 6A01                    	push 1	; arg count
 30318 00016BD3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30319 00016BD8 E8E7180000              	call malloc
 30320 00016BDD 50                      	push rax
 30321 00016BDE BF10000000              	mov rdi, 8 * 2	; new rib
 30322 00016BE3 E8DC180000              	call malloc
 30323 00016BE8 50                      	push rax
 30324 00016BE9 BF10000000              	mov rdi, 8 * 2	; extended env
 30325 00016BEE E8D1180000              	call malloc
 30326 00016BF3 488B7D10                	mov rdi, ENV
 30327 00016BF7 BE00000000              	mov rsi, 0
 30328 00016BFC BA01000000              	mov rdx, 1
 30329                                  .L_lambda_simple_env_loop_0ae9:	; ext_env[i + 1] <-- env[i]
 30330 00016C01 4883FE01                	cmp rsi, 1
 30331 00016C05 7410                    	je .L_lambda_simple_env_end_0ae9
 30332 00016C07 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30333 00016C0B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30334 00016C0F 48FFC6                  	inc rsi
 30335 00016C12 48FFC2                  	inc rdx
 30336 00016C15 EBEA                    	jmp .L_lambda_simple_env_loop_0ae9
 30337                                  .L_lambda_simple_env_end_0ae9:
 30338 00016C17 5B                      	pop rbx
 30339 00016C18 BE00000000              	mov rsi, 0
 30340                                  .L_lambda_simple_params_loop_0ae9:	; copy params
 30341 00016C1D 4883FE02                	cmp rsi, 2
 30342 00016C21 740E                    	je .L_lambda_simple_params_end_0ae9
 30343 00016C23 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30344 00016C28 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30345 00016C2C 48FFC6                  	inc rsi
 30346 00016C2F EBEC                    	jmp .L_lambda_simple_params_loop_0ae9
 30347                                  .L_lambda_simple_params_end_0ae9:
 30348 00016C31 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30349 00016C34 4889C3                  	mov rbx, rax
 30350 00016C37 58                      	pop rax
 30351 00016C38 C60004                  	mov byte [rax], T_closure
 30352 00016C3B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30353 00016C3F 48C74009[4C6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0ae9
 30354 00016C47 E96E020000              	jmp .L_lambda_simple_end_0ae9
 30355                                  .L_lambda_simple_code_0ae9:	; lambda-simple body
 30356 00016C4C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30357 00016C52 740B                    	je .L_lambda_simple_arity_check_ok_0ae9
 30358 00016C54 FF742410                	push qword [rsp + 8 * 2]
 30359 00016C58 6A01                    	push 1
 30360 00016C5A E91E180000              	jmp L_error_incorrect_arity_simple
 30361                                  .L_lambda_simple_arity_check_ok_0ae9:
 30362 00016C5F C8000000                	enter 0, 0
 30363 00016C63 BF08000000              	mov rdi, 8*1
 30364 00016C68 E857180000              	call malloc
 30365 00016C6D 488B5D20                	mov rbx, PARAM(0)
 30366 00016C71 488918                  	mov qword[rax], rbx
 30367 00016C74 48894520                	mov PARAM(0), rax
 30368 00016C78 48B8-                   	mov rax, sob_void
 30368 00016C7A [0000000000000000] 
 30369                                  
 30370 00016C82 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30371 00016C87 E838180000              	call malloc
 30372 00016C8C 50                      	push rax
 30373 00016C8D BF08000000              	mov rdi, 8 * 1	; new rib
 30374 00016C92 E82D180000              	call malloc
 30375 00016C97 50                      	push rax
 30376 00016C98 BF18000000              	mov rdi, 8 * 3	; extended env
 30377 00016C9D E822180000              	call malloc
 30378 00016CA2 488B7D10                	mov rdi, ENV
 30379 00016CA6 BE00000000              	mov rsi, 0
 30380 00016CAB BA01000000              	mov rdx, 1
 30381                                  .L_lambda_simple_env_loop_0aea:	; ext_env[i + 1] <-- env[i]
 30382 00016CB0 4883FE02                	cmp rsi, 2
 30383 00016CB4 7410                    	je .L_lambda_simple_env_end_0aea
 30384 00016CB6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30385 00016CBA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30386 00016CBE 48FFC6                  	inc rsi
 30387 00016CC1 48FFC2                  	inc rdx
 30388 00016CC4 EBEA                    	jmp .L_lambda_simple_env_loop_0aea
 30389                                  .L_lambda_simple_env_end_0aea:
 30390 00016CC6 5B                      	pop rbx
 30391 00016CC7 BE00000000              	mov rsi, 0
 30392                                  .L_lambda_simple_params_loop_0aea:	; copy params
 30393 00016CCC 4883FE01                	cmp rsi, 1
 30394 00016CD0 740E                    	je .L_lambda_simple_params_end_0aea
 30395 00016CD2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30396 00016CD7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30397 00016CDB 48FFC6                  	inc rsi
 30398 00016CDE EBEC                    	jmp .L_lambda_simple_params_loop_0aea
 30399                                  .L_lambda_simple_params_end_0aea:
 30400 00016CE0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30401 00016CE3 4889C3                  	mov rbx, rax
 30402 00016CE6 58                      	pop rax
 30403 00016CE7 C60004                  	mov byte [rax], T_closure
 30404 00016CEA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30405 00016CEE 48C74009[FB6C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aea
 30406 00016CF6 E942010000              	jmp .L_lambda_simple_end_0aea
 30407                                  .L_lambda_simple_code_0aea:	; lambda-simple body
 30408 00016CFB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30409 00016D01 740B                    	je .L_lambda_simple_arity_check_ok_0aea
 30410 00016D03 FF742410                	push qword [rsp + 8 * 2]
 30411 00016D07 6A01                    	push 1
 30412 00016D09 E96F170000              	jmp L_error_incorrect_arity_simple
 30413                                  .L_lambda_simple_arity_check_ok_0aea:
 30414 00016D0E C8000000                	enter 0, 0
 30415                                  	; preparing a non-tail-call
 30416 00016D12 488B4510                	mov rax, ENV
 30417 00016D16 488B4008                	mov rax, qword [rax + 8 * 1]
 30418 00016D1A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30419 00016D1D 50                      	push rax
 30420 00016D1E 488B4520                	mov rax, PARAM(0)	; param i
 30421 00016D22 50                      	push rax
 30422 00016D23 6A02                    	push 2	; arg count
 30423 00016D25 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 30424 00016D2D 803805                  	cmp byte [rax], T_undefined
 30425 00016D30 0F8461160000            	je L_error_fvar_undefined
 30426 00016D36 803804                  	cmp byte [rax], T_closure
 30427 00016D39 0F85DC160000            	jne L_error_non_closure
 30428 00016D3F FF7001                  	push SOB_CLOSURE_ENV(rax)
 30429 00016D42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30430 00016D45 483D[02000000]          	cmp rax, sob_boolean_false
 30431 00016D4B 0F84DE000000            	je .L_if_else_0839
 30432                                  	; preparing a tail-call
 30433                                  	; preparing a non-tail-call
 30434                                  	; preparing a non-tail-call
 30435 00016D51 48B8-                   	mov rax, L_constants + 2270
 30435 00016D53 [DE08000000000000] 
 30436 00016D5B 50                      	push rax
 30437 00016D5C 488B4520                	mov rax, PARAM(0)	; param i
 30438 00016D60 50                      	push rax
 30439 00016D61 6A02                    	push 2	; arg count
 30440 00016D63 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 30441 00016D6B 803805                  	cmp byte [rax], T_undefined
 30442 00016D6E 0F8423160000            	je L_error_fvar_undefined
 30443 00016D74 803804                  	cmp byte [rax], T_closure
 30444 00016D77 0F859E160000            	jne L_error_non_closure
 30445 00016D7D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30446 00016D80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30447 00016D83 50                      	push rax
 30448 00016D84 6A01                    	push 1	; arg count
 30449 00016D86 488B4510                	mov rax, ENV
 30450 00016D8A 488B00                  	mov rax, qword [rax + 8 * 0]
 30451 00016D8D 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30452 00016D90 488B00                  	mov rax, qword [rax]
 30453 00016D93 803804                  	cmp byte [rax], T_closure
 30454 00016D96 0F857F160000            	jne L_error_non_closure
 30455 00016D9C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30456 00016D9F FF5009                  	call SOB_CLOSURE_CODE(rax)
 30457 00016DA2 50                      	push rax
 30458                                  	; preparing a non-tail-call
 30459 00016DA3 488B4520                	mov rax, PARAM(0)	; param i
 30460 00016DA7 50                      	push rax
 30461 00016DA8 6A01                    	push 1	; arg count
 30462 00016DAA 488B4510                	mov rax, ENV
 30463 00016DAE 488B4008                	mov rax, qword [rax + 8 * 1]
 30464 00016DB2 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30465 00016DB6 803804                  	cmp byte [rax], T_closure
 30466 00016DB9 0F855C160000            	jne L_error_non_closure
 30467 00016DBF FF7001                  	push SOB_CLOSURE_ENV(rax)
 30468 00016DC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30469 00016DC5 50                      	push rax
 30470 00016DC6 6A02                    	push 2	; arg count
 30471 00016DC8 488B0425[79140000]      	mov rax, qword [free_var_79]	; free var cons
 30472 00016DD0 803805                  	cmp byte [rax], T_undefined
 30473 00016DD3 0F84BE150000            	je L_error_fvar_undefined
 30474 00016DD9 803804                  	cmp byte [rax], T_closure
 30475 00016DDC 0F8539160000            	jne L_error_non_closure
 30476 00016DE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30477 00016DE5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30478 00016DE8 FF7500                  	push qword[rbp]
 30479 00016DEB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30480 00016DEE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30481 00016DF2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30482 00016DF6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30483 00016DFA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30484 00016DFD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30485 00016E00 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30486 00016E05 4983C103                	add r9, 3 	 ;for getting to the params
 30487 00016E09 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30488 00016E0D 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30489                                  .L_tc_recycle_frame_loop_0f46:
 30490 00016E10 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30491 00016E13 7410                    	je .L_tc_recycle_frame_done_0f46
 30492 00016E15 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30493 00016E18 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30494 00016E1B 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30495 00016E1F 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30496 00016E23 EBEB                    	jmp .L_tc_recycle_frame_loop_0f46
 30497                                  .L_tc_recycle_frame_done_0f46:
 30498 00016E25 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30499 00016E26 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30500 00016E2A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30501 00016E2D EB0A                    	jmp .L_if_end_0839
 30502                                  .L_if_else_0839:
 30503 00016E2F 48B8-                   	mov rax, L_constants + 1
 30503 00016E31 [0100000000000000] 
 30504                                  .L_if_end_0839:
 30505 00016E39 C9                      	leave
 30506 00016E3A C21800                  	ret AND_KILL_FRAME(1)
 30507                                  .L_lambda_simple_end_0aea:	; new closure is in rax
 30508 00016E3D 50                      	push rax
 30509 00016E3E 488B4520                	mov rax, PARAM(0)	; param run
 30510 00016E42 8F00                    	pop qword [rax]
 30511 00016E44 48B8-                   	mov rax, sob_void
 30511 00016E46 [0000000000000000] 
 30512                                  
 30513                                  	; preparing a tail-call
 30514 00016E4E 48B8-                   	mov rax, L_constants + 2135
 30514 00016E50 [5708000000000000] 
 30515 00016E58 50                      	push rax
 30516 00016E59 6A01                    	push 1	; arg count
 30517 00016E5B 488B4520                	mov rax, PARAM(0)	; param run
 30518 00016E5F 488B00                  	mov rax, qword [rax]
 30519 00016E62 803804                  	cmp byte [rax], T_closure
 30520 00016E65 0F85B0150000            	jne L_error_non_closure
 30521 00016E6B FF7001                  	push SOB_CLOSURE_ENV(rax)
 30522 00016E6E FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30523 00016E71 FF7500                  	push qword[rbp]
 30524 00016E74 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30525 00016E77 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30526 00016E7B 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30527 00016E7F 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30528 00016E83 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30529 00016E86 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30530 00016E89 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30531 00016E8E 4983C103                	add r9, 3 	 ;for getting to the params
 30532 00016E92 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30533 00016E96 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30534                                  .L_tc_recycle_frame_loop_0f47:
 30535 00016E99 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30536 00016E9C 7410                    	je .L_tc_recycle_frame_done_0f47
 30537 00016E9E 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30538 00016EA1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30539 00016EA4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30540 00016EA8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30541 00016EAC EBEB                    	jmp .L_tc_recycle_frame_loop_0f47
 30542                                  .L_tc_recycle_frame_done_0f47:
 30543 00016EAE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30544 00016EAF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30545 00016EB3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30546 00016EB6 C9                      	leave
 30547 00016EB7 C21800                  	ret AND_KILL_FRAME(1)
 30548                                  .L_lambda_simple_end_0ae9:	; new closure is in rax
 30549 00016EBA 803804                  	cmp byte [rax], T_closure
 30550 00016EBD 0F8558150000            	jne L_error_non_closure
 30551 00016EC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30552 00016EC6 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30553 00016EC9 FF7500                  	push qword[rbp]
 30554 00016ECC 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30555 00016ECF 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30556 00016ED3 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30557 00016ED7 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30558 00016EDB 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30559 00016EDE 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30560 00016EE1 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30561 00016EE6 4983C103                	add r9, 3 	 ;for getting to the params
 30562 00016EEA 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30563 00016EEE 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30564                                  .L_tc_recycle_frame_loop_0f48:
 30565 00016EF1 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30566 00016EF4 7410                    	je .L_tc_recycle_frame_done_0f48
 30567 00016EF6 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30568 00016EF9 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30569 00016EFC 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30570 00016F00 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30571 00016F04 EBEB                    	jmp .L_tc_recycle_frame_loop_0f48
 30572                                  .L_tc_recycle_frame_done_0f48:
 30573 00016F06 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30574 00016F07 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30575 00016F0B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30576 00016F0E C9                      	leave
 30577 00016F0F C22000                  	ret AND_KILL_FRAME(2)
 30578                                  .L_lambda_simple_end_0ae8:	; new closure is in rax
 30579 00016F12 48890425[BC150000]      	mov qword [free_var_98], rax
 30580 00016F1A 48B8-                   	mov rax, sob_void
 30580 00016F1C [0000000000000000] 
 30581                                  
 30582 00016F24 4889C7                  	mov rdi, rax
 30583 00016F27 E8ED170000              	call print_sexpr_if_not_void
 30584 00016F2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30585 00016F31 E88E150000              	call malloc
 30586 00016F36 50                      	push rax
 30587 00016F37 BF00000000              	mov rdi, 8 * 0	; new rib
 30588 00016F3C E883150000              	call malloc
 30589 00016F41 50                      	push rax
 30590 00016F42 BF08000000              	mov rdi, 8 * 1	; extended env
 30591 00016F47 E878150000              	call malloc
 30592 00016F4C 488B7D10                	mov rdi, ENV
 30593 00016F50 BE00000000              	mov rsi, 0
 30594 00016F55 BA01000000              	mov rdx, 1
 30595                                  .L_lambda_simple_env_loop_0aeb:	; ext_env[i + 1] <-- env[i]
 30596 00016F5A 4883FE00                	cmp rsi, 0
 30597 00016F5E 7410                    	je .L_lambda_simple_env_end_0aeb
 30598 00016F60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30599 00016F64 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30600 00016F68 48FFC6                  	inc rsi
 30601 00016F6B 48FFC2                  	inc rdx
 30602 00016F6E EBEA                    	jmp .L_lambda_simple_env_loop_0aeb
 30603                                  .L_lambda_simple_env_end_0aeb:
 30604 00016F70 5B                      	pop rbx
 30605 00016F71 BE00000000              	mov rsi, 0
 30606                                  .L_lambda_simple_params_loop_0aeb:	; copy params
 30607 00016F76 4883FE00                	cmp rsi, 0
 30608 00016F7A 740E                    	je .L_lambda_simple_params_end_0aeb
 30609 00016F7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30610 00016F81 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30611 00016F85 48FFC6                  	inc rsi
 30612 00016F88 EBEC                    	jmp .L_lambda_simple_params_loop_0aeb
 30613                                  .L_lambda_simple_params_end_0aeb:
 30614 00016F8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30615 00016F8D 4889C3                  	mov rbx, rax
 30616 00016F90 58                      	pop rax
 30617 00016F91 C60004                  	mov byte [rax], T_closure
 30618 00016F94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30619 00016F98 48C74009[A56F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aeb
 30620 00016FA0 E986040000              	jmp .L_lambda_simple_end_0aeb
 30621                                  .L_lambda_simple_code_0aeb:	; lambda-simple body
 30622 00016FA5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 30623 00016FAB 740B                    	je .L_lambda_simple_arity_check_ok_0aeb
 30624 00016FAD FF742410                	push qword [rsp + 8 * 2]
 30625 00016FB1 6A02                    	push 2
 30626 00016FB3 E9C5140000              	jmp L_error_incorrect_arity_simple
 30627                                  .L_lambda_simple_arity_check_ok_0aeb:
 30628 00016FB8 C8000000                	enter 0, 0
 30629                                  	; preparing a tail-call
 30630                                  	; preparing a non-tail-call
 30631 00016FBC 488B4520                	mov rax, PARAM(0)	; param n
 30632 00016FC0 50                      	push rax
 30633 00016FC1 6A01                    	push 1	; arg count
 30634 00016FC3 488B0425[CD150000]      	mov rax, qword [free_var_99]	; free var make-string
 30635 00016FCB 803805                  	cmp byte [rax], T_undefined
 30636 00016FCE 0F84C3130000            	je L_error_fvar_undefined
 30637 00016FD4 803804                  	cmp byte [rax], T_closure
 30638 00016FD7 0F853E140000            	jne L_error_non_closure
 30639 00016FDD FF7001                  	push SOB_CLOSURE_ENV(rax)
 30640 00016FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30641 00016FE3 50                      	push rax
 30642 00016FE4 6A01                    	push 1	; arg count
 30643 00016FE6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30644 00016FEB E8D4140000              	call malloc
 30645 00016FF0 50                      	push rax
 30646 00016FF1 BF10000000              	mov rdi, 8 * 2	; new rib
 30647 00016FF6 E8C9140000              	call malloc
 30648 00016FFB 50                      	push rax
 30649 00016FFC BF10000000              	mov rdi, 8 * 2	; extended env
 30650 00017001 E8BE140000              	call malloc
 30651 00017006 488B7D10                	mov rdi, ENV
 30652 0001700A BE00000000              	mov rsi, 0
 30653 0001700F BA01000000              	mov rdx, 1
 30654                                  .L_lambda_simple_env_loop_0aec:	; ext_env[i + 1] <-- env[i]
 30655 00017014 4883FE01                	cmp rsi, 1
 30656 00017018 7410                    	je .L_lambda_simple_env_end_0aec
 30657 0001701A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30658 0001701E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30659 00017022 48FFC6                  	inc rsi
 30660 00017025 48FFC2                  	inc rdx
 30661 00017028 EBEA                    	jmp .L_lambda_simple_env_loop_0aec
 30662                                  .L_lambda_simple_env_end_0aec:
 30663 0001702A 5B                      	pop rbx
 30664 0001702B BE00000000              	mov rsi, 0
 30665                                  .L_lambda_simple_params_loop_0aec:	; copy params
 30666 00017030 4883FE02                	cmp rsi, 2
 30667 00017034 740E                    	je .L_lambda_simple_params_end_0aec
 30668 00017036 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30669 0001703B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30670 0001703F 48FFC6                  	inc rsi
 30671 00017042 EBEC                    	jmp .L_lambda_simple_params_loop_0aec
 30672                                  .L_lambda_simple_params_end_0aec:
 30673 00017044 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30674 00017047 4889C3                  	mov rbx, rax
 30675 0001704A 58                      	pop rax
 30676 0001704B C60004                  	mov byte [rax], T_closure
 30677 0001704E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30678 00017052 48C74009[5F700100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aec
 30679 0001705A E974030000              	jmp .L_lambda_simple_end_0aec
 30680                                  .L_lambda_simple_code_0aec:	; lambda-simple body
 30681 0001705F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30682 00017065 740B                    	je .L_lambda_simple_arity_check_ok_0aec
 30683 00017067 FF742410                	push qword [rsp + 8 * 2]
 30684 0001706B 6A01                    	push 1
 30685 0001706D E90B140000              	jmp L_error_incorrect_arity_simple
 30686                                  .L_lambda_simple_arity_check_ok_0aec:
 30687 00017072 C8000000                	enter 0, 0
 30688                                  	; preparing a tail-call
 30689 00017076 48B8-                   	mov rax, L_constants + 1993
 30689 00017078 [C907000000000000] 
 30690 00017080 50                      	push rax
 30691 00017081 6A01                    	push 1	; arg count
 30692 00017083 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30693 00017088 E837140000              	call malloc
 30694 0001708D 50                      	push rax
 30695 0001708E BF08000000              	mov rdi, 8 * 1	; new rib
 30696 00017093 E82C140000              	call malloc
 30697 00017098 50                      	push rax
 30698 00017099 BF18000000              	mov rdi, 8 * 3	; extended env
 30699 0001709E E821140000              	call malloc
 30700 000170A3 488B7D10                	mov rdi, ENV
 30701 000170A7 BE00000000              	mov rsi, 0
 30702 000170AC BA01000000              	mov rdx, 1
 30703                                  .L_lambda_simple_env_loop_0aed:	; ext_env[i + 1] <-- env[i]
 30704 000170B1 4883FE02                	cmp rsi, 2
 30705 000170B5 7410                    	je .L_lambda_simple_env_end_0aed
 30706 000170B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30707 000170BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30708 000170BF 48FFC6                  	inc rsi
 30709 000170C2 48FFC2                  	inc rdx
 30710 000170C5 EBEA                    	jmp .L_lambda_simple_env_loop_0aed
 30711                                  .L_lambda_simple_env_end_0aed:
 30712 000170C7 5B                      	pop rbx
 30713 000170C8 BE00000000              	mov rsi, 0
 30714                                  .L_lambda_simple_params_loop_0aed:	; copy params
 30715 000170CD 4883FE01                	cmp rsi, 1
 30716 000170D1 740E                    	je .L_lambda_simple_params_end_0aed
 30717 000170D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30718 000170D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30719 000170DC 48FFC6                  	inc rsi
 30720 000170DF EBEC                    	jmp .L_lambda_simple_params_loop_0aed
 30721                                  .L_lambda_simple_params_end_0aed:
 30722 000170E1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30723 000170E4 4889C3                  	mov rbx, rax
 30724 000170E7 58                      	pop rax
 30725 000170E8 C60004                  	mov byte [rax], T_closure
 30726 000170EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30727 000170EF 48C74009[FC700100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aed
 30728 000170F7 E97F020000              	jmp .L_lambda_simple_end_0aed
 30729                                  .L_lambda_simple_code_0aed:	; lambda-simple body
 30730 000170FC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30731 00017102 740B                    	je .L_lambda_simple_arity_check_ok_0aed
 30732 00017104 FF742410                	push qword [rsp + 8 * 2]
 30733 00017108 6A01                    	push 1
 30734 0001710A E96E130000              	jmp L_error_incorrect_arity_simple
 30735                                  .L_lambda_simple_arity_check_ok_0aed:
 30736 0001710F C8000000                	enter 0, 0
 30737 00017113 BF08000000              	mov rdi, 8*1
 30738 00017118 E8A7130000              	call malloc
 30739 0001711D 488B5D20                	mov rbx, PARAM(0)
 30740 00017121 488918                  	mov qword[rax], rbx
 30741 00017124 48894520                	mov PARAM(0), rax
 30742 00017128 48B8-                   	mov rax, sob_void
 30742 0001712A [0000000000000000] 
 30743                                  
 30744 00017132 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30745 00017137 E888130000              	call malloc
 30746 0001713C 50                      	push rax
 30747 0001713D BF08000000              	mov rdi, 8 * 1	; new rib
 30748 00017142 E87D130000              	call malloc
 30749 00017147 50                      	push rax
 30750 00017148 BF20000000              	mov rdi, 8 * 4	; extended env
 30751 0001714D E872130000              	call malloc
 30752 00017152 488B7D10                	mov rdi, ENV
 30753 00017156 BE00000000              	mov rsi, 0
 30754 0001715B BA01000000              	mov rdx, 1
 30755                                  .L_lambda_simple_env_loop_0aee:	; ext_env[i + 1] <-- env[i]
 30756 00017160 4883FE03                	cmp rsi, 3
 30757 00017164 7410                    	je .L_lambda_simple_env_end_0aee
 30758 00017166 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 30759 0001716A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 30760 0001716E 48FFC6                  	inc rsi
 30761 00017171 48FFC2                  	inc rdx
 30762 00017174 EBEA                    	jmp .L_lambda_simple_env_loop_0aee
 30763                                  .L_lambda_simple_env_end_0aee:
 30764 00017176 5B                      	pop rbx
 30765 00017177 BE00000000              	mov rsi, 0
 30766                                  .L_lambda_simple_params_loop_0aee:	; copy params
 30767 0001717C 4883FE01                	cmp rsi, 1
 30768 00017180 740E                    	je .L_lambda_simple_params_end_0aee
 30769 00017182 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 30770 00017187 488914F3                	mov qword [rbx + 8 * rsi], rdx
 30771 0001718B 48FFC6                  	inc rsi
 30772 0001718E EBEC                    	jmp .L_lambda_simple_params_loop_0aee
 30773                                  .L_lambda_simple_params_end_0aee:
 30774 00017190 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 30775 00017193 4889C3                  	mov rbx, rax
 30776 00017196 58                      	pop rax
 30777 00017197 C60004                  	mov byte [rax], T_closure
 30778 0001719A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 30779 0001719E 48C74009[AB710100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aee
 30780 000171A6 E953010000              	jmp .L_lambda_simple_end_0aee
 30781                                  .L_lambda_simple_code_0aee:	; lambda-simple body
 30782 000171AB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 30783 000171B1 740B                    	je .L_lambda_simple_arity_check_ok_0aee
 30784 000171B3 FF742410                	push qword [rsp + 8 * 2]
 30785 000171B7 6A01                    	push 1
 30786 000171B9 E9BF120000              	jmp L_error_incorrect_arity_simple
 30787                                  .L_lambda_simple_arity_check_ok_0aee:
 30788 000171BE C8000000                	enter 0, 0
 30789                                  	; preparing a non-tail-call
 30790 000171C2 488B4510                	mov rax, ENV
 30791 000171C6 488B4010                	mov rax, qword [rax + 8 * 2]
 30792 000171CA 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 30793 000171CD 50                      	push rax
 30794 000171CE 488B4520                	mov rax, PARAM(0)	; param i
 30795 000171D2 50                      	push rax
 30796 000171D3 6A02                    	push 2	; arg count
 30797 000171D5 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 30798 000171DD 803805                  	cmp byte [rax], T_undefined
 30799 000171E0 0F84B1110000            	je L_error_fvar_undefined
 30800 000171E6 803804                  	cmp byte [rax], T_closure
 30801 000171E9 0F852C120000            	jne L_error_non_closure
 30802 000171EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 30803 000171F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30804 000171F5 483D[02000000]          	cmp rax, sob_boolean_false
 30805 000171FB 0F84EE000000            	je .L_if_else_083a
 30806                                  	; preparing a non-tail-call
 30807                                  	; preparing a non-tail-call
 30808 00017201 488B4520                	mov rax, PARAM(0)	; param i
 30809 00017205 50                      	push rax
 30810 00017206 6A01                    	push 1	; arg count
 30811 00017208 488B4510                	mov rax, ENV
 30812 0001720C 488B4010                	mov rax, qword [rax + 8 * 2]
 30813 00017210 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 30814 00017214 803804                  	cmp byte [rax], T_closure
 30815 00017217 0F85FE110000            	jne L_error_non_closure
 30816 0001721D FF7001                  	push SOB_CLOSURE_ENV(rax)
 30817 00017220 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30818 00017223 50                      	push rax
 30819 00017224 488B4520                	mov rax, PARAM(0)	; param i
 30820 00017228 50                      	push rax
 30821 00017229 488B4510                	mov rax, ENV
 30822 0001722D 488B4008                	mov rax, qword [rax + 8 * 1]
 30823 00017231 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30824 00017234 50                      	push rax
 30825 00017235 6A03                    	push 3	; arg count
 30826 00017237 488B0425[ED170000]      	mov rax, qword [free_var_131]	; free var string-set!
 30827 0001723F 803805                  	cmp byte [rax], T_undefined
 30828 00017242 0F844F110000            	je L_error_fvar_undefined
 30829 00017248 803804                  	cmp byte [rax], T_closure
 30830 0001724B 0F85CA110000            	jne L_error_non_closure
 30831 00017251 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30832 00017254 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30833                                  
 30834                                  	; preparing a tail-call
 30835                                  	; preparing a non-tail-call
 30836 00017257 48B8-                   	mov rax, L_constants + 2270
 30836 00017259 [DE08000000000000] 
 30837 00017261 50                      	push rax
 30838 00017262 488B4520                	mov rax, PARAM(0)	; param i
 30839 00017266 50                      	push rax
 30840 00017267 6A02                    	push 2	; arg count
 30841 00017269 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 30842 00017271 803805                  	cmp byte [rax], T_undefined
 30843 00017274 0F841D110000            	je L_error_fvar_undefined
 30844 0001727A 803804                  	cmp byte [rax], T_closure
 30845 0001727D 0F8598110000            	jne L_error_non_closure
 30846 00017283 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30847 00017286 FF5009                  	call SOB_CLOSURE_CODE(rax)
 30848 00017289 50                      	push rax
 30849 0001728A 6A01                    	push 1	; arg count
 30850 0001728C 488B4510                	mov rax, ENV
 30851 00017290 488B00                  	mov rax, qword [rax + 8 * 0]
 30852 00017293 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 30853 00017296 488B00                  	mov rax, qword [rax]
 30854 00017299 803804                  	cmp byte [rax], T_closure
 30855 0001729C 0F8579110000            	jne L_error_non_closure
 30856 000172A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30857 000172A5 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30858 000172A8 FF7500                  	push qword[rbp]
 30859 000172AB 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30860 000172AE 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30861 000172B2 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30862 000172B6 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30863 000172BA 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30864 000172BD 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30865 000172C0 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30866 000172C5 4983C103                	add r9, 3 	 ;for getting to the params
 30867 000172C9 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30868 000172CD 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30869                                  .L_tc_recycle_frame_loop_0f49:
 30870 000172D0 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30871 000172D3 7410                    	je .L_tc_recycle_frame_done_0f49
 30872 000172D5 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30873 000172D8 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30874 000172DB 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30875 000172DF 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30876 000172E3 EBEB                    	jmp .L_tc_recycle_frame_loop_0f49
 30877                                  .L_tc_recycle_frame_done_0f49:
 30878 000172E5 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30879 000172E6 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30880 000172EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30881 000172ED EB0B                    	jmp .L_if_end_083a
 30882                                  .L_if_else_083a:
 30883 000172EF 488B4510                	mov rax, ENV
 30884 000172F3 488B4008                	mov rax, qword [rax + 8 * 1]
 30885 000172F7 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var str
 30886                                  .L_if_end_083a:
 30887 000172FA C9                      	leave
 30888 000172FB C21800                  	ret AND_KILL_FRAME(1)
 30889                                  .L_lambda_simple_end_0aee:	; new closure is in rax
 30890 000172FE 50                      	push rax
 30891 000172FF 488B4520                	mov rax, PARAM(0)	; param run
 30892 00017303 8F00                    	pop qword [rax]
 30893 00017305 48B8-                   	mov rax, sob_void
 30893 00017307 [0000000000000000] 
 30894                                  
 30895                                  	; preparing a tail-call
 30896 0001730F 48B8-                   	mov rax, L_constants + 2135
 30896 00017311 [5708000000000000] 
 30897 00017319 50                      	push rax
 30898 0001731A 6A01                    	push 1	; arg count
 30899 0001731C 488B4520                	mov rax, PARAM(0)	; param run
 30900 00017320 488B00                  	mov rax, qword [rax]
 30901 00017323 803804                  	cmp byte [rax], T_closure
 30902 00017326 0F85EF100000            	jne L_error_non_closure
 30903 0001732C FF7001                  	push SOB_CLOSURE_ENV(rax)
 30904 0001732F FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30905 00017332 FF7500                  	push qword[rbp]
 30906 00017335 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30907 00017338 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30908 0001733C 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30909 00017340 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30910 00017344 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30911 00017347 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30912 0001734A 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30913 0001734F 4983C103                	add r9, 3 	 ;for getting to the params
 30914 00017353 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30915 00017357 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30916                                  .L_tc_recycle_frame_loop_0f4a:
 30917 0001735A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30918 0001735D 7410                    	je .L_tc_recycle_frame_done_0f4a
 30919 0001735F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30920 00017362 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30921 00017365 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30922 00017369 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30923 0001736D EBEB                    	jmp .L_tc_recycle_frame_loop_0f4a
 30924                                  .L_tc_recycle_frame_done_0f4a:
 30925 0001736F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30926 00017370 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30927 00017374 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30928 00017377 C9                      	leave
 30929 00017378 C21800                  	ret AND_KILL_FRAME(1)
 30930                                  .L_lambda_simple_end_0aed:	; new closure is in rax
 30931 0001737B 803804                  	cmp byte [rax], T_closure
 30932 0001737E 0F8597100000            	jne L_error_non_closure
 30933 00017384 FF7001                  	push SOB_CLOSURE_ENV(rax)
 30934 00017387 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30935 0001738A FF7500                  	push qword[rbp]
 30936 0001738D 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30937 00017390 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30938 00017394 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30939 00017398 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30940 0001739C 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30941 0001739F 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30942 000173A2 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30943 000173A7 4983C103                	add r9, 3 	 ;for getting to the params
 30944 000173AB 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30945 000173AF 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30946                                  .L_tc_recycle_frame_loop_0f4b:
 30947 000173B2 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30948 000173B5 7410                    	je .L_tc_recycle_frame_done_0f4b
 30949 000173B7 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30950 000173BA 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30951 000173BD 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30952 000173C1 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30953 000173C5 EBEB                    	jmp .L_tc_recycle_frame_loop_0f4b
 30954                                  .L_tc_recycle_frame_done_0f4b:
 30955 000173C7 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30956 000173C8 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30957 000173CC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30958 000173CF C9                      	leave
 30959 000173D0 C21800                  	ret AND_KILL_FRAME(1)
 30960                                  .L_lambda_simple_end_0aec:	; new closure is in rax
 30961 000173D3 803804                  	cmp byte [rax], T_closure
 30962 000173D6 0F853F100000            	jne L_error_non_closure
 30963 000173DC FF7001                  	push SOB_CLOSURE_ENV(rax)
 30964 000173DF FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 30965 000173E2 FF7500                  	push qword[rbp]
 30966 000173E5 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 30967 000173E8 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 30968 000173EC 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 30969 000173F0 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 30970 000173F4 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 30971 000173F7 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 30972 000173FA 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 30973 000173FF 4983C103                	add r9, 3 	 ;for getting to the params
 30974 00017403 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 30975 00017407 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 30976                                  .L_tc_recycle_frame_loop_0f4c:
 30977 0001740A 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 30978 0001740D 7410                    	je .L_tc_recycle_frame_done_0f4c
 30979 0001740F 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 30980 00017412 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 30981 00017415 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 30982 00017419 4983E808                	sub r8, 8	 ;move the top of the stack one down
 30983 0001741D EBEB                    	jmp .L_tc_recycle_frame_loop_0f4c
 30984                                  .L_tc_recycle_frame_done_0f4c:
 30985 0001741F 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 30986 00017420 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 30987 00017424 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 30988 00017427 C9                      	leave
 30989 00017428 C22000                  	ret AND_KILL_FRAME(2)
 30990                                  .L_lambda_simple_end_0aeb:	; new closure is in rax
 30991 0001742B 48890425[DE150000]      	mov qword [free_var_100], rax
 30992 00017433 48B8-                   	mov rax, sob_void
 30992 00017435 [0000000000000000] 
 30993                                  
 30994 0001743D 4889C7                  	mov rdi, rax
 30995 00017440 E8D4120000              	call print_sexpr_if_not_void
 30996 00017445 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 30997 0001744A E875100000              	call malloc
 30998 0001744F 50                      	push rax
 30999 00017450 BF00000000              	mov rdi, 8 * 0	; new rib
 31000 00017455 E86A100000              	call malloc
 31001 0001745A 50                      	push rax
 31002 0001745B BF08000000              	mov rdi, 8 * 1	; extended env
 31003 00017460 E85F100000              	call malloc
 31004 00017465 488B7D10                	mov rdi, ENV
 31005 00017469 BE00000000              	mov rsi, 0
 31006 0001746E BA01000000              	mov rdx, 1
 31007                                  .L_lambda_simple_env_loop_0aef:	; ext_env[i + 1] <-- env[i]
 31008 00017473 4883FE00                	cmp rsi, 0
 31009 00017477 7410                    	je .L_lambda_simple_env_end_0aef
 31010 00017479 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31011 0001747D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31012 00017481 48FFC6                  	inc rsi
 31013 00017484 48FFC2                  	inc rdx
 31014 00017487 EBEA                    	jmp .L_lambda_simple_env_loop_0aef
 31015                                  .L_lambda_simple_env_end_0aef:
 31016 00017489 5B                      	pop rbx
 31017 0001748A BE00000000              	mov rsi, 0
 31018                                  .L_lambda_simple_params_loop_0aef:	; copy params
 31019 0001748F 4883FE00                	cmp rsi, 0
 31020 00017493 740E                    	je .L_lambda_simple_params_end_0aef
 31021 00017495 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31022 0001749A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31023 0001749E 48FFC6                  	inc rsi
 31024 000174A1 EBEC                    	jmp .L_lambda_simple_params_loop_0aef
 31025                                  .L_lambda_simple_params_end_0aef:
 31026 000174A3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31027 000174A6 4889C3                  	mov rbx, rax
 31028 000174A9 58                      	pop rax
 31029 000174AA C60004                  	mov byte [rax], T_closure
 31030 000174AD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31031 000174B1 48C74009[BE740100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0aef
 31032 000174B9 E986040000              	jmp .L_lambda_simple_end_0aef
 31033                                  .L_lambda_simple_code_0aef:	; lambda-simple body
 31034 000174BE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 31035 000174C4 740B                    	je .L_lambda_simple_arity_check_ok_0aef
 31036 000174C6 FF742410                	push qword [rsp + 8 * 2]
 31037 000174CA 6A02                    	push 2
 31038 000174CC E9AC0F0000              	jmp L_error_incorrect_arity_simple
 31039                                  .L_lambda_simple_arity_check_ok_0aef:
 31040 000174D1 C8000000                	enter 0, 0
 31041                                  	; preparing a tail-call
 31042                                  	; preparing a non-tail-call
 31043 000174D5 488B4520                	mov rax, PARAM(0)	; param n
 31044 000174D9 50                      	push rax
 31045 000174DA 6A01                    	push 1	; arg count
 31046 000174DC 488B0425[EF150000]      	mov rax, qword [free_var_101]	; free var make-vector
 31047 000174E4 803805                  	cmp byte [rax], T_undefined
 31048 000174E7 0F84AA0E0000            	je L_error_fvar_undefined
 31049 000174ED 803804                  	cmp byte [rax], T_closure
 31050 000174F0 0F85250F0000            	jne L_error_non_closure
 31051 000174F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31052 000174F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31053 000174FC 50                      	push rax
 31054 000174FD 6A01                    	push 1	; arg count
 31055 000174FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31056 00017504 E8BB0F0000              	call malloc
 31057 00017509 50                      	push rax
 31058 0001750A BF10000000              	mov rdi, 8 * 2	; new rib
 31059 0001750F E8B00F0000              	call malloc
 31060 00017514 50                      	push rax
 31061 00017515 BF10000000              	mov rdi, 8 * 2	; extended env
 31062 0001751A E8A50F0000              	call malloc
 31063 0001751F 488B7D10                	mov rdi, ENV
 31064 00017523 BE00000000              	mov rsi, 0
 31065 00017528 BA01000000              	mov rdx, 1
 31066                                  .L_lambda_simple_env_loop_0af0:	; ext_env[i + 1] <-- env[i]
 31067 0001752D 4883FE01                	cmp rsi, 1
 31068 00017531 7410                    	je .L_lambda_simple_env_end_0af0
 31069 00017533 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31070 00017537 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31071 0001753B 48FFC6                  	inc rsi
 31072 0001753E 48FFC2                  	inc rdx
 31073 00017541 EBEA                    	jmp .L_lambda_simple_env_loop_0af0
 31074                                  .L_lambda_simple_env_end_0af0:
 31075 00017543 5B                      	pop rbx
 31076 00017544 BE00000000              	mov rsi, 0
 31077                                  .L_lambda_simple_params_loop_0af0:	; copy params
 31078 00017549 4883FE02                	cmp rsi, 2
 31079 0001754D 740E                    	je .L_lambda_simple_params_end_0af0
 31080 0001754F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31081 00017554 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31082 00017558 48FFC6                  	inc rsi
 31083 0001755B EBEC                    	jmp .L_lambda_simple_params_loop_0af0
 31084                                  .L_lambda_simple_params_end_0af0:
 31085 0001755D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31086 00017560 4889C3                  	mov rbx, rax
 31087 00017563 58                      	pop rax
 31088 00017564 C60004                  	mov byte [rax], T_closure
 31089 00017567 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31090 0001756B 48C74009[78750100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af0
 31091 00017573 E974030000              	jmp .L_lambda_simple_end_0af0
 31092                                  .L_lambda_simple_code_0af0:	; lambda-simple body
 31093 00017578 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31094 0001757E 740B                    	je .L_lambda_simple_arity_check_ok_0af0
 31095 00017580 FF742410                	push qword [rsp + 8 * 2]
 31096 00017584 6A01                    	push 1
 31097 00017586 E9F20E0000              	jmp L_error_incorrect_arity_simple
 31098                                  .L_lambda_simple_arity_check_ok_0af0:
 31099 0001758B C8000000                	enter 0, 0
 31100                                  	; preparing a tail-call
 31101 0001758F 48B8-                   	mov rax, L_constants + 1993
 31101 00017591 [C907000000000000] 
 31102 00017599 50                      	push rax
 31103 0001759A 6A01                    	push 1	; arg count
 31104 0001759C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31105 000175A1 E81E0F0000              	call malloc
 31106 000175A6 50                      	push rax
 31107 000175A7 BF08000000              	mov rdi, 8 * 1	; new rib
 31108 000175AC E8130F0000              	call malloc
 31109 000175B1 50                      	push rax
 31110 000175B2 BF18000000              	mov rdi, 8 * 3	; extended env
 31111 000175B7 E8080F0000              	call malloc
 31112 000175BC 488B7D10                	mov rdi, ENV
 31113 000175C0 BE00000000              	mov rsi, 0
 31114 000175C5 BA01000000              	mov rdx, 1
 31115                                  .L_lambda_simple_env_loop_0af1:	; ext_env[i + 1] <-- env[i]
 31116 000175CA 4883FE02                	cmp rsi, 2
 31117 000175CE 7410                    	je .L_lambda_simple_env_end_0af1
 31118 000175D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31119 000175D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31120 000175D8 48FFC6                  	inc rsi
 31121 000175DB 48FFC2                  	inc rdx
 31122 000175DE EBEA                    	jmp .L_lambda_simple_env_loop_0af1
 31123                                  .L_lambda_simple_env_end_0af1:
 31124 000175E0 5B                      	pop rbx
 31125 000175E1 BE00000000              	mov rsi, 0
 31126                                  .L_lambda_simple_params_loop_0af1:	; copy params
 31127 000175E6 4883FE01                	cmp rsi, 1
 31128 000175EA 740E                    	je .L_lambda_simple_params_end_0af1
 31129 000175EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31130 000175F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31131 000175F5 48FFC6                  	inc rsi
 31132 000175F8 EBEC                    	jmp .L_lambda_simple_params_loop_0af1
 31133                                  .L_lambda_simple_params_end_0af1:
 31134 000175FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31135 000175FD 4889C3                  	mov rbx, rax
 31136 00017600 58                      	pop rax
 31137 00017601 C60004                  	mov byte [rax], T_closure
 31138 00017604 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31139 00017608 48C74009[15760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af1
 31140 00017610 E97F020000              	jmp .L_lambda_simple_end_0af1
 31141                                  .L_lambda_simple_code_0af1:	; lambda-simple body
 31142 00017615 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31143 0001761B 740B                    	je .L_lambda_simple_arity_check_ok_0af1
 31144 0001761D FF742410                	push qword [rsp + 8 * 2]
 31145 00017621 6A01                    	push 1
 31146 00017623 E9550E0000              	jmp L_error_incorrect_arity_simple
 31147                                  .L_lambda_simple_arity_check_ok_0af1:
 31148 00017628 C8000000                	enter 0, 0
 31149 0001762C BF08000000              	mov rdi, 8*1
 31150 00017631 E88E0E0000              	call malloc
 31151 00017636 488B5D20                	mov rbx, PARAM(0)
 31152 0001763A 488918                  	mov qword[rax], rbx
 31153 0001763D 48894520                	mov PARAM(0), rax
 31154 00017641 48B8-                   	mov rax, sob_void
 31154 00017643 [0000000000000000] 
 31155                                  
 31156 0001764B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31157 00017650 E86F0E0000              	call malloc
 31158 00017655 50                      	push rax
 31159 00017656 BF08000000              	mov rdi, 8 * 1	; new rib
 31160 0001765B E8640E0000              	call malloc
 31161 00017660 50                      	push rax
 31162 00017661 BF20000000              	mov rdi, 8 * 4	; extended env
 31163 00017666 E8590E0000              	call malloc
 31164 0001766B 488B7D10                	mov rdi, ENV
 31165 0001766F BE00000000              	mov rsi, 0
 31166 00017674 BA01000000              	mov rdx, 1
 31167                                  .L_lambda_simple_env_loop_0af2:	; ext_env[i + 1] <-- env[i]
 31168 00017679 4883FE03                	cmp rsi, 3
 31169 0001767D 7410                    	je .L_lambda_simple_env_end_0af2
 31170 0001767F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31171 00017683 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31172 00017687 48FFC6                  	inc rsi
 31173 0001768A 48FFC2                  	inc rdx
 31174 0001768D EBEA                    	jmp .L_lambda_simple_env_loop_0af2
 31175                                  .L_lambda_simple_env_end_0af2:
 31176 0001768F 5B                      	pop rbx
 31177 00017690 BE00000000              	mov rsi, 0
 31178                                  .L_lambda_simple_params_loop_0af2:	; copy params
 31179 00017695 4883FE01                	cmp rsi, 1
 31180 00017699 740E                    	je .L_lambda_simple_params_end_0af2
 31181 0001769B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31182 000176A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31183 000176A4 48FFC6                  	inc rsi
 31184 000176A7 EBEC                    	jmp .L_lambda_simple_params_loop_0af2
 31185                                  .L_lambda_simple_params_end_0af2:
 31186 000176A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31187 000176AC 4889C3                  	mov rbx, rax
 31188 000176AF 58                      	pop rax
 31189 000176B0 C60004                  	mov byte [rax], T_closure
 31190 000176B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31191 000176B7 48C74009[C4760100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af2
 31192 000176BF E953010000              	jmp .L_lambda_simple_end_0af2
 31193                                  .L_lambda_simple_code_0af2:	; lambda-simple body
 31194 000176C4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31195 000176CA 740B                    	je .L_lambda_simple_arity_check_ok_0af2
 31196 000176CC FF742410                	push qword [rsp + 8 * 2]
 31197 000176D0 6A01                    	push 1
 31198 000176D2 E9A60D0000              	jmp L_error_incorrect_arity_simple
 31199                                  .L_lambda_simple_arity_check_ok_0af2:
 31200 000176D7 C8000000                	enter 0, 0
 31201                                  	; preparing a non-tail-call
 31202 000176DB 488B4510                	mov rax, ENV
 31203 000176DF 488B4010                	mov rax, qword [rax + 8 * 2]
 31204 000176E3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var n
 31205 000176E6 50                      	push rax
 31206 000176E7 488B4520                	mov rax, PARAM(0)	; param i
 31207 000176EB 50                      	push rax
 31208 000176EC 6A02                    	push 2	; arg count
 31209 000176EE 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 31210 000176F6 803805                  	cmp byte [rax], T_undefined
 31211 000176F9 0F84980C0000            	je L_error_fvar_undefined
 31212 000176FF 803804                  	cmp byte [rax], T_closure
 31213 00017702 0F85130D0000            	jne L_error_non_closure
 31214 00017708 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31215 0001770B FF5009                  	call SOB_CLOSURE_CODE(rax)
 31216 0001770E 483D[02000000]          	cmp rax, sob_boolean_false
 31217 00017714 0F84EE000000            	je .L_if_else_083b
 31218                                  	; preparing a non-tail-call
 31219                                  	; preparing a non-tail-call
 31220 0001771A 488B4520                	mov rax, PARAM(0)	; param i
 31221 0001771E 50                      	push rax
 31222 0001771F 6A01                    	push 1	; arg count
 31223 00017721 488B4510                	mov rax, ENV
 31224 00017725 488B4010                	mov rax, qword [rax + 8 * 2]
 31225 00017729 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var thunk
 31226 0001772D 803804                  	cmp byte [rax], T_closure
 31227 00017730 0F85E50C0000            	jne L_error_non_closure
 31228 00017736 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31229 00017739 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31230 0001773C 50                      	push rax
 31231 0001773D 488B4520                	mov rax, PARAM(0)	; param i
 31232 00017741 50                      	push rax
 31233 00017742 488B4510                	mov rax, ENV
 31234 00017746 488B4008                	mov rax, qword [rax + 8 * 1]
 31235 0001774A 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 31236 0001774D 50                      	push rax
 31237 0001774E 6A03                    	push 3	; arg count
 31238 00017750 488B0425[0E190000]      	mov rax, qword [free_var_148]	; free var vector-set!
 31239 00017758 803805                  	cmp byte [rax], T_undefined
 31240 0001775B 0F84360C0000            	je L_error_fvar_undefined
 31241 00017761 803804                  	cmp byte [rax], T_closure
 31242 00017764 0F85B10C0000            	jne L_error_non_closure
 31243 0001776A FF7001                  	push SOB_CLOSURE_ENV(rax)
 31244 0001776D FF5009                  	call SOB_CLOSURE_CODE(rax)
 31245                                  
 31246                                  	; preparing a tail-call
 31247                                  	; preparing a non-tail-call
 31248 00017770 48B8-                   	mov rax, L_constants + 2270
 31248 00017772 [DE08000000000000] 
 31249 0001777A 50                      	push rax
 31250 0001777B 488B4520                	mov rax, PARAM(0)	; param i
 31251 0001777F 50                      	push rax
 31252 00017780 6A02                    	push 2	; arg count
 31253 00017782 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 31254 0001778A 803805                  	cmp byte [rax], T_undefined
 31255 0001778D 0F84040C0000            	je L_error_fvar_undefined
 31256 00017793 803804                  	cmp byte [rax], T_closure
 31257 00017796 0F857F0C0000            	jne L_error_non_closure
 31258 0001779C FF7001                  	push SOB_CLOSURE_ENV(rax)
 31259 0001779F FF5009                  	call SOB_CLOSURE_CODE(rax)
 31260 000177A2 50                      	push rax
 31261 000177A3 6A01                    	push 1	; arg count
 31262 000177A5 488B4510                	mov rax, ENV
 31263 000177A9 488B00                  	mov rax, qword [rax + 8 * 0]
 31264 000177AC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var run
 31265 000177AF 488B00                  	mov rax, qword [rax]
 31266 000177B2 803804                  	cmp byte [rax], T_closure
 31267 000177B5 0F85600C0000            	jne L_error_non_closure
 31268 000177BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 31269 000177BE FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31270 000177C1 FF7500                  	push qword[rbp]
 31271 000177C4 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31272 000177C7 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31273 000177CB 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31274 000177CF 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31275 000177D3 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31276 000177D6 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31277 000177D9 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31278 000177DE 4983C103                	add r9, 3 	 ;for getting to the params
 31279 000177E2 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31280 000177E6 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31281                                  .L_tc_recycle_frame_loop_0f4d:
 31282 000177E9 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31283 000177EC 7410                    	je .L_tc_recycle_frame_done_0f4d
 31284 000177EE 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31285 000177F1 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31286 000177F4 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31287 000177F8 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31288 000177FC EBEB                    	jmp .L_tc_recycle_frame_loop_0f4d
 31289                                  .L_tc_recycle_frame_done_0f4d:
 31290 000177FE 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31291 000177FF 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31292 00017803 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31293 00017806 EB0B                    	jmp .L_if_end_083b
 31294                                  .L_if_else_083b:
 31295 00017808 488B4510                	mov rax, ENV
 31296 0001780C 488B4008                	mov rax, qword [rax + 8 * 1]
 31297 00017810 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var vec
 31298                                  .L_if_end_083b:
 31299 00017813 C9                      	leave
 31300 00017814 C21800                  	ret AND_KILL_FRAME(1)
 31301                                  .L_lambda_simple_end_0af2:	; new closure is in rax
 31302 00017817 50                      	push rax
 31303 00017818 488B4520                	mov rax, PARAM(0)	; param run
 31304 0001781C 8F00                    	pop qword [rax]
 31305 0001781E 48B8-                   	mov rax, sob_void
 31305 00017820 [0000000000000000] 
 31306                                  
 31307                                  	; preparing a tail-call
 31308 00017828 48B8-                   	mov rax, L_constants + 2135
 31308 0001782A [5708000000000000] 
 31309 00017832 50                      	push rax
 31310 00017833 6A01                    	push 1	; arg count
 31311 00017835 488B4520                	mov rax, PARAM(0)	; param run
 31312 00017839 488B00                  	mov rax, qword [rax]
 31313 0001783C 803804                  	cmp byte [rax], T_closure
 31314 0001783F 0F85D60B0000            	jne L_error_non_closure
 31315 00017845 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31316 00017848 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31317 0001784B FF7500                  	push qword[rbp]
 31318 0001784E 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31319 00017851 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31320 00017855 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31321 00017859 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31322 0001785D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31323 00017860 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31324 00017863 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31325 00017868 4983C103                	add r9, 3 	 ;for getting to the params
 31326 0001786C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31327 00017870 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31328                                  .L_tc_recycle_frame_loop_0f4e:
 31329 00017873 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31330 00017876 7410                    	je .L_tc_recycle_frame_done_0f4e
 31331 00017878 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31332 0001787B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31333 0001787E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31334 00017882 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31335 00017886 EBEB                    	jmp .L_tc_recycle_frame_loop_0f4e
 31336                                  .L_tc_recycle_frame_done_0f4e:
 31337 00017888 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31338 00017889 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31339 0001788D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31340 00017890 C9                      	leave
 31341 00017891 C21800                  	ret AND_KILL_FRAME(1)
 31342                                  .L_lambda_simple_end_0af1:	; new closure is in rax
 31343 00017894 803804                  	cmp byte [rax], T_closure
 31344 00017897 0F857E0B0000            	jne L_error_non_closure
 31345 0001789D FF7001                  	push SOB_CLOSURE_ENV(rax)
 31346 000178A0 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31347 000178A3 FF7500                  	push qword[rbp]
 31348 000178A6 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31349 000178A9 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31350 000178AD 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31351 000178B1 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31352 000178B5 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31353 000178B8 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31354 000178BB 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31355 000178C0 4983C103                	add r9, 3 	 ;for getting to the params
 31356 000178C4 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31357 000178C8 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31358                                  .L_tc_recycle_frame_loop_0f4f:
 31359 000178CB 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31360 000178CE 7410                    	je .L_tc_recycle_frame_done_0f4f
 31361 000178D0 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31362 000178D3 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31363 000178D6 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31364 000178DA 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31365 000178DE EBEB                    	jmp .L_tc_recycle_frame_loop_0f4f
 31366                                  .L_tc_recycle_frame_done_0f4f:
 31367 000178E0 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31368 000178E1 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31369 000178E5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31370 000178E8 C9                      	leave
 31371 000178E9 C21800                  	ret AND_KILL_FRAME(1)
 31372                                  .L_lambda_simple_end_0af0:	; new closure is in rax
 31373 000178EC 803804                  	cmp byte [rax], T_closure
 31374 000178EF 0F85260B0000            	jne L_error_non_closure
 31375 000178F5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31376 000178F8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31377 000178FB FF7500                  	push qword[rbp]
 31378 000178FE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31379 00017901 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31380 00017905 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31381 00017909 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31382 0001790D 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31383 00017910 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31384 00017913 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31385 00017918 4983C103                	add r9, 3 	 ;for getting to the params
 31386 0001791C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31387 00017920 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31388                                  .L_tc_recycle_frame_loop_0f50:
 31389 00017923 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31390 00017926 7410                    	je .L_tc_recycle_frame_done_0f50
 31391 00017928 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31392 0001792B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31393 0001792E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31394 00017932 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31395 00017936 EBEB                    	jmp .L_tc_recycle_frame_loop_0f50
 31396                                  .L_tc_recycle_frame_done_0f50:
 31397 00017938 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31398 00017939 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31399 0001793D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31400 00017940 C9                      	leave
 31401 00017941 C22000                  	ret AND_KILL_FRAME(2)
 31402                                  .L_lambda_simple_end_0aef:	; new closure is in rax
 31403 00017944 48890425[00160000]      	mov qword [free_var_102], rax
 31404 0001794C 48B8-                   	mov rax, sob_void
 31404 0001794E [0000000000000000] 
 31405                                  
 31406 00017956 4889C7                  	mov rdi, rax
 31407 00017959 E8BB0D0000              	call print_sexpr_if_not_void
 31408 0001795E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31409 00017963 E85C0B0000              	call malloc
 31410 00017968 50                      	push rax
 31411 00017969 BF00000000              	mov rdi, 8 * 0	; new rib
 31412 0001796E E8510B0000              	call malloc
 31413 00017973 50                      	push rax
 31414 00017974 BF08000000              	mov rdi, 8 * 1	; extended env
 31415 00017979 E8460B0000              	call malloc
 31416 0001797E 488B7D10                	mov rdi, ENV
 31417 00017982 BE00000000              	mov rsi, 0
 31418 00017987 BA01000000              	mov rdx, 1
 31419                                  .L_lambda_simple_env_loop_0af3:	; ext_env[i + 1] <-- env[i]
 31420 0001798C 4883FE00                	cmp rsi, 0
 31421 00017990 7410                    	je .L_lambda_simple_env_end_0af3
 31422 00017992 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31423 00017996 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31424 0001799A 48FFC6                  	inc rsi
 31425 0001799D 48FFC2                  	inc rdx
 31426 000179A0 EBEA                    	jmp .L_lambda_simple_env_loop_0af3
 31427                                  .L_lambda_simple_env_end_0af3:
 31428 000179A2 5B                      	pop rbx
 31429 000179A3 BE00000000              	mov rsi, 0
 31430                                  .L_lambda_simple_params_loop_0af3:	; copy params
 31431 000179A8 4883FE00                	cmp rsi, 0
 31432 000179AC 740E                    	je .L_lambda_simple_params_end_0af3
 31433 000179AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31434 000179B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31435 000179B7 48FFC6                  	inc rsi
 31436 000179BA EBEC                    	jmp .L_lambda_simple_params_loop_0af3
 31437                                  .L_lambda_simple_params_end_0af3:
 31438 000179BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31439 000179BF 4889C3                  	mov rbx, rax
 31440 000179C2 58                      	pop rax
 31441 000179C3 C60004                  	mov byte [rax], T_closure
 31442 000179C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31443 000179CA 48C74009[D7790100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af3
 31444 000179D2 E977020000              	jmp .L_lambda_simple_end_0af3
 31445                                  .L_lambda_simple_code_0af3:	; lambda-simple body
 31446 000179D7 48837C241003            	cmp qword [rsp + 8 * 2], 3
 31447 000179DD 740B                    	je .L_lambda_simple_arity_check_ok_0af3
 31448 000179DF FF742410                	push qword [rsp + 8 * 2]
 31449 000179E3 6A03                    	push 3
 31450 000179E5 E9930A0000              	jmp L_error_incorrect_arity_simple
 31451                                  .L_lambda_simple_arity_check_ok_0af3:
 31452 000179EA C8000000                	enter 0, 0
 31453                                  	; preparing a non-tail-call
 31454 000179EE 488B4530                	mov rax, PARAM(2)	; param n
 31455 000179F2 50                      	push rax
 31456 000179F3 6A01                    	push 1	; arg count
 31457 000179F5 488B0425[52190000]      	mov rax, qword [free_var_152]	; free var zero?
 31458 000179FD 803805                  	cmp byte [rax], T_undefined
 31459 00017A00 0F8491090000            	je L_error_fvar_undefined
 31460 00017A06 803804                  	cmp byte [rax], T_closure
 31461 00017A09 0F850C0A0000            	jne L_error_non_closure
 31462 00017A0F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31463 00017A12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31464 00017A15 483D[02000000]          	cmp rax, sob_boolean_false
 31465 00017A1B 740F                    	je .L_if_else_083e
 31466 00017A1D 48B8-                   	mov rax, L_constants + 3485
 31466 00017A1F [9D0D000000000000] 
 31467 00017A27 E91E020000              	jmp .L_if_end_083e
 31468                                  .L_if_else_083e:
 31469                                  	; preparing a non-tail-call
 31470 00017A2C 488B4528                	mov rax, PARAM(1)	; param b
 31471 00017A30 50                      	push rax
 31472 00017A31 488B4520                	mov rax, PARAM(0)	; param a
 31473 00017A35 50                      	push rax
 31474 00017A36 6A02                    	push 2	; arg count
 31475 00017A38 488B0425[7E0F0000]      	mov rax, qword [free_var_4]	; free var <
 31476 00017A40 803805                  	cmp byte [rax], T_undefined
 31477 00017A43 0F844E090000            	je L_error_fvar_undefined
 31478 00017A49 803804                  	cmp byte [rax], T_closure
 31479 00017A4C 0F85C9090000            	jne L_error_non_closure
 31480 00017A52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31481 00017A55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31482 00017A58 483D[02000000]          	cmp rax, sob_boolean_false
 31483 00017A5E 0F84D1000000            	je .L_if_else_083d
 31484                                  	; preparing a tail-call
 31485                                  	; preparing a non-tail-call
 31486 00017A64 488B4530                	mov rax, PARAM(2)	; param n
 31487 00017A68 50                      	push rax
 31488                                  	; preparing a non-tail-call
 31489 00017A69 488B4520                	mov rax, PARAM(0)	; param a
 31490 00017A6D 50                      	push rax
 31491 00017A6E 488B4528                	mov rax, PARAM(1)	; param b
 31492 00017A72 50                      	push rax
 31493 00017A73 6A02                    	push 2	; arg count
 31494 00017A75 488B0425[6D0F0000]      	mov rax, qword [free_var_3]	; free var /
 31495 00017A7D 803805                  	cmp byte [rax], T_undefined
 31496 00017A80 0F8411090000            	je L_error_fvar_undefined
 31497 00017A86 803804                  	cmp byte [rax], T_closure
 31498 00017A89 0F858C090000            	jne L_error_non_closure
 31499 00017A8F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31500 00017A92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31501 00017A95 50                      	push rax
 31502 00017A96 488B4520                	mov rax, PARAM(0)	; param a
 31503 00017A9A 50                      	push rax
 31504 00017A9B 6A03                    	push 3	; arg count
 31505 00017A9D 488B0425[AB150000]      	mov rax, qword [free_var_97]	; free var logarithm
 31506 00017AA5 803805                  	cmp byte [rax], T_undefined
 31507 00017AA8 0F84E9080000            	je L_error_fvar_undefined
 31508 00017AAE 803804                  	cmp byte [rax], T_closure
 31509 00017AB1 0F8564090000            	jne L_error_non_closure
 31510 00017AB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31511 00017ABA FF5009                  	call SOB_CLOSURE_CODE(rax)
 31512 00017ABD 50                      	push rax
 31513 00017ABE 48B8-                   	mov rax, L_constants + 3485
 31513 00017AC0 [9D0D000000000000] 
 31514 00017AC8 50                      	push rax
 31515 00017AC9 6A02                    	push 2	; arg count
 31516 00017ACB 488B0425[4B0F0000]      	mov rax, qword [free_var_1]	; free var +
 31517 00017AD3 803805                  	cmp byte [rax], T_undefined
 31518 00017AD6 0F84BB080000            	je L_error_fvar_undefined
 31519 00017ADC 803804                  	cmp byte [rax], T_closure
 31520 00017ADF 0F8536090000            	jne L_error_non_closure
 31521 00017AE5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31522 00017AE8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31523 00017AEB FF7500                  	push qword[rbp]
 31524 00017AEE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31525 00017AF1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31526 00017AF5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31527 00017AF9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31528 00017AFD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31529 00017B00 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31530 00017B03 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31531 00017B08 4983C103                	add r9, 3 	 ;for getting to the params
 31532 00017B0C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31533 00017B10 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31534                                  .L_tc_recycle_frame_loop_0f51:
 31535 00017B13 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31536 00017B16 7410                    	je .L_tc_recycle_frame_done_0f51
 31537 00017B18 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31538 00017B1B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31539 00017B1E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31540 00017B22 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31541 00017B26 EBEB                    	jmp .L_tc_recycle_frame_loop_0f51
 31542                                  .L_tc_recycle_frame_done_0f51:
 31543 00017B28 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31544 00017B29 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31545 00017B2D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31546 00017B30 E915010000              	jmp .L_if_end_083d
 31547                                  .L_if_else_083d:
 31548                                  	; preparing a non-tail-call
 31549 00017B35 488B4528                	mov rax, PARAM(1)	; param b
 31550 00017B39 50                      	push rax
 31551 00017B3A 488B4520                	mov rax, PARAM(0)	; param a
 31552 00017B3E 50                      	push rax
 31553 00017B3F 6A02                    	push 2	; arg count
 31554 00017B41 488B0425[A00F0000]      	mov rax, qword [free_var_6]	; free var =
 31555 00017B49 803805                  	cmp byte [rax], T_undefined
 31556 00017B4C 0F8445080000            	je L_error_fvar_undefined
 31557 00017B52 803804                  	cmp byte [rax], T_closure
 31558 00017B55 0F85C0080000            	jne L_error_non_closure
 31559 00017B5B FF7001                  	push SOB_CLOSURE_ENV(rax)
 31560 00017B5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 31561 00017B61 483D[02000000]          	cmp rax, sob_boolean_false
 31562 00017B67 740F                    	je .L_if_else_083c
 31563 00017B69 48B8-                   	mov rax, L_constants + 3485
 31563 00017B6B [9D0D000000000000] 
 31564 00017B73 E9D2000000              	jmp .L_if_end_083c
 31565                                  .L_if_else_083c:
 31566                                  	; preparing a tail-call
 31567                                  	; preparing a non-tail-call
 31568                                  	; preparing a non-tail-call
 31569 00017B78 48B8-                   	mov rax, L_constants + 2270
 31569 00017B7A [DE08000000000000] 
 31570 00017B82 50                      	push rax
 31571 00017B83 488B4530                	mov rax, PARAM(2)	; param n
 31572 00017B87 50                      	push rax
 31573 00017B88 6A02                    	push 2	; arg count
 31574 00017B8A 488B0425[5C0F0000]      	mov rax, qword [free_var_2]	; free var -
 31575 00017B92 803805                  	cmp byte [rax], T_undefined
 31576 00017B95 0F84FC070000            	je L_error_fvar_undefined
 31577 00017B9B 803804                  	cmp byte [rax], T_closure
 31578 00017B9E 0F8577080000            	jne L_error_non_closure
 31579 00017BA4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31580 00017BA7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31581 00017BAA 50                      	push rax
 31582 00017BAB 488B4520                	mov rax, PARAM(0)	; param a
 31583 00017BAF 50                      	push rax
 31584 00017BB0 488B4528                	mov rax, PARAM(1)	; param b
 31585 00017BB4 50                      	push rax
 31586 00017BB5 6A03                    	push 3	; arg count
 31587 00017BB7 488B0425[AB150000]      	mov rax, qword [free_var_97]	; free var logarithm
 31588 00017BBF 803805                  	cmp byte [rax], T_undefined
 31589 00017BC2 0F84CF070000            	je L_error_fvar_undefined
 31590 00017BC8 803804                  	cmp byte [rax], T_closure
 31591 00017BCB 0F854A080000            	jne L_error_non_closure
 31592 00017BD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 31593 00017BD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 31594 00017BD7 50                      	push rax
 31595 00017BD8 48B8-                   	mov rax, L_constants + 3485
 31595 00017BDA [9D0D000000000000] 
 31596 00017BE2 50                      	push rax
 31597 00017BE3 6A02                    	push 2	; arg count
 31598 00017BE5 488B0425[6D0F0000]      	mov rax, qword [free_var_3]	; free var /
 31599 00017BED 803805                  	cmp byte [rax], T_undefined
 31600 00017BF0 0F84A1070000            	je L_error_fvar_undefined
 31601 00017BF6 803804                  	cmp byte [rax], T_closure
 31602 00017BF9 0F851C080000            	jne L_error_non_closure
 31603 00017BFF FF7001                  	push SOB_CLOSURE_ENV(rax)
 31604 00017C02 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31605 00017C05 FF7500                  	push qword[rbp]
 31606 00017C08 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31607 00017C0B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31608 00017C0F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31609 00017C13 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31610 00017C17 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31611 00017C1A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31612 00017C1D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31613 00017C22 4983C103                	add r9, 3 	 ;for getting to the params
 31614 00017C26 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31615 00017C2A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31616                                  .L_tc_recycle_frame_loop_0f52:
 31617 00017C2D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31618 00017C30 7410                    	je .L_tc_recycle_frame_done_0f52
 31619 00017C32 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31620 00017C35 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31621 00017C38 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31622 00017C3C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31623 00017C40 EBEB                    	jmp .L_tc_recycle_frame_loop_0f52
 31624                                  .L_tc_recycle_frame_done_0f52:
 31625 00017C42 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31626 00017C43 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31627 00017C47 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31628                                  .L_if_end_083c:
 31629                                  .L_if_end_083d:
 31630                                  .L_if_end_083e:
 31631 00017C4A C9                      	leave
 31632 00017C4B C22800                  	ret AND_KILL_FRAME(3)
 31633                                  .L_lambda_simple_end_0af3:	; new closure is in rax
 31634 00017C4E 48890425[AB150000]      	mov qword [free_var_97], rax
 31635 00017C56 48B8-                   	mov rax, sob_void
 31635 00017C58 [0000000000000000] 
 31636                                  
 31637 00017C60 4889C7                  	mov rdi, rax
 31638 00017C63 E8B10A0000              	call print_sexpr_if_not_void
 31639 00017C68 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31640 00017C6D E852080000              	call malloc
 31641 00017C72 50                      	push rax
 31642 00017C73 BF00000000              	mov rdi, 8 * 0	; new rib
 31643 00017C78 E847080000              	call malloc
 31644 00017C7D 50                      	push rax
 31645 00017C7E BF08000000              	mov rdi, 8 * 1	; extended env
 31646 00017C83 E83C080000              	call malloc
 31647 00017C88 488B7D10                	mov rdi, ENV
 31648 00017C8C BE00000000              	mov rsi, 0
 31649 00017C91 BA01000000              	mov rdx, 1
 31650                                  .L_lambda_simple_env_loop_0af4:	; ext_env[i + 1] <-- env[i]
 31651 00017C96 4883FE00                	cmp rsi, 0
 31652 00017C9A 7410                    	je .L_lambda_simple_env_end_0af4
 31653 00017C9C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31654 00017CA0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31655 00017CA4 48FFC6                  	inc rsi
 31656 00017CA7 48FFC2                  	inc rdx
 31657 00017CAA EBEA                    	jmp .L_lambda_simple_env_loop_0af4
 31658                                  .L_lambda_simple_env_end_0af4:
 31659 00017CAC 5B                      	pop rbx
 31660 00017CAD BE00000000              	mov rsi, 0
 31661                                  .L_lambda_simple_params_loop_0af4:	; copy params
 31662 00017CB2 4883FE00                	cmp rsi, 0
 31663 00017CB6 740E                    	je .L_lambda_simple_params_end_0af4
 31664 00017CB8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31665 00017CBD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31666 00017CC1 48FFC6                  	inc rsi
 31667 00017CC4 EBEC                    	jmp .L_lambda_simple_params_loop_0af4
 31668                                  .L_lambda_simple_params_end_0af4:
 31669 00017CC6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31670 00017CC9 4889C3                  	mov rbx, rax
 31671 00017CCC 58                      	pop rax
 31672 00017CCD C60004                  	mov byte [rax], T_closure
 31673 00017CD0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31674 00017CD4 48C74009[E17C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af4
 31675 00017CDC E98D000000              	jmp .L_lambda_simple_end_0af4
 31676                                  .L_lambda_simple_code_0af4:	; lambda-simple body
 31677 00017CE1 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31678 00017CE7 740B                    	je .L_lambda_simple_arity_check_ok_0af4
 31679 00017CE9 FF742410                	push qword [rsp + 8 * 2]
 31680 00017CED 6A00                    	push 0
 31681 00017CEF E989070000              	jmp L_error_incorrect_arity_simple
 31682                                  .L_lambda_simple_arity_check_ok_0af4:
 31683 00017CF4 C8000000                	enter 0, 0
 31684                                  	; preparing a tail-call
 31685 00017CF8 48B8-                   	mov rax, L_constants + 3510
 31685 00017CFA [B60D000000000000] 
 31686 00017D02 50                      	push rax
 31687 00017D03 6A01                    	push 1	; arg count
 31688 00017D05 488B0425[41190000]      	mov rax, qword [free_var_151]	; free var write-char
 31689 00017D0D 803805                  	cmp byte [rax], T_undefined
 31690 00017D10 0F8481060000            	je L_error_fvar_undefined
 31691 00017D16 803804                  	cmp byte [rax], T_closure
 31692 00017D19 0F85FC060000            	jne L_error_non_closure
 31693 00017D1F FF7001                  	push SOB_CLOSURE_ENV(rax)
 31694 00017D22 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31695 00017D25 FF7500                  	push qword[rbp]
 31696 00017D28 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31697 00017D2B 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31698 00017D2F 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31699 00017D33 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31700 00017D37 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31701 00017D3A 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31702 00017D3D 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31703 00017D42 4983C103                	add r9, 3 	 ;for getting to the params
 31704 00017D46 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31705 00017D4A 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31706                                  .L_tc_recycle_frame_loop_0f53:
 31707 00017D4D 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31708 00017D50 7410                    	je .L_tc_recycle_frame_done_0f53
 31709 00017D52 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31710 00017D55 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31711 00017D58 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31712 00017D5C 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31713 00017D60 EBEB                    	jmp .L_tc_recycle_frame_loop_0f53
 31714                                  .L_tc_recycle_frame_done_0f53:
 31715 00017D62 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31716 00017D63 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31717 00017D67 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31718 00017D6A C9                      	leave
 31719 00017D6B C21000                  	ret AND_KILL_FRAME(0)
 31720                                  .L_lambda_simple_end_0af4:	; new closure is in rax
 31721 00017D6E 48890425[33160000]      	mov qword [free_var_105], rax
 31722 00017D76 48B8-                   	mov rax, sob_void
 31722 00017D78 [0000000000000000] 
 31723                                  
 31724 00017D80 4889C7                  	mov rdi, rax
 31725 00017D83 E891090000              	call print_sexpr_if_not_void
 31726 00017D88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31727 00017D8D E832070000              	call malloc
 31728 00017D92 50                      	push rax
 31729 00017D93 BF00000000              	mov rdi, 8 * 0	; new rib
 31730 00017D98 E827070000              	call malloc
 31731 00017D9D 50                      	push rax
 31732 00017D9E BF08000000              	mov rdi, 8 * 1	; extended env
 31733 00017DA3 E81C070000              	call malloc
 31734 00017DA8 488B7D10                	mov rdi, ENV
 31735 00017DAC BE00000000              	mov rsi, 0
 31736 00017DB1 BA01000000              	mov rdx, 1
 31737                                  .L_lambda_simple_env_loop_0af5:	; ext_env[i + 1] <-- env[i]
 31738 00017DB6 4883FE00                	cmp rsi, 0
 31739 00017DBA 7410                    	je .L_lambda_simple_env_end_0af5
 31740 00017DBC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31741 00017DC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31742 00017DC4 48FFC6                  	inc rsi
 31743 00017DC7 48FFC2                  	inc rdx
 31744 00017DCA EBEA                    	jmp .L_lambda_simple_env_loop_0af5
 31745                                  .L_lambda_simple_env_end_0af5:
 31746 00017DCC 5B                      	pop rbx
 31747 00017DCD BE00000000              	mov rsi, 0
 31748                                  .L_lambda_simple_params_loop_0af5:	; copy params
 31749 00017DD2 4883FE00                	cmp rsi, 0
 31750 00017DD6 740E                    	je .L_lambda_simple_params_end_0af5
 31751 00017DD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31752 00017DDD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31753 00017DE1 48FFC6                  	inc rsi
 31754 00017DE4 EBEC                    	jmp .L_lambda_simple_params_loop_0af5
 31755                                  .L_lambda_simple_params_end_0af5:
 31756 00017DE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31757 00017DE9 4889C3                  	mov rbx, rax
 31758 00017DEC 58                      	pop rax
 31759 00017DED C60004                  	mov byte [rax], T_closure
 31760 00017DF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31761 00017DF4 48C74009[FE7D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af5
 31762 00017DFC EB25                    	jmp .L_lambda_simple_end_0af5
 31763                                  .L_lambda_simple_code_0af5:	; lambda-simple body
 31764 00017DFE 48837C241000            	cmp qword [rsp + 8 * 2], 0
 31765 00017E04 740B                    	je .L_lambda_simple_arity_check_ok_0af5
 31766 00017E06 FF742410                	push qword [rsp + 8 * 2]
 31767 00017E0A 6A00                    	push 0
 31768 00017E0C E96C060000              	jmp L_error_incorrect_arity_simple
 31769                                  .L_lambda_simple_arity_check_ok_0af5:
 31770 00017E11 C8000000                	enter 0, 0
 31771 00017E15 48B8-                   	mov rax, L_constants + 0
 31771 00017E17 [0000000000000000] 
 31772 00017E1F C9                      	leave
 31773 00017E20 C21000                  	ret AND_KILL_FRAME(0)
 31774                                  .L_lambda_simple_end_0af5:	; new closure is in rax
 31775 00017E23 48890425[30190000]      	mov qword [free_var_150], rax
 31776 00017E2B 48B8-                   	mov rax, sob_void
 31776 00017E2D [0000000000000000] 
 31777                                  
 31778 00017E35 4889C7                  	mov rdi, rax
 31779 00017E38 E8DC080000              	call print_sexpr_if_not_void
 31780                                  	; preparing a non-tail-call
 31781 00017E3D 48B8-                   	mov rax, L_constants + 3881
 31781 00017E3F [290F000000000000] 
 31782 00017E47 50                      	push rax
 31783 00017E48 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31784 00017E4D E872060000              	call malloc
 31785 00017E52 50                      	push rax
 31786 00017E53 BF00000000              	mov rdi, 8 * 0	; new rib
 31787 00017E58 E867060000              	call malloc
 31788 00017E5D 50                      	push rax
 31789 00017E5E BF08000000              	mov rdi, 8 * 1	; extended env
 31790 00017E63 E85C060000              	call malloc
 31791 00017E68 488B7D10                	mov rdi, ENV
 31792 00017E6C BE00000000              	mov rsi, 0
 31793 00017E71 BA01000000              	mov rdx, 1
 31794                                  .L_lambda_simple_env_loop_0af6:	; ext_env[i + 1] <-- env[i]
 31795 00017E76 4883FE00                	cmp rsi, 0
 31796 00017E7A 7410                    	je .L_lambda_simple_env_end_0af6
 31797 00017E7C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31798 00017E80 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31799 00017E84 48FFC6                  	inc rsi
 31800 00017E87 48FFC2                  	inc rdx
 31801 00017E8A EBEA                    	jmp .L_lambda_simple_env_loop_0af6
 31802                                  .L_lambda_simple_env_end_0af6:
 31803 00017E8C 5B                      	pop rbx
 31804 00017E8D BE00000000              	mov rsi, 0
 31805                                  .L_lambda_simple_params_loop_0af6:	; copy params
 31806 00017E92 4883FE00                	cmp rsi, 0
 31807 00017E96 740E                    	je .L_lambda_simple_params_end_0af6
 31808 00017E98 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31809 00017E9D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31810 00017EA1 48FFC6                  	inc rsi
 31811 00017EA4 EBEC                    	jmp .L_lambda_simple_params_loop_0af6
 31812                                  .L_lambda_simple_params_end_0af6:
 31813 00017EA6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31814 00017EA9 4889C3                  	mov rbx, rax
 31815 00017EAC 58                      	pop rax
 31816 00017EAD C60004                  	mov byte [rax], T_closure
 31817 00017EB0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31818 00017EB4 48C74009[C17E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af6
 31819 00017EBC E980010000              	jmp .L_lambda_simple_end_0af6
 31820                                  .L_lambda_simple_code_0af6:	; lambda-simple body
 31821 00017EC1 48837C24100A            	cmp qword [rsp + 8 * 2], 10
 31822 00017EC7 740B                    	je .L_lambda_simple_arity_check_ok_0af6
 31823 00017EC9 FF742410                	push qword [rsp + 8 * 2]
 31824 00017ECD 6A0A                    	push 10
 31825 00017ECF E9A9050000              	jmp L_error_incorrect_arity_simple
 31826                                  .L_lambda_simple_arity_check_ok_0af6:
 31827 00017ED4 C8000000                	enter 0, 0
 31828 00017ED8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31829 00017EDD E8E2050000              	call malloc
 31830 00017EE2 50                      	push rax
 31831 00017EE3 BF50000000              	mov rdi, 8 * 10	; new rib
 31832 00017EE8 E8D7050000              	call malloc
 31833 00017EED 50                      	push rax
 31834 00017EEE BF10000000              	mov rdi, 8 * 2	; extended env
 31835 00017EF3 E8CC050000              	call malloc
 31836 00017EF8 488B7D10                	mov rdi, ENV
 31837 00017EFC BE00000000              	mov rsi, 0
 31838 00017F01 BA01000000              	mov rdx, 1
 31839                                  .L_lambda_simple_env_loop_0af7:	; ext_env[i + 1] <-- env[i]
 31840 00017F06 4883FE01                	cmp rsi, 1
 31841 00017F0A 7410                    	je .L_lambda_simple_env_end_0af7
 31842 00017F0C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31843 00017F10 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31844 00017F14 48FFC6                  	inc rsi
 31845 00017F17 48FFC2                  	inc rdx
 31846 00017F1A EBEA                    	jmp .L_lambda_simple_env_loop_0af7
 31847                                  .L_lambda_simple_env_end_0af7:
 31848 00017F1C 5B                      	pop rbx
 31849 00017F1D BE00000000              	mov rsi, 0
 31850                                  .L_lambda_simple_params_loop_0af7:	; copy params
 31851 00017F22 4883FE0A                	cmp rsi, 10
 31852 00017F26 740E                    	je .L_lambda_simple_params_end_0af7
 31853 00017F28 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31854 00017F2D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31855 00017F31 48FFC6                  	inc rsi
 31856 00017F34 EBEC                    	jmp .L_lambda_simple_params_loop_0af7
 31857                                  .L_lambda_simple_params_end_0af7:
 31858 00017F36 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31859 00017F39 4889C3                  	mov rbx, rax
 31860 00017F3C 58                      	pop rax
 31861 00017F3D C60004                  	mov byte [rax], T_closure
 31862 00017F40 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31863 00017F44 48C74009[517F0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af7
 31864 00017F4C E9EC000000              	jmp .L_lambda_simple_end_0af7
 31865                                  .L_lambda_simple_code_0af7:	; lambda-simple body
 31866 00017F51 48837C241001            	cmp qword [rsp + 8 * 2], 1
 31867 00017F57 740B                    	je .L_lambda_simple_arity_check_ok_0af7
 31868 00017F59 FF742410                	push qword [rsp + 8 * 2]
 31869 00017F5D 6A01                    	push 1
 31870 00017F5F E919050000              	jmp L_error_incorrect_arity_simple
 31871                                  .L_lambda_simple_arity_check_ok_0af7:
 31872 00017F64 C8000000                	enter 0, 0
 31873                                  	; preparing a tail-call
 31874 00017F68 488B4510                	mov rax, ENV
 31875 00017F6C 488B00                  	mov rax, qword [rax + 8 * 0]
 31876 00017F6F 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var x1
 31877 00017F72 50                      	push rax
 31878 00017F73 488B4510                	mov rax, ENV
 31879 00017F77 488B00                  	mov rax, qword [rax + 8 * 0]
 31880 00017F7A 488B4048                	mov rax, qword [rax + 8 * 9]	; bound var x10
 31881 00017F7E 50                      	push rax
 31882 00017F7F 488B4510                	mov rax, ENV
 31883 00017F83 488B00                  	mov rax, qword [rax + 8 * 0]
 31884 00017F86 488B4040                	mov rax, qword [rax + 8 * 8]	; bound var x9
 31885 00017F8A 50                      	push rax
 31886 00017F8B 488B4510                	mov rax, ENV
 31887 00017F8F 488B00                  	mov rax, qword [rax + 8 * 0]
 31888 00017F92 488B4038                	mov rax, qword [rax + 8 * 7]	; bound var x8
 31889 00017F96 50                      	push rax
 31890 00017F97 488B4510                	mov rax, ENV
 31891 00017F9B 488B00                  	mov rax, qword [rax + 8 * 0]
 31892 00017F9E 488B4030                	mov rax, qword [rax + 8 * 6]	; bound var x7
 31893 00017FA2 50                      	push rax
 31894 00017FA3 488B4510                	mov rax, ENV
 31895 00017FA7 488B00                  	mov rax, qword [rax + 8 * 0]
 31896 00017FAA 488B4028                	mov rax, qword [rax + 8 * 5]	; bound var x6
 31897 00017FAE 50                      	push rax
 31898 00017FAF 488B4510                	mov rax, ENV
 31899 00017FB3 488B00                  	mov rax, qword [rax + 8 * 0]
 31900 00017FB6 488B4020                	mov rax, qword [rax + 8 * 4]	; bound var x5
 31901 00017FBA 50                      	push rax
 31902 00017FBB 488B4510                	mov rax, ENV
 31903 00017FBF 488B00                  	mov rax, qword [rax + 8 * 0]
 31904 00017FC2 488B4018                	mov rax, qword [rax + 8 * 3]	; bound var x4
 31905 00017FC6 50                      	push rax
 31906 00017FC7 488B4510                	mov rax, ENV
 31907 00017FCB 488B00                  	mov rax, qword [rax + 8 * 0]
 31908 00017FCE 488B4010                	mov rax, qword [rax + 8 * 2]	; bound var x3
 31909 00017FD2 50                      	push rax
 31910 00017FD3 488B4510                	mov rax, ENV
 31911 00017FD7 488B00                  	mov rax, qword [rax + 8 * 0]
 31912 00017FDA 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var x2
 31913 00017FDE 50                      	push rax
 31914 00017FDF 6A0A                    	push 10	; arg count
 31915 00017FE1 488B4520                	mov rax, PARAM(0)	; param z
 31916 00017FE5 803804                  	cmp byte [rax], T_closure
 31917 00017FE8 0F852D040000            	jne L_error_non_closure
 31918 00017FEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 31919 00017FF1 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 31920 00017FF4 FF7500                  	push qword[rbp]
 31921 00017FF7 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 31922 00017FFA 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 31923 00017FFE 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 31924 00018002 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 31925 00018006 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 31926 00018009 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 31927 0001800C 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 31928 00018011 4983C103                	add r9, 3 	 ;for getting to the params
 31929 00018015 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 31930 00018019 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 31931                                  .L_tc_recycle_frame_loop_0f54:
 31932 0001801C 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 31933 0001801F 7410                    	je .L_tc_recycle_frame_done_0f54
 31934 00018021 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 31935 00018024 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 31936 00018027 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 31937 0001802B 4983E808                	sub r8, 8	 ;move the top of the stack one down
 31938 0001802F EBEB                    	jmp .L_tc_recycle_frame_loop_0f54
 31939                                  .L_tc_recycle_frame_done_0f54:
 31940 00018031 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 31941 00018032 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 31942 00018036 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 31943 00018039 C9                      	leave
 31944 0001803A C21800                  	ret AND_KILL_FRAME(1)
 31945                                  .L_lambda_simple_end_0af7:	; new closure is in rax
 31946 0001803D C9                      	leave
 31947 0001803E C26000                  	ret AND_KILL_FRAME(10)
 31948                                  .L_lambda_simple_end_0af6:	; new closure is in rax
 31949 00018041 50                      	push rax
 31950 00018042 6A02                    	push 2	; arg count
 31951 00018044 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31952 00018049 E876040000              	call malloc
 31953 0001804E 50                      	push rax
 31954 0001804F BF00000000              	mov rdi, 8 * 0	; new rib
 31955 00018054 E86B040000              	call malloc
 31956 00018059 50                      	push rax
 31957 0001805A BF08000000              	mov rdi, 8 * 1	; extended env
 31958 0001805F E860040000              	call malloc
 31959 00018064 488B7D10                	mov rdi, ENV
 31960 00018068 BE00000000              	mov rsi, 0
 31961 0001806D BA01000000              	mov rdx, 1
 31962                                  .L_lambda_simple_env_loop_0af8:	; ext_env[i + 1] <-- env[i]
 31963 00018072 4883FE00                	cmp rsi, 0
 31964 00018076 7410                    	je .L_lambda_simple_env_end_0af8
 31965 00018078 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 31966 0001807C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 31967 00018080 48FFC6                  	inc rsi
 31968 00018083 48FFC2                  	inc rdx
 31969 00018086 EBEA                    	jmp .L_lambda_simple_env_loop_0af8
 31970                                  .L_lambda_simple_env_end_0af8:
 31971 00018088 5B                      	pop rbx
 31972 00018089 BE00000000              	mov rsi, 0
 31973                                  .L_lambda_simple_params_loop_0af8:	; copy params
 31974 0001808E 4883FE00                	cmp rsi, 0
 31975 00018092 740E                    	je .L_lambda_simple_params_end_0af8
 31976 00018094 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 31977 00018099 488914F3                	mov qword [rbx + 8 * rsi], rdx
 31978 0001809D 48FFC6                  	inc rsi
 31979 000180A0 EBEC                    	jmp .L_lambda_simple_params_loop_0af8
 31980                                  .L_lambda_simple_params_end_0af8:
 31981 000180A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 31982 000180A5 4889C3                  	mov rbx, rax
 31983 000180A8 58                      	pop rax
 31984 000180A9 C60004                  	mov byte [rax], T_closure
 31985 000180AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 31986 000180B0 48C74009[BD800100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af8
 31987 000180B8 E97B020000              	jmp .L_lambda_simple_end_0af8
 31988                                  .L_lambda_simple_code_0af8:	; lambda-simple body
 31989 000180BD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 31990 000180C3 740B                    	je .L_lambda_simple_arity_check_ok_0af8
 31991 000180C5 FF742410                	push qword [rsp + 8 * 2]
 31992 000180C9 6A02                    	push 2
 31993 000180CB E9AD030000              	jmp L_error_incorrect_arity_simple
 31994                                  .L_lambda_simple_arity_check_ok_0af8:
 31995 000180D0 C8000000                	enter 0, 0
 31996 000180D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 31997 000180D9 E8E6030000              	call malloc
 31998 000180DE 50                      	push rax
 31999 000180DF BF10000000              	mov rdi, 8 * 2	; new rib
 32000 000180E4 E8DB030000              	call malloc
 32001 000180E9 50                      	push rax
 32002 000180EA BF10000000              	mov rdi, 8 * 2	; extended env
 32003 000180EF E8D0030000              	call malloc
 32004 000180F4 488B7D10                	mov rdi, ENV
 32005 000180F8 BE00000000              	mov rsi, 0
 32006 000180FD BA01000000              	mov rdx, 1
 32007                                  .L_lambda_simple_env_loop_0af9:	; ext_env[i + 1] <-- env[i]
 32008 00018102 4883FE01                	cmp rsi, 1
 32009 00018106 7410                    	je .L_lambda_simple_env_end_0af9
 32010 00018108 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 32011 0001810C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 32012 00018110 48FFC6                  	inc rsi
 32013 00018113 48FFC2                  	inc rdx
 32014 00018116 EBEA                    	jmp .L_lambda_simple_env_loop_0af9
 32015                                  .L_lambda_simple_env_end_0af9:
 32016 00018118 5B                      	pop rbx
 32017 00018119 BE00000000              	mov rsi, 0
 32018                                  .L_lambda_simple_params_loop_0af9:	; copy params
 32019 0001811E 4883FE02                	cmp rsi, 2
 32020 00018122 740E                    	je .L_lambda_simple_params_end_0af9
 32021 00018124 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 32022 00018129 488914F3                	mov qword [rbx + 8 * rsi], rdx
 32023 0001812D 48FFC6                  	inc rsi
 32024 00018130 EBEC                    	jmp .L_lambda_simple_params_loop_0af9
 32025                                  .L_lambda_simple_params_end_0af9:
 32026 00018132 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 32027 00018135 4889C3                  	mov rbx, rax
 32028 00018138 58                      	pop rax
 32029 00018139 C60004                  	mov byte [rax], T_closure
 32030 0001813C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 32031 00018140 48C74009[4D810100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0af9
 32032 00018148 E9E7010000              	jmp .L_lambda_simple_end_0af9
 32033                                  .L_lambda_simple_code_0af9:	; lambda-simple body
 32034 0001814D 48837C241000            	cmp qword [rsp + 8 * 2], 0
 32035 00018153 740B                    	je .L_lambda_simple_arity_check_ok_0af9
 32036 00018155 FF742410                	push qword [rsp + 8 * 2]
 32037 00018159 6A00                    	push 0
 32038 0001815B E91D030000              	jmp L_error_incorrect_arity_simple
 32039                                  .L_lambda_simple_arity_check_ok_0af9:
 32040 00018160 C8000000                	enter 0, 0
 32041                                  	; preparing a tail-call
 32042 00018164 488B4510                	mov rax, ENV
 32043 00018168 488B00                  	mov rax, qword [rax + 8 * 0]
 32044 0001816B 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
 32045 0001816F 50                      	push rax
 32046                                  	; preparing a non-tail-call
 32047 00018170 488B0425[56150000]      	mov rax, qword [free_var_92]	; free var list
 32048 00018178 803805                  	cmp byte [rax], T_undefined
 32049 0001817B 0F8416020000            	je L_error_fvar_undefined
 32050 00018181 50                      	push rax
 32051 00018182 6A01                    	push 1	; arg count
 32052                                  	; preparing a non-tail-call
 32053 00018184 488B4510                	mov rax, ENV
 32054 00018188 488B00                  	mov rax, qword [rax + 8 * 0]
 32055 0001818B 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32056 0001818E 50                      	push rax
 32057 0001818F 6A01                    	push 1	; arg count
 32058                                  	; preparing a non-tail-call
 32059 00018191 488B4510                	mov rax, ENV
 32060 00018195 488B00                  	mov rax, qword [rax + 8 * 0]
 32061 00018198 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32062 0001819B 50                      	push rax
 32063 0001819C 6A01                    	push 1	; arg count
 32064                                  	; preparing a non-tail-call
 32065 0001819E 488B4510                	mov rax, ENV
 32066 000181A2 488B00                  	mov rax, qword [rax + 8 * 0]
 32067 000181A5 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32068 000181A8 50                      	push rax
 32069 000181A9 6A01                    	push 1	; arg count
 32070                                  	; preparing a non-tail-call
 32071 000181AB 488B4510                	mov rax, ENV
 32072 000181AF 488B00                  	mov rax, qword [rax + 8 * 0]
 32073 000181B2 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32074 000181B5 50                      	push rax
 32075 000181B6 6A01                    	push 1	; arg count
 32076                                  	; preparing a non-tail-call
 32077 000181B8 488B4510                	mov rax, ENV
 32078 000181BC 488B00                  	mov rax, qword [rax + 8 * 0]
 32079 000181BF 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32080 000181C2 50                      	push rax
 32081 000181C3 6A01                    	push 1	; arg count
 32082                                  	; preparing a non-tail-call
 32083 000181C5 488B4510                	mov rax, ENV
 32084 000181C9 488B00                  	mov rax, qword [rax + 8 * 0]
 32085 000181CC 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32086 000181CF 50                      	push rax
 32087 000181D0 6A01                    	push 1	; arg count
 32088                                  	; preparing a non-tail-call
 32089 000181D2 488B4510                	mov rax, ENV
 32090 000181D6 488B00                  	mov rax, qword [rax + 8 * 0]
 32091 000181D9 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32092 000181DC 50                      	push rax
 32093 000181DD 6A01                    	push 1	; arg count
 32094                                  	; preparing a non-tail-call
 32095 000181DF 488B4510                	mov rax, ENV
 32096 000181E3 488B00                  	mov rax, qword [rax + 8 * 0]
 32097 000181E6 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32098 000181E9 50                      	push rax
 32099 000181EA 6A01                    	push 1	; arg count
 32100                                  	; preparing a non-tail-call
 32101 000181EC 488B4510                	mov rax, ENV
 32102 000181F0 488B00                  	mov rax, qword [rax + 8 * 0]
 32103 000181F3 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32104 000181F6 50                      	push rax
 32105 000181F7 6A01                    	push 1	; arg count
 32106                                  	; preparing a non-tail-call
 32107 000181F9 488B4510                	mov rax, ENV
 32108 000181FD 488B00                  	mov rax, qword [rax + 8 * 0]
 32109 00018200 488B4008                	mov rax, qword [rax + 8 * 1]	; bound var s
 32110 00018204 50                      	push rax
 32111 00018205 488B4510                	mov rax, ENV
 32112 00018209 488B00                  	mov rax, qword [rax + 8 * 0]
 32113 0001820C 488B00                  	mov rax, qword [rax + 8 * 0]	; bound var p1
 32114 0001820F 50                      	push rax
 32115 00018210 6A02                    	push 2	; arg count
 32116 00018212 488B0425[6B110000]      	mov rax, qword [free_var_33]	; free var apply
 32117 0001821A 803805                  	cmp byte [rax], T_undefined
 32118 0001821D 0F8474010000            	je L_error_fvar_undefined
 32119 00018223 803804                  	cmp byte [rax], T_closure
 32120 00018226 0F85EF010000            	jne L_error_non_closure
 32121 0001822C FF7001                  	push SOB_CLOSURE_ENV(rax)
 32122 0001822F FF5009                  	call SOB_CLOSURE_CODE(rax)
 32123 00018232 803804                  	cmp byte [rax], T_closure
 32124 00018235 0F85E0010000            	jne L_error_non_closure
 32125 0001823B FF7001                  	push SOB_CLOSURE_ENV(rax)
 32126 0001823E FF5009                  	call SOB_CLOSURE_CODE(rax)
 32127 00018241 803804                  	cmp byte [rax], T_closure
 32128 00018244 0F85D1010000            	jne L_error_non_closure
 32129 0001824A FF7001                  	push SOB_CLOSURE_ENV(rax)
 32130 0001824D FF5009                  	call SOB_CLOSURE_CODE(rax)
 32131 00018250 803804                  	cmp byte [rax], T_closure
 32132 00018253 0F85C2010000            	jne L_error_non_closure
 32133 00018259 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32134 0001825C FF5009                  	call SOB_CLOSURE_CODE(rax)
 32135 0001825F 803804                  	cmp byte [rax], T_closure
 32136 00018262 0F85B3010000            	jne L_error_non_closure
 32137 00018268 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32138 0001826B FF5009                  	call SOB_CLOSURE_CODE(rax)
 32139 0001826E 803804                  	cmp byte [rax], T_closure
 32140 00018271 0F85A4010000            	jne L_error_non_closure
 32141 00018277 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32142 0001827A FF5009                  	call SOB_CLOSURE_CODE(rax)
 32143 0001827D 803804                  	cmp byte [rax], T_closure
 32144 00018280 0F8595010000            	jne L_error_non_closure
 32145 00018286 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32146 00018289 FF5009                  	call SOB_CLOSURE_CODE(rax)
 32147 0001828C 803804                  	cmp byte [rax], T_closure
 32148 0001828F 0F8586010000            	jne L_error_non_closure
 32149 00018295 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32150 00018298 FF5009                  	call SOB_CLOSURE_CODE(rax)
 32151 0001829B 803804                  	cmp byte [rax], T_closure
 32152 0001829E 0F8577010000            	jne L_error_non_closure
 32153 000182A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32154 000182A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 32155 000182AA 803804                  	cmp byte [rax], T_closure
 32156 000182AD 0F8568010000            	jne L_error_non_closure
 32157 000182B3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32158 000182B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 32159 000182B9 803804                  	cmp byte [rax], T_closure
 32160 000182BC 0F8559010000            	jne L_error_non_closure
 32161 000182C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32162 000182C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 32163 000182C8 50                      	push rax
 32164 000182C9 6A02                    	push 2	; arg count
 32165 000182CB 488B0425[9B140000]      	mov rax, qword [free_var_81]	; free var equal?
 32166 000182D3 803805                  	cmp byte [rax], T_undefined
 32167 000182D6 0F84BB000000            	je L_error_fvar_undefined
 32168 000182DC 803804                  	cmp byte [rax], T_closure
 32169 000182DF 0F8536010000            	jne L_error_non_closure
 32170 000182E5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32171 000182E8 FF7508                  	push qword[rbp+ 8 * 1]	 ;old ret address of f
 32172 000182EB FF7500                  	push qword[rbp]
 32173 000182EE 4989EF                  	mov r15, rbp	 ;will hold the rbp we need to overwrite
 32174 000182F1 4D8B7718                 	mov r14, qword[r15 + 3*8]	 ;r14 holding the param count of h
 32175 000182F5 4983C603                	add r14, 3 	 ;adding so we will get to the params 
 32176 000182F9 49C1E603                	shl r14, 3 	 ;multiplie r14 by 8
 32177 000182FD 4D01F7                  	add r15, r14 	 ;now r15 points to the top of the rbp, An-1 
 32178 00018300 4989E0                  	mov r8, rsp 	; r8 now holds the lower of the stack
 32179 00018303 4C8B4C2418              	mov r9, qword[rsp + 3*8] 	 ;r9 is holding the arg count of h
 32180 00018308 4983C103                	add r9, 3 	 ;for getting to the params
 32181 0001830C 49C1E103                	shl r9, 3 	 ;multiplie by 8 
 32182 00018310 4D01C8                  	add r8, r9 	 ;now r8 is holding the top of rsp
 32183                                  .L_tc_recycle_frame_loop_0f55:
 32184 00018313 4939E0                  	cmp r8,rsp	 ;if we reached the end of the stack
 32185 00018316 7410                    	je .L_tc_recycle_frame_done_0f55
 32186 00018318 498B18                  	mov rbx, qword[r8]	 ;rbx holds the value of the stack
 32187 0001831B 49891F                  	mov qword[r15], rbx	 ;move the value to the top of the stack
 32188 0001831E 4983EF08                	sub r15, 8	 ;move the top of the stack one down
 32189 00018322 4983E808                	sub r8, 8	 ;move the top of the stack one down
 32190 00018326 EBEB                    	jmp .L_tc_recycle_frame_loop_0f55
 32191                                  .L_tc_recycle_frame_done_0f55:
 32192 00018328 5D                      	pop rbp	 ;rbp now holding the old rbp of f
 32193 00018329 498D6708                	lea rsp, [r15 + 8 *1]	 ;move the old rbp of f to the top of the stack
 32194 0001832D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 32195 00018330 C9                      	leave
 32196 00018331 C21000                  	ret AND_KILL_FRAME(0)
 32197                                  .L_lambda_simple_end_0af9:	; new closure is in rax
 32198 00018334 C9                      	leave
 32199 00018335 C22000                  	ret AND_KILL_FRAME(2)
 32200                                  .L_lambda_simple_end_0af8:	; new closure is in rax
 32201 00018338 803804                  	cmp byte [rax], T_closure
 32202 0001833B 0F85DA000000            	jne L_error_non_closure
 32203 00018341 FF7001                  	push SOB_CLOSURE_ENV(rax)
 32204 00018344 FF5009                  	call SOB_CLOSURE_CODE(rax)
 32205 00018347 48890425[75180000]      	mov qword [free_var_139], rax
 32206 0001834F 48B8-                   	mov rax, sob_void
 32206 00018351 [0000000000000000] 
 32207                                  Lend:
 32208 00018359 4889C7                  	mov rdi, rax
 32209 0001835C E8B8030000              	call print_sexpr_if_not_void
 32210                                  
 32211 00018361 48BF-                           mov rdi, fmt_memory_usage
 32211 00018363 [FB19000000000000] 
 32212 0001836B 488B3425[811A0000]              mov rsi, qword [top_of_memory]
 32213 00018373 4881EE[00000000]                sub rsi, memory
 32214 0001837A B800000000                      mov rax, 0
 32215                                          ENTER
    44 0001837F C8000000            <1>  enter 0, 0
    45 00018383 4883E4F0            <1>  and rsp, ~15
 32216 00018387 E8(00000000)                    call printf
 32217                                          LEAVE
    49 0001838C C9                  <1>  leave
 32218 0001838D B800000000                      mov rax, 0
 32219 00018392 E8(00000000)                    call exit
 32220                                  
 32221                                  L_error_fvar_undefined:
 32222 00018397 50                              push rax
 32223 00018398 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
 32224 000183A0 48BE-                           mov rsi, fmt_undefined_free_var_1
 32224 000183A2 [6319000000000000] 
 32225 000183AA B800000000                      mov rax, 0
 32226                                          ENTER
    44 000183AF C8000000            <1>  enter 0, 0
    45 000183B3 4883E4F0            <1>  and rsp, ~15
 32227 000183B7 E8(00000000)                    call fprintf
 32228                                          LEAVE
    49 000183BC C9                  <1>  leave
 32229 000183BD 58                              pop rax
 32230 000183BE 488B4001                        mov rax, qword [rax + 1] ; string
 32231 000183C2 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 32232 000183C6 BE01000000                      mov rsi, 1               ; sizeof(char)
 32233 000183CB 488B5001                        mov rdx, qword [rax + 1] ; string-length
 32234 000183CF 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
 32235 000183D7 B800000000                      mov rax, 0
 32236                                          ENTER
    44 000183DC C8000000            <1>  enter 0, 0
    45 000183E0 4883E4F0            <1>  and rsp, ~15
 32237 000183E4 E8(00000000)                    call fwrite
 32238                                          LEAVE
    49 000183E9 C9                  <1>  leave
 32239 000183EA 488B3C25[00000000]              mov rdi, [stderr]       ; destination
 32240 000183F2 48BE-                           mov rsi, fmt_undefined_free_var_2
 32240 000183F4 [7A19000000000000] 
 32241 000183FC B800000000                      mov rax, 0
 32242                                          ENTER
    44 00018401 C8000000            <1>  enter 0, 0
    45 00018405 4883E4F0            <1>  and rsp, ~15
 32243 00018409 E8(00000000)                    call fprintf
 32244                                          LEAVE
    49 0001840E C9                  <1>  leave
 32245 0001840F 48C7C0F6FFFFFF                  mov rax, -10
 32246 00018416 E8(00000000)                    call exit
 32247                                  
 32248                                  L_error_non_closure:
 32249 0001841B 488B3C25[00000000]              mov rdi, qword [stderr]
 32250 00018423 48BE-                           mov rsi, fmt_non_closure
 32250 00018425 [311A000000000000] 
 32251 0001842D B800000000                      mov rax, 0
 32252                                          ENTER
    44 00018432 C8000000            <1>  enter 0, 0
    45 00018436 4883E4F0            <1>  and rsp, ~15
 32253 0001843A E8(00000000)                    call fprintf
 32254                                          LEAVE
    49 0001843F C9                  <1>  leave
 32255 00018440 48C7C0FEFFFFFF                  mov rax, -2
 32256 00018447 E8(00000000)                    call exit
 32257                                  
 32258                                  L_error_improper_list:
 32259 0001844C 488B3C25[00000000]      	mov rdi, qword [stderr]
 32260 00018454 48BE-                   	mov rsi, fmt_error_improper_list
 32260 00018456 [591A000000000000] 
 32261 0001845E B800000000              	mov rax, 0
 32262                                          ENTER
    44 00018463 C8000000            <1>  enter 0, 0
    45 00018467 4883E4F0            <1>  and rsp, ~15
 32263 0001846B E8(00000000)            	call fprintf
 32264                                          LEAVE
    49 00018470 C9                  <1>  leave
 32265 00018471 48C7C0F9FFFFFF          	mov rax, -7
 32266 00018478 E8(00000000)            	call exit
 32267                                  
 32268                                  L_error_incorrect_arity_simple:
 32269 0001847D 488B3C25[00000000]              mov rdi, qword [stderr]
 32270 00018485 48BE-                           mov rsi, fmt_incorrect_arity_simple
 32270 00018487 [9C19000000000000] 
 32271 0001848F EB12                            jmp L_error_incorrect_arity_common
 32272                                  L_error_incorrect_arity_opt:
 32273 00018491 488B3C25[00000000]              mov rdi, qword [stderr]
 32274 00018499 48BE-                           mov rsi, fmt_incorrect_arity_opt
 32274 0001849B [C719000000000000] 
 32275                                  L_error_incorrect_arity_common:
 32276 000184A3 5A                              pop rdx
 32277 000184A4 59                              pop rcx
 32278 000184A5 B800000000                      mov rax, 0
 32279                                          ENTER
    44 000184AA C8000000            <1>  enter 0, 0
    45 000184AE 4883E4F0            <1>  and rsp, ~15
 32280 000184B2 E8(00000000)                    call fprintf
 32281                                          LEAVE
    49 000184B7 C9                  <1>  leave
 32282 000184B8 48C7C0FAFFFFFF                  mov rax, -6
 32283 000184BF E8(00000000)                    call exit
 32284                                  
 32285                                  section .data
 32286                                  fmt_undefined_free_var_1:
 32287 00001963 212121205468652066-             db `!!! The free variable \0`
 32287 0000196C 726565207661726961-
 32287 00001975 626C652000         
 32288                                  fmt_undefined_free_var_2:
 32289 0000197A 207761732075736564-             db ` was used before it was defined.\n\0`
 32289 00001983 206265666F72652069-
 32289 0000198C 742077617320646566-
 32289 00001995 696E65642E0A00     
 32290                                  fmt_incorrect_arity_simple:
 32291 0000199C 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 32291 000019A5 74656420256C642061-
 32291 000019AE 7267756D656E74732C-
 32291 000019B7 206275742067697665-
 32291 000019C0 6E20256C640A00     
 32292                                  fmt_incorrect_arity_opt:
 32293 000019C7 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 32293 000019D0 746564206174206C65-
 32293 000019D9 61737420256C642061-
 32293 000019E2 7267756D656E74732C-
 32293 000019EB 206275742067697665-
 32293 000019F4 6E20256C640A00     
 32294                                  fmt_memory_usage:
 32295 000019FB 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 32295 00001A04 20256C642062797465-
 32295 00001A0D 73206F662064796E61-
 32295 00001A16 6D6963616C6C792D61-
 32295 00001A1F 6C6C6F636174656420-
 32295 00001A28 6D656D6F72790A0A00 
 32296                                  fmt_non_closure:
 32297 00001A31 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 32297 00001A3A 7074696E6720746F20-
 32297 00001A43 6170706C792061206E-
 32297 00001A4C 6F6E2D636C6F737572-
 32297 00001A55 65210A00           
 32298                                  fmt_error_improper_list:
 32299 00001A59 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 32299 00001A62 7267756D656E742069-
 32299 00001A6B 73206E6F7420612070-
 32299 00001A74 726F706572206C6973-
 32299 00001A7D 74210A00           
 32300                                  
 32301                                  section .bss
 32302                                  memory:
 32303 00000000 <res 40000000h>         	resb gbytes(1)
 32304                                  
 32305                                  section .data
 32306                                  top_of_memory:
 32307 00001A81 [0000000000000000]              dq memory
 32308                                  
 32309                                  section .text
 32310                                  malloc:
 32311 000184C4 488B0425[811A0000]              mov rax, qword [top_of_memory]
 32312 000184CC 48013C25[811A0000]              add qword [top_of_memory], rdi
 32313 000184D4 C3                              ret
 32314                                  
 32315                                  L_code_ptr_return:
 32316 000184D5 48837C241002            	cmp qword [rsp + 8*2], 2
 32317 000184DB 0F85D21C0000            	jne L_error_arg_count_2
 32318 000184E1 488B4C2418              	mov rcx, qword [rsp + 8*3]
 32319                                  	assert_integer(rcx)
    53 000184E6 803911              <1>  cmp byte [%1], %2
    54 000184E9 0F85631D0000        <1>  jne L_error_incorrect_type
 32320 000184EF 488B4901                	mov rcx, qword [rcx + 1]
 32321 000184F3 4883F900                	cmp rcx, 0
 32322 000184F7 0F8CEA1B0000            	jl L_error_integer_range
 32323 000184FD 488B442420              	mov rax, qword [rsp + 8*4]
 32324                                  .L0:
 32325 00018502 4883F900                        cmp rcx, 0
 32326 00018506 7409                            je .L1
 32327 00018508 488B6D00                	mov rbp, qword [rbp]
 32328 0001850C 48FFC9                  	dec rcx
 32329 0001850F 7FF1                    	jg .L0
 32330                                  .L1:
 32331 00018511 4889EC                  	mov rsp, rbp
 32332 00018514 5D                      	pop rbp
 32333 00018515 5B                              pop rbx
 32334 00018516 488B4C2408                      mov rcx, qword [rsp + 8*1]
 32335 0001851B 488D64CC10                      lea rsp, [rsp + 8*rcx + 8*2]
 32336 00018520 FFE3                    	jmp rbx
 32337                                  
 32338                                  L_code_ptr_make_list:
 32339 00018522 C8000000                	enter 0, 0
 32340 00018526 48837D1801                      cmp COUNT, 1
 32341 0001852B 740C                            je .L0
 32342 0001852D 48837D1802                      cmp COUNT, 2
 32343 00018532 7411                            je .L1
 32344 00018534 E9AF1C0000                      jmp L_error_arg_count_12
 32345                                  .L0:
 32346 00018539 49B9-                           mov r9, sob_void
 32346 0001853B [0000000000000000] 
 32347 00018543 EB04                            jmp .L2
 32348                                  .L1:
 32349 00018545 4C8B4D28                        mov r9, PARAM(1)
 32350                                  .L2:
 32351 00018549 488B4D20                        mov rcx, PARAM(0)
 32352                                          assert_integer(rcx)
    53 0001854D 803911              <1>  cmp byte [%1], %2
    54 00018550 0F85FC1C0000        <1>  jne L_error_incorrect_type
 32353 00018556 488B4901                        mov rcx, qword [rcx + 1]
 32354 0001855A 4883F900                        cmp rcx, 0
 32355 0001855E 0F8CB41B0000                    jl L_error_arg_negative
 32356 00018564 49B8-                           mov r8, sob_nil
 32356 00018566 [0100000000000000] 
 32357                                  .L3:
 32358 0001856E 4883F900                        cmp rcx, 0
 32359 00018572 7E1D                            jle .L4
 32360 00018574 BF11000000                      mov rdi, 1 + 8 + 8
 32361 00018579 E846FFFFFF                      call malloc
 32362 0001857E C60021                          mov byte [rax], T_pair
 32363 00018581 4C894801                        mov qword [rax + 1], r9
 32364 00018585 4C894009                        mov qword [rax + 1 + 8], r8
 32365 00018589 4989C0                          mov r8, rax
 32366 0001858C 48FFC9                          dec rcx
 32367 0001858F EBDD                            jmp .L3
 32368                                  .L4:
 32369 00018591 4C89C0                          mov rax, r8
 32370 00018594 48837D1802                      cmp COUNT, 2
 32371 00018599 7404                            je .L5
 32372 0001859B C9                              leave
 32373 0001859C C21800                          ret AND_KILL_FRAME(1)
 32374                                  .L5:
 32375 0001859F C9                      	leave
 32376 000185A0 C22000                  	ret AND_KILL_FRAME(2)
 32377                                  
 32378                                  L_code_ptr_is_primitive:
 32379 000185A3 C8000000                	enter 0, 0
 32380 000185A7 48837D1801              	cmp COUNT, 1
 32381 000185AC 0F85CC1B0000            	jne L_error_arg_count_1
 32382 000185B2 488B4520                	mov rax, PARAM(0)
 32383                                  	assert_closure(rax)
    53 000185B6 803804              <1>  cmp byte [%1], %2
    54 000185B9 0F85931C0000        <1>  jne L_error_incorrect_type
 32384 000185BF 4883780100              	cmp SOB_CLOSURE_ENV(rax), 0
 32385 000185C4 750C                    	jne .L_false
 32386 000185C6 48B8-                   	mov rax, sob_boolean_true
 32386 000185C8 [0300000000000000] 
 32387 000185D0 EB0A                    	jmp .L_end
 32388                                  .L_false:
 32389 000185D2 48B8-                   	mov rax, sob_boolean_false
 32389 000185D4 [0200000000000000] 
 32390                                  .L_end:
 32391 000185DC C9                      	leave
 32392 000185DD C21800                  	ret AND_KILL_FRAME(1)
 32393                                  
 32394                                  L_code_ptr_length:
 32395 000185E0 C8000000                	enter 0, 0
 32396 000185E4 48837D1801              	cmp COUNT, 1
 32397 000185E9 0F858F1B0000            	jne L_error_arg_count_1
 32398 000185EF 488B5D20                	mov rbx, PARAM(0)
 32399 000185F3 BF00000000              	mov rdi, 0
 32400                                  .L:
 32401 000185F8 803B01                  	cmp byte [rbx], T_nil
 32402 000185FB 7412                    	je .L_end
 32403                                  	assert_pair(rbx)
    53 000185FD 803B21              <1>  cmp byte [%1], %2
    54 00018600 0F854C1C0000        <1>  jne L_error_incorrect_type
 32404 00018606 488B5B09                	mov rbx, SOB_PAIR_CDR(rbx)
 32405 0001860A 48FFC7                  	inc rdi
 32406 0001860D EBE9                    	jmp .L
 32407                                  .L_end:
 32408 0001860F E8B91A0000              	call make_integer
 32409 00018614 C9                      	leave
 32410 00018615 C21800                  	ret AND_KILL_FRAME(1)
 32411                                  
 32412                                  L_code_ptr_break:
 32413 00018618 48837C241000                    cmp qword [rsp + 8 * 2], 0
 32414 0001861E 0F85251B0000                    jne L_error_arg_count_0
 32415 00018624 CC                              int3
 32416 00018625 48B8-                           mov rax, sob_void
 32416 00018627 [0000000000000000] 
 32417 0001862F C21000                          ret AND_KILL_FRAME(0)        
 32418                                  
 32419                                  L_code_ptr_frame:
 32420 00018632 C8000000                        enter 0, 0
 32421 00018636 48837D1800                      cmp COUNT, 0
 32422 0001863B 0F85081B0000                    jne L_error_arg_count_0
 32423                                  
 32424 00018641 48BF-                           mov rdi, fmt_frame
 32424 00018643 [891A000000000000] 
 32425 0001864B 488B7500                        mov rsi, qword [rbp]    ; old rbp
 32426 0001864F 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
 32427 00018653 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
 32428 00018657 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
 32429 0001865B 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
 32430 0001865F 6A00                            push 0
 32431 00018661 4151                            push r9
 32432 00018663 4150                            push r8                   ; we'll use it when printing the params
 32433 00018665 B800000000                      mov rax, 0
 32434                                          
 32435                                          ENTER
    44 0001866A C8000000            <1>  enter 0, 0
    45 0001866E 4883E4F0            <1>  and rsp, ~15
 32436 00018672 E8(00000000)                    call printf
 32437                                          LEAVE
    49 00018677 C9                  <1>  leave
 32438                                  
 32439                                  .L:
 32440 00018678 488B0C24                        mov rcx, qword [rsp]
 32441 0001867C 4883F900                        cmp rcx, 0
 32442 00018680 7467                            je .L_out
 32443 00018682 48BF-                           mov rdi, fmt_frame_param_prefix
 32443 00018684 [C21A000000000000] 
 32444 0001868C 488B742410                      mov rsi, qword [rsp + 8*2]
 32445 00018691 B800000000                      mov rax, 0
 32446                                          
 32447                                          ENTER
    44 00018696 C8000000            <1>  enter 0, 0
    45 0001869A 4883E4F0            <1>  and rsp, ~15
 32448 0001869E E8(00000000)                    call printf
 32449                                          LEAVE
    49 000186A3 C9                  <1>  leave
 32450                                  
 32451 000186A4 488B0C24                        mov rcx, qword [rsp]
 32452 000186A8 48FFC9                          dec rcx
 32453 000186AB 48890C24                        mov qword [rsp], rcx    ; dec arg count
 32454 000186AF 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
 32455 000186B4 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
 32456 000186B9 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
 32457 000186BD 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
 32458 000186C2 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
 32459 000186C5 E87B000000                      call print_sexpr
 32460 000186CA 48BF-                           mov rdi, fmt_newline
 32460 000186CC [EE1A000000000000] 
 32461 000186D4 B800000000                      mov rax, 0
 32462                                          ENTER
    44 000186D9 C8000000            <1>  enter 0, 0
    45 000186DD 4883E4F0            <1>  and rsp, ~15
 32463 000186E1 E8(00000000)                    call printf
 32464                                          LEAVE
    49 000186E6 C9                  <1>  leave
 32465 000186E7 EB8F                            jmp .L
 32466                                  .L_out:
 32467 000186E9 48BF-                           mov rdi, fmt_frame_continue
 32467 000186EB [D31A000000000000] 
 32468 000186F3 B800000000                      mov rax, 0
 32469                                          ENTER
    44 000186F8 C8000000            <1>  enter 0, 0
    45 000186FC 4883E4F0            <1>  and rsp, ~15
 32470 00018700 E8(00000000)                    call printf
 32471 00018705 E8(00000000)                    call getchar
 32472                                          LEAVE
    49 0001870A C9                  <1>  leave
 32473                                          
 32474 0001870B 48B8-                           mov rax, sob_void
 32474 0001870D [0000000000000000] 
 32475 00018715 C9                              leave
 32476 00018716 C21000                          ret AND_KILL_FRAME(0)
 32477                                          
 32478                                  print_sexpr_if_not_void:
 32479 00018719 4881FF[00000000]        	cmp rdi, sob_void
 32480 00018720 7422                    	je .done
 32481 00018722 E81E000000              	call print_sexpr
 32482 00018727 48BF-                   	mov rdi, fmt_newline
 32482 00018729 [EE1A000000000000] 
 32483 00018731 B800000000              	mov rax, 0
 32484                                  	ENTER
    44 00018736 C8000000            <1>  enter 0, 0
    45 0001873A 4883E4F0            <1>  and rsp, ~15
 32485 0001873E E8(00000000)            	call printf
 32486                                  	LEAVE
    49 00018743 C9                  <1>  leave
 32487                                  .done:
 32488 00018744 C3                      	ret
 32489                                  
 32490                                  section .data
 32491                                  fmt_frame:
 32492 00001A89 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
 32492 00001A92 207265742061646472-
 32492 00001A9B 203D2025703B206C65-
 32492 00001AA4 7820656E76203D2025-
 32492 00001AAD 703B20706172616D20-
 32492 00001AB6 636F756E74203D2025-
 32492 00001ABF 640A00             
 32493                                  fmt_frame_param_prefix:
 32494 00001AC2 3D3D5B706172616D20-             db `==[param %d]==> \0`
 32494 00001ACB 25645D3D3D3E2000   
 32495                                  fmt_frame_continue:
 32496 00001AD3 486974203C456E7465-             db `Hit <Enter> to continue...\0`
 32496 00001ADC 723E20746F20636F6E-
 32496 00001AE5 74696E75652E2E2E00 
 32497                                  fmt_newline:
 32498 00001AEE 0A00                    	db `\n\0`
 32499                                  fmt_void:
 32500 00001AF0 233C766F69643E00        	db `#<void>\0`
 32501                                  fmt_nil:
 32502 00001AF8 282900                  	db `()\0`
 32503                                  fmt_boolean_false:
 32504 00001AFB 236600                  	db `#f\0`
 32505                                  fmt_boolean_true:
 32506 00001AFE 237400                  	db `#t\0`
 32507                                  fmt_char_backslash:
 32508 00001B01 235C5C00                	db `#\\\\\0`
 32509                                  fmt_char_dquote:
 32510 00001B05 235C2200                	db `#\\"\0`
 32511                                  fmt_char_simple:
 32512 00001B09 235C256300              	db `#\\%c\0`
 32513                                  fmt_char_null:
 32514 00001B0E 235C6E756C00            	db `#\\nul\0`
 32515                                  fmt_char_bell:
 32516 00001B14 235C62656C6C00          	db `#\\bell\0`
 32517                                  fmt_char_backspace:
 32518 00001B1B 235C6261636B737061-     	db `#\\backspace\0`
 32518 00001B24 636500             
 32519                                  fmt_char_tab:
 32520 00001B27 235C74616200            	db `#\\tab\0`
 32521                                  fmt_char_newline:
 32522 00001B2D 235C6E65776C696E65-     	db `#\\newline\0`
 32522 00001B36 00                 
 32523                                  fmt_char_formfeed:
 32524 00001B37 235C7061676500          	db `#\\page\0`
 32525                                  fmt_char_return:
 32526 00001B3E 235C72657475726E00      	db `#\\return\0`
 32527                                  fmt_char_escape:
 32528 00001B47 235C65736300            	db `#\\esc\0`
 32529                                  fmt_char_space:
 32530 00001B4D 235C737061636500        	db `#\\space\0`
 32531                                  fmt_char_hex:
 32532 00001B55 235C782530325800        	db `#\\x%02X\0`
 32533                                  fmt_gensym:
 32534 00001B5D 47256C6400                      db `G%ld\0`
 32535                                  fmt_closure:
 32536 00001B62 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 32536 00001B6B 206174203078253038-
 32536 00001B74 5820656E763D307825-
 32536 00001B7D 30385820636F64653D-
 32536 00001B86 3078253038583E00   
 32537                                  fmt_lparen:
 32538 00001B8E 2800                    	db `(\0`
 32539                                  fmt_dotted_pair:
 32540 00001B90 202E2000                	db ` . \0`
 32541                                  fmt_rparen:
 32542 00001B94 2900                    	db `)\0`
 32543                                  fmt_space:
 32544 00001B96 2000                    	db ` \0`
 32545                                  fmt_empty_vector:
 32546 00001B98 23282900                	db `#()\0`
 32547                                  fmt_vector:
 32548 00001B9C 232800                  	db `#(\0`
 32549                                  fmt_real:
 32550 00001B9F 256600                  	db `%f\0`
 32551                                  fmt_fraction:
 32552 00001BA2 256C642F256C6400        	db `%ld/%ld\0`
 32553                                  fmt_zero:
 32554 00001BAA 3000                    	db `0\0`
 32555                                  fmt_int:
 32556 00001BAC 256C6400                	db `%ld\0`
 32557                                  fmt_unknown_scheme_object_error:
 32558 00001BB0 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
 32558 00001BB9 6F723A20556E6B6E6F-
 32558 00001BC2 776E20536368656D65-
 32558 00001BCB 2D6F626A6563742028-
 32558 00001BD4 525454492030782530-
 32558 00001BDD 32582920           
 32559 00001BE1 617420616464726573-     	db `at address 0x%08X\n\n\0`
 32559 00001BEA 73203078253038580A-
 32559 00001BF3 0A00               
 32560                                  fmt_dquote:
 32561 00001BF5 2200                    	db `\"\0`
 32562                                  fmt_string_char:
 32563 00001BF7 256300                          db `%c\0`
 32564                                  fmt_string_char_7:
 32565 00001BFA 5C6100                          db `\\a\0`
 32566                                  fmt_string_char_8:
 32567 00001BFD 5C6200                          db `\\b\0`
 32568                                  fmt_string_char_9:
 32569 00001C00 5C7400                          db `\\t\0`
 32570                                  fmt_string_char_10:
 32571 00001C03 5C6E00                          db `\\n\0`
 32572                                  fmt_string_char_11:
 32573 00001C06 5C7600                          db `\\v\0`
 32574                                  fmt_string_char_12:
 32575 00001C09 5C6600                          db `\\f\0`
 32576                                  fmt_string_char_13:
 32577 00001C0C 5C7200                          db `\\r\0`
 32578                                  fmt_string_char_34:
 32579 00001C0F 5C2200                          db `\\"\0`
 32580                                  fmt_string_char_92:
 32581 00001C12 5C5C00                          db `\\\\\0`
 32582                                  fmt_string_char_hex:
 32583 00001C15 5C7825583B00                    db `\\x%X;\0`
 32584                                  
 32585                                  section .text
 32586                                  
 32587                                  print_sexpr:
 32588 00018745 C8000000                	enter 0, 0
 32589 00018749 8A07                    	mov al, byte [rdi]
 32590 0001874B 3C00                    	cmp al, T_void
 32591 0001874D 7465                    	je .Lvoid
 32592 0001874F 3C01                    	cmp al, T_nil
 32593 00018751 7470                    	je .Lnil
 32594 00018753 3C09                    	cmp al, T_boolean_false
 32595 00018755 747B                    	je .Lboolean_false
 32596 00018757 3C0A                    	cmp al, T_boolean_true
 32597 00018759 0F8482000000            	je .Lboolean_true
 32598 0001875F 3C02                    	cmp al, T_char
 32599 00018761 0F8489000000            	je .Lchar
 32600 00018767 3C41                    	cmp al, T_interned_symbol
 32601 00018769 0F84CB010000            	je .Linterned_symbol
 32602 0001876F 3C42                            cmp al, T_uninterned_symbol
 32603 00018771 0F84EF010000                    je .Luninterned_symbol
 32604 00018777 3C21                    	cmp al, T_pair
 32605 00018779 0F84FA010000            	je .Lpair
 32606 0001877F 3C22                    	cmp al, T_vector
 32607 00018781 0F84C3020000            	je .Lvector
 32608 00018787 3C04                    	cmp al, T_closure
 32609 00018789 0F8491010000            	je .Lclosure
 32610 0001878F 3C13                    	cmp al, T_real
 32611 00018791 0F8454030000            	je .Lreal
 32612 00018797 3C12                    	cmp al, T_fraction
 32613 00018799 0F847A030000            	je .Lfraction
 32614 0001879F 3C11                    	cmp al, T_integer
 32615 000187A1 0F84B3030000            	je .Linteger
 32616 000187A7 3C03                    	cmp al, T_string
 32617 000187A9 0F84BE030000            	je .Lstring
 32618                                  
 32619 000187AF E9F6040000              	jmp .Lunknown_sexpr_type
 32620                                  
 32621                                  .Lvoid:
 32622 000187B4 48BF-                   	mov rdi, fmt_void
 32622 000187B6 [F01A000000000000] 
 32623 000187BE E91A050000              	jmp .Lemit
 32624                                  
 32625                                  .Lnil:
 32626 000187C3 48BF-                   	mov rdi, fmt_nil
 32626 000187C5 [F81A000000000000] 
 32627 000187CD E90B050000              	jmp .Lemit
 32628                                  
 32629                                  .Lboolean_false:
 32630 000187D2 48BF-                   	mov rdi, fmt_boolean_false
 32630 000187D4 [FB1A000000000000] 
 32631 000187DC E9FC040000              	jmp .Lemit
 32632                                  
 32633                                  .Lboolean_true:
 32634 000187E1 48BF-                   	mov rdi, fmt_boolean_true
 32634 000187E3 [FE1A000000000000] 
 32635 000187EB E9ED040000              	jmp .Lemit
 32636                                  
 32637                                  .Lchar:
 32638 000187F0 8A4701                  	mov al, byte [rdi + 1]
 32639 000187F3 3C20                    	cmp al, ' '
 32640 000187F5 7E28                    	jle .Lchar_whitespace
 32641 000187F7 3C5C                    	cmp al, 92 		; backslash
 32642 000187F9 0F847C000000            	je .Lchar_backslash
 32643 000187FF 3C22                    	cmp al, '"'
 32644 00018801 0F8483000000            	je .Lchar_dquote
 32645 00018807 4825FF000000            	and rax, 255
 32646 0001880D 48BF-                   	mov rdi, fmt_char_simple
 32646 0001880F [091B000000000000] 
 32647 00018817 4889C6                  	mov rsi, rax
 32648 0001881A E9BE040000              	jmp .Lemit
 32649                                  
 32650                                  .Lchar_whitespace:
 32651 0001881F 3C00                    	cmp al, 0
 32652 00018821 7476                    	je .Lchar_null
 32653 00018823 3C07                    	cmp al, 7
 32654 00018825 0F847D000000            	je .Lchar_bell
 32655 0001882B 3C08                    	cmp al, 8
 32656 0001882D 0F8484000000            	je .Lchar_backspace
 32657 00018833 3C09                    	cmp al, 9
 32658 00018835 0F848B000000            	je .Lchar_tab
 32659 0001883B 3C0A                    	cmp al, 10
 32660 0001883D 0F8492000000            	je .Lchar_newline
 32661 00018843 3C0C                    	cmp al, 12
 32662 00018845 0F8499000000            	je .Lchar_formfeed
 32663 0001884B 3C0D                    	cmp al, 13
 32664 0001884D 0F84A0000000            	je .Lchar_return
 32665 00018853 3C1B                    	cmp al, 27
 32666 00018855 0F84A7000000            	je .Lchar_escape
 32667 0001885B 4825FF000000            	and rax, 255
 32668 00018861 3C20                    	cmp al, ' '
 32669 00018863 0F84A8000000            	je .Lchar_space
 32670 00018869 48BF-                   	mov rdi, fmt_char_hex
 32670 0001886B [551B000000000000] 
 32671 00018873 4889C6                  	mov rsi, rax
 32672 00018876 E962040000              	jmp .Lemit	
 32673                                  
 32674                                  .Lchar_backslash:
 32675 0001887B 48BF-                   	mov rdi, fmt_char_backslash
 32675 0001887D [011B000000000000] 
 32676 00018885 E953040000              	jmp .Lemit
 32677                                  
 32678                                  .Lchar_dquote:
 32679 0001888A 48BF-                   	mov rdi, fmt_char_dquote
 32679 0001888C [051B000000000000] 
 32680 00018894 E944040000              	jmp .Lemit
 32681                                  
 32682                                  .Lchar_null:
 32683 00018899 48BF-                   	mov rdi, fmt_char_null
 32683 0001889B [0E1B000000000000] 
 32684 000188A3 E935040000              	jmp .Lemit
 32685                                  
 32686                                  .Lchar_bell:
 32687 000188A8 48BF-                   	mov rdi, fmt_char_bell
 32687 000188AA [141B000000000000] 
 32688 000188B2 E926040000              	jmp .Lemit
 32689                                  
 32690                                  .Lchar_backspace:
 32691 000188B7 48BF-                   	mov rdi, fmt_char_backspace
 32691 000188B9 [1B1B000000000000] 
 32692 000188C1 E917040000              	jmp .Lemit
 32693                                  
 32694                                  .Lchar_tab:
 32695 000188C6 48BF-                   	mov rdi, fmt_char_tab
 32695 000188C8 [271B000000000000] 
 32696 000188D0 E908040000              	jmp .Lemit
 32697                                  
 32698                                  .Lchar_newline:
 32699 000188D5 48BF-                   	mov rdi, fmt_char_newline
 32699 000188D7 [2D1B000000000000] 
 32700 000188DF E9F9030000              	jmp .Lemit
 32701                                  
 32702                                  .Lchar_formfeed:
 32703 000188E4 48BF-                   	mov rdi, fmt_char_formfeed
 32703 000188E6 [371B000000000000] 
 32704 000188EE E9EA030000              	jmp .Lemit
 32705                                  
 32706                                  .Lchar_return:
 32707 000188F3 48BF-                   	mov rdi, fmt_char_return
 32707 000188F5 [3E1B000000000000] 
 32708 000188FD E9DB030000              	jmp .Lemit
 32709                                  
 32710                                  .Lchar_escape:
 32711 00018902 48BF-                   	mov rdi, fmt_char_escape
 32711 00018904 [471B000000000000] 
 32712 0001890C E9CC030000              	jmp .Lemit
 32713                                  
 32714                                  .Lchar_space:
 32715 00018911 48BF-                   	mov rdi, fmt_char_space
 32715 00018913 [4D1B000000000000] 
 32716 0001891B E9BD030000              	jmp .Lemit
 32717                                  
 32718                                  .Lclosure:
 32719 00018920 4889FE                  	mov rsi, qword rdi
 32720 00018923 48BF-                   	mov rdi, fmt_closure
 32720 00018925 [621B000000000000] 
 32721 0001892D 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 32722 00018931 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 32723 00018935 E9A3030000              	jmp .Lemit
 32724                                  
 32725                                  .Linterned_symbol:
 32726 0001893A 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 32727 0001893E BE01000000              	mov rsi, 1		 ; size = 1 byte
 32728 00018943 488B5701                	mov rdx, qword [rdi + 1] ; length
 32729 00018947 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 32730 0001894B 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 32731                                  	ENTER
    44 00018953 C8000000            <1>  enter 0, 0
    45 00018957 4883E4F0            <1>  and rsp, ~15
 32732 0001895B E8(00000000)            	call fwrite
 32733                                  	LEAVE
    49 00018960 C9                  <1>  leave
 32734 00018961 E98C030000              	jmp .Lend
 32735                                  
 32736                                  .Luninterned_symbol:
 32737 00018966 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
 32738 0001896A 48BF-                           mov rdi, fmt_gensym
 32738 0001896C [5D1B000000000000] 
 32739 00018974 E964030000                      jmp .Lemit
 32740                                  	
 32741                                  .Lpair:
 32742 00018979 57                      	push rdi
 32743 0001897A 48BF-                   	mov rdi, fmt_lparen
 32743 0001897C [8E1B000000000000] 
 32744 00018984 B800000000              	mov rax, 0
 32745                                          ENTER
    44 00018989 C8000000            <1>  enter 0, 0
    45 0001898D 4883E4F0            <1>  and rsp, ~15
 32746 00018991 E8(00000000)            	call printf
 32747                                          LEAVE
    49 00018996 C9                  <1>  leave
 32748 00018997 488B3C24                	mov rdi, qword [rsp] 	; pair
 32749 0001899B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32750 0001899F E8A1FDFFFF              	call print_sexpr
 32751 000189A4 5F                      	pop rdi 		; pair
 32752 000189A5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32753                                  .Lcdr:
 32754 000189A9 8A07                    	mov al, byte [rdi]
 32755 000189AB 3C01                    	cmp al, T_nil
 32756 000189AD 7447                    	je .Lcdr_nil
 32757 000189AF 3C21                    	cmp al, T_pair
 32758 000189B1 7462                    	je .Lcdr_pair
 32759 000189B3 57                      	push rdi
 32760 000189B4 48BF-                   	mov rdi, fmt_dotted_pair
 32760 000189B6 [901B000000000000] 
 32761 000189BE B800000000              	mov rax, 0
 32762                                          ENTER
    44 000189C3 C8000000            <1>  enter 0, 0
    45 000189C7 4883E4F0            <1>  and rsp, ~15
 32763 000189CB E8(00000000)            	call printf
 32764                                          LEAVE
    49 000189D0 C9                  <1>  leave
 32765 000189D1 5F                      	pop rdi
 32766 000189D2 E86EFDFFFF              	call print_sexpr
 32767 000189D7 48BF-                   	mov rdi, fmt_rparen
 32767 000189D9 [941B000000000000] 
 32768 000189E1 B800000000              	mov rax, 0
 32769                                          ENTER
    44 000189E6 C8000000            <1>  enter 0, 0
    45 000189EA 4883E4F0            <1>  and rsp, ~15
 32770 000189EE E8(00000000)            	call printf
 32771                                          LEAVE
    49 000189F3 C9                  <1>  leave
 32772 000189F4 C9                      	leave
 32773 000189F5 C3                      	ret
 32774                                  
 32775                                  .Lcdr_nil:
 32776 000189F6 48BF-                   	mov rdi, fmt_rparen
 32776 000189F8 [941B000000000000] 
 32777 00018A00 B800000000              	mov rax, 0
 32778                                          ENTER
    44 00018A05 C8000000            <1>  enter 0, 0
    45 00018A09 4883E4F0            <1>  and rsp, ~15
 32779 00018A0D E8(00000000)            	call printf
 32780                                          LEAVE
    49 00018A12 C9                  <1>  leave
 32781 00018A13 C9                      	leave
 32782 00018A14 C3                      	ret
 32783                                  
 32784                                  .Lcdr_pair:
 32785 00018A15 57                      	push rdi
 32786 00018A16 48BF-                   	mov rdi, fmt_space
 32786 00018A18 [961B000000000000] 
 32787 00018A20 B800000000              	mov rax, 0
 32788                                          ENTER
    44 00018A25 C8000000            <1>  enter 0, 0
    45 00018A29 4883E4F0            <1>  and rsp, ~15
 32789 00018A2D E8(00000000)            	call printf
 32790                                          LEAVE
    49 00018A32 C9                  <1>  leave
 32791 00018A33 488B3C24                	mov rdi, qword [rsp]
 32792 00018A37 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 32793 00018A3B E805FDFFFF              	call print_sexpr
 32794 00018A40 5F                      	pop rdi
 32795 00018A41 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 32796 00018A45 E95FFFFFFF              	jmp .Lcdr
 32797                                  
 32798                                  .Lvector:
 32799 00018A4A 488B4701                	mov rax, qword [rdi + 1] ; length
 32800 00018A4E 4883F800                	cmp rax, 0
 32801 00018A52 0F8484000000            	je .Lvector_empty
 32802 00018A58 57                      	push rdi
 32803 00018A59 48BF-                   	mov rdi, fmt_vector
 32803 00018A5B [9C1B000000000000] 
 32804 00018A63 B800000000              	mov rax, 0
 32805                                          ENTER
    44 00018A68 C8000000            <1>  enter 0, 0
    45 00018A6C 4883E4F0            <1>  and rsp, ~15
 32806 00018A70 E8(00000000)            	call printf
 32807                                          LEAVE
    49 00018A75 C9                  <1>  leave
 32808 00018A76 488B3C24                	mov rdi, qword [rsp]
 32809 00018A7A FF7701                  	push qword [rdi + 1]
 32810 00018A7D 6A01                    	push 1
 32811 00018A7F 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 32812 00018A83 E8BDFCFFFF              	call print_sexpr
 32813                                  .Lvector_loop:
 32814                                  	; [rsp] index
 32815                                  	; [rsp + 8*1] limit
 32816                                  	; [rsp + 8*2] vector
 32817 00018A88 488B0424                	mov rax, qword [rsp]
 32818 00018A8C 483B442408              	cmp rax, qword [rsp + 8*1]
 32819 00018A91 7436                    	je .Lvector_end
 32820 00018A93 48BF-                   	mov rdi, fmt_space
 32820 00018A95 [961B000000000000] 
 32821 00018A9D B800000000              	mov rax, 0
 32822                                          ENTER
    44 00018AA2 C8000000            <1>  enter 0, 0
    45 00018AA6 4883E4F0            <1>  and rsp, ~15
 32823 00018AAA E8(00000000)            	call printf
 32824                                          LEAVE
    49 00018AAF C9                  <1>  leave
 32825 00018AB0 488B0424                	mov rax, qword [rsp]
 32826 00018AB4 488B5C2410              	mov rbx, qword [rsp + 8*2]
 32827 00018AB9 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 32828 00018ABE E882FCFFFF              	call print_sexpr
 32829 00018AC3 48FF0424                	inc qword [rsp]
 32830 00018AC7 EBBF                    	jmp .Lvector_loop
 32831                                  
 32832                                  .Lvector_end:
 32833 00018AC9 4883C418                	add rsp, 8*3
 32834 00018ACD 48BF-                   	mov rdi, fmt_rparen
 32834 00018ACF [941B000000000000] 
 32835 00018AD7 E901020000              	jmp .Lemit	
 32836                                  
 32837                                  .Lvector_empty:
 32838 00018ADC 48BF-                   	mov rdi, fmt_empty_vector
 32838 00018ADE [981B000000000000] 
 32839 00018AE6 E9F2010000              	jmp .Lemit
 32840                                  
 32841                                  .Lreal:
 32842 00018AEB FF7701                  	push qword [rdi + 1]
 32843 00018AEE F20F100424              	movsd xmm0, qword [rsp]
 32844 00018AF3 4883C408                	add rsp, 8*1
 32845 00018AF7 48BF-                   	mov rdi, fmt_real
 32845 00018AF9 [9F1B000000000000] 
 32846 00018B01 B801000000              	mov rax, 1
 32847                                  	ENTER
    44 00018B06 C8000000            <1>  enter 0, 0
    45 00018B0A 4883E4F0            <1>  and rsp, ~15
 32848 00018B0E E8(00000000)            	call printf
 32849                                  	LEAVE
    49 00018B13 C9                  <1>  leave
 32850 00018B14 E9D9010000              	jmp .Lend
 32851                                  
 32852                                  .Lfraction:
 32853 00018B19 488B7701                	mov rsi, qword [rdi + 1]
 32854 00018B1D 488B5709                	mov rdx, qword [rdi + 1 + 8]
 32855 00018B21 4883FE00                	cmp rsi, 0
 32856 00018B25 7415                    	je .Lrat_zero
 32857 00018B27 4883FA01                	cmp rdx, 1
 32858 00018B2B 741E                    	je .Lrat_int
 32859 00018B2D 48BF-                   	mov rdi, fmt_fraction
 32859 00018B2F [A21B000000000000] 
 32860 00018B37 E9A1010000              	jmp .Lemit
 32861                                  
 32862                                  .Lrat_zero:
 32863 00018B3C 48BF-                   	mov rdi, fmt_zero
 32863 00018B3E [AA1B000000000000] 
 32864 00018B46 E992010000              	jmp .Lemit
 32865                                  
 32866                                  .Lrat_int:
 32867 00018B4B 48BF-                   	mov rdi, fmt_int
 32867 00018B4D [AC1B000000000000] 
 32868 00018B55 E983010000              	jmp .Lemit
 32869                                  
 32870                                  .Linteger:
 32871 00018B5A 488B7701                	mov rsi, qword [rdi + 1]
 32872 00018B5E 48BF-                   	mov rdi, fmt_int
 32872 00018B60 [AC1B000000000000] 
 32873 00018B68 E970010000              	jmp .Lemit
 32874                                  
 32875                                  .Lstring:
 32876 00018B6D 488D4709                	lea rax, [rdi + 1 + 8]
 32877 00018B71 50                      	push rax
 32878 00018B72 FF7701                  	push qword [rdi + 1]
 32879 00018B75 48BF-                   	mov rdi, fmt_dquote
 32879 00018B77 [F51B000000000000] 
 32880 00018B7F B800000000              	mov rax, 0
 32881                                  	ENTER
    44 00018B84 C8000000            <1>  enter 0, 0
    45 00018B88 4883E4F0            <1>  and rsp, ~15
 32882 00018B8C E8(00000000)            	call printf
 32883                                  	LEAVE
    49 00018B91 C9                  <1>  leave
 32884                                  .Lstring_loop:
 32885                                  	; qword [rsp]: limit
 32886                                  	; qword [rsp + 8*1]: char *
 32887 00018B92 48833C2400              	cmp qword [rsp], 0
 32888 00018B97 0F84FD000000            	je .Lstring_end
 32889 00018B9D 488B442408              	mov rax, qword [rsp + 8*1]
 32890 00018BA2 8A00                    	mov al, byte [rax]
 32891 00018BA4 4825FF000000            	and rax, 255
 32892 00018BAA 3C07                    	cmp al, 7
 32893 00018BAC 7468                            je .Lstring_char_7
 32894 00018BAE 3C08                            cmp al, 8
 32895 00018BB0 7470                            je .Lstring_char_8
 32896 00018BB2 3C09                            cmp al, 9
 32897 00018BB4 7478                            je .Lstring_char_9
 32898 00018BB6 3C0A                            cmp al, 10
 32899 00018BB8 0F847C000000                    je .Lstring_char_10
 32900 00018BBE 3C0B                            cmp al, 11
 32901 00018BC0 0F8480000000                    je .Lstring_char_11
 32902 00018BC6 3C0C                            cmp al, 12
 32903 00018BC8 0F8484000000                    je .Lstring_char_12
 32904 00018BCE 3C0D                            cmp al, 13
 32905 00018BD0 0F8488000000                    je .Lstring_char_13
 32906 00018BD6 3C22                            cmp al, 34
 32907 00018BD8 0F848C000000                    je .Lstring_char_34
 32908 00018BDE 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 32910 00018BE0 3C20                            cmp al, ' '
 32911 00018BE2 0F8CA0000000                    jl .Lstring_char_hex
 32912 00018BE8 48BF-                           mov rdi, fmt_string_char
 32912 00018BEA [F71B000000000000] 
 32913 00018BF2 4889C6                          mov rsi, rax
 32914                                  .Lstring_char_emit:
 32915 00018BF5 B800000000                      mov rax, 0
 32916                                          ENTER
    44 00018BFA C8000000            <1>  enter 0, 0
    45 00018BFE 4883E4F0            <1>  and rsp, ~15
 32917 00018C02 E8(00000000)                    call printf
 32918                                          LEAVE
    49 00018C07 C9                  <1>  leave
 32919 00018C08 48FF0C24                        dec qword [rsp]
 32920 00018C0C 48FF442408                      inc qword [rsp + 8*1]
 32921 00018C11 E97CFFFFFF                      jmp .Lstring_loop
 32922                                  
 32923                                  .Lstring_char_7:
 32924 00018C16 48BF-                           mov rdi, fmt_string_char_7
 32924 00018C18 [FA1B000000000000] 
 32925 00018C20 EBD3                            jmp .Lstring_char_emit
 32926                                  
 32927                                  .Lstring_char_8:
 32928 00018C22 48BF-                           mov rdi, fmt_string_char_8
 32928 00018C24 [FD1B000000000000] 
 32929 00018C2C EBC7                            jmp .Lstring_char_emit
 32930                                          
 32931                                  .Lstring_char_9:
 32932 00018C2E 48BF-                           mov rdi, fmt_string_char_9
 32932 00018C30 [001C000000000000] 
 32933 00018C38 EBBB                            jmp .Lstring_char_emit
 32934                                  
 32935                                  .Lstring_char_10:
 32936 00018C3A 48BF-                           mov rdi, fmt_string_char_10
 32936 00018C3C [031C000000000000] 
 32937 00018C44 EBAF                            jmp .Lstring_char_emit
 32938                                  
 32939                                  .Lstring_char_11:
 32940 00018C46 48BF-                           mov rdi, fmt_string_char_11
 32940 00018C48 [061C000000000000] 
 32941 00018C50 EBA3                            jmp .Lstring_char_emit
 32942                                  
 32943                                  .Lstring_char_12:
 32944 00018C52 48BF-                           mov rdi, fmt_string_char_12
 32944 00018C54 [091C000000000000] 
 32945 00018C5C EB97                            jmp .Lstring_char_emit
 32946                                  
 32947                                  .Lstring_char_13:
 32948 00018C5E 48BF-                           mov rdi, fmt_string_char_13
 32948 00018C60 [0C1C000000000000] 
 32949 00018C68 EB8B                            jmp .Lstring_char_emit
 32950                                  
 32951                                  .Lstring_char_34:
 32952 00018C6A 48BF-                           mov rdi, fmt_string_char_34
 32952 00018C6C [0F1C000000000000] 
 32953 00018C74 E97CFFFFFF                      jmp .Lstring_char_emit
 32954                                  
 32955                                  .Lstring_char_92:
 32956 00018C79 48BF-                           mov rdi, fmt_string_char_92
 32956 00018C7B [121C000000000000] 
 32957 00018C83 E96DFFFFFF                      jmp .Lstring_char_emit
 32958                                  
 32959                                  .Lstring_char_hex:
 32960 00018C88 48BF-                           mov rdi, fmt_string_char_hex
 32960 00018C8A [151C000000000000] 
 32961 00018C92 4889C6                          mov rsi, rax
 32962 00018C95 E95BFFFFFF                      jmp .Lstring_char_emit        
 32963                                  
 32964                                  .Lstring_end:
 32965 00018C9A 4883C410                	add rsp, 8 * 2
 32966 00018C9E 48BF-                   	mov rdi, fmt_dquote
 32966 00018CA0 [F51B000000000000] 
 32967 00018CA8 EB33                    	jmp .Lemit
 32968                                  
 32969                                  .Lunknown_sexpr_type:
 32970 00018CAA 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
 32970 00018CAC [B01B000000000000] 
 32971 00018CB4 4825FF000000            	and rax, 255
 32972 00018CBA 4889C2                  	mov rdx, rax
 32973 00018CBD 4889F9                  	mov rcx, rdi
 32974 00018CC0 488B3C25[00000000]      	mov rdi, qword [stderr]
 32975 00018CC8 B800000000              	mov rax, 0
 32976                                          ENTER
    44 00018CCD C8000000            <1>  enter 0, 0
    45 00018CD1 4883E4F0            <1>  and rsp, ~15
 32977 00018CD5 E8(00000000)            	call fprintf
 32978                                          LEAVE
    49 00018CDA C9                  <1>  leave
 32979 00018CDB C9                              leave
 32980 00018CDC C3                              ret
 32981                                  
 32982                                  .Lemit:
 32983 00018CDD B800000000              	mov rax, 0
 32984                                          ENTER
    44 00018CE2 C8000000            <1>  enter 0, 0
    45 00018CE6 4883E4F0            <1>  and rsp, ~15
 32985 00018CEA E8(00000000)            	call printf
 32986                                          LEAVE
    49 00018CEF C9                  <1>  leave
 32987 00018CF0 EB00                    	jmp .Lend
 32988                                  
 32989                                  .Lend:
 32990                                  	LEAVE
    49 00018CF2 C9                  <1>  leave
 32991 00018CF3 C3                      	ret
 32992                                  
 32993                                  ;;; rdi: address of free variable
 32994                                  ;;; rsi: address of code-pointer
 32995                                  bind_primitive:
 32996 00018CF4 C8000000                        enter 0, 0
 32997 00018CF8 57                              push rdi
 32998 00018CF9 BF11000000                      mov rdi, (1 + 8 + 8)
 32999 00018CFE E8C1F7FFFF                      call malloc
 33000 00018D03 5F                              pop rdi
 33001 00018D04 C60004                          mov byte [rax], T_closure
 33002 00018D07 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 33003 00018D0F 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 33004 00018D13 488907                          mov qword [rdi], rax
 33005 00018D16 48B8-                           mov rax, sob_void
 33005 00018D18 [0000000000000000] 
 33006 00018D20 C9                              leave
 33007 00018D21 C3                              ret
 33008                                  
 33009                                  L_code_ptr_ash:
 33010 00018D22 C8000000                        enter 0, 0
 33011 00018D26 48837D1802                      cmp COUNT, 2
 33012 00018D2B 0F8582140000                    jne L_error_arg_count_2
 33013 00018D31 488B7D20                        mov rdi, PARAM(0)
 33014                                          assert_integer(rdi)
    53 00018D35 803F11              <1>  cmp byte [%1], %2
    54 00018D38 0F8514150000        <1>  jne L_error_incorrect_type
 33015 00018D3E 488B4D28                        mov rcx, PARAM(1)
 33016                                          assert_integer(rcx)
    53 00018D42 803911              <1>  cmp byte [%1], %2
    54 00018D45 0F8507150000        <1>  jne L_error_incorrect_type
 33017 00018D4B 488B7F01                        mov rdi, qword [rdi + 1]
 33018 00018D4F 488B4901                        mov rcx, qword [rcx + 1]
 33019 00018D53 4883F900                        cmp rcx, 0
 33020 00018D57 7C0F                            jl .L_negative
 33021                                  .L_loop_positive:
 33022 00018D59 4883F900                        cmp rcx, 0
 33023 00018D5D 741B                            je .L_exit
 33024 00018D5F 48D3E7                          sal rdi, cl
 33025 00018D62 48C1E908                        shr rcx, 8
 33026 00018D66 EBF1                            jmp .L_loop_positive
 33027                                  .L_negative:
 33028 00018D68 48F7D9                          neg rcx
 33029                                  .L_loop_negative:
 33030 00018D6B 4883F900                        cmp rcx, 0
 33031 00018D6F 7409                            je .L_exit
 33032 00018D71 48D3FF                          sar rdi, cl
 33033 00018D74 48C1E908                        shr rcx, 8
 33034 00018D78 EBF1                            jmp .L_loop_negative
 33035                                  .L_exit:
 33036 00018D7A E84E130000                      call make_integer
 33037 00018D7F C9                              leave
 33038 00018D80 C22000                          ret AND_KILL_FRAME(2)
 33039                                  
 33040                                  L_code_ptr_logand:
 33041 00018D83 C8000000                        enter 0, 0
 33042 00018D87 48837D1802                      cmp COUNT, 2
 33043 00018D8C 0F8521140000                    jne L_error_arg_count_2
 33044 00018D92 4C8B4520                        mov r8, PARAM(0)
 33045                                          assert_integer(r8)
    53 00018D96 41803811            <1>  cmp byte [%1], %2
    54 00018D9A 0F85B2140000        <1>  jne L_error_incorrect_type
 33046 00018DA0 4C8B4D28                        mov r9, PARAM(1)
 33047                                          assert_integer(r9)
    53 00018DA4 41803911            <1>  cmp byte [%1], %2
    54 00018DA8 0F85A4140000        <1>  jne L_error_incorrect_type
 33048 00018DAE 498B7801                        mov rdi, qword [r8 + 1]
 33049 00018DB2 49237901                        and rdi, qword [r9 + 1]
 33050 00018DB6 E812130000                      call make_integer
 33051 00018DBB C9                              leave
 33052 00018DBC C22000                          ret AND_KILL_FRAME(2)
 33053                                  
 33054                                  L_code_ptr_logor:
 33055 00018DBF C8000000                        enter 0, 0
 33056 00018DC3 48837D1802                      cmp COUNT, 2
 33057 00018DC8 0F85E5130000                    jne L_error_arg_count_2
 33058 00018DCE 4C8B4520                        mov r8, PARAM(0)
 33059                                          assert_integer(r8)
    53 00018DD2 41803811            <1>  cmp byte [%1], %2
    54 00018DD6 0F8576140000        <1>  jne L_error_incorrect_type
 33060 00018DDC 4C8B4D28                        mov r9, PARAM(1)
 33061                                          assert_integer(r9)
    53 00018DE0 41803911            <1>  cmp byte [%1], %2
    54 00018DE4 0F8568140000        <1>  jne L_error_incorrect_type
 33062 00018DEA 498B7801                        mov rdi, qword [r8 + 1]
 33063 00018DEE 490B7901                        or rdi, qword [r9 + 1]
 33064 00018DF2 E8D6120000                      call make_integer
 33065 00018DF7 C9                              leave
 33066 00018DF8 C22000                          ret AND_KILL_FRAME(2)
 33067                                  
 33068                                  L_code_ptr_logxor:
 33069 00018DFB C8000000                        enter 0, 0
 33070 00018DFF 48837D1802                      cmp COUNT, 2
 33071 00018E04 0F85A9130000                    jne L_error_arg_count_2
 33072 00018E0A 4C8B4520                        mov r8, PARAM(0)
 33073                                          assert_integer(r8)
    53 00018E0E 41803811            <1>  cmp byte [%1], %2
    54 00018E12 0F853A140000        <1>  jne L_error_incorrect_type
 33074 00018E18 4C8B4D28                        mov r9, PARAM(1)
 33075                                          assert_integer(r9)
    53 00018E1C 41803911            <1>  cmp byte [%1], %2
    54 00018E20 0F852C140000        <1>  jne L_error_incorrect_type
 33076 00018E26 498B7801                        mov rdi, qword [r8 + 1]
 33077 00018E2A 49337901                        xor rdi, qword [r9 + 1]
 33078 00018E2E E89A120000                      call make_integer
 33079                                          LEAVE
    49 00018E33 C9                  <1>  leave
 33080 00018E34 C22000                          ret AND_KILL_FRAME(2)
 33081                                  
 33082                                  L_code_ptr_lognot:
 33083 00018E37 C8000000                        enter 0, 0
 33084 00018E3B 48837D1801                      cmp COUNT, 1
 33085 00018E40 0F8538130000                    jne L_error_arg_count_1
 33086 00018E46 4C8B4520                        mov r8, PARAM(0)
 33087                                          assert_integer(r8)
    53 00018E4A 41803811            <1>  cmp byte [%1], %2
    54 00018E4E 0F85FE130000        <1>  jne L_error_incorrect_type
 33088 00018E54 498B7801                        mov rdi, qword [r8 + 1]
 33089 00018E58 48F7D7                          not rdi
 33090 00018E5B E86D120000                      call make_integer
 33091 00018E60 C9                              leave
 33092 00018E61 C21800                          ret AND_KILL_FRAME(1)
 33093                                  
 33094                                  L_code_ptr_bin_apply:
 33095 00018E64 C8000000                        enter 0, 0
 33096                                          ;assuming we have 2 params - f and list to apply f on it
 33097 00018E68 488B4520                        mov rax, PARAM(0) ;save f
 33098 00018E6C 488B5D28                        mov rbx, PARAM(1) ;save s
 33099 00018E70 4C8B5500                        mov r10, qword [rbp] ;save old rbp
 33100 00018E74 4C8B5D08                        mov r11, qword [rbp + 8 * 1] ;saving ret
 33101 00018E78 4C8B6001                        mov r12, SOB_CLOSURE_ENV(rax) ;saving env
 33102 00018E7C 41B800000000                    mov r8, 0 ;counter for list
 33103                                  
 33104                                  .list_length_loop:
 33105 00018E82 803B01                          cmp byte [rbx], T_nil ;while s!=null
 33106 00018E85 7409                            je .list_length_loop_end
 33107 00018E87 49FFC0                          inc r8
 33108 00018E8A 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
 33109 00018E8E EBF2                            jmp .list_length_loop
 33110                                  
 33111                                  .list_length_loop_end:
 33112 00018E90 488B5D28                        mov rbx, PARAM(1) ;restore s
 33113 00018E94 4D89C7                          mov r15, r8 ;save list length
 33114 00018E97 4983E802                        sub r8, 2 ;the stack needs to keep the list, it's already have 2 params
 33115 00018E9B 49C1E003                        shl r8, 3 ;8 bytes for each param
 33116 00018E9F 4C29C5                          sub rbp, r8 ;allocating space for the list        
 33117 00018EA2 41B800000000                    mov r8, 0 ;counter for list
 33118                                  
 33119                                  
 33120                                  .copy_params_loop:
 33121 00018EA8 4D39F8                          cmp r8, r15
 33122 00018EAB 7412                            je .copy_env_ret_rbp
 33123 00018EAD 488B4B01                        mov rcx, SOB_PAIR_CAR(rbx)
 33124 00018EB1 4A894CC520                      mov qword[rbp + 8 * (4 + r8)], rcx
 33125 00018EB6 488B5B09                        mov rbx, SOB_PAIR_CDR(rbx)
 33126 00018EBA 49FFC0                          inc r8
 33127 00018EBD EBE9                            jmp .copy_params_loop
 33128                                  
 33129                                  .copy_env_ret_rbp:
 33130 00018EBF 4C895500                        mov qword[rbp], r10 ;in the end rbp points to the older rbp
 33131 00018EC3 4C895D08                        mov qword[rbp + 8 * 1], r11 ;restore ret
 33132 00018EC7 4C896510                        mov qword[rbp + 8 * 2], r12 ;restore env
 33133 00018ECB 4C897D18                        mov qword[rbp + 8 * 3], r15 ;save list length
 33134 00018ECF 4C89DC                          mov rsp, r11 ;rsp points to the ret adress
 33135 00018ED2 C9                              leave
 33136 00018ED3 FF6009                          jmp SOB_CLOSURE_CODE(rax)
 33137                                  
 33138                                  L_code_ptr_is_null:
 33139 00018ED6 C8000000                        enter 0, 0
 33140 00018EDA 48837D1801                      cmp COUNT, 1
 33141 00018EDF 0F8599120000                    jne L_error_arg_count_1
 33142 00018EE5 488B4520                        mov rax, PARAM(0)
 33143 00018EE9 803801                          cmp byte [rax], T_nil
 33144 00018EEC 750C                            jne .L_false
 33145 00018EEE 48B8-                           mov rax, sob_boolean_true
 33145 00018EF0 [0300000000000000] 
 33146 00018EF8 EB0A                            jmp .L_end
 33147                                  .L_false:
 33148 00018EFA 48B8-                           mov rax, sob_boolean_false
 33148 00018EFC [0200000000000000] 
 33149                                  .L_end:
 33150 00018F04 C9                              leave
 33151 00018F05 C21800                          ret AND_KILL_FRAME(1)
 33152                                  
 33153                                  L_code_ptr_is_pair:
 33154 00018F08 C8000000                        enter 0, 0
 33155 00018F0C 48837D1801                      cmp COUNT, 1
 33156 00018F11 0F8567120000                    jne L_error_arg_count_1
 33157 00018F17 488B4520                        mov rax, PARAM(0)
 33158 00018F1B 803821                          cmp byte [rax], T_pair
 33159 00018F1E 750C                            jne .L_false
 33160 00018F20 48B8-                           mov rax, sob_boolean_true
 33160 00018F22 [0300000000000000] 
 33161 00018F2A EB0A                            jmp .L_end
 33162                                  .L_false:
 33163 00018F2C 48B8-                           mov rax, sob_boolean_false
 33163 00018F2E [0200000000000000] 
 33164                                  .L_end:
 33165 00018F36 C9                              leave
 33166 00018F37 C21800                          ret AND_KILL_FRAME(1)
 33167                                          
 33168                                  L_code_ptr_is_void:
 33169 00018F3A C8000000                        enter 0, 0
 33170 00018F3E 48837D1801                      cmp COUNT, 1
 33171 00018F43 0F8535120000                    jne L_error_arg_count_1
 33172 00018F49 488B4520                        mov rax, PARAM(0)
 33173 00018F4D 803800                          cmp byte [rax], T_void
 33174 00018F50 750C                            jne .L_false
 33175 00018F52 48B8-                           mov rax, sob_boolean_true
 33175 00018F54 [0300000000000000] 
 33176 00018F5C EB0A                            jmp .L_end
 33177                                  .L_false:
 33178 00018F5E 48B8-                           mov rax, sob_boolean_false
 33178 00018F60 [0200000000000000] 
 33179                                  .L_end:
 33180 00018F68 C9                              leave
 33181 00018F69 C21800                          ret AND_KILL_FRAME(1)
 33182                                  
 33183                                  L_code_ptr_is_char:
 33184 00018F6C C8000000                        enter 0, 0
 33185 00018F70 48837D1801                      cmp COUNT, 1
 33186 00018F75 0F8503120000                    jne L_error_arg_count_1
 33187 00018F7B 488B4520                        mov rax, PARAM(0)
 33188 00018F7F 803802                          cmp byte [rax], T_char
 33189 00018F82 750C                            jne .L_false
 33190 00018F84 48B8-                           mov rax, sob_boolean_true
 33190 00018F86 [0300000000000000] 
 33191 00018F8E EB0A                            jmp .L_end
 33192                                  .L_false:
 33193 00018F90 48B8-                           mov rax, sob_boolean_false
 33193 00018F92 [0200000000000000] 
 33194                                  .L_end:
 33195 00018F9A C9                              leave
 33196 00018F9B C21800                          ret AND_KILL_FRAME(1)
 33197                                  
 33198                                  L_code_ptr_is_string:
 33199 00018F9E C8000000                        enter 0, 0
 33200 00018FA2 48837D1801                      cmp COUNT, 1
 33201 00018FA7 0F85D1110000                    jne L_error_arg_count_1
 33202 00018FAD 488B4520                        mov rax, PARAM(0)
 33203 00018FB1 803803                          cmp byte [rax], T_string
 33204 00018FB4 750C                            jne .L_false
 33205 00018FB6 48B8-                           mov rax, sob_boolean_true
 33205 00018FB8 [0300000000000000] 
 33206 00018FC0 EB0A                            jmp .L_end
 33207                                  .L_false:
 33208 00018FC2 48B8-                           mov rax, sob_boolean_false
 33208 00018FC4 [0200000000000000] 
 33209                                  .L_end:
 33210 00018FCC C9                              leave
 33211 00018FCD C21800                          ret AND_KILL_FRAME(1)
 33212                                  
 33213                                  L_code_ptr_is_symbol:
 33214 00018FD0 C8000000                        enter 0, 0
 33215 00018FD4 48837D1801                      cmp COUNT, 1
 33216 00018FD9 0F859F110000                    jne L_error_arg_count_1
 33217 00018FDF 4C8B4520                        mov r8, PARAM(0)
 33218 00018FE3 41802040                        and byte [r8], T_symbol
 33219 00018FE7 740C                            jz .L_false
 33220 00018FE9 48B8-                           mov rax, sob_boolean_true
 33220 00018FEB [0300000000000000] 
 33221 00018FF3 EB0A                            jmp .L_exit
 33222                                  .L_false:
 33223 00018FF5 48B8-                           mov rax, sob_boolean_false
 33223 00018FF7 [0200000000000000] 
 33224                                  .L_exit:
 33225 00018FFF C9                              leave
 33226 00019000 C21800                          ret AND_KILL_FRAME(1)
 33227                                  
 33228                                  L_code_ptr_is_uninterned_symbol:
 33229 00019003 C8000000                        enter 0, 0
 33230 00019007 48837D1801                      cmp COUNT, 1
 33231 0001900C 0F856C110000                    jne L_error_arg_count_1
 33232 00019012 4C8B4520                        mov r8, PARAM(0)
 33233 00019016 41803842                        cmp byte [r8], T_uninterned_symbol
 33234 0001901A 750C                            jne .L_false
 33235 0001901C 48B8-                           mov rax, sob_boolean_true
 33235 0001901E [0300000000000000] 
 33236 00019026 EB0A                            jmp .L_exit
 33237                                  .L_false:
 33238 00019028 48B8-                           mov rax, sob_boolean_false
 33238 0001902A [0200000000000000] 
 33239                                  .L_exit:
 33240 00019032 C9                              leave
 33241 00019033 C21800                          ret AND_KILL_FRAME(1)
 33242                                  
 33243                                  L_code_ptr_is_interned_symbol:
 33244 00019036 C8000000                        enter 0, 0
 33245 0001903A 48837D1801                      cmp COUNT, 1
 33246 0001903F 0F8539110000                    jne L_error_arg_count_1
 33247 00019045 488B4520                        mov rax, PARAM(0)
 33248 00019049 803841                          cmp byte [rax], T_interned_symbol
 33249 0001904C 750C                            jne .L_false
 33250 0001904E 48B8-                           mov rax, sob_boolean_true
 33250 00019050 [0300000000000000] 
 33251 00019058 EB0A                            jmp .L_end
 33252                                  .L_false:
 33253 0001905A 48B8-                           mov rax, sob_boolean_false
 33253 0001905C [0200000000000000] 
 33254                                  .L_end:
 33255 00019064 C9                              leave
 33256 00019065 C21800                          ret AND_KILL_FRAME(1)
 33257                                  
 33258                                  L_code_ptr_gensym:
 33259 00019068 C8000000                        enter 0, 0
 33260 0001906C 48837D1800                      cmp COUNT, 0
 33261 00019071 0F85D2100000                    jne L_error_arg_count_0
 33262 00019077 48FF0425[1B1C0000]              inc qword [gensym_count]
 33263 0001907F BF09000000                      mov rdi, (1 + 8)
 33264 00019084 E83BF4FFFF                      call malloc
 33265 00019089 C60042                          mov byte [rax], T_uninterned_symbol
 33266 0001908C 488B0C25[1B1C0000]              mov rcx, qword [gensym_count]
 33267 00019094 48894801                        mov qword [rax + 1], rcx
 33268 00019098 C9                              leave
 33269 00019099 C21000                          ret AND_KILL_FRAME(0)
 33270                                  
 33271                                  L_code_ptr_is_vector:
 33272 0001909C C8000000                        enter 0, 0
 33273 000190A0 48837D1801                      cmp COUNT, 1
 33274 000190A5 0F85D3100000                    jne L_error_arg_count_1
 33275 000190AB 488B4520                        mov rax, PARAM(0)
 33276 000190AF 803822                          cmp byte [rax], T_vector
 33277 000190B2 750C                            jne .L_false
 33278 000190B4 48B8-                           mov rax, sob_boolean_true
 33278 000190B6 [0300000000000000] 
 33279 000190BE EB0A                            jmp .L_end
 33280                                  .L_false:
 33281 000190C0 48B8-                           mov rax, sob_boolean_false
 33281 000190C2 [0200000000000000] 
 33282                                  .L_end:
 33283 000190CA C9                              leave
 33284 000190CB C21800                          ret AND_KILL_FRAME(1)
 33285                                  
 33286                                  L_code_ptr_is_closure:
 33287 000190CE C8000000                        enter 0, 0
 33288 000190D2 48837D1801                      cmp COUNT, 1
 33289 000190D7 0F85A1100000                    jne L_error_arg_count_1
 33290 000190DD 488B4520                        mov rax, PARAM(0)
 33291 000190E1 803804                          cmp byte [rax], T_closure
 33292 000190E4 750C                            jne .L_false
 33293 000190E6 48B8-                           mov rax, sob_boolean_true
 33293 000190E8 [0300000000000000] 
 33294 000190F0 EB0A                            jmp .L_end
 33295                                  .L_false:
 33296 000190F2 48B8-                           mov rax, sob_boolean_false
 33296 000190F4 [0200000000000000] 
 33297                                  .L_end:
 33298 000190FC C9                              leave
 33299 000190FD C21800                          ret AND_KILL_FRAME(1)
 33300                                  
 33301                                  L_code_ptr_is_real:
 33302 00019100 C8000000                        enter 0, 0
 33303 00019104 48837D1801                      cmp COUNT, 1
 33304 00019109 0F856F100000                    jne L_error_arg_count_1
 33305 0001910F 488B4520                        mov rax, PARAM(0)
 33306 00019113 803813                          cmp byte [rax], T_real
 33307 00019116 750C                            jne .L_false
 33308 00019118 48B8-                           mov rax, sob_boolean_true
 33308 0001911A [0300000000000000] 
 33309 00019122 EB0A                            jmp .L_end
 33310                                  .L_false:
 33311 00019124 48B8-                           mov rax, sob_boolean_false
 33311 00019126 [0200000000000000] 
 33312                                  .L_end:
 33313 0001912E C9                              leave
 33314 0001912F C21800                          ret AND_KILL_FRAME(1)
 33315                                  
 33316                                  L_code_ptr_is_fraction:
 33317 00019132 C8000000                        enter 0, 0
 33318 00019136 48837D1801                      cmp COUNT, 1
 33319 0001913B 0F853D100000                    jne L_error_arg_count_1
 33320 00019141 488B4520                        mov rax, PARAM(0)
 33321 00019145 803812                          cmp byte [rax], T_fraction
 33322 00019148 750C                            jne .L_false
 33323 0001914A 48B8-                           mov rax, sob_boolean_true
 33323 0001914C [0300000000000000] 
 33324 00019154 EB0A                            jmp .L_end
 33325                                  .L_false:
 33326 00019156 48B8-                           mov rax, sob_boolean_false
 33326 00019158 [0200000000000000] 
 33327                                  .L_end:
 33328 00019160 C9                              leave
 33329 00019161 C21800                          ret AND_KILL_FRAME(1)
 33330                                  
 33331                                  L_code_ptr_is_boolean:
 33332 00019164 C8000000                        enter 0, 0
 33333 00019168 48837D1801                      cmp COUNT, 1
 33334 0001916D 0F850B100000                    jne L_error_arg_count_1
 33335 00019173 488B4520                        mov rax, PARAM(0)
 33336 00019177 8A18                            mov bl, byte [rax]
 33337 00019179 80E308                          and bl, T_boolean
 33338 0001917C 740C                            je .L_false
 33339 0001917E 48B8-                           mov rax, sob_boolean_true
 33339 00019180 [0300000000000000] 
 33340 00019188 EB0A                            jmp .L_end
 33341                                  .L_false:
 33342 0001918A 48B8-                           mov rax, sob_boolean_false
 33342 0001918C [0200000000000000] 
 33343                                  .L_end:
 33344 00019194 C9                              leave
 33345 00019195 C21800                          ret AND_KILL_FRAME(1)
 33346                                          
 33347                                  L_code_ptr_is_boolean_false:
 33348 00019198 C8000000                        enter 0, 0
 33349 0001919C 48837D1801                      cmp COUNT, 1
 33350 000191A1 0F85D70F0000                    jne L_error_arg_count_1
 33351 000191A7 488B4520                        mov rax, PARAM(0)
 33352 000191AB 8A18                            mov bl, byte [rax]
 33353 000191AD 80FB09                          cmp bl, T_boolean_false
 33354 000191B0 750C                            jne .L_false
 33355 000191B2 48B8-                           mov rax, sob_boolean_true
 33355 000191B4 [0300000000000000] 
 33356 000191BC EB0A                            jmp .L_end
 33357                                  .L_false:
 33358 000191BE 48B8-                           mov rax, sob_boolean_false
 33358 000191C0 [0200000000000000] 
 33359                                  .L_end:
 33360 000191C8 C9                              leave
 33361 000191C9 C21800                          ret AND_KILL_FRAME(1)
 33362                                  
 33363                                  L_code_ptr_is_boolean_true:
 33364 000191CC C8000000                        enter 0, 0
 33365 000191D0 48837D1801                      cmp COUNT, 1
 33366 000191D5 0F85A30F0000                    jne L_error_arg_count_1
 33367 000191DB 488B4520                        mov rax, PARAM(0)
 33368 000191DF 8A18                            mov bl, byte [rax]
 33369 000191E1 80FB0A                          cmp bl, T_boolean_true
 33370 000191E4 750C                            jne .L_false
 33371 000191E6 48B8-                           mov rax, sob_boolean_true
 33371 000191E8 [0300000000000000] 
 33372 000191F0 EB0A                            jmp .L_end
 33373                                  .L_false:
 33374 000191F2 48B8-                           mov rax, sob_boolean_false
 33374 000191F4 [0200000000000000] 
 33375                                  .L_end:
 33376 000191FC C9                              leave
 33377 000191FD C21800                          ret AND_KILL_FRAME(1)
 33378                                  
 33379                                  L_code_ptr_is_number:
 33380 00019200 C8000000                        enter 0, 0
 33381 00019204 48837D1801                      cmp COUNT, 1
 33382 00019209 0F856F0F0000                    jne L_error_arg_count_1
 33383 0001920F 488B4520                        mov rax, PARAM(0)
 33384 00019213 8A18                            mov bl, byte [rax]
 33385 00019215 80E310                          and bl, T_number
 33386 00019218 740C                            jz .L_false
 33387 0001921A 48B8-                           mov rax, sob_boolean_true
 33387 0001921C [0300000000000000] 
 33388 00019224 EB0A                            jmp .L_end
 33389                                  .L_false:
 33390 00019226 48B8-                           mov rax, sob_boolean_false
 33390 00019228 [0200000000000000] 
 33391                                  .L_end:
 33392 00019230 C9                              leave
 33393 00019231 C21800                          ret AND_KILL_FRAME(1)
 33394                                          
 33395                                  L_code_ptr_is_collection:
 33396 00019234 C8000000                        enter 0, 0
 33397 00019238 48837D1801                      cmp COUNT, 1
 33398 0001923D 0F853B0F0000                    jne L_error_arg_count_1
 33399 00019243 488B4520                        mov rax, PARAM(0)
 33400 00019247 8A18                            mov bl, byte [rax]
 33401 00019249 80E320                          and bl, T_collection
 33402 0001924C 740C                            je .L_false
 33403 0001924E 48B8-                           mov rax, sob_boolean_true
 33403 00019250 [0300000000000000] 
 33404 00019258 EB0A                            jmp .L_end
 33405                                  .L_false:
 33406 0001925A 48B8-                           mov rax, sob_boolean_false
 33406 0001925C [0200000000000000] 
 33407                                  .L_end:
 33408 00019264 C9                              leave
 33409 00019265 C21800                          ret AND_KILL_FRAME(1)
 33410                                  
 33411                                  L_code_ptr_cons:
 33412 00019268 C8000000                        enter 0, 0
 33413 0001926C 48837D1802                      cmp COUNT, 2
 33414 00019271 0F853C0F0000                    jne L_error_arg_count_2
 33415 00019277 BF11000000                      mov rdi, (1 + 8 + 8)
 33416 0001927C E843F2FFFF                      call malloc
 33417 00019281 C60021                          mov byte [rax], T_pair
 33418 00019284 488B5D20                        mov rbx, PARAM(0)
 33419 00019288 48895801                        mov SOB_PAIR_CAR(rax), rbx
 33420 0001928C 488B5D28                        mov rbx, PARAM(1)
 33421 00019290 48895809                        mov SOB_PAIR_CDR(rax), rbx
 33422 00019294 C9                              leave
 33423 00019295 C22000                          ret AND_KILL_FRAME(2)
 33424                                  
 33425                                  L_code_ptr_display_sexpr:
 33426 00019298 C8000000                        enter 0, 0
 33427 0001929C 48837D1801                      cmp COUNT, 1
 33428 000192A1 0F85D70E0000                    jne L_error_arg_count_1
 33429 000192A7 488B7D20                        mov rdi, PARAM(0)
 33430 000192AB E895F4FFFF                      call print_sexpr
 33431 000192B0 48B8-                           mov rax, sob_void
 33431 000192B2 [0000000000000000] 
 33432 000192BA C9                              leave
 33433 000192BB C21800                          ret AND_KILL_FRAME(1)
 33434                                  
 33435                                  L_code_ptr_write_char:
 33436 000192BE C8000000                        enter 0, 0
 33437 000192C2 48837D1801                      cmp COUNT, 1
 33438 000192C7 0F85B10E0000                    jne L_error_arg_count_1
 33439 000192CD 488B4520                        mov rax, PARAM(0)
 33440                                          assert_char(rax)
    53 000192D1 803802              <1>  cmp byte [%1], %2
    54 000192D4 0F85780F0000        <1>  jne L_error_incorrect_type
 33441 000192DA 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 33442 000192DD 4825FF000000                    and rax, 255
 33443 000192E3 48BF-                           mov rdi, fmt_char
 33443 000192E5 [231C000000000000] 
 33444 000192ED 4889C6                          mov rsi, rax
 33445 000192F0 B800000000                      mov rax, 0
 33446                                          ENTER
    44 000192F5 C8000000            <1>  enter 0, 0
    45 000192F9 4883E4F0            <1>  and rsp, ~15
 33447 000192FD E8(00000000)                    call printf
 33448                                          LEAVE
    49 00019302 C9                  <1>  leave
 33449 00019303 48B8-                           mov rax, sob_void
 33449 00019305 [0000000000000000] 
 33450 0001930D C9                              leave
 33451 0001930E C21800                          ret AND_KILL_FRAME(1)
 33452                                  
 33453                                  L_code_ptr_car:
 33454 00019311 C8000000                        enter 0, 0
 33455 00019315 48837D1801                      cmp COUNT, 1
 33456 0001931A 0F855E0E0000                    jne L_error_arg_count_1
 33457 00019320 488B4520                        mov rax, PARAM(0)
 33458                                          assert_pair(rax)
    53 00019324 803821              <1>  cmp byte [%1], %2
    54 00019327 0F85250F0000        <1>  jne L_error_incorrect_type
 33459 0001932D 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 33460 00019331 C9                              leave
 33461 00019332 C21800                          ret AND_KILL_FRAME(1)
 33462                                          
 33463                                  L_code_ptr_cdr:
 33464 00019335 C8000000                        enter 0, 0
 33465 00019339 48837D1801                      cmp COUNT, 1
 33466 0001933E 0F853A0E0000                    jne L_error_arg_count_1
 33467 00019344 488B4520                        mov rax, PARAM(0)
 33468                                          assert_pair(rax)
    53 00019348 803821              <1>  cmp byte [%1], %2
    54 0001934B 0F85010F0000        <1>  jne L_error_incorrect_type
 33469 00019351 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 33470 00019355 C9                              leave
 33471 00019356 C21800                          ret AND_KILL_FRAME(1)
 33472                                          
 33473                                  L_code_ptr_string_length:
 33474 00019359 C8000000                        enter 0, 0
 33475 0001935D 48837D1801                      cmp COUNT, 1
 33476 00019362 0F85160E0000                    jne L_error_arg_count_1
 33477 00019368 488B4520                        mov rax, PARAM(0)
 33478                                          assert_string(rax)
    53 0001936C 803803              <1>  cmp byte [%1], %2
    54 0001936F 0F85DD0E0000        <1>  jne L_error_incorrect_type
 33479 00019375 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 33480 00019379 E84F0D0000                      call make_integer
 33481 0001937E C9                              leave
 33482 0001937F C21800                          ret AND_KILL_FRAME(1)
 33483                                  
 33484                                  L_code_ptr_vector_length:
 33485 00019382 C8000000                        enter 0, 0
 33486 00019386 48837D1801                      cmp COUNT, 1
 33487 0001938B 0F85ED0D0000                    jne L_error_arg_count_1
 33488 00019391 488B4520                        mov rax, PARAM(0)
 33489                                          assert_vector(rax)
    53 00019395 803822              <1>  cmp byte [%1], %2
    54 00019398 0F85B40E0000        <1>  jne L_error_incorrect_type
 33490 0001939E 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 33491 000193A2 E8260D0000                      call make_integer
 33492 000193A7 C9                              leave
 33493 000193A8 C21800                          ret AND_KILL_FRAME(1)
 33494                                  
 33495                                  L_code_ptr_real_to_integer:
 33496 000193AB C8000000                        enter 0, 0
 33497 000193AF 48837D1801                      cmp COUNT, 1
 33498 000193B4 0F85C40D0000                    jne L_error_arg_count_1
 33499 000193BA 488B5D20                        mov rbx, PARAM(0)
 33500                                          assert_real(rbx)
    53 000193BE 803B13              <1>  cmp byte [%1], %2
    54 000193C1 0F858B0E0000        <1>  jne L_error_incorrect_type
 33501 000193C7 F20F104301                      movsd xmm0, qword [rbx + 1]
 33502 000193CC F2480F2CF8                      cvttsd2si rdi, xmm0
 33503 000193D1 E8F70C0000                      call make_integer
 33504 000193D6 C9                              leave
 33505 000193D7 C21800                          ret AND_KILL_FRAME(1)
 33506                                  
 33507                                  L_code_ptr_exit:
 33508 000193DA C8000000                        enter 0, 0
 33509 000193DE 48837D1800                      cmp COUNT, 0
 33510 000193E3 0F85600D0000                    jne L_error_arg_count_0
 33511 000193E9 B800000000                      mov rax, 0
 33512 000193EE E8(00000000)                    call exit
 33513                                  
 33514                                  L_code_ptr_integer_to_real:
 33515 000193F3 C8000000                        enter 0, 0
 33516 000193F7 48837D1801                      cmp COUNT, 1
 33517 000193FC 0F857C0D0000                    jne L_error_arg_count_1
 33518 00019402 488B4520                        mov rax, PARAM(0)
 33519                                          assert_integer(rax)
    53 00019406 803811              <1>  cmp byte [%1], %2
    54 00019409 0F85430E0000        <1>  jne L_error_incorrect_type
 33520 0001940F FF7001                          push qword [rax + 1]
 33521 00019412 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 33522 00019418 E8980C0000                      call make_real
 33523 0001941D C9                              leave
 33524 0001941E C21800                          ret AND_KILL_FRAME(1)
 33525                                  
 33526                                  L_code_ptr_fraction_to_real:
 33527 00019421 C8000000                        enter 0, 0
 33528 00019425 48837D1801                      cmp COUNT, 1
 33529 0001942A 0F854E0D0000                    jne L_error_arg_count_1
 33530 00019430 488B4520                        mov rax, PARAM(0)
 33531                                          assert_fraction(rax)
    53 00019434 803812              <1>  cmp byte [%1], %2
    54 00019437 0F85150E0000        <1>  jne L_error_incorrect_type
 33532 0001943D FF7001                          push qword [rax + 1]
 33533 00019440 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 33534 00019446 FF7009                          push qword [rax + 1 + 8]
 33535 00019449 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 33536 0001944F F20F5EC1                        divsd xmm0, xmm1
 33537 00019453 E85D0C0000                      call make_real
 33538 00019458 C9                              leave
 33539 00019459 C21800                          ret AND_KILL_FRAME(1)
 33540                                  
 33541                                  L_code_ptr_char_to_integer:
 33542 0001945C C8000000                        enter 0, 0
 33543 00019460 48837D1801                      cmp COUNT, 1
 33544 00019465 0F85130D0000                    jne L_error_arg_count_1
 33545 0001946B 488B4520                        mov rax, PARAM(0)
 33546                                          assert_char(rax)
    53 0001946F 803802              <1>  cmp byte [%1], %2
    54 00019472 0F85DA0D0000        <1>  jne L_error_incorrect_type
 33547 00019478 8A4001                          mov al, byte [rax + 1]
 33548 0001947B 4825FF000000                    and rax, 255
 33549 00019481 4889C7                          mov rdi, rax
 33550 00019484 E8440C0000                      call make_integer
 33551 00019489 C9                              leave
 33552 0001948A C21800                          ret AND_KILL_FRAME(1)
 33553                                  
 33554                                  L_code_ptr_integer_to_fraction:
 33555 0001948D C8000000                        enter 0, 0
 33556 00019491 48837D1801                      cmp COUNT, 1
 33557 00019496 0F85E20C0000                    jne L_error_arg_count_1
 33558 0001949C 4C8B4520                        mov r8, PARAM(0)
 33559                                          assert_integer(r8)
    53 000194A0 41803811            <1>  cmp byte [%1], %2
    54 000194A4 0F85A80D0000        <1>  jne L_error_incorrect_type
 33560 000194AA BF11000000                      mov rdi, (1 + 8 + 8)
 33561 000194AF E810F0FFFF                      call malloc
 33562 000194B4 498B5801                        mov rbx, qword [r8 + 1]
 33563 000194B8 C60012                          mov byte [rax], T_fraction
 33564 000194BB 48895801                        mov qword [rax + 1], rbx
 33565 000194BF 48C7400901000000                mov qword [rax + 1 + 8], 1
 33566 000194C7 C9                              leave
 33567 000194C8 C21800                          ret AND_KILL_FRAME(1)
 33568                                  
 33569                                  L_code_ptr_integer_to_char:
 33570 000194CB C8000000                        enter 0, 0
 33571 000194CF 48837D1801                      cmp COUNT, 1
 33572 000194D4 0F85A40C0000                    jne L_error_arg_count_1
 33573 000194DA 488B4520                        mov rax, PARAM(0)
 33574                                          assert_integer(rax)
    53 000194DE 803811              <1>  cmp byte [%1], %2
    54 000194E1 0F856B0D0000        <1>  jne L_error_incorrect_type
 33575 000194E7 488B5801                        mov rbx, qword [rax + 1]
 33576 000194EB 4883FB00                        cmp rbx, 0
 33577 000194EF 0F8EF20B0000                    jle L_error_integer_range
 33578 000194F5 4881FB00010000                  cmp rbx, 256
 33579 000194FC 0F8DE50B0000                    jge L_error_integer_range
 33580 00019502 BF02000000                      mov rdi, (1 + 1)
 33581 00019507 E8B8EFFFFF                      call malloc
 33582 0001950C C60002                          mov byte [rax], T_char
 33583 0001950F 885801                          mov byte [rax + 1], bl
 33584 00019512 C9                              leave
 33585 00019513 C21800                          ret AND_KILL_FRAME(1)
 33586                                  
 33587                                  L_code_ptr_trng:
 33588 00019516 C8000000                        enter 0, 0
 33589 0001951A 48837D1800                      cmp COUNT, 0
 33590 0001951F 0F85240C0000                    jne L_error_arg_count_0
 33591 00019525 480FC7F7                        rdrand rdi
 33592 00019529 48D1EF                          shr rdi, 1
 33593 0001952C E89C0B0000                      call make_integer
 33594 00019531 C9                              leave
 33595 00019532 C21000                          ret AND_KILL_FRAME(0)
 33596                                  
 33597                                  L_code_ptr_is_zero:
 33598 00019535 C8000000                        enter 0, 0
 33599 00019539 48837D1801                      cmp COUNT, 1
 33600 0001953E 0F853A0C0000                    jne L_error_arg_count_1
 33601 00019544 488B4520                        mov rax, PARAM(0)
 33602 00019548 803811                          cmp byte [rax], T_integer
 33603 0001954B 740F                            je .L_integer
 33604 0001954D 803812                          cmp byte [rax], T_fraction
 33605 00019550 7413                            je .L_fraction
 33606 00019552 803813                          cmp byte [rax], T_real
 33607 00019555 7417                            je .L_real
 33608 00019557 E9F60C0000                      jmp L_error_incorrect_type
 33609                                  .L_integer:
 33610 0001955C 4883780100                      cmp qword [rax + 1], 0
 33611 00019561 7429                            je .L_zero
 33612 00019563 EB1B                            jmp .L_not_zero
 33613                                  .L_fraction:
 33614 00019565 4883780100                      cmp qword [rax + 1], 0
 33615 0001956A 7420                            je .L_zero
 33616 0001956C EB12                            jmp .L_not_zero
 33617                                  .L_real:
 33618 0001956E 660FEFC0                        pxor xmm0, xmm0
 33619 00019572 FF7001                          push qword [rax + 1]
 33620 00019575 F20F100C24                      movsd xmm1, qword [rsp]
 33621 0001957A 660F2EC1                        ucomisd xmm0, xmm1
 33622 0001957E 740C                            je .L_zero
 33623                                  .L_not_zero:
 33624 00019580 48B8-                           mov rax, sob_boolean_false
 33624 00019582 [0200000000000000] 
 33625 0001958A EB0A                            jmp .L_end
 33626                                  .L_zero:
 33627 0001958C 48B8-                           mov rax, sob_boolean_true
 33627 0001958E [0300000000000000] 
 33628                                  .L_end:
 33629 00019596 C9                              leave
 33630 00019597 C21800                          ret AND_KILL_FRAME(1)
 33631                                  
 33632                                  L_code_ptr_is_integer:
 33633 0001959A C8000000                        enter 0, 0
 33634 0001959E 48837D1801                      cmp COUNT, 1
 33635 000195A3 0F85D50B0000                    jne L_error_arg_count_1
 33636 000195A9 488B4520                        mov rax, PARAM(0)
 33637 000195AD 803811                          cmp byte [rax], T_integer
 33638 000195B0 750C                            jne .L_false
 33639 000195B2 48B8-                           mov rax, sob_boolean_true
 33639 000195B4 [0300000000000000] 
 33640 000195BC EB0A                            jmp .L_exit
 33641                                  .L_false:
 33642 000195BE 48B8-                           mov rax, sob_boolean_false
 33642 000195C0 [0200000000000000] 
 33643                                  .L_exit:
 33644 000195C8 C9                              leave
 33645 000195C9 C21800                          ret AND_KILL_FRAME(1)
 33646                                  
 33647                                  L_code_ptr_raw_bin_add_rr:
 33648 000195CC C8000000                        enter 0, 0
 33649 000195D0 48837D1802                      cmp COUNT, 2
 33650 000195D5 0F85D80B0000                    jne L_error_arg_count_2
 33651 000195DB 488B5D20                        mov rbx, PARAM(0)
 33652                                          assert_real(rbx)
    53 000195DF 803B13              <1>  cmp byte [%1], %2
    54 000195E2 0F856A0C0000        <1>  jne L_error_incorrect_type
 33653 000195E8 488B4D28                        mov rcx, PARAM(1)
 33654                                          assert_real(rcx)
    53 000195EC 803913              <1>  cmp byte [%1], %2
    54 000195EF 0F855D0C0000        <1>  jne L_error_incorrect_type
 33655 000195F5 F20F104301                      movsd xmm0, qword [rbx + 1]
 33656 000195FA F20F104901                      movsd xmm1, qword [rcx + 1]
 33657 000195FF F20F58C1                        addsd xmm0, xmm1
 33658 00019603 E8AD0A0000                      call make_real
 33659 00019608 C9                              leave
 33660 00019609 C22000                          ret AND_KILL_FRAME(2)
 33661                                  
 33662                                  L_code_ptr_raw_bin_sub_rr:
 33663 0001960C C8000000                        enter 0, 0
 33664 00019610 48837D1802                      cmp COUNT, 2
 33665 00019615 0F85980B0000                    jne L_error_arg_count_2
 33666 0001961B 488B5D20                        mov rbx, PARAM(0)
 33667                                          assert_real(rbx)
    53 0001961F 803B13              <1>  cmp byte [%1], %2
    54 00019622 0F852A0C0000        <1>  jne L_error_incorrect_type
 33668 00019628 488B4D28                        mov rcx, PARAM(1)
 33669                                          assert_real(rcx)
    53 0001962C 803913              <1>  cmp byte [%1], %2
    54 0001962F 0F851D0C0000        <1>  jne L_error_incorrect_type
 33670 00019635 F20F104301                      movsd xmm0, qword [rbx + 1]
 33671 0001963A F20F104901                      movsd xmm1, qword [rcx + 1]
 33672 0001963F F20F5CC1                        subsd xmm0, xmm1
 33673 00019643 E86D0A0000                      call make_real
 33674 00019648 C9                              leave
 33675 00019649 C22000                          ret AND_KILL_FRAME(2)
 33676                                  
 33677                                  L_code_ptr_raw_bin_mul_rr:
 33678 0001964C C8000000                        enter 0, 0
 33679 00019650 48837D1802                      cmp COUNT, 2
 33680 00019655 0F85580B0000                    jne L_error_arg_count_2
 33681 0001965B 488B5D20                        mov rbx, PARAM(0)
 33682                                          assert_real(rbx)
    53 0001965F 803B13              <1>  cmp byte [%1], %2
    54 00019662 0F85EA0B0000        <1>  jne L_error_incorrect_type
 33683 00019668 488B4D28                        mov rcx, PARAM(1)
 33684                                          assert_real(rcx)
    53 0001966C 803913              <1>  cmp byte [%1], %2
    54 0001966F 0F85DD0B0000        <1>  jne L_error_incorrect_type
 33685 00019675 F20F104301                      movsd xmm0, qword [rbx + 1]
 33686 0001967A F20F104901                      movsd xmm1, qword [rcx + 1]
 33687 0001967F F20F59C1                        mulsd xmm0, xmm1
 33688 00019683 E82D0A0000                      call make_real
 33689 00019688 C9                              leave
 33690 00019689 C22000                          ret AND_KILL_FRAME(2)
 33691                                  
 33692                                  L_code_ptr_raw_bin_div_rr:
 33693 0001968C C8000000                        enter 0, 0
 33694 00019690 48837D1802                      cmp COUNT, 2
 33695 00019695 0F85180B0000                    jne L_error_arg_count_2
 33696 0001969B 488B5D20                        mov rbx, PARAM(0)
 33697                                          assert_real(rbx)
    53 0001969F 803B13              <1>  cmp byte [%1], %2
    54 000196A2 0F85AA0B0000        <1>  jne L_error_incorrect_type
 33698 000196A8 488B4D28                        mov rcx, PARAM(1)
 33699                                          assert_real(rcx)
    53 000196AC 803913              <1>  cmp byte [%1], %2
    54 000196AF 0F859D0B0000        <1>  jne L_error_incorrect_type
 33700 000196B5 F20F104301                      movsd xmm0, qword [rbx + 1]
 33701 000196BA F20F104901                      movsd xmm1, qword [rcx + 1]
 33702 000196BF 660FEFD2                        pxor xmm2, xmm2
 33703 000196C3 660F2ECA                        ucomisd xmm1, xmm2
 33704 000196C7 0F84B60B0000                    je L_error_division_by_zero
 33705 000196CD F20F5EC1                        divsd xmm0, xmm1
 33706 000196D1 E8DF090000                      call make_real
 33707 000196D6 C9                              leave
 33708 000196D7 C22000                          ret AND_KILL_FRAME(2)
 33709                                  
 33710                                  L_code_ptr_raw_bin_add_zz:
 33711 000196DA C8000000                	enter 0, 0
 33712 000196DE 48837D1802              	cmp COUNT, 2
 33713 000196E3 0F85CA0A0000            	jne L_error_arg_count_2
 33714 000196E9 4C8B4520                	mov r8, PARAM(0)
 33715                                  	assert_integer(r8)
    53 000196ED 41803811            <1>  cmp byte [%1], %2
    54 000196F1 0F855B0B0000        <1>  jne L_error_incorrect_type
 33716 000196F7 4C8B4D28                	mov r9, PARAM(1)
 33717                                  	assert_integer(r9)
    53 000196FB 41803911            <1>  cmp byte [%1], %2
    54 000196FF 0F854D0B0000        <1>  jne L_error_incorrect_type
 33718 00019705 498B7801                	mov rdi, qword [r8 + 1]
 33719 00019709 49037901                	add rdi, qword [r9 + 1]
 33720 0001970D E8BB090000              	call make_integer
 33721 00019712 C9                      	leave
 33722 00019713 C22000                  	ret AND_KILL_FRAME(2)
 33723                                  
 33724                                  L_code_ptr_raw_bin_add_qq:
 33725 00019716 C8000000                        enter 0, 0
 33726 0001971A 48837D1802                      cmp COUNT, 2
 33727 0001971F 0F858E0A0000                    jne L_error_arg_count_2
 33728 00019725 4C8B4520                        mov r8, PARAM(0)
 33729                                          assert_fraction(r8)
    53 00019729 41803812            <1>  cmp byte [%1], %2
    54 0001972D 0F851F0B0000        <1>  jne L_error_incorrect_type
 33730 00019733 4C8B4D28                        mov r9, PARAM(1)
 33731                                          assert_fraction(r9)
    53 00019737 41803912            <1>  cmp byte [%1], %2
    54 0001973B 0F85110B0000        <1>  jne L_error_incorrect_type
 33732 00019741 498B4001                        mov rax, qword [r8 + 1] ; num1
 33733 00019745 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33734 00019749 4899                            cqo
 33735 0001974B 48F7EB                          imul rbx
 33736 0001974E 4889C6                          mov rsi, rax
 33737 00019751 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33738 00019755 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33739 00019759 4899                            cqo
 33740 0001975B 48F7EB                          imul rbx
 33741 0001975E 4801C6                          add rsi, rax
 33742 00019761 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33743 00019765 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33744 00019769 4899                            cqo
 33745 0001976B 48F7EB                          imul rbx
 33746 0001976E 4889C7                          mov rdi, rax
 33747 00019771 E8DE010000                      call normalize_fraction
 33748 00019776 C9                              leave
 33749 00019777 C22000                          ret AND_KILL_FRAME(2)
 33750                                  
 33751                                  L_code_ptr_raw_bin_sub_zz:
 33752 0001977A C8000000                	enter 0, 0
 33753 0001977E 48837D1802              	cmp COUNT, 2
 33754 00019783 0F852A0A0000            	jne L_error_arg_count_2
 33755 00019789 4C8B4520                	mov r8, PARAM(0)
 33756                                  	assert_integer(r8)
    53 0001978D 41803811            <1>  cmp byte [%1], %2
    54 00019791 0F85BB0A0000        <1>  jne L_error_incorrect_type
 33757 00019797 4C8B4D28                	mov r9, PARAM(1)
 33758                                  	assert_integer(r9)
    53 0001979B 41803911            <1>  cmp byte [%1], %2
    54 0001979F 0F85AD0A0000        <1>  jne L_error_incorrect_type
 33759 000197A5 498B7801                	mov rdi, qword [r8 + 1]
 33760 000197A9 492B7901                	sub rdi, qword [r9 + 1]
 33761 000197AD E81B090000              	call make_integer
 33762 000197B2 C9                      	leave
 33763 000197B3 C22000                  	ret AND_KILL_FRAME(2)
 33764                                  
 33765                                  L_code_ptr_raw_bin_sub_qq:
 33766 000197B6 C8000000                        enter 0, 0
 33767 000197BA 48837D1802                      cmp COUNT, 2
 33768 000197BF 0F85EE090000                    jne L_error_arg_count_2
 33769 000197C5 4C8B4520                        mov r8, PARAM(0)
 33770                                          assert_fraction(r8)
    53 000197C9 41803812            <1>  cmp byte [%1], %2
    54 000197CD 0F857F0A0000        <1>  jne L_error_incorrect_type
 33771 000197D3 4C8B4D28                        mov r9, PARAM(1)
 33772                                          assert_fraction(r9)
    53 000197D7 41803912            <1>  cmp byte [%1], %2
    54 000197DB 0F85710A0000        <1>  jne L_error_incorrect_type
 33773 000197E1 498B4001                        mov rax, qword [r8 + 1] ; num1
 33774 000197E5 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33775 000197E9 4899                            cqo
 33776 000197EB 48F7EB                          imul rbx
 33777 000197EE 4889C6                          mov rsi, rax
 33778 000197F1 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33779 000197F5 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 33780 000197F9 4899                            cqo
 33781 000197FB 48F7EB                          imul rbx
 33782 000197FE 4829C6                          sub rsi, rax
 33783 00019801 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33784 00019805 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33785 00019809 4899                            cqo
 33786 0001980B 48F7EB                          imul rbx
 33787 0001980E 4889C7                          mov rdi, rax
 33788 00019811 E83E010000                      call normalize_fraction
 33789 00019816 C9                              leave
 33790 00019817 C22000                          ret AND_KILL_FRAME(2)
 33791                                  
 33792                                  L_code_ptr_raw_bin_mul_zz:
 33793 0001981A C8000000                	enter 0, 0
 33794 0001981E 48837D1802              	cmp COUNT, 2
 33795 00019823 0F858A090000            	jne L_error_arg_count_2
 33796 00019829 4C8B4520                	mov r8, PARAM(0)
 33797                                  	assert_integer(r8)
    53 0001982D 41803811            <1>  cmp byte [%1], %2
    54 00019831 0F851B0A0000        <1>  jne L_error_incorrect_type
 33798 00019837 4C8B4D28                	mov r9, PARAM(1)
 33799                                  	assert_integer(r9)
    53 0001983B 41803911            <1>  cmp byte [%1], %2
    54 0001983F 0F850D0A0000        <1>  jne L_error_incorrect_type
 33800 00019845 4899                    	cqo
 33801 00019847 498B4001                	mov rax, qword [r8 + 1]
 33802 0001984B 49F76101                	mul qword [r9 + 1]
 33803 0001984F 4889C7                  	mov rdi, rax
 33804 00019852 E876080000              	call make_integer
 33805 00019857 C9                      	leave
 33806 00019858 C22000                  	ret AND_KILL_FRAME(2)
 33807                                  
 33808                                  L_code_ptr_raw_bin_mul_qq:
 33809 0001985B C8000000                        enter 0, 0
 33810 0001985F 48837D1802                      cmp COUNT, 2
 33811 00019864 0F8549090000                    jne L_error_arg_count_2
 33812 0001986A 4C8B4520                        mov r8, PARAM(0)
 33813                                          assert_fraction(r8)
    53 0001986E 41803812            <1>  cmp byte [%1], %2
    54 00019872 0F85DA090000        <1>  jne L_error_incorrect_type
 33814 00019878 4C8B4D28                        mov r9, PARAM(1)
 33815                                          assert_fraction(r9)
    53 0001987C 41803912            <1>  cmp byte [%1], %2
    54 00019880 0F85CC090000        <1>  jne L_error_incorrect_type
 33816 00019886 498B4001                        mov rax, qword [r8 + 1] ; num1
 33817 0001988A 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33818 0001988E 4899                            cqo
 33819 00019890 48F7EB                          imul rbx
 33820 00019893 4889C6                          mov rsi, rax
 33821 00019896 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33822 0001989A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 33823 0001989E 4899                            cqo
 33824 000198A0 48F7EB                          imul rbx
 33825 000198A3 4889C7                          mov rdi, rax
 33826 000198A6 E8A9000000                      call normalize_fraction
 33827 000198AB C9                              leave
 33828 000198AC C22000                          ret AND_KILL_FRAME(2)
 33829                                          
 33830                                  L_code_ptr_raw_bin_div_zz:
 33831 000198AF C8000000                	enter 0, 0
 33832 000198B3 48837D1802              	cmp COUNT, 2
 33833 000198B8 0F85F5080000            	jne L_error_arg_count_2
 33834 000198BE 4C8B4520                	mov r8, PARAM(0)
 33835                                  	assert_integer(r8)
    53 000198C2 41803811            <1>  cmp byte [%1], %2
    54 000198C6 0F8586090000        <1>  jne L_error_incorrect_type
 33836 000198CC 4C8B4D28                	mov r9, PARAM(1)
 33837                                  	assert_integer(r9)
    53 000198D0 41803911            <1>  cmp byte [%1], %2
    54 000198D4 0F8578090000        <1>  jne L_error_incorrect_type
 33838 000198DA 498B7901                	mov rdi, qword [r9 + 1]
 33839 000198DE 4883FF00                	cmp rdi, 0
 33840 000198E2 0F849B090000            	je L_error_division_by_zero
 33841 000198E8 498B7001                	mov rsi, qword [r8 + 1]
 33842 000198EC E863000000              	call normalize_fraction
 33843 000198F1 C9                      	leave
 33844 000198F2 C22000                  	ret AND_KILL_FRAME(2)
 33845                                  
 33846                                  L_code_ptr_raw_bin_div_qq:
 33847 000198F5 C8000000                        enter 0, 0
 33848 000198F9 48837D1802                      cmp COUNT, 2
 33849 000198FE 0F85AF080000                    jne L_error_arg_count_2
 33850 00019904 4C8B4520                        mov r8, PARAM(0)
 33851                                          assert_fraction(r8)
    53 00019908 41803812            <1>  cmp byte [%1], %2
    54 0001990C 0F8540090000        <1>  jne L_error_incorrect_type
 33852 00019912 4C8B4D28                        mov r9, PARAM(1)
 33853                                          assert_fraction(r9)
    53 00019916 41803912            <1>  cmp byte [%1], %2
    54 0001991A 0F8532090000        <1>  jne L_error_incorrect_type
 33854 00019920 4983790100                      cmp qword [r9 + 1], 0
 33855 00019925 0F8458090000                    je L_error_division_by_zero
 33856 0001992B 498B4001                        mov rax, qword [r8 + 1] ; num1
 33857 0001992F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 33858 00019933 4899                            cqo
 33859 00019935 48F7EB                          imul rbx
 33860 00019938 4889C6                          mov rsi, rax
 33861 0001993B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 33862 0001993F 498B5901                        mov rbx, qword [r9 + 1] ; num2
 33863 00019943 4899                            cqo
 33864 00019945 48F7EB                          imul rbx
 33865 00019948 4889C7                          mov rdi, rax
 33866 0001994B E804000000                      call normalize_fraction
 33867 00019950 C9                              leave
 33868 00019951 C22000                          ret AND_KILL_FRAME(2)
 33869                                          
 33870                                  normalize_fraction:
 33871 00019954 56                              push rsi
 33872 00019955 57                              push rdi
 33873 00019956 E859000000                      call gcd
 33874 0001995B 4889C3                          mov rbx, rax
 33875 0001995E 58                              pop rax
 33876 0001995F 4899                            cqo
 33877 00019961 48F7FB                          idiv rbx
 33878 00019964 4989C0                          mov r8, rax
 33879 00019967 58                              pop rax
 33880 00019968 4899                            cqo
 33881 0001996A 48F7FB                          idiv rbx
 33882 0001996D 4989C1                          mov r9, rax
 33883 00019970 4983F900                        cmp r9, 0
 33884 00019974 741C                            je .L_zero
 33885 00019976 4983F801                        cmp r8, 1
 33886 0001997A 7421                            je .L_int
 33887 0001997C BF11000000                      mov rdi, (1 + 8 + 8)
 33888 00019981 E83EEBFFFF                      call malloc
 33889 00019986 C60012                          mov byte [rax], T_fraction
 33890 00019989 4C894801                        mov qword [rax + 1], r9
 33891 0001998D 4C894009                        mov qword [rax + 1 + 8], r8
 33892 00019991 C3                              ret
 33893                                  .L_zero:
 33894 00019992 BF00000000                      mov rdi, 0
 33895 00019997 E831070000                      call make_integer
 33896 0001999C C3                              ret
 33897                                  .L_int:
 33898 0001999D 4C89CF                          mov rdi, r9
 33899 000199A0 E828070000                      call make_integer
 33900 000199A5 C3                              ret
 33901                                  
 33902                                  iabs:
 33903 000199A6 4889F8                          mov rax, rdi
 33904 000199A9 4883F800                        cmp rax, 0
 33905 000199AD 7C01                            jl .Lneg
 33906 000199AF C3                              ret
 33907                                  .Lneg:
 33908 000199B0 48F7D8                          neg rax
 33909 000199B3 C3                              ret
 33910                                  
 33911                                  gcd:
 33912 000199B4 E8EDFFFFFF                      call iabs
 33913 000199B9 4889C3                          mov rbx, rax
 33914 000199BC 4889F7                          mov rdi, rsi
 33915 000199BF E8E2FFFFFF                      call iabs
 33916 000199C4 4883F800                        cmp rax, 0
 33917 000199C8 7502                            jne .L0
 33918 000199CA 4893                            xchg rax, rbx
 33919                                  .L0:
 33920 000199CC 4883FB00                        cmp rbx, 0
 33921 000199D0 740C                            je .L1
 33922 000199D2 4899                            cqo
 33923 000199D4 48F7F3                          div rbx
 33924 000199D7 4889D0                          mov rax, rdx
 33925 000199DA 4893                            xchg rax, rbx
 33926 000199DC EBEE                            jmp .L0
 33927                                  .L1:
 33928 000199DE C3                              ret
 33929                                  
 33930                                  L_code_ptr_error:
 33931 000199DF C8000000                        enter 0, 0
 33932 000199E3 48837D1802                      cmp COUNT, 2
 33933 000199E8 0F85C5070000                    jne L_error_arg_count_2
 33934 000199EE 488B7520                        mov rsi, PARAM(0)
 33935                                          assert_interned_symbol(rsi)
    53 000199F2 803E41              <1>  cmp byte [%1], %2
    54 000199F5 0F8557080000        <1>  jne L_error_incorrect_type
 33936 000199FB 488B7528                        mov rsi, PARAM(1)
 33937                                          assert_string(rsi)
    53 000199FF 803E03              <1>  cmp byte [%1], %2
    54 00019A02 0F854A080000        <1>  jne L_error_incorrect_type
 33938 00019A08 48BF-                           mov rdi, fmt_scheme_error_part_1
 33938 00019A0A [811D000000000000] 
 33939 00019A12 B800000000                      mov rax, 0
 33940                                          ENTER
    44 00019A17 C8000000            <1>  enter 0, 0
    45 00019A1B 4883E4F0            <1>  and rsp, ~15
 33941 00019A1F E8(00000000)                    call printf
 33942                                          LEAVE
    49 00019A24 C9                  <1>  leave
 33943 00019A25 488B7D20                        mov rdi, PARAM(0)
 33944 00019A29 E817EDFFFF                      call print_sexpr
 33945 00019A2E 48BF-                           mov rdi, fmt_scheme_error_part_2
 33945 00019A30 [951D000000000000] 
 33946 00019A38 B800000000                      mov rax, 0
 33947                                          ENTER
    44 00019A3D C8000000            <1>  enter 0, 0
    45 00019A41 4883E4F0            <1>  and rsp, ~15
 33948 00019A45 E8(00000000)                    call printf
 33949                                          LEAVE
    49 00019A4A C9                  <1>  leave
 33950 00019A4B 488B4528                        mov rax, PARAM(1)       ; sob_string
 33951 00019A4F BE01000000                      mov rsi, 1              ; size = 1 byte
 33952 00019A54 488B5001                        mov rdx, qword [rax + 1] ; length
 33953 00019A58 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 33954 00019A5C 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 33955                                  	ENTER
    44 00019A64 C8000000            <1>  enter 0, 0
    45 00019A68 4883E4F0            <1>  and rsp, ~15
 33956 00019A6C E8(00000000)                    call fwrite
 33957                                  	LEAVE
    49 00019A71 C9                  <1>  leave
 33958 00019A72 48BF-                           mov rdi, fmt_scheme_error_part_3
 33958 00019A74 [D71D000000000000] 
 33959 00019A7C B800000000                      mov rax, 0
 33960                                          ENTER
    44 00019A81 C8000000            <1>  enter 0, 0
    45 00019A85 4883E4F0            <1>  and rsp, ~15
 33961 00019A89 E8(00000000)                    call printf
 33962                                          LEAVE
    49 00019A8E C9                  <1>  leave
 33963 00019A8F 48C7C0F7FFFFFF                  mov rax, -9
 33964 00019A96 E8(00000000)                    call exit
 33965                                  
 33966                                  L_code_ptr_raw_less_than_rr:
 33967 00019A9B C8000000                        enter 0, 0
 33968 00019A9F 48837D1802                      cmp COUNT, 2
 33969 00019AA4 0F8509070000                    jne L_error_arg_count_2
 33970 00019AAA 488B7520                        mov rsi, PARAM(0)
 33971                                          assert_real(rsi)
    53 00019AAE 803E13              <1>  cmp byte [%1], %2
    54 00019AB1 0F859B070000        <1>  jne L_error_incorrect_type
 33972 00019AB7 488B7D28                        mov rdi, PARAM(1)
 33973                                          assert_real(rdi)
    53 00019ABB 803F13              <1>  cmp byte [%1], %2
    54 00019ABE 0F858E070000        <1>  jne L_error_incorrect_type
 33974 00019AC4 F20F104601                      movsd xmm0, qword [rsi + 1]
 33975 00019AC9 F20F104F01                      movsd xmm1, qword [rdi + 1]
 33976 00019ACE 660F2FC1                        comisd xmm0, xmm1
 33977 00019AD2 730C                            jae .L_false
 33978 00019AD4 48B8-                           mov rax, sob_boolean_true
 33978 00019AD6 [0300000000000000] 
 33979 00019ADE EB0A                            jmp .L_exit
 33980                                  .L_false:
 33981 00019AE0 48B8-                           mov rax, sob_boolean_false
 33981 00019AE2 [0200000000000000] 
 33982                                  .L_exit:
 33983 00019AEA C9                              leave
 33984 00019AEB C22000                          ret AND_KILL_FRAME(2)
 33985                                          
 33986                                  L_code_ptr_raw_less_than_zz:
 33987 00019AEE C8000000                	enter 0, 0
 33988 00019AF2 48837D1802              	cmp COUNT, 2
 33989 00019AF7 0F85B6060000            	jne L_error_arg_count_2
 33990 00019AFD 4C8B4520                	mov r8, PARAM(0)
 33991                                  	assert_integer(r8)
    53 00019B01 41803811            <1>  cmp byte [%1], %2
    54 00019B05 0F8547070000        <1>  jne L_error_incorrect_type
 33992 00019B0B 4C8B4D28                	mov r9, PARAM(1)
 33993                                  	assert_integer(r9)
    53 00019B0F 41803911            <1>  cmp byte [%1], %2
    54 00019B13 0F8539070000        <1>  jne L_error_incorrect_type
 33994 00019B19 498B7801                	mov rdi, qword [r8 + 1]
 33995 00019B1D 493B7901                	cmp rdi, qword [r9 + 1]
 33996 00019B21 7D0C                    	jge .L_false
 33997 00019B23 48B8-                   	mov rax, sob_boolean_true
 33997 00019B25 [0300000000000000] 
 33998 00019B2D EB0A                    	jmp .L_exit
 33999                                  .L_false:
 34000 00019B2F 48B8-                   	mov rax, sob_boolean_false
 34000 00019B31 [0200000000000000] 
 34001                                  .L_exit:
 34002 00019B39 C9                      	leave
 34003 00019B3A C22000                  	ret AND_KILL_FRAME(2)
 34004                                  
 34005                                  L_code_ptr_raw_less_than_qq:
 34006 00019B3D C8000000                        enter 0, 0
 34007 00019B41 48837D1802                      cmp COUNT, 2
 34008 00019B46 0F8567060000                    jne L_error_arg_count_2
 34009 00019B4C 488B7520                        mov rsi, PARAM(0)
 34010                                          assert_fraction(rsi)
    53 00019B50 803E12              <1>  cmp byte [%1], %2
    54 00019B53 0F85F9060000        <1>  jne L_error_incorrect_type
 34011 00019B59 488B7D28                        mov rdi, PARAM(1)
 34012                                          assert_fraction(rdi)
    53 00019B5D 803F12              <1>  cmp byte [%1], %2
    54 00019B60 0F85EC060000        <1>  jne L_error_incorrect_type
 34013 00019B66 488B4601                        mov rax, qword [rsi + 1] ; num1
 34014 00019B6A 4899                            cqo
 34015 00019B6C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 34016 00019B70 4889C1                          mov rcx, rax
 34017 00019B73 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 34018 00019B77 4899                            cqo
 34019 00019B79 48F76F01                        imul qword [rdi + 1]          ; num2
 34020 00019B7D 4829C1                          sub rcx, rax
 34021 00019B80 7D0C                            jge .L_false
 34022 00019B82 48B8-                           mov rax, sob_boolean_true
 34022 00019B84 [0300000000000000] 
 34023 00019B8C EB0A                            jmp .L_exit
 34024                                  .L_false:
 34025 00019B8E 48B8-                           mov rax, sob_boolean_false
 34025 00019B90 [0200000000000000] 
 34026                                  .L_exit:
 34027 00019B98 C9                              leave
 34028 00019B99 C22000                          ret AND_KILL_FRAME(2)
 34029                                  
 34030                                  L_code_ptr_raw_equal_rr:
 34031 00019B9C C8000000                        enter 0, 0
 34032 00019BA0 48837D1802                      cmp COUNT, 2
 34033 00019BA5 0F8508060000                    jne L_error_arg_count_2
 34034 00019BAB 488B7520                        mov rsi, PARAM(0)
 34035                                          assert_real(rsi)
    53 00019BAF 803E13              <1>  cmp byte [%1], %2
    54 00019BB2 0F859A060000        <1>  jne L_error_incorrect_type
 34036 00019BB8 488B7D28                        mov rdi, PARAM(1)
 34037                                          assert_real(rdi)
    53 00019BBC 803F13              <1>  cmp byte [%1], %2
    54 00019BBF 0F858D060000        <1>  jne L_error_incorrect_type
 34038 00019BC5 F20F104601                      movsd xmm0, qword [rsi + 1]
 34039 00019BCA F20F104F01                      movsd xmm1, qword [rdi + 1]
 34040 00019BCF 660F2FC1                        comisd xmm0, xmm1
 34041 00019BD3 750C                            jne .L_false
 34042 00019BD5 48B8-                           mov rax, sob_boolean_true
 34042 00019BD7 [0300000000000000] 
 34043 00019BDF EB0A                            jmp .L_exit
 34044                                  .L_false:
 34045 00019BE1 48B8-                           mov rax, sob_boolean_false
 34045 00019BE3 [0200000000000000] 
 34046                                  .L_exit:
 34047 00019BEB C9                              leave
 34048 00019BEC C22000                          ret AND_KILL_FRAME(2)
 34049                                          
 34050                                  L_code_ptr_raw_equal_zz:
 34051 00019BEF C8000000                	enter 0, 0
 34052 00019BF3 48837D1802              	cmp COUNT, 2
 34053 00019BF8 0F85B5050000            	jne L_error_arg_count_2
 34054 00019BFE 4C8B4520                	mov r8, PARAM(0)
 34055                                  	assert_integer(r8)
    53 00019C02 41803811            <1>  cmp byte [%1], %2
    54 00019C06 0F8546060000        <1>  jne L_error_incorrect_type
 34056 00019C0C 4C8B4D28                	mov r9, PARAM(1)
 34057                                  	assert_integer(r9)
    53 00019C10 41803911            <1>  cmp byte [%1], %2
    54 00019C14 0F8538060000        <1>  jne L_error_incorrect_type
 34058 00019C1A 498B7801                	mov rdi, qword [r8 + 1]
 34059 00019C1E 493B7901                	cmp rdi, qword [r9 + 1]
 34060 00019C22 750C                    	jne .L_false
 34061 00019C24 48B8-                   	mov rax, sob_boolean_true
 34061 00019C26 [0300000000000000] 
 34062 00019C2E EB0A                    	jmp .L_exit
 34063                                  .L_false:
 34064 00019C30 48B8-                   	mov rax, sob_boolean_false
 34064 00019C32 [0200000000000000] 
 34065                                  .L_exit:
 34066 00019C3A C9                      	leave
 34067 00019C3B C22000                  	ret AND_KILL_FRAME(2)
 34068                                  
 34069                                  L_code_ptr_raw_equal_qq:
 34070 00019C3E C8000000                        enter 0, 0
 34071 00019C42 48837D1802                      cmp COUNT, 2
 34072 00019C47 0F8566050000                    jne L_error_arg_count_2
 34073 00019C4D 488B7520                        mov rsi, PARAM(0)
 34074                                          assert_fraction(rsi)
    53 00019C51 803E12              <1>  cmp byte [%1], %2
    54 00019C54 0F85F8050000        <1>  jne L_error_incorrect_type
 34075 00019C5A 488B7D28                        mov rdi, PARAM(1)
 34076                                          assert_fraction(rdi)
    53 00019C5E 803F12              <1>  cmp byte [%1], %2
    54 00019C61 0F85EB050000        <1>  jne L_error_incorrect_type
 34077 00019C67 488B4601                        mov rax, qword [rsi + 1] ; num1
 34078 00019C6B 4899                            cqo
 34079 00019C6D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 34080 00019C71 4889C1                          mov rcx, rax
 34081 00019C74 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 34082 00019C78 4899                            cqo
 34083 00019C7A 48F76F01                        imul qword [rdi + 1]          ; num2
 34084 00019C7E 4829C1                          sub rcx, rax
 34085 00019C81 750C                            jne .L_false
 34086 00019C83 48B8-                           mov rax, sob_boolean_true
 34086 00019C85 [0300000000000000] 
 34087 00019C8D EB0A                            jmp .L_exit
 34088                                  .L_false:
 34089 00019C8F 48B8-                           mov rax, sob_boolean_false
 34089 00019C91 [0200000000000000] 
 34090                                  .L_exit:
 34091 00019C99 C9                              leave
 34092 00019C9A C22000                          ret AND_KILL_FRAME(2)
 34093                                  
 34094                                  L_code_ptr_quotient:
 34095 00019C9D C8000000                        enter 0, 0
 34096 00019CA1 48837D1802                      cmp COUNT, 2
 34097 00019CA6 0F8507050000                    jne L_error_arg_count_2
 34098 00019CAC 488B7520                        mov rsi, PARAM(0)
 34099                                          assert_integer(rsi)
    53 00019CB0 803E11              <1>  cmp byte [%1], %2
    54 00019CB3 0F8599050000        <1>  jne L_error_incorrect_type
 34100 00019CB9 488B7D28                        mov rdi, PARAM(1)
 34101                                          assert_integer(rdi)
    53 00019CBD 803F11              <1>  cmp byte [%1], %2
    54 00019CC0 0F858C050000        <1>  jne L_error_incorrect_type
 34102 00019CC6 488B4601                        mov rax, qword [rsi + 1]
 34103 00019CCA 488B5F01                        mov rbx, qword [rdi + 1]
 34104 00019CCE 4883FB00                        cmp rbx, 0
 34105 00019CD2 0F84AB050000                    je L_error_division_by_zero
 34106 00019CD8 4899                            cqo
 34107 00019CDA 48F7FB                          idiv rbx
 34108 00019CDD 4889C7                          mov rdi, rax
 34109 00019CE0 E8E8030000                      call make_integer
 34110 00019CE5 C9                              leave
 34111 00019CE6 C22000                          ret AND_KILL_FRAME(2)
 34112                                          
 34113                                  L_code_ptr_remainder:
 34114 00019CE9 C8000000                        enter 0, 0
 34115 00019CED 48837D1802                      cmp COUNT, 2
 34116 00019CF2 0F85BB040000                    jne L_error_arg_count_2
 34117 00019CF8 488B7520                        mov rsi, PARAM(0)
 34118                                          assert_integer(rsi)
    53 00019CFC 803E11              <1>  cmp byte [%1], %2
    54 00019CFF 0F854D050000        <1>  jne L_error_incorrect_type
 34119 00019D05 488B7D28                        mov rdi, PARAM(1)
 34120                                          assert_integer(rdi)
    53 00019D09 803F11              <1>  cmp byte [%1], %2
    54 00019D0C 0F8540050000        <1>  jne L_error_incorrect_type
 34121 00019D12 488B4601                        mov rax, qword [rsi + 1]
 34122 00019D16 488B5F01                        mov rbx, qword [rdi + 1]
 34123 00019D1A 4883FB00                        cmp rbx, 0
 34124 00019D1E 0F845F050000                    je L_error_division_by_zero
 34125 00019D24 4899                            cqo
 34126 00019D26 48F7FB                          idiv rbx
 34127 00019D29 4889D7                          mov rdi, rdx
 34128 00019D2C E89C030000                      call make_integer
 34129 00019D31 C9                              leave
 34130 00019D32 C22000                          ret AND_KILL_FRAME(2)
 34131                                  
 34132                                  L_code_ptr_set_car:
 34133 00019D35 C8000000                        enter 0, 0
 34134 00019D39 48837D1802                      cmp COUNT, 2
 34135 00019D3E 0F856F040000                    jne L_error_arg_count_2
 34136 00019D44 488B4520                        mov rax, PARAM(0)
 34137                                          assert_pair(rax)
    53 00019D48 803821              <1>  cmp byte [%1], %2
    54 00019D4B 0F8501050000        <1>  jne L_error_incorrect_type
 34138 00019D51 488B5D28                        mov rbx, PARAM(1)
 34139 00019D55 48895801                        mov SOB_PAIR_CAR(rax), rbx
 34140 00019D59 48B8-                           mov rax, sob_void
 34140 00019D5B [0000000000000000] 
 34141 00019D63 C9                              leave
 34142 00019D64 C22000                          ret AND_KILL_FRAME(2)
 34143                                  
 34144                                  L_code_ptr_set_cdr:
 34145 00019D67 C8000000                        enter 0, 0
 34146 00019D6B 48837D1802                      cmp COUNT, 2
 34147 00019D70 0F853D040000                    jne L_error_arg_count_2
 34148 00019D76 488B4520                        mov rax, PARAM(0)
 34149                                          assert_pair(rax)
    53 00019D7A 803821              <1>  cmp byte [%1], %2
    54 00019D7D 0F85CF040000        <1>  jne L_error_incorrect_type
 34150 00019D83 488B5D28                        mov rbx, PARAM(1)
 34151 00019D87 48895809                        mov SOB_PAIR_CDR(rax), rbx
 34152 00019D8B 48B8-                           mov rax, sob_void
 34152 00019D8D [0000000000000000] 
 34153 00019D95 C9                              leave
 34154 00019D96 C22000                          ret AND_KILL_FRAME(2)
 34155                                  
 34156                                  L_code_ptr_string_ref:
 34157 00019D99 C8000000                        enter 0, 0
 34158 00019D9D 48837D1802                      cmp COUNT, 2
 34159 00019DA2 0F850B040000                    jne L_error_arg_count_2
 34160 00019DA8 488B7D20                        mov rdi, PARAM(0)
 34161                                          assert_string(rdi)
    53 00019DAC 803F03              <1>  cmp byte [%1], %2
    54 00019DAF 0F859D040000        <1>  jne L_error_incorrect_type
 34162 00019DB5 488B7528                        mov rsi, PARAM(1)
 34163                                          assert_integer(rsi)
    53 00019DB9 803E11              <1>  cmp byte [%1], %2
    54 00019DBC 0F8590040000        <1>  jne L_error_incorrect_type
 34164 00019DC2 488B5701                        mov rdx, qword [rdi + 1]
 34165 00019DC6 488B4E01                        mov rcx, qword [rsi + 1]
 34166 00019DCA 4839D1                          cmp rcx, rdx
 34167 00019DCD 0F8D14030000                    jge L_error_integer_range
 34168 00019DD3 4883F900                        cmp rcx, 0
 34169 00019DD7 0F8C0A030000                    jl L_error_integer_range
 34170 00019DDD 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 34171 00019DE1 BF02000000                      mov rdi, 2
 34172 00019DE6 E8D9E6FFFF                      call malloc
 34173 00019DEB C60002                          mov byte [rax], T_char
 34174 00019DEE 885801                          mov byte [rax + 1], bl
 34175 00019DF1 C9                              leave
 34176 00019DF2 C22000                          ret AND_KILL_FRAME(2)
 34177                                  
 34178                                  L_code_ptr_vector_ref:
 34179 00019DF5 C8000000                        enter 0, 0
 34180 00019DF9 48837D1802                      cmp COUNT, 2
 34181 00019DFE 0F85AF030000                    jne L_error_arg_count_2
 34182 00019E04 488B7D20                        mov rdi, PARAM(0)
 34183                                          assert_vector(rdi)
    53 00019E08 803F22              <1>  cmp byte [%1], %2
    54 00019E0B 0F8541040000        <1>  jne L_error_incorrect_type
 34184 00019E11 488B7528                        mov rsi, PARAM(1)
 34185                                          assert_integer(rsi)
    53 00019E15 803E11              <1>  cmp byte [%1], %2
    54 00019E18 0F8534040000        <1>  jne L_error_incorrect_type
 34186 00019E1E 488B5701                        mov rdx, qword [rdi + 1]
 34187 00019E22 488B4E01                        mov rcx, qword [rsi + 1]
 34188 00019E26 4839D1                          cmp rcx, rdx
 34189 00019E29 0F8DB8020000                    jge L_error_integer_range
 34190 00019E2F 4883F900                        cmp rcx, 0
 34191 00019E33 0F8CAE020000                    jl L_error_integer_range
 34192 00019E39 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 34193 00019E3E C9                              leave
 34194 00019E3F C22000                          ret AND_KILL_FRAME(2)
 34195                                  
 34196                                  L_code_ptr_vector_set:
 34197 00019E42 C8000000                        enter 0, 0
 34198 00019E46 48837D1803                      cmp COUNT, 3
 34199 00019E4B 0F85CC030000                    jne L_error_arg_count_3
 34200 00019E51 488B7D20                        mov rdi, PARAM(0)
 34201                                          assert_vector(rdi)
    53 00019E55 803F22              <1>  cmp byte [%1], %2
    54 00019E58 0F85F4030000        <1>  jne L_error_incorrect_type
 34202 00019E5E 488B7528                        mov rsi, PARAM(1)
 34203                                          assert_integer(rsi)
    53 00019E62 803E11              <1>  cmp byte [%1], %2
    54 00019E65 0F85E7030000        <1>  jne L_error_incorrect_type
 34204 00019E6B 488B5701                        mov rdx, qword [rdi + 1]
 34205 00019E6F 488B4E01                        mov rcx, qword [rsi + 1]
 34206 00019E73 4839D1                          cmp rcx, rdx
 34207 00019E76 0F8D6B020000                    jge L_error_integer_range
 34208 00019E7C 4883F900                        cmp rcx, 0
 34209 00019E80 0F8C61020000                    jl L_error_integer_range
 34210 00019E86 488B4530                        mov rax, PARAM(2)
 34211 00019E8A 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 34212 00019E8F 48B8-                           mov rax, sob_void
 34212 00019E91 [0000000000000000] 
 34213 00019E99 C9                              leave
 34214 00019E9A C22800                          ret AND_KILL_FRAME(3)
 34215                                  
 34216                                  L_code_ptr_string_set:
 34217 00019E9D C8000000                        enter 0, 0
 34218 00019EA1 48837D1803                      cmp COUNT, 3
 34219 00019EA6 0F8571030000                    jne L_error_arg_count_3
 34220 00019EAC 488B7D20                        mov rdi, PARAM(0)
 34221                                          assert_string(rdi)
    53 00019EB0 803F03              <1>  cmp byte [%1], %2
    54 00019EB3 0F8599030000        <1>  jne L_error_incorrect_type
 34222 00019EB9 488B7528                        mov rsi, PARAM(1)
 34223                                          assert_integer(rsi)
    53 00019EBD 803E11              <1>  cmp byte [%1], %2
    54 00019EC0 0F858C030000        <1>  jne L_error_incorrect_type
 34224 00019EC6 488B5701                        mov rdx, qword [rdi + 1]
 34225 00019ECA 488B4E01                        mov rcx, qword [rsi + 1]
 34226 00019ECE 4839D1                          cmp rcx, rdx
 34227 00019ED1 0F8D10020000                    jge L_error_integer_range
 34228 00019ED7 4883F900                        cmp rcx, 0
 34229 00019EDB 0F8C06020000                    jl L_error_integer_range
 34230 00019EE1 488B4530                        mov rax, PARAM(2)
 34231                                          assert_char(rax)
    53 00019EE5 803802              <1>  cmp byte [%1], %2
    54 00019EE8 0F8564030000        <1>  jne L_error_incorrect_type
 34232 00019EEE 8A4001                          mov al, byte [rax + 1]
 34233 00019EF1 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 34234 00019EF5 48B8-                           mov rax, sob_void
 34234 00019EF7 [0000000000000000] 
 34235 00019EFF C9                              leave
 34236 00019F00 C22800                          ret AND_KILL_FRAME(3)
 34237                                  
 34238                                  L_code_ptr_make_vector:
 34239 00019F03 C8000000                        enter 0, 0
 34240 00019F07 48837D1802                      cmp COUNT, 2
 34241 00019F0C 0F85A1020000                    jne L_error_arg_count_2
 34242 00019F12 488B4D20                        mov rcx, PARAM(0)
 34243                                          assert_integer(rcx)
    53 00019F16 803911              <1>  cmp byte [%1], %2
    54 00019F19 0F8533030000        <1>  jne L_error_incorrect_type
 34244 00019F1F 488B4901                        mov rcx, qword [rcx + 1]
 34245 00019F23 4883F900                        cmp rcx, 0
 34246 00019F27 0F8CBA010000                    jl L_error_integer_range
 34247 00019F2D 488B5528                        mov rdx, PARAM(1)
 34248 00019F31 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 34249 00019F39 E886E5FFFF                      call malloc
 34250 00019F3E C60022                          mov byte [rax], T_vector
 34251 00019F41 48894801                        mov qword [rax + 1], rcx
 34252 00019F45 41B800000000                    mov r8, 0
 34253                                  .L0:
 34254 00019F4B 4939C8                          cmp r8, rcx
 34255 00019F4E 740A                            je .L1
 34256 00019F50 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 34257 00019F55 49FFC0                          inc r8
 34258 00019F58 EBF1                            jmp .L0
 34259                                  .L1:
 34260 00019F5A C9                              leave
 34261 00019F5B C22000                          ret AND_KILL_FRAME(2)
 34262                                          
 34263                                  L_code_ptr_make_string:
 34264 00019F5E C8000000                        enter 0, 0
 34265 00019F62 48837D1802                      cmp COUNT, 2
 34266 00019F67 0F8546020000                    jne L_error_arg_count_2
 34267 00019F6D 488B4D20                        mov rcx, PARAM(0)
 34268                                          assert_integer(rcx)
    53 00019F71 803911              <1>  cmp byte [%1], %2
    54 00019F74 0F85D8020000        <1>  jne L_error_incorrect_type
 34269 00019F7A 488B4901                        mov rcx, qword [rcx + 1]
 34270 00019F7E 4883F900                        cmp rcx, 0
 34271 00019F82 0F8C5F010000                    jl L_error_integer_range
 34272 00019F88 488B5528                        mov rdx, PARAM(1)
 34273                                          assert_char(rdx)
    53 00019F8C 803A02              <1>  cmp byte [%1], %2
    54 00019F8F 0F85BD020000        <1>  jne L_error_incorrect_type
 34274 00019F95 8A5201                          mov dl, byte [rdx + 1]
 34275 00019F98 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 34276 00019F9C E823E5FFFF                      call malloc
 34277 00019FA1 C60003                          mov byte [rax], T_string
 34278 00019FA4 48894801                        mov qword [rax + 1], rcx
 34279 00019FA8 41B800000000                    mov r8, 0
 34280                                  .L0:
 34281 00019FAE 4939C8                          cmp r8, rcx
 34282 00019FB1 740A                            je .L1
 34283 00019FB3 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 34284 00019FB8 49FFC0                          inc r8
 34285 00019FBB EBF1                            jmp .L0
 34286                                  .L1:
 34287 00019FBD C9                              leave
 34288 00019FBE C22000                          ret AND_KILL_FRAME(2)
 34289                                  
 34290                                  L_code_ptr_numerator:
 34291 00019FC1 C8000000                        enter 0, 0
 34292 00019FC5 48837D1801                      cmp COUNT, 1
 34293 00019FCA 0F85AE010000                    jne L_error_arg_count_1
 34294 00019FD0 488B4520                        mov rax, PARAM(0)
 34295                                          assert_fraction(rax)
    53 00019FD4 803812              <1>  cmp byte [%1], %2
    54 00019FD7 0F8575020000        <1>  jne L_error_incorrect_type
 34296 00019FDD 488B7801                        mov rdi, qword [rax + 1]
 34297 00019FE1 E8E7000000                      call make_integer
 34298 00019FE6 C9                              leave
 34299 00019FE7 C21800                          ret AND_KILL_FRAME(1)
 34300                                          
 34301                                  L_code_ptr_denominator:
 34302 00019FEA C8000000                        enter 0, 0
 34303 00019FEE 48837D1801                      cmp COUNT, 1
 34304 00019FF3 0F8585010000                    jne L_error_arg_count_1
 34305 00019FF9 488B4520                        mov rax, PARAM(0)
 34306                                          assert_fraction(rax)
    53 00019FFD 803812              <1>  cmp byte [%1], %2
    54 0001A000 0F854C020000        <1>  jne L_error_incorrect_type
 34307 0001A006 488B7809                        mov rdi, qword [rax + 1 + 8]
 34308 0001A00A E8BE000000                      call make_integer
 34309 0001A00F C9                              leave
 34310 0001A010 C21800                          ret AND_KILL_FRAME(1)
 34311                                  
 34312                                  L_code_ptr_is_eq:
 34313 0001A013 C8000000                	enter 0, 0
 34314 0001A017 48837D1802              	cmp COUNT, 2
 34315 0001A01C 0F8591010000            	jne L_error_arg_count_2
 34316 0001A022 488B7D20                	mov rdi, PARAM(0)
 34317 0001A026 488B7528                	mov rsi, PARAM(1)
 34318 0001A02A 4839F7                  	cmp rdi, rsi
 34319 0001A02D 746C                    	je .L_eq_true
 34320 0001A02F 8A17                    	mov dl, byte [rdi]
 34321 0001A031 3A16                    	cmp dl, byte [rsi]
 34322 0001A033 7572                    	jne .L_eq_false
 34323 0001A035 80FA02                  	cmp dl, T_char
 34324 0001A038 7459                    	je .L_char
 34325 0001A03A 80FA41                  	cmp dl, T_interned_symbol
 34326 0001A03D 7440                    	je .L_interned_symbol
 34327 0001A03F 80FA42                          cmp dl, T_uninterned_symbol
 34328 0001A042 7443                            je .L_uninterned_symbol
 34329 0001A044 80FA13                  	cmp dl, T_real
 34330 0001A047 742E                    	je .L_real
 34331 0001A049 80FA12                  	cmp dl, T_fraction
 34332 0001A04C 7413                    	je .L_fraction
 34333 0001A04E 80FA11                          cmp dl, T_integer
 34334 0001A051 7402                            je .L_integer
 34335 0001A053 EB52                    	jmp .L_eq_false
 34336                                  .L_integer:
 34337 0001A055 488B4601                        mov rax, qword [rsi + 1]
 34338 0001A059 483B4701                        cmp rax, qword [rdi + 1]
 34339 0001A05D 7548                            jne .L_eq_false
 34340 0001A05F EB3A                            jmp .L_eq_true
 34341                                  .L_fraction:
 34342 0001A061 488B4601                	mov rax, qword [rsi + 1]
 34343 0001A065 483B4701                	cmp rax, qword [rdi + 1]
 34344 0001A069 753C                    	jne .L_eq_false
 34345 0001A06B 488B4609                	mov rax, qword [rsi + 1 + 8]
 34346 0001A06F 483B4709                	cmp rax, qword [rdi + 1 + 8]
 34347 0001A073 7532                    	jne .L_eq_false
 34348 0001A075 EB24                    	jmp .L_eq_true
 34349                                  .L_real:
 34350 0001A077 488B4601                	mov rax, qword [rsi + 1]
 34351 0001A07B 483B4701                	cmp rax, qword [rdi + 1]
 34352                                  .L_interned_symbol:
 34353                                  	; never reached, because interned_symbols are static!
 34354                                  	; but I'm keeping it in case, I'll ever change
 34355                                  	; the implementation
 34356 0001A07F 488B4601                	mov rax, qword [rsi + 1]
 34357 0001A083 483B4701                	cmp rax, qword [rdi + 1]
 34358                                  .L_uninterned_symbol:
 34359 0001A087 4C8B4701                        mov r8, qword [rdi + 1]
 34360 0001A08B 4C3B4601                        cmp r8, qword [rsi + 1]
 34361 0001A08F 7516                            jne .L_eq_false
 34362 0001A091 EB08                            jmp .L_eq_true
 34363                                  .L_char:
 34364 0001A093 8A5E01                  	mov bl, byte [rsi + 1]
 34365 0001A096 3A5F01                  	cmp bl, byte [rdi + 1]
 34366 0001A099 750C                    	jne .L_eq_false
 34367                                  .L_eq_true:
 34368 0001A09B 48B8-                   	mov rax, sob_boolean_true
 34368 0001A09D [0300000000000000] 
 34369 0001A0A5 EB0A                    	jmp .L_eq_exit
 34370                                  .L_eq_false:
 34371 0001A0A7 48B8-                   	mov rax, sob_boolean_false
 34371 0001A0A9 [0200000000000000] 
 34372                                  .L_eq_exit:
 34373 0001A0B1 C9                      	leave
 34374 0001A0B2 C22000                  	ret AND_KILL_FRAME(2)
 34375                                  
 34376                                  make_real:
 34377 0001A0B5 C8000000                        enter 0, 0
 34378 0001A0B9 BF09000000                      mov rdi, (1 + 8)
 34379 0001A0BE E801E4FFFF                      call malloc
 34380 0001A0C3 C60013                          mov byte [rax], T_real
 34381 0001A0C6 F20F114001                      movsd qword [rax + 1], xmm0
 34382 0001A0CB C9                              leave 
 34383 0001A0CC C3                              ret
 34384                                          
 34385                                  make_integer:
 34386 0001A0CD C8000000                        enter 0, 0
 34387 0001A0D1 4889FE                          mov rsi, rdi
 34388 0001A0D4 BF09000000                      mov rdi, (1 + 8)
 34389 0001A0D9 E8E6E3FFFF                      call malloc
 34390 0001A0DE C60011                          mov byte [rax], T_integer
 34391 0001A0E1 48897001                        mov qword [rax + 1], rsi
 34392 0001A0E5 C9                              leave
 34393 0001A0E6 C3                              ret
 34394                                          
 34395                                  L_error_integer_range:
 34396 0001A0E7 488B3C25[00000000]              mov rdi, qword [stderr]
 34397 0001A0EF 48BE-                           mov rsi, fmt_integer_range
 34397 0001A0F1 [4E1D000000000000] 
 34398 0001A0F9 B800000000                      mov rax, 0
 34399                                          ENTER
    44 0001A0FE C8000000            <1>  enter 0, 0
    45 0001A102 4883E4F0            <1>  and rsp, ~15
 34400 0001A106 E8(00000000)                    call fprintf
 34401                                          LEAVE
    49 0001A10B C9                  <1>  leave
 34402 0001A10C 48C7C0FBFFFFFF                  mov rax, -5
 34403 0001A113 E8(00000000)                    call exit
 34404                                  
 34405                                  L_error_arg_negative:
 34406 0001A118 488B3C25[00000000]              mov rdi, qword [stderr]
 34407 0001A120 48BE-                           mov rsi, fmt_arg_negative
 34407 0001A122 [261C000000000000] 
 34408 0001A12A B800000000                      mov rax, 0
 34409                                          ENTER
    44 0001A12F C8000000            <1>  enter 0, 0
    45 0001A133 4883E4F0            <1>  and rsp, ~15
 34410 0001A137 E8(00000000)                    call fprintf
 34411                                          LEAVE
    49 0001A13C C9                  <1>  leave
 34412 0001A13D 48C7C0FDFFFFFF                  mov rax, -3
 34413 0001A144 E8(00000000)                    call exit
 34414                                  
 34415                                  L_error_arg_count_0:
 34416 0001A149 488B3C25[00000000]              mov rdi, qword [stderr]
 34417 0001A151 48BE-                           mov rsi, fmt_arg_count_0
 34417 0001A153 [4C1C000000000000] 
 34418 0001A15B 488B5518                        mov rdx, COUNT
 34419 0001A15F B800000000                      mov rax, 0
 34420                                          ENTER
    44 0001A164 C8000000            <1>  enter 0, 0
    45 0001A168 4883E4F0            <1>  and rsp, ~15
 34421 0001A16C E8(00000000)                    call fprintf
 34422                                          LEAVE
    49 0001A171 C9                  <1>  leave
 34423 0001A172 48C7C0FDFFFFFF                  mov rax, -3
 34424 0001A179 E8(00000000)                    call exit
 34425                                  
 34426                                  L_error_arg_count_1:
 34427 0001A17E 488B3C25[00000000]              mov rdi, qword [stderr]
 34428 0001A186 48BE-                           mov rsi, fmt_arg_count_1
 34428 0001A188 [741C000000000000] 
 34429 0001A190 488B5518                        mov rdx, COUNT
 34430 0001A194 B800000000                      mov rax, 0
 34431                                          ENTER
    44 0001A199 C8000000            <1>  enter 0, 0
    45 0001A19D 4883E4F0            <1>  and rsp, ~15
 34432 0001A1A1 E8(00000000)                    call fprintf
 34433                                          LEAVE
    49 0001A1A6 C9                  <1>  leave
 34434 0001A1A7 48C7C0FDFFFFFF                  mov rax, -3
 34435 0001A1AE E8(00000000)                    call exit
 34436                                  
 34437                                  L_error_arg_count_2:
 34438 0001A1B3 488B3C25[00000000]              mov rdi, qword [stderr]
 34439 0001A1BB 48BE-                           mov rsi, fmt_arg_count_2
 34439 0001A1BD [DA1C000000000000] 
 34440 0001A1C5 488B5518                        mov rdx, COUNT
 34441 0001A1C9 B800000000                      mov rax, 0
 34442                                          ENTER
    44 0001A1CE C8000000            <1>  enter 0, 0
    45 0001A1D2 4883E4F0            <1>  and rsp, ~15
 34443 0001A1D6 E8(00000000)                    call fprintf
 34444                                          LEAVE
    49 0001A1DB C9                  <1>  leave
 34445 0001A1DC 48C7C0FDFFFFFF                  mov rax, -3
 34446 0001A1E3 E8(00000000)                    call exit
 34447                                  
 34448                                  L_error_arg_count_12:
 34449 0001A1E8 488B3C25[00000000]              mov rdi, qword [stderr]
 34450 0001A1F0 48BE-                           mov rsi, fmt_arg_count_12
 34450 0001A1F2 [9A1C000000000000] 
 34451 0001A1FA 488B5518                        mov rdx, COUNT
 34452 0001A1FE B800000000                      mov rax, 0
 34453                                          ENTER
    44 0001A203 C8000000            <1>  enter 0, 0
    45 0001A207 4883E4F0            <1>  and rsp, ~15
 34454 0001A20B E8(00000000)                    call fprintf
 34455                                          LEAVE
    49 0001A210 C9                  <1>  leave
 34456 0001A211 48C7C0FDFFFFFF                  mov rax, -3
 34457 0001A218 E8(00000000)                    call exit
 34458                                  
 34459                                  L_error_arg_count_3:
 34460 0001A21D 488B3C25[00000000]              mov rdi, qword [stderr]
 34461 0001A225 48BE-                           mov rsi, fmt_arg_count_3
 34461 0001A227 [011D000000000000] 
 34462 0001A22F 488B5518                        mov rdx, COUNT
 34463 0001A233 B800000000                      mov rax, 0
 34464                                          ENTER
    44 0001A238 C8000000            <1>  enter 0, 0
    45 0001A23C 4883E4F0            <1>  and rsp, ~15
 34465 0001A240 E8(00000000)                    call fprintf
 34466                                          LEAVE
    49 0001A245 C9                  <1>  leave
 34467 0001A246 48C7C0FDFFFFFF                  mov rax, -3
 34468 0001A24D E8(00000000)                    call exit
 34469                                          
 34470                                  L_error_incorrect_type:
 34471 0001A252 488B3C25[00000000]              mov rdi, qword [stderr]
 34472 0001A25A 48BE-                           mov rsi, fmt_type
 34472 0001A25C [2A1D000000000000] 
 34473 0001A264 B800000000                      mov rax, 0
 34474                                          ENTER
    44 0001A269 C8000000            <1>  enter 0, 0
    45 0001A26D 4883E4F0            <1>  and rsp, ~15
 34475 0001A271 E8(00000000)                    call fprintf
 34476                                          LEAVE
    49 0001A276 C9                  <1>  leave
 34477 0001A277 48C7C0FCFFFFFF                  mov rax, -4
 34478 0001A27E E8(00000000)                    call exit
 34479                                  
 34480                                  L_error_division_by_zero:
 34481 0001A283 488B3C25[00000000]              mov rdi, qword [stderr]
 34482 0001A28B 48BE-                           mov rsi, fmt_division_by_zero
 34482 0001A28D [6B1D000000000000] 
 34483 0001A295 B800000000                      mov rax, 0
 34484                                          ENTER
    44 0001A29A C8000000            <1>  enter 0, 0
    45 0001A29E 4883E4F0            <1>  and rsp, ~15
 34485 0001A2A2 E8(00000000)                    call fprintf
 34486                                          LEAVE
    49 0001A2A7 C9                  <1>  leave
 34487 0001A2A8 48C7C0F8FFFFFF                  mov rax, -8
 34488 0001A2AF E8(00000000)                    call exit
 34489                                  
 34490                                  section .data
 34491                                  gensym_count:
 34492 00001C1B 0000000000000000                dq 0
 34493                                  fmt_char:
 34494 00001C23 256300                          db `%c\0`
 34495                                  fmt_arg_negative:
 34496 00001C26 212121205468652061-             db `!!! The argument cannot be negative.\n\0`
 34496 00001C2F 7267756D656E742063-
 34496 00001C38 616E6E6F7420626520-
 34496 00001C41 6E656761746976652E-
 34496 00001C4A 0A00               
 34497                                  fmt_arg_count_0:
 34498 00001C4C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 34498 00001C55 74696E67207A65726F-
 34498 00001C5E 20617267756D656E74-
 34498 00001C67 732E20466F756E6420-
 34498 00001C70 25640A00           
 34499                                  fmt_arg_count_1:
 34500 00001C74 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 34500 00001C7D 74696E67206F6E6520-
 34500 00001C86 617267756D656E742E-
 34500 00001C8F 20466F756E64202564-
 34500 00001C98 0A00               
 34501                                  fmt_arg_count_12:
 34502 00001C9A 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 34502 00001CA3 74696E67206F6E6520-
 34502 00001CAC 726571756972656420-
 34502 00001CB5 616E64206F6E65206F-
 34502 00001CBE 7074696F6E616C2061-
 34502 00001CC7 7267756D656E742E20-
 34502 00001CD0 466F756E642025640A-
 34502 00001CD9 00                 
 34503                                  fmt_arg_count_2:
 34504 00001CDA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 34504 00001CE3 74696E672074776F20-
 34504 00001CEC 617267756D656E7473-
 34504 00001CF5 2E20466F756E642025-
 34504 00001CFE 640A00             
 34505                                  fmt_arg_count_3:
 34506 00001D01 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 34506 00001D0A 74696E672074687265-
 34506 00001D13 6520617267756D656E-
 34506 00001D1C 74732E20466F756E64-
 34506 00001D25 2025640A00         
 34507                                  fmt_type:
 34508 00001D2A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 34508 00001D33 696F6E207061737365-
 34508 00001D3C 6420696E636F727265-
 34508 00001D45 637420747970650A00 
 34509                                  fmt_integer_range:
 34510 00001D4E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 34510 00001D57 7265637420696E7465-
 34510 00001D60 6765722072616E6765-
 34510 00001D69 0A00               
 34511                                  fmt_division_by_zero:
 34512 00001D6B 212121204469766973-             db `!!! Division by zero\n\0`
 34512 00001D74 696F6E206279207A65-
 34512 00001D7D 726F0A00           
 34513                                  fmt_scheme_error_part_1:
 34514 00001D81 0A2121212054686520-             db `\n!!! The procedure \0`
 34514 00001D8A 70726F636564757265-
 34514 00001D93 2000               
 34515                                  fmt_scheme_error_part_2:
 34516 00001D95 2061736B656420746F-             db ` asked to terminate the program\n`
 34516 00001D9E 207465726D696E6174-
 34516 00001DA7 65207468652070726F-
 34516 00001DB0 6772616D0A         
 34517 00001DB5 202020207769746820-             db `    with the following message:\n\n\0`
 34517 00001DBE 74686520666F6C6C6F-
 34517 00001DC7 77696E67206D657373-
 34517 00001DD0 6167653A0A0A00     
 34518                                  fmt_scheme_error_part_3:
 34519 00001DD7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 34519 00001DE0 210A0A00           
