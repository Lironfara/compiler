
             
(*          
          ^ (Printf.sprintf "%s:\n" label_arity_more)
          ^ "\tmov r10, qword[rsp + 2 * 8]\n \t ;r10 is holding the number of params paseed to the lambda \n" (*r10 = 6*)
          ^ "\tmov r11, r10\t ;for the list converting loop\n"
          ^(Printf.sprintf"\tsub r10, %d \t ;r10 now holding the number of opt params\n" (List.length params') (*3*))
          ^"\tdec r10 \t ;r10 is now holding how much the stack needs to shrink/8 \n"
          ^"\timul r10, 8\t ;r10 is now holding how much the stack needs to shrink\n"
          ^"\tmov r9, sob_nil\n"
          ^"\tmov r12, r11 \n"
          ^"\tadd r12, 3 \n"
          ^"\timul r12, 8 \t ;r12 =  8 * [3+ r11]\n"
          ^"\tadd r12, rsp \t ;r12 pointing to the top of the stack\n"
          ^"\tmov r13, r12\t; r13 is pointing to the top of the stack\n"
          (*Creating the list of opt params*)
          (*r11 is the number of params including opt*)
          ^(Printf.sprintf("%s:\n") label_loop) 
          ^(Printf.sprintf"\tcmp r11, %d\n" ((List.length params'))) (*r11 = 6, list.length = 3*)
          ^( Printf.sprintf "\tje %s\n" label_loop_exit)   
          (*loop starts here*)
          ^"\tmov rbx, qword[r12] \t; getting the param\n"  
          ^"\tmov rdi, 1+8+8\t;for pair\n"
          ^"\tcall malloc\t ;to create the pair in the stack\n" (*the pair is now in rax*)
          ^"\tmov byte [rax], T_pair\t ; to make it a pair\n"
          ^"\tmov qword[rax+1],rbx\t ;put the car in the last (not inside of the list yet) in the pair\n "
          ^"\tmov qword[rax+1+8],r9 \t ;the cdr is nil at first\n"
          ^"\tmov r9 , rax\t ; for the recursion \n"
          ^"\tdec r11\n"
          ^"\tsub r12, 8\n"
           ^( Printf.sprintf "\tjmp %s\n" label_loop)
           ^(Printf.sprintf "%s:\n" label_loop_exit)


           (*We now have : r9 is holding the list of opt params*)
           (*r10 is holding the in how much to add to the stack - needs to shrink*)
           (*r13 is holding the top of the stack before shrinking*)
           (*r12 is pointing to the last params that is not optional*)
           ^"\tmov rcx, qword[rsp] \t;rcx is holding the ret \n"
           ^"\tmov rbx, qword[rsp + 8 *1] \t ;rbx is holding the env \n"
           ^"\tmov qword[r13], r9 \t ;put the list at the top of the stack\n"
           ^"\tsub r13, 8\t ;supposed to start the copying to here\n"
           ^"\tadd rsp, r10\n"

           ^"\tmov r9, rsp\t ;r9 is pointing to the rsp of the stack\n"

           ^(Printf.sprintf "%s:\n"label_loop_params_opt)
           (*making a loop to move the params up*)
           ^"\tcmp r13, r9\n"
           ^(Printf.sprintf"\tje %s\n" label_loop_params_end_opt)
           ^"\tmov rax, qword[r12]\t ;getting the param\n"
            ^"\tmov qword[r13], rax\n"
            ^"\tsub r13, 8\n"
            ^"\tsub r12, 8\n"
            ^(Printf.sprintf "\tjmp %s\n" label_loop_params_opt)
            ^(Printf.sprintf "%s:\n" label_loop_params_end_opt)
           
          
            ^ "\tenter 0, 0\n"
            ^ (run ((List.length params') + 1) (env + 1) body)
            ^ "\tleave\n"
            ^ (Printf.sprintf "\tret AND_KILL_FRAME(%d)\n" ((List.length params') + 1)) (*the number of arguments you need to remove from stack*)
            ^ (Printf.sprintf "%s:\t; new closure is in rax\n" label_end) *) 














